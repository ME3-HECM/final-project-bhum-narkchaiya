

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Dec 11 14:33:37 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    67   000000                     
    68                           ; Version 2.35
    69                           ; Generated 05/05/2021 GMT
    70                           ; 
    71                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution. Publication is not required when
    85                           ;        this file is used in an embedded application.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F67K40 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103   000000                     _TX4REG	set	3812
   104   000000                     _RC4STAbits	set	3815
   105   000000                     _SP4BRGH	set	3814
   106   000000                     _T0CON0bits	set	4053
   107   000000                     _T0CON1bits	set	4054
   108   000000                     _TMR0H	set	4052
   109   000000                     _TRISGbits	set	3975
   110   000000                     _TRISEbits	set	3973
   111   000000                     _LATFbits	set	3966
   112   000000                     _TRISFbits	set	3974
   113   000000                     _LATG	set	3967
   114   000000                     _LATE	set	3965
   115   000000                     _SSP2CON2bits	set	3802
   116   000000                     _LATGbits	set	3967
   117   000000                     _LATEbits	set	3965
   118   000000                     _RX4PPS	set	3605
   119   000000                     _SSP2CLKPPS	set	3612
   120   000000                     _SSP2DATPPS	set	3613
   121   000000                     _ANSELDbits	set	3751
   122   000000                     _ANSELFbits	set	3764
   123   000000                     _LATDbits	set	3964
   124   000000                     _LATHbits	set	3968
   125   000000                     _TRISDbits	set	3972
   126   000000                     _TRISHbits	set	3976
   127   000000                     _PORTFbits	set	3982
   128   000000                     _PWM7DCH	set	4000
   129   000000                     _PWM6DCH	set	4003
   130   000000                     _TRISCbits	set	3971
   131   000000                     _SSP2BUF	set	3797
   132   000000                     _SSP2ADD	set	3798
   133   000000                     _SSP2CON1bits	set	3801
   134   000000                     _RC4REG	set	3811
   135   000000                     _SP4BRGL	set	3813
   136   000000                     _TX4STAbits	set	3816
   137   000000                     _BAUD4CONbits	set	3817
   138   000000                     _LATCbits	set	3963
   139   000000                     _SSP2CON2	set	3802
   140   000000                     _SSP2STAT	set	3800
   141   000000                     _IPR0bits	set	3615
   142   000000                     _PIE0bits	set	3625
   143   000000                     _RC7PPS	set	3689
   144   000000                     _RD5PPS	set	3695
   145   000000                     _RE2PPS	set	3700
   146   000000                     _RD6PPS	set	3696
   147   000000                     _PWM6CONbits	set	4004
   148   000000                     _T2PR	set	4028
   149   000000                     _T2CONbits	set	4029
   150   000000                     _INTCONbits	set	4082
   151   000000                     _PWM7CONbits	set	4001
   152   000000                     _TMR0L	set	4051
   153   000000                     _T2CLKCONbits	set	4031
   154   000000                     _T2HLTbits	set	4030
   155   000000                     _PIE2bits	set	3627
   156   000000                     _PIR0bits	set	3635
   157   000000                     _IPR2bits	set	3617
   158   000000                     _PIR2bits	set	3637
   159   000000                     _PIR4bits	set	3639
   160   000000                     _RC0PPS	set	3682
   161                           
   162                           	psect	smallconst
   163   000E00                     __psmallconst:
   164                           	callstack 0
   165   000E00  00                 	db	0
   166   000E01                     STR_2:
   167                           
   168                           ; BSR set to: 14
   169   000E01  25                 	db	37
   170   000E02  64                 	db	100	;'d'
   171   000E03  20                 	db	32
   172   000E04  25                 	db	37
   173   000E05  64                 	db	100	;'d'
   174   000E06  20                 	db	32
   175   000E07  25                 	db	37
   176   000E08  64                 	db	100	;'d'
   177   000E09  20                 	db	32
   178   000E0A  25                 	db	37
   179   000E0B  64                 	db	100	;'d'
   180   000E0C  20                 	db	32
   181   000E0D  25                 	db	37
   182   000E0E  64                 	db	100	;'d'
   183   000E0F  20                 	db	32
   184   000E10  0D                 	db	13
   185   000E11  0A                 	db	10
   186   000E12  00                 	db	0
   187   000E13  00                 	db	0	; dummy byte at the end
   188   000000                     
   189                           ; #config settings
   190                           
   191                           	psect	cinit
   192   002CBE                     __pcinit:
   193                           	callstack 0
   194   002CBE                     start_initialization:
   195                           	callstack 0
   196   002CBE                     __initialization:
   197                           	callstack 0
   198                           
   199                           ; Clear objects allocated to BANK2 (172 bytes)
   200   002CBE  EE02  F000         	lfsr	0,__pbssBANK2
   201   002CC2  0EAC               	movlw	172
   202   002CC4                     clear_0:
   203   002CC4  6AEE               	clrf	postinc0,c
   204   002CC6  06E8               	decf	wreg,f,c
   205   002CC8  E1FD               	bnz	clear_0
   206                           
   207                           ; Clear objects allocated to BANK1 (12 bytes)
   208   002CCA  EE01  F0F0         	lfsr	0,__pbssBANK1
   209   002CCE  0E0C               	movlw	12
   210   002CD0                     clear_1:
   211   002CD0  6AEE               	clrf	postinc0,c
   212   002CD2  06E8               	decf	wreg,f,c
   213   002CD4  E1FD               	bnz	clear_1
   214                           
   215                           ; Clear objects allocated to BANK0 (1 bytes)
   216   002CD6  0100               	movlb	0
   217   002CD8  6BFF               	clrf	__pbssBANK0& (0+255),b
   218                           
   219                           ; Clear objects allocated to COMRAM (2 bytes)
   220   002CDA  6A5E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   221   002CDC  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   222   002CDE                     end_of_initialization:
   223                           	callstack 0
   224   002CDE                     __end_of__initialization:
   225                           	callstack 0
   226   002CDE  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   227   002CE0  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   228   002CE2  0100               	movlb	0
   229   002CE4  EF0A  F007         	goto	_main	;jump to C main() function
   230                           
   231                           	psect	bssCOMRAM
   232   00005D                     __pbssCOMRAM:
   233                           	callstack 0
   234   00005D                     _RxBufReadCnt:
   235                           	callstack 0
   236   00005D                     	ds	1
   237   00005E                     _RxBufWriteCnt:
   238                           	callstack 0
   239   00005E                     	ds	1
   240                           
   241                           	psect	bssBANK0
   242   0000FF                     __pbssBANK0:
   243                           	callstack 0
   244   0000FF                     _TxBufWriteCnt:
   245                           	callstack 0
   246   0000FF                     	ds	1
   247                           
   248                           	psect	bssBANK1
   249   0001F0                     __pbssBANK1:
   250                           	callstack 0
   251   0001F0                     _width:
   252                           	callstack 0
   253   0001F0                     	ds	2
   254   0001F2                     _prec:
   255                           	callstack 0
   256   0001F2                     	ds	2
   257   0001F4                     _time:
   258                           	callstack 0
   259   0001F4                     	ds	2
   260   0001F6                     _off_period:
   261                           	callstack 0
   262   0001F6                     	ds	2
   263   0001F8                     _on_period:
   264                           	callstack 0
   265   0001F8                     	ds	2
   266   0001FA                     _flags:
   267                           	callstack 0
   268   0001FA                     	ds	1
   269   0001FB                     _TxBufReadCnt:
   270                           	callstack 0
   271   0001FB                     	ds	1
   272                           
   273                           	psect	bssBANK2
   274   000200                     __pbssBANK2:
   275                           	callstack 0
   276   000200                     _EUSART4TXbuf:
   277                           	callstack 0
   278   000200                     	ds	60
   279   00023C                     	ds	30
   280   00025A                     	ds	30
   281   000278                     _EUSART4RXbuf:
   282                           	callstack 0
   283   000278                     	ds	20
   284   00028C                     _dbuf:
   285                           	callstack 0
   286   00028C                     	ds	32
   287                           
   288                           	psect	cstackBANK1
   289   000100                     __pcstackBANK1:
   290                           	callstack 0
   291   000100                     main@readout3:
   292                           	callstack 0
   293                           
   294                           ; 100 bytes @ 0x0
   295   000100                     	ds	100
   296   000164                     main@time_path:
   297                           	callstack 0
   298                           
   299                           ; 30 bytes @ 0x64
   300   000164                     	ds	30
   301   000182                     main@color_calibrated:
   302                           	callstack 0
   303                           
   304                           ; 64 bytes @ 0x82
   305   000182                     	ds	64
   306   0001C2                     main@upperbound_calibrated:
   307                           	callstack 0
   308                           
   309                           ; 2 bytes @ 0xC2
   310   0001C2                     	ds	2
   311   0001C4                     main@time_return:
   312                           	callstack 0
   313                           
   314                           ; 2 bytes @ 0xC4
   315   0001C4                     	ds	2
   316   0001C6                     main@j:
   317                           	callstack 0
   318                           
   319                           ; 2 bytes @ 0xC6
   320   0001C6                     	ds	2
   321   0001C8                     main@k:
   322                           	callstack 0
   323                           
   324                           ; 2 bytes @ 0xC8
   325   0001C8                     	ds	2
   326   0001CA                     main@color_name:
   327                           	callstack 0
   328                           
   329                           ; 2 bytes @ 0xCA
   330   0001CA                     	ds	2
   331   0001CC                     main@i:
   332                           	callstack 0
   333                           
   334                           ; 2 bytes @ 0xCC
   335   0001CC                     	ds	2
   336   0001CE                     main@RGB_calibrated:
   337                           	callstack 0
   338                           
   339                           ; 8 bytes @ 0xCE
   340   0001CE                     	ds	8
   341   0001D6                     main@RGB_recorded:
   342                           	callstack 0
   343                           
   344                           ; 8 bytes @ 0xD6
   345   0001D6                     	ds	8
   346   0001DE                     main@motorR:
   347                           	callstack 0
   348                           
   349                           ; 9 bytes @ 0xDE
   350   0001DE                     	ds	9
   351   0001E7                     main@motorL:
   352                           	callstack 0
   353                           
   354                           ; 9 bytes @ 0xE7
   355   0001E7                     	ds	9
   356                           
   357                           	psect	cstackBANK0
   358   000060                     __pcstackBANK0:
   359                           	callstack 0
   360   000060                     ?_sprintf:
   361                           	callstack 0
   362   000060                     sprintf@s:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x0
   366   000060                     	ds	2
   367   000062                     sprintf@fmt:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x2
   371   000062                     	ds	12
   372   00006E                     sprintf@ap:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0xE
   376   00006E                     	ds	2
   377   000070                     sprintf@f:
   378                           	callstack 0
   379                           
   380                           ; 11 bytes @ 0x10
   381   000070                     	ds	11
   382   00007B                     main@readout2:
   383                           	callstack 0
   384                           
   385                           ; 100 bytes @ 0x1B
   386   00007B                     	ds	100
   387   0000DF                     main@color_path:
   388                           	callstack 0
   389                           
   390                           ; 30 bytes @ 0x7F
   391   0000DF                     	ds	30
   392   0000FD                     main@lowerbound_calibrated:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0x9D
   396   0000FD                     	ds	2
   397                           
   398                           	psect	cstackCOMRAM
   399   000001                     __pcstackCOMRAM:
   400                           	callstack 0
   401   000001                     ??_I2C_2_Master_Idle:
   402   000001                     ?_color_processor_easy:
   403                           	callstack 0
   404   000001                     ?_color_processor_hard:
   405                           	callstack 0
   406   000001                     ?___wmul:
   407                           	callstack 0
   408   000001                     ?___aodiv:
   409                           	callstack 0
   410   000001                     ?___aomod:
   411                           	callstack 0
   412   000001                     sendCharSerial4@charToSend:
   413                           	callstack 0
   414   000001                     color_processor_easy@rgb:
   415                           	callstack 0
   416   000001                     color_processor_hard@rgb:
   417                           	callstack 0
   418   000001                     initDCmotorsPWM@PWMperiod:
   419                           	callstack 0
   420   000001                     ___wmul@multiplier:
   421                           	callstack 0
   422   000001                     fputc@c:
   423                           	callstack 0
   424   000001                     ___aodiv@dividend:
   425                           	callstack 0
   426   000001                     ___aomod@dividend:
   427                           	callstack 0
   428                           
   429                           ; 8 bytes @ 0x0
   430   000001                     	ds	1
   431   000002                     ??_I2C_2_Master_Read:
   432   000002                     I2C_2_Master_Write@data_byte:
   433                           	callstack 0
   434   000002                     sendStringSerial4@string:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x1
   438   000002                     	ds	1
   439   000003                     color_writetoaddr@value:
   440                           	callstack 0
   441   000003                     I2C_2_Master_Read@ack:
   442                           	callstack 0
   443   000003                     color_processor_easy@color:
   444                           	callstack 0
   445   000003                     color_processor_hard@calibrated:
   446                           	callstack 0
   447   000003                     ___wmul@multiplicand:
   448                           	callstack 0
   449   000003                     fputc@fp:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x2
   453   000003                     	ds	1
   454   000004                     color_writetoaddr@address:
   455                           	callstack 0
   456   000004                     I2C_2_Master_Read@tmp:
   457                           	callstack 0
   458                           
   459                           ; 1 bytes @ 0x3
   460   000004                     	ds	1
   461   000005                     ??_fputc:
   462   000005                     ??_color_click_init:
   463   000005                     ??_color_processor_hard:
   464   000005                     ?_color_read_Luminosity:
   465                           	callstack 0
   466   000005                     ?_color_read_Red:
   467                           	callstack 0
   468   000005                     ?_color_read_Green:
   469                           	callstack 0
   470   000005                     ?_color_read_Blue:
   471                           	callstack 0
   472   000005                     color_processor_easy@c:
   473                           	callstack 0
   474   000005                     ___wmul@product:
   475                           	callstack 0
   476                           
   477                           ; 2 bytes @ 0x4
   478   000005                     	ds	2
   479   000007                     ??_color_read_Luminosity:
   480   000007                     ??_color_read_Red:
   481   000007                     ??_color_read_Green:
   482   000007                     ??_color_read_Blue:
   483   000007                     ?___awdiv:
   484                           	callstack 0
   485   000007                     color_processor_hard@condition_r:
   486                           	callstack 0
   487   000007                     color_processor_easy@a:
   488                           	callstack 0
   489   000007                     ___awdiv@dividend:
   490                           	callstack 0
   491                           
   492                           ; 2 bytes @ 0x6
   493   000007                     	ds	1
   494   000008                     color_processor_hard@condition_g:
   495                           	callstack 0
   496                           
   497                           ; 1 bytes @ 0x7
   498   000008                     	ds	1
   499   000009                     color_processor_hard@condition_b:
   500                           	callstack 0
   501   000009                     color_processor_easy@b:
   502                           	callstack 0
   503   000009                     ___awdiv@divisor:
   504                           	callstack 0
   505   000009                     ___aodiv@divisor:
   506                           	callstack 0
   507   000009                     ___aomod@divisor:
   508                           	callstack 0
   509                           
   510                           ; 8 bytes @ 0x8
   511   000009                     	ds	1
   512   00000A                     _color_processor_hard$370:
   513                           	callstack 0
   514   00000A                     color_read_Luminosity@tmp:
   515                           	callstack 0
   516   00000A                     color_read_Red@tmp:
   517                           	callstack 0
   518   00000A                     color_read_Green@tmp:
   519                           	callstack 0
   520   00000A                     color_read_Blue@tmp:
   521                           	callstack 0
   522   00000A                     fputs@s:
   523                           	callstack 0
   524                           
   525                           ; 2 bytes @ 0x9
   526   00000A                     	ds	1
   527   00000B                     _color_processor_hard$372:
   528                           	callstack 0
   529   00000B                     ___awdiv@counter:
   530                           	callstack 0
   531                           
   532                           ; 1 bytes @ 0xA
   533   00000B                     	ds	1
   534   00000C                     _color_processor_hard$374:
   535                           	callstack 0
   536   00000C                     ___awdiv@sign:
   537                           	callstack 0
   538   00000C                     color_read@rgb:
   539                           	callstack 0
   540   00000C                     fputs@fp:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0xB
   544   00000C                     	ds	1
   545   00000D                     color_processor_hard@r:
   546                           	callstack 0
   547   00000D                     ___awdiv@quotient:
   548                           	callstack 0
   549                           
   550                           ; 2 bytes @ 0xC
   551   00000D                     	ds	1
   552   00000E                     ??_color_read:
   553   00000E                     fputs@c:
   554                           	callstack 0
   555                           
   556                           ; 1 bytes @ 0xD
   557   00000E                     	ds	1
   558   00000F                     color_processor_hard@g:
   559                           	callstack 0
   560   00000F                     setMotorPWM@m:
   561                           	callstack 0
   562   00000F                     fputs@i:
   563                           	callstack 0
   564                           
   565                           ; 2 bytes @ 0xE
   566   00000F                     	ds	2
   567   000011                     ??_setMotorPWM:
   568   000011                     ___aodiv@counter:
   569                           	callstack 0
   570   000011                     ___aomod@counter:
   571                           	callstack 0
   572   000011                     color_processor_hard@b:
   573                           	callstack 0
   574   000011                     pad@fp:
   575                           	callstack 0
   576                           
   577                           ; 2 bytes @ 0x10
   578   000011                     	ds	1
   579   000012                     ___aodiv@sign:
   580                           	callstack 0
   581   000012                     ___aomod@sign:
   582                           	callstack 0
   583                           
   584                           ; 1 bytes @ 0x11
   585   000012                     	ds	1
   586   000013                     ?_abs:
   587                           	callstack 0
   588   000013                     color_processor_hard@cr:
   589                           	callstack 0
   590   000013                     pad@buf:
   591                           	callstack 0
   592   000013                     abs@a:
   593                           	callstack 0
   594   000013                     ___aodiv@quotient:
   595                           	callstack 0
   596                           
   597                           ; 8 bytes @ 0x12
   598   000013                     	ds	2
   599   000015                     ??_abs:
   600   000015                     color_processor_hard@cg:
   601                           	callstack 0
   602   000015                     pad@p:
   603                           	callstack 0
   604                           
   605                           ; 2 bytes @ 0x14
   606   000015                     	ds	2
   607   000017                     ??_pad:
   608   000017                     color_processor_hard@cb:
   609                           	callstack 0
   610                           
   611                           ; 2 bytes @ 0x16
   612   000017                     	ds	1
   613   000018                     setMotorPWM@PWMduty:
   614                           	callstack 0
   615   000018                     pad@i:
   616                           	callstack 0
   617                           
   618                           ; 2 bytes @ 0x17
   619   000018                     	ds	2
   620   00001A                     stop@mL:
   621                           	callstack 0
   622   00001A                     forward@mL:
   623                           	callstack 0
   624   00001A                     reverse_fromcard@mL:
   625                           	callstack 0
   626   00001A                     reverse_onesquare@mL:
   627                           	callstack 0
   628   00001A                     right_90@mL:
   629                           	callstack 0
   630   00001A                     left_90@mL:
   631                           	callstack 0
   632   00001A                     spin_180@mL:
   633                           	callstack 0
   634   00001A                     right_135@mL:
   635                           	callstack 0
   636   00001A                     left_135@mL:
   637                           	callstack 0
   638   00001A                     pad@w:
   639                           	callstack 0
   640                           
   641                           ; 2 bytes @ 0x19
   642   00001A                     	ds	2
   643   00001C                     stop@mR:
   644                           	callstack 0
   645   00001C                     forward@mR:
   646                           	callstack 0
   647   00001C                     reverse_fromcard@mR:
   648                           	callstack 0
   649   00001C                     reverse_onesquare@mR:
   650                           	callstack 0
   651   00001C                     right_90@mR:
   652                           	callstack 0
   653   00001C                     left_90@mR:
   654                           	callstack 0
   655   00001C                     spin_180@mR:
   656                           	callstack 0
   657   00001C                     right_135@mR:
   658                           	callstack 0
   659   00001C                     left_135@mR:
   660                           	callstack 0
   661   00001C                     dtoa@fp:
   662                           	callstack 0
   663                           
   664                           ; 2 bytes @ 0x1B
   665   00001C                     	ds	2
   666   00001E                     ??_stop:
   667   00001E                     ??_spin_180:
   668   00001E                     ??_reverse_fromcard:
   669   00001E                     ??_reverse_onesquare:
   670   00001E                     ??_right_90:
   671   00001E                     ??_left_90:
   672   00001E                     ??_right_135:
   673   00001E                     ??_left_135:
   674   00001E                     forward@i:
   675                           	callstack 0
   676   00001E                     dtoa@d:
   677                           	callstack 0
   678                           
   679                           ; 8 bytes @ 0x1D
   680   00001E                     	ds	1
   681   00001F                     stop@i:
   682                           	callstack 0
   683                           
   684                           ; 2 bytes @ 0x1E
   685   00001F                     	ds	1
   686   000020                     reverse_fromcard@i:
   687                           	callstack 0
   688   000020                     reverse_onesquare@i:
   689                           	callstack 0
   690   000020                     right_90@i:
   691                           	callstack 0
   692   000020                     left_90@i:
   693                           	callstack 0
   694   000020                     spin_180@i:
   695                           	callstack 0
   696   000020                     right_135@i:
   697                           	callstack 0
   698   000020                     left_135@i:
   699                           	callstack 0
   700                           
   701                           ; 2 bytes @ 0x1F
   702   000020                     	ds	2
   703   000022                     motor_action@color:
   704                           	callstack 0
   705                           
   706                           ; 2 bytes @ 0x21
   707   000022                     	ds	2
   708   000024                     motor_action@l:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0x23
   712   000024                     	ds	2
   713   000026                     ??_dtoa:
   714   000026                     motor_action@r:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x25
   718   000026                     	ds	2
   719   000028                     ??_motor_action:
   720                           
   721                           ; 1 bytes @ 0x27
   722   000028                     	ds	6
   723   00002E                     _dtoa$2419:
   724                           	callstack 0
   725                           
   726                           ; 2 bytes @ 0x2D
   727   00002E                     	ds	2
   728   000030                     dtoa@p:
   729                           	callstack 0
   730                           
   731                           ; 2 bytes @ 0x2F
   732   000030                     	ds	2
   733   000032                     dtoa@w:
   734                           	callstack 0
   735                           
   736                           ; 2 bytes @ 0x31
   737   000032                     	ds	2
   738   000034                     dtoa@n:
   739                           	callstack 0
   740                           
   741                           ; 8 bytes @ 0x33
   742   000034                     	ds	8
   743   00003C                     dtoa@i:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x3B
   747   00003C                     	ds	2
   748   00003E                     dtoa@s:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0x3D
   752   00003E                     	ds	1
   753   00003F                     vfpfcnvrt@fp:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x3E
   757   00003F                     	ds	2
   758   000041                     vfpfcnvrt@fmt:
   759                           	callstack 0
   760                           
   761                           ; 2 bytes @ 0x40
   762   000041                     	ds	2
   763   000043                     vfpfcnvrt@ap:
   764                           	callstack 0
   765                           
   766                           ; 2 bytes @ 0x42
   767   000043                     	ds	2
   768   000045                     ??_vfpfcnvrt:
   769                           
   770                           ; 1 bytes @ 0x44
   771   000045                     	ds	2
   772   000047                     vfpfcnvrt@convarg:
   773                           	callstack 0
   774                           
   775                           ; 8 bytes @ 0x46
   776   000047                     	ds	8
   777   00004F                     vfpfcnvrt@cp:
   778                           	callstack 0
   779                           
   780                           ; 2 bytes @ 0x4E
   781   00004F                     	ds	2
   782   000051                     ?_vfprintf:
   783                           	callstack 0
   784   000051                     vfprintf@fp:
   785                           	callstack 0
   786                           
   787                           ; 2 bytes @ 0x50
   788   000051                     	ds	2
   789   000053                     vfprintf@fmt:
   790                           	callstack 0
   791                           
   792                           ; 2 bytes @ 0x52
   793   000053                     	ds	2
   794   000055                     vfprintf@ap:
   795                           	callstack 0
   796                           
   797                           ; 2 bytes @ 0x54
   798   000055                     	ds	2
   799   000057                     vfprintf@cfmt:
   800                           	callstack 0
   801                           
   802                           ; 2 bytes @ 0x56
   803   000057                     	ds	2
   804   000059                     ??_main:
   805                           
   806                           ; 1 bytes @ 0x58
   807   000059                     	ds	2
   808   00005B                     main@color_flag:
   809                           	callstack 0
   810                           
   811                           ; 2 bytes @ 0x5A
   812   00005B                     	ds	2
   813                           
   814 ;;
   815 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   816 ;;
   817 ;; *************** function _main *****************
   818 ;; Defined at:
   819 ;;		line 20 in file "../main.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;		None
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  readout3      100    0[BANK1 ] unsigned char [100]
   824 ;;  readout2      100   27[BANK0 ] unsigned char [100]
   825 ;;  k               2  200[BANK1 ] int 
   826 ;;  i               2  204[BANK1 ] int 
   827 ;;  color_calibr   64  130[BANK1 ] int [32]
   828 ;;  time_path      30  100[BANK1 ] unsigned int [15]
   829 ;;  color_path     30  127[BANK0 ] unsigned int [15]
   830 ;;  motorL          9  231[BANK1 ] struct DC_motor
   831 ;;  motorR          9  222[BANK1 ] struct DC_motor
   832 ;;  RGB_recorded    8  214[BANK1 ] struct RGB_val
   833 ;;  RGB_calibrat    8  206[BANK1 ] struct RGB_val
   834 ;;  L_calibrated    8    0        struct RGB_val
   835 ;;  color_name      2  202[BANK1 ] unsigned int 
   836 ;;  j               2  198[BANK1 ] int 
   837 ;;  time_return     2  196[BANK1 ] unsigned int 
   838 ;;  color_flag      2   90[COMRAM] unsigned int 
   839 ;;  upperbound_c    2  194[BANK1 ] unsigned int 
   840 ;;  lowerbound_c    2  157[BANK0 ] unsigned int 
   841 ;;  PWMcycle        1    0        unsigned char 
   842 ;; Return value:  Size  Location     Type
   843 ;;                  1    wreg      void 
   844 ;; Registers used:
   845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   846 ;; Tracked objects:
   847 ;;		On entry : 0/0
   848 ;;		On exit  : 0/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   852 ;;      Locals:         2     132     240       0       0       0       0       0       0       0       0       0       
      +0       0       0
   853 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   854 ;;      Totals:         4     132     240       0       0       0       0       0       0       0       0       0       
      +0       0       0
   855 ;;Total ram usage:      376 bytes
   856 ;; Hardware stack levels required when called: 9
   857 ;; This function calls:
   858 ;;		_I2C_2_Master_Init
   859 ;;		_Interrupts_init
   860 ;;		_Timer0_init
   861 ;;		_color_click_init
   862 ;;		_color_processor_easy
   863 ;;		_color_processor_hard
   864 ;;		_color_read
   865 ;;		_forward
   866 ;;		_initDCmotorsPWM
   867 ;;		_initUSART4
   868 ;;		_motor_action
   869 ;;		_sendStringSerial4
   870 ;;		_setMotorPWM
   871 ;;		_spin_180
   872 ;;		_sprintf
   873 ;;		_stop
   874 ;; This function is called by:
   875 ;;		Startup code after reset
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           	psect	text0
   880   000E14                     __ptext0:
   881                           	callstack 0
   882   000E14                     _main:
   883                           	callstack 22
   884   000E14                     
   885                           ;../main.c: 22:     color_click_init();
   886   000E14  ECA4  F014         	call	_color_click_init	;wreg free
   887   000E18                     
   888                           ;../main.c: 23:     initDCmotorsPWM(20);
   889   000E18  0E00               	movlw	0
   890   000E1A  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   891   000E1C  0E14               	movlw	20
   892   000E1E  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   893   000E20  ECE5  F015         	call	_initDCmotorsPWM	;wreg free
   894   000E24                     
   895                           ;../main.c: 24:     Interrupts_init();
   896   000E24  ECEB  F016         	call	_Interrupts_init	;wreg free
   897   000E28                     
   898                           ;../main.c: 25:     Timer0_init();
   899   000E28  ECC0  F016         	call	_Timer0_init	;wreg free
   900   000E2C                     
   901                           ;../main.c: 26:     I2C_2_Master_Init();
   902   000E2C  EC74  F016         	call	_I2C_2_Master_Init	;wreg free
   903   000E30                     
   904                           ;../main.c: 27:     initUSART4();
   905   000E30  ECD0  F016         	call	_initUSART4	;wreg free
   906   000E34                     
   907                           ;../main.c: 32:     motorL.power = 0;
   908   000E34  0E00               	movlw	0
   909   000E36  0101               	movlb	1	; () banked
   910   000E38  6FE7               	movwf	main@motorL& (0+255),b
   911   000E3A                     
   912                           ; BSR set to: 1
   913                           ;../main.c: 33:     motorL.direction = 0;
   914   000E3A  0E00               	movlw	0
   915   000E3C  6FE8               	movwf	(main@motorL+1)& (0+255),b
   916   000E3E                     
   917                           ; BSR set to: 1
   918                           ;../main.c: 34:     motorL.dutyHighByte = (unsigned char *)(&PWM6DCH);
   919   000E3E  0EA3               	movlw	163
   920   000E40  6FE9               	movwf	(main@motorL+2)& (0+255),b
   921   000E42  0E0F               	movlw	15
   922   000E44  6FEA               	movwf	(main@motorL+3)& (0+255),b
   923   000E46                     
   924                           ; BSR set to: 1
   925                           ;../main.c: 35:     motorL.dir_LAT = (unsigned char *)(&LATE);
   926   000E46  0E7D               	movlw	125
   927   000E48  6FEB               	movwf	(main@motorL+4)& (0+255),b
   928   000E4A  0E0F               	movlw	15
   929   000E4C  6FEC               	movwf	(main@motorL+5)& (0+255),b
   930   000E4E                     
   931                           ; BSR set to: 1
   932                           ;../main.c: 36:     motorL.dir_pin = 4;
   933   000E4E  0E04               	movlw	4
   934   000E50  6FED               	movwf	(main@motorL+6)& (0+255),b
   935   000E52                     
   936                           ; BSR set to: 1
   937                           ;../main.c: 37:     motorL.PWMperiod = PWMcycle;
   938   000E52  0E00               	movlw	0
   939   000E54  6FEF               	movwf	(main@motorL+8)& (0+255),b
   940   000E56  0EC8               	movlw	200
   941   000E58  6FEE               	movwf	(main@motorL+7)& (0+255),b
   942   000E5A                     
   943                           ; BSR set to: 1
   944                           ;../main.c: 38:     motorR.power = 0;
   945   000E5A  0E00               	movlw	0
   946   000E5C  6FDE               	movwf	main@motorR& (0+255),b
   947   000E5E                     
   948                           ; BSR set to: 1
   949                           ;../main.c: 39:     motorR.direction = 0;
   950   000E5E  0E00               	movlw	0
   951   000E60  6FDF               	movwf	(main@motorR+1)& (0+255),b
   952                           
   953                           ;../main.c: 40:     motorR.dutyHighByte = (unsigned char *)(&PWM7DCH);
   954   000E62  0EA0               	movlw	160
   955   000E64  6FE0               	movwf	(main@motorR+2)& (0+255),b
   956   000E66  0E0F               	movlw	15
   957   000E68  6FE1               	movwf	(main@motorR+3)& (0+255),b
   958                           
   959                           ;../main.c: 41:     motorR.dir_LAT = (unsigned char *)(&LATG);
   960   000E6A  0E7F               	movlw	127
   961   000E6C  6FE2               	movwf	(main@motorR+4)& (0+255),b
   962   000E6E  0E0F               	movlw	15
   963   000E70  6FE3               	movwf	(main@motorR+5)& (0+255),b
   964   000E72                     
   965                           ; BSR set to: 1
   966                           ;../main.c: 42:     motorR.dir_pin = 6;
   967   000E72  0E06               	movlw	6
   968   000E74  6FE4               	movwf	(main@motorR+6)& (0+255),b
   969   000E76                     
   970                           ; BSR set to: 1
   971                           ;../main.c: 43:     motorR.PWMperiod = PWMcycle;
   972   000E76  0E00               	movlw	0
   973   000E78  6FE6               	movwf	(main@motorR+8)& (0+255),b
   974   000E7A  0EC8               	movlw	200
   975   000E7C  6FE5               	movwf	(main@motorR+7)& (0+255),b
   976   000E7E                     
   977                           ; BSR set to: 1
   978                           ;../main.c: 44:     setMotorPWM(&motorL);
   979   000E7E  0EE7               	movlw	low main@motorL
   980   000E80  6E0F               	movwf	setMotorPWM@m^0,c
   981   000E82  0E01               	movlw	high main@motorL
   982   000E84  6E10               	movwf	(setMotorPWM@m+1)^0,c
   983   000E86  EC1A  F00D         	call	_setMotorPWM	;wreg free
   984   000E8A                     
   985                           ;../main.c: 45:     setMotorPWM(&motorR);
   986   000E8A  0EDE               	movlw	low main@motorR
   987   000E8C  6E0F               	movwf	setMotorPWM@m^0,c
   988   000E8E  0E01               	movlw	high main@motorR
   989   000E90  6E10               	movwf	(setMotorPWM@m+1)^0,c
   990   000E92  EC1A  F00D         	call	_setMotorPWM	;wreg free
   991   000E96                     
   992                           ;../main.c: 48:     unsigned int color_flag;;../main.c: 49:     unsigned int color_name 
      +                          = 0;
   993   000E96  0E00               	movlw	0
   994   000E98  0101               	movlb	1	; () banked
   995   000E9A  6FCB               	movwf	(main@color_name+1)& (0+255),b
   996   000E9C  0E00               	movlw	0
   997   000E9E  6FCA               	movwf	main@color_name& (0+255),b
   998   000EA0                     
   999                           ; BSR set to: 1
  1000                           ;../main.c: 50:     unsigned int color_path[15] = {0};
  1001   000EA0  EE20  F0DF         	lfsr	2,main@color_path
  1002   000EA4  0E1D               	movlw	29
  1003   000EA6                     u1761:
  1004   000EA6  6ADE               	clrf	postinc2,c
  1005   000EA8  06E8               	decf	wreg,f,c
  1006   000EAA  E2FD               	bc	u1761
  1007   000EAC                     
  1008                           ; BSR set to: 1
  1009                           ;../main.c: 51:     int color_calibrated[32];;../main.c: 52:     unsigned int lowerbound
      +                          _calibrated;;../main.c: 53:     unsigned int upperbound_calibrated;;../main.c: 54:     s
      +                          truct RGB_val RGB_calibrated;;../main.c: 55:     struct RGB_val L_calibrated;;../main.c:
      +                           56:     struct RGB_val RGB_recorded;;../main.c: 57:     unsigned int time_path[15] = {0
      +                          };
  1010   000EAC  EE21  F064         	lfsr	2,main@time_path
  1011   000EB0  0E1D               	movlw	29
  1012   000EB2                     u1771:
  1013   000EB2  6ADE               	clrf	postinc2,c
  1014   000EB4  06E8               	decf	wreg,f,c
  1015   000EB6  E2FD               	bc	u1771
  1016   000EB8                     l197:
  1017   000EB8  B68E               	btfsc	142,3,c	;volatile
  1018   000EBA  EF61  F007         	goto	u1781
  1019   000EBE  EF63  F007         	goto	u1780
  1020   000EC2                     u1781:
  1021   000EC2  EF5C  F007         	goto	l197
  1022   000EC6                     u1780:
  1023   000EC6                     
  1024                           ;../main.c: 64:         for (int i=0;i<8;i++){
  1025   000EC6  0E00               	movlw	0
  1026   000EC8  0101               	movlb	1	; () banked
  1027   000ECA  6FCD               	movwf	(main@i+1)& (0+255),b
  1028   000ECC  0E00               	movlw	0
  1029   000ECE  6FCC               	movwf	main@i& (0+255),b
  1030   000ED0                     l3058:
  1031                           
  1032                           ; BSR set to: 1
  1033                           ;../main.c: 65:             color_read(&RGB_calibrated);
  1034   000ED0  0ECE               	movlw	low main@RGB_calibrated
  1035   000ED2  6E0C               	movwf	color_read@rgb^0,c
  1036   000ED4  0E01               	movlw	high main@RGB_calibrated
  1037   000ED6  6E0D               	movwf	(color_read@rgb+1)^0,c
  1038   000ED8  EC4F  F011         	call	_color_read	;wreg free
  1039   000EDC                     
  1040                           ;../main.c: 66:             color_calibrated[4*i] = RGB_calibrated.L;
  1041   000EDC  C1CC  F059         	movff	main@i,??_main
  1042   000EE0  C1CD  F05A         	movff	main@i+1,??_main+1
  1043   000EE4  90D8               	bcf	status,0,c
  1044   000EE6  3659               	rlcf	??_main^0,f,c
  1045   000EE8  365A               	rlcf	(??_main+1)^0,f,c
  1046   000EEA  90D8               	bcf	status,0,c
  1047   000EEC  3659               	rlcf	??_main^0,f,c
  1048   000EEE  365A               	rlcf	(??_main+1)^0,f,c
  1049   000EF0  90D8               	bcf	status,0,c
  1050   000EF2  3659               	rlcf	??_main^0,f,c
  1051   000EF4  365A               	rlcf	(??_main+1)^0,f,c
  1052   000EF6  0E82               	movlw	low main@color_calibrated
  1053   000EF8  2459               	addwf	??_main^0,w,c
  1054   000EFA  6ED9               	movwf	fsr2l,c
  1055   000EFC  0E01               	movlw	high main@color_calibrated
  1056   000EFE  205A               	addwfc	(??_main+1)^0,w,c
  1057   000F00  6EDA               	movwf	fsr2h,c
  1058   000F02  C1CE  FFDE         	movff	main@RGB_calibrated,postinc2
  1059   000F06  C1CF  FFDD         	movff	main@RGB_calibrated+1,postdec2
  1060   000F0A                     
  1061                           ;../main.c: 67:             color_calibrated[4*i+1] = RGB_calibrated.R;
  1062   000F0A  C1CC  F059         	movff	main@i,??_main
  1063   000F0E  C1CD  F05A         	movff	main@i+1,??_main+1
  1064   000F12  90D8               	bcf	status,0,c
  1065   000F14  3659               	rlcf	??_main^0,f,c
  1066   000F16  365A               	rlcf	(??_main+1)^0,f,c
  1067   000F18  90D8               	bcf	status,0,c
  1068   000F1A  3659               	rlcf	??_main^0,f,c
  1069   000F1C  365A               	rlcf	(??_main+1)^0,f,c
  1070   000F1E  90D8               	bcf	status,0,c
  1071   000F20  3659               	rlcf	??_main^0,f,c
  1072   000F22  365A               	rlcf	(??_main+1)^0,f,c
  1073   000F24  0E02               	movlw	2
  1074   000F26  2659               	addwf	??_main^0,f,c
  1075   000F28  0E00               	movlw	0
  1076   000F2A  225A               	addwfc	(??_main+1)^0,f,c
  1077   000F2C  0E82               	movlw	low main@color_calibrated
  1078   000F2E  2459               	addwf	??_main^0,w,c
  1079   000F30  6ED9               	movwf	fsr2l,c
  1080   000F32  0E01               	movlw	high main@color_calibrated
  1081   000F34  205A               	addwfc	(??_main+1)^0,w,c
  1082   000F36  6EDA               	movwf	fsr2h,c
  1083   000F38  C1D0  FFDE         	movff	main@RGB_calibrated+2,postinc2
  1084   000F3C  C1D1  FFDD         	movff	main@RGB_calibrated+3,postdec2
  1085   000F40                     
  1086                           ;../main.c: 68:             color_calibrated[4*i+2] = RGB_calibrated.G;
  1087   000F40  C1CC  F059         	movff	main@i,??_main
  1088   000F44  C1CD  F05A         	movff	main@i+1,??_main+1
  1089   000F48  90D8               	bcf	status,0,c
  1090   000F4A  3659               	rlcf	??_main^0,f,c
  1091   000F4C  365A               	rlcf	(??_main+1)^0,f,c
  1092   000F4E  90D8               	bcf	status,0,c
  1093   000F50  3659               	rlcf	??_main^0,f,c
  1094   000F52  365A               	rlcf	(??_main+1)^0,f,c
  1095   000F54  90D8               	bcf	status,0,c
  1096   000F56  3659               	rlcf	??_main^0,f,c
  1097   000F58  365A               	rlcf	(??_main+1)^0,f,c
  1098   000F5A  0E04               	movlw	4
  1099   000F5C  2659               	addwf	??_main^0,f,c
  1100   000F5E  0E00               	movlw	0
  1101   000F60  225A               	addwfc	(??_main+1)^0,f,c
  1102   000F62  0E82               	movlw	low main@color_calibrated
  1103   000F64  2459               	addwf	??_main^0,w,c
  1104   000F66  6ED9               	movwf	fsr2l,c
  1105   000F68  0E01               	movlw	high main@color_calibrated
  1106   000F6A  205A               	addwfc	(??_main+1)^0,w,c
  1107   000F6C  6EDA               	movwf	fsr2h,c
  1108   000F6E  C1D2  FFDE         	movff	main@RGB_calibrated+4,postinc2
  1109   000F72  C1D3  FFDD         	movff	main@RGB_calibrated+5,postdec2
  1110   000F76                     
  1111                           ;../main.c: 69:             color_calibrated[4*i+3] = RGB_calibrated.B;
  1112   000F76  C1CC  F059         	movff	main@i,??_main
  1113   000F7A  C1CD  F05A         	movff	main@i+1,??_main+1
  1114   000F7E  90D8               	bcf	status,0,c
  1115   000F80  3659               	rlcf	??_main^0,f,c
  1116   000F82  365A               	rlcf	(??_main+1)^0,f,c
  1117   000F84  90D8               	bcf	status,0,c
  1118   000F86  3659               	rlcf	??_main^0,f,c
  1119   000F88  365A               	rlcf	(??_main+1)^0,f,c
  1120   000F8A  90D8               	bcf	status,0,c
  1121   000F8C  3659               	rlcf	??_main^0,f,c
  1122   000F8E  365A               	rlcf	(??_main+1)^0,f,c
  1123   000F90  0E06               	movlw	6
  1124   000F92  2659               	addwf	??_main^0,f,c
  1125   000F94  0E00               	movlw	0
  1126   000F96  225A               	addwfc	(??_main+1)^0,f,c
  1127   000F98  0E82               	movlw	low main@color_calibrated
  1128   000F9A  2459               	addwf	??_main^0,w,c
  1129   000F9C  6ED9               	movwf	fsr2l,c
  1130   000F9E  0E01               	movlw	high main@color_calibrated
  1131   000FA0  205A               	addwfc	(??_main+1)^0,w,c
  1132   000FA2  6EDA               	movwf	fsr2h,c
  1133   000FA4  C1D4  FFDE         	movff	main@RGB_calibrated+6,postinc2
  1134   000FA8  C1D5  FFDD         	movff	main@RGB_calibrated+7,postdec2
  1135   000FAC                     
  1136                           ;../main.c: 70:             LATHbits.LATH3 = 1;
  1137   000FAC  8680               	bsf	128,3,c	;volatile
  1138   000FAE                     
  1139                           ;../main.c: 72:             char readout2[100];;../main.c: 73:             sprintf(reado
      +                          ut2,"%d %d %d %d \r\n", RGB_calibrated.L,RGB_calibrated.R,RGB_calibrated.G,RGB_calibrate
      +                          d.B);
  1140   000FAE  0E7B               	movlw	low main@readout2
  1141   000FB0  0100               	movlb	0	; () banked
  1142   000FB2  6F60               	movwf	sprintf@s& (0+255),b
  1143   000FB4  0E00               	movlw	high main@readout2
  1144   000FB6  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1145   000FB8  0E04               	movlw	low (STR_2+3)
  1146   000FBA  6F62               	movwf	sprintf@fmt& (0+255),b
  1147   000FBC  0E0E               	movlw	high (STR_2+3)
  1148   000FBE  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1149   000FC0  C1CE  F064         	movff	main@RGB_calibrated,?_sprintf+4
  1150   000FC4  C1CF  F065         	movff	main@RGB_calibrated+1,?_sprintf+5
  1151   000FC8  C1D0  F066         	movff	main@RGB_calibrated+2,?_sprintf+6
  1152   000FCC  C1D1  F067         	movff	main@RGB_calibrated+3,?_sprintf+7
  1153   000FD0  C1D2  F068         	movff	main@RGB_calibrated+4,?_sprintf+8
  1154   000FD4  C1D3  F069         	movff	main@RGB_calibrated+5,?_sprintf+9
  1155   000FD8  C1D4  F06A         	movff	main@RGB_calibrated+6,?_sprintf+10
  1156   000FDC  C1D5  F06B         	movff	main@RGB_calibrated+7,?_sprintf+11
  1157   000FE0  ECD1  F014         	call	_sprintf	;wreg free
  1158   000FE4                     
  1159                           ;../main.c: 74:             sendStringSerial4(readout2);
  1160   000FE4  0E7B               	movlw	low main@readout2
  1161   000FE6  6E02               	movwf	sendStringSerial4@string^0,c
  1162   000FE8  0E00               	movlw	high main@readout2
  1163   000FEA  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1164   000FEC  EC47  F016         	call	_sendStringSerial4	;wreg free
  1165   000FF0                     
  1166                           ;../main.c: 75:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1167   000FF0  0E11               	movlw	17
  1168   000FF2  6E5A               	movwf	(??_main+1)^0,c
  1169   000FF4  0E3C               	movlw	60
  1170   000FF6  6E59               	movwf	??_main^0,c
  1171   000FF8  0ECB               	movlw	203
  1172   000FFA                     u1927:
  1173   000FFA  2EE8               	decfsz	wreg,f,c
  1174   000FFC  D7FE               	bra	u1927
  1175   000FFE  2E59               	decfsz	??_main^0,f,c
  1176   001000  D7FC               	bra	u1927
  1177   001002  2E5A               	decfsz	(??_main+1)^0,f,c
  1178   001004  D7FA               	bra	u1927
  1179   001006  F000               	nop	
  1180   001008                     
  1181                           ;../main.c: 76:             LATHbits.LATH3 = 0;
  1182   001008  9680               	bcf	128,3,c	;volatile
  1183   00100A                     
  1184                           ;../main.c: 77:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1185   00100A  0E11               	movlw	17
  1186   00100C  6E5A               	movwf	(??_main+1)^0,c
  1187   00100E  0E3C               	movlw	60
  1188   001010  6E59               	movwf	??_main^0,c
  1189   001012  0ECB               	movlw	203
  1190   001014                     u1937:
  1191   001014  2EE8               	decfsz	wreg,f,c
  1192   001016  D7FE               	bra	u1937
  1193   001018  2E59               	decfsz	??_main^0,f,c
  1194   00101A  D7FC               	bra	u1937
  1195   00101C  2E5A               	decfsz	(??_main+1)^0,f,c
  1196   00101E  D7FA               	bra	u1937
  1197   001020  F000               	nop	
  1198   001022                     
  1199                           ;../main.c: 78:         }
  1200   001022  0101               	movlb	1	; () banked
  1201   001024  4BCC               	infsnz	main@i& (0+255),f,b
  1202   001026  2BCD               	incf	(main@i+1)& (0+255),f,b
  1203   001028                     
  1204                           ; BSR set to: 1
  1205   001028  BFCD               	btfsc	(main@i+1)& (0+255),7,b
  1206   00102A  EF20  F008         	goto	u1791
  1207   00102E  51CD               	movf	(main@i+1)& (0+255),w,b
  1208   001030  E109               	bnz	u1790
  1209   001032  0E08               	movlw	8
  1210   001034  5DCC               	subwf	main@i& (0+255),w,b
  1211   001036  A0D8               	btfss	status,0,c
  1212   001038  EF20  F008         	goto	u1791
  1213   00103C  EF22  F008         	goto	u1790
  1214   001040                     u1791:
  1215   001040  EF68  F007         	goto	l3058
  1216   001044                     u1790:
  1217   001044                     
  1218                           ; BSR set to: 1
  1219                           ;../main.c: 81:         lowerbound_calibrated = color_calibrated[8];
  1220   001044  C192  F0FD         	movff	main@color_calibrated+16,main@lowerbound_calibrated
  1221   001048  C193  F0FE         	movff	main@color_calibrated+17,main@lowerbound_calibrated+1
  1222                           
  1223                           ;../main.c: 82:         upperbound_calibrated = color_calibrated[28];
  1224   00104C  C1BA  F1C2         	movff	main@color_calibrated+56,main@upperbound_calibrated
  1225   001050  C1BB  F1C3         	movff	main@color_calibrated+57,main@upperbound_calibrated+1
  1226   001054                     l3084:
  1227   001054  0E01               	movlw	1
  1228   001056  A68E               	btfss	142,3,c	;volatile
  1229   001058  0E00               	movlw	0
  1230   00105A  A48E               	btfss	142,2,c	;volatile
  1231   00105C  0E00               	movlw	0
  1232   00105E  B0E8               	btfsc	wreg,0,c
  1233   001060  EF34  F008         	goto	u1801
  1234   001064  EF38  F008         	goto	u1800
  1235   001068                     u1801:
  1236   001068  6A59               	clrf	??_main^0,c
  1237   00106A  2A59               	incf	??_main^0,f,c
  1238   00106C  EF39  F008         	goto	u1808
  1239   001070                     u1800:
  1240   001070  6A59               	clrf	??_main^0,c
  1241   001072                     u1808:
  1242   001072  5059               	movf	??_main^0,w,c
  1243   001074  A4D8               	btfss	status,2,c
  1244   001076  EF3F  F008         	goto	u1811
  1245   00107A  EF41  F008         	goto	u1810
  1246   00107E                     u1811:
  1247   00107E  EF2A  F008         	goto	l3084
  1248   001082                     u1810:
  1249   001082                     
  1250                           ;../main.c: 86:         if (!PORTFbits.RF2){LATDbits.LATD7 = 1;}
  1251   001082  B48E               	btfsc	142,2,c	;volatile
  1252   001084  EF46  F008         	goto	u1821
  1253   001088  EF48  F008         	goto	u1820
  1254   00108C                     u1821:
  1255   00108C  EF4B  F008         	goto	l205
  1256   001090                     u1820:
  1257   001090  8E7C               	bsf	124,7,c	;volatile
  1258   001092  EF2B  F009         	goto	l3132
  1259   001096                     l205:
  1260   001096  8680               	bsf	128,3,c	;volatile
  1261   001098  EF2B  F009         	goto	l3132
  1262   00109C                     l3088:
  1263                           
  1264                           ; BSR set to: 1
  1265                           ;../main.c: 91:             time = 0;
  1266   00109C  0E00               	movlw	0
  1267   00109E  6FF5               	movwf	(_time+1)& (0+255),b
  1268   0010A0  0E00               	movlw	0
  1269   0010A2  6FF4               	movwf	_time& (0+255),b
  1270   0010A4                     
  1271                           ; BSR set to: 1
  1272                           ;../main.c: 92:             forward(&motorL,&motorR);
  1273   0010A4  0EE7               	movlw	low main@motorL
  1274   0010A6  6E1A               	movwf	forward@mL^0,c
  1275   0010A8  0E01               	movlw	high main@motorL
  1276   0010AA  6E1B               	movwf	(forward@mL+1)^0,c
  1277   0010AC  0EDE               	movlw	low main@motorR
  1278   0010AE  6E1C               	movwf	forward@mR^0,c
  1279   0010B0  0E01               	movlw	high main@motorR
  1280   0010B2  6E1D               	movwf	(forward@mR+1)^0,c
  1281   0010B4  EC22  F014         	call	_forward	;wreg free
  1282   0010B8                     
  1283                           ;../main.c: 93:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1284   0010B8  0E29               	movlw	41
  1285   0010BA  6E5A               	movwf	(??_main+1)^0,c
  1286   0010BC  0E96               	movlw	150
  1287   0010BE  6E59               	movwf	??_main^0,c
  1288   0010C0  0E7F               	movlw	127
  1289   0010C2                     u1947:
  1290   0010C2  2EE8               	decfsz	wreg,f,c
  1291   0010C4  D7FE               	bra	u1947
  1292   0010C6  2E59               	decfsz	??_main^0,f,c
  1293   0010C8  D7FC               	bra	u1947
  1294   0010CA  2E5A               	decfsz	(??_main+1)^0,f,c
  1295   0010CC  D7FA               	bra	u1947
  1296   0010CE  F000               	nop	
  1297   0010D0                     
  1298                           ;../main.c: 94:             color_read(&RGB_recorded);
  1299   0010D0  0ED6               	movlw	low main@RGB_recorded
  1300   0010D2  6E0C               	movwf	color_read@rgb^0,c
  1301   0010D4  0E01               	movlw	high main@RGB_recorded
  1302   0010D6  6E0D               	movwf	(color_read@rgb+1)^0,c
  1303   0010D8  EC4F  F011         	call	_color_read	;wreg free
  1304   0010DC                     
  1305                           ;../main.c: 95:             if (RGB_recorded.L<upperbound_calibrated && RGB_recorded.L>l
      +                          owerbound_calibrated){color_flag=1;}
  1306   0010DC  0101               	movlb	1	; () banked
  1307   0010DE  51C2               	movf	main@upperbound_calibrated& (0+255),w,b
  1308   0010E0  5DD6               	subwf	main@RGB_recorded& (0+255),w,b
  1309   0010E2  51C3               	movf	(main@upperbound_calibrated+1)& (0+255),w,b
  1310   0010E4  59D7               	subwfb	(main@RGB_recorded+1)& (0+255),w,b
  1311   0010E6  B0D8               	btfsc	status,0,c
  1312   0010E8  EF78  F008         	goto	u1831
  1313   0010EC  EF7A  F008         	goto	u1830
  1314   0010F0                     u1831:
  1315   0010F0  EF8C  F008         	goto	l3102
  1316   0010F4                     u1830:
  1317   0010F4                     
  1318                           ; BSR set to: 1
  1319   0010F4  51D6               	movf	main@RGB_recorded& (0+255),w,b
  1320   0010F6  0100               	movlb	0	; () banked
  1321   0010F8  5DFD               	subwf	main@lowerbound_calibrated& (0+255),w,b
  1322   0010FA  0101               	movlb	1	; () banked
  1323   0010FC  51D7               	movf	(main@RGB_recorded+1)& (0+255),w,b
  1324   0010FE  0100               	movlb	0	; () banked
  1325   001100  59FE               	subwfb	(main@lowerbound_calibrated+1)& (0+255),w,b
  1326   001102  B0D8               	btfsc	status,0,c
  1327   001104  EF86  F008         	goto	u1841
  1328   001108  EF88  F008         	goto	u1840
  1329   00110C                     u1841:
  1330   00110C  EF8C  F008         	goto	l3102
  1331   001110                     u1840:
  1332   001110                     
  1333                           ; BSR set to: 0
  1334   001110  0E00               	movlw	0
  1335   001112  6E5C               	movwf	(main@color_flag+1)^0,c
  1336   001114  0E01               	movlw	1
  1337   001116  6E5B               	movwf	main@color_flag^0,c
  1338   001118                     l3102:
  1339                           
  1340                           ;../main.c: 96:             if (color_flag){
  1341   001118  505B               	movf	main@color_flag^0,w,c
  1342   00111A  105C               	iorwf	(main@color_flag+1)^0,w,c
  1343   00111C  B4D8               	btfsc	status,2,c
  1344   00111E  EF93  F008         	goto	u1851
  1345   001122  EF95  F008         	goto	u1850
  1346   001126                     u1851:
  1347   001126  EF1F  F009         	goto	l3130
  1348   00112A                     u1850:
  1349   00112A                     
  1350                           ;../main.c: 97:                 stop(&motorL,&motorR);
  1351   00112A  0EE7               	movlw	low main@motorL
  1352   00112C  6E1A               	movwf	stop@mL^0,c
  1353   00112E  0E01               	movlw	high main@motorL
  1354   001130  6E1B               	movwf	(stop@mL+1)^0,c
  1355   001132  0EDE               	movlw	low main@motorR
  1356   001134  6E1C               	movwf	stop@mR^0,c
  1357   001136  0E01               	movlw	high main@motorR
  1358   001138  6E1D               	movwf	(stop@mR+1)^0,c
  1359   00113A  ECDB  F013         	call	_stop	;wreg free
  1360   00113E                     
  1361                           ;../main.c: 98:                 color_read(&RGB_recorded);
  1362   00113E  0ED6               	movlw	low main@RGB_recorded
  1363   001140  6E0C               	movwf	color_read@rgb^0,c
  1364   001142  0E01               	movlw	high main@RGB_recorded
  1365   001144  6E0D               	movwf	(color_read@rgb+1)^0,c
  1366   001146  EC4F  F011         	call	_color_read	;wreg free
  1367   00114A                     
  1368                           ;../main.c: 99:                 if (LATDbits.LATD7){color_name = color_processor_easy(&R
      +                          GB_recorded);}
  1369   00114A  AE7C               	btfss	124,7,c	;volatile
  1370   00114C  EFAA  F008         	goto	u1861
  1371   001150  EFAC  F008         	goto	u1860
  1372   001154                     u1861:
  1373   001154  EFB8  F008         	goto	l3112
  1374   001158                     u1860:
  1375   001158  0ED6               	movlw	low main@RGB_recorded
  1376   00115A  6E01               	movwf	color_processor_easy@rgb^0,c
  1377   00115C  0E01               	movlw	high main@RGB_recorded
  1378   00115E  6E02               	movwf	(color_processor_easy@rgb+1)^0,c
  1379   001160  ECF0  F010         	call	_color_processor_easy	;wreg free
  1380   001164  C001  F1CA         	movff	?_color_processor_easy,main@color_name
  1381   001168  C002  F1CB         	movff	?_color_processor_easy+1,main@color_name+1
  1382   00116C  EFC6  F008         	goto	l3114
  1383   001170                     l3112:
  1384   001170  0ED6               	movlw	low main@RGB_recorded
  1385   001172  6E01               	movwf	color_processor_hard@rgb^0,c
  1386   001174  0E01               	movlw	high main@RGB_recorded
  1387   001176  6E02               	movwf	(color_processor_hard@rgb+1)^0,c
  1388   001178  0E82               	movlw	low main@color_calibrated
  1389   00117A  6E03               	movwf	color_processor_hard@calibrated^0,c
  1390   00117C  0E01               	movlw	high main@color_calibrated
  1391   00117E  6E04               	movwf	(color_processor_hard@calibrated+1)^0,c
  1392   001180  EC28  F00C         	call	_color_processor_hard	;wreg free
  1393   001184  C001  F1CA         	movff	?_color_processor_hard,main@color_name
  1394   001188  C002  F1CB         	movff	?_color_processor_hard+1,main@color_name+1
  1395   00118C                     l3114:
  1396                           
  1397                           ;../main.c: 101:                 color_path[j] = color_name;
  1398   00118C  90D8               	bcf	status,0,c
  1399   00118E  0101               	movlb	1	; () banked
  1400   001190  35C6               	rlcf	main@j& (0+255),w,b
  1401   001192  6ED9               	movwf	fsr2l,c
  1402   001194  35C7               	rlcf	(main@j+1)& (0+255),w,b
  1403   001196  6EDA               	movwf	fsr2h,c
  1404   001198  0EDF               	movlw	low main@color_path
  1405   00119A  26D9               	addwf	fsr2l,f,c
  1406   00119C  0E00               	movlw	high main@color_path
  1407   00119E  22DA               	addwfc	fsr2h,f,c
  1408   0011A0  C1CA  FFDE         	movff	main@color_name,postinc2
  1409   0011A4  C1CB  FFDD         	movff	main@color_name+1,postdec2
  1410   0011A8                     
  1411                           ; BSR set to: 1
  1412                           ;../main.c: 102:                 time_path[j] = time;
  1413   0011A8  90D8               	bcf	status,0,c
  1414   0011AA  35C6               	rlcf	main@j& (0+255),w,b
  1415   0011AC  6ED9               	movwf	fsr2l,c
  1416   0011AE  35C7               	rlcf	(main@j+1)& (0+255),w,b
  1417   0011B0  6EDA               	movwf	fsr2h,c
  1418   0011B2  0E64               	movlw	low main@time_path
  1419   0011B4  26D9               	addwf	fsr2l,f,c
  1420   0011B6  0E01               	movlw	high main@time_path
  1421   0011B8  22DA               	addwfc	fsr2h,f,c
  1422   0011BA  C1F4  FFDE         	movff	_time,postinc2
  1423   0011BE  C1F5  FFDD         	movff	_time+1,postdec2
  1424   0011C2                     
  1425                           ; BSR set to: 1
  1426                           ;../main.c: 105:                 char readout3[100];;../main.c: 106:                 spr
      +                          intf(readout3,"%d %d %d %d %d \r\n", color_name,RGB_recorded.L,RGB_recorded.R,RGB_record
      +                          ed.G,RGB_recorded.B);
  1427   0011C2  0E00               	movlw	low main@readout3
  1428   0011C4  0100               	movlb	0	; () banked
  1429   0011C6  6F60               	movwf	sprintf@s& (0+255),b
  1430   0011C8  0E01               	movlw	high main@readout3
  1431   0011CA  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1432   0011CC  0E01               	movlw	low STR_2
  1433   0011CE  6F62               	movwf	sprintf@fmt& (0+255),b
  1434   0011D0  0E0E               	movlw	high STR_2
  1435   0011D2  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1436   0011D4  C1CA  F064         	movff	main@color_name,?_sprintf+4
  1437   0011D8  C1CB  F065         	movff	main@color_name+1,?_sprintf+5
  1438   0011DC  C1D6  F066         	movff	main@RGB_recorded,?_sprintf+6
  1439   0011E0  C1D7  F067         	movff	main@RGB_recorded+1,?_sprintf+7
  1440   0011E4  C1D8  F068         	movff	main@RGB_recorded+2,?_sprintf+8
  1441   0011E8  C1D9  F069         	movff	main@RGB_recorded+3,?_sprintf+9
  1442   0011EC  C1DA  F06A         	movff	main@RGB_recorded+4,?_sprintf+10
  1443   0011F0  C1DB  F06B         	movff	main@RGB_recorded+5,?_sprintf+11
  1444   0011F4  C1DC  F06C         	movff	main@RGB_recorded+6,?_sprintf+12
  1445   0011F8  C1DD  F06D         	movff	main@RGB_recorded+7,?_sprintf+13
  1446   0011FC  ECD1  F014         	call	_sprintf	;wreg free
  1447   001200                     
  1448                           ;../main.c: 107:                 sendStringSerial4(readout3);
  1449   001200  0E00               	movlw	low main@readout3
  1450   001202  6E02               	movwf	sendStringSerial4@string^0,c
  1451   001204  0E01               	movlw	high main@readout3
  1452   001206  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1453   001208  EC47  F016         	call	_sendStringSerial4	;wreg free
  1454   00120C                     
  1455                           ;../main.c: 109:                 motor_action(color_name,&motorL,&motorR);
  1456   00120C  C1CA  F022         	movff	main@color_name,motor_action@color
  1457   001210  C1CB  F023         	movff	main@color_name+1,motor_action@color+1
  1458   001214  0EE7               	movlw	low main@motorL
  1459   001216  6E24               	movwf	motor_action@l^0,c
  1460   001218  0E01               	movlw	high main@motorL
  1461   00121A  6E25               	movwf	(motor_action@l+1)^0,c
  1462   00121C  0EDE               	movlw	low main@motorR
  1463   00121E  6E26               	movwf	motor_action@r^0,c
  1464   001220  0E01               	movlw	high main@motorR
  1465   001222  6E27               	movwf	(motor_action@r+1)^0,c
  1466   001224  ECF1  F00A         	call	_motor_action	;wreg free
  1467   001228                     
  1468                           ;../main.c: 111:                 j++;
  1469   001228  0101               	movlb	1	; () banked
  1470   00122A  4BC6               	infsnz	main@j& (0+255),f,b
  1471   00122C  2BC7               	incf	(main@j+1)& (0+255),f,b
  1472   00122E                     
  1473                           ; BSR set to: 1
  1474                           ;../main.c: 112:                 time = 0;
  1475   00122E  0E00               	movlw	0
  1476   001230  6FF5               	movwf	(_time+1)& (0+255),b
  1477   001232  0E00               	movlw	0
  1478   001234  6FF4               	movwf	_time& (0+255),b
  1479   001236                     
  1480                           ; BSR set to: 1
  1481                           ;../main.c: 113:                 color_flag = 0;
  1482   001236  0E00               	movlw	0
  1483   001238  6E5C               	movwf	(main@color_flag+1)^0,c
  1484   00123A  0E00               	movlw	0
  1485   00123C  6E5B               	movwf	main@color_flag^0,c
  1486   00123E                     l3130:
  1487                           
  1488                           ;../main.c: 115:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1489   00123E  0E11               	movlw	17
  1490   001240  6E5A               	movwf	(??_main+1)^0,c
  1491   001242  0E3C               	movlw	60
  1492   001244  6E59               	movwf	??_main^0,c
  1493   001246  0ECB               	movlw	203
  1494   001248                     u1957:
  1495   001248  2EE8               	decfsz	wreg,f,c
  1496   00124A  D7FE               	bra	u1957
  1497   00124C  2E59               	decfsz	??_main^0,f,c
  1498   00124E  D7FC               	bra	u1957
  1499   001250  2E5A               	decfsz	(??_main+1)^0,f,c
  1500   001252  D7FA               	bra	u1957
  1501   001254  F000               	nop	
  1502   001256                     l3132:
  1503                           
  1504                           ;../main.c: 90:         while (color_name != 8){
  1505   001256  0E08               	movlw	8
  1506   001258  0101               	movlb	1	; () banked
  1507   00125A  19CA               	xorwf	main@color_name& (0+255),w,b
  1508   00125C  11CB               	iorwf	(main@color_name+1)& (0+255),w,b
  1509   00125E  A4D8               	btfss	status,2,c
  1510   001260  EF34  F009         	goto	u1871
  1511   001264  EF36  F009         	goto	u1870
  1512   001268                     u1871:
  1513   001268  EF4E  F008         	goto	l3088
  1514   00126C                     u1870:
  1515   00126C                     
  1516                           ; BSR set to: 1
  1517                           ;../main.c: 119:         spin_180(&motorL,&motorR);
  1518   00126C  0EE7               	movlw	low main@motorL
  1519   00126E  6E1A               	movwf	spin_180@mL^0,c
  1520   001270  0E01               	movlw	high main@motorL
  1521   001272  6E1B               	movwf	(spin_180@mL+1)^0,c
  1522   001274  0EDE               	movlw	low main@motorR
  1523   001276  6E1C               	movwf	spin_180@mR^0,c
  1524   001278  0E01               	movlw	high main@motorR
  1525   00127A  6E1D               	movwf	(spin_180@mR+1)^0,c
  1526   00127C  EC46  F012         	call	_spin_180	;wreg free
  1527   001280                     
  1528                           ;../main.c: 120:         for (int k=15;k>0;k--){
  1529   001280  0E00               	movlw	0
  1530   001282  0101               	movlb	1	; () banked
  1531   001284  6FC9               	movwf	(main@k+1)& (0+255),b
  1532   001286  0E0F               	movlw	15
  1533   001288  6FC8               	movwf	main@k& (0+255),b
  1534   00128A                     l3138:
  1535                           
  1536                           ; BSR set to: 1
  1537   00128A  BFC9               	btfsc	(main@k+1)& (0+255),7,b
  1538   00128C  EF52  F009         	goto	u1880
  1539   001290  51C9               	movf	(main@k+1)& (0+255),w,b
  1540   001292  E106               	bnz	u1881
  1541   001294  05C8               	decf	main@k& (0+255),w,b
  1542   001296  B0D8               	btfsc	status,0,c
  1543   001298  EF50  F009         	goto	u1881
  1544   00129C  EF52  F009         	goto	u1880
  1545   0012A0                     u1881:
  1546   0012A0  EF54  F009         	goto	l214
  1547   0012A4                     u1880:
  1548   0012A4  EF5C  F007         	goto	l197
  1549   0012A8                     l214:
  1550                           
  1551                           ; BSR set to: 1
  1552                           ;../main.c: 121:             INTCONbits.GIE = 0;
  1553   0012A8  9EF2               	bcf	242,7,c	;volatile
  1554   0012AA                     
  1555                           ; BSR set to: 1
  1556                           ;../main.c: 122:             time_return = 0;
  1557   0012AA  0E00               	movlw	0
  1558   0012AC  6FC5               	movwf	(main@time_return+1)& (0+255),b
  1559   0012AE  0E00               	movlw	0
  1560   0012B0  6FC4               	movwf	main@time_return& (0+255),b
  1561   0012B2                     
  1562                           ; BSR set to: 1
  1563                           ;../main.c: 123:             motor_action(color_path[k],&motorL,&motorR);
  1564   0012B2  90D8               	bcf	status,0,c
  1565   0012B4  35C8               	rlcf	main@k& (0+255),w,b
  1566   0012B6  6ED9               	movwf	fsr2l,c
  1567   0012B8  35C9               	rlcf	(main@k+1)& (0+255),w,b
  1568   0012BA  6EDA               	movwf	fsr2h,c
  1569   0012BC  0EDF               	movlw	low main@color_path
  1570   0012BE  26D9               	addwf	fsr2l,f,c
  1571   0012C0  0E00               	movlw	high main@color_path
  1572   0012C2  22DA               	addwfc	fsr2h,f,c
  1573   0012C4  CFDE F022          	movff	postinc2,motor_action@color
  1574   0012C8  CFDD F023          	movff	postdec2,motor_action@color+1
  1575   0012CC  0EE7               	movlw	low main@motorL
  1576   0012CE  6E24               	movwf	motor_action@l^0,c
  1577   0012D0  0E01               	movlw	high main@motorL
  1578   0012D2  6E25               	movwf	(motor_action@l+1)^0,c
  1579   0012D4  0EDE               	movlw	low main@motorR
  1580   0012D6  6E26               	movwf	motor_action@r^0,c
  1581   0012D8  0E01               	movlw	high main@motorR
  1582   0012DA  6E27               	movwf	(motor_action@r+1)^0,c
  1583   0012DC  ECF1  F00A         	call	_motor_action	;wreg free
  1584   0012E0                     
  1585                           ;../main.c: 124:             forward(&motorL,&motorR);
  1586   0012E0  0EE7               	movlw	low main@motorL
  1587   0012E2  6E1A               	movwf	forward@mL^0,c
  1588   0012E4  0E01               	movlw	high main@motorL
  1589   0012E6  6E1B               	movwf	(forward@mL+1)^0,c
  1590   0012E8  0EDE               	movlw	low main@motorR
  1591   0012EA  6E1C               	movwf	forward@mR^0,c
  1592   0012EC  0E01               	movlw	high main@motorR
  1593   0012EE  6E1D               	movwf	(forward@mR+1)^0,c
  1594   0012F0  EC22  F014         	call	_forward	;wreg free
  1595                           
  1596                           ;../main.c: 125:             while (time_return < time_path[k]) {
  1597   0012F4  EF8B  F009         	goto	l3152
  1598   0012F8                     l3148:
  1599                           
  1600                           ; BSR set to: 1
  1601                           ;../main.c: 126:                 _delay((unsigned long)((50)*(64000000/4000.0)));
  1602   0012F8  0E05               	movlw	5
  1603   0012FA  6E5A               	movwf	(??_main+1)^0,c
  1604   0012FC  0E0F               	movlw	15
  1605   0012FE  6E59               	movwf	??_main^0,c
  1606   001300  0EF1               	movlw	241
  1607   001302                     u1967:
  1608   001302  2EE8               	decfsz	wreg,f,c
  1609   001304  D7FE               	bra	u1967
  1610   001306  2E59               	decfsz	??_main^0,f,c
  1611   001308  D7FC               	bra	u1967
  1612   00130A  2E5A               	decfsz	(??_main+1)^0,f,c
  1613   00130C  D7FA               	bra	u1967
  1614   00130E  F000               	nop	
  1615   001310                     
  1616                           ;../main.c: 127:                 time_return++;
  1617   001310  0101               	movlb	1	; () banked
  1618   001312  4BC4               	infsnz	main@time_return& (0+255),f,b
  1619   001314  2BC5               	incf	(main@time_return+1)& (0+255),f,b
  1620   001316                     l3152:
  1621                           
  1622                           ;../main.c: 125:             while (time_return < time_path[k]) {
  1623   001316  90D8               	bcf	status,0,c
  1624   001318  0101               	movlb	1	; () banked
  1625   00131A  35C8               	rlcf	main@k& (0+255),w,b
  1626   00131C  6ED9               	movwf	fsr2l,c
  1627   00131E  35C9               	rlcf	(main@k+1)& (0+255),w,b
  1628   001320  6EDA               	movwf	fsr2h,c
  1629   001322  0E64               	movlw	low main@time_path
  1630   001324  26D9               	addwf	fsr2l,f,c
  1631   001326  0E01               	movlw	high main@time_path
  1632   001328  22DA               	addwfc	fsr2h,f,c
  1633   00132A  50DE               	movf	postinc2,w,c
  1634   00132C  5DC4               	subwf	main@time_return& (0+255),w,b
  1635   00132E  50DE               	movf	postinc2,w,c
  1636   001330  59C5               	subwfb	(main@time_return+1)& (0+255),w,b
  1637   001332  A0D8               	btfss	status,0,c
  1638   001334  EF9E  F009         	goto	u1891
  1639   001338  EFA0  F009         	goto	u1890
  1640   00133C                     u1891:
  1641   00133C  EF7C  F009         	goto	l3148
  1642   001340                     u1890:
  1643   001340                     
  1644                           ; BSR set to: 1
  1645                           ;../main.c: 129:             stop(&motorL,&motorR);
  1646   001340  0EE7               	movlw	low main@motorL
  1647   001342  6E1A               	movwf	stop@mL^0,c
  1648   001344  0E01               	movlw	high main@motorL
  1649   001346  6E1B               	movwf	(stop@mL+1)^0,c
  1650   001348  0EDE               	movlw	low main@motorR
  1651   00134A  6E1C               	movwf	stop@mR^0,c
  1652   00134C  0E01               	movlw	high main@motorR
  1653   00134E  6E1D               	movwf	(stop@mR+1)^0,c
  1654   001350  ECDB  F013         	call	_stop	;wreg free
  1655   001354                     
  1656                           ;../main.c: 130:         }
  1657   001354  0101               	movlb	1	; () banked
  1658   001356  07C8               	decf	main@k& (0+255),f,b
  1659   001358  A0D8               	btfss	status,0,c
  1660   00135A  07C9               	decf	(main@k+1)& (0+255),f,b
  1661   00135C  EF45  F009         	goto	l3138
  1662   001360  EF1F  F000         	goto	start
  1663   001364                     __end_of_main:
  1664                           	callstack 0
  1665                           
  1666 ;; *************** function _sprintf *****************
  1667 ;; Defined at:
  1668 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;  s               2    0[BANK0 ] PTR unsigned char 
  1671 ;;		 -> main@readout3(100), main@readout2(100), 
  1672 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1673 ;;		 -> STR_2(18), STR_1(15), 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;  f              11   16[BANK0 ] struct _IO_FILE
  1676 ;;  ap              2   14[BANK0 ] PTR void [1]
  1677 ;;		 -> ?_sprintf(2), 
  1678 ;;  ret             2    0        int 
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  2    0[BANK0 ] int 
  1681 ;; Registers used:
  1682 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1688 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1689 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1691 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1692 ;;Total ram usage:       27 bytes
  1693 ;; Hardware stack levels used: 1
  1694 ;; Hardware stack levels required when called: 8
  1695 ;; This function calls:
  1696 ;;		_vfprintf
  1697 ;; This function is called by:
  1698 ;;		_main
  1699 ;; This function uses a non-reentrant model
  1700 ;;
  1701                           
  1702                           	psect	text1
  1703   0029A2                     __ptext1:
  1704                           	callstack 0
  1705   0029A2                     _sprintf:
  1706                           	callstack 22
  1707   0029A2  0E64               	movlw	low (?_sprintf+4)
  1708   0029A4  0100               	movlb	0	; () banked
  1709   0029A6  6F6E               	movwf	sprintf@ap& (0+255),b
  1710   0029A8  0E00               	movlw	high (?_sprintf+4)
  1711   0029AA  6F6F               	movwf	(sprintf@ap+1)& (0+255),b
  1712   0029AC  C060  F070         	movff	sprintf@s,sprintf@f
  1713   0029B0  C061  F071         	movff	sprintf@s+1,sprintf@f+1
  1714   0029B4                     
  1715                           ; BSR set to: 0
  1716   0029B4  0E00               	movlw	0
  1717   0029B6  6F74               	movwf	(sprintf@f+4)& (0+255),b
  1718   0029B8  0E00               	movlw	0
  1719   0029BA  6F73               	movwf	(sprintf@f+3)& (0+255),b
  1720   0029BC                     
  1721                           ; BSR set to: 0
  1722   0029BC  0E00               	movlw	0
  1723   0029BE  6F7A               	movwf	(sprintf@f+10)& (0+255),b
  1724   0029C0  0E00               	movlw	0
  1725   0029C2  6F79               	movwf	(sprintf@f+9)& (0+255),b
  1726   0029C4                     
  1727                           ; BSR set to: 0
  1728   0029C4  0E70               	movlw	low sprintf@f
  1729   0029C6  6E51               	movwf	vfprintf@fp^0,c
  1730   0029C8  0E00               	movlw	high sprintf@f
  1731   0029CA  6E52               	movwf	(vfprintf@fp+1)^0,c
  1732   0029CC  C062  F053         	movff	sprintf@fmt,vfprintf@fmt
  1733   0029D0  C063  F054         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1734   0029D4  0E6E               	movlw	low sprintf@ap
  1735   0029D6  6E55               	movwf	vfprintf@ap^0,c
  1736   0029D8  0E00               	movlw	high sprintf@ap
  1737   0029DA  6E56               	movwf	(vfprintf@ap+1)^0,c
  1738   0029DC  ECFA  F014         	call	_vfprintf	;wreg free
  1739   0029E0  0100               	movlb	0	; () banked
  1740   0029E2  5173               	movf	(sprintf@f+3)& (0+255),w,b
  1741   0029E4  2560               	addwf	sprintf@s& (0+255),w,b
  1742   0029E6  6ED9               	movwf	fsr2l,c
  1743   0029E8  5174               	movf	(sprintf@f+4)& (0+255),w,b
  1744   0029EA  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  1745   0029EC  6EDA               	movwf	fsr2h,c
  1746   0029EE  0E00               	movlw	0
  1747   0029F0  6EDF               	movwf	indf2,c
  1748   0029F2                     
  1749                           ; BSR set to: 0
  1750   0029F2  0012               	return		;funcret
  1751   0029F4                     __end_of_sprintf:
  1752                           	callstack 0
  1753                           
  1754 ;; *************** function _vfprintf *****************
  1755 ;; Defined at:
  1756 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
  1759 ;;		 -> sprintf@f(11), 
  1760 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
  1761 ;;		 -> STR_2(18), STR_1(15), 
  1762 ;;  ap              2   84[COMRAM] PTR PTR void 
  1763 ;;		 -> sprintf@ap(2), 
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;  cfmt            2   86[COMRAM] PTR unsigned char 
  1766 ;;		 -> STR_2(18), STR_1(15), 
  1767 ;; Return value:  Size  Location     Type
  1768 ;;                  2   80[COMRAM] int 
  1769 ;; Registers used:
  1770 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1776 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1777 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1779 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1780 ;;Total ram usage:        8 bytes
  1781 ;; Hardware stack levels used: 1
  1782 ;; Hardware stack levels required when called: 7
  1783 ;; This function calls:
  1784 ;;		_vfpfcnvrt
  1785 ;; This function is called by:
  1786 ;;		_sprintf
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           	psect	text2
  1791   0029F4                     __ptext2:
  1792                           	callstack 0
  1793   0029F4                     _vfprintf:
  1794                           	callstack 22
  1795   0029F4                     
  1796                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  1797   0029F4  C053  F057         	movff	vfprintf@fmt,vfprintf@cfmt
  1798   0029F8  C054  F058         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1799                           
  1800                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1801   0029FC  EF0E  F015         	goto	l2780
  1802   002A00                     l2778:
  1803                           
  1804                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1805   002A00  C051  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1806   002A04  C052  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1807   002A08  0E57               	movlw	low vfprintf@cfmt
  1808   002A0A  6E41               	movwf	vfpfcnvrt@fmt^0,c
  1809   002A0C  0E00               	movlw	high vfprintf@cfmt
  1810   002A0E  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1811   002A10  C055  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
  1812   002A14  C056  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1813   002A18  EC7A  F00F         	call	_vfpfcnvrt	;wreg free
  1814   002A1C                     l2780:
  1815                           
  1816                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1817   002A1C  C057  FFF6         	movff	vfprintf@cfmt,tblptrl
  1818   002A20  C058  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1819   002A24                     	if	0	;tblptru may be non-zero
  1820   002A24                     	endif
  1821   002A24                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1822   002A24  0E00               	movlw	low (__mediumconst shr (0+16))
  1823   002A26  6EF8               	movwf	tblptru,c
  1824   002A28                     	endif
  1825   002A28  0008               	tblrd		*
  1826   002A2A  50F5               	movf	tablat,w,c
  1827   002A2C  0900               	iorlw	0
  1828   002A2E  A4D8               	btfss	status,2,c
  1829   002A30  EF1C  F015         	goto	u1551
  1830   002A34  EF1E  F015         	goto	u1550
  1831   002A38                     u1551:
  1832   002A38  EF00  F015         	goto	l2778
  1833   002A3C                     u1550:
  1834   002A3C                     
  1835                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  1836   002A3C  0E00               	movlw	0
  1837   002A3E  6E52               	movwf	(?_vfprintf+1)^0,c
  1838   002A40  0E00               	movlw	0
  1839   002A42  6E51               	movwf	?_vfprintf^0,c
  1840   002A44  0012               	return		;funcret
  1841   002A46                     __end_of_vfprintf:
  1842                           	callstack 0
  1843                           
  1844 ;; *************** function _vfpfcnvrt *****************
  1845 ;; Defined at:
  1846 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
  1849 ;;		 -> sprintf@f(11), 
  1850 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
  1851 ;;		 -> vfprintf@cfmt(2), 
  1852 ;;  ap              2   66[COMRAM] PTR PTR void 
  1853 ;;		 -> sprintf@ap(2), 
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;  convarg         8   70[COMRAM] struct .
  1856 ;;  cp              2   78[COMRAM] PTR unsigned char 
  1857 ;;		 -> STR_2(18), STR_1(15), 
  1858 ;;  i               2    0        int 
  1859 ;;  done            2    0        int 
  1860 ;;  c               1    0        unsigned char 
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  1    wreg      void 
  1863 ;; Registers used:
  1864 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1870 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1871 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1872 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1873 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1874 ;;Total ram usage:       18 bytes
  1875 ;; Hardware stack levels used: 1
  1876 ;; Hardware stack levels required when called: 6
  1877 ;; This function calls:
  1878 ;;		_dtoa
  1879 ;;		_fputc
  1880 ;; This function is called by:
  1881 ;;		_vfprintf
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           	psect	text3
  1886   001EF4                     __ptext3:
  1887                           	callstack 0
  1888   001EF4                     _vfpfcnvrt:
  1889                           	callstack 22
  1890   001EF4                     
  1891                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  1892   001EF4  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1893   001EF8  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1894   001EFC  CFDE FFF6          	movff	postinc2,tblptrl
  1895   001F00  CFDD FFF7          	movff	postdec2,tblptrh
  1896   001F04                     	if	0	;tblptru may be non-zero
  1897   001F04                     	endif
  1898   001F04                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1899   001F04  0E00               	movlw	low (__mediumconst shr (0+16))
  1900   001F06  6EF8               	movwf	tblptru,c
  1901   001F08                     	endif
  1902   001F08  0008               	tblrd		*
  1903   001F0A  50F5               	movf	tablat,w,c
  1904   001F0C  0A25               	xorlw	37
  1905   001F0E  A4D8               	btfss	status,2,c
  1906   001F10  EF8C  F00F         	goto	u1421
  1907   001F14  EF8E  F00F         	goto	u1420
  1908   001F18                     u1421:
  1909   001F18  EF12  F010         	goto	l2524
  1910   001F1C                     u1420:
  1911   001F1C                     
  1912                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  1913   001F1C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1914   001F20  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1915   001F24  2ADE               	incf	postinc2,f,c
  1916   001F26  0E00               	movlw	0
  1917   001F28  22DD               	addwfc	postdec2,f,c
  1918   001F2A                     
  1919                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  1920   001F2A  0E00               	movlw	0
  1921   001F2C  0101               	movlb	1	; () banked
  1922   001F2E  6FF1               	movwf	(_width+1)& (0+255),b
  1923   001F30  0E00               	movlw	0
  1924   001F32  6FF0               	movwf	_width& (0+255),b
  1925   001F34  C1F0  F1FA         	movff	_width,_flags
  1926   001F38                     
  1927                           ; BSR set to: 1
  1928                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  1929   001F38  69F2               	setf	_prec& (0+255),b
  1930   001F3A  69F3               	setf	(_prec+1)& (0+255),b
  1931   001F3C                     
  1932                           ; BSR set to: 1
  1933                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1934   001F3C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1935   001F40  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1936   001F44  CFDE F04F          	movff	postinc2,vfpfcnvrt@cp
  1937   001F48  CFDD F050          	movff	postdec2,vfpfcnvrt@cp+1
  1938   001F4C                     
  1939                           ; BSR set to: 1
  1940                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1941   001F4C  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1942   001F50  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1943   001F54                     	if	0	;tblptru may be non-zero
  1944   001F54                     	endif
  1945   001F54                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1946   001F54  0E00               	movlw	low (__mediumconst shr (0+16))
  1947   001F56  6EF8               	movwf	tblptru,c
  1948   001F58                     	endif
  1949   001F58  0008               	tblrd		*
  1950   001F5A  50F5               	movf	tablat,w,c
  1951   001F5C  0A64               	xorlw	100
  1952   001F5E  B4D8               	btfsc	status,2,c
  1953   001F60  EFB4  F00F         	goto	u1431
  1954   001F64  EFB6  F00F         	goto	u1430
  1955   001F68                     u1431:
  1956   001F68  EFC6  F00F         	goto	l2514
  1957   001F6C                     u1430:
  1958   001F6C                     
  1959                           ; BSR set to: 1
  1960   001F6C  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1961   001F70  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1962   001F74                     	if	0	;tblptru may be non-zero
  1963   001F74                     	endif
  1964   001F74                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1965   001F74  0E00               	movlw	low (__mediumconst shr (0+16))
  1966   001F76  6EF8               	movwf	tblptru,c
  1967   001F78                     	endif
  1968   001F78  0008               	tblrd		*
  1969   001F7A  50F5               	movf	tablat,w,c
  1970   001F7C  0A69               	xorlw	105
  1971   001F7E  A4D8               	btfss	status,2,c
  1972   001F80  EFC4  F00F         	goto	u1441
  1973   001F84  EFC6  F00F         	goto	u1440
  1974   001F88                     u1441:
  1975   001F88  EF09  F010         	goto	l2520
  1976   001F8C                     u1440:
  1977   001F8C                     l2514:
  1978                           
  1979                           ; BSR set to: 1
  1980                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1981   001F8C  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1982   001F90  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1983   001F94  CFDF F045          	movff	indf2,??_vfpfcnvrt
  1984   001F98  0E02               	movlw	2
  1985   001F9A  26DE               	addwf	postinc2,f,c
  1986   001F9C  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  1987   001FA0  0E00               	movlw	0
  1988   001FA2  22DD               	addwfc	postdec2,f,c
  1989   001FA4  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1990   001FA8  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1991   001FAC  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg
  1992   001FB0  CFDD F048          	movff	postdec2,vfpfcnvrt@convarg+1
  1993   001FB4  0E00               	movlw	0
  1994   001FB6  BE48               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1995   001FB8  0EFF               	movlw	-1
  1996   001FBA  6E49               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1997   001FBC  6E4A               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1998   001FBE  6E4B               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1999   001FC0  6E4C               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2000   001FC2  6E4D               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2001   001FC4  6E4E               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2002                           
  2003                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2004   001FC6  0E01               	movlw	1
  2005   001FC8  244F               	addwf	vfpfcnvrt@cp^0,w,c
  2006   001FCA  6E45               	movwf	??_vfpfcnvrt^0,c
  2007   001FCC  0E00               	movlw	0
  2008   001FCE  2050               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2009   001FD0  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  2010   001FD2  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2011   001FD6  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2012   001FDA  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  2013   001FDE  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2014   001FE2                     
  2015                           ; BSR set to: 1
  2016                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2017   001FE2  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  2018   001FE6  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2019   001FEA  C047  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  2020   001FEE  C048  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2021   001FF2  C049  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2022   001FF6  C04A  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2023   001FFA  C04B  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2024   001FFE  C04C  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2025   002002  C04D  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2026   002006  C04E  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2027   00200A  ECB2  F009         	call	_dtoa	;wreg free
  2028   00200E  EF28  F010         	goto	l1176
  2029   002012                     l2520:
  2030                           
  2031                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2032   002012  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2033   002016  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2034   00201A  2ADE               	incf	postinc2,f,c
  2035   00201C  0E00               	movlw	0
  2036   00201E  22DD               	addwfc	postdec2,f,c
  2037   002020  EF28  F010         	goto	l1176
  2038   002024                     l2524:
  2039                           
  2040                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2041   002024  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2042   002028  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2043   00202C  CFDE FFF6          	movff	postinc2,tblptrl
  2044   002030  CFDD FFF7          	movff	postdec2,tblptrh
  2045   002034                     	if	0	;tblptru may be non-zero
  2046   002034                     	endif
  2047   002034                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2048   002034  0E00               	movlw	low (__mediumconst shr (0+16))
  2049   002036  6EF8               	movwf	tblptru,c
  2050   002038                     	endif
  2051   002038  0008               	tblrd		*
  2052   00203A  50F5               	movf	tablat,w,c
  2053   00203C  6E01               	movwf	fputc@c^0,c
  2054   00203E  6A02               	clrf	(fputc@c+1)^0,c
  2055   002040  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2056   002044  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2057   002048  EC29  F010         	call	_fputc	;wreg free
  2058   00204C  EF09  F010         	goto	l2520
  2059   002050                     l1176:
  2060   002050  0012               	return		;funcret
  2061   002052                     __end_of_vfpfcnvrt:
  2062                           	callstack 0
  2063                           
  2064 ;; *************** function _dtoa *****************
  2065 ;; Defined at:
  2066 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2069 ;;		 -> sprintf@f(11), 
  2070 ;;  d               8   29[COMRAM] long long 
  2071 ;; Auto vars:     Size  Location     Type
  2072 ;;  n               8   51[COMRAM] long long 
  2073 ;;  i               2   59[COMRAM] int 
  2074 ;;  w               2   49[COMRAM] int 
  2075 ;;  p               2   47[COMRAM] int 
  2076 ;;  s               1   61[COMRAM] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2086 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2087 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2088 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2089 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2090 ;;Total ram usage:       35 bytes
  2091 ;; Hardware stack levels used: 1
  2092 ;; Hardware stack levels required when called: 5
  2093 ;; This function calls:
  2094 ;;		___aodiv
  2095 ;;		___aomod
  2096 ;;		_abs
  2097 ;;		_pad
  2098 ;; This function is called by:
  2099 ;;		_vfpfcnvrt
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text4
  2104   001364                     __ptext4:
  2105                           	callstack 0
  2106   001364                     _dtoa:
  2107                           	callstack 22
  2108   001364                     
  2109                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2110   001364  C01E  F034         	movff	dtoa@d,dtoa@n
  2111   001368  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  2112   00136C  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  2113   001370  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  2114   001374  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  2115   001378  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  2116   00137C  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  2117   001380  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  2118   001384                     
  2119                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2120   001384  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  2121   001386  EFC7  F009         	goto	u1261
  2122   00138A  EFCA  F009         	goto	u1260
  2123   00138E                     u1261:
  2124   00138E  0E01               	movlw	1
  2125   001390  EFCB  F009         	goto	u1270
  2126   001394                     u1260:
  2127   001394  0E00               	movlw	0
  2128   001396                     u1270:
  2129   001396  6E3E               	movwf	dtoa@s^0,c
  2130   001398                     
  2131                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2132   001398  503E               	movf	dtoa@s^0,w,c
  2133   00139A  B4D8               	btfsc	status,2,c
  2134   00139C  EFD2  F009         	goto	u1281
  2135   0013A0  EFD4  F009         	goto	u1280
  2136   0013A4                     u1281:
  2137   0013A4  EFE4  F009         	goto	l2412
  2138   0013A8                     u1280:
  2139   0013A8                     
  2140                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2141   0013A8  1E3B               	comf	(dtoa@n+7)^0,f,c
  2142   0013AA  1E3A               	comf	(dtoa@n+6)^0,f,c
  2143   0013AC  1E39               	comf	(dtoa@n+5)^0,f,c
  2144   0013AE  1E38               	comf	(dtoa@n+4)^0,f,c
  2145   0013B0  1E37               	comf	(dtoa@n+3)^0,f,c
  2146   0013B2  1E36               	comf	(dtoa@n+2)^0,f,c
  2147   0013B4  1E35               	comf	(dtoa@n+1)^0,f,c
  2148   0013B6  6C34               	negf	dtoa@n^0,c
  2149   0013B8  0E00               	movlw	0
  2150   0013BA  2235               	addwfc	(dtoa@n+1)^0,f,c
  2151   0013BC  2236               	addwfc	(dtoa@n+2)^0,f,c
  2152   0013BE  2237               	addwfc	(dtoa@n+3)^0,f,c
  2153   0013C0  2238               	addwfc	(dtoa@n+4)^0,f,c
  2154   0013C2  2239               	addwfc	(dtoa@n+5)^0,f,c
  2155   0013C4  223A               	addwfc	(dtoa@n+6)^0,f,c
  2156   0013C6  223B               	addwfc	(dtoa@n+7)^0,f,c
  2157   0013C8                     l2412:
  2158                           
  2159                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2160   0013C8  0101               	movlb	1	; () banked
  2161   0013CA  BFF3               	btfsc	(_prec+1)& (0+255),7,b
  2162   0013CC  EFF2  F009         	goto	u1290
  2163   0013D0  51F3               	movf	(_prec+1)& (0+255),w,b
  2164   0013D2  E106               	bnz	u1291
  2165   0013D4  05F2               	decf	_prec& (0+255),w,b
  2166   0013D6  B0D8               	btfsc	status,0,c
  2167   0013D8  EFF0  F009         	goto	u1291
  2168   0013DC  EFF2  F009         	goto	u1290
  2169   0013E0                     u1291:
  2170   0013E0  EFF8  F009         	goto	l1155
  2171   0013E4                     u1290:
  2172   0013E4                     
  2173                           ; BSR set to: 1
  2174   0013E4  0E00               	movlw	0
  2175   0013E6  6E31               	movwf	(dtoa@p+1)^0,c
  2176   0013E8  0E01               	movlw	1
  2177   0013EA  6E30               	movwf	dtoa@p^0,c
  2178   0013EC  EFFC  F009         	goto	l1157
  2179   0013F0                     l1155:
  2180                           
  2181                           ; BSR set to: 1
  2182   0013F0  C1F2  F030         	movff	_prec,dtoa@p
  2183   0013F4  C1F3  F031         	movff	_prec+1,dtoa@p+1
  2184   0013F8                     l1157:
  2185                           
  2186                           ; BSR set to: 1
  2187                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2188   0013F8  C1F0  F032         	movff	_width,dtoa@w
  2189   0013FC  C1F1  F033         	movff	_width+1,dtoa@w+1
  2190   001400                     
  2191                           ; BSR set to: 1
  2192                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2193   001400  503E               	movf	dtoa@s^0,w,c
  2194   001402  B4D8               	btfsc	status,2,c
  2195   001404  EF06  F00A         	goto	u1301
  2196   001408  EF08  F00A         	goto	u1300
  2197   00140C                     u1301:
  2198   00140C  EF1F  F00A         	goto	l1158
  2199   001410                     u1300:
  2200   001410                     
  2201                           ; BSR set to: 1
  2202                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2203   001410  0632               	decf	dtoa@w^0,f,c
  2204   001412  A0D8               	btfss	status,0,c
  2205   001414  0633               	decf	(dtoa@w+1)^0,f,c
  2206   001416                     
  2207                           ; BSR set to: 1
  2208                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2209   001416  503E               	movf	dtoa@s^0,w,c
  2210   001418  A4D8               	btfss	status,2,c
  2211   00141A  EF11  F00A         	goto	u1311
  2212   00141E  EF13  F00A         	goto	u1310
  2213   001422                     u1311:
  2214   001422  EF19  F00A         	goto	l2424
  2215   001426                     u1310:
  2216   001426                     
  2217                           ; BSR set to: 1
  2218   001426  0E00               	movlw	0
  2219   001428  6E2F               	movwf	(_dtoa$2419+1)^0,c
  2220   00142A  0E2B               	movlw	43
  2221   00142C  6E2E               	movwf	_dtoa$2419^0,c
  2222   00142E  EF1D  F00A         	goto	l2426
  2223   001432                     l2424:
  2224                           
  2225                           ; BSR set to: 1
  2226   001432  0E00               	movlw	0
  2227   001434  6E2F               	movwf	(_dtoa$2419+1)^0,c
  2228   001436  0E2D               	movlw	45
  2229   001438  6E2E               	movwf	_dtoa$2419^0,c
  2230   00143A                     l2426:
  2231                           
  2232                           ; BSR set to: 1
  2233   00143A  C02E  F03E         	movff	_dtoa$2419,dtoa@s
  2234   00143E                     l1158:
  2235                           
  2236                           ; BSR set to: 1
  2237                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2238   00143E  0E00               	movlw	0
  2239   001440  6E3D               	movwf	(dtoa@i+1)^0,c
  2240   001442  0E1F               	movlw	31
  2241   001444  6E3C               	movwf	dtoa@i^0,c
  2242   001446                     
  2243                           ; BSR set to: 1
  2244                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2245   001446  0E00               	movlw	0
  2246   001448  0102               	movlb	2	; () banked
  2247   00144A  6FAB               	movwf	(_dbuf+31)& (0+255),b
  2248                           
  2249                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2250   00144C  EFA4  F00A         	goto	l2440
  2251   001450                     l2430:
  2252                           
  2253                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2254   001450  063C               	decf	dtoa@i^0,f,c
  2255   001452  A0D8               	btfss	status,0,c
  2256   001454  063D               	decf	(dtoa@i+1)^0,f,c
  2257   001456                     
  2258                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2259   001456  0E8C               	movlw	low _dbuf
  2260   001458  243C               	addwf	dtoa@i^0,w,c
  2261   00145A  6ED9               	movwf	fsr2l,c
  2262   00145C  0E02               	movlw	high _dbuf
  2263   00145E  203D               	addwfc	(dtoa@i+1)^0,w,c
  2264   001460  6EDA               	movwf	fsr2h,c
  2265   001462  C034  F001         	movff	dtoa@n,___aomod@dividend
  2266   001466  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  2267   00146A  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  2268   00146E  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  2269   001472  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  2270   001476  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  2271   00147A  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  2272   00147E  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  2273   001482  0E0A               	movlw	10
  2274   001484  6E09               	movwf	___aomod@divisor^0,c
  2275   001486  0E00               	movlw	0
  2276   001488  6E0A               	movwf	(___aomod@divisor+1)^0,c
  2277   00148A  0E00               	movlw	0
  2278   00148C  6E0B               	movwf	(___aomod@divisor+2)^0,c
  2279   00148E  0E00               	movlw	0
  2280   001490  6E0C               	movwf	(___aomod@divisor+3)^0,c
  2281   001492  0E00               	movlw	0
  2282   001494  6E0D               	movwf	(___aomod@divisor+4)^0,c
  2283   001496  0E00               	movlw	0
  2284   001498  6E0E               	movwf	(___aomod@divisor+5)^0,c
  2285   00149A  0E00               	movlw	0
  2286   00149C  6E0F               	movwf	(___aomod@divisor+6)^0,c
  2287   00149E  0E00               	movlw	0
  2288   0014A0  6E10               	movwf	(___aomod@divisor+7)^0,c
  2289   0014A2  ECC8  F00E         	call	___aomod	;wreg free
  2290   0014A6  C001  F026         	movff	?___aomod,??_dtoa
  2291   0014AA  C002  F027         	movff	?___aomod+1,??_dtoa+1
  2292   0014AE  C003  F028         	movff	?___aomod+2,??_dtoa+2
  2293   0014B2  C004  F029         	movff	?___aomod+3,??_dtoa+3
  2294   0014B6  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  2295   0014BA  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  2296   0014BE  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  2297   0014C2  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  2298   0014C6  C026  F013         	movff	??_dtoa,abs@a
  2299   0014CA  C027  F014         	movff	??_dtoa+1,abs@a+1
  2300   0014CE  EC27  F016         	call	_abs	;wreg free
  2301   0014D2  5013               	movf	?_abs^0,w,c
  2302   0014D4  0F30               	addlw	48
  2303   0014D6  6EDF               	movwf	indf2,c
  2304   0014D8                     
  2305                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2306   0014D8  0630               	decf	dtoa@p^0,f,c
  2307   0014DA  A0D8               	btfss	status,0,c
  2308   0014DC  0631               	decf	(dtoa@p+1)^0,f,c
  2309   0014DE                     
  2310                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2311   0014DE  0632               	decf	dtoa@w^0,f,c
  2312   0014E0  A0D8               	btfss	status,0,c
  2313   0014E2  0633               	decf	(dtoa@w+1)^0,f,c
  2314   0014E4                     
  2315                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2316   0014E4  C034  F001         	movff	dtoa@n,___aodiv@dividend
  2317   0014E8  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  2318   0014EC  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  2319   0014F0  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  2320   0014F4  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  2321   0014F8  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  2322   0014FC  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  2323   001500  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  2324   001504  0E0A               	movlw	10
  2325   001506  6E09               	movwf	___aodiv@divisor^0,c
  2326   001508  0E00               	movlw	0
  2327   00150A  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  2328   00150C  0E00               	movlw	0
  2329   00150E  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  2330   001510  0E00               	movlw	0
  2331   001512  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  2332   001514  0E00               	movlw	0
  2333   001516  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  2334   001518  0E00               	movlw	0
  2335   00151A  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  2336   00151C  0E00               	movlw	0
  2337   00151E  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  2338   001520  0E00               	movlw	0
  2339   001522  6E10               	movwf	(___aodiv@divisor+7)^0,c
  2340   001524  EC04  F00E         	call	___aodiv	;wreg free
  2341   001528  C001  F034         	movff	?___aodiv,dtoa@n
  2342   00152C  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  2343   001530  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  2344   001534  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  2345   001538  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  2346   00153C  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  2347   001540  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  2348   001544  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  2349   001548                     l2440:
  2350                           
  2351                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2352   001548  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  2353   00154A  EFAF  F00A         	goto	u1321
  2354   00154E  503D               	movf	(dtoa@i+1)^0,w,c
  2355   001550  E108               	bnz	u1320
  2356   001552  043C               	decf	dtoa@i^0,w,c
  2357   001554  A0D8               	btfss	status,0,c
  2358   001556  EFAF  F00A         	goto	u1321
  2359   00155A  EFB1  F00A         	goto	u1320
  2360   00155E                     u1321:
  2361   00155E  EFCD  F00A         	goto	l2446
  2362   001562                     u1320:
  2363   001562  5034               	movf	dtoa@n^0,w,c
  2364   001564  1035               	iorwf	(dtoa@n+1)^0,w,c
  2365   001566  1036               	iorwf	(dtoa@n+2)^0,w,c
  2366   001568  1037               	iorwf	(dtoa@n+3)^0,w,c
  2367   00156A  1038               	iorwf	(dtoa@n+4)^0,w,c
  2368   00156C  1039               	iorwf	(dtoa@n+5)^0,w,c
  2369   00156E  103A               	iorwf	(dtoa@n+6)^0,w,c
  2370   001570  103B               	iorwf	(dtoa@n+7)^0,w,c
  2371   001572  A4D8               	btfss	status,2,c
  2372   001574  EFBE  F00A         	goto	u1331
  2373   001578  EFC0  F00A         	goto	u1330
  2374   00157C                     u1331:
  2375   00157C  EF28  F00A         	goto	l2430
  2376   001580                     u1330:
  2377   001580  BE31               	btfsc	(dtoa@p+1)^0,7,c
  2378   001582  EFCD  F00A         	goto	u1340
  2379   001586  5031               	movf	(dtoa@p+1)^0,w,c
  2380   001588  E106               	bnz	u1341
  2381   00158A  0430               	decf	dtoa@p^0,w,c
  2382   00158C  B0D8               	btfsc	status,0,c
  2383   00158E  EFCB  F00A         	goto	u1341
  2384   001592  EFCD  F00A         	goto	u1340
  2385   001596                     u1341:
  2386   001596  EF28  F00A         	goto	l2430
  2387   00159A                     u1340:
  2388   00159A                     l2446:
  2389                           
  2390                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2391   00159A  503E               	movf	dtoa@s^0,w,c
  2392   00159C  B4D8               	btfsc	status,2,c
  2393   00159E  EFD3  F00A         	goto	u1351
  2394   0015A2  EFD5  F00A         	goto	u1350
  2395   0015A6                     u1351:
  2396   0015A6  EFE0  F00A         	goto	l2452
  2397   0015AA                     u1350:
  2398   0015AA                     
  2399                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2400   0015AA  063C               	decf	dtoa@i^0,f,c
  2401   0015AC  A0D8               	btfss	status,0,c
  2402   0015AE  063D               	decf	(dtoa@i+1)^0,f,c
  2403   0015B0                     
  2404                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2405   0015B0  0E8C               	movlw	low _dbuf
  2406   0015B2  243C               	addwf	dtoa@i^0,w,c
  2407   0015B4  6ED9               	movwf	fsr2l,c
  2408   0015B6  0E02               	movlw	high _dbuf
  2409   0015B8  203D               	addwfc	(dtoa@i+1)^0,w,c
  2410   0015BA  6EDA               	movwf	fsr2h,c
  2411   0015BC  C03E  FFDF         	movff	dtoa@s,indf2
  2412   0015C0                     l2452:
  2413                           
  2414                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2415   0015C0  C01C  F011         	movff	dtoa@fp,pad@fp
  2416   0015C4  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  2417   0015C8  0E8C               	movlw	low _dbuf
  2418   0015CA  243C               	addwf	dtoa@i^0,w,c
  2419   0015CC  6E13               	movwf	pad@buf^0,c
  2420   0015CE  0E02               	movlw	high _dbuf
  2421   0015D0  203D               	addwfc	(dtoa@i+1)^0,w,c
  2422   0015D2  6E14               	movwf	(pad@buf+1)^0,c
  2423   0015D4  C032  F015         	movff	dtoa@w,pad@p
  2424   0015D8  C033  F016         	movff	dtoa@w+1,pad@p+1
  2425   0015DC  EC67  F014         	call	_pad	;wreg free
  2426   0015E0  0012               	return		;funcret
  2427   0015E2                     __end_of_dtoa:
  2428                           	callstack 0
  2429                           
  2430 ;; *************** function _pad *****************
  2431 ;; Defined at:
  2432 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  2435 ;;		 -> sprintf@f(11), 
  2436 ;;  buf             2   18[COMRAM] PTR unsigned char 
  2437 ;;		 -> dbuf(32), 
  2438 ;;  p               2   20[COMRAM] int 
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;  w               2   25[COMRAM] int 
  2441 ;;  i               2   23[COMRAM] int 
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  1    wreg      void 
  2444 ;; Registers used:
  2445 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2451 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2452 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2453 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2454 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2455 ;;Total ram usage:       11 bytes
  2456 ;; Hardware stack levels used: 1
  2457 ;; Hardware stack levels required when called: 4
  2458 ;; This function calls:
  2459 ;;		_fputc
  2460 ;;		_fputs
  2461 ;; This function is called by:
  2462 ;;		_dtoa
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text5
  2467   0028CE                     __ptext5:
  2468                           	callstack 0
  2469   0028CE                     _pad:
  2470                           	callstack 22
  2471   0028CE                     
  2472                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  2473   0028CE  BE16               	btfsc	(pad@p+1)^0,7,c
  2474   0028D0  EF6C  F014         	goto	u1151
  2475   0028D4  EF6E  F014         	goto	u1150
  2476   0028D8                     u1151:
  2477   0028D8  EF74  F014         	goto	l2336
  2478   0028DC                     u1150:
  2479   0028DC  C015  F01A         	movff	pad@p,pad@w
  2480   0028E0  C016  F01B         	movff	pad@p+1,pad@w+1
  2481   0028E4  EF78  F014         	goto	l1146
  2482   0028E8                     l2336:
  2483   0028E8  0E00               	movlw	0
  2484   0028EA  6E1B               	movwf	(pad@w+1)^0,c
  2485   0028EC  0E00               	movlw	0
  2486   0028EE  6E1A               	movwf	pad@w^0,c
  2487   0028F0                     l1146:
  2488                           
  2489                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  2490   0028F0  0E00               	movlw	0
  2491   0028F2  6E19               	movwf	(pad@i+1)^0,c
  2492   0028F4  0E00               	movlw	0
  2493   0028F6  6E18               	movwf	pad@i^0,c
  2494                           
  2495                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2496   0028F8  EF8A  F014         	goto	l2342
  2497   0028FC                     l2338:
  2498                           
  2499                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  2500   0028FC  0E00               	movlw	0
  2501   0028FE  6E02               	movwf	(fputc@c+1)^0,c
  2502   002900  0E20               	movlw	32
  2503   002902  6E01               	movwf	fputc@c^0,c
  2504   002904  C011  F003         	movff	pad@fp,fputc@fp
  2505   002908  C012  F004         	movff	pad@fp+1,fputc@fp+1
  2506   00290C  EC29  F010         	call	_fputc	;wreg free
  2507   002910                     
  2508                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  2509   002910  4A18               	infsnz	pad@i^0,f,c
  2510   002912  2A19               	incf	(pad@i+1)^0,f,c
  2511   002914                     l2342:
  2512                           
  2513                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2514   002914  501A               	movf	pad@w^0,w,c
  2515   002916  5C18               	subwf	pad@i^0,w,c
  2516   002918  5019               	movf	(pad@i+1)^0,w,c
  2517   00291A  0A80               	xorlw	128
  2518   00291C  6E17               	movwf	??_pad^0,c
  2519   00291E  501B               	movf	(pad@w+1)^0,w,c
  2520   002920  0A80               	xorlw	128
  2521   002922  5817               	subwfb	??_pad^0,w,c
  2522   002924  A0D8               	btfss	status,0,c
  2523   002926  EF97  F014         	goto	u1161
  2524   00292A  EF99  F014         	goto	u1160
  2525   00292E                     u1161:
  2526   00292E  EF7E  F014         	goto	l2338
  2527   002932                     u1160:
  2528   002932                     
  2529                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  2530   002932  C013  F00A         	movff	pad@buf,fputs@s
  2531   002936  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2532   00293A  C011  F00C         	movff	pad@fp,fputs@fp
  2533   00293E  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2534   002942  ECC3  F015         	call	_fputs	;wreg free
  2535   002946  0012               	return		;funcret
  2536   002948                     __end_of_pad:
  2537                           	callstack 0
  2538                           
  2539 ;; *************** function _fputs *****************
  2540 ;; Defined at:
  2541 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  2542 ;; Parameters:    Size  Location     Type
  2543 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2544 ;;		 -> dbuf(32), 
  2545 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  2546 ;;		 -> sprintf@f(11), 
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;  i               2   14[COMRAM] int 
  2549 ;;  c               1   13[COMRAM] unsigned char 
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  2    9[COMRAM] int 
  2552 ;; Registers used:
  2553 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2559 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2560 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2562 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2563 ;;Total ram usage:        7 bytes
  2564 ;; Hardware stack levels used: 1
  2565 ;; Hardware stack levels required when called: 3
  2566 ;; This function calls:
  2567 ;;		_fputc
  2568 ;; This function is called by:
  2569 ;;		_pad
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           	psect	text6
  2574   002B86                     __ptext6:
  2575                           	callstack 0
  2576   002B86                     _fputs:
  2577                           	callstack 22
  2578   002B86  0E00               	movlw	0
  2579   002B88  6E10               	movwf	(fputs@i+1)^0,c
  2580   002B8A  0E00               	movlw	0
  2581   002B8C  6E0F               	movwf	fputs@i^0,c
  2582   002B8E  EFD4  F015         	goto	l2250
  2583   002B92                     l2246:
  2584   002B92  C00E  F001         	movff	fputs@c,fputc@c
  2585   002B96  6A02               	clrf	(fputc@c+1)^0,c
  2586   002B98  C00C  F003         	movff	fputs@fp,fputc@fp
  2587   002B9C  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  2588   002BA0  EC29  F010         	call	_fputc	;wreg free
  2589   002BA4  4A0F               	infsnz	fputs@i^0,f,c
  2590   002BA6  2A10               	incf	(fputs@i+1)^0,f,c
  2591   002BA8                     l2250:
  2592   002BA8  500F               	movf	fputs@i^0,w,c
  2593   002BAA  240A               	addwf	fputs@s^0,w,c
  2594   002BAC  6ED9               	movwf	fsr2l,c
  2595   002BAE  5010               	movf	(fputs@i+1)^0,w,c
  2596   002BB0  200B               	addwfc	(fputs@s+1)^0,w,c
  2597   002BB2  6EDA               	movwf	fsr2h,c
  2598   002BB4  50DF               	movf	indf2,w,c
  2599   002BB6  6E0E               	movwf	fputs@c^0,c
  2600   002BB8  500E               	movf	fputs@c^0,w,c
  2601   002BBA  A4D8               	btfss	status,2,c
  2602   002BBC  EFE2  F015         	goto	u1011
  2603   002BC0  EFE4  F015         	goto	u1010
  2604   002BC4                     u1011:
  2605   002BC4  EFC9  F015         	goto	l2246
  2606   002BC8                     u1010:
  2607   002BC8  0012               	return		;funcret
  2608   002BCA                     __end_of_fputs:
  2609                           	callstack 0
  2610                           
  2611 ;; *************** function _fputc *****************
  2612 ;; Defined at:
  2613 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  c               2    0[COMRAM] int 
  2616 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  2617 ;;		 -> sprintf@f(11), 
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  2    0[COMRAM] int 
  2622 ;; Registers used:
  2623 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2629 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2631 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2632 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2633 ;;Total ram usage:        9 bytes
  2634 ;; Hardware stack levels used: 1
  2635 ;; Hardware stack levels required when called: 2
  2636 ;; This function calls:
  2637 ;;		_putch
  2638 ;; This function is called by:
  2639 ;;		_pad
  2640 ;;		_vfpfcnvrt
  2641 ;;		_fputs
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text7
  2646   002052                     __ptext7:
  2647                           	callstack 0
  2648   002052                     _fputc:
  2649                           	callstack 25
  2650   002052  5003               	movf	fputc@fp^0,w,c
  2651   002054  1004               	iorwf	(fputc@fp+1)^0,w,c
  2652   002056  B4D8               	btfsc	status,2,c
  2653   002058  EF30  F010         	goto	u971
  2654   00205C  EF32  F010         	goto	u970
  2655   002060                     u971:
  2656   002060  EF3B  F010         	goto	l2234
  2657   002064                     u970:
  2658   002064  5003               	movf	fputc@fp^0,w,c
  2659   002066  1004               	iorwf	(fputc@fp+1)^0,w,c
  2660   002068  A4D8               	btfss	status,2,c
  2661   00206A  EF39  F010         	goto	u981
  2662   00206E  EF3B  F010         	goto	u980
  2663   002072                     u981:
  2664   002072  EF40  F010         	goto	l2236
  2665   002076                     u980:
  2666   002076                     l2234:
  2667   002076  5001               	movf	fputc@c^0,w,c
  2668   002078  EC0B  F017         	call	_putch
  2669   00207C  EF8D  F010         	goto	l1201
  2670   002080                     l2236:
  2671   002080  EE20 F009          	lfsr	2,9
  2672   002084  5003               	movf	fputc@fp^0,w,c
  2673   002086  26D9               	addwf	fsr2l,f,c
  2674   002088  5004               	movf	(fputc@fp+1)^0,w,c
  2675   00208A  22DA               	addwfc	fsr2h,f,c
  2676   00208C  50DE               	movf	postinc2,w,c
  2677   00208E  10DE               	iorwf	postinc2,w,c
  2678   002090  B4D8               	btfsc	status,2,c
  2679   002092  EF4D  F010         	goto	u991
  2680   002096  EF4F  F010         	goto	u990
  2681   00209A                     u991:
  2682   00209A  EF6A  F010         	goto	l2240
  2683   00209E                     u990:
  2684   00209E  EE20 F009          	lfsr	2,9
  2685   0020A2  5003               	movf	fputc@fp^0,w,c
  2686   0020A4  26D9               	addwf	fsr2l,f,c
  2687   0020A6  5004               	movf	(fputc@fp+1)^0,w,c
  2688   0020A8  22DA               	addwfc	fsr2h,f,c
  2689   0020AA  EE10 F003          	lfsr	1,3
  2690   0020AE  5003               	movf	fputc@fp^0,w,c
  2691   0020B0  26E1               	addwf	fsr1l,f,c
  2692   0020B2  5004               	movf	(fputc@fp+1)^0,w,c
  2693   0020B4  22E2               	addwfc	fsr1h,f,c
  2694   0020B6  50DE               	movf	postinc2,w,c
  2695   0020B8  5CE6               	subwf	postinc1,w,c
  2696   0020BA  50E6               	movf	postinc1,w,c
  2697   0020BC  0A80               	xorlw	128
  2698   0020BE  6E09               	movwf	(??_fputc+4)^0,c
  2699   0020C0  50DE               	movf	postinc2,w,c
  2700   0020C2  0A80               	xorlw	128
  2701   0020C4  5809               	subwfb	(??_fputc+4)^0,w,c
  2702   0020C6  B0D8               	btfsc	status,0,c
  2703   0020C8  EF68  F010         	goto	u1001
  2704   0020CC  EF6A  F010         	goto	u1000
  2705   0020D0                     u1001:
  2706   0020D0  EF8D  F010         	goto	l1201
  2707   0020D4                     u1000:
  2708   0020D4                     l2240:
  2709   0020D4  EE20 F003          	lfsr	2,3
  2710   0020D8  5003               	movf	fputc@fp^0,w,c
  2711   0020DA  26D9               	addwf	fsr2l,f,c
  2712   0020DC  5004               	movf	(fputc@fp+1)^0,w,c
  2713   0020DE  22DA               	addwfc	fsr2h,f,c
  2714   0020E0  CFDE F005          	movff	postinc2,??_fputc
  2715   0020E4  CFDD F006          	movff	postdec2,??_fputc+1
  2716   0020E8  C003  FFD9         	movff	fputc@fp,fsr2l
  2717   0020EC  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2718   0020F0  CFDE F007          	movff	postinc2,??_fputc+2
  2719   0020F4  CFDD F008          	movff	postdec2,??_fputc+3
  2720   0020F8  5005               	movf	??_fputc^0,w,c
  2721   0020FA  2407               	addwf	(??_fputc+2)^0,w,c
  2722   0020FC  6ED9               	movwf	fsr2l,c
  2723   0020FE  5006               	movf	(??_fputc+1)^0,w,c
  2724   002100  2008               	addwfc	(??_fputc+3)^0,w,c
  2725   002102  6EDA               	movwf	fsr2h,c
  2726   002104  C001  FFDF         	movff	fputc@c,indf2
  2727   002108  EE20 F003          	lfsr	2,3
  2728   00210C  5003               	movf	fputc@fp^0,w,c
  2729   00210E  26D9               	addwf	fsr2l,f,c
  2730   002110  5004               	movf	(fputc@fp+1)^0,w,c
  2731   002112  22DA               	addwfc	fsr2h,f,c
  2732   002114  2ADE               	incf	postinc2,f,c
  2733   002116  0E00               	movlw	0
  2734   002118  22DD               	addwfc	postdec2,f,c
  2735   00211A                     l1201:
  2736   00211A  0012               	return		;funcret
  2737   00211C                     __end_of_fputc:
  2738                           	callstack 0
  2739                           
  2740 ;; *************** function _putch *****************
  2741 ;; Defined at:
  2742 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;  c               1    wreg     unsigned char 
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  c               1    0[COMRAM] unsigned char 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      void 
  2749 ;; Registers used:
  2750 ;;		wreg
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2760 ;;Total ram usage:        0 bytes
  2761 ;; Hardware stack levels used: 1
  2762 ;; Hardware stack levels required when called: 1
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_fputc
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text8
  2771   002E16                     __ptext8:
  2772                           	callstack 0
  2773   002E16                     _putch:
  2774                           	callstack 25
  2775   002E16  0012               	return		;funcret
  2776   002E18                     __end_of_putch:
  2777                           	callstack 0
  2778                           
  2779 ;; *************** function _abs *****************
  2780 ;; Defined at:
  2781 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;  a               2   18[COMRAM] int 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;		None
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  2   18[COMRAM] int 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2795 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2797 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2798 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2799 ;;Total ram usage:        4 bytes
  2800 ;; Hardware stack levels used: 1
  2801 ;; Hardware stack levels required when called: 1
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_dtoa
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text9
  2810   002C4E                     __ptext9:
  2811                           	callstack 0
  2812   002C4E                     _abs:
  2813                           	callstack 25
  2814   002C4E  BE14               	btfsc	(abs@a+1)^0,7,c
  2815   002C50  EF34  F016         	goto	u1170
  2816   002C54  5014               	movf	(abs@a+1)^0,w,c
  2817   002C56  E106               	bnz	u1171
  2818   002C58  0413               	decf	abs@a^0,w,c
  2819   002C5A  B0D8               	btfsc	status,0,c
  2820   002C5C  EF32  F016         	goto	u1171
  2821   002C60  EF34  F016         	goto	u1170
  2822   002C64                     u1171:
  2823   002C64  EF42  F016         	goto	l1186
  2824   002C68                     u1170:
  2825   002C68  C013  F015         	movff	abs@a,??_abs
  2826   002C6C  C014  F016         	movff	abs@a+1,??_abs+1
  2827   002C70  1E15               	comf	??_abs^0,f,c
  2828   002C72  1E16               	comf	(??_abs+1)^0,f,c
  2829   002C74  4A15               	infsnz	??_abs^0,f,c
  2830   002C76  2A16               	incf	(??_abs+1)^0,f,c
  2831   002C78  C015  F013         	movff	??_abs,?_abs
  2832   002C7C  C016  F014         	movff	??_abs+1,?_abs+1
  2833   002C80  EF46  F016         	goto	l1189
  2834   002C84                     l1186:
  2835   002C84  C013  F013         	movff	abs@a,?_abs
  2836   002C88  C014  F014         	movff	abs@a+1,?_abs+1
  2837   002C8C                     l1189:
  2838   002C8C  0012               	return		;funcret
  2839   002C8E                     __end_of_abs:
  2840                           	callstack 0
  2841                           
  2842 ;; *************** function ___aomod *****************
  2843 ;; Defined at:
  2844 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2845 ;; Parameters:    Size  Location     Type
  2846 ;;  dividend        8    0[COMRAM] long long 
  2847 ;;  divisor         8    8[COMRAM] long long 
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;  sign            1   17[COMRAM] unsigned char 
  2850 ;;  counter         1   16[COMRAM] unsigned char 
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  8    0[COMRAM] long long 
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, status,0
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2860 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2861 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2863 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2864 ;;Total ram usage:       18 bytes
  2865 ;; Hardware stack levels used: 1
  2866 ;; Hardware stack levels required when called: 1
  2867 ;; This function calls:
  2868 ;;		Nothing
  2869 ;; This function is called by:
  2870 ;;		_dtoa
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           	psect	text10
  2875   001D90                     __ptext10:
  2876                           	callstack 0
  2877   001D90                     ___aomod:
  2878                           	callstack 25
  2879   001D90  0E00               	movlw	0
  2880   001D92  6E12               	movwf	___aomod@sign^0,c
  2881   001D94  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2882   001D96  EFD1  F00E         	goto	u1090
  2883   001D9A  EFCF  F00E         	goto	u1091
  2884   001D9E                     u1091:
  2885   001D9E  EFE3  F00E         	goto	l2304
  2886   001DA2                     u1090:
  2887   001DA2  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2888   001DA4  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2889   001DA6  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2890   001DA8  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2891   001DAA  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2892   001DAC  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2893   001DAE  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2894   001DB0  6C01               	negf	___aomod@dividend^0,c
  2895   001DB2  0E00               	movlw	0
  2896   001DB4  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2897   001DB6  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2898   001DB8  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2899   001DBA  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2900   001DBC  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2901   001DBE  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2902   001DC0  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2903   001DC2  0E01               	movlw	1
  2904   001DC4  6E12               	movwf	___aomod@sign^0,c
  2905   001DC6                     l2304:
  2906   001DC6  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2907   001DC8  EFEA  F00E         	goto	u1100
  2908   001DCC  EFE8  F00E         	goto	u1101
  2909   001DD0                     u1101:
  2910   001DD0  EFFA  F00E         	goto	l2308
  2911   001DD4                     u1100:
  2912   001DD4  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2913   001DD6  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2914   001DD8  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2915   001DDA  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2916   001DDC  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2917   001DDE  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2918   001DE0  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2919   001DE2  6C09               	negf	___aomod@divisor^0,c
  2920   001DE4  0E00               	movlw	0
  2921   001DE6  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2922   001DE8  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2923   001DEA  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2924   001DEC  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2925   001DEE  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2926   001DF0  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2927   001DF2  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2928   001DF4                     l2308:
  2929   001DF4  5009               	movf	___aomod@divisor^0,w,c
  2930   001DF6  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2931   001DF8  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2932   001DFA  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2933   001DFC  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2934   001DFE  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2935   001E00  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2936   001E02  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2937   001E04  B4D8               	btfsc	status,2,c
  2938   001E06  EF07  F00F         	goto	u1111
  2939   001E0A  EF09  F00F         	goto	u1110
  2940   001E0E                     u1111:
  2941   001E0E  EF51  F00F         	goto	l2324
  2942   001E12                     u1110:
  2943   001E12  0E01               	movlw	1
  2944   001E14  6E11               	movwf	___aomod@counter^0,c
  2945   001E16  EF17  F00F         	goto	l2314
  2946   001E1A                     l2312:
  2947   001E1A  90D8               	bcf	status,0,c
  2948   001E1C  3609               	rlcf	___aomod@divisor^0,f,c
  2949   001E1E  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2950   001E20  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2951   001E22  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2952   001E24  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2953   001E26  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2954   001E28  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2955   001E2A  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2956   001E2C  2A11               	incf	___aomod@counter^0,f,c
  2957   001E2E                     l2314:
  2958   001E2E  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2959   001E30  EF1C  F00F         	goto	u1121
  2960   001E34  EF1E  F00F         	goto	u1120
  2961   001E38                     u1121:
  2962   001E38  EF0D  F00F         	goto	l2312
  2963   001E3C                     u1120:
  2964   001E3C                     l2316:
  2965   001E3C  5009               	movf	___aomod@divisor^0,w,c
  2966   001E3E  5C01               	subwf	___aomod@dividend^0,w,c
  2967   001E40  500A               	movf	(___aomod@divisor+1)^0,w,c
  2968   001E42  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2969   001E44  500B               	movf	(___aomod@divisor+2)^0,w,c
  2970   001E46  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2971   001E48  500C               	movf	(___aomod@divisor+3)^0,w,c
  2972   001E4A  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2973   001E4C  500D               	movf	(___aomod@divisor+4)^0,w,c
  2974   001E4E  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2975   001E50  500E               	movf	(___aomod@divisor+5)^0,w,c
  2976   001E52  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2977   001E54  500F               	movf	(___aomod@divisor+6)^0,w,c
  2978   001E56  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2979   001E58  5010               	movf	(___aomod@divisor+7)^0,w,c
  2980   001E5A  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2981   001E5C  A0D8               	btfss	status,0,c
  2982   001E5E  EF33  F00F         	goto	u1131
  2983   001E62  EF35  F00F         	goto	u1130
  2984   001E66                     u1131:
  2985   001E66  EF45  F00F         	goto	l2320
  2986   001E6A                     u1130:
  2987   001E6A  5009               	movf	___aomod@divisor^0,w,c
  2988   001E6C  5E01               	subwf	___aomod@dividend^0,f,c
  2989   001E6E  500A               	movf	(___aomod@divisor+1)^0,w,c
  2990   001E70  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2991   001E72  500B               	movf	(___aomod@divisor+2)^0,w,c
  2992   001E74  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2993   001E76  500C               	movf	(___aomod@divisor+3)^0,w,c
  2994   001E78  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2995   001E7A  500D               	movf	(___aomod@divisor+4)^0,w,c
  2996   001E7C  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2997   001E7E  500E               	movf	(___aomod@divisor+5)^0,w,c
  2998   001E80  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2999   001E82  500F               	movf	(___aomod@divisor+6)^0,w,c
  3000   001E84  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  3001   001E86  5010               	movf	(___aomod@divisor+7)^0,w,c
  3002   001E88  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  3003   001E8A                     l2320:
  3004   001E8A  90D8               	bcf	status,0,c
  3005   001E8C  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  3006   001E8E  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  3007   001E90  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  3008   001E92  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  3009   001E94  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  3010   001E96  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  3011   001E98  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  3012   001E9A  3209               	rrcf	___aomod@divisor^0,f,c
  3013   001E9C  2E11               	decfsz	___aomod@counter^0,f,c
  3014   001E9E  EF1E  F00F         	goto	l2316
  3015   001EA2                     l2324:
  3016   001EA2  5012               	movf	___aomod@sign^0,w,c
  3017   001EA4  B4D8               	btfsc	status,2,c
  3018   001EA6  EF57  F00F         	goto	u1141
  3019   001EAA  EF59  F00F         	goto	u1140
  3020   001EAE                     u1141:
  3021   001EAE  EF69  F00F         	goto	l2328
  3022   001EB2                     u1140:
  3023   001EB2  1E08               	comf	(___aomod@dividend+7)^0,f,c
  3024   001EB4  1E07               	comf	(___aomod@dividend+6)^0,f,c
  3025   001EB6  1E06               	comf	(___aomod@dividend+5)^0,f,c
  3026   001EB8  1E05               	comf	(___aomod@dividend+4)^0,f,c
  3027   001EBA  1E04               	comf	(___aomod@dividend+3)^0,f,c
  3028   001EBC  1E03               	comf	(___aomod@dividend+2)^0,f,c
  3029   001EBE  1E02               	comf	(___aomod@dividend+1)^0,f,c
  3030   001EC0  6C01               	negf	___aomod@dividend^0,c
  3031   001EC2  0E00               	movlw	0
  3032   001EC4  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  3033   001EC6  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  3034   001EC8  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  3035   001ECA  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  3036   001ECC  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  3037   001ECE  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  3038   001ED0  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  3039   001ED2                     l2328:
  3040   001ED2  C001  F001         	movff	___aomod@dividend,?___aomod
  3041   001ED6  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  3042   001EDA  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  3043   001EDE  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  3044   001EE2  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  3045   001EE6  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  3046   001EEA  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  3047   001EEE  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  3048   001EF2  0012               	return		;funcret
  3049   001EF4                     __end_of___aomod:
  3050                           	callstack 0
  3051                           
  3052 ;; *************** function ___aodiv *****************
  3053 ;; Defined at:
  3054 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;  dividend        8    0[COMRAM] long long 
  3057 ;;  divisor         8    8[COMRAM] long long 
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  quotient        8   18[COMRAM] long long 
  3060 ;;  sign            1   17[COMRAM] unsigned char 
  3061 ;;  counter         1   16[COMRAM] unsigned char 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  8    0[COMRAM] long long 
  3064 ;; Registers used:
  3065 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3071 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3072 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3074 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3075 ;;Total ram usage:       26 bytes
  3076 ;; Hardware stack levels used: 1
  3077 ;; Hardware stack levels required when called: 1
  3078 ;; This function calls:
  3079 ;;		Nothing
  3080 ;; This function is called by:
  3081 ;;		_dtoa
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           	psect	text11
  3086   001C08                     __ptext11:
  3087                           	callstack 0
  3088   001C08                     ___aodiv:
  3089                           	callstack 25
  3090   001C08  0E00               	movlw	0
  3091   001C0A  6E12               	movwf	___aodiv@sign^0,c
  3092   001C0C  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  3093   001C0E  EF0D  F00E         	goto	u1020
  3094   001C12  EF0B  F00E         	goto	u1021
  3095   001C16                     u1021:
  3096   001C16  EF1F  F00E         	goto	l2260
  3097   001C1A                     u1020:
  3098   001C1A  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  3099   001C1C  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  3100   001C1E  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  3101   001C20  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  3102   001C22  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  3103   001C24  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  3104   001C26  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  3105   001C28  6C09               	negf	___aodiv@divisor^0,c
  3106   001C2A  0E00               	movlw	0
  3107   001C2C  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  3108   001C2E  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  3109   001C30  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  3110   001C32  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  3111   001C34  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  3112   001C36  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  3113   001C38  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  3114   001C3A  0E01               	movlw	1
  3115   001C3C  6E12               	movwf	___aodiv@sign^0,c
  3116   001C3E                     l2260:
  3117   001C3E  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  3118   001C40  EF26  F00E         	goto	u1030
  3119   001C44  EF24  F00E         	goto	u1031
  3120   001C48                     u1031:
  3121   001C48  EF38  F00E         	goto	l2266
  3122   001C4C                     u1030:
  3123   001C4C  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  3124   001C4E  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  3125   001C50  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  3126   001C52  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  3127   001C54  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  3128   001C56  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  3129   001C58  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  3130   001C5A  6C01               	negf	___aodiv@dividend^0,c
  3131   001C5C  0E00               	movlw	0
  3132   001C5E  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  3133   001C60  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  3134   001C62  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  3135   001C64  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  3136   001C66  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  3137   001C68  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  3138   001C6A  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  3139   001C6C  0E01               	movlw	1
  3140   001C6E  1A12               	xorwf	___aodiv@sign^0,f,c
  3141   001C70                     l2266:
  3142   001C70  EE20  F013         	lfsr	2,___aodiv@quotient
  3143   001C74  0E07               	movlw	7
  3144   001C76                     u1041:
  3145   001C76  6ADE               	clrf	postinc2,c
  3146   001C78  06E8               	decf	wreg,f,c
  3147   001C7A  E2FD               	bc	u1041
  3148   001C7C  5009               	movf	___aodiv@divisor^0,w,c
  3149   001C7E  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  3150   001C80  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  3151   001C82  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  3152   001C84  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  3153   001C86  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  3154   001C88  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  3155   001C8A  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  3156   001C8C  B4D8               	btfsc	status,2,c
  3157   001C8E  EF4B  F00E         	goto	u1051
  3158   001C92  EF4D  F00E         	goto	u1050
  3159   001C96                     u1051:
  3160   001C96  EF9F  F00E         	goto	l2288
  3161   001C9A                     u1050:
  3162   001C9A  0E01               	movlw	1
  3163   001C9C  6E11               	movwf	___aodiv@counter^0,c
  3164   001C9E  EF5B  F00E         	goto	l2274
  3165   001CA2                     l2272:
  3166   001CA2  90D8               	bcf	status,0,c
  3167   001CA4  3609               	rlcf	___aodiv@divisor^0,f,c
  3168   001CA6  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  3169   001CA8  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  3170   001CAA  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  3171   001CAC  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  3172   001CAE  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  3173   001CB0  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  3174   001CB2  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  3175   001CB4  2A11               	incf	___aodiv@counter^0,f,c
  3176   001CB6                     l2274:
  3177   001CB6  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  3178   001CB8  EF60  F00E         	goto	u1061
  3179   001CBC  EF62  F00E         	goto	u1060
  3180   001CC0                     u1061:
  3181   001CC0  EF51  F00E         	goto	l2272
  3182   001CC4                     u1060:
  3183   001CC4                     l2276:
  3184   001CC4  90D8               	bcf	status,0,c
  3185   001CC6  3613               	rlcf	___aodiv@quotient^0,f,c
  3186   001CC8  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  3187   001CCA  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  3188   001CCC  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  3189   001CCE  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  3190   001CD0  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  3191   001CD2  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  3192   001CD4  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  3193   001CD6  5009               	movf	___aodiv@divisor^0,w,c
  3194   001CD8  5C01               	subwf	___aodiv@dividend^0,w,c
  3195   001CDA  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3196   001CDC  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  3197   001CDE  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3198   001CE0  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  3199   001CE2  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3200   001CE4  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  3201   001CE6  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3202   001CE8  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  3203   001CEA  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3204   001CEC  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  3205   001CEE  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3206   001CF0  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  3207   001CF2  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3208   001CF4  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  3209   001CF6  A0D8               	btfss	status,0,c
  3210   001CF8  EF80  F00E         	goto	u1071
  3211   001CFC  EF82  F00E         	goto	u1070
  3212   001D00                     u1071:
  3213   001D00  EF93  F00E         	goto	l2284
  3214   001D04                     u1070:
  3215   001D04  5009               	movf	___aodiv@divisor^0,w,c
  3216   001D06  5E01               	subwf	___aodiv@dividend^0,f,c
  3217   001D08  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3218   001D0A  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  3219   001D0C  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3220   001D0E  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  3221   001D10  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3222   001D12  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  3223   001D14  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3224   001D16  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  3225   001D18  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3226   001D1A  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  3227   001D1C  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3228   001D1E  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  3229   001D20  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3230   001D22  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  3231   001D24  8013               	bsf	___aodiv@quotient^0,0,c
  3232   001D26                     l2284:
  3233   001D26  90D8               	bcf	status,0,c
  3234   001D28  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  3235   001D2A  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  3236   001D2C  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  3237   001D2E  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  3238   001D30  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  3239   001D32  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  3240   001D34  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  3241   001D36  3209               	rrcf	___aodiv@divisor^0,f,c
  3242   001D38  2E11               	decfsz	___aodiv@counter^0,f,c
  3243   001D3A  EF62  F00E         	goto	l2276
  3244   001D3E                     l2288:
  3245   001D3E  5012               	movf	___aodiv@sign^0,w,c
  3246   001D40  B4D8               	btfsc	status,2,c
  3247   001D42  EFA5  F00E         	goto	u1081
  3248   001D46  EFA7  F00E         	goto	u1080
  3249   001D4A                     u1081:
  3250   001D4A  EFB7  F00E         	goto	l2292
  3251   001D4E                     u1080:
  3252   001D4E  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  3253   001D50  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  3254   001D52  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  3255   001D54  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  3256   001D56  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  3257   001D58  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  3258   001D5A  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  3259   001D5C  6C13               	negf	___aodiv@quotient^0,c
  3260   001D5E  0E00               	movlw	0
  3261   001D60  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  3262   001D62  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  3263   001D64  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  3264   001D66  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  3265   001D68  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  3266   001D6A  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  3267   001D6C  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  3268   001D6E                     l2292:
  3269   001D6E  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3270   001D72  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3271   001D76  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3272   001D7A  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3273   001D7E  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3274   001D82  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3275   001D86  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3276   001D8A  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3277   001D8E  0012               	return		;funcret
  3278   001D90                     __end_of___aodiv:
  3279                           	callstack 0
  3280                           
  3281 ;; *************** function _sendStringSerial4 *****************
  3282 ;; Defined at:
  3283 ;;		line 37 in file "../serial.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;  string          2    1[COMRAM] PTR unsigned char 
  3286 ;;		 -> main@readout3(100), main@readout2(100), 
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;		None
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1    wreg      void 
  3291 ;; Registers used:
  3292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3298 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3301 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3302 ;;Total ram usage:        2 bytes
  3303 ;; Hardware stack levels used: 1
  3304 ;; Hardware stack levels required when called: 2
  3305 ;; This function calls:
  3306 ;;		_sendCharSerial4
  3307 ;; This function is called by:
  3308 ;;		_main
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text12
  3313   002C8E                     __ptext12:
  3314                           	callstack 0
  3315   002C8E                     _sendStringSerial4:
  3316                           	callstack 28
  3317   002C8E                     
  3318                           ;../serial.c: 40:     while (*string != 0)
  3319   002C8E  EF52  F016         	goto	l2962
  3320   002C92                     l2958:
  3321                           
  3322                           ;../serial.c: 41:     {;../serial.c: 42:         sendCharSerial4(*string++);
  3323   002C92  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3324   002C96  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3325   002C9A  50DF               	movf	indf2,w,c
  3326   002C9C  ECDF  F016         	call	_sendCharSerial4
  3327   002CA0  4A02               	infsnz	sendStringSerial4@string^0,f,c
  3328   002CA2  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  3329   002CA4                     l2962:
  3330                           
  3331                           ;../serial.c: 40:     while (*string != 0)
  3332   002CA4  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3333   002CA8  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3334   002CAC  50DF               	movf	indf2,w,c
  3335   002CAE  A4D8               	btfss	status,2,c
  3336   002CB0  EF5C  F016         	goto	u1751
  3337   002CB4  EF5E  F016         	goto	u1750
  3338   002CB8                     u1751:
  3339   002CB8  EF49  F016         	goto	l2958
  3340   002CBC                     u1750:
  3341   002CBC  0012               	return		;funcret
  3342   002CBE                     __end_of_sendStringSerial4:
  3343                           	callstack 0
  3344                           
  3345 ;; *************** function _sendCharSerial4 *****************
  3346 ;; Defined at:
  3347 ;;		line 30 in file "../serial.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  charToSend      1    wreg     unsigned char 
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;  charToSend      1    0[COMRAM] unsigned char 
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  1    wreg      void 
  3354 ;; Registers used:
  3355 ;;		wreg
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3362 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3364 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3365 ;;Total ram usage:        1 bytes
  3366 ;; Hardware stack levels used: 1
  3367 ;; Hardware stack levels required when called: 1
  3368 ;; This function calls:
  3369 ;;		Nothing
  3370 ;; This function is called by:
  3371 ;;		_sendStringSerial4
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           	psect	text13
  3376   002DBE                     __ptext13:
  3377                           	callstack 0
  3378   002DBE                     _sendCharSerial4:
  3379                           	callstack 28
  3380                           
  3381                           ;incstack = 0
  3382                           ;sendCharSerial4@charToSend stored from wreg
  3383   002DBE  6E01               	movwf	sendCharSerial4@charToSend^0,c
  3384   002DC0                     l434:
  3385   002DC0  010E               	movlb	14	; () banked
  3386   002DC2  A537               	btfss	55,2,b	;volatile
  3387   002DC4  EFE6  F016         	goto	u1541
  3388   002DC8  EFE8  F016         	goto	u1540
  3389   002DCC                     u1541:
  3390   002DCC  EFE0  F016         	goto	l434
  3391   002DD0                     u1540:
  3392   002DD0                     
  3393                           ; BSR set to: 14
  3394                           ;../serial.c: 32:     TX4REG = charToSend;
  3395   002DD0  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3396   002DD4                     
  3397                           ; BSR set to: 14
  3398   002DD4  0012               	return		;funcret
  3399   002DD6                     __end_of_sendCharSerial4:
  3400                           	callstack 0
  3401                           
  3402 ;; *************** function _motor_action *****************
  3403 ;; Defined at:
  3404 ;;		line 196 in file "../dc_motor.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  color           2   33[COMRAM] unsigned int 
  3407 ;;  l               2   35[COMRAM] PTR struct DC_motor
  3408 ;;		 -> main@motorL(9), 
  3409 ;;  r               2   37[COMRAM] PTR struct DC_motor
  3410 ;;		 -> main@motorR(9), 
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      void 
  3415 ;; Registers used:
  3416 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3422 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3424 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3425 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3426 ;;Total ram usage:        8 bytes
  3427 ;; Hardware stack levels used: 1
  3428 ;; Hardware stack levels required when called: 4
  3429 ;; This function calls:
  3430 ;;		_forward
  3431 ;;		_left_135
  3432 ;;		_left_90
  3433 ;;		_reverse_fromcard
  3434 ;;		_reverse_onesquare
  3435 ;;		_right_135
  3436 ;;		_right_90
  3437 ;;		_spin_180
  3438 ;;		_stop
  3439 ;; This function is called by:
  3440 ;;		_main
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text14
  3445   0015E2                     __ptext14:
  3446                           	callstack 0
  3447   0015E2                     _motor_action:
  3448                           	callstack 26
  3449   0015E2                     
  3450                           ;../dc_motor.c: 196: void motor_action(unsigned int color, struct DC_motor *l, struct DC
      +                          _motor *r);../dc_motor.c: 197: {;../dc_motor.c: 198:     switch (color){
  3451   0015E2  EFF9  F00B         	goto	l3002
  3452   0015E6                     l2966:
  3453                           
  3454                           ;../dc_motor.c: 200:             reverse_fromcard(l,r);
  3455   0015E6  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3456   0015EA  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3457   0015EE  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3458   0015F2  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3459   0015F6  EC39  F013         	call	_reverse_fromcard	;wreg free
  3460                           
  3461                           ;../dc_motor.c: 201:             stop(l,r);
  3462   0015FA  C024  F01A         	movff	motor_action@l,stop@mL
  3463   0015FE  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3464   001602  C026  F01C         	movff	motor_action@r,stop@mR
  3465   001606  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3466   00160A  ECDB  F013         	call	_stop	;wreg free
  3467   00160E                     
  3468                           ;../dc_motor.c: 202:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3469   00160E  0E29               	movlw	41
  3470   001610  6E29               	movwf	(??_motor_action+1)^0,c
  3471   001612  0E96               	movlw	150
  3472   001614  6E28               	movwf	??_motor_action^0,c
  3473   001616  0E7F               	movlw	127
  3474   001618                     u1977:
  3475   001618  2EE8               	decfsz	wreg,f,c
  3476   00161A  D7FE               	bra	u1977
  3477   00161C  2E28               	decfsz	??_motor_action^0,f,c
  3478   00161E  D7FC               	bra	u1977
  3479   001620  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3480   001622  D7FA               	bra	u1977
  3481   001624  F000               	nop	
  3482   001626                     
  3483                           ;../dc_motor.c: 203:             stop(l,r);
  3484   001626  C024  F01A         	movff	motor_action@l,stop@mL
  3485   00162A  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3486   00162E  C026  F01C         	movff	motor_action@r,stop@mR
  3487   001632  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3488   001636  ECDB  F013         	call	_stop	;wreg free
  3489   00163A                     
  3490                           ;../dc_motor.c: 204:             right_90(l,r);
  3491   00163A  C024  F01A         	movff	motor_action@l,right_90@mL
  3492   00163E  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3493   001642  C026  F01C         	movff	motor_action@r,right_90@mR
  3494   001646  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3495   00164A  ECA2  F011         	call	_right_90	;wreg free
  3496                           
  3497                           ;../dc_motor.c: 205:             break;
  3498   00164E  EF27  F00C         	goto	l327
  3499   001652                     l2974:
  3500                           
  3501                           ;../dc_motor.c: 207:             reverse_fromcard(l,r);
  3502   001652  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3503   001656  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3504   00165A  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3505   00165E  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3506   001662  EC39  F013         	call	_reverse_fromcard	;wreg free
  3507                           
  3508                           ;../dc_motor.c: 208:             stop(l,r);
  3509   001666  C024  F01A         	movff	motor_action@l,stop@mL
  3510   00166A  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3511   00166E  C026  F01C         	movff	motor_action@r,stop@mR
  3512   001672  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3513   001676  ECDB  F013         	call	_stop	;wreg free
  3514   00167A                     
  3515                           ;../dc_motor.c: 209:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3516   00167A  0E29               	movlw	41
  3517   00167C  6E29               	movwf	(??_motor_action+1)^0,c
  3518   00167E  0E96               	movlw	150
  3519   001680  6E28               	movwf	??_motor_action^0,c
  3520   001682  0E7F               	movlw	127
  3521   001684                     u1987:
  3522   001684  2EE8               	decfsz	wreg,f,c
  3523   001686  D7FE               	bra	u1987
  3524   001688  2E28               	decfsz	??_motor_action^0,f,c
  3525   00168A  D7FC               	bra	u1987
  3526   00168C  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3527   00168E  D7FA               	bra	u1987
  3528   001690  F000               	nop	
  3529   001692                     
  3530                           ;../dc_motor.c: 210:             stop(l,r);
  3531   001692  C024  F01A         	movff	motor_action@l,stop@mL
  3532   001696  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3533   00169A  C026  F01C         	movff	motor_action@r,stop@mR
  3534   00169E  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3535   0016A2  ECDB  F013         	call	_stop	;wreg free
  3536   0016A6                     
  3537                           ;../dc_motor.c: 211:             left_90(l,r);
  3538   0016A6  C024  F01A         	movff	motor_action@l,left_90@mL
  3539   0016AA  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3540   0016AE  C026  F01C         	movff	motor_action@r,left_90@mR
  3541   0016B2  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3542   0016B6  ECF4  F011         	call	_left_90	;wreg free
  3543                           
  3544                           ;../dc_motor.c: 212:             break;
  3545   0016BA  EF27  F00C         	goto	l327
  3546   0016BE                     l2982:
  3547                           
  3548                           ;../dc_motor.c: 214:             reverse_fromcard(l,r);
  3549   0016BE  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3550   0016C2  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3551   0016C6  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3552   0016CA  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3553   0016CE  EC39  F013         	call	_reverse_fromcard	;wreg free
  3554                           
  3555                           ;../dc_motor.c: 215:             stop(l,r);
  3556   0016D2  C024  F01A         	movff	motor_action@l,stop@mL
  3557   0016D6  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3558   0016DA  C026  F01C         	movff	motor_action@r,stop@mR
  3559   0016DE  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3560   0016E2  ECDB  F013         	call	_stop	;wreg free
  3561   0016E6                     
  3562                           ;../dc_motor.c: 216:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3563   0016E6  0E29               	movlw	41
  3564   0016E8  6E29               	movwf	(??_motor_action+1)^0,c
  3565   0016EA  0E96               	movlw	150
  3566   0016EC  6E28               	movwf	??_motor_action^0,c
  3567   0016EE  0E7F               	movlw	127
  3568   0016F0                     u1997:
  3569   0016F0  2EE8               	decfsz	wreg,f,c
  3570   0016F2  D7FE               	bra	u1997
  3571   0016F4  2E28               	decfsz	??_motor_action^0,f,c
  3572   0016F6  D7FC               	bra	u1997
  3573   0016F8  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3574   0016FA  D7FA               	bra	u1997
  3575   0016FC  F000               	nop	
  3576   0016FE                     
  3577                           ;../dc_motor.c: 217:             spin_180(l,r);
  3578   0016FE  C024  F01A         	movff	motor_action@l,spin_180@mL
  3579   001702  C025  F01B         	movff	motor_action@l+1,spin_180@mL+1
  3580   001706  C026  F01C         	movff	motor_action@r,spin_180@mR
  3581   00170A  C027  F01D         	movff	motor_action@r+1,spin_180@mR+1
  3582   00170E  EC46  F012         	call	_spin_180	;wreg free
  3583   001712                     
  3584                           ;../dc_motor.c: 218:             stop(l,r);
  3585   001712  C024  F01A         	movff	motor_action@l,stop@mL
  3586   001716  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3587   00171A  C026  F01C         	movff	motor_action@r,stop@mR
  3588   00171E  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3589   001722  ECDB  F013         	call	_stop	;wreg free
  3590                           
  3591                           ;../dc_motor.c: 219:             break;
  3592   001726  EF27  F00C         	goto	l327
  3593   00172A                     l2990:
  3594                           
  3595                           ;../dc_motor.c: 221:             reverse_onesquare(l,r);
  3596   00172A  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3597   00172E  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3598   001732  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3599   001736  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3600   00173A  ECE8  F012         	call	_reverse_onesquare	;wreg free
  3601                           
  3602                           ;../dc_motor.c: 222:             right_90(l,r);
  3603   00173E  C024  F01A         	movff	motor_action@l,right_90@mL
  3604   001742  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3605   001746  C026  F01C         	movff	motor_action@r,right_90@mR
  3606   00174A  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3607   00174E  ECA2  F011         	call	_right_90	;wreg free
  3608                           
  3609                           ;../dc_motor.c: 223:             break;
  3610   001752  EF27  F00C         	goto	l327
  3611   001756                     l2992:
  3612                           
  3613                           ;../dc_motor.c: 225:             reverse_onesquare(l,r);
  3614   001756  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3615   00175A  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3616   00175E  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3617   001762  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3618   001766  ECE8  F012         	call	_reverse_onesquare	;wreg free
  3619                           
  3620                           ;../dc_motor.c: 226:             left_90(l,r);
  3621   00176A  C024  F01A         	movff	motor_action@l,left_90@mL
  3622   00176E  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3623   001772  C026  F01C         	movff	motor_action@r,left_90@mR
  3624   001776  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3625   00177A  ECF4  F011         	call	_left_90	;wreg free
  3626                           
  3627                           ;../dc_motor.c: 227:             break;
  3628   00177E  EF27  F00C         	goto	l327
  3629   001782                     l2994:
  3630                           
  3631                           ;../dc_motor.c: 229:             reverse_fromcard(l,r);
  3632   001782  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3633   001786  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3634   00178A  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3635   00178E  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3636   001792  EC39  F013         	call	_reverse_fromcard	;wreg free
  3637                           
  3638                           ;../dc_motor.c: 230:             right_135(l,r);
  3639   001796  C024  F01A         	movff	motor_action@l,right_135@mL
  3640   00179A  C025  F01B         	movff	motor_action@l+1,right_135@mL+1
  3641   00179E  C026  F01C         	movff	motor_action@r,right_135@mR
  3642   0017A2  C027  F01D         	movff	motor_action@r+1,right_135@mR+1
  3643   0017A6  EC97  F012         	call	_right_135	;wreg free
  3644                           
  3645                           ;../dc_motor.c: 231:             break;
  3646   0017AA  EF27  F00C         	goto	l327
  3647   0017AE                     l2996:
  3648                           
  3649                           ;../dc_motor.c: 233:             reverse_fromcard(l,r);
  3650   0017AE  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3651   0017B2  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3652   0017B6  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3653   0017BA  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3654   0017BE  EC39  F013         	call	_reverse_fromcard	;wreg free
  3655                           
  3656                           ;../dc_motor.c: 234:             left_135(l,r);
  3657   0017C2  C024  F01A         	movff	motor_action@l,left_135@mL
  3658   0017C6  C025  F01B         	movff	motor_action@l+1,left_135@mL+1
  3659   0017CA  C026  F01C         	movff	motor_action@r,left_135@mR
  3660   0017CE  C027  F01D         	movff	motor_action@r+1,left_135@mR+1
  3661   0017D2  EC8A  F013         	call	_left_135	;wreg free
  3662                           
  3663                           ;../dc_motor.c: 235:             break;
  3664   0017D6  EF27  F00C         	goto	l327
  3665   0017DA                     l2998:
  3666                           
  3667                           ;../dc_motor.c: 237:             forward(l,r);
  3668   0017DA  C024  F01A         	movff	motor_action@l,forward@mL
  3669   0017DE  C025  F01B         	movff	motor_action@l+1,forward@mL+1
  3670   0017E2  C026  F01C         	movff	motor_action@r,forward@mR
  3671   0017E6  C027  F01D         	movff	motor_action@r+1,forward@mR+1
  3672   0017EA  EC22  F014         	call	_forward	;wreg free
  3673                           
  3674                           ;../dc_motor.c: 238:             break;
  3675   0017EE  EF27  F00C         	goto	l327
  3676   0017F2                     l3002:
  3677   0017F2  C022  F028         	movff	motor_action@color,??_motor_action
  3678   0017F6  C023  F029         	movff	motor_action@color+1,??_motor_action+1
  3679                           
  3680                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3681                           ; Switch size 1, requested type "simple"
  3682                           ; Number of cases is 1, Range of values is 0 to 0
  3683                           ; switch strategies available:
  3684                           ; Name         Instructions Cycles
  3685                           ; simple_byte            4     3 (average)
  3686                           ;	Chosen strategy is simple_byte
  3687   0017FA  5029               	movf	(??_motor_action+1)^0,w,c
  3688   0017FC  0A00               	xorlw	0	; case 0
  3689   0017FE  B4D8               	btfsc	status,2,c
  3690   001800  EF04  F00C         	goto	l3236
  3691   001804  EF27  F00C         	goto	l327
  3692   001808                     l3236:
  3693                           
  3694                           ; Switch size 1, requested type "simple"
  3695                           ; Number of cases is 8, Range of values is 0 to 7
  3696                           ; switch strategies available:
  3697                           ; Name         Instructions Cycles
  3698                           ; simple_byte           25    13 (average)
  3699                           ;	Chosen strategy is simple_byte
  3700   001808  5028               	movf	??_motor_action^0,w,c
  3701   00180A  0A00               	xorlw	0	; case 0
  3702   00180C  B4D8               	btfsc	status,2,c
  3703   00180E  EFED  F00B         	goto	l2998
  3704   001812  0A01               	xorlw	1	; case 1
  3705   001814  B4D8               	btfsc	status,2,c
  3706   001816  EFF3  F00A         	goto	l2966
  3707   00181A  0A03               	xorlw	3	; case 2
  3708   00181C  B4D8               	btfsc	status,2,c
  3709   00181E  EF29  F00B         	goto	l2974
  3710   001822  0A01               	xorlw	1	; case 3
  3711   001824  B4D8               	btfsc	status,2,c
  3712   001826  EF5F  F00B         	goto	l2982
  3713   00182A  0A07               	xorlw	7	; case 4
  3714   00182C  B4D8               	btfsc	status,2,c
  3715   00182E  EF95  F00B         	goto	l2990
  3716   001832  0A01               	xorlw	1	; case 5
  3717   001834  B4D8               	btfsc	status,2,c
  3718   001836  EFAB  F00B         	goto	l2992
  3719   00183A  0A03               	xorlw	3	; case 6
  3720   00183C  B4D8               	btfsc	status,2,c
  3721   00183E  EFC1  F00B         	goto	l2994
  3722   001842  0A01               	xorlw	1	; case 7
  3723   001844  B4D8               	btfsc	status,2,c
  3724   001846  EFD7  F00B         	goto	l2996
  3725   00184A  EF27  F00C         	goto	l327
  3726   00184E                     l327:
  3727   00184E  0012               	return		;funcret
  3728   001850                     __end_of_motor_action:
  3729                           	callstack 0
  3730                           
  3731 ;; *************** function _stop *****************
  3732 ;; Defined at:
  3733 ;;		line 61 in file "../dc_motor.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3736 ;;		 -> main@motorL(9), 
  3737 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3738 ;;		 -> main@motorR(9), 
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;  i               2   30[COMRAM] int 
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  1    wreg      void 
  3743 ;; Registers used:
  3744 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3750 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3751 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3752 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3753 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3754 ;;Total ram usage:        7 bytes
  3755 ;; Hardware stack levels used: 1
  3756 ;; Hardware stack levels required when called: 3
  3757 ;; This function calls:
  3758 ;;		_setMotorPWM
  3759 ;; This function is called by:
  3760 ;;		_main
  3761 ;;		_motor_action
  3762 ;;		_motor_action_return
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           	psect	text15
  3767   0027B6                     __ptext15:
  3768                           	callstack 0
  3769   0027B6                     _stop:
  3770                           	callstack 27
  3771   0027B6                     
  3772                           ;../dc_motor.c: 61: void stop(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c: 6
      +                          2: {;../dc_motor.c: 63:     mL->direction = 0;
  3773   0027B6  EE20 F001          	lfsr	2,1
  3774   0027BA  501A               	movf	stop@mL^0,w,c
  3775   0027BC  26D9               	addwf	fsr2l,f,c
  3776   0027BE  501B               	movf	(stop@mL+1)^0,w,c
  3777   0027C0  22DA               	addwfc	fsr2h,f,c
  3778   0027C2  0E00               	movlw	0
  3779   0027C4  6EDF               	movwf	indf2,c
  3780                           
  3781                           ;../dc_motor.c: 64:     mR->direction = 0;
  3782   0027C6  EE20 F001          	lfsr	2,1
  3783   0027CA  501C               	movf	stop@mR^0,w,c
  3784   0027CC  26D9               	addwf	fsr2l,f,c
  3785   0027CE  501D               	movf	(stop@mR+1)^0,w,c
  3786   0027D0  22DA               	addwfc	fsr2h,f,c
  3787   0027D2  0E00               	movlw	0
  3788   0027D4  6EDF               	movwf	indf2,c
  3789   0027D6                     
  3790                           ;../dc_motor.c: 65:     for (int i = 5;i>0;i = i - 1)
  3791   0027D6  0E00               	movlw	0
  3792   0027D8  6E20               	movwf	(stop@i+1)^0,c
  3793   0027DA  0E05               	movlw	5
  3794   0027DC  6E1F               	movwf	stop@i^0,c
  3795   0027DE                     l2596:
  3796                           
  3797                           ;../dc_motor.c: 66:     {;../dc_motor.c: 67:         mL->power = i;
  3798   0027DE  C01A  FFD9         	movff	stop@mL,fsr2l
  3799   0027E2  C01B  FFDA         	movff	stop@mL+1,fsr2h
  3800   0027E6  C01F  FFDF         	movff	stop@i,indf2
  3801                           
  3802                           ;../dc_motor.c: 68:         mR->power = i;
  3803   0027EA  C01C  FFD9         	movff	stop@mR,fsr2l
  3804   0027EE  C01D  FFDA         	movff	stop@mR+1,fsr2h
  3805   0027F2  C01F  FFDF         	movff	stop@i,indf2
  3806   0027F6                     
  3807                           ;../dc_motor.c: 69:         setMotorPWM(mL);
  3808   0027F6  C01A  F00F         	movff	stop@mL,setMotorPWM@m
  3809   0027FA  C01B  F010         	movff	stop@mL+1,setMotorPWM@m+1
  3810   0027FE  EC1A  F00D         	call	_setMotorPWM	;wreg free
  3811   002802                     
  3812                           ;../dc_motor.c: 70:         setMotorPWM(mR);
  3813   002802  C01C  F00F         	movff	stop@mR,setMotorPWM@m
  3814   002806  C01D  F010         	movff	stop@mR+1,setMotorPWM@m+1
  3815   00280A  EC1A  F00D         	call	_setMotorPWM	;wreg free
  3816   00280E                     
  3817                           ;../dc_motor.c: 71:         _delay((unsigned long)((10)*(64000000/4000.0)));
  3818   00280E  0ED0               	movlw	208
  3819   002810  6E1E               	movwf	??_stop^0,c
  3820   002812  0ECA               	movlw	202
  3821   002814                     u2007:
  3822   002814  2EE8               	decfsz	wreg,f,c
  3823   002816  D7FE               	bra	u2007
  3824   002818  2E1E               	decfsz	??_stop^0,f,c
  3825   00281A  D7FC               	bra	u2007
  3826   00281C                     
  3827                           ;../dc_motor.c: 72:     }
  3828   00281C  0EFF               	movlw	255
  3829   00281E  241F               	addwf	stop@i^0,w,c
  3830   002820  6E1F               	movwf	stop@i^0,c
  3831   002822  0EFF               	movlw	255
  3832   002824  2020               	addwfc	(stop@i+1)^0,w,c
  3833   002826  6E20               	movwf	(stop@i+1)^0,c
  3834   002828  BE20               	btfsc	(stop@i+1)^0,7,c
  3835   00282A  EF21  F014         	goto	u1460
  3836   00282E  5020               	movf	(stop@i+1)^0,w,c
  3837   002830  E106               	bnz	u1461
  3838   002832  041F               	decf	stop@i^0,w,c
  3839   002834  B0D8               	btfsc	status,0,c
  3840   002836  EF1F  F014         	goto	u1461
  3841   00283A  EF21  F014         	goto	u1460
  3842   00283E                     u1461:
  3843   00283E  EFEF  F013         	goto	l2596
  3844   002842                     u1460:
  3845   002842  0012               	return		;funcret
  3846   002844                     __end_of_stop:
  3847                           	callstack 0
  3848                           
  3849 ;; *************** function _spin_180 *****************
  3850 ;; Defined at:
  3851 ;;		line 151 in file "../dc_motor.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3854 ;;		 -> main@motorL(9), 
  3855 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3856 ;;		 -> main@motorR(9), 
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;  i               2   31[COMRAM] int 
  3859 ;; Return value:  Size  Location     Type
  3860 ;;                  1    wreg      void 
  3861 ;; Registers used:
  3862 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3868 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3869 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3870 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3871 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3872 ;;Total ram usage:        8 bytes
  3873 ;; Hardware stack levels used: 1
  3874 ;; Hardware stack levels required when called: 3
  3875 ;; This function calls:
  3876 ;;		_setMotorPWM
  3877 ;; This function is called by:
  3878 ;;		_main
  3879 ;;		_motor_action
  3880 ;;		_motor_action_return
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           	psect	text16
  3885   00248C                     __ptext16:
  3886                           	callstack 0
  3887   00248C                     _spin_180:
  3888                           	callstack 27
  3889   00248C                     
  3890                           ;../dc_motor.c: 151: void spin_180(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 152: {;../dc_motor.c: 153:     mL->direction = 1;
  3891   00248C  EE20 F001          	lfsr	2,1
  3892   002490  501A               	movf	spin_180@mL^0,w,c
  3893   002492  26D9               	addwf	fsr2l,f,c
  3894   002494  501B               	movf	(spin_180@mL+1)^0,w,c
  3895   002496  22DA               	addwfc	fsr2h,f,c
  3896   002498  0E01               	movlw	1
  3897   00249A  6EDF               	movwf	indf2,c
  3898                           
  3899                           ;../dc_motor.c: 154:     mR->direction = 0;
  3900   00249C  EE20 F001          	lfsr	2,1
  3901   0024A0  501C               	movf	spin_180@mR^0,w,c
  3902   0024A2  26D9               	addwf	fsr2l,f,c
  3903   0024A4  501D               	movf	(spin_180@mR+1)^0,w,c
  3904   0024A6  22DA               	addwfc	fsr2h,f,c
  3905   0024A8  0E00               	movlw	0
  3906   0024AA  6EDF               	movwf	indf2,c
  3907   0024AC                     
  3908                           ;../dc_motor.c: 155:     for (int i = 0;i<50;i = i + 2)
  3909   0024AC  0E00               	movlw	0
  3910   0024AE  6E21               	movwf	(spin_180@i+1)^0,c
  3911   0024B0  0E00               	movlw	0
  3912   0024B2  6E20               	movwf	spin_180@i^0,c
  3913   0024B4                     l2616:
  3914                           
  3915                           ;../dc_motor.c: 156:     {;../dc_motor.c: 157:         mL->power = i;
  3916   0024B4  C01A  FFD9         	movff	spin_180@mL,fsr2l
  3917   0024B8  C01B  FFDA         	movff	spin_180@mL+1,fsr2h
  3918   0024BC  C020  FFDF         	movff	spin_180@i,indf2
  3919   0024C0                     
  3920                           ;../dc_motor.c: 158:         mR->power = 50 + i;
  3921   0024C0  5020               	movf	spin_180@i^0,w,c
  3922   0024C2  0F32               	addlw	50
  3923   0024C4  C01C  FFD9         	movff	spin_180@mR,fsr2l
  3924   0024C8  C01D  FFDA         	movff	spin_180@mR+1,fsr2h
  3925   0024CC  6EDF               	movwf	indf2,c
  3926   0024CE                     
  3927                           ;../dc_motor.c: 159:         setMotorPWM(mL);
  3928   0024CE  C01A  F00F         	movff	spin_180@mL,setMotorPWM@m
  3929   0024D2  C01B  F010         	movff	spin_180@mL+1,setMotorPWM@m+1
  3930   0024D6  EC1A  F00D         	call	_setMotorPWM	;wreg free
  3931   0024DA                     
  3932                           ;../dc_motor.c: 160:         setMotorPWM(mR);
  3933   0024DA  C01C  F00F         	movff	spin_180@mR,setMotorPWM@m
  3934   0024DE  C01D  F010         	movff	spin_180@mR+1,setMotorPWM@m+1
  3935   0024E2  EC1A  F00D         	call	_setMotorPWM	;wreg free
  3936   0024E6                     
  3937                           ;../dc_motor.c: 161:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3938   0024E6  0E35               	movlw	53
  3939   0024E8                     u2017:
  3940   0024E8  2EE8               	decfsz	wreg,f,c
  3941   0024EA  D7FE               	bra	u2017
  3942   0024EC  F000               	nop	
  3943   0024EE                     
  3944                           ;../dc_motor.c: 162:     }
  3945   0024EE  0E02               	movlw	2
  3946   0024F0  2420               	addwf	spin_180@i^0,w,c
  3947   0024F2  6E20               	movwf	spin_180@i^0,c
  3948   0024F4  0E00               	movlw	0
  3949   0024F6  2021               	addwfc	(spin_180@i+1)^0,w,c
  3950   0024F8  6E21               	movwf	(spin_180@i+1)^0,c
  3951   0024FA  BE21               	btfsc	(spin_180@i+1)^0,7,c
  3952   0024FC  EF89  F012         	goto	u1471
  3953   002500  5021               	movf	(spin_180@i+1)^0,w,c
  3954   002502  E109               	bnz	u1470
  3955   002504  0E32               	movlw	50
  3956   002506  5C20               	subwf	spin_180@i^0,w,c
  3957   002508  A0D8               	btfss	status,0,c
  3958   00250A  EF89  F012         	goto	u1471
  3959   00250E  EF8B  F012         	goto	u1470
  3960   002512                     u1471:
  3961   002512  EF5A  F012         	goto	l2616
  3962   002516                     u1470:
  3963   002516                     
  3964                           ;../dc_motor.c: 163:     _delay((unsigned long)((290)*(64000000/4000.0)));
  3965   002516  0E18               	movlw	24
  3966   002518  6E1F               	movwf	(??_spin_180+1)^0,c
  3967   00251A  0E8A               	movlw	138
  3968   00251C  6E1E               	movwf	??_spin_180^0,c
  3969   00251E  0EE8               	movlw	232
  3970   002520                     u2027:
  3971   002520  2EE8               	decfsz	wreg,f,c
  3972   002522  D7FE               	bra	u2027
  3973   002524  2E1E               	decfsz	??_spin_180^0,f,c
  3974   002526  D7FC               	bra	u2027
  3975   002528  2E1F               	decfsz	(??_spin_180+1)^0,f,c
  3976   00252A  D7FA               	bra	u2027
  3977   00252C  0012               	return		;funcret
  3978   00252E                     __end_of_spin_180:
  3979                           	callstack 0
  3980                           
  3981 ;; *************** function _right_90 *****************
  3982 ;; Defined at:
  3983 ;;		line 121 in file "../dc_motor.c"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3986 ;;		 -> main@motorL(9), 
  3987 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3988 ;;		 -> main@motorR(9), 
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;  i               2   31[COMRAM] int 
  3991 ;; Return value:  Size  Location     Type
  3992 ;;                  1    wreg      void 
  3993 ;; Registers used:
  3994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3995 ;; Tracked objects:
  3996 ;;		On entry : 0/0
  3997 ;;		On exit  : 0/0
  3998 ;;		Unchanged: 0/0
  3999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4000 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4001 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4002 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4003 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4004 ;;Total ram usage:        8 bytes
  4005 ;; Hardware stack levels used: 1
  4006 ;; Hardware stack levels required when called: 3
  4007 ;; This function calls:
  4008 ;;		_setMotorPWM
  4009 ;; This function is called by:
  4010 ;;		_motor_action
  4011 ;;		_motor_action_return
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           	psect	text17
  4016   002344                     __ptext17:
  4017                           	callstack 0
  4018   002344                     _right_90:
  4019                           	callstack 26
  4020   002344                     
  4021                           ;../dc_motor.c: 121: void right_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 122: {;../dc_motor.c: 123:     mL->direction = 1;
  4022   002344  EE20 F001          	lfsr	2,1
  4023   002348  501A               	movf	right_90@mL^0,w,c
  4024   00234A  26D9               	addwf	fsr2l,f,c
  4025   00234C  501B               	movf	(right_90@mL+1)^0,w,c
  4026   00234E  22DA               	addwfc	fsr2h,f,c
  4027   002350  0E01               	movlw	1
  4028   002352  6EDF               	movwf	indf2,c
  4029                           
  4030                           ;../dc_motor.c: 124:     mR->direction = 0;
  4031   002354  EE20 F001          	lfsr	2,1
  4032   002358  501C               	movf	right_90@mR^0,w,c
  4033   00235A  26D9               	addwf	fsr2l,f,c
  4034   00235C  501D               	movf	(right_90@mR+1)^0,w,c
  4035   00235E  22DA               	addwfc	fsr2h,f,c
  4036   002360  0E00               	movlw	0
  4037   002362  6EDF               	movwf	indf2,c
  4038   002364                     
  4039                           ;../dc_motor.c: 125:     for (int i = 0;i<50;i = i + 2)
  4040   002364  0E00               	movlw	0
  4041   002366  6E21               	movwf	(right_90@i+1)^0,c
  4042   002368  0E00               	movlw	0
  4043   00236A  6E20               	movwf	right_90@i^0,c
  4044   00236C                     l2684:
  4045                           
  4046                           ;../dc_motor.c: 126:     {;../dc_motor.c: 127:         mL->power = i;
  4047   00236C  C01A  FFD9         	movff	right_90@mL,fsr2l
  4048   002370  C01B  FFDA         	movff	right_90@mL+1,fsr2h
  4049   002374  C020  FFDF         	movff	right_90@i,indf2
  4050   002378                     
  4051                           ;../dc_motor.c: 128:         mR->power = 50 + i;
  4052   002378  5020               	movf	right_90@i^0,w,c
  4053   00237A  0F32               	addlw	50
  4054   00237C  C01C  FFD9         	movff	right_90@mR,fsr2l
  4055   002380  C01D  FFDA         	movff	right_90@mR+1,fsr2h
  4056   002384  6EDF               	movwf	indf2,c
  4057   002386                     
  4058                           ;../dc_motor.c: 129:         setMotorPWM(mL);
  4059   002386  C01A  F00F         	movff	right_90@mL,setMotorPWM@m
  4060   00238A  C01B  F010         	movff	right_90@mL+1,setMotorPWM@m+1
  4061   00238E  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4062   002392                     
  4063                           ;../dc_motor.c: 130:         setMotorPWM(mR);
  4064   002392  C01C  F00F         	movff	right_90@mR,setMotorPWM@m
  4065   002396  C01D  F010         	movff	right_90@mR+1,setMotorPWM@m+1
  4066   00239A  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4067   00239E                     
  4068                           ;../dc_motor.c: 131:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4069   00239E  0E35               	movlw	53
  4070   0023A0                     u2037:
  4071   0023A0  2EE8               	decfsz	wreg,f,c
  4072   0023A2  D7FE               	bra	u2037
  4073   0023A4  F000               	nop	
  4074   0023A6                     
  4075                           ;../dc_motor.c: 132:     }
  4076   0023A6  0E02               	movlw	2
  4077   0023A8  2420               	addwf	right_90@i^0,w,c
  4078   0023AA  6E20               	movwf	right_90@i^0,c
  4079   0023AC  0E00               	movlw	0
  4080   0023AE  2021               	addwfc	(right_90@i+1)^0,w,c
  4081   0023B0  6E21               	movwf	(right_90@i+1)^0,c
  4082   0023B2  BE21               	btfsc	(right_90@i+1)^0,7,c
  4083   0023B4  EFE5  F011         	goto	u1501
  4084   0023B8  5021               	movf	(right_90@i+1)^0,w,c
  4085   0023BA  E109               	bnz	u1500
  4086   0023BC  0E32               	movlw	50
  4087   0023BE  5C20               	subwf	right_90@i^0,w,c
  4088   0023C0  A0D8               	btfss	status,0,c
  4089   0023C2  EFE5  F011         	goto	u1501
  4090   0023C6  EFE7  F011         	goto	u1500
  4091   0023CA                     u1501:
  4092   0023CA  EFB6  F011         	goto	l2684
  4093   0023CE                     u1500:
  4094   0023CE                     
  4095                           ;../dc_motor.c: 133:     _delay((unsigned long)((165)*(64000000/4000.0)));
  4096   0023CE  0E0E               	movlw	14
  4097   0023D0  6E1F               	movwf	(??_right_90+1)^0,c
  4098   0023D2  0E65               	movlw	101
  4099   0023D4  6E1E               	movwf	??_right_90^0,c
  4100   0023D6  0E87               	movlw	135
  4101   0023D8                     u2047:
  4102   0023D8  2EE8               	decfsz	wreg,f,c
  4103   0023DA  D7FE               	bra	u2047
  4104   0023DC  2E1E               	decfsz	??_right_90^0,f,c
  4105   0023DE  D7FC               	bra	u2047
  4106   0023E0  2E1F               	decfsz	(??_right_90+1)^0,f,c
  4107   0023E2  D7FA               	bra	u2047
  4108   0023E4  F000               	nop	
  4109   0023E6  0012               	return		;funcret
  4110   0023E8                     __end_of_right_90:
  4111                           	callstack 0
  4112                           
  4113 ;; *************** function _right_135 *****************
  4114 ;; Defined at:
  4115 ;;		line 166 in file "../dc_motor.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4118 ;;		 -> main@motorL(9), 
  4119 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4120 ;;		 -> main@motorR(9), 
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;  i               2   31[COMRAM] int 
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  1    wreg      void 
  4125 ;; Registers used:
  4126 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4132 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4133 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4134 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4135 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4136 ;;Total ram usage:        8 bytes
  4137 ;; Hardware stack levels used: 1
  4138 ;; Hardware stack levels required when called: 3
  4139 ;; This function calls:
  4140 ;;		_setMotorPWM
  4141 ;; This function is called by:
  4142 ;;		_motor_action
  4143 ;;		_motor_action_return
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           	psect	text18
  4148   00252E                     __ptext18:
  4149                           	callstack 0
  4150   00252E                     _right_135:
  4151                           	callstack 26
  4152   00252E                     
  4153                           ;../dc_motor.c: 166: void right_135(struct DC_motor *mL, struct DC_motor *mR);../dc_moto
      +                          r.c: 167: {;../dc_motor.c: 168:     mL->direction = 1;
  4154   00252E  EE20 F001          	lfsr	2,1
  4155   002532  501A               	movf	right_135@mL^0,w,c
  4156   002534  26D9               	addwf	fsr2l,f,c
  4157   002536  501B               	movf	(right_135@mL+1)^0,w,c
  4158   002538  22DA               	addwfc	fsr2h,f,c
  4159   00253A  0E01               	movlw	1
  4160   00253C  6EDF               	movwf	indf2,c
  4161                           
  4162                           ;../dc_motor.c: 169:     mR->direction = 0;
  4163   00253E  EE20 F001          	lfsr	2,1
  4164   002542  501C               	movf	right_135@mR^0,w,c
  4165   002544  26D9               	addwf	fsr2l,f,c
  4166   002546  501D               	movf	(right_135@mR+1)^0,w,c
  4167   002548  22DA               	addwfc	fsr2h,f,c
  4168   00254A  0E00               	movlw	0
  4169   00254C  6EDF               	movwf	indf2,c
  4170   00254E                     
  4171                           ;../dc_motor.c: 170:     for (int i = 0;i<50;i = i + 2)
  4172   00254E  0E00               	movlw	0
  4173   002550  6E21               	movwf	(right_135@i+1)^0,c
  4174   002552  0E00               	movlw	0
  4175   002554  6E20               	movwf	right_135@i^0,c
  4176   002556                     l2732:
  4177                           
  4178                           ;../dc_motor.c: 171:     {;../dc_motor.c: 172:         mL->power = i;
  4179   002556  C01A  FFD9         	movff	right_135@mL,fsr2l
  4180   00255A  C01B  FFDA         	movff	right_135@mL+1,fsr2h
  4181   00255E  C020  FFDF         	movff	right_135@i,indf2
  4182   002562                     
  4183                           ;../dc_motor.c: 173:         mR->power = 50 + i;
  4184   002562  5020               	movf	right_135@i^0,w,c
  4185   002564  0F32               	addlw	50
  4186   002566  C01C  FFD9         	movff	right_135@mR,fsr2l
  4187   00256A  C01D  FFDA         	movff	right_135@mR+1,fsr2h
  4188   00256E  6EDF               	movwf	indf2,c
  4189   002570                     
  4190                           ;../dc_motor.c: 174:         setMotorPWM(mL);
  4191   002570  C01A  F00F         	movff	right_135@mL,setMotorPWM@m
  4192   002574  C01B  F010         	movff	right_135@mL+1,setMotorPWM@m+1
  4193   002578  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4194   00257C                     
  4195                           ;../dc_motor.c: 175:         setMotorPWM(mR);
  4196   00257C  C01C  F00F         	movff	right_135@mR,setMotorPWM@m
  4197   002580  C01D  F010         	movff	right_135@mR+1,setMotorPWM@m+1
  4198   002584  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4199   002588                     
  4200                           ;../dc_motor.c: 176:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4201   002588  0E35               	movlw	53
  4202   00258A                     u2057:
  4203   00258A  2EE8               	decfsz	wreg,f,c
  4204   00258C  D7FE               	bra	u2057
  4205   00258E  F000               	nop	
  4206   002590                     
  4207                           ;../dc_motor.c: 177:     }
  4208   002590  0E02               	movlw	2
  4209   002592  2420               	addwf	right_135@i^0,w,c
  4210   002594  6E20               	movwf	right_135@i^0,c
  4211   002596  0E00               	movlw	0
  4212   002598  2021               	addwfc	(right_135@i+1)^0,w,c
  4213   00259A  6E21               	movwf	(right_135@i+1)^0,c
  4214   00259C  BE21               	btfsc	(right_135@i+1)^0,7,c
  4215   00259E  EFDA  F012         	goto	u1521
  4216   0025A2  5021               	movf	(right_135@i+1)^0,w,c
  4217   0025A4  E109               	bnz	u1520
  4218   0025A6  0E32               	movlw	50
  4219   0025A8  5C20               	subwf	right_135@i^0,w,c
  4220   0025AA  A0D8               	btfss	status,0,c
  4221   0025AC  EFDA  F012         	goto	u1521
  4222   0025B0  EFDC  F012         	goto	u1520
  4223   0025B4                     u1521:
  4224   0025B4  EFAB  F012         	goto	l2732
  4225   0025B8                     u1520:
  4226   0025B8                     
  4227                           ;../dc_motor.c: 178:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4228   0025B8  0E13               	movlw	19
  4229   0025BA  6E1F               	movwf	(??_right_135+1)^0,c
  4230   0025BC  0EAC               	movlw	172
  4231   0025BE  6E1E               	movwf	??_right_135^0,c
  4232   0025C0  0E2A               	movlw	42
  4233   0025C2                     u2067:
  4234   0025C2  2EE8               	decfsz	wreg,f,c
  4235   0025C4  D7FE               	bra	u2067
  4236   0025C6  2E1E               	decfsz	??_right_135^0,f,c
  4237   0025C8  D7FC               	bra	u2067
  4238   0025CA  2E1F               	decfsz	(??_right_135+1)^0,f,c
  4239   0025CC  D7FA               	bra	u2067
  4240   0025CE  0012               	return		;funcret
  4241   0025D0                     __end_of_right_135:
  4242                           	callstack 0
  4243                           
  4244 ;; *************** function _reverse_onesquare *****************
  4245 ;; Defined at:
  4246 ;;		line 106 in file "../dc_motor.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4249 ;;		 -> main@motorL(9), 
  4250 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4251 ;;		 -> main@motorR(9), 
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;  i               2   31[COMRAM] int 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  1    wreg      void 
  4256 ;; Registers used:
  4257 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4263 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4264 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4265 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4266 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4267 ;;Total ram usage:        8 bytes
  4268 ;; Hardware stack levels used: 1
  4269 ;; Hardware stack levels required when called: 3
  4270 ;; This function calls:
  4271 ;;		_setMotorPWM
  4272 ;; This function is called by:
  4273 ;;		_motor_action
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text19
  4278   0025D0                     __ptext19:
  4279                           	callstack 0
  4280   0025D0                     _reverse_onesquare:
  4281                           	callstack 26
  4282   0025D0                     
  4283                           ;../dc_motor.c: 106: void reverse_onesquare (struct DC_motor *mL, struct DC_motor *mR);.
      +                          ./dc_motor.c: 107: {;../dc_motor.c: 108:     mL->direction = 0;
  4284   0025D0  EE20 F001          	lfsr	2,1
  4285   0025D4  501A               	movf	reverse_onesquare@mL^0,w,c
  4286   0025D6  26D9               	addwf	fsr2l,f,c
  4287   0025D8  501B               	movf	(reverse_onesquare@mL+1)^0,w,c
  4288   0025DA  22DA               	addwfc	fsr2h,f,c
  4289   0025DC  0E00               	movlw	0
  4290   0025DE  6EDF               	movwf	indf2,c
  4291                           
  4292                           ;../dc_motor.c: 109:     mR->direction = 0;
  4293   0025E0  EE20 F001          	lfsr	2,1
  4294   0025E4  501C               	movf	reverse_onesquare@mR^0,w,c
  4295   0025E6  26D9               	addwf	fsr2l,f,c
  4296   0025E8  501D               	movf	(reverse_onesquare@mR+1)^0,w,c
  4297   0025EA  22DA               	addwfc	fsr2h,f,c
  4298   0025EC  0E00               	movlw	0
  4299   0025EE  6EDF               	movwf	indf2,c
  4300   0025F0                     
  4301                           ;../dc_motor.c: 110:     for (int i=0;i<51;i=i + 2)
  4302   0025F0  0E00               	movlw	0
  4303   0025F2  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  4304   0025F4  0E00               	movlw	0
  4305   0025F6  6E20               	movwf	reverse_onesquare@i^0,c
  4306   0025F8                     l2662:
  4307                           
  4308                           ;../dc_motor.c: 111:     {;../dc_motor.c: 112:         mL->power = i;
  4309   0025F8  C01A  FFD9         	movff	reverse_onesquare@mL,fsr2l
  4310   0025FC  C01B  FFDA         	movff	reverse_onesquare@mL+1,fsr2h
  4311   002600  C020  FFDF         	movff	reverse_onesquare@i,indf2
  4312                           
  4313                           ;../dc_motor.c: 113:         mR->power = i;
  4314   002604  C01C  FFD9         	movff	reverse_onesquare@mR,fsr2l
  4315   002608  C01D  FFDA         	movff	reverse_onesquare@mR+1,fsr2h
  4316   00260C  C020  FFDF         	movff	reverse_onesquare@i,indf2
  4317   002610                     
  4318                           ;../dc_motor.c: 114:         setMotorPWM(mL);
  4319   002610  C01A  F00F         	movff	reverse_onesquare@mL,setMotorPWM@m
  4320   002614  C01B  F010         	movff	reverse_onesquare@mL+1,setMotorPWM@m+1
  4321   002618  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4322   00261C                     
  4323                           ;../dc_motor.c: 115:         setMotorPWM(mR);
  4324   00261C  C01C  F00F         	movff	reverse_onesquare@mR,setMotorPWM@m
  4325   002620  C01D  F010         	movff	reverse_onesquare@mR+1,setMotorPWM@m+1
  4326   002624  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4327   002628                     
  4328                           ;../dc_motor.c: 116:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4329   002628  0E35               	movlw	53
  4330   00262A                     u2077:
  4331   00262A  2EE8               	decfsz	wreg,f,c
  4332   00262C  D7FE               	bra	u2077
  4333   00262E  F000               	nop	
  4334   002630                     
  4335                           ;../dc_motor.c: 117:     }
  4336   002630  0E02               	movlw	2
  4337   002632  2420               	addwf	reverse_onesquare@i^0,w,c
  4338   002634  6E20               	movwf	reverse_onesquare@i^0,c
  4339   002636  0E00               	movlw	0
  4340   002638  2021               	addwfc	(reverse_onesquare@i+1)^0,w,c
  4341   00263A  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  4342   00263C  BE21               	btfsc	(reverse_onesquare@i+1)^0,7,c
  4343   00263E  EF2A  F013         	goto	u1491
  4344   002642  5021               	movf	(reverse_onesquare@i+1)^0,w,c
  4345   002644  E109               	bnz	u1490
  4346   002646  0E33               	movlw	51
  4347   002648  5C20               	subwf	reverse_onesquare@i^0,w,c
  4348   00264A  A0D8               	btfss	status,0,c
  4349   00264C  EF2A  F013         	goto	u1491
  4350   002650  EF2C  F013         	goto	u1490
  4351   002654                     u1491:
  4352   002654  EFFC  F012         	goto	l2662
  4353   002658                     u1490:
  4354   002658                     
  4355                           ;../dc_motor.c: 118:     _delay((unsigned long)((1100)*(64000000/4000.0)));
  4356   002658  0E5A               	movlw	90
  4357   00265A  6E1F               	movwf	(??_reverse_onesquare+1)^0,c
  4358   00265C  0E49               	movlw	73
  4359   00265E  6E1E               	movwf	??_reverse_onesquare^0,c
  4360   002660  0EE7               	movlw	231
  4361   002662                     u2087:
  4362   002662  2EE8               	decfsz	wreg,f,c
  4363   002664  D7FE               	bra	u2087
  4364   002666  2E1E               	decfsz	??_reverse_onesquare^0,f,c
  4365   002668  D7FC               	bra	u2087
  4366   00266A  2E1F               	decfsz	(??_reverse_onesquare+1)^0,f,c
  4367   00266C  D7FA               	bra	u2087
  4368   00266E  F000               	nop	
  4369   002670  0012               	return		;funcret
  4370   002672                     __end_of_reverse_onesquare:
  4371                           	callstack 0
  4372                           
  4373 ;; *************** function _reverse_fromcard *****************
  4374 ;; Defined at:
  4375 ;;		line 91 in file "../dc_motor.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4378 ;;		 -> main@motorL(9), 
  4379 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4380 ;;		 -> main@motorR(9), 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  i               2   31[COMRAM] int 
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  1    wreg      void 
  4385 ;; Registers used:
  4386 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4392 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4393 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4394 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4395 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4396 ;;Total ram usage:        8 bytes
  4397 ;; Hardware stack levels used: 1
  4398 ;; Hardware stack levels required when called: 3
  4399 ;; This function calls:
  4400 ;;		_setMotorPWM
  4401 ;; This function is called by:
  4402 ;;		_motor_action
  4403 ;;		_motor_action_return
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           	psect	text20
  4408   002672                     __ptext20:
  4409                           	callstack 0
  4410   002672                     _reverse_fromcard:
  4411                           	callstack 26
  4412   002672                     
  4413                           ;../dc_motor.c: 91: void reverse_fromcard (struct DC_motor *mL, struct DC_motor *mR);../
      +                          dc_motor.c: 92: {;../dc_motor.c: 93:     mL->direction = 0;
  4414   002672  EE20 F001          	lfsr	2,1
  4415   002676  501A               	movf	reverse_fromcard@mL^0,w,c
  4416   002678  26D9               	addwf	fsr2l,f,c
  4417   00267A  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  4418   00267C  22DA               	addwfc	fsr2h,f,c
  4419   00267E  0E00               	movlw	0
  4420   002680  6EDF               	movwf	indf2,c
  4421                           
  4422                           ;../dc_motor.c: 94:     mL->direction = 0;
  4423   002682  EE20 F001          	lfsr	2,1
  4424   002686  501A               	movf	reverse_fromcard@mL^0,w,c
  4425   002688  26D9               	addwf	fsr2l,f,c
  4426   00268A  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  4427   00268C  22DA               	addwfc	fsr2h,f,c
  4428   00268E  0E00               	movlw	0
  4429   002690  6EDF               	movwf	indf2,c
  4430   002692                     
  4431                           ;../dc_motor.c: 95:     for (int i = 0;i < 41;i = i + 2)
  4432   002692  0E00               	movlw	0
  4433   002694  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  4434   002696  0E00               	movlw	0
  4435   002698  6E20               	movwf	reverse_fromcard@i^0,c
  4436   00269A                     l2640:
  4437                           
  4438                           ;../dc_motor.c: 96:     {;../dc_motor.c: 97:         mL->power = i;
  4439   00269A  C01A  FFD9         	movff	reverse_fromcard@mL,fsr2l
  4440   00269E  C01B  FFDA         	movff	reverse_fromcard@mL+1,fsr2h
  4441   0026A2  C020  FFDF         	movff	reverse_fromcard@i,indf2
  4442                           
  4443                           ;../dc_motor.c: 98:         mR->power = i;
  4444   0026A6  C01C  FFD9         	movff	reverse_fromcard@mR,fsr2l
  4445   0026AA  C01D  FFDA         	movff	reverse_fromcard@mR+1,fsr2h
  4446   0026AE  C020  FFDF         	movff	reverse_fromcard@i,indf2
  4447   0026B2                     
  4448                           ;../dc_motor.c: 99:         setMotorPWM(mL);
  4449   0026B2  C01A  F00F         	movff	reverse_fromcard@mL,setMotorPWM@m
  4450   0026B6  C01B  F010         	movff	reverse_fromcard@mL+1,setMotorPWM@m+1
  4451   0026BA  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4452   0026BE                     
  4453                           ;../dc_motor.c: 100:         setMotorPWM(mR);
  4454   0026BE  C01C  F00F         	movff	reverse_fromcard@mR,setMotorPWM@m
  4455   0026C2  C01D  F010         	movff	reverse_fromcard@mR+1,setMotorPWM@m+1
  4456   0026C6  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4457   0026CA                     
  4458                           ;../dc_motor.c: 101:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4459   0026CA  0E35               	movlw	53
  4460   0026CC                     u2097:
  4461   0026CC  2EE8               	decfsz	wreg,f,c
  4462   0026CE  D7FE               	bra	u2097
  4463   0026D0  F000               	nop	
  4464   0026D2                     
  4465                           ;../dc_motor.c: 102:     }
  4466   0026D2  0E02               	movlw	2
  4467   0026D4  2420               	addwf	reverse_fromcard@i^0,w,c
  4468   0026D6  6E20               	movwf	reverse_fromcard@i^0,c
  4469   0026D8  0E00               	movlw	0
  4470   0026DA  2021               	addwfc	(reverse_fromcard@i+1)^0,w,c
  4471   0026DC  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  4472   0026DE  BE21               	btfsc	(reverse_fromcard@i+1)^0,7,c
  4473   0026E0  EF7B  F013         	goto	u1481
  4474   0026E4  5021               	movf	(reverse_fromcard@i+1)^0,w,c
  4475   0026E6  E109               	bnz	u1480
  4476   0026E8  0E29               	movlw	41
  4477   0026EA  5C20               	subwf	reverse_fromcard@i^0,w,c
  4478   0026EC  A0D8               	btfss	status,0,c
  4479   0026EE  EF7B  F013         	goto	u1481
  4480   0026F2  EF7D  F013         	goto	u1480
  4481   0026F6                     u1481:
  4482   0026F6  EF4D  F013         	goto	l2640
  4483   0026FA                     u1480:
  4484   0026FA                     
  4485                           ;../dc_motor.c: 103:     _delay((unsigned long)((500)*(64000000/4000.0)));
  4486   0026FA  0E29               	movlw	41
  4487   0026FC  6E1F               	movwf	(??_reverse_fromcard+1)^0,c
  4488   0026FE  0E96               	movlw	150
  4489   002700  6E1E               	movwf	??_reverse_fromcard^0,c
  4490   002702  0E7F               	movlw	127
  4491   002704                     u2107:
  4492   002704  2EE8               	decfsz	wreg,f,c
  4493   002706  D7FE               	bra	u2107
  4494   002708  2E1E               	decfsz	??_reverse_fromcard^0,f,c
  4495   00270A  D7FC               	bra	u2107
  4496   00270C  2E1F               	decfsz	(??_reverse_fromcard+1)^0,f,c
  4497   00270E  D7FA               	bra	u2107
  4498   002710  F000               	nop	
  4499   002712  0012               	return		;funcret
  4500   002714                     __end_of_reverse_fromcard:
  4501                           	callstack 0
  4502                           
  4503 ;; *************** function _left_90 *****************
  4504 ;; Defined at:
  4505 ;;		line 136 in file "../dc_motor.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4508 ;;		 -> main@motorL(9), 
  4509 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4510 ;;		 -> main@motorR(9), 
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;  i               2   31[COMRAM] int 
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      void 
  4515 ;; Registers used:
  4516 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4522 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4523 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4524 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4525 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4526 ;;Total ram usage:        8 bytes
  4527 ;; Hardware stack levels used: 1
  4528 ;; Hardware stack levels required when called: 3
  4529 ;; This function calls:
  4530 ;;		_setMotorPWM
  4531 ;; This function is called by:
  4532 ;;		_motor_action
  4533 ;;		_motor_action_return
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           	psect	text21
  4538   0023E8                     __ptext21:
  4539                           	callstack 0
  4540   0023E8                     _left_90:
  4541                           	callstack 26
  4542   0023E8                     
  4543                           ;../dc_motor.c: 136: void left_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 137: {;../dc_motor.c: 138:     mL->direction = 0;
  4544   0023E8  EE20 F001          	lfsr	2,1
  4545   0023EC  501A               	movf	left_90@mL^0,w,c
  4546   0023EE  26D9               	addwf	fsr2l,f,c
  4547   0023F0  501B               	movf	(left_90@mL+1)^0,w,c
  4548   0023F2  22DA               	addwfc	fsr2h,f,c
  4549   0023F4  0E00               	movlw	0
  4550   0023F6  6EDF               	movwf	indf2,c
  4551                           
  4552                           ;../dc_motor.c: 139:     mR->direction = 1;
  4553   0023F8  EE20 F001          	lfsr	2,1
  4554   0023FC  501C               	movf	left_90@mR^0,w,c
  4555   0023FE  26D9               	addwf	fsr2l,f,c
  4556   002400  501D               	movf	(left_90@mR+1)^0,w,c
  4557   002402  22DA               	addwfc	fsr2h,f,c
  4558   002404  0E01               	movlw	1
  4559   002406  6EDF               	movwf	indf2,c
  4560   002408                     
  4561                           ;../dc_motor.c: 140:     for (int i = 0;i<50;i = i + 2)
  4562   002408  0E00               	movlw	0
  4563   00240A  6E21               	movwf	(left_90@i+1)^0,c
  4564   00240C  0E00               	movlw	0
  4565   00240E  6E20               	movwf	left_90@i^0,c
  4566   002410                     l2708:
  4567                           
  4568                           ;../dc_motor.c: 141:     {;../dc_motor.c: 142:         mL->power = 50 + i;
  4569   002410  5020               	movf	left_90@i^0,w,c
  4570   002412  0F32               	addlw	50
  4571   002414  C01A  FFD9         	movff	left_90@mL,fsr2l
  4572   002418  C01B  FFDA         	movff	left_90@mL+1,fsr2h
  4573   00241C  6EDF               	movwf	indf2,c
  4574   00241E                     
  4575                           ;../dc_motor.c: 143:         mR->power = i;
  4576   00241E  C01C  FFD9         	movff	left_90@mR,fsr2l
  4577   002422  C01D  FFDA         	movff	left_90@mR+1,fsr2h
  4578   002426  C020  FFDF         	movff	left_90@i,indf2
  4579   00242A                     
  4580                           ;../dc_motor.c: 144:         setMotorPWM(mL);
  4581   00242A  C01A  F00F         	movff	left_90@mL,setMotorPWM@m
  4582   00242E  C01B  F010         	movff	left_90@mL+1,setMotorPWM@m+1
  4583   002432  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4584   002436                     
  4585                           ;../dc_motor.c: 145:         setMotorPWM(mR);
  4586   002436  C01C  F00F         	movff	left_90@mR,setMotorPWM@m
  4587   00243A  C01D  F010         	movff	left_90@mR+1,setMotorPWM@m+1
  4588   00243E  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4589   002442                     
  4590                           ;../dc_motor.c: 146:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4591   002442  0E35               	movlw	53
  4592   002444                     u2117:
  4593   002444  2EE8               	decfsz	wreg,f,c
  4594   002446  D7FE               	bra	u2117
  4595   002448  F000               	nop	
  4596   00244A                     
  4597                           ;../dc_motor.c: 147:     }
  4598   00244A  0E02               	movlw	2
  4599   00244C  2420               	addwf	left_90@i^0,w,c
  4600   00244E  6E20               	movwf	left_90@i^0,c
  4601   002450  0E00               	movlw	0
  4602   002452  2021               	addwfc	(left_90@i+1)^0,w,c
  4603   002454  6E21               	movwf	(left_90@i+1)^0,c
  4604   002456  BE21               	btfsc	(left_90@i+1)^0,7,c
  4605   002458  EF37  F012         	goto	u1511
  4606   00245C  5021               	movf	(left_90@i+1)^0,w,c
  4607   00245E  E109               	bnz	u1510
  4608   002460  0E32               	movlw	50
  4609   002462  5C20               	subwf	left_90@i^0,w,c
  4610   002464  A0D8               	btfss	status,0,c
  4611   002466  EF37  F012         	goto	u1511
  4612   00246A  EF39  F012         	goto	u1510
  4613   00246E                     u1511:
  4614   00246E  EF08  F012         	goto	l2708
  4615   002472                     u1510:
  4616   002472                     
  4617                           ;../dc_motor.c: 148:     _delay((unsigned long)((165)*(64000000/4000.0)));
  4618   002472  0E0E               	movlw	14
  4619   002474  6E1F               	movwf	(??_left_90+1)^0,c
  4620   002476  0E65               	movlw	101
  4621   002478  6E1E               	movwf	??_left_90^0,c
  4622   00247A  0E87               	movlw	135
  4623   00247C                     u2127:
  4624   00247C  2EE8               	decfsz	wreg,f,c
  4625   00247E  D7FE               	bra	u2127
  4626   002480  2E1E               	decfsz	??_left_90^0,f,c
  4627   002482  D7FC               	bra	u2127
  4628   002484  2E1F               	decfsz	(??_left_90+1)^0,f,c
  4629   002486  D7FA               	bra	u2127
  4630   002488  F000               	nop	
  4631   00248A  0012               	return		;funcret
  4632   00248C                     __end_of_left_90:
  4633                           	callstack 0
  4634                           
  4635 ;; *************** function _left_135 *****************
  4636 ;; Defined at:
  4637 ;;		line 181 in file "../dc_motor.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4640 ;;		 -> main@motorL(9), 
  4641 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4642 ;;		 -> main@motorR(9), 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  i               2   31[COMRAM] int 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4654 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4655 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4656 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4657 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4658 ;;Total ram usage:        8 bytes
  4659 ;; Hardware stack levels used: 1
  4660 ;; Hardware stack levels required when called: 3
  4661 ;; This function calls:
  4662 ;;		_setMotorPWM
  4663 ;; This function is called by:
  4664 ;;		_motor_action
  4665 ;;		_motor_action_return
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           	psect	text22
  4670   002714                     __ptext22:
  4671                           	callstack 0
  4672   002714                     _left_135:
  4673                           	callstack 26
  4674   002714                     
  4675                           ;../dc_motor.c: 181: void left_135(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 182: {;../dc_motor.c: 183:     mL->direction = 0;
  4676   002714  EE20 F001          	lfsr	2,1
  4677   002718  501A               	movf	left_135@mL^0,w,c
  4678   00271A  26D9               	addwf	fsr2l,f,c
  4679   00271C  501B               	movf	(left_135@mL+1)^0,w,c
  4680   00271E  22DA               	addwfc	fsr2h,f,c
  4681   002720  0E00               	movlw	0
  4682   002722  6EDF               	movwf	indf2,c
  4683                           
  4684                           ;../dc_motor.c: 184:     mR->direction = 1;
  4685   002724  EE20 F001          	lfsr	2,1
  4686   002728  501C               	movf	left_135@mR^0,w,c
  4687   00272A  26D9               	addwf	fsr2l,f,c
  4688   00272C  501D               	movf	(left_135@mR+1)^0,w,c
  4689   00272E  22DA               	addwfc	fsr2h,f,c
  4690   002730  0E01               	movlw	1
  4691   002732  6EDF               	movwf	indf2,c
  4692   002734                     
  4693                           ;../dc_motor.c: 185:     for (int i = 0;i<50;i = i + 2)
  4694   002734  0E00               	movlw	0
  4695   002736  6E21               	movwf	(left_135@i+1)^0,c
  4696   002738  0E00               	movlw	0
  4697   00273A  6E20               	movwf	left_135@i^0,c
  4698   00273C                     l2756:
  4699                           
  4700                           ;../dc_motor.c: 186:     {;../dc_motor.c: 187:         mL->power = 50 + i;
  4701   00273C  5020               	movf	left_135@i^0,w,c
  4702   00273E  0F32               	addlw	50
  4703   002740  C01A  FFD9         	movff	left_135@mL,fsr2l
  4704   002744  C01B  FFDA         	movff	left_135@mL+1,fsr2h
  4705   002748  6EDF               	movwf	indf2,c
  4706   00274A                     
  4707                           ;../dc_motor.c: 188:         mR->power = i;
  4708   00274A  C01C  FFD9         	movff	left_135@mR,fsr2l
  4709   00274E  C01D  FFDA         	movff	left_135@mR+1,fsr2h
  4710   002752  C020  FFDF         	movff	left_135@i,indf2
  4711   002756                     
  4712                           ;../dc_motor.c: 189:         setMotorPWM(mL);
  4713   002756  C01A  F00F         	movff	left_135@mL,setMotorPWM@m
  4714   00275A  C01B  F010         	movff	left_135@mL+1,setMotorPWM@m+1
  4715   00275E  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4716   002762                     
  4717                           ;../dc_motor.c: 190:         setMotorPWM(mR);
  4718   002762  C01C  F00F         	movff	left_135@mR,setMotorPWM@m
  4719   002766  C01D  F010         	movff	left_135@mR+1,setMotorPWM@m+1
  4720   00276A  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4721   00276E                     
  4722                           ;../dc_motor.c: 191:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4723   00276E  0E35               	movlw	53
  4724   002770                     u2137:
  4725   002770  2EE8               	decfsz	wreg,f,c
  4726   002772  D7FE               	bra	u2137
  4727   002774  F000               	nop	
  4728   002776                     
  4729                           ;../dc_motor.c: 192:     }
  4730   002776  0E02               	movlw	2
  4731   002778  2420               	addwf	left_135@i^0,w,c
  4732   00277A  6E20               	movwf	left_135@i^0,c
  4733   00277C  0E00               	movlw	0
  4734   00277E  2021               	addwfc	(left_135@i+1)^0,w,c
  4735   002780  6E21               	movwf	(left_135@i+1)^0,c
  4736   002782  BE21               	btfsc	(left_135@i+1)^0,7,c
  4737   002784  EFCD  F013         	goto	u1531
  4738   002788  5021               	movf	(left_135@i+1)^0,w,c
  4739   00278A  E109               	bnz	u1530
  4740   00278C  0E32               	movlw	50
  4741   00278E  5C20               	subwf	left_135@i^0,w,c
  4742   002790  A0D8               	btfss	status,0,c
  4743   002792  EFCD  F013         	goto	u1531
  4744   002796  EFCF  F013         	goto	u1530
  4745   00279A                     u1531:
  4746   00279A  EF9E  F013         	goto	l2756
  4747   00279E                     u1530:
  4748   00279E                     
  4749                           ;../dc_motor.c: 193:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4750   00279E  0E13               	movlw	19
  4751   0027A0  6E1F               	movwf	(??_left_135+1)^0,c
  4752   0027A2  0EAC               	movlw	172
  4753   0027A4  6E1E               	movwf	??_left_135^0,c
  4754   0027A6  0E2A               	movlw	42
  4755   0027A8                     u2147:
  4756   0027A8  2EE8               	decfsz	wreg,f,c
  4757   0027AA  D7FE               	bra	u2147
  4758   0027AC  2E1E               	decfsz	??_left_135^0,f,c
  4759   0027AE  D7FC               	bra	u2147
  4760   0027B0  2E1F               	decfsz	(??_left_135+1)^0,f,c
  4761   0027B2  D7FA               	bra	u2147
  4762   0027B4  0012               	return		;funcret
  4763   0027B6                     __end_of_left_135:
  4764                           	callstack 0
  4765                           
  4766 ;; *************** function _forward *****************
  4767 ;; Defined at:
  4768 ;;		line 77 in file "../dc_motor.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4771 ;;		 -> main@motorL(9), 
  4772 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4773 ;;		 -> main@motorR(9), 
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;  i               2   29[COMRAM] int 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  1    wreg      void 
  4778 ;; Registers used:
  4779 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4785 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4786 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4788 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4789 ;;Total ram usage:        6 bytes
  4790 ;; Hardware stack levels used: 1
  4791 ;; Hardware stack levels required when called: 3
  4792 ;; This function calls:
  4793 ;;		_setMotorPWM
  4794 ;; This function is called by:
  4795 ;;		_main
  4796 ;;		_motor_action
  4797 ;;		_motor_action_return
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           	psect	text23
  4802   002844                     __ptext23:
  4803                           	callstack 0
  4804   002844                     _forward:
  4805                           	callstack 26
  4806   002844                     
  4807                           ;../dc_motor.c: 77: void forward(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c
      +                          : 78: {;../dc_motor.c: 79:     mL->direction = 1;
  4808   002844  EE20 F001          	lfsr	2,1
  4809   002848  501A               	movf	forward@mL^0,w,c
  4810   00284A  26D9               	addwf	fsr2l,f,c
  4811   00284C  501B               	movf	(forward@mL+1)^0,w,c
  4812   00284E  22DA               	addwfc	fsr2h,f,c
  4813   002850  0E01               	movlw	1
  4814   002852  6EDF               	movwf	indf2,c
  4815                           
  4816                           ;../dc_motor.c: 80:     mR->direction = 1;
  4817   002854  EE20 F001          	lfsr	2,1
  4818   002858  501C               	movf	forward@mR^0,w,c
  4819   00285A  26D9               	addwf	fsr2l,f,c
  4820   00285C  501D               	movf	(forward@mR+1)^0,w,c
  4821   00285E  22DA               	addwfc	fsr2h,f,c
  4822   002860  0E01               	movlw	1
  4823   002862  6EDF               	movwf	indf2,c
  4824   002864                     
  4825                           ;../dc_motor.c: 81:     for (int i=0;i<31;i=i+2)
  4826   002864  0E00               	movlw	0
  4827   002866  6E1F               	movwf	(forward@i+1)^0,c
  4828   002868  0E00               	movlw	0
  4829   00286A  6E1E               	movwf	forward@i^0,c
  4830   00286C                     l2576:
  4831                           
  4832                           ;../dc_motor.c: 82:     {;../dc_motor.c: 83:         mL->power = i;
  4833   00286C  C01A  FFD9         	movff	forward@mL,fsr2l
  4834   002870  C01B  FFDA         	movff	forward@mL+1,fsr2h
  4835   002874  C01E  FFDF         	movff	forward@i,indf2
  4836                           
  4837                           ;../dc_motor.c: 84:         mR->power = i;
  4838   002878  C01C  FFD9         	movff	forward@mR,fsr2l
  4839   00287C  C01D  FFDA         	movff	forward@mR+1,fsr2h
  4840   002880  C01E  FFDF         	movff	forward@i,indf2
  4841   002884                     
  4842                           ;../dc_motor.c: 85:         setMotorPWM(mL);
  4843   002884  C01A  F00F         	movff	forward@mL,setMotorPWM@m
  4844   002888  C01B  F010         	movff	forward@mL+1,setMotorPWM@m+1
  4845   00288C  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4846   002890                     
  4847                           ;../dc_motor.c: 86:         setMotorPWM(mR);
  4848   002890  C01C  F00F         	movff	forward@mR,setMotorPWM@m
  4849   002894  C01D  F010         	movff	forward@mR+1,setMotorPWM@m+1
  4850   002898  EC1A  F00D         	call	_setMotorPWM	;wreg free
  4851   00289C                     
  4852                           ;../dc_motor.c: 87:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4853   00289C  0E6A               	movlw	106
  4854   00289E                     u2157:
  4855   00289E  2EE8               	decfsz	wreg,f,c
  4856   0028A0  D7FE               	bra	u2157
  4857   0028A2  D000               	nop2	
  4858   0028A4                     
  4859                           ;../dc_motor.c: 88:     }
  4860   0028A4  0E02               	movlw	2
  4861   0028A6  241E               	addwf	forward@i^0,w,c
  4862   0028A8  6E1E               	movwf	forward@i^0,c
  4863   0028AA  0E00               	movlw	0
  4864   0028AC  201F               	addwfc	(forward@i+1)^0,w,c
  4865   0028AE  6E1F               	movwf	(forward@i+1)^0,c
  4866   0028B0  BE1F               	btfsc	(forward@i+1)^0,7,c
  4867   0028B2  EF64  F014         	goto	u1451
  4868   0028B6  501F               	movf	(forward@i+1)^0,w,c
  4869   0028B8  E109               	bnz	u1450
  4870   0028BA  0E1F               	movlw	31
  4871   0028BC  5C1E               	subwf	forward@i^0,w,c
  4872   0028BE  A0D8               	btfss	status,0,c
  4873   0028C0  EF64  F014         	goto	u1451
  4874   0028C4  EF66  F014         	goto	u1450
  4875   0028C8                     u1451:
  4876   0028C8  EF36  F014         	goto	l2576
  4877   0028CC                     u1450:
  4878   0028CC  0012               	return		;funcret
  4879   0028CE                     __end_of_forward:
  4880                           	callstack 0
  4881                           
  4882 ;; *************** function _setMotorPWM *****************
  4883 ;; Defined at:
  4884 ;;		line 38 in file "../dc_motor.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;  m               2   14[COMRAM] PTR struct DC_motor
  4887 ;;		 -> main@motorR(9), main@motorL(9), 
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;  PWMduty         2   23[COMRAM] int 
  4890 ;; Return value:  Size  Location     Type
  4891 ;;                  1    wreg      void 
  4892 ;; Registers used:
  4893 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4899 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4901 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4902 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4903 ;;Total ram usage:       11 bytes
  4904 ;; Hardware stack levels used: 1
  4905 ;; Hardware stack levels required when called: 2
  4906 ;; This function calls:
  4907 ;;		___awdiv
  4908 ;;		___wmul
  4909 ;; This function is called by:
  4910 ;;		_main
  4911 ;;		_stop
  4912 ;;		_forward
  4913 ;;		_reverse_fromcard
  4914 ;;		_reverse_onesquare
  4915 ;;		_right_90
  4916 ;;		_left_90
  4917 ;;		_spin_180
  4918 ;;		_right_135
  4919 ;;		_left_135
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	text24
  4924   001A34                     __ptext24:
  4925                           	callstack 0
  4926   001A34                     _setMotorPWM:
  4927                           	callstack 27
  4928   001A34                     
  4929                           ;../dc_motor.c: 38: void setMotorPWM(struct DC_motor *m);../dc_motor.c: 39: {;../dc_moto
      +                          r.c: 40:  int PWMduty;;../dc_motor.c: 42:  if (m->direction){
  4930   001A34  EE20 F001          	lfsr	2,1
  4931   001A38  500F               	movf	setMotorPWM@m^0,w,c
  4932   001A3A  26D9               	addwf	fsr2l,f,c
  4933   001A3C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4934   001A3E  22DA               	addwfc	fsr2h,f,c
  4935   001A40  50DF               	movf	indf2,w,c
  4936   001A42  B4D8               	btfsc	status,2,c
  4937   001A44  EF26  F00D         	goto	u1381
  4938   001A48  EF28  F00D         	goto	u1380
  4939   001A4C                     u1381:
  4940   001A4C  EF59  F00D         	goto	l2490
  4941   001A50                     u1380:
  4942   001A50                     
  4943                           ;../dc_motor.c: 44:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  4944   001A50  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  4945   001A54  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4946   001A58  50DF               	movf	indf2,w,c
  4947   001A5A  6E11               	movwf	??_setMotorPWM^0,c
  4948   001A5C  5011               	movf	??_setMotorPWM^0,w,c
  4949   001A5E  6E01               	movwf	___wmul@multiplier^0,c
  4950   001A60  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4951   001A62  EE20 F007          	lfsr	2,7
  4952   001A66  500F               	movf	setMotorPWM@m^0,w,c
  4953   001A68  26D9               	addwf	fsr2l,f,c
  4954   001A6A  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4955   001A6C  22DA               	addwfc	fsr2h,f,c
  4956   001A6E  CFDE F003          	movff	postinc2,___wmul@multiplicand
  4957   001A72  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  4958   001A76  EC9D  F016         	call	___wmul	;wreg free
  4959   001A7A  C001  F007         	movff	?___wmul,___awdiv@dividend
  4960   001A7E  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  4961   001A82  0E00               	movlw	0
  4962   001A84  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  4963   001A86  0E64               	movlw	100
  4964   001A88  6E09               	movwf	___awdiv@divisor^0,c
  4965   001A8A  EC8E  F010         	call	___awdiv	;wreg free
  4966   001A8E  EE20 F007          	lfsr	2,7
  4967   001A92  500F               	movf	setMotorPWM@m^0,w,c
  4968   001A94  26D9               	addwf	fsr2l,f,c
  4969   001A96  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4970   001A98  22DA               	addwfc	fsr2h,f,c
  4971   001A9A  CFDE F012          	movff	postinc2,??_setMotorPWM+1
  4972   001A9E  CFDD F013          	movff	postdec2,??_setMotorPWM+2
  4973   001AA2  5007               	movf	?___awdiv^0,w,c
  4974   001AA4  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  4975   001AA6  6E18               	movwf	setMotorPWM@PWMduty^0,c
  4976   001AA8  5008               	movf	(?___awdiv+1)^0,w,c
  4977   001AAA  5813               	subwfb	(??_setMotorPWM+2)^0,w,c
  4978   001AAC  6E19               	movwf	(setMotorPWM@PWMduty+1)^0,c
  4979                           
  4980                           ;../dc_motor.c: 45:  }
  4981   001AAE  EF7C  F00D         	goto	l2492
  4982   001AB2                     l2490:
  4983                           
  4984                           ;../dc_motor.c: 48:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  4985   001AB2  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  4986   001AB6  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4987   001ABA  50DF               	movf	indf2,w,c
  4988   001ABC  6E11               	movwf	??_setMotorPWM^0,c
  4989   001ABE  5011               	movf	??_setMotorPWM^0,w,c
  4990   001AC0  6E01               	movwf	___wmul@multiplier^0,c
  4991   001AC2  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4992   001AC4  EE20 F007          	lfsr	2,7
  4993   001AC8  500F               	movf	setMotorPWM@m^0,w,c
  4994   001ACA  26D9               	addwf	fsr2l,f,c
  4995   001ACC  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4996   001ACE  22DA               	addwfc	fsr2h,f,c
  4997   001AD0  CFDE F003          	movff	postinc2,___wmul@multiplicand
  4998   001AD4  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  4999   001AD8  EC9D  F016         	call	___wmul	;wreg free
  5000   001ADC  C001  F007         	movff	?___wmul,___awdiv@dividend
  5001   001AE0  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  5002   001AE4  0E00               	movlw	0
  5003   001AE6  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  5004   001AE8  0E64               	movlw	100
  5005   001AEA  6E09               	movwf	___awdiv@divisor^0,c
  5006   001AEC  EC8E  F010         	call	___awdiv	;wreg free
  5007   001AF0  C007  F018         	movff	?___awdiv,setMotorPWM@PWMduty
  5008   001AF4  C008  F019         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  5009   001AF8                     l2492:
  5010                           
  5011                           ;../dc_motor.c: 51:  *(m->dutyHighByte) = PWMduty;
  5012   001AF8  EE20 F002          	lfsr	2,2
  5013   001AFC  500F               	movf	setMotorPWM@m^0,w,c
  5014   001AFE  26D9               	addwf	fsr2l,f,c
  5015   001B00  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5016   001B02  22DA               	addwfc	fsr2h,f,c
  5017   001B04  CFDE F011          	movff	postinc2,??_setMotorPWM
  5018   001B08  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5019   001B0C  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5020   001B10  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5021   001B14  C018  FFDF         	movff	setMotorPWM@PWMduty,indf2
  5022   001B18                     
  5023                           ;../dc_motor.c: 53:  if (m->direction){
  5024   001B18  EE20 F001          	lfsr	2,1
  5025   001B1C  500F               	movf	setMotorPWM@m^0,w,c
  5026   001B1E  26D9               	addwf	fsr2l,f,c
  5027   001B20  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5028   001B22  22DA               	addwfc	fsr2h,f,c
  5029   001B24  50DF               	movf	indf2,w,c
  5030   001B26  B4D8               	btfsc	status,2,c
  5031   001B28  EF98  F00D         	goto	u1391
  5032   001B2C  EF9A  F00D         	goto	u1390
  5033   001B30                     u1391:
  5034   001B30  EFCF  F00D         	goto	l2498
  5035   001B34                     u1390:
  5036   001B34                     
  5037                           ;../dc_motor.c: 54:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  5038   001B34  EE20 F004          	lfsr	2,4
  5039   001B38  500F               	movf	setMotorPWM@m^0,w,c
  5040   001B3A  26D9               	addwf	fsr2l,f,c
  5041   001B3C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5042   001B3E  22DA               	addwfc	fsr2h,f,c
  5043   001B40  CFDE F011          	movff	postinc2,??_setMotorPWM
  5044   001B44  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5045   001B48  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5046   001B4C  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5047   001B50  EE10 F004          	lfsr	1,4
  5048   001B54  500F               	movf	setMotorPWM@m^0,w,c
  5049   001B56  26E1               	addwf	fsr1l,f,c
  5050   001B58  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5051   001B5A  22E2               	addwfc	fsr1h,f,c
  5052   001B5C  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  5053   001B60  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  5054   001B64  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  5055   001B68  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  5056   001B6C  50E7               	movf	indf1,w,c
  5057   001B6E  6E15               	movwf	(??_setMotorPWM+4)^0,c
  5058   001B70  EE10 F006          	lfsr	1,6
  5059   001B74  500F               	movf	setMotorPWM@m^0,w,c
  5060   001B76  26E1               	addwf	fsr1l,f,c
  5061   001B78  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5062   001B7A  22E2               	addwfc	fsr1h,f,c
  5063   001B7C  50E7               	movf	indf1,w,c
  5064   001B7E  6E16               	movwf	(??_setMotorPWM+5)^0,c
  5065   001B80  0E01               	movlw	1
  5066   001B82  6E17               	movwf	(??_setMotorPWM+6)^0,c
  5067   001B84  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  5068   001B86  EFC7  F00D         	goto	u1404
  5069   001B8A                     u1405:
  5070   001B8A  90D8               	bcf	status,0,c
  5071   001B8C  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  5072   001B8E                     u1404:
  5073   001B8E  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  5074   001B90  EFC5  F00D         	goto	u1405
  5075   001B94  5017               	movf	(??_setMotorPWM+6)^0,w,c
  5076   001B96  1015               	iorwf	(??_setMotorPWM+4)^0,w,c
  5077   001B98  6EDF               	movwf	indf2,c
  5078                           
  5079                           ;../dc_motor.c: 55:  } else {
  5080   001B9A  EF03  F00E         	goto	l268
  5081   001B9E                     l2498:
  5082                           
  5083                           ;../dc_motor.c: 56:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  5084   001B9E  EE20 F004          	lfsr	2,4
  5085   001BA2  500F               	movf	setMotorPWM@m^0,w,c
  5086   001BA4  26D9               	addwf	fsr2l,f,c
  5087   001BA6  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5088   001BA8  22DA               	addwfc	fsr2h,f,c
  5089   001BAA  CFDE F011          	movff	postinc2,??_setMotorPWM
  5090   001BAE  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5091   001BB2  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5092   001BB6  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5093   001BBA  EE10 F004          	lfsr	1,4
  5094   001BBE  500F               	movf	setMotorPWM@m^0,w,c
  5095   001BC0  26E1               	addwf	fsr1l,f,c
  5096   001BC2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5097   001BC4  22E2               	addwfc	fsr1h,f,c
  5098   001BC6  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  5099   001BCA  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  5100   001BCE  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  5101   001BD2  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  5102   001BD6  50E7               	movf	indf1,w,c
  5103   001BD8  6E15               	movwf	(??_setMotorPWM+4)^0,c
  5104   001BDA  EE10 F006          	lfsr	1,6
  5105   001BDE  500F               	movf	setMotorPWM@m^0,w,c
  5106   001BE0  26E1               	addwf	fsr1l,f,c
  5107   001BE2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5108   001BE4  22E2               	addwfc	fsr1h,f,c
  5109   001BE6  50E7               	movf	indf1,w,c
  5110   001BE8  6E16               	movwf	(??_setMotorPWM+5)^0,c
  5111   001BEA  0E01               	movlw	1
  5112   001BEC  6E17               	movwf	(??_setMotorPWM+6)^0,c
  5113   001BEE  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  5114   001BF0  EFFC  F00D         	goto	u1414
  5115   001BF4                     u1415:
  5116   001BF4  90D8               	bcf	status,0,c
  5117   001BF6  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  5118   001BF8                     u1414:
  5119   001BF8  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  5120   001BFA  EFFA  F00D         	goto	u1415
  5121   001BFE  5017               	movf	(??_setMotorPWM+6)^0,w,c
  5122   001C00  0AFF               	xorlw	255
  5123   001C02  1415               	andwf	(??_setMotorPWM+4)^0,w,c
  5124   001C04  6EDF               	movwf	indf2,c
  5125   001C06                     l268:
  5126   001C06  0012               	return		;funcret
  5127   001C08                     __end_of_setMotorPWM:
  5128                           	callstack 0
  5129                           
  5130 ;; *************** function ___wmul *****************
  5131 ;; Defined at:
  5132 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;  multiplier      2    0[COMRAM] unsigned int 
  5135 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;  product         2    4[COMRAM] unsigned int 
  5138 ;; Return value:  Size  Location     Type
  5139 ;;                  2    0[COMRAM] unsigned int 
  5140 ;; Registers used:
  5141 ;;		wreg, status,2, status,0, prodl, prodh
  5142 ;; Tracked objects:
  5143 ;;		On entry : 0/0
  5144 ;;		On exit  : 0/0
  5145 ;;		Unchanged: 0/0
  5146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5147 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5148 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5150 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5151 ;;Total ram usage:        6 bytes
  5152 ;; Hardware stack levels used: 1
  5153 ;; Hardware stack levels required when called: 1
  5154 ;; This function calls:
  5155 ;;		Nothing
  5156 ;; This function is called by:
  5157 ;;		_setMotorPWM
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           	psect	text25
  5162   002D3A                     __ptext25:
  5163                           	callstack 0
  5164   002D3A                     ___wmul:
  5165                           	callstack 27
  5166   002D3A  5001               	movf	___wmul@multiplier^0,w,c
  5167   002D3C  0203               	mulwf	___wmul@multiplicand^0,c
  5168   002D3E  CFF3 F005          	movff	prodl,___wmul@product
  5169   002D42  CFF4 F006          	movff	prodh,___wmul@product+1
  5170   002D46  5001               	movf	___wmul@multiplier^0,w,c
  5171   002D48  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5172   002D4A  50F3               	movf	243,w,c
  5173   002D4C  2606               	addwf	(___wmul@product+1)^0,f,c
  5174   002D4E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5175   002D50  0203               	mulwf	___wmul@multiplicand^0,c
  5176   002D52  50F3               	movf	243,w,c
  5177   002D54  2606               	addwf	(___wmul@product+1)^0,f,c
  5178   002D56  C005  F001         	movff	___wmul@product,?___wmul
  5179   002D5A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5180   002D5E  0012               	return		;funcret
  5181   002D60                     __end_of___wmul:
  5182                           	callstack 0
  5183                           
  5184 ;; *************** function ___awdiv *****************
  5185 ;; Defined at:
  5186 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;  dividend        2    6[COMRAM] int 
  5189 ;;  divisor         2    8[COMRAM] int 
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  quotient        2   12[COMRAM] int 
  5192 ;;  sign            1   11[COMRAM] unsigned char 
  5193 ;;  counter         1   10[COMRAM] unsigned char 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;                  2    6[COMRAM] int 
  5196 ;; Registers used:
  5197 ;;		wreg, status,2, status,0
  5198 ;; Tracked objects:
  5199 ;;		On entry : 0/0
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5203 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5204 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5206 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5207 ;;Total ram usage:        8 bytes
  5208 ;; Hardware stack levels used: 1
  5209 ;; Hardware stack levels required when called: 1
  5210 ;; This function calls:
  5211 ;;		Nothing
  5212 ;; This function is called by:
  5213 ;;		_setMotorPWM
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           	psect	text26
  5218   00211C                     __ptext26:
  5219                           	callstack 0
  5220   00211C                     ___awdiv:
  5221                           	callstack 27
  5222   00211C  0E00               	movlw	0
  5223   00211E  6E0C               	movwf	___awdiv@sign^0,c
  5224   002120  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
  5225   002122  EF97  F010         	goto	u1200
  5226   002126  EF95  F010         	goto	u1201
  5227   00212A                     u1201:
  5228   00212A  EF9D  F010         	goto	l2368
  5229   00212E                     u1200:
  5230   00212E  6C09               	negf	___awdiv@divisor^0,c
  5231   002130  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  5232   002132  B0D8               	btfsc	status,0,c
  5233   002134  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  5234   002136  0E01               	movlw	1
  5235   002138  6E0C               	movwf	___awdiv@sign^0,c
  5236   00213A                     l2368:
  5237   00213A  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
  5238   00213C  EFA4  F010         	goto	u1210
  5239   002140  EFA2  F010         	goto	u1211
  5240   002144                     u1211:
  5241   002144  EFAA  F010         	goto	l2374
  5242   002148                     u1210:
  5243   002148  6C07               	negf	___awdiv@dividend^0,c
  5244   00214A  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  5245   00214C  B0D8               	btfsc	status,0,c
  5246   00214E  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  5247   002150  0E01               	movlw	1
  5248   002152  1A0C               	xorwf	___awdiv@sign^0,f,c
  5249   002154                     l2374:
  5250   002154  0E00               	movlw	0
  5251   002156  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  5252   002158  0E00               	movlw	0
  5253   00215A  6E0D               	movwf	___awdiv@quotient^0,c
  5254   00215C  5009               	movf	___awdiv@divisor^0,w,c
  5255   00215E  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  5256   002160  B4D8               	btfsc	status,2,c
  5257   002162  EFB5  F010         	goto	u1221
  5258   002166  EFB7  F010         	goto	u1220
  5259   00216A                     u1221:
  5260   00216A  EFDF  F010         	goto	l2396
  5261   00216E                     u1220:
  5262   00216E  0E01               	movlw	1
  5263   002170  6E0B               	movwf	___awdiv@counter^0,c
  5264   002172  EFBF  F010         	goto	l2382
  5265   002176                     l2380:
  5266   002176  90D8               	bcf	status,0,c
  5267   002178  3609               	rlcf	___awdiv@divisor^0,f,c
  5268   00217A  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  5269   00217C  2A0B               	incf	___awdiv@counter^0,f,c
  5270   00217E                     l2382:
  5271   00217E  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  5272   002180  EFC4  F010         	goto	u1231
  5273   002184  EFC6  F010         	goto	u1230
  5274   002188                     u1231:
  5275   002188  EFBB  F010         	goto	l2380
  5276   00218C                     u1230:
  5277   00218C                     l2384:
  5278   00218C  90D8               	bcf	status,0,c
  5279   00218E  360D               	rlcf	___awdiv@quotient^0,f,c
  5280   002190  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  5281   002192  5009               	movf	___awdiv@divisor^0,w,c
  5282   002194  5C07               	subwf	___awdiv@dividend^0,w,c
  5283   002196  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5284   002198  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  5285   00219A  A0D8               	btfss	status,0,c
  5286   00219C  EFD2  F010         	goto	u1241
  5287   0021A0  EFD4  F010         	goto	u1240
  5288   0021A4                     u1241:
  5289   0021A4  EFD9  F010         	goto	l2392
  5290   0021A8                     u1240:
  5291   0021A8  5009               	movf	___awdiv@divisor^0,w,c
  5292   0021AA  5E07               	subwf	___awdiv@dividend^0,f,c
  5293   0021AC  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5294   0021AE  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  5295   0021B0  800D               	bsf	___awdiv@quotient^0,0,c
  5296   0021B2                     l2392:
  5297   0021B2  90D8               	bcf	status,0,c
  5298   0021B4  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  5299   0021B6  3209               	rrcf	___awdiv@divisor^0,f,c
  5300   0021B8  2E0B               	decfsz	___awdiv@counter^0,f,c
  5301   0021BA  EFC6  F010         	goto	l2384
  5302   0021BE                     l2396:
  5303   0021BE  500C               	movf	___awdiv@sign^0,w,c
  5304   0021C0  B4D8               	btfsc	status,2,c
  5305   0021C2  EFE5  F010         	goto	u1251
  5306   0021C6  EFE7  F010         	goto	u1250
  5307   0021CA                     u1251:
  5308   0021CA  EFEB  F010         	goto	l2400
  5309   0021CE                     u1250:
  5310   0021CE  6C0D               	negf	___awdiv@quotient^0,c
  5311   0021D0  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  5312   0021D2  B0D8               	btfsc	status,0,c
  5313   0021D4  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  5314   0021D6                     l2400:
  5315   0021D6  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  5316   0021DA  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  5317   0021DE  0012               	return		;funcret
  5318   0021E0                     __end_of___awdiv:
  5319                           	callstack 0
  5320                           
  5321 ;; *************** function _initUSART4 *****************
  5322 ;; Defined at:
  5323 ;;		line 5 in file "../serial.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;		None
  5326 ;; Auto vars:     Size  Location     Type
  5327 ;;		None
  5328 ;; Return value:  Size  Location     Type
  5329 ;;                  1    wreg      void 
  5330 ;; Registers used:
  5331 ;;		wreg, status,2
  5332 ;; Tracked objects:
  5333 ;;		On entry : 0/0
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5341 ;;Total ram usage:        0 bytes
  5342 ;; Hardware stack levels used: 1
  5343 ;; Hardware stack levels required when called: 1
  5344 ;; This function calls:
  5345 ;;		Nothing
  5346 ;; This function is called by:
  5347 ;;		_main
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text27
  5352   002DA0                     __ptext27:
  5353                           	callstack 0
  5354   002DA0                     _initUSART4:
  5355                           	callstack 29
  5356   002DA0                     
  5357                           ;../serial.c: 9:     RC0PPS = 0x12;
  5358   002DA0  0E12               	movlw	18
  5359   002DA2  010E               	movlb	14	; () banked
  5360   002DA4  6F62               	movwf	98,b	;volatile
  5361                           
  5362                           ;../serial.c: 10:     RX4PPS = 0x11;
  5363   002DA6  0E11               	movlw	17
  5364   002DA8  6F15               	movwf	21,b	;volatile
  5365   002DAA                     
  5366                           ; BSR set to: 14
  5367                           ;../serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  5368   002DAA  97E9               	bcf	233,3,b	;volatile
  5369   002DAC                     
  5370                           ; BSR set to: 14
  5371                           ;../serial.c: 13:     TX4STAbits.BRGH = 0;
  5372   002DAC  95E8               	bcf	232,2,b	;volatile
  5373                           
  5374                           ;../serial.c: 14:     SP4BRGL = 103;
  5375   002DAE  0E67               	movlw	103
  5376   002DB0  6FE5               	movwf	229,b	;volatile
  5377                           
  5378                           ;../serial.c: 15:     SP4BRGH = 0;
  5379   002DB2  0E00               	movlw	0
  5380   002DB4  6FE6               	movwf	230,b	;volatile
  5381   002DB6                     
  5382                           ; BSR set to: 14
  5383                           ;../serial.c: 17:     RC4STAbits.CREN = 1;
  5384   002DB6  89E7               	bsf	231,4,b	;volatile
  5385   002DB8                     
  5386                           ; BSR set to: 14
  5387                           ;../serial.c: 18:     TX4STAbits.TXEN = 1;
  5388   002DB8  8BE8               	bsf	232,5,b	;volatile
  5389   002DBA                     
  5390                           ; BSR set to: 14
  5391                           ;../serial.c: 19:     RC4STAbits.SPEN = 1;
  5392   002DBA  8FE7               	bsf	231,7,b	;volatile
  5393   002DBC                     
  5394                           ; BSR set to: 14
  5395   002DBC  0012               	return		;funcret
  5396   002DBE                     __end_of_initUSART4:
  5397                           	callstack 0
  5398                           
  5399 ;; *************** function _initDCmotorsPWM *****************
  5400 ;; Defined at:
  5401 ;;		line 5 in file "../dc_motor.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;  PWMperiod       2    0[COMRAM] int 
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;		None
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  1    wreg      void 
  5408 ;; Registers used:
  5409 ;;		wreg, status,2
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5415 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5418 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5419 ;;Total ram usage:        2 bytes
  5420 ;; Hardware stack levels used: 1
  5421 ;; Hardware stack levels required when called: 1
  5422 ;; This function calls:
  5423 ;;		Nothing
  5424 ;; This function is called by:
  5425 ;;		_main
  5426 ;; This function uses a non-reentrant model
  5427 ;;
  5428                           
  5429                           	psect	text28
  5430   002BCA                     __ptext28:
  5431                           	callstack 0
  5432   002BCA                     _initDCmotorsPWM:
  5433                           	callstack 29
  5434   002BCA                     
  5435                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  5436   002BCA  9485               	bcf	133,2,c	;volatile
  5437                           
  5438                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  5439   002BCC  9885               	bcf	133,4,c	;volatile
  5440                           
  5441                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  5442   002BCE  9E83               	bcf	131,7,c	;volatile
  5443                           
  5444                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  5445   002BD0  9C87               	bcf	135,6,c	;volatile
  5446                           
  5447                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  5448   002BD2  947D               	bcf	125,2,c	;volatile
  5449                           
  5450                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  5451   002BD4  987D               	bcf	125,4,c	;volatile
  5452                           
  5453                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  5454   002BD6  9E7B               	bcf	123,7,c	;volatile
  5455                           
  5456                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  5457   002BD8  9C7F               	bcf	127,6,c	;volatile
  5458   002BDA                     
  5459                           ;../dc_motor.c: 17:     T2CONbits.CKPS=0b0011;
  5460   002BDA  50BD               	movf	189,w,c	;volatile
  5461   002BDC  0B8F               	andlw	-113
  5462   002BDE  0930               	iorlw	48
  5463   002BE0  6EBD               	movwf	189,c	;volatile
  5464                           
  5465                           ;../dc_motor.c: 18:     T2HLTbits.MODE=0b00000;
  5466   002BE2  0EE0               	movlw	-32
  5467   002BE4  16BE               	andwf	190,f,c	;volatile
  5468                           
  5469                           ;../dc_motor.c: 19:     T2CLKCONbits.CS=0b0001;
  5470   002BE6  50BF               	movf	191,w,c	;volatile
  5471   002BE8  0BF0               	andlw	-16
  5472   002BEA  0901               	iorlw	1
  5473   002BEC  6EBF               	movwf	191,c	;volatile
  5474   002BEE                     
  5475                           ;../dc_motor.c: 23:     T2PR=PWMperiod;
  5476   002BEE  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5477   002BF2                     
  5478                           ;../dc_motor.c: 24:     T2CONbits.ON=1;
  5479   002BF2  8EBD               	bsf	189,7,c	;volatile
  5480                           
  5481                           ;../dc_motor.c: 26:     RE2PPS=0x0A;
  5482   002BF4  0E0A               	movlw	10
  5483   002BF6  010E               	movlb	14	; () banked
  5484   002BF8  6F74               	movwf	116,b	;volatile
  5485                           
  5486                           ;../dc_motor.c: 27:     RC7PPS=0x0B;
  5487   002BFA  0E0B               	movlw	11
  5488   002BFC  6F69               	movwf	105,b	;volatile
  5489                           
  5490                           ;../dc_motor.c: 29:     PWM6DCH=0;
  5491   002BFE  0E00               	movlw	0
  5492   002C00  6EA3               	movwf	163,c	;volatile
  5493                           
  5494                           ;../dc_motor.c: 30:     PWM7DCH=0;
  5495   002C02  0E00               	movlw	0
  5496   002C04  6EA0               	movwf	160,c	;volatile
  5497   002C06                     
  5498                           ; BSR set to: 14
  5499                           ;../dc_motor.c: 32:     PWM6CONbits.EN = 1;
  5500   002C06  8EA4               	bsf	164,7,c	;volatile
  5501   002C08                     
  5502                           ; BSR set to: 14
  5503                           ;../dc_motor.c: 33:     PWM7CONbits.EN = 1;
  5504   002C08  8EA1               	bsf	161,7,c	;volatile
  5505   002C0A                     
  5506                           ; BSR set to: 14
  5507   002C0A  0012               	return		;funcret
  5508   002C0C                     __end_of_initDCmotorsPWM:
  5509                           	callstack 0
  5510                           
  5511 ;; *************** function _color_read *****************
  5512 ;; Defined at:
  5513 ;;		line 111 in file "../color.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;  rgb             2   11[COMRAM] PTR struct RGB_val
  5516 ;;		 -> main@RGB_recorded(8), main@RGB_calibrated(8), 
  5517 ;; Auto vars:     Size  Location     Type
  5518 ;;		None
  5519 ;; Return value:  Size  Location     Type
  5520 ;;                  1    wreg      void 
  5521 ;; Registers used:
  5522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5523 ;; Tracked objects:
  5524 ;;		On entry : 0/0
  5525 ;;		On exit  : 0/0
  5526 ;;		Unchanged: 0/0
  5527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5528 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5530 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5531 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5532 ;;Total ram usage:        4 bytes
  5533 ;; Hardware stack levels used: 1
  5534 ;; Hardware stack levels required when called: 4
  5535 ;; This function calls:
  5536 ;;		_color_read_Blue
  5537 ;;		_color_read_Green
  5538 ;;		_color_read_Luminosity
  5539 ;;		_color_read_Red
  5540 ;; This function is called by:
  5541 ;;		_main
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           	psect	text29
  5546   00229E                     __ptext29:
  5547                           	callstack 0
  5548   00229E                     _color_read:
  5549                           	callstack 26
  5550   00229E                     
  5551                           ;../color.c: 111: void color_read(struct RGB_val *rgb);../color.c: 112: {;../color.c: 11
      +                          3:     rgb->L = color_read_Luminosity();
  5552   00229E  EC4B  F015         	call	_color_read_Luminosity	;wreg free
  5553   0022A2  C00C  FFD9         	movff	color_read@rgb,fsr2l
  5554   0022A6  C00D  FFDA         	movff	color_read@rgb+1,fsr2h
  5555   0022AA  C005  FFDE         	movff	?_color_read_Luminosity,postinc2
  5556   0022AE  C006  FFDD         	movff	?_color_read_Luminosity+1,postdec2
  5557   0022B2                     
  5558                           ;../color.c: 114:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5559   0022B2  0E09               	movlw	9
  5560   0022B4  6E0F               	movwf	(??_color_read+1)^0,c
  5561   0022B6  0E1E               	movlw	30
  5562   0022B8  6E0E               	movwf	??_color_read^0,c
  5563   0022BA  0EE4               	movlw	228
  5564   0022BC                     u2167:
  5565   0022BC  2EE8               	decfsz	wreg,f,c
  5566   0022BE  D7FE               	bra	u2167
  5567   0022C0  2E0E               	decfsz	??_color_read^0,f,c
  5568   0022C2  D7FC               	bra	u2167
  5569   0022C4  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5570   0022C6  D7FA               	bra	u2167
  5571   0022C8  D000               	nop2	
  5572   0022CA                     
  5573                           ;../color.c: 115:     rgb->R = color_read_Red();
  5574   0022CA  EC23  F015         	call	_color_read_Red	;wreg free
  5575   0022CE  EE20 F002          	lfsr	2,2
  5576   0022D2  500C               	movf	color_read@rgb^0,w,c
  5577   0022D4  26D9               	addwf	fsr2l,f,c
  5578   0022D6  500D               	movf	(color_read@rgb+1)^0,w,c
  5579   0022D8  22DA               	addwfc	fsr2h,f,c
  5580   0022DA  C005  FFDE         	movff	?_color_read_Red,postinc2
  5581   0022DE  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  5582                           
  5583                           ;../color.c: 116:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5584   0022E2  0E09               	movlw	9
  5585   0022E4  6E0F               	movwf	(??_color_read+1)^0,c
  5586   0022E6  0E1E               	movlw	30
  5587   0022E8  6E0E               	movwf	??_color_read^0,c
  5588   0022EA  0EE4               	movlw	228
  5589   0022EC                     u2177:
  5590   0022EC  2EE8               	decfsz	wreg,f,c
  5591   0022EE  D7FE               	bra	u2177
  5592   0022F0  2E0E               	decfsz	??_color_read^0,f,c
  5593   0022F2  D7FC               	bra	u2177
  5594   0022F4  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5595   0022F6  D7FA               	bra	u2177
  5596   0022F8  D000               	nop2	
  5597   0022FA                     
  5598                           ;../color.c: 117:     rgb->G = color_read_Green();
  5599   0022FA  EC73  F015         	call	_color_read_Green	;wreg free
  5600   0022FE  EE20 F004          	lfsr	2,4
  5601   002302  500C               	movf	color_read@rgb^0,w,c
  5602   002304  26D9               	addwf	fsr2l,f,c
  5603   002306  500D               	movf	(color_read@rgb+1)^0,w,c
  5604   002308  22DA               	addwfc	fsr2h,f,c
  5605   00230A  C005  FFDE         	movff	?_color_read_Green,postinc2
  5606   00230E  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  5607   002312                     
  5608                           ;../color.c: 118:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5609   002312  0E09               	movlw	9
  5610   002314  6E0F               	movwf	(??_color_read+1)^0,c
  5611   002316  0E1E               	movlw	30
  5612   002318  6E0E               	movwf	??_color_read^0,c
  5613   00231A  0EE4               	movlw	228
  5614   00231C                     u2187:
  5615   00231C  2EE8               	decfsz	wreg,f,c
  5616   00231E  D7FE               	bra	u2187
  5617   002320  2E0E               	decfsz	??_color_read^0,f,c
  5618   002322  D7FC               	bra	u2187
  5619   002324  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5620   002326  D7FA               	bra	u2187
  5621   002328  D000               	nop2	
  5622                           
  5623                           ;../color.c: 119:     rgb->B = color_read_Blue();
  5624   00232A  EC9B  F015         	call	_color_read_Blue	;wreg free
  5625   00232E  EE20 F006          	lfsr	2,6
  5626   002332  500C               	movf	color_read@rgb^0,w,c
  5627   002334  26D9               	addwf	fsr2l,f,c
  5628   002336  500D               	movf	(color_read@rgb+1)^0,w,c
  5629   002338  22DA               	addwfc	fsr2h,f,c
  5630   00233A  C005  FFDE         	movff	?_color_read_Blue,postinc2
  5631   00233E  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  5632   002342  0012               	return		;funcret
  5633   002344                     __end_of_color_read:
  5634                           	callstack 0
  5635                           
  5636 ;; *************** function _color_read_Red *****************
  5637 ;; Defined at:
  5638 ;;		line 69 in file "../color.c"
  5639 ;; Parameters:    Size  Location     Type
  5640 ;;		None
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;  tmp             2    9[COMRAM] unsigned int 
  5643 ;; Return value:  Size  Location     Type
  5644 ;;                  2    4[COMRAM] unsigned int 
  5645 ;; Registers used:
  5646 ;;		wreg, status,2, status,0, cstack
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5652 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5654 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5655 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5656 ;;Total ram usage:        7 bytes
  5657 ;; Hardware stack levels used: 1
  5658 ;; Hardware stack levels required when called: 3
  5659 ;; This function calls:
  5660 ;;		_I2C_2_Master_Read
  5661 ;;		_I2C_2_Master_RepStart
  5662 ;;		_I2C_2_Master_Start
  5663 ;;		_I2C_2_Master_Stop
  5664 ;;		_I2C_2_Master_Write
  5665 ;; This function is called by:
  5666 ;;		_color_read
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           	psect	text30
  5671   002A46                     __ptext30:
  5672                           	callstack 0
  5673   002A46                     _color_read_Red:
  5674                           	callstack 26
  5675   002A46                     
  5676                           ;../color.c: 71:  unsigned int tmp;;../color.c: 72:  I2C_2_Master_Start();
  5677   002A46  EC06  F017         	call	_I2C_2_Master_Start	;wreg free
  5678                           
  5679                           ;../color.c: 73:  I2C_2_Master_Write(0x52 | 0x00);
  5680   002A4A  0E52               	movlw	82
  5681   002A4C  ECF6  F016         	call	_I2C_2_Master_Write
  5682                           
  5683                           ;../color.c: 74:  I2C_2_Master_Write(0xA0 | 0x16);
  5684   002A50  0EB6               	movlw	182
  5685   002A52  ECF6  F016         	call	_I2C_2_Master_Write
  5686                           
  5687                           ;../color.c: 75:  I2C_2_Master_RepStart();
  5688   002A56  ECFC  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5689                           
  5690                           ;../color.c: 76:  I2C_2_Master_Write(0x52 | 0x01);
  5691   002A5A  0E53               	movlw	83
  5692   002A5C  ECF6  F016         	call	_I2C_2_Master_Write
  5693                           
  5694                           ;../color.c: 77:  tmp=I2C_2_Master_Read(1);
  5695   002A60  0E01               	movlw	1
  5696   002A62  EC06  F016         	call	_I2C_2_Master_Read
  5697   002A66  6E07               	movwf	??_color_read_Red^0,c
  5698   002A68  5007               	movf	??_color_read_Red^0,w,c
  5699   002A6A  6E0A               	movwf	color_read_Red@tmp^0,c
  5700   002A6C  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  5701                           
  5702                           ;../color.c: 78:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5703   002A6E  0E00               	movlw	0
  5704   002A70  EC06  F016         	call	_I2C_2_Master_Read
  5705   002A74  6E07               	movwf	??_color_read_Red^0,c
  5706   002A76  5007               	movf	??_color_read_Red^0,w,c
  5707   002A78  6E09               	movwf	(??_color_read_Red+2)^0,c
  5708   002A7A  6A08               	clrf	(??_color_read_Red+1)^0,c
  5709   002A7C  500A               	movf	color_read_Red@tmp^0,w,c
  5710   002A7E  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  5711   002A80  6E0A               	movwf	color_read_Red@tmp^0,c
  5712   002A82  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  5713   002A84  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  5714   002A86  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5715                           
  5716                           ;../color.c: 79:  I2C_2_Master_Stop();
  5717   002A88  EC01  F017         	call	_I2C_2_Master_Stop	;wreg free
  5718   002A8C                     
  5719                           ;../color.c: 80:  return tmp;
  5720   002A8C  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5721   002A90  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5722   002A94  0012               	return		;funcret
  5723   002A96                     __end_of_color_read_Red:
  5724                           	callstack 0
  5725                           
  5726 ;; *************** function _color_read_Luminosity *****************
  5727 ;; Defined at:
  5728 ;;		line 55 in file "../color.c"
  5729 ;; Parameters:    Size  Location     Type
  5730 ;;		None
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;  tmp             2    9[COMRAM] unsigned int 
  5733 ;; Return value:  Size  Location     Type
  5734 ;;                  2    4[COMRAM] unsigned int 
  5735 ;; Registers used:
  5736 ;;		wreg, status,2, status,0, cstack
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/0
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5742 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5743 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5744 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5745 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5746 ;;Total ram usage:        7 bytes
  5747 ;; Hardware stack levels used: 1
  5748 ;; Hardware stack levels required when called: 3
  5749 ;; This function calls:
  5750 ;;		_I2C_2_Master_Read
  5751 ;;		_I2C_2_Master_RepStart
  5752 ;;		_I2C_2_Master_Start
  5753 ;;		_I2C_2_Master_Stop
  5754 ;;		_I2C_2_Master_Write
  5755 ;; This function is called by:
  5756 ;;		_color_read
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           	psect	text31
  5761   002A96                     __ptext31:
  5762                           	callstack 0
  5763   002A96                     _color_read_Luminosity:
  5764                           	callstack 26
  5765   002A96                     
  5766                           ;../color.c: 57:  unsigned int tmp;;../color.c: 58:  I2C_2_Master_Start();
  5767   002A96  EC06  F017         	call	_I2C_2_Master_Start	;wreg free
  5768                           
  5769                           ;../color.c: 59:  I2C_2_Master_Write(0x52 | 0x00);
  5770   002A9A  0E52               	movlw	82
  5771   002A9C  ECF6  F016         	call	_I2C_2_Master_Write
  5772                           
  5773                           ;../color.c: 60:  I2C_2_Master_Write(0xA0 | 0x14);
  5774   002AA0  0EB4               	movlw	180
  5775   002AA2  ECF6  F016         	call	_I2C_2_Master_Write
  5776                           
  5777                           ;../color.c: 61:  I2C_2_Master_RepStart();
  5778   002AA6  ECFC  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5779                           
  5780                           ;../color.c: 62:  I2C_2_Master_Write(0x52 | 0x01);
  5781   002AAA  0E53               	movlw	83
  5782   002AAC  ECF6  F016         	call	_I2C_2_Master_Write
  5783                           
  5784                           ;../color.c: 63:  tmp=I2C_2_Master_Read(1);
  5785   002AB0  0E01               	movlw	1
  5786   002AB2  EC06  F016         	call	_I2C_2_Master_Read
  5787   002AB6  6E07               	movwf	??_color_read_Luminosity^0,c
  5788   002AB8  5007               	movf	??_color_read_Luminosity^0,w,c
  5789   002ABA  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5790   002ABC  6A0B               	clrf	(color_read_Luminosity@tmp+1)^0,c
  5791                           
  5792                           ;../color.c: 64:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5793   002ABE  0E00               	movlw	0
  5794   002AC0  EC06  F016         	call	_I2C_2_Master_Read
  5795   002AC4  6E07               	movwf	??_color_read_Luminosity^0,c
  5796   002AC6  5007               	movf	??_color_read_Luminosity^0,w,c
  5797   002AC8  6E09               	movwf	(??_color_read_Luminosity+2)^0,c
  5798   002ACA  6A08               	clrf	(??_color_read_Luminosity+1)^0,c
  5799   002ACC  500A               	movf	color_read_Luminosity@tmp^0,w,c
  5800   002ACE  1008               	iorwf	(??_color_read_Luminosity+1)^0,w,c
  5801   002AD0  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5802   002AD2  500B               	movf	(color_read_Luminosity@tmp+1)^0,w,c
  5803   002AD4  1009               	iorwf	(??_color_read_Luminosity+2)^0,w,c
  5804   002AD6  6E0B               	movwf	(color_read_Luminosity@tmp+1)^0,c
  5805                           
  5806                           ;../color.c: 65:  I2C_2_Master_Stop();
  5807   002AD8  EC01  F017         	call	_I2C_2_Master_Stop	;wreg free
  5808   002ADC                     
  5809                           ;../color.c: 66:  return tmp;
  5810   002ADC  C00A  F005         	movff	color_read_Luminosity@tmp,?_color_read_Luminosity
  5811   002AE0  C00B  F006         	movff	color_read_Luminosity@tmp+1,?_color_read_Luminosity+1
  5812   002AE4  0012               	return		;funcret
  5813   002AE6                     __end_of_color_read_Luminosity:
  5814                           	callstack 0
  5815                           
  5816 ;; *************** function _color_read_Green *****************
  5817 ;; Defined at:
  5818 ;;		line 83 in file "../color.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;		None
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;  tmp             2    9[COMRAM] unsigned int 
  5823 ;; Return value:  Size  Location     Type
  5824 ;;                  2    4[COMRAM] unsigned int 
  5825 ;; Registers used:
  5826 ;;		wreg, status,2, status,0, cstack
  5827 ;; Tracked objects:
  5828 ;;		On entry : 0/0
  5829 ;;		On exit  : 0/0
  5830 ;;		Unchanged: 0/0
  5831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5832 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5833 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5834 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5835 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5836 ;;Total ram usage:        7 bytes
  5837 ;; Hardware stack levels used: 1
  5838 ;; Hardware stack levels required when called: 3
  5839 ;; This function calls:
  5840 ;;		_I2C_2_Master_Read
  5841 ;;		_I2C_2_Master_RepStart
  5842 ;;		_I2C_2_Master_Start
  5843 ;;		_I2C_2_Master_Stop
  5844 ;;		_I2C_2_Master_Write
  5845 ;; This function is called by:
  5846 ;;		_color_read
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text32
  5851   002AE6                     __ptext32:
  5852                           	callstack 0
  5853   002AE6                     _color_read_Green:
  5854                           	callstack 26
  5855   002AE6                     
  5856                           ;../color.c: 85:  unsigned int tmp;;../color.c: 86:  I2C_2_Master_Start();
  5857   002AE6  EC06  F017         	call	_I2C_2_Master_Start	;wreg free
  5858                           
  5859                           ;../color.c: 87:  I2C_2_Master_Write(0x52 | 0x00);
  5860   002AEA  0E52               	movlw	82
  5861   002AEC  ECF6  F016         	call	_I2C_2_Master_Write
  5862                           
  5863                           ;../color.c: 88:  I2C_2_Master_Write(0xA0 | 0x18);
  5864   002AF0  0EB8               	movlw	184
  5865   002AF2  ECF6  F016         	call	_I2C_2_Master_Write
  5866                           
  5867                           ;../color.c: 89:  I2C_2_Master_RepStart();
  5868   002AF6  ECFC  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5869                           
  5870                           ;../color.c: 90:  I2C_2_Master_Write(0x52 | 0x01);
  5871   002AFA  0E53               	movlw	83
  5872   002AFC  ECF6  F016         	call	_I2C_2_Master_Write
  5873                           
  5874                           ;../color.c: 91:  tmp=I2C_2_Master_Read(1);
  5875   002B00  0E01               	movlw	1
  5876   002B02  EC06  F016         	call	_I2C_2_Master_Read
  5877   002B06  6E07               	movwf	??_color_read_Green^0,c
  5878   002B08  5007               	movf	??_color_read_Green^0,w,c
  5879   002B0A  6E0A               	movwf	color_read_Green@tmp^0,c
  5880   002B0C  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5881                           
  5882                           ;../color.c: 92:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5883   002B0E  0E00               	movlw	0
  5884   002B10  EC06  F016         	call	_I2C_2_Master_Read
  5885   002B14  6E07               	movwf	??_color_read_Green^0,c
  5886   002B16  5007               	movf	??_color_read_Green^0,w,c
  5887   002B18  6E09               	movwf	(??_color_read_Green+2)^0,c
  5888   002B1A  6A08               	clrf	(??_color_read_Green+1)^0,c
  5889   002B1C  500A               	movf	color_read_Green@tmp^0,w,c
  5890   002B1E  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5891   002B20  6E0A               	movwf	color_read_Green@tmp^0,c
  5892   002B22  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5893   002B24  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5894   002B26  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5895                           
  5896                           ;../color.c: 93:  I2C_2_Master_Stop();
  5897   002B28  EC01  F017         	call	_I2C_2_Master_Stop	;wreg free
  5898   002B2C                     
  5899                           ;../color.c: 94:  return tmp;
  5900   002B2C  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5901   002B30  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5902   002B34  0012               	return		;funcret
  5903   002B36                     __end_of_color_read_Green:
  5904                           	callstack 0
  5905                           
  5906 ;; *************** function _color_read_Blue *****************
  5907 ;; Defined at:
  5908 ;;		line 97 in file "../color.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;		None
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;  tmp             2    9[COMRAM] unsigned int 
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  2    4[COMRAM] unsigned int 
  5915 ;; Registers used:
  5916 ;;		wreg, status,2, status,0, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5922 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5923 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5924 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5925 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5926 ;;Total ram usage:        7 bytes
  5927 ;; Hardware stack levels used: 1
  5928 ;; Hardware stack levels required when called: 3
  5929 ;; This function calls:
  5930 ;;		_I2C_2_Master_Read
  5931 ;;		_I2C_2_Master_RepStart
  5932 ;;		_I2C_2_Master_Start
  5933 ;;		_I2C_2_Master_Stop
  5934 ;;		_I2C_2_Master_Write
  5935 ;; This function is called by:
  5936 ;;		_color_read
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text33
  5941   002B36                     __ptext33:
  5942                           	callstack 0
  5943   002B36                     _color_read_Blue:
  5944                           	callstack 26
  5945   002B36                     
  5946                           ;../color.c: 99:  unsigned int tmp;;../color.c: 100:  I2C_2_Master_Start();
  5947   002B36  EC06  F017         	call	_I2C_2_Master_Start	;wreg free
  5948                           
  5949                           ;../color.c: 101:  I2C_2_Master_Write(0x52 | 0x00);
  5950   002B3A  0E52               	movlw	82
  5951   002B3C  ECF6  F016         	call	_I2C_2_Master_Write
  5952                           
  5953                           ;../color.c: 102:  I2C_2_Master_Write(0xA0 | 0x1A);
  5954   002B40  0EBA               	movlw	186
  5955   002B42  ECF6  F016         	call	_I2C_2_Master_Write
  5956                           
  5957                           ;../color.c: 103:  I2C_2_Master_RepStart();
  5958   002B46  ECFC  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5959                           
  5960                           ;../color.c: 104:  I2C_2_Master_Write(0x52 | 0x01);
  5961   002B4A  0E53               	movlw	83
  5962   002B4C  ECF6  F016         	call	_I2C_2_Master_Write
  5963                           
  5964                           ;../color.c: 105:  tmp=I2C_2_Master_Read(1);
  5965   002B50  0E01               	movlw	1
  5966   002B52  EC06  F016         	call	_I2C_2_Master_Read
  5967   002B56  6E07               	movwf	??_color_read_Blue^0,c
  5968   002B58  5007               	movf	??_color_read_Blue^0,w,c
  5969   002B5A  6E0A               	movwf	color_read_Blue@tmp^0,c
  5970   002B5C  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5971                           
  5972                           ;../color.c: 106:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5973   002B5E  0E00               	movlw	0
  5974   002B60  EC06  F016         	call	_I2C_2_Master_Read
  5975   002B64  6E07               	movwf	??_color_read_Blue^0,c
  5976   002B66  5007               	movf	??_color_read_Blue^0,w,c
  5977   002B68  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5978   002B6A  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5979   002B6C  500A               	movf	color_read_Blue@tmp^0,w,c
  5980   002B6E  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5981   002B70  6E0A               	movwf	color_read_Blue@tmp^0,c
  5982   002B72  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5983   002B74  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5984   002B76  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5985                           
  5986                           ;../color.c: 107:  I2C_2_Master_Stop();
  5987   002B78  EC01  F017         	call	_I2C_2_Master_Stop	;wreg free
  5988   002B7C                     
  5989                           ;../color.c: 108:  return tmp;
  5990   002B7C  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5991   002B80  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5992   002B84  0012               	return		;funcret
  5993   002B86                     __end_of_color_read_Blue:
  5994                           	callstack 0
  5995                           
  5996 ;; *************** function _I2C_2_Master_RepStart *****************
  5997 ;; Defined at:
  5998 ;;		line 33 in file "../i2c.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;		None
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;		None
  6003 ;; Return value:  Size  Location     Type
  6004 ;;                  1    wreg      void 
  6005 ;; Registers used:
  6006 ;;		wreg, status,2, status,0, cstack
  6007 ;; Tracked objects:
  6008 ;;		On entry : 0/0
  6009 ;;		On exit  : 0/0
  6010 ;;		Unchanged: 0/0
  6011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6016 ;;Total ram usage:        0 bytes
  6017 ;; Hardware stack levels used: 1
  6018 ;; Hardware stack levels required when called: 2
  6019 ;; This function calls:
  6020 ;;		_I2C_2_Master_Idle
  6021 ;; This function is called by:
  6022 ;;		_color_read_Luminosity
  6023 ;;		_color_read_Red
  6024 ;;		_color_read_Green
  6025 ;;		_color_read_Blue
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           	psect	text34
  6030   002DF8                     __ptext34:
  6031                           	callstack 0
  6032   002DF8                     _I2C_2_Master_RepStart:
  6033                           	callstack 26
  6034   002DF8                     
  6035                           ;../i2c.c: 35:   I2C_2_Master_Idle();
  6036   002DF8  EC89  F016         	call	_I2C_2_Master_Idle	;wreg free
  6037   002DFC                     
  6038                           ;../i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6039   002DFC  010E               	movlb	14	; () banked
  6040   002DFE  83DA               	bsf	218,1,b	;volatile
  6041   002E00                     
  6042                           ; BSR set to: 14
  6043   002E00  0012               	return		;funcret
  6044   002E02                     __end_of_I2C_2_Master_RepStart:
  6045                           	callstack 0
  6046                           
  6047 ;; *************** function _I2C_2_Master_Read *****************
  6048 ;; Defined at:
  6049 ;;		line 51 in file "../i2c.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;  ack             1    wreg     unsigned char 
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;  ack             1    2[COMRAM] unsigned char 
  6054 ;;  tmp             1    3[COMRAM] unsigned char 
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  1    wreg      unsigned char 
  6057 ;; Registers used:
  6058 ;;		wreg, status,2, status,0, cstack
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6065 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6066 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6067 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6068 ;;Total ram usage:        3 bytes
  6069 ;; Hardware stack levels used: 1
  6070 ;; Hardware stack levels required when called: 2
  6071 ;; This function calls:
  6072 ;;		_I2C_2_Master_Idle
  6073 ;; This function is called by:
  6074 ;;		_color_read_Luminosity
  6075 ;;		_color_read_Red
  6076 ;;		_color_read_Green
  6077 ;;		_color_read_Blue
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081                           	psect	text35
  6082   002C0C                     __ptext35:
  6083                           	callstack 0
  6084   002C0C                     _I2C_2_Master_Read:
  6085                           	callstack 26
  6086                           
  6087                           ; BSR set to: 14
  6088                           ;incstack = 0
  6089                           ;I2C_2_Master_Read@ack stored from wreg
  6090   002C0C  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  6091   002C0E                     
  6092                           ;../i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);../i2c.c: 52: {;../i2c
      +                          .c: 53:   unsigned char tmp;;../i2c.c: 54:   I2C_2_Master_Idle();
  6093   002C0E  EC89  F016         	call	_I2C_2_Master_Idle	;wreg free
  6094   002C12                     
  6095                           ;../i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6096   002C12  010E               	movlb	14	; () banked
  6097   002C14  87DA               	bsf	218,3,b	;volatile
  6098                           
  6099                           ;../i2c.c: 56:   I2C_2_Master_Idle();
  6100   002C16  EC89  F016         	call	_I2C_2_Master_Idle	;wreg free
  6101   002C1A                     
  6102                           ;../i2c.c: 57:   tmp = SSP2BUF;
  6103   002C1A  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6104                           
  6105                           ;../i2c.c: 58:   I2C_2_Master_Idle();
  6106   002C1E  EC89  F016         	call	_I2C_2_Master_Idle	;wreg free
  6107   002C22                     
  6108                           ;../i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6109   002C22  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  6110   002C24  B4D8               	btfsc	status,2,c
  6111   002C26  EF17  F016         	goto	u1361
  6112   002C2A  EF1B  F016         	goto	u1360
  6113   002C2E                     u1361:
  6114   002C2E  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6115   002C30  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  6116   002C32  EF1C  F016         	goto	u1378
  6117   002C36                     u1360:
  6118   002C36  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6119   002C38                     u1378:
  6120   002C38  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  6121   002C3A  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  6122   002C3C  010E               	movlb	14	; () banked
  6123   002C3E  51DA               	movf	218,w,b	;volatile
  6124   002C40  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6125   002C42  0BDF               	andlw	-33
  6126   002C44  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6127   002C46  6FDA               	movwf	218,b	;volatile
  6128   002C48                     
  6129                           ; BSR set to: 14
  6130                           ;../i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6131   002C48  89DA               	bsf	218,4,b	;volatile
  6132   002C4A                     
  6133                           ; BSR set to: 14
  6134                           ;../i2c.c: 61:   return tmp;
  6135   002C4A  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  6136   002C4C                     
  6137                           ; BSR set to: 14
  6138   002C4C  0012               	return		;funcret
  6139   002C4E                     __end_of_I2C_2_Master_Read:
  6140                           	callstack 0
  6141                           
  6142 ;; *************** function _color_processor_hard *****************
  6143 ;; Defined at:
  6144 ;;		line 152 in file "../color.c"
  6145 ;; Parameters:    Size  Location     Type
  6146 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  6147 ;;		 -> main@RGB_recorded(8), 
  6148 ;;  calibrated      2    2[COMRAM] PTR unsigned int 
  6149 ;;		 -> main@color_calibrated(64), 
  6150 ;; Auto vars:     Size  Location     Type
  6151 ;;  cb              2   22[COMRAM] unsigned int 
  6152 ;;  cg              2   20[COMRAM] unsigned int 
  6153 ;;  cr              2   18[COMRAM] unsigned int 
  6154 ;;  condition_b     1    8[COMRAM] _Bool 
  6155 ;;  condition_g     1    7[COMRAM] _Bool 
  6156 ;;  condition_r     1    6[COMRAM] _Bool 
  6157 ;;  i               2    0        int 
  6158 ;;  b               2   16[COMRAM] unsigned int 
  6159 ;;  g               2   14[COMRAM] unsigned int 
  6160 ;;  r               2   12[COMRAM] unsigned int 
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  2    0[COMRAM] unsigned int 
  6163 ;; Registers used:
  6164 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6170 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6171 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6172 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6173 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6174 ;;Total ram usage:       24 bytes
  6175 ;; Hardware stack levels used: 1
  6176 ;; Hardware stack levels required when called: 1
  6177 ;; This function calls:
  6178 ;;		Nothing
  6179 ;; This function is called by:
  6180 ;;		_main
  6181 ;; This function uses a non-reentrant model
  6182 ;;
  6183                           
  6184                           	psect	text36
  6185   001850                     __ptext36:
  6186                           	callstack 0
  6187   001850                     _color_processor_hard:
  6188                           	callstack 29
  6189   001850                     
  6190                           ;../color.c: 152: unsigned int color_processor_hard(struct RGB_val *rgb, unsigned int ca
      +                          librated[]);../color.c: 153: {;../color.c: 154:     unsigned int r = rgb->R;
  6191   001850  EE20 F002          	lfsr	2,2
  6192   001854  5001               	movf	color_processor_hard@rgb^0,w,c
  6193   001856  26D9               	addwf	fsr2l,f,c
  6194   001858  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6195   00185A  22DA               	addwfc	fsr2h,f,c
  6196   00185C  CFDE F00D          	movff	postinc2,color_processor_hard@r
  6197   001860  CFDD F00E          	movff	postdec2,color_processor_hard@r+1
  6198                           
  6199                           ;../color.c: 155:     unsigned int g = rgb->G;
  6200   001864  EE20 F004          	lfsr	2,4
  6201   001868  5001               	movf	color_processor_hard@rgb^0,w,c
  6202   00186A  26D9               	addwf	fsr2l,f,c
  6203   00186C  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6204   00186E  22DA               	addwfc	fsr2h,f,c
  6205   001870  CFDE F00F          	movff	postinc2,color_processor_hard@g
  6206   001874  CFDD F010          	movff	postdec2,color_processor_hard@g+1
  6207                           
  6208                           ;../color.c: 156:     unsigned int b = rgb->B;
  6209   001878  EE20 F006          	lfsr	2,6
  6210   00187C  5001               	movf	color_processor_hard@rgb^0,w,c
  6211   00187E  26D9               	addwf	fsr2l,f,c
  6212   001880  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6213   001882  22DA               	addwfc	fsr2h,f,c
  6214   001884  CFDE F011          	movff	postinc2,color_processor_hard@b
  6215   001888  CFDD F012          	movff	postdec2,color_processor_hard@b+1
  6216   00188C                     
  6217                           ;../color.c: 160:         unsigned int cr = calibrated[4*i+1];
  6218   00188C  EE20 F002          	lfsr	2,2
  6219   001890  5003               	movf	color_processor_hard@calibrated^0,w,c
  6220   001892  26D9               	addwf	fsr2l,f,c
  6221   001894  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6222   001896  22DA               	addwfc	fsr2h,f,c
  6223   001898  CFDE F013          	movff	postinc2,color_processor_hard@cr
  6224   00189C  CFDD F014          	movff	postdec2,color_processor_hard@cr+1
  6225                           
  6226                           ;../color.c: 161:         unsigned int cg = calibrated[4*i+2];
  6227   0018A0  EE20 F004          	lfsr	2,4
  6228   0018A4  5003               	movf	color_processor_hard@calibrated^0,w,c
  6229   0018A6  26D9               	addwf	fsr2l,f,c
  6230   0018A8  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6231   0018AA  22DA               	addwfc	fsr2h,f,c
  6232   0018AC  CFDE F015          	movff	postinc2,color_processor_hard@cg
  6233   0018B0  CFDD F016          	movff	postdec2,color_processor_hard@cg+1
  6234                           
  6235                           ;../color.c: 162:         unsigned int cb = calibrated[4*i+3];
  6236   0018B4  EE20 F006          	lfsr	2,6
  6237   0018B8  5003               	movf	color_processor_hard@calibrated^0,w,c
  6238   0018BA  26D9               	addwf	fsr2l,f,c
  6239   0018BC  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6240   0018BE  22DA               	addwfc	fsr2h,f,c
  6241   0018C0  CFDE F017          	movff	postinc2,color_processor_hard@cb
  6242   0018C4  CFDD F018          	movff	postdec2,color_processor_hard@cb+1
  6243   0018C8                     
  6244                           ;../color.c: 164:         _Bool condition_r = r>cr-20 && r<cr+20;
  6245   0018C8  0E00               	movlw	0
  6246   0018CA  6E0A               	movwf	_color_processor_hard$370^0,c
  6247   0018CC  0EEC               	movlw	236
  6248   0018CE  2413               	addwf	color_processor_hard@cr^0,w,c
  6249   0018D0  6E05               	movwf	??_color_processor_hard^0,c
  6250   0018D2  0EFF               	movlw	255
  6251   0018D4  2014               	addwfc	(color_processor_hard@cr+1)^0,w,c
  6252   0018D6  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6253   0018D8  500D               	movf	color_processor_hard@r^0,w,c
  6254   0018DA  5C05               	subwf	??_color_processor_hard^0,w,c
  6255   0018DC  500E               	movf	(color_processor_hard@r+1)^0,w,c
  6256   0018DE  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6257   0018E0  B0D8               	btfsc	status,0,c
  6258   0018E2  EF75  F00C         	goto	u1601
  6259   0018E6  EF77  F00C         	goto	u1600
  6260   0018EA                     u1601:
  6261   0018EA  EF8A  F00C         	goto	l64
  6262   0018EE                     u1600:
  6263   0018EE  0E14               	movlw	20
  6264   0018F0  2413               	addwf	color_processor_hard@cr^0,w,c
  6265   0018F2  6E05               	movwf	??_color_processor_hard^0,c
  6266   0018F4  0E00               	movlw	0
  6267   0018F6  2014               	addwfc	(color_processor_hard@cr+1)^0,w,c
  6268   0018F8  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6269   0018FA  5005               	movf	??_color_processor_hard^0,w,c
  6270   0018FC  5C0D               	subwf	color_processor_hard@r^0,w,c
  6271   0018FE  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6272   001900  580E               	subwfb	(color_processor_hard@r+1)^0,w,c
  6273   001902  B0D8               	btfsc	status,0,c
  6274   001904  EF86  F00C         	goto	u1611
  6275   001908  EF88  F00C         	goto	u1610
  6276   00190C                     u1611:
  6277   00190C  EF8A  F00C         	goto	l64
  6278   001910                     u1610:
  6279   001910  0E01               	movlw	1
  6280   001912  6E0A               	movwf	_color_processor_hard$370^0,c
  6281   001914                     l64:
  6282   001914  500A               	movf	_color_processor_hard$370^0,w,c
  6283   001916  A4D8               	btfss	status,2,c
  6284   001918  EF90  F00C         	goto	u1621
  6285   00191C  EF93  F00C         	goto	u1620
  6286   001920                     u1621:
  6287   001920  0E01               	movlw	1
  6288   001922  EF94  F00C         	goto	u1630
  6289   001926                     u1620:
  6290   001926  0E00               	movlw	0
  6291   001928                     u1630:
  6292   001928  6E07               	movwf	color_processor_hard@condition_r^0,c
  6293                           
  6294                           ;../color.c: 165:         _Bool condition_g = b>cb-20 && b<cb+20;
  6295   00192A  0E00               	movlw	0
  6296   00192C  6E0B               	movwf	_color_processor_hard$372^0,c
  6297   00192E  0EEC               	movlw	236
  6298   001930  2417               	addwf	color_processor_hard@cb^0,w,c
  6299   001932  6E05               	movwf	??_color_processor_hard^0,c
  6300   001934  0EFF               	movlw	255
  6301   001936  2018               	addwfc	(color_processor_hard@cb+1)^0,w,c
  6302   001938  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6303   00193A  5011               	movf	color_processor_hard@b^0,w,c
  6304   00193C  5C05               	subwf	??_color_processor_hard^0,w,c
  6305   00193E  5012               	movf	(color_processor_hard@b+1)^0,w,c
  6306   001940  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6307   001942  B0D8               	btfsc	status,0,c
  6308   001944  EFA6  F00C         	goto	u1641
  6309   001948  EFA8  F00C         	goto	u1640
  6310   00194C                     u1641:
  6311   00194C  EFBB  F00C         	goto	l66
  6312   001950                     u1640:
  6313   001950  0E14               	movlw	20
  6314   001952  2417               	addwf	color_processor_hard@cb^0,w,c
  6315   001954  6E05               	movwf	??_color_processor_hard^0,c
  6316   001956  0E00               	movlw	0
  6317   001958  2018               	addwfc	(color_processor_hard@cb+1)^0,w,c
  6318   00195A  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6319   00195C  5005               	movf	??_color_processor_hard^0,w,c
  6320   00195E  5C11               	subwf	color_processor_hard@b^0,w,c
  6321   001960  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6322   001962  5812               	subwfb	(color_processor_hard@b+1)^0,w,c
  6323   001964  B0D8               	btfsc	status,0,c
  6324   001966  EFB7  F00C         	goto	u1651
  6325   00196A  EFB9  F00C         	goto	u1650
  6326   00196E                     u1651:
  6327   00196E  EFBB  F00C         	goto	l66
  6328   001972                     u1650:
  6329   001972  0E01               	movlw	1
  6330   001974  6E0B               	movwf	_color_processor_hard$372^0,c
  6331   001976                     l66:
  6332   001976  500B               	movf	_color_processor_hard$372^0,w,c
  6333   001978  A4D8               	btfss	status,2,c
  6334   00197A  EFC1  F00C         	goto	u1661
  6335   00197E  EFC4  F00C         	goto	u1660
  6336   001982                     u1661:
  6337   001982  0E01               	movlw	1
  6338   001984  EFC5  F00C         	goto	u1670
  6339   001988                     u1660:
  6340   001988  0E00               	movlw	0
  6341   00198A                     u1670:
  6342   00198A  6E08               	movwf	color_processor_hard@condition_g^0,c
  6343                           
  6344                           ;../color.c: 166:         _Bool condition_b = g>cg-20 && g<cg+20;
  6345   00198C  0E00               	movlw	0
  6346   00198E  6E0C               	movwf	_color_processor_hard$374^0,c
  6347   001990  0EEC               	movlw	236
  6348   001992  2415               	addwf	color_processor_hard@cg^0,w,c
  6349   001994  6E05               	movwf	??_color_processor_hard^0,c
  6350   001996  0EFF               	movlw	255
  6351   001998  2016               	addwfc	(color_processor_hard@cg+1)^0,w,c
  6352   00199A  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6353   00199C  500F               	movf	color_processor_hard@g^0,w,c
  6354   00199E  5C05               	subwf	??_color_processor_hard^0,w,c
  6355   0019A0  5010               	movf	(color_processor_hard@g+1)^0,w,c
  6356   0019A2  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6357   0019A4  B0D8               	btfsc	status,0,c
  6358   0019A6  EFD7  F00C         	goto	u1681
  6359   0019AA  EFD9  F00C         	goto	u1680
  6360   0019AE                     u1681:
  6361   0019AE  EFEC  F00C         	goto	l68
  6362   0019B2                     u1680:
  6363   0019B2  0E14               	movlw	20
  6364   0019B4  2415               	addwf	color_processor_hard@cg^0,w,c
  6365   0019B6  6E05               	movwf	??_color_processor_hard^0,c
  6366   0019B8  0E00               	movlw	0
  6367   0019BA  2016               	addwfc	(color_processor_hard@cg+1)^0,w,c
  6368   0019BC  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6369   0019BE  5005               	movf	??_color_processor_hard^0,w,c
  6370   0019C0  5C0F               	subwf	color_processor_hard@g^0,w,c
  6371   0019C2  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6372   0019C4  5810               	subwfb	(color_processor_hard@g+1)^0,w,c
  6373   0019C6  B0D8               	btfsc	status,0,c
  6374   0019C8  EFE8  F00C         	goto	u1691
  6375   0019CC  EFEA  F00C         	goto	u1690
  6376   0019D0                     u1691:
  6377   0019D0  EFEC  F00C         	goto	l68
  6378   0019D4                     u1690:
  6379   0019D4  0E01               	movlw	1
  6380   0019D6  6E0C               	movwf	_color_processor_hard$374^0,c
  6381   0019D8                     l68:
  6382   0019D8  500C               	movf	_color_processor_hard$374^0,w,c
  6383   0019DA  A4D8               	btfss	status,2,c
  6384   0019DC  EFF2  F00C         	goto	u1701
  6385   0019E0  EFF5  F00C         	goto	u1700
  6386   0019E4                     u1701:
  6387   0019E4  0E01               	movlw	1
  6388   0019E6  EFF6  F00C         	goto	u1710
  6389   0019EA                     u1700:
  6390   0019EA  0E00               	movlw	0
  6391   0019EC                     u1710:
  6392   0019EC  6E09               	movwf	color_processor_hard@condition_b^0,c
  6393                           
  6394                           ;../color.c: 168:         if (condition_r && condition_g && condition_b){
  6395   0019EE  5007               	movf	color_processor_hard@condition_r^0,w,c
  6396   0019F0  B4D8               	btfsc	status,2,c
  6397   0019F2  EFFD  F00C         	goto	u1721
  6398   0019F6  EFFF  F00C         	goto	u1720
  6399   0019FA                     u1721:
  6400   0019FA  EF15  F00D         	goto	l2902
  6401   0019FE                     u1720:
  6402   0019FE  5008               	movf	color_processor_hard@condition_g^0,w,c
  6403   001A00  B4D8               	btfsc	status,2,c
  6404   001A02  EF05  F00D         	goto	u1731
  6405   001A06  EF07  F00D         	goto	u1730
  6406   001A0A                     u1731:
  6407   001A0A  EF15  F00D         	goto	l2902
  6408   001A0E                     u1730:
  6409   001A0E  5009               	movf	color_processor_hard@condition_b^0,w,c
  6410   001A10  B4D8               	btfsc	status,2,c
  6411   001A12  EF0D  F00D         	goto	u1741
  6412   001A16  EF0F  F00D         	goto	u1740
  6413   001A1A                     u1741:
  6414   001A1A  EF15  F00D         	goto	l2902
  6415   001A1E                     u1740:
  6416   001A1E                     
  6417                           ;../color.c: 169:             return i+1;
  6418   001A1E  0E00               	movlw	0
  6419   001A20  6E02               	movwf	(?_color_processor_hard+1)^0,c
  6420   001A22  0E01               	movlw	1
  6421   001A24  6E01               	movwf	?_color_processor_hard^0,c
  6422   001A26  EF19  F00D         	goto	l70
  6423   001A2A                     l2902:
  6424   001A2A  0E00               	movlw	0
  6425   001A2C  6E02               	movwf	(?_color_processor_hard+1)^0,c
  6426   001A2E  0E00               	movlw	0
  6427   001A30  6E01               	movwf	?_color_processor_hard^0,c
  6428   001A32                     l70:
  6429   001A32  0012               	return		;funcret
  6430   001A34                     __end_of_color_processor_hard:
  6431                           	callstack 0
  6432                           
  6433 ;; *************** function _color_processor_easy *****************
  6434 ;; Defined at:
  6435 ;;		line 134 in file "../color.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  6438 ;;		 -> main@RGB_recorded(8), 
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;  b               2    8[COMRAM] unsigned int 
  6441 ;;  a               2    6[COMRAM] unsigned int 
  6442 ;;  c               2    4[COMRAM] unsigned int 
  6443 ;;  color           2    2[COMRAM] unsigned int 
  6444 ;; Return value:  Size  Location     Type
  6445 ;;                  2    0[COMRAM] unsigned int 
  6446 ;; Registers used:
  6447 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6454 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6456 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6457 ;;Total ram usage:       10 bytes
  6458 ;; Hardware stack levels used: 1
  6459 ;; Hardware stack levels required when called: 1
  6460 ;; This function calls:
  6461 ;;		Nothing
  6462 ;; This function is called by:
  6463 ;;		_main
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           	psect	text37
  6468   0021E0                     __ptext37:
  6469                           	callstack 0
  6470   0021E0                     _color_processor_easy:
  6471                           	callstack 29
  6472   0021E0                     
  6473                           ;../color.c: 134: unsigned int color_processor_easy(struct RGB_val *rgb);../color.c: 135
      +                          : {;../color.c: 136:     unsigned int a = rgb->R;
  6474   0021E0  EE20 F002          	lfsr	2,2
  6475   0021E4  5001               	movf	color_processor_easy@rgb^0,w,c
  6476   0021E6  26D9               	addwf	fsr2l,f,c
  6477   0021E8  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6478   0021EA  22DA               	addwfc	fsr2h,f,c
  6479   0021EC  CFDE F007          	movff	postinc2,color_processor_easy@a
  6480   0021F0  CFDD F008          	movff	postdec2,color_processor_easy@a+1
  6481                           
  6482                           ;../color.c: 137:     unsigned int b = rgb->G;
  6483   0021F4  EE20 F004          	lfsr	2,4
  6484   0021F8  5001               	movf	color_processor_easy@rgb^0,w,c
  6485   0021FA  26D9               	addwf	fsr2l,f,c
  6486   0021FC  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6487   0021FE  22DA               	addwfc	fsr2h,f,c
  6488   002200  CFDE F009          	movff	postinc2,color_processor_easy@b
  6489   002204  CFDD F00A          	movff	postdec2,color_processor_easy@b+1
  6490                           
  6491                           ;../color.c: 138:     unsigned int c = rgb->B;
  6492   002208  EE20 F006          	lfsr	2,6
  6493   00220C  5001               	movf	color_processor_easy@rgb^0,w,c
  6494   00220E  26D9               	addwf	fsr2l,f,c
  6495   002210  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6496   002212  22DA               	addwfc	fsr2h,f,c
  6497   002214  CFDE F005          	movff	postinc2,color_processor_easy@c
  6498   002218  CFDD F006          	movff	postdec2,color_processor_easy@c+1
  6499   00221C                     
  6500                           ;../color.c: 139:     unsigned int color;;../color.c: 140:     if (a>=b & a>=c){
  6501   00221C  5009               	movf	color_processor_easy@b^0,w,c
  6502   00221E  5C07               	subwf	color_processor_easy@a^0,w,c
  6503   002220  500A               	movf	(color_processor_easy@b+1)^0,w,c
  6504   002222  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6505   002224  A0D8               	btfss	status,0,c
  6506   002226  EF17  F011         	goto	u1561
  6507   00222A  EF19  F011         	goto	u1560
  6508   00222E                     u1561:
  6509   00222E  EF2A  F011         	goto	l2850
  6510   002232                     u1560:
  6511   002232  5005               	movf	color_processor_easy@c^0,w,c
  6512   002234  5C07               	subwf	color_processor_easy@a^0,w,c
  6513   002236  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6514   002238  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6515   00223A  A0D8               	btfss	status,0,c
  6516   00223C  EF22  F011         	goto	u1571
  6517   002240  EF24  F011         	goto	u1570
  6518   002244                     u1571:
  6519   002244  EF2A  F011         	goto	l2850
  6520   002248                     u1570:
  6521   002248                     
  6522                           ;../color.c: 141:         color=1;
  6523   002248  0E00               	movlw	0
  6524   00224A  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6525   00224C  0E01               	movlw	1
  6526   00224E  6E03               	movwf	color_processor_easy@color^0,c
  6527                           
  6528                           ;../color.c: 142:     }
  6529   002250  EF4A  F011         	goto	l2858
  6530   002254                     l2850:
  6531   002254  5007               	movf	color_processor_easy@a^0,w,c
  6532   002256  5C09               	subwf	color_processor_easy@b^0,w,c
  6533   002258  5008               	movf	(color_processor_easy@a+1)^0,w,c
  6534   00225A  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6535   00225C  A0D8               	btfss	status,0,c
  6536   00225E  EF33  F011         	goto	u1581
  6537   002262  EF35  F011         	goto	u1580
  6538   002266                     u1581:
  6539   002266  EF46  F011         	goto	l2856
  6540   00226A                     u1580:
  6541   00226A  5005               	movf	color_processor_easy@c^0,w,c
  6542   00226C  5C09               	subwf	color_processor_easy@b^0,w,c
  6543   00226E  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6544   002270  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6545   002272  A0D8               	btfss	status,0,c
  6546   002274  EF3E  F011         	goto	u1591
  6547   002278  EF40  F011         	goto	u1590
  6548   00227C                     u1591:
  6549   00227C  EF46  F011         	goto	l2856
  6550   002280                     u1590:
  6551   002280                     
  6552                           ;../color.c: 144:         color=2;
  6553   002280  0E00               	movlw	0
  6554   002282  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6555   002284  0E02               	movlw	2
  6556   002286  6E03               	movwf	color_processor_easy@color^0,c
  6557                           
  6558                           ;../color.c: 145:     }
  6559   002288  EF4A  F011         	goto	l2858
  6560   00228C                     l2856:
  6561                           
  6562                           ;../color.c: 147:         color=3;
  6563   00228C  0E00               	movlw	0
  6564   00228E  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6565   002290  0E03               	movlw	3
  6566   002292  6E03               	movwf	color_processor_easy@color^0,c
  6567   002294                     l2858:
  6568                           
  6569                           ;../color.c: 149:     return color;
  6570   002294  C003  F001         	movff	color_processor_easy@color,?_color_processor_easy
  6571   002298  C004  F002         	movff	color_processor_easy@color+1,?_color_processor_easy+1
  6572   00229C  0012               	return		;funcret
  6573   00229E                     __end_of_color_processor_easy:
  6574                           	callstack 0
  6575                           
  6576 ;; *************** function _color_click_init *****************
  6577 ;; Defined at:
  6578 ;;		line 6 in file "../color.c"
  6579 ;; Parameters:    Size  Location     Type
  6580 ;;		None
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;		None
  6583 ;; Return value:  Size  Location     Type
  6584 ;;                  1    wreg      void 
  6585 ;; Registers used:
  6586 ;;		wreg, status,2, status,0, cstack
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 0/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6595 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6596 ;;Total ram usage:        1 bytes
  6597 ;; Hardware stack levels used: 1
  6598 ;; Hardware stack levels required when called: 4
  6599 ;; This function calls:
  6600 ;;		_I2C_2_Master_Init
  6601 ;;		_color_writetoaddr
  6602 ;; This function is called by:
  6603 ;;		_main
  6604 ;; This function uses a non-reentrant model
  6605 ;;
  6606                           
  6607                           	psect	text38
  6608   002948                     __ptext38:
  6609                           	callstack 0
  6610   002948                     _color_click_init:
  6611                           	callstack 26
  6612   002948                     
  6613                           ;../color.c: 9:     I2C_2_Master_Init();
  6614   002948  EC74  F016         	call	_I2C_2_Master_Init	;wreg free
  6615   00294C                     
  6616                           ;../color.c: 12:   color_writetoaddr(0x00, 0x01);
  6617   00294C  0E01               	movlw	1
  6618   00294E  6E03               	movwf	color_writetoaddr@value^0,c
  6619   002950  0E00               	movlw	0
  6620   002952  ECB0  F016         	call	_color_writetoaddr
  6621   002956                     
  6622                           ;../color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6623   002956  0E3F               	movlw	63
  6624   002958  6E05               	movwf	??_color_click_init^0,c
  6625   00295A  0E55               	movlw	85
  6626   00295C                     u2197:
  6627   00295C  2EE8               	decfsz	wreg,f,c
  6628   00295E  D7FE               	bra	u2197
  6629   002960  2E05               	decfsz	??_color_click_init^0,f,c
  6630   002962  D7FC               	bra	u2197
  6631   002964  F000               	nop	
  6632   002966                     
  6633                           ;../color.c: 16:  color_writetoaddr(0x00, 0x03);
  6634   002966  0E03               	movlw	3
  6635   002968  6E03               	movwf	color_writetoaddr@value^0,c
  6636   00296A  0E00               	movlw	0
  6637   00296C  ECB0  F016         	call	_color_writetoaddr
  6638   002970                     
  6639                           ;../color.c: 19:  color_writetoaddr(0x01, 0xD5);
  6640   002970  0ED5               	movlw	213
  6641   002972  6E03               	movwf	color_writetoaddr@value^0,c
  6642   002974  0E01               	movlw	1
  6643   002976  ECB0  F016         	call	_color_writetoaddr
  6644   00297A                     
  6645                           ;../color.c: 22:     TRISHbits.TRISH1 = 0;
  6646   00297A  9288               	bcf	136,1,c	;volatile
  6647   00297C                     
  6648                           ;../color.c: 23:     TRISDbits.TRISD3 = 0;
  6649   00297C  9684               	bcf	132,3,c	;volatile
  6650   00297E                     
  6651                           ;../color.c: 24:     TRISDbits.TRISD4 = 0;
  6652   00297E  9884               	bcf	132,4,c	;volatile
  6653   002980                     
  6654                           ;../color.c: 25:     TRISHbits.TRISH0 = 0;
  6655   002980  9088               	bcf	136,0,c	;volatile
  6656   002982                     
  6657                           ;../color.c: 26:     TRISFbits.TRISF0 = 0;
  6658   002982  9086               	bcf	134,0,c	;volatile
  6659   002984                     
  6660                           ;../color.c: 28:     LATHbits.LATH1 = 1;
  6661   002984  8280               	bsf	128,1,c	;volatile
  6662   002986                     
  6663                           ;../color.c: 29:     LATDbits.LATD3 = 1;
  6664   002986  867C               	bsf	124,3,c	;volatile
  6665   002988                     
  6666                           ;../color.c: 30:     LATDbits.LATD4 = 0;
  6667   002988  987C               	bcf	124,4,c	;volatile
  6668   00298A                     
  6669                           ;../color.c: 31:     LATHbits.LATH0 = 0;
  6670   00298A  9080               	bcf	128,0,c	;volatile
  6671   00298C                     
  6672                           ;../color.c: 32:     LATFbits.LATF0 = 0;
  6673   00298C  907E               	bcf	126,0,c	;volatile
  6674   00298E                     
  6675                           ;../color.c: 35:     LATDbits.LATD7=0;
  6676   00298E  9E7C               	bcf	124,7,c	;volatile
  6677   002990                     
  6678                           ;../color.c: 36:     LATHbits.LATH3=0;
  6679   002990  9680               	bcf	128,3,c	;volatile
  6680   002992                     
  6681                           ;../color.c: 37:     TRISDbits.TRISD7=0;
  6682   002992  9E84               	bcf	132,7,c	;volatile
  6683   002994                     
  6684                           ;../color.c: 38:     TRISHbits.TRISH3=0;
  6685   002994  9688               	bcf	136,3,c	;volatile
  6686   002996                     
  6687                           ;../color.c: 40:     TRISFbits.TRISF2=1;
  6688   002996  8486               	bsf	134,2,c	;volatile
  6689   002998                     
  6690                           ;../color.c: 41:     ANSELFbits.ANSELF2=0;
  6691   002998  010E               	movlb	14	; () banked
  6692   00299A  95B4               	bcf	180,2,b	;volatile
  6693   00299C                     
  6694                           ; BSR set to: 14
  6695                           ;../color.c: 42:     TRISFbits.TRISF3=1;
  6696   00299C  8686               	bsf	134,3,c	;volatile
  6697   00299E                     
  6698                           ; BSR set to: 14
  6699                           ;../color.c: 43:     ANSELFbits.ANSELF3=0;
  6700   00299E  97B4               	bcf	180,3,b	;volatile
  6701   0029A0                     
  6702                           ; BSR set to: 14
  6703   0029A0  0012               	return		;funcret
  6704   0029A2                     __end_of_color_click_init:
  6705                           	callstack 0
  6706                           
  6707 ;; *************** function _color_writetoaddr *****************
  6708 ;; Defined at:
  6709 ;;		line 46 in file "../color.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;  address         1    wreg     unsigned char 
  6712 ;;  value           1    2[COMRAM] unsigned char 
  6713 ;; Auto vars:     Size  Location     Type
  6714 ;;  address         1    3[COMRAM] unsigned char 
  6715 ;; Return value:  Size  Location     Type
  6716 ;;                  1    wreg      void 
  6717 ;; Registers used:
  6718 ;;		wreg, status,2, status,0, cstack
  6719 ;; Tracked objects:
  6720 ;;		On entry : 0/0
  6721 ;;		On exit  : 0/0
  6722 ;;		Unchanged: 0/0
  6723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6724 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6725 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6727 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6728 ;;Total ram usage:        2 bytes
  6729 ;; Hardware stack levels used: 1
  6730 ;; Hardware stack levels required when called: 3
  6731 ;; This function calls:
  6732 ;;		_I2C_2_Master_Start
  6733 ;;		_I2C_2_Master_Stop
  6734 ;;		_I2C_2_Master_Write
  6735 ;; This function is called by:
  6736 ;;		_color_click_init
  6737 ;; This function uses a non-reentrant model
  6738 ;;
  6739                           
  6740                           	psect	text39
  6741   002D60                     __ptext39:
  6742                           	callstack 0
  6743   002D60                     _color_writetoaddr:
  6744                           	callstack 26
  6745                           
  6746                           ; BSR set to: 14
  6747                           ;incstack = 0
  6748                           ;color_writetoaddr@address stored from wreg
  6749   002D60  6E04               	movwf	color_writetoaddr@address^0,c
  6750   002D62                     
  6751                           ;../color.c: 46: void color_writetoaddr(char address, char value);../color.c: 47: {;../c
      +                          olor.c: 48:     I2C_2_Master_Start();
  6752   002D62  EC06  F017         	call	_I2C_2_Master_Start	;wreg free
  6753                           
  6754                           ;../color.c: 49:     I2C_2_Master_Write(0x52 | 0x00);
  6755   002D66  0E52               	movlw	82
  6756   002D68  ECF6  F016         	call	_I2C_2_Master_Write
  6757                           
  6758                           ;../color.c: 50:     I2C_2_Master_Write(0x80 | address);
  6759   002D6C  5004               	movf	color_writetoaddr@address^0,w,c
  6760   002D6E  0980               	iorlw	128
  6761   002D70  ECF6  F016         	call	_I2C_2_Master_Write
  6762                           
  6763                           ;../color.c: 51:     I2C_2_Master_Write(value);
  6764   002D74  5003               	movf	color_writetoaddr@value^0,w,c
  6765   002D76  ECF6  F016         	call	_I2C_2_Master_Write
  6766                           
  6767                           ;../color.c: 52:     I2C_2_Master_Stop();
  6768   002D7A  EC01  F017         	call	_I2C_2_Master_Stop	;wreg free
  6769   002D7E  0012               	return		;funcret
  6770   002D80                     __end_of_color_writetoaddr:
  6771                           	callstack 0
  6772                           
  6773 ;; *************** function _I2C_2_Master_Write *****************
  6774 ;; Defined at:
  6775 ;;		line 45 in file "../i2c.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  data_byte       1    wreg     unsigned char 
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;  data_byte       1    1[COMRAM] unsigned char 
  6780 ;; Return value:  Size  Location     Type
  6781 ;;                  1    wreg      void 
  6782 ;; Registers used:
  6783 ;;		wreg, status,2, status,0, cstack
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6790 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6792 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6793 ;;Total ram usage:        1 bytes
  6794 ;; Hardware stack levels used: 1
  6795 ;; Hardware stack levels required when called: 2
  6796 ;; This function calls:
  6797 ;;		_I2C_2_Master_Idle
  6798 ;; This function is called by:
  6799 ;;		_color_writetoaddr
  6800 ;;		_color_read_Luminosity
  6801 ;;		_color_read_Red
  6802 ;;		_color_read_Green
  6803 ;;		_color_read_Blue
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           	psect	text40
  6808   002DEC                     __ptext40:
  6809                           	callstack 0
  6810   002DEC                     _I2C_2_Master_Write:
  6811                           	callstack 26
  6812                           
  6813                           ;incstack = 0
  6814                           ;I2C_2_Master_Write@data_byte stored from wreg
  6815   002DEC  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6816   002DEE                     
  6817                           ;../i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);../i2c.c: 46: {;../i2c.c
      +                          : 47:   I2C_2_Master_Idle();
  6818   002DEE  EC89  F016         	call	_I2C_2_Master_Idle	;wreg free
  6819   002DF2                     
  6820                           ;../i2c.c: 48:   SSP2BUF = data_byte;
  6821   002DF2  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6822   002DF6  0012               	return		;funcret
  6823   002DF8                     __end_of_I2C_2_Master_Write:
  6824                           	callstack 0
  6825                           
  6826 ;; *************** function _I2C_2_Master_Stop *****************
  6827 ;; Defined at:
  6828 ;;		line 39 in file "../i2c.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;		None
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;		None
  6833 ;; Return value:  Size  Location     Type
  6834 ;;                  1    wreg      void 
  6835 ;; Registers used:
  6836 ;;		wreg, status,2, status,0, cstack
  6837 ;; Tracked objects:
  6838 ;;		On entry : 0/0
  6839 ;;		On exit  : 0/0
  6840 ;;		Unchanged: 0/0
  6841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6846 ;;Total ram usage:        0 bytes
  6847 ;; Hardware stack levels used: 1
  6848 ;; Hardware stack levels required when called: 2
  6849 ;; This function calls:
  6850 ;;		_I2C_2_Master_Idle
  6851 ;; This function is called by:
  6852 ;;		_color_writetoaddr
  6853 ;;		_color_read_Luminosity
  6854 ;;		_color_read_Red
  6855 ;;		_color_read_Green
  6856 ;;		_color_read_Blue
  6857 ;; This function uses a non-reentrant model
  6858 ;;
  6859                           
  6860                           	psect	text41
  6861   002E02                     __ptext41:
  6862                           	callstack 0
  6863   002E02                     _I2C_2_Master_Stop:
  6864                           	callstack 26
  6865   002E02                     
  6866                           ;../i2c.c: 41:   I2C_2_Master_Idle();
  6867   002E02  EC89  F016         	call	_I2C_2_Master_Idle	;wreg free
  6868   002E06                     
  6869                           ;../i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6870   002E06  010E               	movlb	14	; () banked
  6871   002E08  85DA               	bsf	218,2,b	;volatile
  6872   002E0A                     
  6873                           ; BSR set to: 14
  6874   002E0A  0012               	return		;funcret
  6875   002E0C                     __end_of_I2C_2_Master_Stop:
  6876                           	callstack 0
  6877                           
  6878 ;; *************** function _I2C_2_Master_Start *****************
  6879 ;; Defined at:
  6880 ;;		line 27 in file "../i2c.c"
  6881 ;; Parameters:    Size  Location     Type
  6882 ;;		None
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;		None
  6885 ;; Return value:  Size  Location     Type
  6886 ;;                  1    wreg      void 
  6887 ;; Registers used:
  6888 ;;		wreg, status,2, status,0, cstack
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 0/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6898 ;;Total ram usage:        0 bytes
  6899 ;; Hardware stack levels used: 1
  6900 ;; Hardware stack levels required when called: 2
  6901 ;; This function calls:
  6902 ;;		_I2C_2_Master_Idle
  6903 ;; This function is called by:
  6904 ;;		_color_writetoaddr
  6905 ;;		_color_read_Luminosity
  6906 ;;		_color_read_Red
  6907 ;;		_color_read_Green
  6908 ;;		_color_read_Blue
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           	psect	text42
  6913   002E0C                     __ptext42:
  6914                           	callstack 0
  6915   002E0C                     _I2C_2_Master_Start:
  6916                           	callstack 26
  6917   002E0C                     
  6918                           ;../i2c.c: 29:   I2C_2_Master_Idle();
  6919   002E0C  EC89  F016         	call	_I2C_2_Master_Idle	;wreg free
  6920   002E10                     
  6921                           ;../i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6922   002E10  010E               	movlb	14	; () banked
  6923   002E12  81DA               	bsf	218,0,b	;volatile
  6924   002E14                     
  6925                           ; BSR set to: 14
  6926   002E14  0012               	return		;funcret
  6927   002E16                     __end_of_I2C_2_Master_Start:
  6928                           	callstack 0
  6929                           
  6930 ;; *************** function _I2C_2_Master_Idle *****************
  6931 ;; Defined at:
  6932 ;;		line 22 in file "../i2c.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;		None
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;		None
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  1    wreg      void 
  6939 ;; Registers used:
  6940 ;;		wreg, status,2, status,0
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6948 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6949 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6950 ;;Total ram usage:        1 bytes
  6951 ;; Hardware stack levels used: 1
  6952 ;; Hardware stack levels required when called: 1
  6953 ;; This function calls:
  6954 ;;		Nothing
  6955 ;; This function is called by:
  6956 ;;		_I2C_2_Master_Start
  6957 ;;		_I2C_2_Master_RepStart
  6958 ;;		_I2C_2_Master_Stop
  6959 ;;		_I2C_2_Master_Write
  6960 ;;		_I2C_2_Master_Read
  6961 ;; This function uses a non-reentrant model
  6962 ;;
  6963                           
  6964                           	psect	text43
  6965   002D12                     __ptext43:
  6966                           	callstack 0
  6967   002D12                     _I2C_2_Master_Idle:
  6968                           	callstack 26
  6969   002D12                     l101:
  6970   002D12  010E               	movlb	14	; () banked
  6971   002D14  B5D8               	btfsc	216,2,b	;volatile
  6972   002D16  EF8F  F016         	goto	u1181
  6973   002D1A  EF91  F016         	goto	u1180
  6974   002D1E                     u1181:
  6975   002D1E  EF89  F016         	goto	l101
  6976   002D22                     u1180:
  6977   002D22                     
  6978                           ; BSR set to: 14
  6979   002D22  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6980   002D26  0E1F               	movlw	31
  6981   002D28  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  6982   002D2A  A4D8               	btfss	status,2,c
  6983   002D2C  EF9A  F016         	goto	u1191
  6984   002D30  EF9C  F016         	goto	u1190
  6985   002D34                     u1191:
  6986   002D34  EF89  F016         	goto	l101
  6987   002D38                     u1190:
  6988   002D38                     
  6989                           ; BSR set to: 14
  6990   002D38  0012               	return		;funcret
  6991   002D3A                     __end_of_I2C_2_Master_Idle:
  6992                           	callstack 0
  6993                           
  6994 ;; *************** function _I2C_2_Master_Init *****************
  6995 ;; Defined at:
  6996 ;;		line 4 in file "../i2c.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;		None
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;		None
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  1    wreg      void 
  7003 ;; Registers used:
  7004 ;;		wreg, status,2
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7014 ;;Total ram usage:        0 bytes
  7015 ;; Hardware stack levels used: 1
  7016 ;; Hardware stack levels required when called: 1
  7017 ;; This function calls:
  7018 ;;		Nothing
  7019 ;; This function is called by:
  7020 ;;		_color_click_init
  7021 ;;		_main
  7022 ;; This function uses a non-reentrant model
  7023 ;;
  7024                           
  7025                           	psect	text44
  7026   002CE8                     __ptext44:
  7027                           	callstack 0
  7028   002CE8                     _I2C_2_Master_Init:
  7029                           	callstack 28
  7030   002CE8                     
  7031                           ;../i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  7032   002CE8  010E               	movlb	14	; () banked
  7033   002CEA  51D9               	movf	217,w,b	;volatile
  7034   002CEC  0BF0               	andlw	-16
  7035   002CEE  0908               	iorlw	8
  7036   002CF0  6FD9               	movwf	217,b	;volatile
  7037   002CF2                     
  7038                           ; BSR set to: 14
  7039                           ;../i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  7040   002CF2  8BD9               	bsf	217,5,b	;volatile
  7041                           
  7042                           ;../i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  7043   002CF4  0E9F               	movlw	159
  7044   002CF6  6FD6               	movwf	214,b	;volatile
  7045   002CF8                     
  7046                           ; BSR set to: 14
  7047                           ;../i2c.c: 12:   TRISDbits.TRISD5 = 1;
  7048   002CF8  8A84               	bsf	132,5,c	;volatile
  7049   002CFA                     
  7050                           ; BSR set to: 14
  7051                           ;../i2c.c: 13:   TRISDbits.TRISD6 = 1;
  7052   002CFA  8C84               	bsf	132,6,c	;volatile
  7053   002CFC                     
  7054                           ; BSR set to: 14
  7055                           ;../i2c.c: 14:   ANSELDbits.ANSELD5=0;
  7056   002CFC  9BA7               	bcf	167,5,b	;volatile
  7057   002CFE                     
  7058                           ; BSR set to: 14
  7059                           ;../i2c.c: 15:   ANSELDbits.ANSELD6=0;
  7060   002CFE  9DA7               	bcf	167,6,b	;volatile
  7061                           
  7062                           ;../i2c.c: 16:   SSP2DATPPS=0x1D;
  7063   002D00  0E1D               	movlw	29
  7064   002D02  6F1D               	movwf	29,b	;volatile
  7065                           
  7066                           ;../i2c.c: 17:   SSP2CLKPPS=0x1E;
  7067   002D04  0E1E               	movlw	30
  7068   002D06  6F1C               	movwf	28,b	;volatile
  7069                           
  7070                           ;../i2c.c: 18:   RD5PPS=0x1C;
  7071   002D08  0E1C               	movlw	28
  7072   002D0A  6F6F               	movwf	111,b	;volatile
  7073                           
  7074                           ;../i2c.c: 19:   RD6PPS=0x1B;
  7075   002D0C  0E1B               	movlw	27
  7076   002D0E  6F70               	movwf	112,b	;volatile
  7077   002D10                     
  7078                           ; BSR set to: 14
  7079   002D10  0012               	return		;funcret
  7080   002D12                     __end_of_I2C_2_Master_Init:
  7081                           	callstack 0
  7082                           
  7083 ;; *************** function _Timer0_init *****************
  7084 ;; Defined at:
  7085 ;;		line 62 in file "../rc_servo.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;		None
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;		None
  7090 ;; Return value:  Size  Location     Type
  7091 ;;                  1    wreg      void 
  7092 ;; Registers used:
  7093 ;;		wreg, status,2
  7094 ;; Tracked objects:
  7095 ;;		On entry : 0/0
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7103 ;;Total ram usage:        0 bytes
  7104 ;; Hardware stack levels used: 1
  7105 ;; Hardware stack levels required when called: 1
  7106 ;; This function calls:
  7107 ;;		Nothing
  7108 ;; This function is called by:
  7109 ;;		_main
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           	psect	text45
  7114   002D80                     __ptext45:
  7115                           	callstack 0
  7116   002D80                     _Timer0_init:
  7117                           	callstack 29
  7118   002D80                     
  7119                           ;../rc_servo.c: 64:     T0CON1bits.T0CS=0b010;
  7120   002D80  50D6               	movf	214,w,c	;volatile
  7121   002D82  0B1F               	andlw	-225
  7122   002D84  0940               	iorlw	64
  7123   002D86  6ED6               	movwf	214,c	;volatile
  7124   002D88                     
  7125                           ;../rc_servo.c: 65:     T0CON1bits.T0ASYNC=1;
  7126   002D88  88D6               	bsf	214,4,c	;volatile
  7127                           
  7128                           ;../rc_servo.c: 66:     T0CON1bits.T0CKPS=0b0111;
  7129   002D8A  50D6               	movf	214,w,c	;volatile
  7130   002D8C  0BF0               	andlw	-16
  7131   002D8E  0907               	iorlw	7
  7132   002D90  6ED6               	movwf	214,c	;volatile
  7133   002D92                     
  7134                           ;../rc_servo.c: 68:     T0CON0bits.T016BIT=1;
  7135   002D92  88D5               	bsf	213,4,c	;volatile
  7136                           
  7137                           ;../rc_servo.c: 71:     TMR0H=(65535-2500)>>8;
  7138   002D94  0EF6               	movlw	246
  7139   002D96  6ED4               	movwf	212,c	;volatile
  7140                           
  7141                           ;../rc_servo.c: 72:     TMR0L=(unsigned char)(65535-2500);
  7142   002D98  0E3B               	movlw	59
  7143   002D9A  6ED3               	movwf	211,c	;volatile
  7144   002D9C                     
  7145                           ;../rc_servo.c: 73:     T0CON0bits.T0EN=1;
  7146   002D9C  8ED5               	bsf	213,7,c	;volatile
  7147   002D9E  0012               	return		;funcret
  7148   002DA0                     __end_of_Timer0_init:
  7149                           	callstack 0
  7150                           
  7151 ;; *************** function _Interrupts_init *****************
  7152 ;; Defined at:
  7153 ;;		line 8 in file "../rc_servo.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;		None
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;		None
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  1    wreg      void 
  7160 ;; Registers used:
  7161 ;;		None
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7171 ;;Total ram usage:        0 bytes
  7172 ;; Hardware stack levels used: 1
  7173 ;; Hardware stack levels required when called: 1
  7174 ;; This function calls:
  7175 ;;		Nothing
  7176 ;; This function is called by:
  7177 ;;		_main
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           	psect	text46
  7182   002DD6                     __ptext46:
  7183                           	callstack 0
  7184   002DD6                     _Interrupts_init:
  7185                           	callstack 29
  7186   002DD6                     
  7187                           ;../rc_servo.c: 12:     INTCONbits.IPEN = 1;
  7188   002DD6  8AF2               	bsf	242,5,c	;volatile
  7189                           
  7190                           ;../rc_servo.c: 13:     INTCONbits.PEIE = 1;
  7191   002DD8  8CF2               	bsf	242,6,c	;volatile
  7192                           
  7193                           ;../rc_servo.c: 16:     PIE0bits.TMR0IE = 1;
  7194   002DDA  010E               	movlb	14	; () banked
  7195   002DDC  8B29               	bsf	41,5,b	;volatile
  7196                           
  7197                           ;../rc_servo.c: 17:     IPR0bits.TMR0IP = 1;
  7198   002DDE  8B1F               	bsf	31,5,b	;volatile
  7199                           
  7200                           ;../rc_servo.c: 18:     PIR0bits.TMR0IF = 0;
  7201   002DE0  9B33               	bcf	51,5,b	;volatile
  7202                           
  7203                           ;../rc_servo.c: 20:     PIE2bits.C1IE=1;
  7204   002DE2  812B               	bsf	43,0,b	;volatile
  7205                           
  7206                           ;../rc_servo.c: 21:     IPR2bits.C1IP=0;
  7207   002DE4  9121               	bcf	33,0,b	;volatile
  7208                           
  7209                           ;../rc_servo.c: 22:     PIR2bits.C1IF=0;
  7210   002DE6  9135               	bcf	53,0,b	;volatile
  7211                           
  7212                           ;../rc_servo.c: 24:     INTCONbits.GIE = 1;
  7213   002DE8  8EF2               	bsf	242,7,c	;volatile
  7214   002DEA                     
  7215                           ; BSR set to: 14
  7216   002DEA  0012               	return		;funcret
  7217   002DEC                     __end_of_Interrupts_init:
  7218                           	callstack 0
  7219                           
  7220 ;; *************** function _HighISR *****************
  7221 ;; Defined at:
  7222 ;;		line 31 in file "../rc_servo.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;		None
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;		None
  7227 ;; Return value:  Size  Location     Type
  7228 ;;                  1    wreg      void 
  7229 ;; Registers used:
  7230 ;;		wreg, status,2, status,0
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7240 ;;Total ram usage:        0 bytes
  7241 ;; Hardware stack levels used: 1
  7242 ;; This function calls:
  7243 ;;		Nothing
  7244 ;; This function is called by:
  7245 ;;		Interrupt level 2
  7246 ;; This function uses a non-reentrant model
  7247 ;;
  7248                           
  7249                           	psect	intcode
  7250   000008                     __pintcode:
  7251                           	callstack 0
  7252   000008                     _HighISR:
  7253                           	callstack 22
  7254                           
  7255                           ; BSR set to: 14
  7256                           ;incstack = 0
  7257   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7258   00000A                     
  7259                           ;../rc_servo.c: 33:     if(PIR0bits.TMR0IF||!PORTFbits.RF2){
  7260   00000A  010E               	movlb	14	; () banked
  7261   00000C  BB33               	btfsc	51,5,b	;volatile
  7262   00000E  EF0B  F000         	goto	i2u190_41
  7263   000012  EF0D  F000         	goto	i2u190_40
  7264   000016                     i2u190_41:
  7265   000016  EF14  F000         	goto	i2l3206
  7266   00001A                     i2u190_40:
  7267   00001A                     
  7268                           ; BSR set to: 14
  7269   00001A  B48E               	btfsc	142,2,c	;volatile
  7270   00001C  EF12  F000         	goto	i2u191_41
  7271   000020  EF14  F000         	goto	i2u191_40
  7272   000024                     i2u191_41:
  7273   000024  EF1D  F000         	goto	i2l381
  7274   000028                     i2u191_40:
  7275   000028                     i2l3206:
  7276                           
  7277                           ; BSR set to: 14
  7278                           ;../rc_servo.c: 36:         time++;
  7279   000028  0101               	movlb	1	; () banked
  7280   00002A  4BF4               	infsnz	_time& (0+255),f,b
  7281   00002C  2BF5               	incf	(_time+1)& (0+255),f,b
  7282   00002E                     
  7283                           ; BSR set to: 1
  7284                           ;../rc_servo.c: 39:         TMR0L = 0b11011011;
  7285   00002E  0EDB               	movlw	219
  7286   000030  6ED3               	movwf	211,c	;volatile
  7287   000032                     
  7288                           ; BSR set to: 1
  7289                           ;../rc_servo.c: 40:         TMR0H = 0b00001011;
  7290   000032  0E0B               	movlw	11
  7291   000034  6ED4               	movwf	212,c	;volatile
  7292   000036                     
  7293                           ; BSR set to: 1
  7294                           ;../rc_servo.c: 42:         PIR0bits.TMR0IF=0;
  7295   000036  010E               	movlb	14	; () banked
  7296   000038  9B33               	bcf	51,5,b	;volatile
  7297   00003A                     i2l381:
  7298                           
  7299                           ; BSR set to: 14
  7300   00003A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7301   00003C  0011               	retfie		f
  7302   00003E                     __end_of_HighISR:
  7303                           	callstack 0
  7304                           
  7305                           	psect	rparam
  7306   000000                     
  7307                           	psect	temp
  7308   00005F                     btemp:
  7309                           	callstack 0
  7310   00005F                     	ds	1
  7311   000000                     int$flags	set	btemp
  7312   000000                     wtemp8	set	btemp+1
  7313   000000                     ttemp5	set	btemp+1
  7314   000000                     ttemp6	set	btemp+4
  7315   000000                     ttemp7	set	btemp+8
  7316                           
  7317                           	psect	idloc
  7318                           
  7319                           ;Config register IDLOC0 @ 0x200000
  7320                           ;	unspecified, using default values
  7321   200000                     	org	2097152
  7322   200000  0FFF               	dw	4095
  7323                           
  7324                           ;Config register IDLOC1 @ 0x200002
  7325                           ;	unspecified, using default values
  7326   200002                     	org	2097154
  7327   200002  0FFF               	dw	4095
  7328                           
  7329                           ;Config register IDLOC2 @ 0x200004
  7330                           ;	unspecified, using default values
  7331   200004                     	org	2097156
  7332   200004  0FFF               	dw	4095
  7333                           
  7334                           ;Config register IDLOC3 @ 0x200006
  7335                           ;	unspecified, using default values
  7336   200006                     	org	2097158
  7337   200006  0FFF               	dw	4095
  7338                           
  7339                           ;Config register IDLOC4 @ 0x200008
  7340                           ;	unspecified, using default values
  7341   200008                     	org	2097160
  7342   200008  0FFF               	dw	4095
  7343                           
  7344                           ;Config register IDLOC5 @ 0x20000A
  7345                           ;	unspecified, using default values
  7346   20000A                     	org	2097162
  7347   20000A  0FFF               	dw	4095
  7348                           
  7349                           ;Config register IDLOC6 @ 0x20000C
  7350                           ;	unspecified, using default values
  7351   20000C                     	org	2097164
  7352   20000C  0FFF               	dw	4095
  7353                           
  7354                           ;Config register IDLOC7 @ 0x20000E
  7355                           ;	unspecified, using default values
  7356   20000E                     	org	2097166
  7357   20000E  0FFF               	dw	4095
  7358                           
  7359                           	psect	config
  7360                           
  7361                           ;Config register CONFIG1L @ 0x300000
  7362                           ;	External Oscillator mode Selection bits
  7363                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7364                           ;	Power-up default value for COSC bits
  7365                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7366   300000                     	org	3145728
  7367   300000  AA                 	db	170
  7368                           
  7369                           ;Config register CONFIG1H @ 0x300001
  7370                           ;	unspecified, using default values
  7371                           ;	Clock Out Enable bit
  7372                           ;	CLKOUTEN = 0x1, unprogrammed default
  7373                           ;	Clock Switch Enable bit
  7374                           ;	CSWEN = 0x1, unprogrammed default
  7375                           ;	Fail-Safe Clock Monitor Enable bit
  7376                           ;	FCMEN = 0x1, unprogrammed default
  7377   300001                     	org	3145729
  7378   300001  FF                 	db	255
  7379                           
  7380                           ;Config register CONFIG2L @ 0x300002
  7381                           ;	unspecified, using default values
  7382                           ;	Master Clear Enable bit
  7383                           ;	MCLRE = 0x1, unprogrammed default
  7384                           ;	Power-up Timer Enable bit
  7385                           ;	PWRTE = 0x1, unprogrammed default
  7386                           ;	Low-power BOR enable bit
  7387                           ;	LPBOREN = 0x1, unprogrammed default
  7388                           ;	Brown-out Reset Enable bits
  7389                           ;	BOREN = 0x3, unprogrammed default
  7390   300002                     	org	3145730
  7391   300002  FF                 	db	255
  7392                           
  7393                           ;Config register CONFIG2H @ 0x300003
  7394                           ;	unspecified, using default values
  7395                           ;	Brown Out Reset Voltage selection bits
  7396                           ;	BORV = 0x3, unprogrammed default
  7397                           ;	ZCD Disable bit
  7398                           ;	ZCD = 0x1, unprogrammed default
  7399                           ;	PPSLOCK bit One-Way Set Enable bit
  7400                           ;	PPS1WAY = 0x1, unprogrammed default
  7401                           ;	Stack Full/Underflow Reset Enable bit
  7402                           ;	STVREN = 0x1, unprogrammed default
  7403                           ;	Debugger Enable bit
  7404                           ;	DEBUG = 0x1, unprogrammed default
  7405                           ;	Extended Instruction Set Enable bit
  7406                           ;	XINST = 0x1, unprogrammed default
  7407   300003                     	org	3145731
  7408   300003  FF                 	db	255
  7409                           
  7410                           ;Config register CONFIG3L @ 0x300004
  7411                           ;	WDT Period Select bits
  7412                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7413                           ;	WDT operating mode
  7414                           ;	WDTE = OFF, WDT Disabled
  7415   300004                     	org	3145732
  7416   300004  9F                 	db	159
  7417                           
  7418                           ;Config register CONFIG3H @ 0x300005
  7419                           ;	unspecified, using default values
  7420                           ;	WDT Window Select bits
  7421                           ;	WDTCWS = 0x7, unprogrammed default
  7422                           ;	WDT input clock selector
  7423                           ;	WDTCCS = 0x7, unprogrammed default
  7424   300005                     	org	3145733
  7425   300005  FF                 	db	255
  7426                           
  7427                           ;Config register CONFIG4L @ 0x300006
  7428                           ;	unspecified, using default values
  7429                           ;	Write Protection Block 0
  7430                           ;	WRT0 = 0x1, unprogrammed default
  7431                           ;	Write Protection Block 1
  7432                           ;	WRT1 = 0x1, unprogrammed default
  7433                           ;	Write Protection Block 2
  7434                           ;	WRT2 = 0x1, unprogrammed default
  7435                           ;	Write Protection Block 3
  7436                           ;	WRT3 = 0x1, unprogrammed default
  7437                           ;	Write Protection Block 3
  7438                           ;	WRT4 = 0x1, unprogrammed default
  7439                           ;	Write Protection Block 3
  7440                           ;	WRT5 = 0x1, unprogrammed default
  7441                           ;	Write Protection Block 3
  7442                           ;	WRT6 = 0x1, unprogrammed default
  7443                           ;	Write Protection Block 3
  7444                           ;	WRT7 = 0x1, unprogrammed default
  7445   300006                     	org	3145734
  7446   300006  FF                 	db	255
  7447                           
  7448                           ;Config register CONFIG4H @ 0x300007
  7449                           ;	unspecified, using default values
  7450                           ;	Configuration Register Write Protection bit
  7451                           ;	WRTC = 0x1, unprogrammed default
  7452                           ;	Boot Block Write Protection bit
  7453                           ;	WRTB = 0x1, unprogrammed default
  7454                           ;	Data EEPROM Write Protection bit
  7455                           ;	WRTD = 0x1, unprogrammed default
  7456                           ;	Scanner Enable bit
  7457                           ;	SCANE = 0x1, unprogrammed default
  7458                           ;	Low Voltage Programming Enable bit
  7459                           ;	LVP = 0x1, unprogrammed default
  7460   300007                     	org	3145735
  7461   300007  FF                 	db	255
  7462                           
  7463                           ;Config register CONFIG5L @ 0x300008
  7464                           ;	unspecified, using default values
  7465                           ;	UserNVM Program Memory Code Protection bit
  7466                           ;	CP = 0x1, unprogrammed default
  7467                           ;	DataNVM Memory Code Protection bit
  7468                           ;	CPD = 0x1, unprogrammed default
  7469   300008                     	org	3145736
  7470   300008  FF                 	db	255
  7471                           
  7472                           ;Config register CONFIG5H @ 0x300009
  7473                           ;	unspecified, using default values
  7474   300009                     	org	3145737
  7475   300009  FF                 	db	255
  7476                           
  7477                           ;Config register CONFIG6L @ 0x30000A
  7478                           ;	unspecified, using default values
  7479                           ;	Table Read Protection Block 0
  7480                           ;	EBTR0 = 0x1, unprogrammed default
  7481                           ;	Table Read Protection Block 1
  7482                           ;	EBTR1 = 0x1, unprogrammed default
  7483                           ;	Table Read Protection Block 2
  7484                           ;	EBTR2 = 0x1, unprogrammed default
  7485                           ;	Table Read Protection Block 3
  7486                           ;	EBTR3 = 0x1, unprogrammed default
  7487                           ;	Table Read Protection Block 4
  7488                           ;	EBTR4 = 0x1, unprogrammed default
  7489                           ;	Table Read Protection Block 5
  7490                           ;	EBTR5 = 0x1, unprogrammed default
  7491                           ;	Table Read Protection Block 6
  7492                           ;	EBTR6 = 0x1, unprogrammed default
  7493                           ;	Table Read Protection Block 7
  7494                           ;	EBTR7 = 0x1, unprogrammed default
  7495   30000A                     	org	3145738
  7496   30000A  FF                 	db	255
  7497                           
  7498                           ;Config register CONFIG6H @ 0x30000B
  7499                           ;	unspecified, using default values
  7500                           ;	Boot Block Table Read Protection bit
  7501                           ;	EBTRB = 0x1, unprogrammed default
  7502   30000B                     	org	3145739
  7503   30000B  FF                 	db	255
  7504                           tosu	equ	0xFFF
  7505                           tosh	equ	0xFFE
  7506                           tosl	equ	0xFFD
  7507                           stkptr	equ	0xFFC
  7508                           pclatu	equ	0xFFB
  7509                           pclath	equ	0xFFA
  7510                           pcl	equ	0xFF9
  7511                           tblptru	equ	0xFF8
  7512                           tblptrh	equ	0xFF7
  7513                           tblptrl	equ	0xFF6
  7514                           tablat	equ	0xFF5
  7515                           prodh	equ	0xFF4
  7516                           prodl	equ	0xFF3
  7517                           indf0	equ	0xFEF
  7518                           postinc0	equ	0xFEE
  7519                           postdec0	equ	0xFED
  7520                           preinc0	equ	0xFEC
  7521                           plusw0	equ	0xFEB
  7522                           fsr0h	equ	0xFEA
  7523                           fsr0l	equ	0xFE9
  7524                           wreg	equ	0xFE8
  7525                           indf1	equ	0xFE7
  7526                           postinc1	equ	0xFE6
  7527                           postdec1	equ	0xFE5
  7528                           preinc1	equ	0xFE4
  7529                           plusw1	equ	0xFE3
  7530                           fsr1h	equ	0xFE2
  7531                           fsr1l	equ	0xFE1
  7532                           bsr	equ	0xFE0
  7533                           indf2	equ	0xFDF
  7534                           postinc2	equ	0xFDE
  7535                           postdec2	equ	0xFDD
  7536                           preinc2	equ	0xFDC
  7537                           plusw2	equ	0xFDB
  7538                           fsr2h	equ	0xFDA
  7539                           fsr2l	equ	0xFD9
  7540                           status	equ	0xFD8

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         187
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     92      94
    BANK0           160    159     160
    BANK1           256    240     252
    BANK2           256      0     172
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2391$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2338$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2338$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    motor_action@r	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_action@l	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    spin_180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    spin_180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_onesquare@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_onesquare@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_fromcard@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_fromcard@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    S589DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    S589DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    color_processor_hard@calibrated	PTR unsigned int  size(2) Largest target is 64
		 -> main@color_calibrated(BANK1[64]), 

    color_processor_hard@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_processor_easy@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_read@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), main@RGB_calibrated(BANK1[8]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _motor_action->_left_135
    _motor_action->_left_90
    _motor_action->_reverse_fromcard
    _motor_action->_reverse_onesquare
    _motor_action->_right_135
    _motor_action->_right_90
    _motor_action->_spin_180
    _stop->_setMotorPWM
    _spin_180->_setMotorPWM
    _right_90->_setMotorPWM
    _right_135->_setMotorPWM
    _reverse_onesquare->_setMotorPWM
    _reverse_fromcard->_setMotorPWM
    _left_90->_setMotorPWM
    _left_135->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _color_read->_color_read_Blue
    _color_read->_color_read_Green
    _color_read->_color_read_Luminosity
    _color_read->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Luminosity->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               385   385      0   59782
                                             88 COMRAM     4     4      0
                                             27 BANK0    132   132      0
                                              0 BANK1    240   240      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
               _color_processor_easy
               _color_processor_hard
                         _color_read
                            _forward
                    _initDCmotorsPWM
                         _initUSART4
                       _motor_action
                  _sendStringSerial4
                        _setMotorPWM
                           _spin_180
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    5722
                                              0 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5219
                                             80 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    4869
                                             62 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3649
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     219
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _motor_action                                         8     2      6   34613
                                             33 COMRAM     8     2      6
                            _forward
                           _left_135
                            _left_90
                   _reverse_fromcard
                  _reverse_onesquare
                          _right_135
                           _right_90
                           _spin_180
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 7     3      4    5075
                                             25 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _spin_180                                             8     4      4    3403
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_90                                             8     4      4    3555
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_135                                            8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_onesquare                                    8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_fromcard                                     8     4      4    4163
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_90                                              8     4      4    3555
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_135                                             8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _forward                                              6     2      4    3707
                                             25 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    2703
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read                                           4     2      2     768
                                             11 COMRAM     4     2      2
                    _color_read_Blue
                   _color_read_Green
              _color_read_Luminosity
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Luminosity                                7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_processor_hard                                26    22      4     829
                                              0 COMRAM    24    20      4
 ---------------------------------------------------------------------------------
 (1) _color_processor_easy                                10     8      2     346
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_processor_easy
   _color_processor_hard
   _color_read
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Luminosity
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _motor_action
     _forward
     _left_135
       _setMotorPWM
     _left_90
       _setMotorPWM
     _reverse_fromcard
       _setMotorPWM
     _reverse_onesquare
       _setMotorPWM
     _right_135
       _setMotorPWM
     _right_90
       _setMotorPWM
     _spin_180
       _setMotorPWM
     _stop
       _setMotorPWM
   _sendStringSerial4
     _sendCharSerial4
   _setMotorPWM
   _spin_180
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
   _stop

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      60        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      AC       9       67.2%
BITBANK1           100      0       0       6        0.0%
BANK1              100     F0      FC       7       98.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      A0       5      100.0%
BITBIGSFRllllhh     91      0       0      40        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5C      5E       1      100.0%
BITBIGSFRllllll     32      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      49        0.0%
BITBIGSFRllllll     26      0       0      58        0.0%
BITBIGSFRllllhl     20      0       0      43        0.0%
BITBIGSFRhhlhhh     1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      35        0.0%
BITBIGSFRhhlhl      13      0       0      34        0.0%
BITBIGSFRhllh       11      0       0      37        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      44        0.0%
BITBIGSFRllllhh      8      0       0      41        0.0%
BITBIGSFRllllll      7      0       0      54        0.0%
BITBIGSFRllllll      7      0       0      52        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRllllll      6      0       0      48        0.0%
BITBIGSFRllllll      5      0       0      47        0.0%
BITBIGSFRhlll        5      0       0      38        0.0%
BITBIGSFRllllll      3      0       0      46        0.0%
BITBIGSFRllh         2      0       0      39        0.0%
BITBIGSFRllllll      1      0       0      50        0.0%
BITBIGSFRllllll      1      0       0      51        0.0%
BITBIGSFRllllll      1      0       0      55        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      56        0.0%
BITBIGSFRllllhl      1      0       0      42        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2A6      59        0.0%
DATA                 0      0     2A6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Dec 11 14:33:37 2022

                 _color_read_Red 2A46                  _color_read_Blue 2B36  
                             l33 29A0                               l42 2A94  
                             l51 2342                               l36 2D7E  
                             l45 2B34                               l70 1A32  
                             l39 2AE4                               l64 1914  
                             l48 2B84                               l58 229C  
                             l66 1976                               l68 19D8  
                             l98 2D10                     ___awdiv@sign 000C  
            ___wmul@multiplicand 0003                 _color_read_Green 2AE6  
              ??_Interrupts_init 0001                              l101 2D12  
                            l110 2E00                              l104 2D38  
                            l113 2E0A                              l201 1044  
                            l107 2E14                              l116 2DF6  
                            l204 1082                              l205 1096  
                            l214 12A8                              l119 2C4C  
                            l303 252C                              l313 27B4  
                            l308 25CE                              l261 2C0A  
                            l327 184E                              l425 2DBC  
                            l273 2842                              l434 2DC0  
                            l283 2712                              l443 2CBC  
                            l268 1C06                              l373 2DEA  
                            l293 23E6                              l437 2DD4  
                            l197 0EB8                              l446 2D5E  
                            l278 28CC                              l384 2D9E  
                            l288 2670                              l560 1D8E  
                            l298 248A                              l573 1EF2  
                            l677 21DE                motor_action@color 0022  
                            u970 2064                              u971 2060  
                            u980 2076                              u981 2072  
                            u990 209E                              u991 209A  
                            _abs 2C4E                              _pad 28CE  
                            wreg 000FE8                             l1201 211A  
                           ?_abs 0013                             l1212 2E16  
                           l1124 29F2                             l1150 2946  
                           l1209 2BC8                             l3002 17F2  
                           l1146 28F0                             l3010 0E18  
                           l1155 13F0                             l2300 1DA2  
                           l3100 1110                             l3020 0E34  
                           l3012 0E24                             l1157 13F8  
                           l2310 1E12                             l2302 1DC2  
                           l2230 2052                             l1158 143E  
                           l1182 2A44                             l3110 1158  
                           l3102 1118                             l3030 0E4E  
                           l3022 0E34                             l3014 0E28  
                           l2400 21D6                             l2320 1E8A  
                           l2312 1E1A                             l2304 1DC6  
                           l2240 20D4                             l2232 2064  
                           l1176 2050                             l3120 1200  
                           l3112 1170                             l3104 112A  
                           l3040 0E76                             l3032 0E52  
                           l3024 0E3A                             l3016 0E2C  
                           l3008 0E14                             l1169 15E0  
                           l2322 1E9C                             l2314 1E2E  
                           l2306 1DD4                             l1186 2C84  
                           l2234 2076                             l2250 2BA8  
                           l2410 13A8                             l3122 120C  
                           l3114 118C                             l3106 113E  
                           l3130 123E                             l3050 0EAC  
                           l3042 0E7E                             l3034 0E5A  
                           l3026 0E3E                             l3018 0E30  
                           l2260 1C3E                             l2252 1C08  
                           l2316 1E3C                             l2324 1EA2  
                           l2308 1DF4                             l2236 2080  
                           l2244 2B86                             l2340 2910  
                           l2332 28CE                             l2420 1416  
                           l2412 13C8                             l2404 1364  
                           l2500 1EF4                             l3124 1228  
                           l3116 11A8                             l3108 114A  
                           l3132 1256                             l3060 0EDC  
                           l3052 0EC6                             l3044 0E8A  
                           l3036 0E5E                             l3028 0E46  
                           l1189 2C8C                             l2350 2D12  
                           l2270 1C9A                             l2262 1C4C  
                           l2254 1C0C                             l2326 1EB2  
                           l2318 1E6A                             l2238 209E  
                           l2246 2B92                             l2342 2914  
                           l2334 28DC                             l2430 1450  
                           l2422 1426                             l2414 13E4  
                           l2406 1384                             l2510 1F4C  
                           l2502 1F1C                             l3150 1310  
                           l3142 12AA                             l3134 126C  
                           l3126 122E                             l3118 11C2  
                           l3070 0FAE                             l3062 0F0A  
                           l3046 0E96                             l3038 0E72  
                           l2352 2D22                             l2360 211C  
                           l2600 2802                             l2280 1D04  
                           l2272 1CA2                             l2264 1C6C  
                           l2256 1C1A                             l2328 1ED2  
                           l2248 2BA4                             l2344 2932  
                           l2336 28E8                             l2432 1456  
                           l2440 1548                             l2424 1432  
                           l2416 1400                             l2408 1398  
                           l2520 2012                             l2512 1F6C  
                           l2504 1F2A                             l3152 1316  
                           l3144 12B2                             l3136 1280  
                           l3128 1236                             l3080 1022  
                           l3072 0FE4                             l3064 0F40  
                           l3048 0EA0                             l2530 2CE8  
                           l2370 2148                             l2362 2120  
                           l2354 2D3A                             l2610 24AC  
                           l2602 280E                             l2290 1D4E  
                           l2282 1D24                             l2274 1CB6  
                           l2266 1C70                             l2258 1C3A  
                           l2346 2C4E                             l2338 28FC  
                           l2450 15B0                             l2442 1562  
                           l2434 14D8                             l2426 143A  
                           l2418 1410                             l2514 1F8C  
                           l2506 1F38                             l3154 1340  
                           l3146 12E0                             l3138 128A  
                           l3090 10A4                             l3082 1028  
                           l3074 0FF0                             l3066 0F76  
                           l3058 0ED0                             l2540 2CFE  
                           l2532 2CF2                             l2460 2DEE  
                           l2380 2176                             l2372 2150  
                           l2364 212E                             l2356 2D56  
                           l2700 23E8                             l2620 24CE  
                           l2604 281C                             l3236 1808  
                           l2292 1D6E                             l2284 1D26  
                           l2276 1CC4                             l2268 1C7C  
                           l2348 2C68                             l2452 15C0  
                           l2444 1580                             l2436 14DE  
                           l2428 1446                             l2516 1FE2  
                           l2508 1F3C                             l2524 2024  
                           l3156 1354                             l3148 12F8  
                           l3092 10B8                             l3084 1054  
                           l3076 1008                             l3068 0FAC  
                           l2534 2CF8                             l2462 2DF2  
                           l2542 2D62                             l2470 2DFC  
                           l2550 2A46                             l2390 21B0  
                           l2382 217E                             l2374 2154  
                           l2366 2136                             l2710 241E  
                           l2702 2408                             l2630 2516  
                           l2622 24DA                             l2606 2828  
                           l2286 1D38                             l2278 1CD6  
                           l2446 159A                             l2438 14E4  
                           l3094 10D0                             l3086 1090  
                           l3078 100A                             l2536 2CFA  
                           l2456 2E0C                             l2464 2E02  
                           l2800 297E                             l2480 2C48  
                           l2472 2C0E                             l2544 2A96  
                           l2552 2A8C                             l2392 21B2  
                           l2384 218C                             l2376 215C  
                           l2368 213A                             l2720 2456  
                           l2712 242A                             l2640 269A  
                           l2632 2672                             l2624 24E6  
                           l2616 24B4                             l2608 248C  
                           l2288 1D3E                             l2296 1D90  
                           l2448 15AA                             l3096 10DC  
                           l3088 109C                             l2538 2CFC  
                           l2458 2E10                             l2466 2E06  
                           l2810 2988                             l2802 2980  
                           l2482 2C4A                             l2474 2C12  
                           l2562 2B36                             l2546 2ADC  
                           l2394 21B8                             l2386 2192  
                           l2378 216E                             l2490 1AB2  
                           l2570 2864                             l2722 2472  
                           l2714 2436                             l2650 26DE  
                           l2642 26B2                             l2634 2692  
                           l2626 24EE                             l2618 24C0  
                           l2298 1D94                             l3098 10F4  
                           l2820 2992                             l2812 298A  
                           l2804 2982                             l2476 2C1A  
                           l2468 2DF8                             l2564 2B7C  
                           l2556 2AE6                             l2388 21A8  
                           l2396 21BE                             l2492 1AF8  
                           l2580 2890                             l2716 2442  
                           l2708 2410                             l2652 26FA  
                           l2644 26BE                             l2740 2588  
                           l2732 2556                             l2724 252E  
                           l2628 24FA                             l2830 299E  
                           l2822 2994                             l2814 298C  
                           l2806 2984                             l2902 1A2A  
                           l2478 2C22                             l2558 2B2C  
                           l2910 2BCA                             l2398 21CE  
                           l2494 1B18                             l2486 1A34  
                           l2582 289C                             l2750 2734  
                           l2718 244A                             l2646 26CA  
                           l2670 2630                             l2662 25F8  
                           l2654 25D0                             l2742 2590  
                           l2734 2562                             l2726 254E  
                           l2590 27D6                             l2824 2996  
                           l2816 298E                             l2808 2986  
                           l2840 2312                             l2832 229E  
                           l2920 2C08                             l2912 2BDA  
                           l2496 1B34                             l2488 1A50  
                           l2584 28A4                             l2576 286C  
                           l2568 2844                             l2760 2756  
                           l2648 26D2                             l2672 263C  
                           l2664 2610                             l2656 25F0  
                           l2744 259C                             l2736 2570  
                           l2922 2DD6                             l2930 2D9C  
                           l2826 2998                             l2818 2990  
                           l2850 2254                             l2842 21E0  
                           l2834 22B2                             l2914 2BEE  
                           l2498 1B9E                             l2586 28B0  
                           l2578 2884                             l2770 279E  
                           l2762 2762                             l2674 2658  
                           l2666 261C                             l2746 25B8  
                           l2738 257C                             l2690 2392  
                           l2924 2D80                             l2828 299C  
                           l2852 226A                             l2844 221C  
                           l2836 22CA                             l2916 2BF2  
                           l2940 2DB8                             l2932 2DA0  
                           l2764 276E                             l2756 273C  
                           l2748 2714                             l2668 2628  
                           l2692 239E                             l2684 236C  
                           l2676 2344                             l2596 27DE  
                           l2588 27B6                             l2772 2DC0  
                           l2780 2A1C                             l2926 2D88  
                           l2790 2956                             l2854 2280  
                           l2846 2232                             l2870 188C  
                           l2862 1850                             l2838 22FA  
                           l2918 2C06                             l2942 2DBA  
                           l2934 2DAA                             l2766 2776  
                           l2758 274A                             l2694 23A6  
                           l2686 2378                             l2678 2364  
                           l2598 27F6                             l2774 2DD0  
                           l2782 2A3C                             l2950 29C4  
                           ?_pad 0011                             l2928 2D92  
                           l2792 2966                             l2856 228C  
                           l2848 2248                             l2880 192E  
                           l2872 18C8                             l2864 188C  
                           l2936 2DAC                             l2768 2782  
                           l2696 23B2                             l2688 2386  
                           l2960 2CA0                             l2776 29F4  
                           l2952 29E0                             l2944 29A2  
                           l2794 2970                             l2786 2948  
                           l2858 2294                             l2890 19D4  
                           l2882 1950                             l2874 18CC  
                           l2938 2DB6                             l2698 23CE  
                           l2970 1626                             l2962 2CA4  
                           l2778 2A00                             l2946 29B4  
                           l2796 297A                             l2788 294C  
                           l2892 19FE                             l2884 1972  
                           l2876 18EE                             l2980 16A6  
                           l2972 163A                             l2964 15E2  
                           l2956 2C8E                             l2948 29BC  
                           l2798 297C                             l2894 1A0E  
                           l2886 1990                             l2878 1910  
                           l2990 172A                             l2982 16BE  
                           l2974 1652                             l2966 15E6  
                           l2958 2C92                             l2896 1A1E  
                           l2888 19B2                             l2992 1756  
                           l2984 16E6                             l2976 167A  
                           l2968 160E                             l2994 1782  
                           l2986 16FE                             l2978 1692  
                           l2996 17AE                             l2988 1712  
                           l2998 17DA                             STR_1 0E04  
                           STR_2 0E01                             u1000 20D4  
                           u1001 20D0                             u1010 2BC8  
                           u1011 2BC4                             u1020 1C1A  
                           u1100 1DD4                             u1021 1C16  
                           u1101 1DD0                             u1030 1C4C  
                           u1110 1E12                             u1031 1C48  
                           u1111 1E0E                             u1200 212E  
                           u1120 1E3C                             u1201 212A  
                           u1041 1C76                             u1121 1E38  
                           u1210 2148                             u1050 1C9A  
                           u1130 1E6A                             u1211 2144  
                           u1051 1C96                             u1131 1E66  
                           u1220 216E                             u1060 1CC4  
                           u1140 1EB2                             u1300 1410  
                           u1221 216A                             u1061 1CC0  
                           u1141 1EAE                             u1301 140C  
                           u1230 218C                             u1070 1D04  
                           u1150 28DC                             u1310 1426  
                           u1231 2188                             u2007 2814  
                           u1071 1D00                             u1151 28D8  
                           u1311 1422                             u1240 21A8  
                           u1080 1D4E                             u1160 2932  
                           u1320 1562                             u1241 21A4  
                           u2017 24E8                             u1081 1D4A  
                           u1161 292E                             u1321 155E  
                           u1250 21CE                             u1090 1DA2  
                           u1170 2C68                             u1330 1580  
                           u1251 21CA                             u2107 2704  
                           u2027 2520                             u1091 1D9E  
                           u1171 2C64                             u1331 157C  
                           u1180 2D22                             u1404 1B8E  
                           u1500 23CE                             u1340 159A  
                           u1260 1394                             u1420 1F1C  
                           u1181 2D1E                             u1405 1B8A  
                           u2117 2444                             u1501 23CA  
                           u2037 23A0                             u1341 1596  
                           u1261 138E                             u1421 1F18  
                           u1190 2D38                             u1414 1BF8  
                           u1510 2472                             u1350 15AA  
                           u1270 1396                             u1430 1F6C  
                           u1191 2D34                             u1415 1BF4  
                           u2127 247C                             u1511 246E  
                           u2047 23D8                             u1351 15A6  
                           u1431 1F68                             u1600 18EE  
                           u1360 2C36                             u1520 25B8  
                           u1280 13A8                             u1440 1F8C  
                   _BAUD4CONbits 000EE9                             u1601 18EA  
                           u1361 2C2E                             u2137 2770  
                           u1521 25B4                             u2057 258A  
                           u1281 13A4                             u1441 1F88  
                           _LATE 000F7D                             u1610 1910  
                           u1450 28CC                             u1530 279E  
                           u1290 13E4                             u1611 190C  
                           u1451 28C8                             u2147 27A8  
                           u1531 279A                             u2067 25C2  
                           u1291 13E0                             _LATG 000F7F  
                           u1700 19EA                             u1620 1926  
                           u1380 1A50                             u1460 2842  
                           u1540 2DD0                             u1701 19E4  
                           u1621 1920                             u1381 1A4C  
                           u2157 289E                             u2077 262A  
                           u1461 283E                             u1541 2DCC  
                           u1710 19EC                             u1630 1928  
                           u1390 1B34                             u1470 2516  
                           u1550 2A3C                             u2167 22BC  
                           u1391 1B30                             u2087 2662  
                           u1471 2512                             u1551 2A38  
                           u1560 2232                             u1720 19FE  
                           u1640 1950                             u1480 26FA  
                           u1800 1070                             u1561 222E  
                           u1721 19FA                             u1641 194C  
                           u2177 22EC                             u1481 26F6  
                           u2097 26CC                             u1801 1068  
                           u1570 2248                             u1730 1A0E  
                           u1650 1972                             u1378 2C38  
                           u1490 2658                             u1810 1082  
                           _T2PR 000FBC                             u1571 2244  
                           u1731 1A0A                             u1651 196E  
                           u2187 231C                             u1491 2654  
                           u1811 107E                             u1580 226A  
                           u1740 1A1E                             u1660 1988  
                           u1820 1090                             u2197 295C  
                           u1581 2266                             u1741 1A1A  
                           u1661 1982                             u1821 108C  
                           u1590 2280                             u1670 198A  
                           u1750 2CBC                             u1830 10F4  
                           u1591 227C                             u1751 2CB8  
                           u1831 10F0                             u1680 19B2  
                           u1840 1110                             u1808 1072  
                           u1681 19AE                             u1841 110C  
                           u1761 0EA6                             u1690 19D4  
                           u1850 112A                             u1691 19D0  
                           u1851 1126                             u1771 0EB2  
                           u1860 1158                             u1780 0EC6  
                           u1861 1154                             u1781 0EC2  
                           u1870 126C                             u1790 1044  
                           u1871 1268                             u1791 1040  
                           u1927 0FFA                             u1880 12A4  
                           u1881 12A0                             u1937 1014  
                           u1890 1340                             u1891 133C  
                           u1947 10C2                             u1957 1248  
                           u1967 1302                             u1977 1618  
                           u1987 1684                             u1997 16F0  
                           abs@a 0013                             _dbuf 028C  
                           _main 0E14                             _dtoa 1364  
                           _prec 01F2                             _time 01F4  
                           pad@i 0018                             pad@p 0015  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             pad@w 001A  
                           fsr2l 000FD9                             btemp 005F  
                           _stop 27B6                             prodh 000FF4  
                           prodl 000FF3                             start 003E  
         __end_of_color_read_Red 2A96                  __end_of_HighISR 003E  
                   ___param_bank 000000                            ??_abs 0015  
                          ??_pad 0017         _color_processor_hard$370 000A  
       _color_processor_hard$372 000B         _color_processor_hard$374 000C  
                __end_of___aodiv 1D90                            ?_main 0001  
                          ?_dtoa 001C                  __end_of___aomod 1EF4  
                __end_of___awdiv 21E0          ??_color_read_Luminosity 0007  
                          ?_stop 001A                  ___awdiv@divisor 0009  
                          i2l381 003A                  ___awdiv@counter 000B  
                   vfpfcnvrt@fmt 0041                            _TMR0H 000FD4  
                          _TMR0L 000FD3                     main@readout2 007B  
                   main@readout3 0100          __end_of_sendCharSerial4 2DD6  
     __end_of_I2C_2_Master_Start 2E16       __end_of_I2C_2_Master_Write 2DF8  
                __end_of_left_90 248C                            _flags 01FA  
                          _fputc 2052                  __end_of_forward 28CE  
                          _fputs 2B86                            pad@fp 0011  
                          _width 01F0                            _putch 2E16  
                          main@i 01CC                            main@j 01C6  
                          main@k 01C8                            dtoa@d 001E  
                          dtoa@i 003C                            dtoa@n 0034  
                          dtoa@p 0030                            dtoa@s 003E  
                          dtoa@w 0032                            tablat 000FF5  
                          ttemp5 0060                            ttemp6 0063  
                          ttemp7 0067                            stop@i 001F  
                          status 000FD8                            wtemp8 0060  
                __end_of_sprintf 29F4          __end_of_color_read_Blue 2B86  
          _I2C_2_Master_RepStart 2DF8                  ?_color_read_Red 0005  
                __initialization 2CBE   color_processor_hard@calibrated 0003  
                   __end_of_main 1364                     __end_of_dtoa 15E2  
                   __end_of_stop 2844                           ??_main 0059  
                         ??_dtoa 0026                           ??_stop 001E  
                  __activetblptr 000003                     ?_setMotorPWM 000F  
                         ?_fputc 0001                           ?_fputs 000A  
               ___awdiv@dividend 0007                           ?_putch 0001  
                         _RC0PPS 000E62                           _RC4REG 000EE3  
                         _RE2PPS 000E74                           _RD5PPS 000E6F  
                         _RC7PPS 000E69                           _RD6PPS 000E70  
                         i2l3210 0032                           i2l3202 000A  
                         i2l3212 0036                           i2l3204 001A  
                         i2l3206 0028                           i2l3208 002E  
                      ??_HighISR 0001         __end_of_color_click_init 29A2  
                         _RX4PPS 000E15                           _TX4REG 000EE4  
                  ??_Timer0_init 0001        color_processor_easy@color 0003  
                   vfprintf@cfmt 0057                 __end_of_left_135 27B6  
                      ??___aodiv 0011                        ??___aomod 0011  
                         ___wmul 2D3A                        ??___awdiv 000B  
                         clear_0 2CC4                           clear_1 2CD0  
               ___awdiv@quotient 000D                           isa$std 000001  
                         pad@buf 0013                           dtoa@fp 001C  
                      ??_left_90 001E                 __end_of_right_90 23E8  
                  main@time_path 0164                           fputc@c 0001  
                         fputs@c 000E                           fputs@i 000F  
                         fputs@s 000A                        ??_forward 001E  
               __end_of_spin_180 252E                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 ?_sendCharSerial4 0001  
                         putch@c 0001                 __end_of_vfprintf 2A46  
                         stop@mL 001A                           stop@mR 001C  
              ??_initDCmotorsPWM 0003                        ??_sprintf 0059  
            reverse_onesquare@mL 001A              reverse_onesquare@mR 001C  
                     __accesstop 0060          __end_of__initialization 2CDE  
       __end_of_color_read_Green 2B36           ?_I2C_2_Master_RepStart 0001  
                  ___rparam_used 000001                 ?_color_read_Blue 0005  
                _Interrupts_init 2DD6                   __pcstackCOMRAM 0001  
                  color_read@rgb 000C                    __end_of_fputc 211C  
                  __end_of_fputs 2BCA                    __end_of_putch 2E18  
            __end_of_Timer0_init 2DA0                          ??_fputc 0005  
                        ??_fputs 000E                          ??_putch 0001  
                     __pbssBANK0 00FF                       __pbssBANK1 01F0  
                     __pbssBANK2 0200           color_processor_hard@cb 0017  
         color_processor_hard@cg 0015           color_processor_hard@cr 0013  
              _color_writetoaddr 2D60                     _T2CLKCONbits 000FBF  
             ?_color_writetoaddr 0003                          ?___wmul 0001  
                 main@color_flag 005B                   main@color_name 01CA  
                 main@color_path 00DF                      right_135@mL 001A  
                    right_135@mR 001C              ??_color_writetoaddr 0004  
               _reverse_fromcard 2672    __end_of_color_read_Luminosity 2AE6  
                        _SP4BRGH 000EE6                          _SP4BRGL 000EE5  
                        _PWM6DCH 000FA3                          _PWM7DCH 000FA0  
                        _SSP2ADD 000ED6                          _SSP2BUF 000ED5  
                      ?_left_135 001A                       _color_read 229E  
        __end_of_Interrupts_init 2DEC           color_writetoaddr@value 0003  
               ??_color_read_Red 0007                          _HighISR 0008  
      __end_of_color_writetoaddr 2D80         color_read_Luminosity@tmp 000A  
             _I2C_2_Master_Start 2E0C                       _initUSART4 2DA0  
             _I2C_2_Master_Write 2DEC                        ?_right_90 001A  
                        __Hparam 0000                          __Lparam 0000  
color_processor_hard@condition_b 0009  color_processor_hard@condition_g 0008  
color_processor_hard@condition_r 0007                color_read_Red@tmp 000A  
                    _Timer0_init 2D80                        ?_spin_180 001A  
        sendStringSerial4@string 0002                          ___aodiv 1C08  
                        ___aomod 1D90                          ___awdiv 211C  
            ?_I2C_2_Master_Start 0001              ?_I2C_2_Master_Write 0001  
                     _off_period 01F6                        ?_vfprintf 0051  
                   __psmallconst 0E00                          __pcinit 2CBE  
                        __ramtop 0E00                          __ptext0 0E14  
                        __ptext1 29A2                          __ptext2 29F4  
                        __ptext3 1EF4                          __ptext4 1364  
                        __ptext5 28CE                          __ptext6 2B86  
                        __ptext7 2052                          __ptext8 2E16  
                        __ptext9 2C4E                          _left_90 23E8  
                      _T2CONbits 000FBD                          _forward 2844  
                      _T2HLTbits 000FBE        main@lowerbound_calibrated 00FD  
                  ?_motor_action 0022                    _RxBufWriteCnt 005E  
                        _sprintf 29A2             ??_I2C_2_Master_Start 0002  
                     ??_left_135 001E             ??_I2C_2_Master_Write 0002  
           end_of_initialization 2CDE                __end_of_right_135 25D0  
             setMotorPWM@PWMduty 0018                          fputc@fp 0003  
                        fputs@fp 000C                ?_color_click_init 0001  
   __end_of_color_processor_easy 229E     __end_of_color_processor_hard 1A34  
                     ??_right_90 001E               ??_color_click_init 0005  
              __end_of_vfpfcnvrt 2052                       ??_spin_180 001E  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE                 vfpfcnvrt@convarg 0047  
                     main@F14639 025A                       main@F14647 023C  
                     ??_vfprintf 0057                  _initDCmotorsPWM 2BCA  
                      _PORTFbits 000F8E                   ??_motor_action 0028  
                      _TRISCbits 000F83                        _TRISDbits 000F84  
                      _TRISEbits 000F85                        _TRISFbits 000F86  
                      _TRISGbits 000F87                        _TRISHbits 000F88  
             reverse_fromcard@mL 001A               reverse_fromcard@mR 001C  
                    ?_color_read 000C         color_writetoaddr@address 0004  
        ??_I2C_2_Master_RepStart 0002                 ?_Interrupts_init 0001  
                     left_135@mL 001A                       left_135@mR 001C  
                   _EUSART4RXbuf 0278                     _EUSART4TXbuf 0200  
              ?_color_read_Green 0005                      ?_initUSART4 0001  
      sendCharSerial4@charToSend 0001                       main@motorL 01E7  
                     main@motorR 01DE               ??_color_read_Green 0007  
                    vfpfcnvrt@ap 0043                      vfpfcnvrt@cp 004F  
                    vfpfcnvrt@fp 003F                   __end_of___wmul 2D60  
            start_initialization 2CBE                      __end_of_abs 2C8E  
                    __end_of_pad 2948                    _TxBufWriteCnt 00FF  
       __end_of_reverse_fromcard 2714              color_read_Green@tmp 000A  
        __end_of_initDCmotorsPWM 2C0C                      vfprintf@fmt 0053  
                       ??___wmul 0005               reverse_onesquare@i 0020  
                    __pbssCOMRAM 005D             _color_processor_easy 21E0  
           _color_processor_hard 1850                    __pcstackBANK0 0060  
                  __pcstackBANK1 0100                 ___aodiv@dividend 0001  
             main@RGB_calibrated 01CE                         ?_HighISR 0001  
        color_processor_easy@rgb 0001          color_processor_hard@rgb 0001  
          color_processor_easy@a 0007            color_processor_easy@b 0009  
          color_processor_easy@c 0005            color_processor_hard@b 0011  
          color_processor_hard@g 000F            color_processor_hard@r 000D  
                      _dtoa$2419 002E             __end_of_motor_action 1850  
                   ?_Timer0_init 0001                        __pintcode 0008  
                       ?___aodiv 0001                         ?___aomod 0001  
                       ?___awdiv 0007                 ___aodiv@quotient 0013  
                     right_135@i 0020                       right_90@mL 001A  
                     right_90@mR 001C             I2C_2_Master_Read@ack 0003  
           I2C_2_Master_Read@tmp 0004                         ?_left_90 001A  
                    __smallconst 0E00                         ?_forward 001A  
              _I2C_2_Master_Idle 2D12            ?_color_processor_easy 0001  
          ?_color_processor_hard 0001                 main@RGB_recorded 01D6  
              _I2C_2_Master_Init 2CE8                _I2C_2_Master_Read 2C0C  
              _I2C_2_Master_Stop 2E02                     _RxBufReadCnt 005D  
             ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 0011  
          _color_read_Luminosity 2A96               ?_I2C_2_Master_Stop 0001  
       initDCmotorsPWM@PWMperiod 0001                         ?_sprintf 0060  
              _sendStringSerial4 2C8E              ??_I2C_2_Master_Idle 0001  
            ??_I2C_2_Master_Init 0001              ??_I2C_2_Master_Read 0002  
                 ___wmul@product 0005              ??_I2C_2_Master_Stop 0002  
                       _LATCbits 000F7B                         _LATDbits 000F7C  
                       _LATEbits 000F7D                         _LATFbits 000F7E  
                      _on_period 01F8                         _LATGbits 000F7F  
                       _LATHbits 000F80                        _right_135 252E  
                       _IPR0bits 000E1F                         _IPR2bits 000E21  
                       _PIE0bits 000E29                         _PIE2bits 000E2B  
             ?_sendStringSerial4 0002                       spin_180@mL 001A  
                     spin_180@mR 001C                         i2u190_40 001A  
                       i2u190_41 0016                         i2u191_40 0028  
                       i2u191_41 0024                         _PIR0bits 000E33  
                       _PIR2bits 000E35                         _PIR4bits 000E37  
               ?_initDCmotorsPWM 0001                ??_sendCharSerial4 0001  
                       _SSP2CON2 000EDA              ??_sendStringSerial4 0004  
                       _SSP2STAT 000ED8                _reverse_onesquare 25D0  
                      _vfpfcnvrt 1EF4        __end_of_I2C_2_Master_Idle 2D3A  
             ?_reverse_onesquare 001A        __end_of_I2C_2_Master_Init 2D12  
      __end_of_I2C_2_Master_Read 2C4E                ___wmul@multiplier 0001  
              reverse_fromcard@i 0020        __end_of_I2C_2_Master_Stop 2E0C  
                   setMotorPWM@m 000F      I2C_2_Master_Write@data_byte 0002  
                      left_135@i 0020                        left_90@mL 001A  
                      left_90@mR 001C             main@color_calibrated 0182  
              ??_color_read_Blue 0007                     _TxBufReadCnt 01FB  
            ??_reverse_onesquare 001E        main@upperbound_calibrated 01C2  
                   ??_color_read 000E        __end_of_sendStringSerial4 2CBE  
  __end_of_I2C_2_Master_RepStart 2E02               color_read_Blue@tmp 000A  
            __end_of_setMotorPWM 1C08                       ?_right_135 001A  
                   ??_initUSART4 0001                         __Hrparam 0000  
                     vfprintf@ap 0055                         __Lrparam 0000  
                     vfprintf@fp 0051        __end_of_reverse_onesquare 2672  
                      forward@mL 001A                        forward@mR 001C  
                     ?_vfpfcnvrt 003F               __end_of_color_read 2344  
                ___aodiv@divisor 0009                  ___aodiv@counter 0011  
                     _ANSELDbits 000EA7           ??_color_processor_easy 0003  
         ??_color_processor_hard 0005                       _ANSELFbits 000EB4  
                     sprintf@fmt 0062                       _T0CON0bits 000FD5  
                     _T0CON1bits 000FD6           ?_color_read_Luminosity 0005  
             __end_of_initUSART4 2DBE                         __ptext10 1D90  
                       __ptext11 1C08                         __ptext20 2672  
                       __ptext12 2C8E                         __ptext21 23E8  
                       __ptext13 2DBE                         __ptext30 2A46  
                       __ptext22 2714                         __ptext14 15E2  
                       __ptext31 2A96                         __ptext23 2844  
                       __ptext15 27B6                         __ptext40 2DEC  
                       __ptext32 2AE6                         __ptext24 1A34  
                       __ptext16 248C                         __ptext41 2E02  
                       __ptext33 2B36                         __ptext25 2D3A  
                       __ptext17 2344                         __ptext42 2E0C  
                       __ptext34 2DF8                         __ptext26 211C  
                       __ptext18 252E                         __ptext43 2D12  
                       __ptext35 2C0C                         __ptext27 2DA0  
                       __ptext19 25D0                         __ptext44 2CE8  
                       __ptext36 1850                         __ptext28 2BCA  
                       __ptext45 2D80                         __ptext37 21E0  
                       __ptext29 229E                         __ptext46 2DD6  
                       __ptext38 2948                         __ptext39 2D60  
                      right_90@i 0020                         _left_135 2714  
                   _SSP2CON1bits 000ED9                     _SSP2CON2bits 000EDA  
                       _right_90 2344                ?_reverse_fromcard 001A  
                      spin_180@i 0020                         _spin_180 248C  
                       isa$xinst 000000               ??_reverse_fromcard 001E  
                     _RC4STAbits 000EE7                         int$flags 005F  
                  motor_action@l 0024                    motor_action@r 0026  
                       _vfprintf 29F4                         left_90@i 0020  
               ___aomod@dividend 0001                  main@time_return 01C4  
                     _INTCONbits 000FF2                     _motor_action 15E2  
                       forward@i 001E                      _setMotorPWM 1A34  
                    _PWM6CONbits 000FA4                      _PWM7CONbits 000FA1  
                       intlevel2 0000                        sprintf@ap 006E  
                    ??_right_135 001E                  ___aomod@divisor 0009  
                    ??_vfpfcnvrt 0045                  ___aomod@counter 0011  
               _color_click_init 2948                         sprintf@f 0070  
                       sprintf@s 0060                       _SSP2DATPPS 000E1D  
                     _SSP2CLKPPS 000E1C                       _TX4STAbits 000EE8  
                   ___aodiv@sign 0012                  _sendCharSerial4 2DBE  
                   ___aomod@sign 0012  
