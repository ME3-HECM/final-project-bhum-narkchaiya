

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Dec 11 13:39:42 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    67   000000                     
    68                           ; Version 2.35
    69                           ; Generated 05/05/2021 GMT
    70                           ; 
    71                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution. Publication is not required when
    85                           ;        this file is used in an embedded application.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F67K40 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103   000000                     _TX4REG	set	3812
   104   000000                     _RC4STAbits	set	3815
   105   000000                     _SP4BRGH	set	3814
   106   000000                     _T0CON0bits	set	4053
   107   000000                     _T0CON1bits	set	4054
   108   000000                     _TMR0H	set	4052
   109   000000                     _TRISGbits	set	3975
   110   000000                     _TRISEbits	set	3973
   111   000000                     _LATFbits	set	3966
   112   000000                     _TRISFbits	set	3974
   113   000000                     _LATG	set	3967
   114   000000                     _LATE	set	3965
   115   000000                     _SSP2CON2bits	set	3802
   116   000000                     _LATGbits	set	3967
   117   000000                     _LATEbits	set	3965
   118   000000                     _RX4PPS	set	3605
   119   000000                     _SSP2CLKPPS	set	3612
   120   000000                     _SSP2DATPPS	set	3613
   121   000000                     _ANSELDbits	set	3751
   122   000000                     _ANSELFbits	set	3764
   123   000000                     _LATDbits	set	3964
   124   000000                     _LATHbits	set	3968
   125   000000                     _TRISDbits	set	3972
   126   000000                     _TRISHbits	set	3976
   127   000000                     _PORTFbits	set	3982
   128   000000                     _PWM7DCH	set	4000
   129   000000                     _PWM6DCH	set	4003
   130   000000                     _TRISCbits	set	3971
   131   000000                     _SSP2BUF	set	3797
   132   000000                     _SSP2ADD	set	3798
   133   000000                     _SSP2CON1bits	set	3801
   134   000000                     _RC4REG	set	3811
   135   000000                     _SP4BRGL	set	3813
   136   000000                     _TX4STAbits	set	3816
   137   000000                     _BAUD4CONbits	set	3817
   138   000000                     _LATCbits	set	3963
   139   000000                     _SSP2CON2	set	3802
   140   000000                     _SSP2STAT	set	3800
   141   000000                     _IPR0bits	set	3615
   142   000000                     _PIE0bits	set	3625
   143   000000                     _RC7PPS	set	3689
   144   000000                     _RD5PPS	set	3695
   145   000000                     _RE2PPS	set	3700
   146   000000                     _RD6PPS	set	3696
   147   000000                     _PWM6CONbits	set	4004
   148   000000                     _T2PR	set	4028
   149   000000                     _T2CONbits	set	4029
   150   000000                     _INTCONbits	set	4082
   151   000000                     _PWM7CONbits	set	4001
   152   000000                     _TMR0L	set	4051
   153   000000                     _T2CLKCONbits	set	4031
   154   000000                     _T2HLTbits	set	4030
   155   000000                     _PIE2bits	set	3627
   156   000000                     _PIR0bits	set	3635
   157   000000                     _IPR2bits	set	3617
   158   000000                     _PIR2bits	set	3637
   159   000000                     _PIR4bits	set	3639
   160   000000                     _RC0PPS	set	3682
   161                           
   162                           	psect	smallconst
   163   000E00                     __psmallconst:
   164                           	callstack 0
   165   000E00  00                 	db	0
   166   000E01                     STR_2:
   167                           
   168                           ; BSR set to: 14
   169   000E01  25                 	db	37
   170   000E02  64                 	db	100	;'d'
   171   000E03  20                 	db	32
   172   000E04  25                 	db	37
   173   000E05  64                 	db	100	;'d'
   174   000E06  20                 	db	32
   175   000E07  25                 	db	37
   176   000E08  64                 	db	100	;'d'
   177   000E09  20                 	db	32
   178   000E0A  25                 	db	37
   179   000E0B  64                 	db	100	;'d'
   180   000E0C  20                 	db	32
   181   000E0D  25                 	db	37
   182   000E0E  64                 	db	100	;'d'
   183   000E0F  20                 	db	32
   184   000E10  0D                 	db	13
   185   000E11  0A                 	db	10
   186   000E12  00                 	db	0
   187   000E13  00                 	db	0	; dummy byte at the end
   188   000000                     
   189                           ; #config settings
   190                           
   191                           	psect	cinit
   192   002C7C                     __pcinit:
   193                           	callstack 0
   194   002C7C                     start_initialization:
   195                           	callstack 0
   196   002C7C                     __initialization:
   197                           	callstack 0
   198                           
   199                           ; Clear objects allocated to BANK2 (172 bytes)
   200   002C7C  EE02  F000         	lfsr	0,__pbssBANK2
   201   002C80  0EAC               	movlw	172
   202   002C82                     clear_0:
   203   002C82  6AEE               	clrf	postinc0,c
   204   002C84  06E8               	decf	wreg,f,c
   205   002C86  E1FD               	bnz	clear_0
   206                           
   207                           ; Clear objects allocated to BANK1 (12 bytes)
   208   002C88  EE01  F0F0         	lfsr	0,__pbssBANK1
   209   002C8C  0E0C               	movlw	12
   210   002C8E                     clear_1:
   211   002C8E  6AEE               	clrf	postinc0,c
   212   002C90  06E8               	decf	wreg,f,c
   213   002C92  E1FD               	bnz	clear_1
   214                           
   215                           ; Clear objects allocated to BANK0 (1 bytes)
   216   002C94  0100               	movlb	0
   217   002C96  6BFF               	clrf	__pbssBANK0& (0+255),b
   218                           
   219                           ; Clear objects allocated to COMRAM (2 bytes)
   220   002C98  6A5E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   221   002C9A  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   222   002C9C                     end_of_initialization:
   223                           	callstack 0
   224   002C9C                     __end_of__initialization:
   225                           	callstack 0
   226   002C9C  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   227   002C9E  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   228   002CA0  0100               	movlb	0
   229   002CA2  EF0A  F007         	goto	_main	;jump to C main() function
   230                           
   231                           	psect	bssCOMRAM
   232   00005D                     __pbssCOMRAM:
   233                           	callstack 0
   234   00005D                     _RxBufReadCnt:
   235                           	callstack 0
   236   00005D                     	ds	1
   237   00005E                     _RxBufWriteCnt:
   238                           	callstack 0
   239   00005E                     	ds	1
   240                           
   241                           	psect	bssBANK0
   242   0000FF                     __pbssBANK0:
   243                           	callstack 0
   244   0000FF                     _TxBufWriteCnt:
   245                           	callstack 0
   246   0000FF                     	ds	1
   247                           
   248                           	psect	bssBANK1
   249   0001F0                     __pbssBANK1:
   250                           	callstack 0
   251   0001F0                     _width:
   252                           	callstack 0
   253   0001F0                     	ds	2
   254   0001F2                     _prec:
   255                           	callstack 0
   256   0001F2                     	ds	2
   257   0001F4                     _time:
   258                           	callstack 0
   259   0001F4                     	ds	2
   260   0001F6                     _off_period:
   261                           	callstack 0
   262   0001F6                     	ds	2
   263   0001F8                     _on_period:
   264                           	callstack 0
   265   0001F8                     	ds	2
   266   0001FA                     _flags:
   267                           	callstack 0
   268   0001FA                     	ds	1
   269   0001FB                     _TxBufReadCnt:
   270                           	callstack 0
   271   0001FB                     	ds	1
   272                           
   273                           	psect	bssBANK2
   274   000200                     __pbssBANK2:
   275                           	callstack 0
   276   000200                     _EUSART4TXbuf:
   277                           	callstack 0
   278   000200                     	ds	60
   279   00023C                     	ds	30
   280   00025A                     	ds	30
   281   000278                     _EUSART4RXbuf:
   282                           	callstack 0
   283   000278                     	ds	20
   284   00028C                     _dbuf:
   285                           	callstack 0
   286   00028C                     	ds	32
   287                           
   288                           	psect	cstackBANK1
   289   000100                     __pcstackBANK1:
   290                           	callstack 0
   291   000100                     main@readout3:
   292                           	callstack 0
   293                           
   294                           ; 100 bytes @ 0x0
   295   000100                     	ds	100
   296   000164                     main@time_path:
   297                           	callstack 0
   298                           
   299                           ; 30 bytes @ 0x64
   300   000164                     	ds	30
   301   000182                     main@color_calibrated:
   302                           	callstack 0
   303                           
   304                           ; 64 bytes @ 0x82
   305   000182                     	ds	64
   306   0001C2                     main@upperbound_calibrated:
   307                           	callstack 0
   308                           
   309                           ; 2 bytes @ 0xC2
   310   0001C2                     	ds	2
   311   0001C4                     main@time_return:
   312                           	callstack 0
   313                           
   314                           ; 2 bytes @ 0xC4
   315   0001C4                     	ds	2
   316   0001C6                     main@j:
   317                           	callstack 0
   318                           
   319                           ; 2 bytes @ 0xC6
   320   0001C6                     	ds	2
   321   0001C8                     main@color_name:
   322                           	callstack 0
   323                           
   324                           ; 2 bytes @ 0xC8
   325   0001C8                     	ds	2
   326   0001CA                     main@k:
   327                           	callstack 0
   328                           
   329                           ; 2 bytes @ 0xCA
   330   0001CA                     	ds	2
   331   0001CC                     main@i:
   332                           	callstack 0
   333                           
   334                           ; 2 bytes @ 0xCC
   335   0001CC                     	ds	2
   336   0001CE                     main@RGB_calibrated:
   337                           	callstack 0
   338                           
   339                           ; 8 bytes @ 0xCE
   340   0001CE                     	ds	8
   341   0001D6                     main@RGB_recorded:
   342                           	callstack 0
   343                           
   344                           ; 8 bytes @ 0xD6
   345   0001D6                     	ds	8
   346   0001DE                     main@motorR:
   347                           	callstack 0
   348                           
   349                           ; 9 bytes @ 0xDE
   350   0001DE                     	ds	9
   351   0001E7                     main@motorL:
   352                           	callstack 0
   353                           
   354                           ; 9 bytes @ 0xE7
   355   0001E7                     	ds	9
   356                           
   357                           	psect	cstackBANK0
   358   000060                     __pcstackBANK0:
   359                           	callstack 0
   360   000060                     ?_sprintf:
   361                           	callstack 0
   362   000060                     sprintf@s:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x0
   366   000060                     	ds	2
   367   000062                     sprintf@fmt:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x2
   371   000062                     	ds	12
   372   00006E                     sprintf@ap:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0xE
   376   00006E                     	ds	2
   377   000070                     sprintf@f:
   378                           	callstack 0
   379                           
   380                           ; 11 bytes @ 0x10
   381   000070                     	ds	11
   382   00007B                     main@readout2:
   383                           	callstack 0
   384                           
   385                           ; 100 bytes @ 0x1B
   386   00007B                     	ds	100
   387   0000DF                     main@color_path:
   388                           	callstack 0
   389                           
   390                           ; 30 bytes @ 0x7F
   391   0000DF                     	ds	30
   392   0000FD                     main@lowerbound_calibrated:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0x9D
   396   0000FD                     	ds	2
   397                           
   398                           	psect	cstackCOMRAM
   399   000001                     __pcstackCOMRAM:
   400                           	callstack 0
   401   000001                     ??_I2C_2_Master_Idle:
   402   000001                     ?_color_processor_easy:
   403                           	callstack 0
   404   000001                     ?_color_processor_hard:
   405                           	callstack 0
   406   000001                     ?___wmul:
   407                           	callstack 0
   408   000001                     ?___aodiv:
   409                           	callstack 0
   410   000001                     ?___aomod:
   411                           	callstack 0
   412   000001                     sendCharSerial4@charToSend:
   413                           	callstack 0
   414   000001                     color_processor_easy@rgb:
   415                           	callstack 0
   416   000001                     color_processor_hard@rgb:
   417                           	callstack 0
   418   000001                     initDCmotorsPWM@PWMperiod:
   419                           	callstack 0
   420   000001                     ___wmul@multiplier:
   421                           	callstack 0
   422   000001                     fputc@c:
   423                           	callstack 0
   424   000001                     ___aodiv@dividend:
   425                           	callstack 0
   426   000001                     ___aomod@dividend:
   427                           	callstack 0
   428                           
   429                           ; 8 bytes @ 0x0
   430   000001                     	ds	1
   431   000002                     ??_I2C_2_Master_Read:
   432   000002                     I2C_2_Master_Write@data_byte:
   433                           	callstack 0
   434   000002                     sendStringSerial4@string:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x1
   438   000002                     	ds	1
   439   000003                     color_writetoaddr@value:
   440                           	callstack 0
   441   000003                     I2C_2_Master_Read@ack:
   442                           	callstack 0
   443   000003                     color_processor_easy@color:
   444                           	callstack 0
   445   000003                     color_processor_hard@calibrated:
   446                           	callstack 0
   447   000003                     ___wmul@multiplicand:
   448                           	callstack 0
   449   000003                     fputc@fp:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x2
   453   000003                     	ds	1
   454   000004                     color_writetoaddr@address:
   455                           	callstack 0
   456   000004                     I2C_2_Master_Read@tmp:
   457                           	callstack 0
   458                           
   459                           ; 1 bytes @ 0x3
   460   000004                     	ds	1
   461   000005                     ??_fputc:
   462   000005                     ??_color_click_init:
   463   000005                     ??_color_processor_hard:
   464   000005                     ?_color_read_Luminosity:
   465                           	callstack 0
   466   000005                     ?_color_read_Red:
   467                           	callstack 0
   468   000005                     ?_color_read_Green:
   469                           	callstack 0
   470   000005                     ?_color_read_Blue:
   471                           	callstack 0
   472   000005                     color_processor_easy@c:
   473                           	callstack 0
   474   000005                     ___wmul@product:
   475                           	callstack 0
   476                           
   477                           ; 2 bytes @ 0x4
   478   000005                     	ds	2
   479   000007                     ??_color_read_Luminosity:
   480   000007                     ??_color_read_Red:
   481   000007                     ??_color_read_Green:
   482   000007                     ??_color_read_Blue:
   483   000007                     ?___awdiv:
   484                           	callstack 0
   485   000007                     color_processor_hard@condition_r:
   486                           	callstack 0
   487   000007                     color_processor_easy@a:
   488                           	callstack 0
   489   000007                     ___awdiv@dividend:
   490                           	callstack 0
   491                           
   492                           ; 2 bytes @ 0x6
   493   000007                     	ds	1
   494   000008                     color_processor_hard@condition_g:
   495                           	callstack 0
   496                           
   497                           ; 1 bytes @ 0x7
   498   000008                     	ds	1
   499   000009                     color_processor_hard@condition_b:
   500                           	callstack 0
   501   000009                     color_processor_easy@b:
   502                           	callstack 0
   503   000009                     ___awdiv@divisor:
   504                           	callstack 0
   505   000009                     ___aodiv@divisor:
   506                           	callstack 0
   507   000009                     ___aomod@divisor:
   508                           	callstack 0
   509                           
   510                           ; 8 bytes @ 0x8
   511   000009                     	ds	1
   512   00000A                     _color_processor_hard$370:
   513                           	callstack 0
   514   00000A                     color_read_Luminosity@tmp:
   515                           	callstack 0
   516   00000A                     color_read_Red@tmp:
   517                           	callstack 0
   518   00000A                     color_read_Green@tmp:
   519                           	callstack 0
   520   00000A                     color_read_Blue@tmp:
   521                           	callstack 0
   522   00000A                     fputs@s:
   523                           	callstack 0
   524                           
   525                           ; 2 bytes @ 0x9
   526   00000A                     	ds	1
   527   00000B                     _color_processor_hard$372:
   528                           	callstack 0
   529   00000B                     ___awdiv@counter:
   530                           	callstack 0
   531                           
   532                           ; 1 bytes @ 0xA
   533   00000B                     	ds	1
   534   00000C                     _color_processor_hard$374:
   535                           	callstack 0
   536   00000C                     ___awdiv@sign:
   537                           	callstack 0
   538   00000C                     color_read@rgb:
   539                           	callstack 0
   540   00000C                     fputs@fp:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0xB
   544   00000C                     	ds	1
   545   00000D                     color_processor_hard@r:
   546                           	callstack 0
   547   00000D                     ___awdiv@quotient:
   548                           	callstack 0
   549                           
   550                           ; 2 bytes @ 0xC
   551   00000D                     	ds	1
   552   00000E                     ??_color_read:
   553   00000E                     fputs@c:
   554                           	callstack 0
   555                           
   556                           ; 1 bytes @ 0xD
   557   00000E                     	ds	1
   558   00000F                     color_processor_hard@g:
   559                           	callstack 0
   560   00000F                     setMotorPWM@m:
   561                           	callstack 0
   562   00000F                     fputs@i:
   563                           	callstack 0
   564                           
   565                           ; 2 bytes @ 0xE
   566   00000F                     	ds	2
   567   000011                     ??_setMotorPWM:
   568   000011                     ___aodiv@counter:
   569                           	callstack 0
   570   000011                     ___aomod@counter:
   571                           	callstack 0
   572   000011                     color_processor_hard@b:
   573                           	callstack 0
   574   000011                     pad@fp:
   575                           	callstack 0
   576                           
   577                           ; 2 bytes @ 0x10
   578   000011                     	ds	1
   579   000012                     ___aodiv@sign:
   580                           	callstack 0
   581   000012                     ___aomod@sign:
   582                           	callstack 0
   583                           
   584                           ; 1 bytes @ 0x11
   585   000012                     	ds	1
   586   000013                     ?_abs:
   587                           	callstack 0
   588   000013                     color_processor_hard@cr:
   589                           	callstack 0
   590   000013                     pad@buf:
   591                           	callstack 0
   592   000013                     abs@a:
   593                           	callstack 0
   594   000013                     ___aodiv@quotient:
   595                           	callstack 0
   596                           
   597                           ; 8 bytes @ 0x12
   598   000013                     	ds	2
   599   000015                     ??_abs:
   600   000015                     color_processor_hard@cg:
   601                           	callstack 0
   602   000015                     pad@p:
   603                           	callstack 0
   604                           
   605                           ; 2 bytes @ 0x14
   606   000015                     	ds	2
   607   000017                     ??_pad:
   608   000017                     color_processor_hard@cb:
   609                           	callstack 0
   610                           
   611                           ; 2 bytes @ 0x16
   612   000017                     	ds	1
   613   000018                     setMotorPWM@PWMduty:
   614                           	callstack 0
   615   000018                     pad@i:
   616                           	callstack 0
   617                           
   618                           ; 2 bytes @ 0x17
   619   000018                     	ds	2
   620   00001A                     stop@mL:
   621                           	callstack 0
   622   00001A                     forward@mL:
   623                           	callstack 0
   624   00001A                     reverse_fromcard@mL:
   625                           	callstack 0
   626   00001A                     reverse_onesquare@mL:
   627                           	callstack 0
   628   00001A                     right_90@mL:
   629                           	callstack 0
   630   00001A                     left_90@mL:
   631                           	callstack 0
   632   00001A                     spin_180@mL:
   633                           	callstack 0
   634   00001A                     right_135@mL:
   635                           	callstack 0
   636   00001A                     left_135@mL:
   637                           	callstack 0
   638   00001A                     pad@w:
   639                           	callstack 0
   640                           
   641                           ; 2 bytes @ 0x19
   642   00001A                     	ds	2
   643   00001C                     stop@mR:
   644                           	callstack 0
   645   00001C                     forward@mR:
   646                           	callstack 0
   647   00001C                     reverse_fromcard@mR:
   648                           	callstack 0
   649   00001C                     reverse_onesquare@mR:
   650                           	callstack 0
   651   00001C                     right_90@mR:
   652                           	callstack 0
   653   00001C                     left_90@mR:
   654                           	callstack 0
   655   00001C                     spin_180@mR:
   656                           	callstack 0
   657   00001C                     right_135@mR:
   658                           	callstack 0
   659   00001C                     left_135@mR:
   660                           	callstack 0
   661   00001C                     dtoa@fp:
   662                           	callstack 0
   663                           
   664                           ; 2 bytes @ 0x1B
   665   00001C                     	ds	2
   666   00001E                     ??_stop:
   667   00001E                     ??_spin_180:
   668   00001E                     ??_reverse_fromcard:
   669   00001E                     ??_reverse_onesquare:
   670   00001E                     ??_right_90:
   671   00001E                     ??_left_90:
   672   00001E                     ??_right_135:
   673   00001E                     ??_left_135:
   674   00001E                     forward@i:
   675                           	callstack 0
   676   00001E                     dtoa@d:
   677                           	callstack 0
   678                           
   679                           ; 8 bytes @ 0x1D
   680   00001E                     	ds	1
   681   00001F                     stop@i:
   682                           	callstack 0
   683                           
   684                           ; 2 bytes @ 0x1E
   685   00001F                     	ds	1
   686   000020                     reverse_fromcard@i:
   687                           	callstack 0
   688   000020                     reverse_onesquare@i:
   689                           	callstack 0
   690   000020                     right_90@i:
   691                           	callstack 0
   692   000020                     left_90@i:
   693                           	callstack 0
   694   000020                     spin_180@i:
   695                           	callstack 0
   696   000020                     right_135@i:
   697                           	callstack 0
   698   000020                     left_135@i:
   699                           	callstack 0
   700                           
   701                           ; 2 bytes @ 0x1F
   702   000020                     	ds	2
   703   000022                     motor_action@color:
   704                           	callstack 0
   705                           
   706                           ; 2 bytes @ 0x21
   707   000022                     	ds	2
   708   000024                     motor_action@l:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0x23
   712   000024                     	ds	2
   713   000026                     ??_dtoa:
   714   000026                     motor_action@r:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x25
   718   000026                     	ds	2
   719   000028                     ??_motor_action:
   720                           
   721                           ; 1 bytes @ 0x27
   722   000028                     	ds	6
   723   00002E                     _dtoa$2419:
   724                           	callstack 0
   725                           
   726                           ; 2 bytes @ 0x2D
   727   00002E                     	ds	2
   728   000030                     dtoa@p:
   729                           	callstack 0
   730                           
   731                           ; 2 bytes @ 0x2F
   732   000030                     	ds	2
   733   000032                     dtoa@w:
   734                           	callstack 0
   735                           
   736                           ; 2 bytes @ 0x31
   737   000032                     	ds	2
   738   000034                     dtoa@n:
   739                           	callstack 0
   740                           
   741                           ; 8 bytes @ 0x33
   742   000034                     	ds	8
   743   00003C                     dtoa@i:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x3B
   747   00003C                     	ds	2
   748   00003E                     dtoa@s:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0x3D
   752   00003E                     	ds	1
   753   00003F                     vfpfcnvrt@fp:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x3E
   757   00003F                     	ds	2
   758   000041                     vfpfcnvrt@fmt:
   759                           	callstack 0
   760                           
   761                           ; 2 bytes @ 0x40
   762   000041                     	ds	2
   763   000043                     vfpfcnvrt@ap:
   764                           	callstack 0
   765                           
   766                           ; 2 bytes @ 0x42
   767   000043                     	ds	2
   768   000045                     ??_vfpfcnvrt:
   769                           
   770                           ; 1 bytes @ 0x44
   771   000045                     	ds	2
   772   000047                     vfpfcnvrt@convarg:
   773                           	callstack 0
   774                           
   775                           ; 8 bytes @ 0x46
   776   000047                     	ds	8
   777   00004F                     vfpfcnvrt@cp:
   778                           	callstack 0
   779                           
   780                           ; 2 bytes @ 0x4E
   781   00004F                     	ds	2
   782   000051                     ?_vfprintf:
   783                           	callstack 0
   784   000051                     vfprintf@fp:
   785                           	callstack 0
   786                           
   787                           ; 2 bytes @ 0x50
   788   000051                     	ds	2
   789   000053                     vfprintf@fmt:
   790                           	callstack 0
   791                           
   792                           ; 2 bytes @ 0x52
   793   000053                     	ds	2
   794   000055                     vfprintf@ap:
   795                           	callstack 0
   796                           
   797                           ; 2 bytes @ 0x54
   798   000055                     	ds	2
   799   000057                     vfprintf@cfmt:
   800                           	callstack 0
   801                           
   802                           ; 2 bytes @ 0x56
   803   000057                     	ds	2
   804   000059                     ??_main:
   805                           
   806                           ; 1 bytes @ 0x58
   807   000059                     	ds	2
   808   00005B                     main@color_flag:
   809                           	callstack 0
   810                           
   811                           ; 2 bytes @ 0x5A
   812   00005B                     	ds	2
   813                           
   814 ;;
   815 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   816 ;;
   817 ;; *************** function _main *****************
   818 ;; Defined at:
   819 ;;		line 20 in file "../main.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;		None
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  readout3      100    0[BANK1 ] unsigned char [100]
   824 ;;  readout2      100   27[BANK0 ] unsigned char [100]
   825 ;;  k               2  202[BANK1 ] int 
   826 ;;  i               2  204[BANK1 ] int 
   827 ;;  color_calibr   64  130[BANK1 ] int [32]
   828 ;;  time_path      30  100[BANK1 ] unsigned int [15]
   829 ;;  color_path     30  127[BANK0 ] unsigned int [15]
   830 ;;  motorL          9  231[BANK1 ] struct DC_motor
   831 ;;  motorR          9  222[BANK1 ] struct DC_motor
   832 ;;  RGB_recorded    8  214[BANK1 ] struct RGB_val
   833 ;;  RGB_calibrat    8  206[BANK1 ] struct RGB_val
   834 ;;  L_calibrated    8    0        struct RGB_val
   835 ;;  color_name      2  200[BANK1 ] unsigned int 
   836 ;;  j               2  198[BANK1 ] int 
   837 ;;  time_return     2  196[BANK1 ] unsigned int 
   838 ;;  color_flag      2   90[COMRAM] unsigned int 
   839 ;;  upperbound_c    2  194[BANK1 ] unsigned int 
   840 ;;  lowerbound_c    2  157[BANK0 ] unsigned int 
   841 ;;  PWMcycle        1    0        unsigned char 
   842 ;; Return value:  Size  Location     Type
   843 ;;                  1    wreg      void 
   844 ;; Registers used:
   845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   846 ;; Tracked objects:
   847 ;;		On entry : 0/0
   848 ;;		On exit  : 0/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   852 ;;      Locals:         2     132     240       0       0       0       0       0       0       0       0       0       
      +0       0       0
   853 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   854 ;;      Totals:         4     132     240       0       0       0       0       0       0       0       0       0       
      +0       0       0
   855 ;;Total ram usage:      376 bytes
   856 ;; Hardware stack levels required when called: 9
   857 ;; This function calls:
   858 ;;		_I2C_2_Master_Init
   859 ;;		_Interrupts_init
   860 ;;		_Timer0_init
   861 ;;		_color_click_init
   862 ;;		_color_processor_easy
   863 ;;		_color_processor_hard
   864 ;;		_color_read
   865 ;;		_forward
   866 ;;		_initDCmotorsPWM
   867 ;;		_initUSART4
   868 ;;		_motor_action
   869 ;;		_sendStringSerial4
   870 ;;		_setMotorPWM
   871 ;;		_spin_180
   872 ;;		_sprintf
   873 ;;		_stop
   874 ;; This function is called by:
   875 ;;		Startup code after reset
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           	psect	text0
   880   000E14                     __ptext0:
   881                           	callstack 0
   882   000E14                     _main:
   883                           	callstack 22
   884   000E14                     
   885                           ;../main.c: 22:     color_click_init();
   886   000E14  EC83  F014         	call	_color_click_init	;wreg free
   887   000E18                     
   888                           ;../main.c: 23:     initDCmotorsPWM(20);
   889   000E18  0E00               	movlw	0
   890   000E1A  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   891   000E1C  0E14               	movlw	20
   892   000E1E  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   893   000E20  ECC4  F015         	call	_initDCmotorsPWM	;wreg free
   894   000E24                     
   895                           ;../main.c: 24:     Interrupts_init();
   896   000E24  ECCA  F016         	call	_Interrupts_init	;wreg free
   897   000E28                     
   898                           ;../main.c: 25:     Timer0_init();
   899   000E28  EC9F  F016         	call	_Timer0_init	;wreg free
   900   000E2C                     
   901                           ;../main.c: 26:     I2C_2_Master_Init();
   902   000E2C  EC53  F016         	call	_I2C_2_Master_Init	;wreg free
   903   000E30                     
   904                           ;../main.c: 27:     initUSART4();
   905   000E30  ECAF  F016         	call	_initUSART4	;wreg free
   906   000E34                     
   907                           ;../main.c: 32:     motorL.power = 0;
   908   000E34  0E00               	movlw	0
   909   000E36  0101               	movlb	1	; () banked
   910   000E38  6FE7               	movwf	main@motorL& (0+255),b
   911   000E3A                     
   912                           ; BSR set to: 1
   913                           ;../main.c: 33:     motorL.direction = 0;
   914   000E3A  0E00               	movlw	0
   915   000E3C  6FE8               	movwf	(main@motorL+1)& (0+255),b
   916   000E3E                     
   917                           ; BSR set to: 1
   918                           ;../main.c: 34:     motorL.dutyHighByte = (unsigned char *)(&PWM6DCH);
   919   000E3E  0EA3               	movlw	163
   920   000E40  6FE9               	movwf	(main@motorL+2)& (0+255),b
   921   000E42  0E0F               	movlw	15
   922   000E44  6FEA               	movwf	(main@motorL+3)& (0+255),b
   923   000E46                     
   924                           ; BSR set to: 1
   925                           ;../main.c: 35:     motorL.dir_LAT = (unsigned char *)(&LATE);
   926   000E46  0E7D               	movlw	125
   927   000E48  6FEB               	movwf	(main@motorL+4)& (0+255),b
   928   000E4A  0E0F               	movlw	15
   929   000E4C  6FEC               	movwf	(main@motorL+5)& (0+255),b
   930   000E4E                     
   931                           ; BSR set to: 1
   932                           ;../main.c: 36:     motorL.dir_pin = 4;
   933   000E4E  0E04               	movlw	4
   934   000E50  6FED               	movwf	(main@motorL+6)& (0+255),b
   935   000E52                     
   936                           ; BSR set to: 1
   937                           ;../main.c: 37:     motorL.PWMperiod = PWMcycle;
   938   000E52  0E00               	movlw	0
   939   000E54  6FEF               	movwf	(main@motorL+8)& (0+255),b
   940   000E56  0EC8               	movlw	200
   941   000E58  6FEE               	movwf	(main@motorL+7)& (0+255),b
   942   000E5A                     
   943                           ; BSR set to: 1
   944                           ;../main.c: 38:     motorR.power = 0;
   945   000E5A  0E00               	movlw	0
   946   000E5C  6FDE               	movwf	main@motorR& (0+255),b
   947   000E5E                     
   948                           ; BSR set to: 1
   949                           ;../main.c: 39:     motorR.direction = 0;
   950   000E5E  0E00               	movlw	0
   951   000E60  6FDF               	movwf	(main@motorR+1)& (0+255),b
   952                           
   953                           ;../main.c: 40:     motorR.dutyHighByte = (unsigned char *)(&PWM7DCH);
   954   000E62  0EA0               	movlw	160
   955   000E64  6FE0               	movwf	(main@motorR+2)& (0+255),b
   956   000E66  0E0F               	movlw	15
   957   000E68  6FE1               	movwf	(main@motorR+3)& (0+255),b
   958                           
   959                           ;../main.c: 41:     motorR.dir_LAT = (unsigned char *)(&LATG);
   960   000E6A  0E7F               	movlw	127
   961   000E6C  6FE2               	movwf	(main@motorR+4)& (0+255),b
   962   000E6E  0E0F               	movlw	15
   963   000E70  6FE3               	movwf	(main@motorR+5)& (0+255),b
   964   000E72                     
   965                           ; BSR set to: 1
   966                           ;../main.c: 42:     motorR.dir_pin = 6;
   967   000E72  0E06               	movlw	6
   968   000E74  6FE4               	movwf	(main@motorR+6)& (0+255),b
   969   000E76                     
   970                           ; BSR set to: 1
   971                           ;../main.c: 43:     motorR.PWMperiod = PWMcycle;
   972   000E76  0E00               	movlw	0
   973   000E78  6FE6               	movwf	(main@motorR+8)& (0+255),b
   974   000E7A  0EC8               	movlw	200
   975   000E7C  6FE5               	movwf	(main@motorR+7)& (0+255),b
   976   000E7E                     
   977                           ; BSR set to: 1
   978                           ;../main.c: 44:     setMotorPWM(&motorL);
   979   000E7E  0EE7               	movlw	low main@motorL
   980   000E80  6E0F               	movwf	setMotorPWM@m^0,c
   981   000E82  0E01               	movlw	high main@motorL
   982   000E84  6E10               	movwf	(setMotorPWM@m+1)^0,c
   983   000E86  ECF9  F00C         	call	_setMotorPWM	;wreg free
   984   000E8A                     
   985                           ;../main.c: 45:     setMotorPWM(&motorR);
   986   000E8A  0EDE               	movlw	low main@motorR
   987   000E8C  6E0F               	movwf	setMotorPWM@m^0,c
   988   000E8E  0E01               	movlw	high main@motorR
   989   000E90  6E10               	movwf	(setMotorPWM@m+1)^0,c
   990   000E92  ECF9  F00C         	call	_setMotorPWM	;wreg free
   991   000E96                     
   992                           ;../main.c: 48:     unsigned int color_flag;;../main.c: 49:     unsigned int color_name;
      +                          ;../main.c: 50:     unsigned int color_path[15] = {0};
   993   000E96  EE20  F0DF         	lfsr	2,main@color_path
   994   000E9A  0E1D               	movlw	29
   995   000E9C                     u1761:
   996   000E9C  6ADE               	clrf	postinc2,c
   997   000E9E  06E8               	decf	wreg,f,c
   998   000EA0  E2FD               	bc	u1761
   999   000EA2                     
  1000                           ;../main.c: 51:     int color_calibrated[32];;../main.c: 52:     unsigned int lowerbound
      +                          _calibrated;;../main.c: 53:     unsigned int upperbound_calibrated;;../main.c: 54:     s
      +                          truct RGB_val RGB_calibrated;;../main.c: 55:     struct RGB_val L_calibrated;;../main.c:
      +                           56:     struct RGB_val RGB_recorded;;../main.c: 57:     unsigned int time_path[15] = {0
      +                          };
  1001   000EA2  EE21  F064         	lfsr	2,main@time_path
  1002   000EA6  0E1D               	movlw	29
  1003   000EA8                     u1771:
  1004   000EA8  6ADE               	clrf	postinc2,c
  1005   000EAA  06E8               	decf	wreg,f,c
  1006   000EAC  E2FD               	bc	u1771
  1007   000EAE                     l197:
  1008   000EAE  B68E               	btfsc	142,3,c	;volatile
  1009   000EB0  EF5C  F007         	goto	u1781
  1010   000EB4  EF5E  F007         	goto	u1780
  1011   000EB8                     u1781:
  1012   000EB8  EF57  F007         	goto	l197
  1013   000EBC                     u1780:
  1014   000EBC                     
  1015                           ;../main.c: 64:         for (int i=0;i<8;i++){
  1016   000EBC  0E00               	movlw	0
  1017   000EBE  0101               	movlb	1	; () banked
  1018   000EC0  6FCD               	movwf	(main@i+1)& (0+255),b
  1019   000EC2  0E00               	movlw	0
  1020   000EC4  6FCC               	movwf	main@i& (0+255),b
  1021   000EC6                     l3047:
  1022                           
  1023                           ; BSR set to: 1
  1024                           ;../main.c: 65:             color_read(&RGB_calibrated);
  1025   000EC6  0ECE               	movlw	low main@RGB_calibrated
  1026   000EC8  6E0C               	movwf	color_read@rgb^0,c
  1027   000ECA  0E01               	movlw	high main@RGB_calibrated
  1028   000ECC  6E0D               	movwf	(color_read@rgb+1)^0,c
  1029   000ECE  EC2E  F011         	call	_color_read	;wreg free
  1030   000ED2                     
  1031                           ;../main.c: 66:             color_calibrated[4*i] = RGB_calibrated.L;
  1032   000ED2  C1CC  F059         	movff	main@i,??_main
  1033   000ED6  C1CD  F05A         	movff	main@i+1,??_main+1
  1034   000EDA  90D8               	bcf	status,0,c
  1035   000EDC  3659               	rlcf	??_main^0,f,c
  1036   000EDE  365A               	rlcf	(??_main+1)^0,f,c
  1037   000EE0  90D8               	bcf	status,0,c
  1038   000EE2  3659               	rlcf	??_main^0,f,c
  1039   000EE4  365A               	rlcf	(??_main+1)^0,f,c
  1040   000EE6  90D8               	bcf	status,0,c
  1041   000EE8  3659               	rlcf	??_main^0,f,c
  1042   000EEA  365A               	rlcf	(??_main+1)^0,f,c
  1043   000EEC  0E82               	movlw	low main@color_calibrated
  1044   000EEE  2459               	addwf	??_main^0,w,c
  1045   000EF0  6ED9               	movwf	fsr2l,c
  1046   000EF2  0E01               	movlw	high main@color_calibrated
  1047   000EF4  205A               	addwfc	(??_main+1)^0,w,c
  1048   000EF6  6EDA               	movwf	fsr2h,c
  1049   000EF8  C1CE  FFDE         	movff	main@RGB_calibrated,postinc2
  1050   000EFC  C1CF  FFDD         	movff	main@RGB_calibrated+1,postdec2
  1051   000F00                     
  1052                           ;../main.c: 67:             color_calibrated[4*i+1] = RGB_calibrated.R;
  1053   000F00  C1CC  F059         	movff	main@i,??_main
  1054   000F04  C1CD  F05A         	movff	main@i+1,??_main+1
  1055   000F08  90D8               	bcf	status,0,c
  1056   000F0A  3659               	rlcf	??_main^0,f,c
  1057   000F0C  365A               	rlcf	(??_main+1)^0,f,c
  1058   000F0E  90D8               	bcf	status,0,c
  1059   000F10  3659               	rlcf	??_main^0,f,c
  1060   000F12  365A               	rlcf	(??_main+1)^0,f,c
  1061   000F14  90D8               	bcf	status,0,c
  1062   000F16  3659               	rlcf	??_main^0,f,c
  1063   000F18  365A               	rlcf	(??_main+1)^0,f,c
  1064   000F1A  0E02               	movlw	2
  1065   000F1C  2659               	addwf	??_main^0,f,c
  1066   000F1E  0E00               	movlw	0
  1067   000F20  225A               	addwfc	(??_main+1)^0,f,c
  1068   000F22  0E82               	movlw	low main@color_calibrated
  1069   000F24  2459               	addwf	??_main^0,w,c
  1070   000F26  6ED9               	movwf	fsr2l,c
  1071   000F28  0E01               	movlw	high main@color_calibrated
  1072   000F2A  205A               	addwfc	(??_main+1)^0,w,c
  1073   000F2C  6EDA               	movwf	fsr2h,c
  1074   000F2E  C1D0  FFDE         	movff	main@RGB_calibrated+2,postinc2
  1075   000F32  C1D1  FFDD         	movff	main@RGB_calibrated+3,postdec2
  1076   000F36                     
  1077                           ;../main.c: 68:             color_calibrated[4*i+2] = RGB_calibrated.G;
  1078   000F36  C1CC  F059         	movff	main@i,??_main
  1079   000F3A  C1CD  F05A         	movff	main@i+1,??_main+1
  1080   000F3E  90D8               	bcf	status,0,c
  1081   000F40  3659               	rlcf	??_main^0,f,c
  1082   000F42  365A               	rlcf	(??_main+1)^0,f,c
  1083   000F44  90D8               	bcf	status,0,c
  1084   000F46  3659               	rlcf	??_main^0,f,c
  1085   000F48  365A               	rlcf	(??_main+1)^0,f,c
  1086   000F4A  90D8               	bcf	status,0,c
  1087   000F4C  3659               	rlcf	??_main^0,f,c
  1088   000F4E  365A               	rlcf	(??_main+1)^0,f,c
  1089   000F50  0E04               	movlw	4
  1090   000F52  2659               	addwf	??_main^0,f,c
  1091   000F54  0E00               	movlw	0
  1092   000F56  225A               	addwfc	(??_main+1)^0,f,c
  1093   000F58  0E82               	movlw	low main@color_calibrated
  1094   000F5A  2459               	addwf	??_main^0,w,c
  1095   000F5C  6ED9               	movwf	fsr2l,c
  1096   000F5E  0E01               	movlw	high main@color_calibrated
  1097   000F60  205A               	addwfc	(??_main+1)^0,w,c
  1098   000F62  6EDA               	movwf	fsr2h,c
  1099   000F64  C1D2  FFDE         	movff	main@RGB_calibrated+4,postinc2
  1100   000F68  C1D3  FFDD         	movff	main@RGB_calibrated+5,postdec2
  1101   000F6C                     
  1102                           ;../main.c: 69:             color_calibrated[4*i+3] = RGB_calibrated.B;
  1103   000F6C  C1CC  F059         	movff	main@i,??_main
  1104   000F70  C1CD  F05A         	movff	main@i+1,??_main+1
  1105   000F74  90D8               	bcf	status,0,c
  1106   000F76  3659               	rlcf	??_main^0,f,c
  1107   000F78  365A               	rlcf	(??_main+1)^0,f,c
  1108   000F7A  90D8               	bcf	status,0,c
  1109   000F7C  3659               	rlcf	??_main^0,f,c
  1110   000F7E  365A               	rlcf	(??_main+1)^0,f,c
  1111   000F80  90D8               	bcf	status,0,c
  1112   000F82  3659               	rlcf	??_main^0,f,c
  1113   000F84  365A               	rlcf	(??_main+1)^0,f,c
  1114   000F86  0E06               	movlw	6
  1115   000F88  2659               	addwf	??_main^0,f,c
  1116   000F8A  0E00               	movlw	0
  1117   000F8C  225A               	addwfc	(??_main+1)^0,f,c
  1118   000F8E  0E82               	movlw	low main@color_calibrated
  1119   000F90  2459               	addwf	??_main^0,w,c
  1120   000F92  6ED9               	movwf	fsr2l,c
  1121   000F94  0E01               	movlw	high main@color_calibrated
  1122   000F96  205A               	addwfc	(??_main+1)^0,w,c
  1123   000F98  6EDA               	movwf	fsr2h,c
  1124   000F9A  C1D4  FFDE         	movff	main@RGB_calibrated+6,postinc2
  1125   000F9E  C1D5  FFDD         	movff	main@RGB_calibrated+7,postdec2
  1126   000FA2                     
  1127                           ;../main.c: 70:             LATHbits.LATH3 = 1;
  1128   000FA2  8680               	bsf	128,3,c	;volatile
  1129   000FA4                     
  1130                           ;../main.c: 72:             char readout2[100];;../main.c: 73:             sprintf(reado
      +                          ut2,"%d %d %d %d \r\n", RGB_calibrated.L,RGB_calibrated.R,RGB_calibrated.G,RGB_calibrate
      +                          d.B);
  1131   000FA4  0E7B               	movlw	low main@readout2
  1132   000FA6  0100               	movlb	0	; () banked
  1133   000FA8  6F60               	movwf	sprintf@s& (0+255),b
  1134   000FAA  0E00               	movlw	high main@readout2
  1135   000FAC  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1136   000FAE  0E04               	movlw	low (STR_2+3)
  1137   000FB0  6F62               	movwf	sprintf@fmt& (0+255),b
  1138   000FB2  0E0E               	movlw	high (STR_2+3)
  1139   000FB4  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1140   000FB6  C1CE  F064         	movff	main@RGB_calibrated,?_sprintf+4
  1141   000FBA  C1CF  F065         	movff	main@RGB_calibrated+1,?_sprintf+5
  1142   000FBE  C1D0  F066         	movff	main@RGB_calibrated+2,?_sprintf+6
  1143   000FC2  C1D1  F067         	movff	main@RGB_calibrated+3,?_sprintf+7
  1144   000FC6  C1D2  F068         	movff	main@RGB_calibrated+4,?_sprintf+8
  1145   000FCA  C1D3  F069         	movff	main@RGB_calibrated+5,?_sprintf+9
  1146   000FCE  C1D4  F06A         	movff	main@RGB_calibrated+6,?_sprintf+10
  1147   000FD2  C1D5  F06B         	movff	main@RGB_calibrated+7,?_sprintf+11
  1148   000FD6  ECB0  F014         	call	_sprintf	;wreg free
  1149   000FDA                     
  1150                           ;../main.c: 74:             sendStringSerial4(readout2);
  1151   000FDA  0E7B               	movlw	low main@readout2
  1152   000FDC  6E02               	movwf	sendStringSerial4@string^0,c
  1153   000FDE  0E00               	movlw	high main@readout2
  1154   000FE0  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1155   000FE2  EC26  F016         	call	_sendStringSerial4	;wreg free
  1156   000FE6                     
  1157                           ;../main.c: 75:             _delay((unsigned long)((2000)*(64000000/4000.0)));
  1158   000FE6  0EA3               	movlw	163
  1159   000FE8  6E5A               	movwf	(??_main+1)^0,c
  1160   000FEA  0E57               	movlw	87
  1161   000FEC  6E59               	movwf	??_main^0,c
  1162   000FEE  0E02               	movlw	2
  1163   000FF0                     u1927:
  1164   000FF0  2EE8               	decfsz	wreg,f,c
  1165   000FF2  D7FE               	bra	u1927
  1166   000FF4  2E59               	decfsz	??_main^0,f,c
  1167   000FF6  D7FC               	bra	u1927
  1168   000FF8  2E5A               	decfsz	(??_main+1)^0,f,c
  1169   000FFA  D7FA               	bra	u1927
  1170   000FFC  D000               	nop2	
  1171   000FFE                     
  1172                           ;../main.c: 76:             LATHbits.LATH3 = 0;
  1173   000FFE  9680               	bcf	128,3,c	;volatile
  1174   001000                     
  1175                           ;../main.c: 77:             _delay((unsigned long)((2000)*(64000000/4000.0)));
  1176   001000  0EA3               	movlw	163
  1177   001002  6E5A               	movwf	(??_main+1)^0,c
  1178   001004  0E57               	movlw	87
  1179   001006  6E59               	movwf	??_main^0,c
  1180   001008  0E02               	movlw	2
  1181   00100A                     u1937:
  1182   00100A  2EE8               	decfsz	wreg,f,c
  1183   00100C  D7FE               	bra	u1937
  1184   00100E  2E59               	decfsz	??_main^0,f,c
  1185   001010  D7FC               	bra	u1937
  1186   001012  2E5A               	decfsz	(??_main+1)^0,f,c
  1187   001014  D7FA               	bra	u1937
  1188   001016  D000               	nop2	
  1189   001018                     
  1190                           ;../main.c: 78:         }
  1191   001018  0101               	movlb	1	; () banked
  1192   00101A  4BCC               	infsnz	main@i& (0+255),f,b
  1193   00101C  2BCD               	incf	(main@i+1)& (0+255),f,b
  1194   00101E                     
  1195                           ; BSR set to: 1
  1196   00101E  BFCD               	btfsc	(main@i+1)& (0+255),7,b
  1197   001020  EF1B  F008         	goto	u1791
  1198   001024  51CD               	movf	(main@i+1)& (0+255),w,b
  1199   001026  E109               	bnz	u1790
  1200   001028  0E08               	movlw	8
  1201   00102A  5DCC               	subwf	main@i& (0+255),w,b
  1202   00102C  A0D8               	btfss	status,0,c
  1203   00102E  EF1B  F008         	goto	u1791
  1204   001032  EF1D  F008         	goto	u1790
  1205   001036                     u1791:
  1206   001036  EF63  F007         	goto	l3047
  1207   00103A                     u1790:
  1208   00103A                     
  1209                           ; BSR set to: 1
  1210                           ;../main.c: 81:         lowerbound_calibrated = color_calibrated[8];
  1211   00103A  C192  F0FD         	movff	main@color_calibrated+16,main@lowerbound_calibrated
  1212   00103E  C193  F0FE         	movff	main@color_calibrated+17,main@lowerbound_calibrated+1
  1213                           
  1214                           ;../main.c: 82:         upperbound_calibrated = color_calibrated[28];
  1215   001042  C1BA  F1C2         	movff	main@color_calibrated+56,main@upperbound_calibrated
  1216   001046  C1BB  F1C3         	movff	main@color_calibrated+57,main@upperbound_calibrated+1
  1217   00104A                     l3073:
  1218   00104A  0E01               	movlw	1
  1219   00104C  A68E               	btfss	142,3,c	;volatile
  1220   00104E  0E00               	movlw	0
  1221   001050  A48E               	btfss	142,2,c	;volatile
  1222   001052  0E00               	movlw	0
  1223   001054  B0E8               	btfsc	wreg,0,c
  1224   001056  EF2F  F008         	goto	u1801
  1225   00105A  EF33  F008         	goto	u1800
  1226   00105E                     u1801:
  1227   00105E  6A59               	clrf	??_main^0,c
  1228   001060  2A59               	incf	??_main^0,f,c
  1229   001062  EF34  F008         	goto	u1808
  1230   001066                     u1800:
  1231   001066  6A59               	clrf	??_main^0,c
  1232   001068                     u1808:
  1233   001068  5059               	movf	??_main^0,w,c
  1234   00106A  A4D8               	btfss	status,2,c
  1235   00106C  EF3A  F008         	goto	u1811
  1236   001070  EF3C  F008         	goto	u1810
  1237   001074                     u1811:
  1238   001074  EF25  F008         	goto	l3073
  1239   001078                     u1810:
  1240   001078                     
  1241                           ;../main.c: 86:         if (!PORTFbits.RF2){LATDbits.LATD7 = 1;}
  1242   001078  B48E               	btfsc	142,2,c	;volatile
  1243   00107A  EF41  F008         	goto	u1821
  1244   00107E  EF43  F008         	goto	u1820
  1245   001082                     u1821:
  1246   001082  EF46  F008         	goto	l205
  1247   001086                     u1820:
  1248   001086  8E7C               	bsf	124,7,c	;volatile
  1249   001088  EF1A  F009         	goto	l3119
  1250   00108C                     l205:
  1251   00108C  8680               	bsf	128,3,c	;volatile
  1252   00108E  EF1A  F009         	goto	l3119
  1253   001092                     l3077:
  1254                           
  1255                           ; BSR set to: 1
  1256                           ;../main.c: 91:             time = 0;
  1257   001092  0E00               	movlw	0
  1258   001094  6FF5               	movwf	(_time+1)& (0+255),b
  1259   001096  0E00               	movlw	0
  1260   001098  6FF4               	movwf	_time& (0+255),b
  1261   00109A                     
  1262                           ; BSR set to: 1
  1263                           ;../main.c: 92:             forward(&motorL,&motorR);
  1264   00109A  0EE7               	movlw	low main@motorL
  1265   00109C  6E1A               	movwf	forward@mL^0,c
  1266   00109E  0E01               	movlw	high main@motorL
  1267   0010A0  6E1B               	movwf	(forward@mL+1)^0,c
  1268   0010A2  0EDE               	movlw	low main@motorR
  1269   0010A4  6E1C               	movwf	forward@mR^0,c
  1270   0010A6  0E01               	movlw	high main@motorR
  1271   0010A8  6E1D               	movwf	(forward@mR+1)^0,c
  1272   0010AA  EC01  F014         	call	_forward	;wreg free
  1273   0010AE                     
  1274                           ;../main.c: 93:             color_read(&RGB_recorded);
  1275   0010AE  0ED6               	movlw	low main@RGB_recorded
  1276   0010B0  6E0C               	movwf	color_read@rgb^0,c
  1277   0010B2  0E01               	movlw	high main@RGB_recorded
  1278   0010B4  6E0D               	movwf	(color_read@rgb+1)^0,c
  1279   0010B6  EC2E  F011         	call	_color_read	;wreg free
  1280   0010BA                     
  1281                           ;../main.c: 94:             if (RGB_recorded.L<upperbound_calibrated && RGB_recorded.L>l
      +                          owerbound_calibrated){color_flag=1;}
  1282   0010BA  0101               	movlb	1	; () banked
  1283   0010BC  51C2               	movf	main@upperbound_calibrated& (0+255),w,b
  1284   0010BE  5DD6               	subwf	main@RGB_recorded& (0+255),w,b
  1285   0010C0  51C3               	movf	(main@upperbound_calibrated+1)& (0+255),w,b
  1286   0010C2  59D7               	subwfb	(main@RGB_recorded+1)& (0+255),w,b
  1287   0010C4  B0D8               	btfsc	status,0,c
  1288   0010C6  EF67  F008         	goto	u1831
  1289   0010CA  EF69  F008         	goto	u1830
  1290   0010CE                     u1831:
  1291   0010CE  EF7B  F008         	goto	l3089
  1292   0010D2                     u1830:
  1293   0010D2                     
  1294                           ; BSR set to: 1
  1295   0010D2  51D6               	movf	main@RGB_recorded& (0+255),w,b
  1296   0010D4  0100               	movlb	0	; () banked
  1297   0010D6  5DFD               	subwf	main@lowerbound_calibrated& (0+255),w,b
  1298   0010D8  0101               	movlb	1	; () banked
  1299   0010DA  51D7               	movf	(main@RGB_recorded+1)& (0+255),w,b
  1300   0010DC  0100               	movlb	0	; () banked
  1301   0010DE  59FE               	subwfb	(main@lowerbound_calibrated+1)& (0+255),w,b
  1302   0010E0  B0D8               	btfsc	status,0,c
  1303   0010E2  EF75  F008         	goto	u1841
  1304   0010E6  EF77  F008         	goto	u1840
  1305   0010EA                     u1841:
  1306   0010EA  EF7B  F008         	goto	l3089
  1307   0010EE                     u1840:
  1308   0010EE                     
  1309                           ; BSR set to: 0
  1310   0010EE  0E00               	movlw	0
  1311   0010F0  6E5C               	movwf	(main@color_flag+1)^0,c
  1312   0010F2  0E01               	movlw	1
  1313   0010F4  6E5B               	movwf	main@color_flag^0,c
  1314   0010F6                     l3089:
  1315                           
  1316                           ;../main.c: 95:             if (color_flag){
  1317   0010F6  505B               	movf	main@color_flag^0,w,c
  1318   0010F8  105C               	iorwf	(main@color_flag+1)^0,w,c
  1319   0010FA  B4D8               	btfsc	status,2,c
  1320   0010FC  EF82  F008         	goto	u1851
  1321   001100  EF84  F008         	goto	u1850
  1322   001104                     u1851:
  1323   001104  EF0E  F009         	goto	l3117
  1324   001108                     u1850:
  1325   001108                     
  1326                           ;../main.c: 96:                 stop(&motorL,&motorR);
  1327   001108  0EE7               	movlw	low main@motorL
  1328   00110A  6E1A               	movwf	stop@mL^0,c
  1329   00110C  0E01               	movlw	high main@motorL
  1330   00110E  6E1B               	movwf	(stop@mL+1)^0,c
  1331   001110  0EDE               	movlw	low main@motorR
  1332   001112  6E1C               	movwf	stop@mR^0,c
  1333   001114  0E01               	movlw	high main@motorR
  1334   001116  6E1D               	movwf	(stop@mR+1)^0,c
  1335   001118  ECBA  F013         	call	_stop	;wreg free
  1336   00111C                     
  1337                           ;../main.c: 97:                 color_read(&RGB_recorded);
  1338   00111C  0ED6               	movlw	low main@RGB_recorded
  1339   00111E  6E0C               	movwf	color_read@rgb^0,c
  1340   001120  0E01               	movlw	high main@RGB_recorded
  1341   001122  6E0D               	movwf	(color_read@rgb+1)^0,c
  1342   001124  EC2E  F011         	call	_color_read	;wreg free
  1343   001128                     
  1344                           ;../main.c: 98:                 if (LATDbits.LATD7){color_name = color_processor_easy(&R
      +                          GB_recorded);}
  1345   001128  AE7C               	btfss	124,7,c	;volatile
  1346   00112A  EF99  F008         	goto	u1861
  1347   00112E  EF9B  F008         	goto	u1860
  1348   001132                     u1861:
  1349   001132  EFA7  F008         	goto	l3099
  1350   001136                     u1860:
  1351   001136  0ED6               	movlw	low main@RGB_recorded
  1352   001138  6E01               	movwf	color_processor_easy@rgb^0,c
  1353   00113A  0E01               	movlw	high main@RGB_recorded
  1354   00113C  6E02               	movwf	(color_processor_easy@rgb+1)^0,c
  1355   00113E  ECCF  F010         	call	_color_processor_easy	;wreg free
  1356   001142  C001  F1C8         	movff	?_color_processor_easy,main@color_name
  1357   001146  C002  F1C9         	movff	?_color_processor_easy+1,main@color_name+1
  1358   00114A  EFB5  F008         	goto	l3101
  1359   00114E                     l3099:
  1360   00114E  0ED6               	movlw	low main@RGB_recorded
  1361   001150  6E01               	movwf	color_processor_hard@rgb^0,c
  1362   001152  0E01               	movlw	high main@RGB_recorded
  1363   001154  6E02               	movwf	(color_processor_hard@rgb+1)^0,c
  1364   001156  0E82               	movlw	low main@color_calibrated
  1365   001158  6E03               	movwf	color_processor_hard@calibrated^0,c
  1366   00115A  0E01               	movlw	high main@color_calibrated
  1367   00115C  6E04               	movwf	(color_processor_hard@calibrated+1)^0,c
  1368   00115E  EC07  F00C         	call	_color_processor_hard	;wreg free
  1369   001162  C001  F1C8         	movff	?_color_processor_hard,main@color_name
  1370   001166  C002  F1C9         	movff	?_color_processor_hard+1,main@color_name+1
  1371   00116A                     l3101:
  1372                           
  1373                           ;../main.c: 100:                 color_path[j] = color_name;
  1374   00116A  90D8               	bcf	status,0,c
  1375   00116C  0101               	movlb	1	; () banked
  1376   00116E  35C6               	rlcf	main@j& (0+255),w,b
  1377   001170  6ED9               	movwf	fsr2l,c
  1378   001172  35C7               	rlcf	(main@j+1)& (0+255),w,b
  1379   001174  6EDA               	movwf	fsr2h,c
  1380   001176  0EDF               	movlw	low main@color_path
  1381   001178  26D9               	addwf	fsr2l,f,c
  1382   00117A  0E00               	movlw	high main@color_path
  1383   00117C  22DA               	addwfc	fsr2h,f,c
  1384   00117E  C1C8  FFDE         	movff	main@color_name,postinc2
  1385   001182  C1C9  FFDD         	movff	main@color_name+1,postdec2
  1386   001186                     
  1387                           ; BSR set to: 1
  1388                           ;../main.c: 101:                 time_path[j] = time;
  1389   001186  90D8               	bcf	status,0,c
  1390   001188  35C6               	rlcf	main@j& (0+255),w,b
  1391   00118A  6ED9               	movwf	fsr2l,c
  1392   00118C  35C7               	rlcf	(main@j+1)& (0+255),w,b
  1393   00118E  6EDA               	movwf	fsr2h,c
  1394   001190  0E64               	movlw	low main@time_path
  1395   001192  26D9               	addwf	fsr2l,f,c
  1396   001194  0E01               	movlw	high main@time_path
  1397   001196  22DA               	addwfc	fsr2h,f,c
  1398   001198  C1F4  FFDE         	movff	_time,postinc2
  1399   00119C  C1F5  FFDD         	movff	_time+1,postdec2
  1400   0011A0                     
  1401                           ; BSR set to: 1
  1402                           ;../main.c: 104:                 char readout3[100];;../main.c: 105:                 spr
      +                          intf(readout3,"%d %d %d %d %d \r\n", color_name,RGB_recorded.L,RGB_recorded.R,RGB_record
      +                          ed.G,RGB_recorded.B);
  1403   0011A0  0E00               	movlw	low main@readout3
  1404   0011A2  0100               	movlb	0	; () banked
  1405   0011A4  6F60               	movwf	sprintf@s& (0+255),b
  1406   0011A6  0E01               	movlw	high main@readout3
  1407   0011A8  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1408   0011AA  0E01               	movlw	low STR_2
  1409   0011AC  6F62               	movwf	sprintf@fmt& (0+255),b
  1410   0011AE  0E0E               	movlw	high STR_2
  1411   0011B0  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1412   0011B2  C1C8  F064         	movff	main@color_name,?_sprintf+4
  1413   0011B6  C1C9  F065         	movff	main@color_name+1,?_sprintf+5
  1414   0011BA  C1D6  F066         	movff	main@RGB_recorded,?_sprintf+6
  1415   0011BE  C1D7  F067         	movff	main@RGB_recorded+1,?_sprintf+7
  1416   0011C2  C1D8  F068         	movff	main@RGB_recorded+2,?_sprintf+8
  1417   0011C6  C1D9  F069         	movff	main@RGB_recorded+3,?_sprintf+9
  1418   0011CA  C1DA  F06A         	movff	main@RGB_recorded+4,?_sprintf+10
  1419   0011CE  C1DB  F06B         	movff	main@RGB_recorded+5,?_sprintf+11
  1420   0011D2  C1DC  F06C         	movff	main@RGB_recorded+6,?_sprintf+12
  1421   0011D6  C1DD  F06D         	movff	main@RGB_recorded+7,?_sprintf+13
  1422   0011DA  ECB0  F014         	call	_sprintf	;wreg free
  1423   0011DE                     
  1424                           ;../main.c: 106:                 sendStringSerial4(readout3);
  1425   0011DE  0E00               	movlw	low main@readout3
  1426   0011E0  6E02               	movwf	sendStringSerial4@string^0,c
  1427   0011E2  0E01               	movlw	high main@readout3
  1428   0011E4  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1429   0011E6  EC26  F016         	call	_sendStringSerial4	;wreg free
  1430   0011EA                     
  1431                           ;../main.c: 108:                 motor_action(color_name,&motorL,&motorR);
  1432   0011EA  C1C8  F022         	movff	main@color_name,motor_action@color
  1433   0011EE  C1C9  F023         	movff	main@color_name+1,motor_action@color+1
  1434   0011F2  0EE7               	movlw	low main@motorL
  1435   0011F4  6E24               	movwf	motor_action@l^0,c
  1436   0011F6  0E01               	movlw	high main@motorL
  1437   0011F8  6E25               	movwf	(motor_action@l+1)^0,c
  1438   0011FA  0EDE               	movlw	low main@motorR
  1439   0011FC  6E26               	movwf	motor_action@r^0,c
  1440   0011FE  0E01               	movlw	high main@motorR
  1441   001200  6E27               	movwf	(motor_action@r+1)^0,c
  1442   001202  ECE0  F00A         	call	_motor_action	;wreg free
  1443   001206                     
  1444                           ;../main.c: 110:                 j++;
  1445   001206  0101               	movlb	1	; () banked
  1446   001208  4BC6               	infsnz	main@j& (0+255),f,b
  1447   00120A  2BC7               	incf	(main@j+1)& (0+255),f,b
  1448   00120C                     
  1449                           ; BSR set to: 1
  1450                           ;../main.c: 111:                 time = 0;
  1451   00120C  0E00               	movlw	0
  1452   00120E  6FF5               	movwf	(_time+1)& (0+255),b
  1453   001210  0E00               	movlw	0
  1454   001212  6FF4               	movwf	_time& (0+255),b
  1455   001214                     
  1456                           ; BSR set to: 1
  1457                           ;../main.c: 112:                 color_flag = 0;
  1458   001214  0E00               	movlw	0
  1459   001216  6E5C               	movwf	(main@color_flag+1)^0,c
  1460   001218  0E00               	movlw	0
  1461   00121A  6E5B               	movwf	main@color_flag^0,c
  1462   00121C                     l3117:
  1463                           
  1464                           ;../main.c: 114:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1465   00121C  0E11               	movlw	17
  1466   00121E  6E5A               	movwf	(??_main+1)^0,c
  1467   001220  0E3C               	movlw	60
  1468   001222  6E59               	movwf	??_main^0,c
  1469   001224  0ECB               	movlw	203
  1470   001226                     u1947:
  1471   001226  2EE8               	decfsz	wreg,f,c
  1472   001228  D7FE               	bra	u1947
  1473   00122A  2E59               	decfsz	??_main^0,f,c
  1474   00122C  D7FC               	bra	u1947
  1475   00122E  2E5A               	decfsz	(??_main+1)^0,f,c
  1476   001230  D7FA               	bra	u1947
  1477   001232  F000               	nop	
  1478   001234                     l3119:
  1479                           
  1480                           ;../main.c: 90:         while (color_name != 8){
  1481   001234  0E08               	movlw	8
  1482   001236  0101               	movlb	1	; () banked
  1483   001238  19C8               	xorwf	main@color_name& (0+255),w,b
  1484   00123A  11C9               	iorwf	(main@color_name+1)& (0+255),w,b
  1485   00123C  A4D8               	btfss	status,2,c
  1486   00123E  EF23  F009         	goto	u1871
  1487   001242  EF25  F009         	goto	u1870
  1488   001246                     u1871:
  1489   001246  EF49  F008         	goto	l3077
  1490   00124A                     u1870:
  1491   00124A                     
  1492                           ; BSR set to: 1
  1493                           ;../main.c: 118:         spin_180(&motorL,&motorR);
  1494   00124A  0EE7               	movlw	low main@motorL
  1495   00124C  6E1A               	movwf	spin_180@mL^0,c
  1496   00124E  0E01               	movlw	high main@motorL
  1497   001250  6E1B               	movwf	(spin_180@mL+1)^0,c
  1498   001252  0EDE               	movlw	low main@motorR
  1499   001254  6E1C               	movwf	spin_180@mR^0,c
  1500   001256  0E01               	movlw	high main@motorR
  1501   001258  6E1D               	movwf	(spin_180@mR+1)^0,c
  1502   00125A  EC25  F012         	call	_spin_180	;wreg free
  1503   00125E                     
  1504                           ;../main.c: 119:         for (int k=15;k>0;k--){
  1505   00125E  0E00               	movlw	0
  1506   001260  0101               	movlb	1	; () banked
  1507   001262  6FCB               	movwf	(main@k+1)& (0+255),b
  1508   001264  0E0F               	movlw	15
  1509   001266  6FCA               	movwf	main@k& (0+255),b
  1510   001268                     l3125:
  1511                           
  1512                           ; BSR set to: 1
  1513   001268  BFCB               	btfsc	(main@k+1)& (0+255),7,b
  1514   00126A  EF41  F009         	goto	u1880
  1515   00126E  51CB               	movf	(main@k+1)& (0+255),w,b
  1516   001270  E106               	bnz	u1881
  1517   001272  05CA               	decf	main@k& (0+255),w,b
  1518   001274  B0D8               	btfsc	status,0,c
  1519   001276  EF3F  F009         	goto	u1881
  1520   00127A  EF41  F009         	goto	u1880
  1521   00127E                     u1881:
  1522   00127E  EF43  F009         	goto	l214
  1523   001282                     u1880:
  1524   001282  EF57  F007         	goto	l197
  1525   001286                     l214:
  1526                           
  1527                           ; BSR set to: 1
  1528                           ;../main.c: 120:             INTCONbits.GIE = 0;
  1529   001286  9EF2               	bcf	242,7,c	;volatile
  1530   001288                     
  1531                           ; BSR set to: 1
  1532                           ;../main.c: 121:             time_return = 0;
  1533   001288  0E00               	movlw	0
  1534   00128A  6FC5               	movwf	(main@time_return+1)& (0+255),b
  1535   00128C  0E00               	movlw	0
  1536   00128E  6FC4               	movwf	main@time_return& (0+255),b
  1537   001290                     
  1538                           ; BSR set to: 1
  1539                           ;../main.c: 122:             motor_action(color_path[k],&motorL,&motorR);
  1540   001290  90D8               	bcf	status,0,c
  1541   001292  35CA               	rlcf	main@k& (0+255),w,b
  1542   001294  6ED9               	movwf	fsr2l,c
  1543   001296  35CB               	rlcf	(main@k+1)& (0+255),w,b
  1544   001298  6EDA               	movwf	fsr2h,c
  1545   00129A  0EDF               	movlw	low main@color_path
  1546   00129C  26D9               	addwf	fsr2l,f,c
  1547   00129E  0E00               	movlw	high main@color_path
  1548   0012A0  22DA               	addwfc	fsr2h,f,c
  1549   0012A2  CFDE F022          	movff	postinc2,motor_action@color
  1550   0012A6  CFDD F023          	movff	postdec2,motor_action@color+1
  1551   0012AA  0EE7               	movlw	low main@motorL
  1552   0012AC  6E24               	movwf	motor_action@l^0,c
  1553   0012AE  0E01               	movlw	high main@motorL
  1554   0012B0  6E25               	movwf	(motor_action@l+1)^0,c
  1555   0012B2  0EDE               	movlw	low main@motorR
  1556   0012B4  6E26               	movwf	motor_action@r^0,c
  1557   0012B6  0E01               	movlw	high main@motorR
  1558   0012B8  6E27               	movwf	(motor_action@r+1)^0,c
  1559   0012BA  ECE0  F00A         	call	_motor_action	;wreg free
  1560   0012BE                     
  1561                           ;../main.c: 123:             forward(&motorL,&motorR);
  1562   0012BE  0EE7               	movlw	low main@motorL
  1563   0012C0  6E1A               	movwf	forward@mL^0,c
  1564   0012C2  0E01               	movlw	high main@motorL
  1565   0012C4  6E1B               	movwf	(forward@mL+1)^0,c
  1566   0012C6  0EDE               	movlw	low main@motorR
  1567   0012C8  6E1C               	movwf	forward@mR^0,c
  1568   0012CA  0E01               	movlw	high main@motorR
  1569   0012CC  6E1D               	movwf	(forward@mR+1)^0,c
  1570   0012CE  EC01  F014         	call	_forward	;wreg free
  1571                           
  1572                           ;../main.c: 124:             while (time_return < time_path[k]) {
  1573   0012D2  EF7A  F009         	goto	l3139
  1574   0012D6                     l3135:
  1575                           
  1576                           ; BSR set to: 1
  1577                           ;../main.c: 125:                 _delay((unsigned long)((50)*(64000000/4000.0)));
  1578   0012D6  0E05               	movlw	5
  1579   0012D8  6E5A               	movwf	(??_main+1)^0,c
  1580   0012DA  0E0F               	movlw	15
  1581   0012DC  6E59               	movwf	??_main^0,c
  1582   0012DE  0EF1               	movlw	241
  1583   0012E0                     u1957:
  1584   0012E0  2EE8               	decfsz	wreg,f,c
  1585   0012E2  D7FE               	bra	u1957
  1586   0012E4  2E59               	decfsz	??_main^0,f,c
  1587   0012E6  D7FC               	bra	u1957
  1588   0012E8  2E5A               	decfsz	(??_main+1)^0,f,c
  1589   0012EA  D7FA               	bra	u1957
  1590   0012EC  F000               	nop	
  1591   0012EE                     
  1592                           ;../main.c: 126:                 time_return++;
  1593   0012EE  0101               	movlb	1	; () banked
  1594   0012F0  4BC4               	infsnz	main@time_return& (0+255),f,b
  1595   0012F2  2BC5               	incf	(main@time_return+1)& (0+255),f,b
  1596   0012F4                     l3139:
  1597                           
  1598                           ;../main.c: 124:             while (time_return < time_path[k]) {
  1599   0012F4  90D8               	bcf	status,0,c
  1600   0012F6  0101               	movlb	1	; () banked
  1601   0012F8  35CA               	rlcf	main@k& (0+255),w,b
  1602   0012FA  6ED9               	movwf	fsr2l,c
  1603   0012FC  35CB               	rlcf	(main@k+1)& (0+255),w,b
  1604   0012FE  6EDA               	movwf	fsr2h,c
  1605   001300  0E64               	movlw	low main@time_path
  1606   001302  26D9               	addwf	fsr2l,f,c
  1607   001304  0E01               	movlw	high main@time_path
  1608   001306  22DA               	addwfc	fsr2h,f,c
  1609   001308  50DE               	movf	postinc2,w,c
  1610   00130A  5DC4               	subwf	main@time_return& (0+255),w,b
  1611   00130C  50DE               	movf	postinc2,w,c
  1612   00130E  59C5               	subwfb	(main@time_return+1)& (0+255),w,b
  1613   001310  A0D8               	btfss	status,0,c
  1614   001312  EF8D  F009         	goto	u1891
  1615   001316  EF8F  F009         	goto	u1890
  1616   00131A                     u1891:
  1617   00131A  EF6B  F009         	goto	l3135
  1618   00131E                     u1890:
  1619   00131E                     
  1620                           ; BSR set to: 1
  1621                           ;../main.c: 128:             stop(&motorL,&motorR);
  1622   00131E  0EE7               	movlw	low main@motorL
  1623   001320  6E1A               	movwf	stop@mL^0,c
  1624   001322  0E01               	movlw	high main@motorL
  1625   001324  6E1B               	movwf	(stop@mL+1)^0,c
  1626   001326  0EDE               	movlw	low main@motorR
  1627   001328  6E1C               	movwf	stop@mR^0,c
  1628   00132A  0E01               	movlw	high main@motorR
  1629   00132C  6E1D               	movwf	(stop@mR+1)^0,c
  1630   00132E  ECBA  F013         	call	_stop	;wreg free
  1631   001332                     
  1632                           ;../main.c: 129:         }
  1633   001332  0101               	movlb	1	; () banked
  1634   001334  07CA               	decf	main@k& (0+255),f,b
  1635   001336  A0D8               	btfss	status,0,c
  1636   001338  07CB               	decf	(main@k+1)& (0+255),f,b
  1637   00133A  EF34  F009         	goto	l3125
  1638   00133E  EF1F  F000         	goto	start
  1639   001342                     __end_of_main:
  1640                           	callstack 0
  1641                           
  1642 ;; *************** function _sprintf *****************
  1643 ;; Defined at:
  1644 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;  s               2    0[BANK0 ] PTR unsigned char 
  1647 ;;		 -> main@readout3(100), main@readout2(100), 
  1648 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1649 ;;		 -> STR_2(18), STR_1(15), 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  f              11   16[BANK0 ] struct _IO_FILE
  1652 ;;  ap              2   14[BANK0 ] PTR void [1]
  1653 ;;		 -> ?_sprintf(2), 
  1654 ;;  ret             2    0        int 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  2    0[BANK0 ] int 
  1657 ;; Registers used:
  1658 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1664 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1665 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1667 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1668 ;;Total ram usage:       27 bytes
  1669 ;; Hardware stack levels used: 1
  1670 ;; Hardware stack levels required when called: 8
  1671 ;; This function calls:
  1672 ;;		_vfprintf
  1673 ;; This function is called by:
  1674 ;;		_main
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text1
  1679   002960                     __ptext1:
  1680                           	callstack 0
  1681   002960                     _sprintf:
  1682                           	callstack 22
  1683   002960  0E64               	movlw	low (?_sprintf+4)
  1684   002962  0100               	movlb	0	; () banked
  1685   002964  6F6E               	movwf	sprintf@ap& (0+255),b
  1686   002966  0E00               	movlw	high (?_sprintf+4)
  1687   002968  6F6F               	movwf	(sprintf@ap+1)& (0+255),b
  1688   00296A  C060  F070         	movff	sprintf@s,sprintf@f
  1689   00296E  C061  F071         	movff	sprintf@s+1,sprintf@f+1
  1690   002972                     
  1691                           ; BSR set to: 0
  1692   002972  0E00               	movlw	0
  1693   002974  6F74               	movwf	(sprintf@f+4)& (0+255),b
  1694   002976  0E00               	movlw	0
  1695   002978  6F73               	movwf	(sprintf@f+3)& (0+255),b
  1696   00297A                     
  1697                           ; BSR set to: 0
  1698   00297A  0E00               	movlw	0
  1699   00297C  6F7A               	movwf	(sprintf@f+10)& (0+255),b
  1700   00297E  0E00               	movlw	0
  1701   002980  6F79               	movwf	(sprintf@f+9)& (0+255),b
  1702   002982                     
  1703                           ; BSR set to: 0
  1704   002982  0E70               	movlw	low sprintf@f
  1705   002984  6E51               	movwf	vfprintf@fp^0,c
  1706   002986  0E00               	movlw	high sprintf@f
  1707   002988  6E52               	movwf	(vfprintf@fp+1)^0,c
  1708   00298A  C062  F053         	movff	sprintf@fmt,vfprintf@fmt
  1709   00298E  C063  F054         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1710   002992  0E6E               	movlw	low sprintf@ap
  1711   002994  6E55               	movwf	vfprintf@ap^0,c
  1712   002996  0E00               	movlw	high sprintf@ap
  1713   002998  6E56               	movwf	(vfprintf@ap+1)^0,c
  1714   00299A  ECD9  F014         	call	_vfprintf	;wreg free
  1715   00299E  0100               	movlb	0	; () banked
  1716   0029A0  5173               	movf	(sprintf@f+3)& (0+255),w,b
  1717   0029A2  2560               	addwf	sprintf@s& (0+255),w,b
  1718   0029A4  6ED9               	movwf	fsr2l,c
  1719   0029A6  5174               	movf	(sprintf@f+4)& (0+255),w,b
  1720   0029A8  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  1721   0029AA  6EDA               	movwf	fsr2h,c
  1722   0029AC  0E00               	movlw	0
  1723   0029AE  6EDF               	movwf	indf2,c
  1724   0029B0                     
  1725                           ; BSR set to: 0
  1726   0029B0  0012               	return		;funcret
  1727   0029B2                     __end_of_sprintf:
  1728                           	callstack 0
  1729                           
  1730 ;; *************** function _vfprintf *****************
  1731 ;; Defined at:
  1732 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
  1735 ;;		 -> sprintf@f(11), 
  1736 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
  1737 ;;		 -> STR_2(18), STR_1(15), 
  1738 ;;  ap              2   84[COMRAM] PTR PTR void 
  1739 ;;		 -> sprintf@ap(2), 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  cfmt            2   86[COMRAM] PTR unsigned char 
  1742 ;;		 -> STR_2(18), STR_1(15), 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  2   80[COMRAM] int 
  1745 ;; Registers used:
  1746 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1752 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1753 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1755 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1756 ;;Total ram usage:        8 bytes
  1757 ;; Hardware stack levels used: 1
  1758 ;; Hardware stack levels required when called: 7
  1759 ;; This function calls:
  1760 ;;		_vfpfcnvrt
  1761 ;; This function is called by:
  1762 ;;		_sprintf
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text2
  1767   0029B2                     __ptext2:
  1768                           	callstack 0
  1769   0029B2                     _vfprintf:
  1770                           	callstack 22
  1771   0029B2                     
  1772                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  1773   0029B2  C053  F057         	movff	vfprintf@fmt,vfprintf@cfmt
  1774   0029B6  C054  F058         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1775                           
  1776                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1777   0029BA  EFED  F014         	goto	l2753
  1778   0029BE                     l2751:
  1779                           
  1780                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1781   0029BE  C051  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1782   0029C2  C052  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1783   0029C6  0E57               	movlw	low vfprintf@cfmt
  1784   0029C8  6E41               	movwf	vfpfcnvrt@fmt^0,c
  1785   0029CA  0E00               	movlw	high vfprintf@cfmt
  1786   0029CC  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1787   0029CE  C055  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
  1788   0029D2  C056  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1789   0029D6  EC59  F00F         	call	_vfpfcnvrt	;wreg free
  1790   0029DA                     l2753:
  1791                           
  1792                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1793   0029DA  C057  FFF6         	movff	vfprintf@cfmt,tblptrl
  1794   0029DE  C058  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1795   0029E2                     	if	0	;tblptru may be non-zero
  1796   0029E2                     	endif
  1797   0029E2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1798   0029E2  0E00               	movlw	low (__mediumconst shr (0+16))
  1799   0029E4  6EF8               	movwf	tblptru,c
  1800   0029E6                     	endif
  1801   0029E6  0008               	tblrd		*
  1802   0029E8  50F5               	movf	tablat,w,c
  1803   0029EA  0900               	iorlw	0
  1804   0029EC  A4D8               	btfss	status,2,c
  1805   0029EE  EFFB  F014         	goto	u1541
  1806   0029F2  EFFD  F014         	goto	u1540
  1807   0029F6                     u1541:
  1808   0029F6  EFDF  F014         	goto	l2751
  1809   0029FA                     u1540:
  1810   0029FA                     
  1811                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  1812   0029FA  0E00               	movlw	0
  1813   0029FC  6E52               	movwf	(?_vfprintf+1)^0,c
  1814   0029FE  0E00               	movlw	0
  1815   002A00  6E51               	movwf	?_vfprintf^0,c
  1816   002A02  0012               	return		;funcret
  1817   002A04                     __end_of_vfprintf:
  1818                           	callstack 0
  1819                           
  1820 ;; *************** function _vfpfcnvrt *****************
  1821 ;; Defined at:
  1822 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
  1825 ;;		 -> sprintf@f(11), 
  1826 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
  1827 ;;		 -> vfprintf@cfmt(2), 
  1828 ;;  ap              2   66[COMRAM] PTR PTR void 
  1829 ;;		 -> sprintf@ap(2), 
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;  convarg         8   70[COMRAM] struct .
  1832 ;;  cp              2   78[COMRAM] PTR unsigned char 
  1833 ;;		 -> STR_2(18), STR_1(15), 
  1834 ;;  i               2    0        int 
  1835 ;;  done            2    0        int 
  1836 ;;  c               1    0        unsigned char 
  1837 ;; Return value:  Size  Location     Type
  1838 ;;                  1    wreg      void 
  1839 ;; Registers used:
  1840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1841 ;; Tracked objects:
  1842 ;;		On entry : 0/0
  1843 ;;		On exit  : 0/0
  1844 ;;		Unchanged: 0/0
  1845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1846 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1847 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1848 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1849 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1850 ;;Total ram usage:       18 bytes
  1851 ;; Hardware stack levels used: 1
  1852 ;; Hardware stack levels required when called: 6
  1853 ;; This function calls:
  1854 ;;		_dtoa
  1855 ;;		_fputc
  1856 ;; This function is called by:
  1857 ;;		_vfprintf
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           	psect	text3
  1862   001EB2                     __ptext3:
  1863                           	callstack 0
  1864   001EB2                     _vfpfcnvrt:
  1865                           	callstack 22
  1866   001EB2                     
  1867                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  1868   001EB2  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1869   001EB6  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1870   001EBA  CFDE FFF6          	movff	postinc2,tblptrl
  1871   001EBE  CFDD FFF7          	movff	postdec2,tblptrh
  1872   001EC2                     	if	0	;tblptru may be non-zero
  1873   001EC2                     	endif
  1874   001EC2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1875   001EC2  0E00               	movlw	low (__mediumconst shr (0+16))
  1876   001EC4  6EF8               	movwf	tblptru,c
  1877   001EC6                     	endif
  1878   001EC6  0008               	tblrd		*
  1879   001EC8  50F5               	movf	tablat,w,c
  1880   001ECA  0A25               	xorlw	37
  1881   001ECC  A4D8               	btfss	status,2,c
  1882   001ECE  EF6B  F00F         	goto	u1421
  1883   001ED2  EF6D  F00F         	goto	u1420
  1884   001ED6                     u1421:
  1885   001ED6  EFF1  F00F         	goto	l2517
  1886   001EDA                     u1420:
  1887   001EDA                     
  1888                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  1889   001EDA  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1890   001EDE  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1891   001EE2  2ADE               	incf	postinc2,f,c
  1892   001EE4  0E00               	movlw	0
  1893   001EE6  22DD               	addwfc	postdec2,f,c
  1894   001EE8                     
  1895                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  1896   001EE8  0E00               	movlw	0
  1897   001EEA  0101               	movlb	1	; () banked
  1898   001EEC  6FF1               	movwf	(_width+1)& (0+255),b
  1899   001EEE  0E00               	movlw	0
  1900   001EF0  6FF0               	movwf	_width& (0+255),b
  1901   001EF2  C1F0  F1FA         	movff	_width,_flags
  1902   001EF6                     
  1903                           ; BSR set to: 1
  1904                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  1905   001EF6  69F2               	setf	_prec& (0+255),b
  1906   001EF8  69F3               	setf	(_prec+1)& (0+255),b
  1907   001EFA                     
  1908                           ; BSR set to: 1
  1909                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1910   001EFA  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1911   001EFE  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1912   001F02  CFDE F04F          	movff	postinc2,vfpfcnvrt@cp
  1913   001F06  CFDD F050          	movff	postdec2,vfpfcnvrt@cp+1
  1914   001F0A                     
  1915                           ; BSR set to: 1
  1916                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1917   001F0A  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1918   001F0E  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1919   001F12                     	if	0	;tblptru may be non-zero
  1920   001F12                     	endif
  1921   001F12                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1922   001F12  0E00               	movlw	low (__mediumconst shr (0+16))
  1923   001F14  6EF8               	movwf	tblptru,c
  1924   001F16                     	endif
  1925   001F16  0008               	tblrd		*
  1926   001F18  50F5               	movf	tablat,w,c
  1927   001F1A  0A64               	xorlw	100
  1928   001F1C  B4D8               	btfsc	status,2,c
  1929   001F1E  EF93  F00F         	goto	u1431
  1930   001F22  EF95  F00F         	goto	u1430
  1931   001F26                     u1431:
  1932   001F26  EFA5  F00F         	goto	l2507
  1933   001F2A                     u1430:
  1934   001F2A                     
  1935                           ; BSR set to: 1
  1936   001F2A  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1937   001F2E  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1938   001F32                     	if	0	;tblptru may be non-zero
  1939   001F32                     	endif
  1940   001F32                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1941   001F32  0E00               	movlw	low (__mediumconst shr (0+16))
  1942   001F34  6EF8               	movwf	tblptru,c
  1943   001F36                     	endif
  1944   001F36  0008               	tblrd		*
  1945   001F38  50F5               	movf	tablat,w,c
  1946   001F3A  0A69               	xorlw	105
  1947   001F3C  A4D8               	btfss	status,2,c
  1948   001F3E  EFA3  F00F         	goto	u1441
  1949   001F42  EFA5  F00F         	goto	u1440
  1950   001F46                     u1441:
  1951   001F46  EFE8  F00F         	goto	l2513
  1952   001F4A                     u1440:
  1953   001F4A                     l2507:
  1954                           
  1955                           ; BSR set to: 1
  1956                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1957   001F4A  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1958   001F4E  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1959   001F52  CFDF F045          	movff	indf2,??_vfpfcnvrt
  1960   001F56  0E02               	movlw	2
  1961   001F58  26DE               	addwf	postinc2,f,c
  1962   001F5A  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  1963   001F5E  0E00               	movlw	0
  1964   001F60  22DD               	addwfc	postdec2,f,c
  1965   001F62  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1966   001F66  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1967   001F6A  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg
  1968   001F6E  CFDD F048          	movff	postdec2,vfpfcnvrt@convarg+1
  1969   001F72  0E00               	movlw	0
  1970   001F74  BE48               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1971   001F76  0EFF               	movlw	-1
  1972   001F78  6E49               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1973   001F7A  6E4A               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1974   001F7C  6E4B               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1975   001F7E  6E4C               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1976   001F80  6E4D               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1977   001F82  6E4E               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1978                           
  1979                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1980   001F84  0E01               	movlw	1
  1981   001F86  244F               	addwf	vfpfcnvrt@cp^0,w,c
  1982   001F88  6E45               	movwf	??_vfpfcnvrt^0,c
  1983   001F8A  0E00               	movlw	0
  1984   001F8C  2050               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1985   001F8E  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  1986   001F90  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1987   001F94  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1988   001F98  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  1989   001F9C  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1990   001FA0                     
  1991                           ; BSR set to: 1
  1992                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1993   001FA0  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1994   001FA4  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1995   001FA8  C047  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  1996   001FAC  C048  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1997   001FB0  C049  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1998   001FB4  C04A  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1999   001FB8  C04B  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2000   001FBC  C04C  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2001   001FC0  C04D  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2002   001FC4  C04E  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2003   001FC8  ECA1  F009         	call	_dtoa	;wreg free
  2004   001FCC  EF07  F010         	goto	l1175
  2005   001FD0                     l2513:
  2006                           
  2007                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2008   001FD0  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2009   001FD4  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2010   001FD8  2ADE               	incf	postinc2,f,c
  2011   001FDA  0E00               	movlw	0
  2012   001FDC  22DD               	addwfc	postdec2,f,c
  2013   001FDE  EF07  F010         	goto	l1175
  2014   001FE2                     l2517:
  2015                           
  2016                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2017   001FE2  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2018   001FE6  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2019   001FEA  CFDE FFF6          	movff	postinc2,tblptrl
  2020   001FEE  CFDD FFF7          	movff	postdec2,tblptrh
  2021   001FF2                     	if	0	;tblptru may be non-zero
  2022   001FF2                     	endif
  2023   001FF2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2024   001FF2  0E00               	movlw	low (__mediumconst shr (0+16))
  2025   001FF4  6EF8               	movwf	tblptru,c
  2026   001FF6                     	endif
  2027   001FF6  0008               	tblrd		*
  2028   001FF8  50F5               	movf	tablat,w,c
  2029   001FFA  6E01               	movwf	fputc@c^0,c
  2030   001FFC  6A02               	clrf	(fputc@c+1)^0,c
  2031   001FFE  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2032   002002  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2033   002006  EC08  F010         	call	_fputc	;wreg free
  2034   00200A  EFE8  F00F         	goto	l2513
  2035   00200E                     l1175:
  2036   00200E  0012               	return		;funcret
  2037   002010                     __end_of_vfpfcnvrt:
  2038                           	callstack 0
  2039                           
  2040 ;; *************** function _dtoa *****************
  2041 ;; Defined at:
  2042 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2045 ;;		 -> sprintf@f(11), 
  2046 ;;  d               8   29[COMRAM] long long 
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;  n               8   51[COMRAM] long long 
  2049 ;;  i               2   59[COMRAM] int 
  2050 ;;  w               2   49[COMRAM] int 
  2051 ;;  p               2   47[COMRAM] int 
  2052 ;;  s               1   61[COMRAM] unsigned char 
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  1    wreg      void 
  2055 ;; Registers used:
  2056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2062 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2063 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2064 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2065 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2066 ;;Total ram usage:       35 bytes
  2067 ;; Hardware stack levels used: 1
  2068 ;; Hardware stack levels required when called: 5
  2069 ;; This function calls:
  2070 ;;		___aodiv
  2071 ;;		___aomod
  2072 ;;		_abs
  2073 ;;		_pad
  2074 ;; This function is called by:
  2075 ;;		_vfpfcnvrt
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           	psect	text4
  2080   001342                     __ptext4:
  2081                           	callstack 0
  2082   001342                     _dtoa:
  2083                           	callstack 22
  2084   001342                     
  2085                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2086   001342  C01E  F034         	movff	dtoa@d,dtoa@n
  2087   001346  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  2088   00134A  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  2089   00134E  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  2090   001352  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  2091   001356  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  2092   00135A  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  2093   00135E  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  2094   001362                     
  2095                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2096   001362  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  2097   001364  EFB6  F009         	goto	u1261
  2098   001368  EFB9  F009         	goto	u1260
  2099   00136C                     u1261:
  2100   00136C  0E01               	movlw	1
  2101   00136E  EFBA  F009         	goto	u1270
  2102   001372                     u1260:
  2103   001372  0E00               	movlw	0
  2104   001374                     u1270:
  2105   001374  6E3E               	movwf	dtoa@s^0,c
  2106   001376                     
  2107                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2108   001376  503E               	movf	dtoa@s^0,w,c
  2109   001378  B4D8               	btfsc	status,2,c
  2110   00137A  EFC1  F009         	goto	u1281
  2111   00137E  EFC3  F009         	goto	u1280
  2112   001382                     u1281:
  2113   001382  EFD3  F009         	goto	l2405
  2114   001386                     u1280:
  2115   001386                     
  2116                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2117   001386  1E3B               	comf	(dtoa@n+7)^0,f,c
  2118   001388  1E3A               	comf	(dtoa@n+6)^0,f,c
  2119   00138A  1E39               	comf	(dtoa@n+5)^0,f,c
  2120   00138C  1E38               	comf	(dtoa@n+4)^0,f,c
  2121   00138E  1E37               	comf	(dtoa@n+3)^0,f,c
  2122   001390  1E36               	comf	(dtoa@n+2)^0,f,c
  2123   001392  1E35               	comf	(dtoa@n+1)^0,f,c
  2124   001394  6C34               	negf	dtoa@n^0,c
  2125   001396  0E00               	movlw	0
  2126   001398  2235               	addwfc	(dtoa@n+1)^0,f,c
  2127   00139A  2236               	addwfc	(dtoa@n+2)^0,f,c
  2128   00139C  2237               	addwfc	(dtoa@n+3)^0,f,c
  2129   00139E  2238               	addwfc	(dtoa@n+4)^0,f,c
  2130   0013A0  2239               	addwfc	(dtoa@n+5)^0,f,c
  2131   0013A2  223A               	addwfc	(dtoa@n+6)^0,f,c
  2132   0013A4  223B               	addwfc	(dtoa@n+7)^0,f,c
  2133   0013A6                     l2405:
  2134                           
  2135                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2136   0013A6  0101               	movlb	1	; () banked
  2137   0013A8  BFF3               	btfsc	(_prec+1)& (0+255),7,b
  2138   0013AA  EFE1  F009         	goto	u1290
  2139   0013AE  51F3               	movf	(_prec+1)& (0+255),w,b
  2140   0013B0  E106               	bnz	u1291
  2141   0013B2  05F2               	decf	_prec& (0+255),w,b
  2142   0013B4  B0D8               	btfsc	status,0,c
  2143   0013B6  EFDF  F009         	goto	u1291
  2144   0013BA  EFE1  F009         	goto	u1290
  2145   0013BE                     u1291:
  2146   0013BE  EFE7  F009         	goto	l1154
  2147   0013C2                     u1290:
  2148   0013C2                     
  2149                           ; BSR set to: 1
  2150   0013C2  0E00               	movlw	0
  2151   0013C4  6E31               	movwf	(dtoa@p+1)^0,c
  2152   0013C6  0E01               	movlw	1
  2153   0013C8  6E30               	movwf	dtoa@p^0,c
  2154   0013CA  EFEB  F009         	goto	l1156
  2155   0013CE                     l1154:
  2156                           
  2157                           ; BSR set to: 1
  2158   0013CE  C1F2  F030         	movff	_prec,dtoa@p
  2159   0013D2  C1F3  F031         	movff	_prec+1,dtoa@p+1
  2160   0013D6                     l1156:
  2161                           
  2162                           ; BSR set to: 1
  2163                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2164   0013D6  C1F0  F032         	movff	_width,dtoa@w
  2165   0013DA  C1F1  F033         	movff	_width+1,dtoa@w+1
  2166   0013DE                     
  2167                           ; BSR set to: 1
  2168                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2169   0013DE  503E               	movf	dtoa@s^0,w,c
  2170   0013E0  B4D8               	btfsc	status,2,c
  2171   0013E2  EFF5  F009         	goto	u1301
  2172   0013E6  EFF7  F009         	goto	u1300
  2173   0013EA                     u1301:
  2174   0013EA  EF0E  F00A         	goto	l1157
  2175   0013EE                     u1300:
  2176   0013EE                     
  2177                           ; BSR set to: 1
  2178                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2179   0013EE  0632               	decf	dtoa@w^0,f,c
  2180   0013F0  A0D8               	btfss	status,0,c
  2181   0013F2  0633               	decf	(dtoa@w+1)^0,f,c
  2182   0013F4                     
  2183                           ; BSR set to: 1
  2184                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2185   0013F4  503E               	movf	dtoa@s^0,w,c
  2186   0013F6  A4D8               	btfss	status,2,c
  2187   0013F8  EF00  F00A         	goto	u1311
  2188   0013FC  EF02  F00A         	goto	u1310
  2189   001400                     u1311:
  2190   001400  EF08  F00A         	goto	l2417
  2191   001404                     u1310:
  2192   001404                     
  2193                           ; BSR set to: 1
  2194   001404  0E00               	movlw	0
  2195   001406  6E2F               	movwf	(_dtoa$2419+1)^0,c
  2196   001408  0E2B               	movlw	43
  2197   00140A  6E2E               	movwf	_dtoa$2419^0,c
  2198   00140C  EF0C  F00A         	goto	l2419
  2199   001410                     l2417:
  2200                           
  2201                           ; BSR set to: 1
  2202   001410  0E00               	movlw	0
  2203   001412  6E2F               	movwf	(_dtoa$2419+1)^0,c
  2204   001414  0E2D               	movlw	45
  2205   001416  6E2E               	movwf	_dtoa$2419^0,c
  2206   001418                     l2419:
  2207                           
  2208                           ; BSR set to: 1
  2209   001418  C02E  F03E         	movff	_dtoa$2419,dtoa@s
  2210   00141C                     l1157:
  2211                           
  2212                           ; BSR set to: 1
  2213                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2214   00141C  0E00               	movlw	0
  2215   00141E  6E3D               	movwf	(dtoa@i+1)^0,c
  2216   001420  0E1F               	movlw	31
  2217   001422  6E3C               	movwf	dtoa@i^0,c
  2218   001424                     
  2219                           ; BSR set to: 1
  2220                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2221   001424  0E00               	movlw	0
  2222   001426  0102               	movlb	2	; () banked
  2223   001428  6FAB               	movwf	(_dbuf+31)& (0+255),b
  2224                           
  2225                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2226   00142A  EF93  F00A         	goto	l2433
  2227   00142E                     l2423:
  2228                           
  2229                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2230   00142E  063C               	decf	dtoa@i^0,f,c
  2231   001430  A0D8               	btfss	status,0,c
  2232   001432  063D               	decf	(dtoa@i+1)^0,f,c
  2233   001434                     
  2234                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2235   001434  0E8C               	movlw	low _dbuf
  2236   001436  243C               	addwf	dtoa@i^0,w,c
  2237   001438  6ED9               	movwf	fsr2l,c
  2238   00143A  0E02               	movlw	high _dbuf
  2239   00143C  203D               	addwfc	(dtoa@i+1)^0,w,c
  2240   00143E  6EDA               	movwf	fsr2h,c
  2241   001440  C034  F001         	movff	dtoa@n,___aomod@dividend
  2242   001444  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  2243   001448  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  2244   00144C  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  2245   001450  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  2246   001454  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  2247   001458  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  2248   00145C  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  2249   001460  0E0A               	movlw	10
  2250   001462  6E09               	movwf	___aomod@divisor^0,c
  2251   001464  0E00               	movlw	0
  2252   001466  6E0A               	movwf	(___aomod@divisor+1)^0,c
  2253   001468  0E00               	movlw	0
  2254   00146A  6E0B               	movwf	(___aomod@divisor+2)^0,c
  2255   00146C  0E00               	movlw	0
  2256   00146E  6E0C               	movwf	(___aomod@divisor+3)^0,c
  2257   001470  0E00               	movlw	0
  2258   001472  6E0D               	movwf	(___aomod@divisor+4)^0,c
  2259   001474  0E00               	movlw	0
  2260   001476  6E0E               	movwf	(___aomod@divisor+5)^0,c
  2261   001478  0E00               	movlw	0
  2262   00147A  6E0F               	movwf	(___aomod@divisor+6)^0,c
  2263   00147C  0E00               	movlw	0
  2264   00147E  6E10               	movwf	(___aomod@divisor+7)^0,c
  2265   001480  ECA7  F00E         	call	___aomod	;wreg free
  2266   001484  C001  F026         	movff	?___aomod,??_dtoa
  2267   001488  C002  F027         	movff	?___aomod+1,??_dtoa+1
  2268   00148C  C003  F028         	movff	?___aomod+2,??_dtoa+2
  2269   001490  C004  F029         	movff	?___aomod+3,??_dtoa+3
  2270   001494  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  2271   001498  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  2272   00149C  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  2273   0014A0  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  2274   0014A4  C026  F013         	movff	??_dtoa,abs@a
  2275   0014A8  C027  F014         	movff	??_dtoa+1,abs@a+1
  2276   0014AC  EC06  F016         	call	_abs	;wreg free
  2277   0014B0  5013               	movf	?_abs^0,w,c
  2278   0014B2  0F30               	addlw	48
  2279   0014B4  6EDF               	movwf	indf2,c
  2280   0014B6                     
  2281                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2282   0014B6  0630               	decf	dtoa@p^0,f,c
  2283   0014B8  A0D8               	btfss	status,0,c
  2284   0014BA  0631               	decf	(dtoa@p+1)^0,f,c
  2285   0014BC                     
  2286                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2287   0014BC  0632               	decf	dtoa@w^0,f,c
  2288   0014BE  A0D8               	btfss	status,0,c
  2289   0014C0  0633               	decf	(dtoa@w+1)^0,f,c
  2290   0014C2                     
  2291                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2292   0014C2  C034  F001         	movff	dtoa@n,___aodiv@dividend
  2293   0014C6  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  2294   0014CA  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  2295   0014CE  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  2296   0014D2  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  2297   0014D6  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  2298   0014DA  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  2299   0014DE  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  2300   0014E2  0E0A               	movlw	10
  2301   0014E4  6E09               	movwf	___aodiv@divisor^0,c
  2302   0014E6  0E00               	movlw	0
  2303   0014E8  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  2304   0014EA  0E00               	movlw	0
  2305   0014EC  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  2306   0014EE  0E00               	movlw	0
  2307   0014F0  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  2308   0014F2  0E00               	movlw	0
  2309   0014F4  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  2310   0014F6  0E00               	movlw	0
  2311   0014F8  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  2312   0014FA  0E00               	movlw	0
  2313   0014FC  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  2314   0014FE  0E00               	movlw	0
  2315   001500  6E10               	movwf	(___aodiv@divisor+7)^0,c
  2316   001502  ECE3  F00D         	call	___aodiv	;wreg free
  2317   001506  C001  F034         	movff	?___aodiv,dtoa@n
  2318   00150A  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  2319   00150E  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  2320   001512  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  2321   001516  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  2322   00151A  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  2323   00151E  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  2324   001522  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  2325   001526                     l2433:
  2326                           
  2327                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2328   001526  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  2329   001528  EF9E  F00A         	goto	u1321
  2330   00152C  503D               	movf	(dtoa@i+1)^0,w,c
  2331   00152E  E108               	bnz	u1320
  2332   001530  043C               	decf	dtoa@i^0,w,c
  2333   001532  A0D8               	btfss	status,0,c
  2334   001534  EF9E  F00A         	goto	u1321
  2335   001538  EFA0  F00A         	goto	u1320
  2336   00153C                     u1321:
  2337   00153C  EFBC  F00A         	goto	l2439
  2338   001540                     u1320:
  2339   001540  5034               	movf	dtoa@n^0,w,c
  2340   001542  1035               	iorwf	(dtoa@n+1)^0,w,c
  2341   001544  1036               	iorwf	(dtoa@n+2)^0,w,c
  2342   001546  1037               	iorwf	(dtoa@n+3)^0,w,c
  2343   001548  1038               	iorwf	(dtoa@n+4)^0,w,c
  2344   00154A  1039               	iorwf	(dtoa@n+5)^0,w,c
  2345   00154C  103A               	iorwf	(dtoa@n+6)^0,w,c
  2346   00154E  103B               	iorwf	(dtoa@n+7)^0,w,c
  2347   001550  A4D8               	btfss	status,2,c
  2348   001552  EFAD  F00A         	goto	u1331
  2349   001556  EFAF  F00A         	goto	u1330
  2350   00155A                     u1331:
  2351   00155A  EF17  F00A         	goto	l2423
  2352   00155E                     u1330:
  2353   00155E  BE31               	btfsc	(dtoa@p+1)^0,7,c
  2354   001560  EFBC  F00A         	goto	u1340
  2355   001564  5031               	movf	(dtoa@p+1)^0,w,c
  2356   001566  E106               	bnz	u1341
  2357   001568  0430               	decf	dtoa@p^0,w,c
  2358   00156A  B0D8               	btfsc	status,0,c
  2359   00156C  EFBA  F00A         	goto	u1341
  2360   001570  EFBC  F00A         	goto	u1340
  2361   001574                     u1341:
  2362   001574  EF17  F00A         	goto	l2423
  2363   001578                     u1340:
  2364   001578                     l2439:
  2365                           
  2366                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2367   001578  503E               	movf	dtoa@s^0,w,c
  2368   00157A  B4D8               	btfsc	status,2,c
  2369   00157C  EFC2  F00A         	goto	u1351
  2370   001580  EFC4  F00A         	goto	u1350
  2371   001584                     u1351:
  2372   001584  EFCF  F00A         	goto	l2445
  2373   001588                     u1350:
  2374   001588                     
  2375                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2376   001588  063C               	decf	dtoa@i^0,f,c
  2377   00158A  A0D8               	btfss	status,0,c
  2378   00158C  063D               	decf	(dtoa@i+1)^0,f,c
  2379   00158E                     
  2380                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2381   00158E  0E8C               	movlw	low _dbuf
  2382   001590  243C               	addwf	dtoa@i^0,w,c
  2383   001592  6ED9               	movwf	fsr2l,c
  2384   001594  0E02               	movlw	high _dbuf
  2385   001596  203D               	addwfc	(dtoa@i+1)^0,w,c
  2386   001598  6EDA               	movwf	fsr2h,c
  2387   00159A  C03E  FFDF         	movff	dtoa@s,indf2
  2388   00159E                     l2445:
  2389                           
  2390                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2391   00159E  C01C  F011         	movff	dtoa@fp,pad@fp
  2392   0015A2  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  2393   0015A6  0E8C               	movlw	low _dbuf
  2394   0015A8  243C               	addwf	dtoa@i^0,w,c
  2395   0015AA  6E13               	movwf	pad@buf^0,c
  2396   0015AC  0E02               	movlw	high _dbuf
  2397   0015AE  203D               	addwfc	(dtoa@i+1)^0,w,c
  2398   0015B0  6E14               	movwf	(pad@buf+1)^0,c
  2399   0015B2  C032  F015         	movff	dtoa@w,pad@p
  2400   0015B6  C033  F016         	movff	dtoa@w+1,pad@p+1
  2401   0015BA  EC46  F014         	call	_pad	;wreg free
  2402   0015BE  0012               	return		;funcret
  2403   0015C0                     __end_of_dtoa:
  2404                           	callstack 0
  2405                           
  2406 ;; *************** function _pad *****************
  2407 ;; Defined at:
  2408 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  2411 ;;		 -> sprintf@f(11), 
  2412 ;;  buf             2   18[COMRAM] PTR unsigned char 
  2413 ;;		 -> dbuf(32), 
  2414 ;;  p               2   20[COMRAM] int 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;  w               2   25[COMRAM] int 
  2417 ;;  i               2   23[COMRAM] int 
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      void 
  2420 ;; Registers used:
  2421 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2422 ;; Tracked objects:
  2423 ;;		On entry : 0/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2427 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2428 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2429 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2430 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2431 ;;Total ram usage:       11 bytes
  2432 ;; Hardware stack levels used: 1
  2433 ;; Hardware stack levels required when called: 4
  2434 ;; This function calls:
  2435 ;;		_fputc
  2436 ;;		_fputs
  2437 ;; This function is called by:
  2438 ;;		_dtoa
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text5
  2443   00288C                     __ptext5:
  2444                           	callstack 0
  2445   00288C                     _pad:
  2446                           	callstack 22
  2447   00288C                     
  2448                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  2449   00288C  BE16               	btfsc	(pad@p+1)^0,7,c
  2450   00288E  EF4B  F014         	goto	u1151
  2451   002892  EF4D  F014         	goto	u1150
  2452   002896                     u1151:
  2453   002896  EF53  F014         	goto	l2329
  2454   00289A                     u1150:
  2455   00289A  C015  F01A         	movff	pad@p,pad@w
  2456   00289E  C016  F01B         	movff	pad@p+1,pad@w+1
  2457   0028A2  EF57  F014         	goto	l1145
  2458   0028A6                     l2329:
  2459   0028A6  0E00               	movlw	0
  2460   0028A8  6E1B               	movwf	(pad@w+1)^0,c
  2461   0028AA  0E00               	movlw	0
  2462   0028AC  6E1A               	movwf	pad@w^0,c
  2463   0028AE                     l1145:
  2464                           
  2465                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  2466   0028AE  0E00               	movlw	0
  2467   0028B0  6E19               	movwf	(pad@i+1)^0,c
  2468   0028B2  0E00               	movlw	0
  2469   0028B4  6E18               	movwf	pad@i^0,c
  2470                           
  2471                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2472   0028B6  EF69  F014         	goto	l2335
  2473   0028BA                     l2331:
  2474                           
  2475                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  2476   0028BA  0E00               	movlw	0
  2477   0028BC  6E02               	movwf	(fputc@c+1)^0,c
  2478   0028BE  0E20               	movlw	32
  2479   0028C0  6E01               	movwf	fputc@c^0,c
  2480   0028C2  C011  F003         	movff	pad@fp,fputc@fp
  2481   0028C6  C012  F004         	movff	pad@fp+1,fputc@fp+1
  2482   0028CA  EC08  F010         	call	_fputc	;wreg free
  2483   0028CE                     
  2484                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  2485   0028CE  4A18               	infsnz	pad@i^0,f,c
  2486   0028D0  2A19               	incf	(pad@i+1)^0,f,c
  2487   0028D2                     l2335:
  2488                           
  2489                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2490   0028D2  501A               	movf	pad@w^0,w,c
  2491   0028D4  5C18               	subwf	pad@i^0,w,c
  2492   0028D6  5019               	movf	(pad@i+1)^0,w,c
  2493   0028D8  0A80               	xorlw	128
  2494   0028DA  6E17               	movwf	??_pad^0,c
  2495   0028DC  501B               	movf	(pad@w+1)^0,w,c
  2496   0028DE  0A80               	xorlw	128
  2497   0028E0  5817               	subwfb	??_pad^0,w,c
  2498   0028E2  A0D8               	btfss	status,0,c
  2499   0028E4  EF76  F014         	goto	u1161
  2500   0028E8  EF78  F014         	goto	u1160
  2501   0028EC                     u1161:
  2502   0028EC  EF5D  F014         	goto	l2331
  2503   0028F0                     u1160:
  2504   0028F0                     
  2505                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  2506   0028F0  C013  F00A         	movff	pad@buf,fputs@s
  2507   0028F4  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2508   0028F8  C011  F00C         	movff	pad@fp,fputs@fp
  2509   0028FC  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2510   002900  ECA2  F015         	call	_fputs	;wreg free
  2511   002904  0012               	return		;funcret
  2512   002906                     __end_of_pad:
  2513                           	callstack 0
  2514                           
  2515 ;; *************** function _fputs *****************
  2516 ;; Defined at:
  2517 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2520 ;;		 -> dbuf(32), 
  2521 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  2522 ;;		 -> sprintf@f(11), 
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;  i               2   14[COMRAM] int 
  2525 ;;  c               1   13[COMRAM] unsigned char 
  2526 ;; Return value:  Size  Location     Type
  2527 ;;                  2    9[COMRAM] int 
  2528 ;; Registers used:
  2529 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2535 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2536 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2538 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2539 ;;Total ram usage:        7 bytes
  2540 ;; Hardware stack levels used: 1
  2541 ;; Hardware stack levels required when called: 3
  2542 ;; This function calls:
  2543 ;;		_fputc
  2544 ;; This function is called by:
  2545 ;;		_pad
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           	psect	text6
  2550   002B44                     __ptext6:
  2551                           	callstack 0
  2552   002B44                     _fputs:
  2553                           	callstack 22
  2554   002B44  0E00               	movlw	0
  2555   002B46  6E10               	movwf	(fputs@i+1)^0,c
  2556   002B48  0E00               	movlw	0
  2557   002B4A  6E0F               	movwf	fputs@i^0,c
  2558   002B4C  EFB3  F015         	goto	l2243
  2559   002B50                     l2239:
  2560   002B50  C00E  F001         	movff	fputs@c,fputc@c
  2561   002B54  6A02               	clrf	(fputc@c+1)^0,c
  2562   002B56  C00C  F003         	movff	fputs@fp,fputc@fp
  2563   002B5A  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  2564   002B5E  EC08  F010         	call	_fputc	;wreg free
  2565   002B62  4A0F               	infsnz	fputs@i^0,f,c
  2566   002B64  2A10               	incf	(fputs@i+1)^0,f,c
  2567   002B66                     l2243:
  2568   002B66  500F               	movf	fputs@i^0,w,c
  2569   002B68  240A               	addwf	fputs@s^0,w,c
  2570   002B6A  6ED9               	movwf	fsr2l,c
  2571   002B6C  5010               	movf	(fputs@i+1)^0,w,c
  2572   002B6E  200B               	addwfc	(fputs@s+1)^0,w,c
  2573   002B70  6EDA               	movwf	fsr2h,c
  2574   002B72  50DF               	movf	indf2,w,c
  2575   002B74  6E0E               	movwf	fputs@c^0,c
  2576   002B76  500E               	movf	fputs@c^0,w,c
  2577   002B78  A4D8               	btfss	status,2,c
  2578   002B7A  EFC1  F015         	goto	u1011
  2579   002B7E  EFC3  F015         	goto	u1010
  2580   002B82                     u1011:
  2581   002B82  EFA8  F015         	goto	l2239
  2582   002B86                     u1010:
  2583   002B86  0012               	return		;funcret
  2584   002B88                     __end_of_fputs:
  2585                           	callstack 0
  2586                           
  2587 ;; *************** function _fputc *****************
  2588 ;; Defined at:
  2589 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;  c               2    0[COMRAM] int 
  2592 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  2593 ;;		 -> sprintf@f(11), 
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;		None
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  2    0[COMRAM] int 
  2598 ;; Registers used:
  2599 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 0/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2605 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2607 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2608 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2609 ;;Total ram usage:        9 bytes
  2610 ;; Hardware stack levels used: 1
  2611 ;; Hardware stack levels required when called: 2
  2612 ;; This function calls:
  2613 ;;		_putch
  2614 ;; This function is called by:
  2615 ;;		_pad
  2616 ;;		_vfpfcnvrt
  2617 ;;		_fputs
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text7
  2622   002010                     __ptext7:
  2623                           	callstack 0
  2624   002010                     _fputc:
  2625                           	callstack 25
  2626   002010  5003               	movf	fputc@fp^0,w,c
  2627   002012  1004               	iorwf	(fputc@fp+1)^0,w,c
  2628   002014  B4D8               	btfsc	status,2,c
  2629   002016  EF0F  F010         	goto	u971
  2630   00201A  EF11  F010         	goto	u970
  2631   00201E                     u971:
  2632   00201E  EF1A  F010         	goto	l2227
  2633   002022                     u970:
  2634   002022  5003               	movf	fputc@fp^0,w,c
  2635   002024  1004               	iorwf	(fputc@fp+1)^0,w,c
  2636   002026  A4D8               	btfss	status,2,c
  2637   002028  EF18  F010         	goto	u981
  2638   00202C  EF1A  F010         	goto	u980
  2639   002030                     u981:
  2640   002030  EF1F  F010         	goto	l2229
  2641   002034                     u980:
  2642   002034                     l2227:
  2643   002034  5001               	movf	fputc@c^0,w,c
  2644   002036  ECEA  F016         	call	_putch
  2645   00203A  EF6C  F010         	goto	l1200
  2646   00203E                     l2229:
  2647   00203E  EE20 F009          	lfsr	2,9
  2648   002042  5003               	movf	fputc@fp^0,w,c
  2649   002044  26D9               	addwf	fsr2l,f,c
  2650   002046  5004               	movf	(fputc@fp+1)^0,w,c
  2651   002048  22DA               	addwfc	fsr2h,f,c
  2652   00204A  50DE               	movf	postinc2,w,c
  2653   00204C  10DE               	iorwf	postinc2,w,c
  2654   00204E  B4D8               	btfsc	status,2,c
  2655   002050  EF2C  F010         	goto	u991
  2656   002054  EF2E  F010         	goto	u990
  2657   002058                     u991:
  2658   002058  EF49  F010         	goto	l2233
  2659   00205C                     u990:
  2660   00205C  EE20 F009          	lfsr	2,9
  2661   002060  5003               	movf	fputc@fp^0,w,c
  2662   002062  26D9               	addwf	fsr2l,f,c
  2663   002064  5004               	movf	(fputc@fp+1)^0,w,c
  2664   002066  22DA               	addwfc	fsr2h,f,c
  2665   002068  EE10 F003          	lfsr	1,3
  2666   00206C  5003               	movf	fputc@fp^0,w,c
  2667   00206E  26E1               	addwf	fsr1l,f,c
  2668   002070  5004               	movf	(fputc@fp+1)^0,w,c
  2669   002072  22E2               	addwfc	fsr1h,f,c
  2670   002074  50DE               	movf	postinc2,w,c
  2671   002076  5CE6               	subwf	postinc1,w,c
  2672   002078  50E6               	movf	postinc1,w,c
  2673   00207A  0A80               	xorlw	128
  2674   00207C  6E09               	movwf	(??_fputc+4)^0,c
  2675   00207E  50DE               	movf	postinc2,w,c
  2676   002080  0A80               	xorlw	128
  2677   002082  5809               	subwfb	(??_fputc+4)^0,w,c
  2678   002084  B0D8               	btfsc	status,0,c
  2679   002086  EF47  F010         	goto	u1001
  2680   00208A  EF49  F010         	goto	u1000
  2681   00208E                     u1001:
  2682   00208E  EF6C  F010         	goto	l1200
  2683   002092                     u1000:
  2684   002092                     l2233:
  2685   002092  EE20 F003          	lfsr	2,3
  2686   002096  5003               	movf	fputc@fp^0,w,c
  2687   002098  26D9               	addwf	fsr2l,f,c
  2688   00209A  5004               	movf	(fputc@fp+1)^0,w,c
  2689   00209C  22DA               	addwfc	fsr2h,f,c
  2690   00209E  CFDE F005          	movff	postinc2,??_fputc
  2691   0020A2  CFDD F006          	movff	postdec2,??_fputc+1
  2692   0020A6  C003  FFD9         	movff	fputc@fp,fsr2l
  2693   0020AA  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2694   0020AE  CFDE F007          	movff	postinc2,??_fputc+2
  2695   0020B2  CFDD F008          	movff	postdec2,??_fputc+3
  2696   0020B6  5005               	movf	??_fputc^0,w,c
  2697   0020B8  2407               	addwf	(??_fputc+2)^0,w,c
  2698   0020BA  6ED9               	movwf	fsr2l,c
  2699   0020BC  5006               	movf	(??_fputc+1)^0,w,c
  2700   0020BE  2008               	addwfc	(??_fputc+3)^0,w,c
  2701   0020C0  6EDA               	movwf	fsr2h,c
  2702   0020C2  C001  FFDF         	movff	fputc@c,indf2
  2703   0020C6  EE20 F003          	lfsr	2,3
  2704   0020CA  5003               	movf	fputc@fp^0,w,c
  2705   0020CC  26D9               	addwf	fsr2l,f,c
  2706   0020CE  5004               	movf	(fputc@fp+1)^0,w,c
  2707   0020D0  22DA               	addwfc	fsr2h,f,c
  2708   0020D2  2ADE               	incf	postinc2,f,c
  2709   0020D4  0E00               	movlw	0
  2710   0020D6  22DD               	addwfc	postdec2,f,c
  2711   0020D8                     l1200:
  2712   0020D8  0012               	return		;funcret
  2713   0020DA                     __end_of_fputc:
  2714                           	callstack 0
  2715                           
  2716 ;; *************** function _putch *****************
  2717 ;; Defined at:
  2718 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  c               1    wreg     unsigned char 
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;  c               1    0[COMRAM] unsigned char 
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  1    wreg      void 
  2725 ;; Registers used:
  2726 ;;		wreg
  2727 ;; Tracked objects:
  2728 ;;		On entry : 0/0
  2729 ;;		On exit  : 0/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2736 ;;Total ram usage:        0 bytes
  2737 ;; Hardware stack levels used: 1
  2738 ;; Hardware stack levels required when called: 1
  2739 ;; This function calls:
  2740 ;;		Nothing
  2741 ;; This function is called by:
  2742 ;;		_fputc
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text8
  2747   002DD4                     __ptext8:
  2748                           	callstack 0
  2749   002DD4                     _putch:
  2750                           	callstack 25
  2751   002DD4  0012               	return		;funcret
  2752   002DD6                     __end_of_putch:
  2753                           	callstack 0
  2754                           
  2755 ;; *************** function _abs *****************
  2756 ;; Defined at:
  2757 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  a               2   18[COMRAM] int 
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;		None
  2762 ;; Return value:  Size  Location     Type
  2763 ;;                  2   18[COMRAM] int 
  2764 ;; Registers used:
  2765 ;;		wreg, status,2, status,0
  2766 ;; Tracked objects:
  2767 ;;		On entry : 0/0
  2768 ;;		On exit  : 0/0
  2769 ;;		Unchanged: 0/0
  2770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2771 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2773 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2774 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2775 ;;Total ram usage:        4 bytes
  2776 ;; Hardware stack levels used: 1
  2777 ;; Hardware stack levels required when called: 1
  2778 ;; This function calls:
  2779 ;;		Nothing
  2780 ;; This function is called by:
  2781 ;;		_dtoa
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           	psect	text9
  2786   002C0C                     __ptext9:
  2787                           	callstack 0
  2788   002C0C                     _abs:
  2789                           	callstack 25
  2790   002C0C  BE14               	btfsc	(abs@a+1)^0,7,c
  2791   002C0E  EF13  F016         	goto	u1170
  2792   002C12  5014               	movf	(abs@a+1)^0,w,c
  2793   002C14  E106               	bnz	u1171
  2794   002C16  0413               	decf	abs@a^0,w,c
  2795   002C18  B0D8               	btfsc	status,0,c
  2796   002C1A  EF11  F016         	goto	u1171
  2797   002C1E  EF13  F016         	goto	u1170
  2798   002C22                     u1171:
  2799   002C22  EF21  F016         	goto	l1185
  2800   002C26                     u1170:
  2801   002C26  C013  F015         	movff	abs@a,??_abs
  2802   002C2A  C014  F016         	movff	abs@a+1,??_abs+1
  2803   002C2E  1E15               	comf	??_abs^0,f,c
  2804   002C30  1E16               	comf	(??_abs+1)^0,f,c
  2805   002C32  4A15               	infsnz	??_abs^0,f,c
  2806   002C34  2A16               	incf	(??_abs+1)^0,f,c
  2807   002C36  C015  F013         	movff	??_abs,?_abs
  2808   002C3A  C016  F014         	movff	??_abs+1,?_abs+1
  2809   002C3E  EF25  F016         	goto	l1188
  2810   002C42                     l1185:
  2811   002C42  C013  F013         	movff	abs@a,?_abs
  2812   002C46  C014  F014         	movff	abs@a+1,?_abs+1
  2813   002C4A                     l1188:
  2814   002C4A  0012               	return		;funcret
  2815   002C4C                     __end_of_abs:
  2816                           	callstack 0
  2817                           
  2818 ;; *************** function ___aomod *****************
  2819 ;; Defined at:
  2820 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;  dividend        8    0[COMRAM] long long 
  2823 ;;  divisor         8    8[COMRAM] long long 
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;  sign            1   17[COMRAM] unsigned char 
  2826 ;;  counter         1   16[COMRAM] unsigned char 
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  8    0[COMRAM] long long 
  2829 ;; Registers used:
  2830 ;;		wreg, status,2, status,0
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2836 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2839 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2840 ;;Total ram usage:       18 bytes
  2841 ;; Hardware stack levels used: 1
  2842 ;; Hardware stack levels required when called: 1
  2843 ;; This function calls:
  2844 ;;		Nothing
  2845 ;; This function is called by:
  2846 ;;		_dtoa
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850                           	psect	text10
  2851   001D4E                     __ptext10:
  2852                           	callstack 0
  2853   001D4E                     ___aomod:
  2854                           	callstack 25
  2855   001D4E  0E00               	movlw	0
  2856   001D50  6E12               	movwf	___aomod@sign^0,c
  2857   001D52  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2858   001D54  EFB0  F00E         	goto	u1090
  2859   001D58  EFAE  F00E         	goto	u1091
  2860   001D5C                     u1091:
  2861   001D5C  EFC2  F00E         	goto	l2297
  2862   001D60                     u1090:
  2863   001D60  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2864   001D62  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2865   001D64  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2866   001D66  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2867   001D68  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2868   001D6A  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2869   001D6C  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2870   001D6E  6C01               	negf	___aomod@dividend^0,c
  2871   001D70  0E00               	movlw	0
  2872   001D72  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2873   001D74  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2874   001D76  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2875   001D78  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2876   001D7A  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2877   001D7C  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2878   001D7E  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2879   001D80  0E01               	movlw	1
  2880   001D82  6E12               	movwf	___aomod@sign^0,c
  2881   001D84                     l2297:
  2882   001D84  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2883   001D86  EFC9  F00E         	goto	u1100
  2884   001D8A  EFC7  F00E         	goto	u1101
  2885   001D8E                     u1101:
  2886   001D8E  EFD9  F00E         	goto	l2301
  2887   001D92                     u1100:
  2888   001D92  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2889   001D94  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2890   001D96  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2891   001D98  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2892   001D9A  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2893   001D9C  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2894   001D9E  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2895   001DA0  6C09               	negf	___aomod@divisor^0,c
  2896   001DA2  0E00               	movlw	0
  2897   001DA4  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2898   001DA6  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2899   001DA8  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2900   001DAA  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2901   001DAC  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2902   001DAE  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2903   001DB0  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2904   001DB2                     l2301:
  2905   001DB2  5009               	movf	___aomod@divisor^0,w,c
  2906   001DB4  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2907   001DB6  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2908   001DB8  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2909   001DBA  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2910   001DBC  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2911   001DBE  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2912   001DC0  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2913   001DC2  B4D8               	btfsc	status,2,c
  2914   001DC4  EFE6  F00E         	goto	u1111
  2915   001DC8  EFE8  F00E         	goto	u1110
  2916   001DCC                     u1111:
  2917   001DCC  EF30  F00F         	goto	l2317
  2918   001DD0                     u1110:
  2919   001DD0  0E01               	movlw	1
  2920   001DD2  6E11               	movwf	___aomod@counter^0,c
  2921   001DD4  EFF6  F00E         	goto	l2307
  2922   001DD8                     l2305:
  2923   001DD8  90D8               	bcf	status,0,c
  2924   001DDA  3609               	rlcf	___aomod@divisor^0,f,c
  2925   001DDC  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2926   001DDE  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2927   001DE0  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2928   001DE2  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2929   001DE4  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2930   001DE6  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2931   001DE8  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2932   001DEA  2A11               	incf	___aomod@counter^0,f,c
  2933   001DEC                     l2307:
  2934   001DEC  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2935   001DEE  EFFB  F00E         	goto	u1121
  2936   001DF2  EFFD  F00E         	goto	u1120
  2937   001DF6                     u1121:
  2938   001DF6  EFEC  F00E         	goto	l2305
  2939   001DFA                     u1120:
  2940   001DFA                     l2309:
  2941   001DFA  5009               	movf	___aomod@divisor^0,w,c
  2942   001DFC  5C01               	subwf	___aomod@dividend^0,w,c
  2943   001DFE  500A               	movf	(___aomod@divisor+1)^0,w,c
  2944   001E00  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2945   001E02  500B               	movf	(___aomod@divisor+2)^0,w,c
  2946   001E04  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2947   001E06  500C               	movf	(___aomod@divisor+3)^0,w,c
  2948   001E08  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2949   001E0A  500D               	movf	(___aomod@divisor+4)^0,w,c
  2950   001E0C  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2951   001E0E  500E               	movf	(___aomod@divisor+5)^0,w,c
  2952   001E10  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2953   001E12  500F               	movf	(___aomod@divisor+6)^0,w,c
  2954   001E14  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2955   001E16  5010               	movf	(___aomod@divisor+7)^0,w,c
  2956   001E18  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2957   001E1A  A0D8               	btfss	status,0,c
  2958   001E1C  EF12  F00F         	goto	u1131
  2959   001E20  EF14  F00F         	goto	u1130
  2960   001E24                     u1131:
  2961   001E24  EF24  F00F         	goto	l2313
  2962   001E28                     u1130:
  2963   001E28  5009               	movf	___aomod@divisor^0,w,c
  2964   001E2A  5E01               	subwf	___aomod@dividend^0,f,c
  2965   001E2C  500A               	movf	(___aomod@divisor+1)^0,w,c
  2966   001E2E  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2967   001E30  500B               	movf	(___aomod@divisor+2)^0,w,c
  2968   001E32  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2969   001E34  500C               	movf	(___aomod@divisor+3)^0,w,c
  2970   001E36  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2971   001E38  500D               	movf	(___aomod@divisor+4)^0,w,c
  2972   001E3A  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2973   001E3C  500E               	movf	(___aomod@divisor+5)^0,w,c
  2974   001E3E  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2975   001E40  500F               	movf	(___aomod@divisor+6)^0,w,c
  2976   001E42  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2977   001E44  5010               	movf	(___aomod@divisor+7)^0,w,c
  2978   001E46  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2979   001E48                     l2313:
  2980   001E48  90D8               	bcf	status,0,c
  2981   001E4A  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2982   001E4C  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2983   001E4E  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2984   001E50  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2985   001E52  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2986   001E54  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2987   001E56  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2988   001E58  3209               	rrcf	___aomod@divisor^0,f,c
  2989   001E5A  2E11               	decfsz	___aomod@counter^0,f,c
  2990   001E5C  EFFD  F00E         	goto	l2309
  2991   001E60                     l2317:
  2992   001E60  5012               	movf	___aomod@sign^0,w,c
  2993   001E62  B4D8               	btfsc	status,2,c
  2994   001E64  EF36  F00F         	goto	u1141
  2995   001E68  EF38  F00F         	goto	u1140
  2996   001E6C                     u1141:
  2997   001E6C  EF48  F00F         	goto	l2321
  2998   001E70                     u1140:
  2999   001E70  1E08               	comf	(___aomod@dividend+7)^0,f,c
  3000   001E72  1E07               	comf	(___aomod@dividend+6)^0,f,c
  3001   001E74  1E06               	comf	(___aomod@dividend+5)^0,f,c
  3002   001E76  1E05               	comf	(___aomod@dividend+4)^0,f,c
  3003   001E78  1E04               	comf	(___aomod@dividend+3)^0,f,c
  3004   001E7A  1E03               	comf	(___aomod@dividend+2)^0,f,c
  3005   001E7C  1E02               	comf	(___aomod@dividend+1)^0,f,c
  3006   001E7E  6C01               	negf	___aomod@dividend^0,c
  3007   001E80  0E00               	movlw	0
  3008   001E82  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  3009   001E84  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  3010   001E86  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  3011   001E88  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  3012   001E8A  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  3013   001E8C  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  3014   001E8E  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  3015   001E90                     l2321:
  3016   001E90  C001  F001         	movff	___aomod@dividend,?___aomod
  3017   001E94  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  3018   001E98  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  3019   001E9C  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  3020   001EA0  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  3021   001EA4  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  3022   001EA8  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  3023   001EAC  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  3024   001EB0  0012               	return		;funcret
  3025   001EB2                     __end_of___aomod:
  3026                           	callstack 0
  3027                           
  3028 ;; *************** function ___aodiv *****************
  3029 ;; Defined at:
  3030 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;  dividend        8    0[COMRAM] long long 
  3033 ;;  divisor         8    8[COMRAM] long long 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  quotient        8   18[COMRAM] long long 
  3036 ;;  sign            1   17[COMRAM] unsigned char 
  3037 ;;  counter         1   16[COMRAM] unsigned char 
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  8    0[COMRAM] long long 
  3040 ;; Registers used:
  3041 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3047 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3048 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3050 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3051 ;;Total ram usage:       26 bytes
  3052 ;; Hardware stack levels used: 1
  3053 ;; Hardware stack levels required when called: 1
  3054 ;; This function calls:
  3055 ;;		Nothing
  3056 ;; This function is called by:
  3057 ;;		_dtoa
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text11
  3062   001BC6                     __ptext11:
  3063                           	callstack 0
  3064   001BC6                     ___aodiv:
  3065                           	callstack 25
  3066   001BC6  0E00               	movlw	0
  3067   001BC8  6E12               	movwf	___aodiv@sign^0,c
  3068   001BCA  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  3069   001BCC  EFEC  F00D         	goto	u1020
  3070   001BD0  EFEA  F00D         	goto	u1021
  3071   001BD4                     u1021:
  3072   001BD4  EFFE  F00D         	goto	l2253
  3073   001BD8                     u1020:
  3074   001BD8  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  3075   001BDA  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  3076   001BDC  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  3077   001BDE  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  3078   001BE0  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  3079   001BE2  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  3080   001BE4  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  3081   001BE6  6C09               	negf	___aodiv@divisor^0,c
  3082   001BE8  0E00               	movlw	0
  3083   001BEA  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  3084   001BEC  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  3085   001BEE  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  3086   001BF0  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  3087   001BF2  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  3088   001BF4  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  3089   001BF6  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  3090   001BF8  0E01               	movlw	1
  3091   001BFA  6E12               	movwf	___aodiv@sign^0,c
  3092   001BFC                     l2253:
  3093   001BFC  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  3094   001BFE  EF05  F00E         	goto	u1030
  3095   001C02  EF03  F00E         	goto	u1031
  3096   001C06                     u1031:
  3097   001C06  EF17  F00E         	goto	l2259
  3098   001C0A                     u1030:
  3099   001C0A  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  3100   001C0C  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  3101   001C0E  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  3102   001C10  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  3103   001C12  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  3104   001C14  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  3105   001C16  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  3106   001C18  6C01               	negf	___aodiv@dividend^0,c
  3107   001C1A  0E00               	movlw	0
  3108   001C1C  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  3109   001C1E  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  3110   001C20  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  3111   001C22  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  3112   001C24  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  3113   001C26  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  3114   001C28  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  3115   001C2A  0E01               	movlw	1
  3116   001C2C  1A12               	xorwf	___aodiv@sign^0,f,c
  3117   001C2E                     l2259:
  3118   001C2E  EE20  F013         	lfsr	2,___aodiv@quotient
  3119   001C32  0E07               	movlw	7
  3120   001C34                     u1041:
  3121   001C34  6ADE               	clrf	postinc2,c
  3122   001C36  06E8               	decf	wreg,f,c
  3123   001C38  E2FD               	bc	u1041
  3124   001C3A  5009               	movf	___aodiv@divisor^0,w,c
  3125   001C3C  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  3126   001C3E  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  3127   001C40  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  3128   001C42  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  3129   001C44  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  3130   001C46  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  3131   001C48  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  3132   001C4A  B4D8               	btfsc	status,2,c
  3133   001C4C  EF2A  F00E         	goto	u1051
  3134   001C50  EF2C  F00E         	goto	u1050
  3135   001C54                     u1051:
  3136   001C54  EF7E  F00E         	goto	l2281
  3137   001C58                     u1050:
  3138   001C58  0E01               	movlw	1
  3139   001C5A  6E11               	movwf	___aodiv@counter^0,c
  3140   001C5C  EF3A  F00E         	goto	l2267
  3141   001C60                     l2265:
  3142   001C60  90D8               	bcf	status,0,c
  3143   001C62  3609               	rlcf	___aodiv@divisor^0,f,c
  3144   001C64  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  3145   001C66  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  3146   001C68  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  3147   001C6A  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  3148   001C6C  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  3149   001C6E  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  3150   001C70  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  3151   001C72  2A11               	incf	___aodiv@counter^0,f,c
  3152   001C74                     l2267:
  3153   001C74  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  3154   001C76  EF3F  F00E         	goto	u1061
  3155   001C7A  EF41  F00E         	goto	u1060
  3156   001C7E                     u1061:
  3157   001C7E  EF30  F00E         	goto	l2265
  3158   001C82                     u1060:
  3159   001C82                     l2269:
  3160   001C82  90D8               	bcf	status,0,c
  3161   001C84  3613               	rlcf	___aodiv@quotient^0,f,c
  3162   001C86  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  3163   001C88  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  3164   001C8A  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  3165   001C8C  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  3166   001C8E  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  3167   001C90  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  3168   001C92  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  3169   001C94  5009               	movf	___aodiv@divisor^0,w,c
  3170   001C96  5C01               	subwf	___aodiv@dividend^0,w,c
  3171   001C98  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3172   001C9A  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  3173   001C9C  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3174   001C9E  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  3175   001CA0  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3176   001CA2  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  3177   001CA4  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3178   001CA6  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  3179   001CA8  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3180   001CAA  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  3181   001CAC  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3182   001CAE  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  3183   001CB0  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3184   001CB2  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  3185   001CB4  A0D8               	btfss	status,0,c
  3186   001CB6  EF5F  F00E         	goto	u1071
  3187   001CBA  EF61  F00E         	goto	u1070
  3188   001CBE                     u1071:
  3189   001CBE  EF72  F00E         	goto	l2277
  3190   001CC2                     u1070:
  3191   001CC2  5009               	movf	___aodiv@divisor^0,w,c
  3192   001CC4  5E01               	subwf	___aodiv@dividend^0,f,c
  3193   001CC6  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3194   001CC8  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  3195   001CCA  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3196   001CCC  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  3197   001CCE  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3198   001CD0  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  3199   001CD2  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3200   001CD4  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  3201   001CD6  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3202   001CD8  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  3203   001CDA  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3204   001CDC  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  3205   001CDE  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3206   001CE0  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  3207   001CE2  8013               	bsf	___aodiv@quotient^0,0,c
  3208   001CE4                     l2277:
  3209   001CE4  90D8               	bcf	status,0,c
  3210   001CE6  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  3211   001CE8  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  3212   001CEA  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  3213   001CEC  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  3214   001CEE  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  3215   001CF0  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  3216   001CF2  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  3217   001CF4  3209               	rrcf	___aodiv@divisor^0,f,c
  3218   001CF6  2E11               	decfsz	___aodiv@counter^0,f,c
  3219   001CF8  EF41  F00E         	goto	l2269
  3220   001CFC                     l2281:
  3221   001CFC  5012               	movf	___aodiv@sign^0,w,c
  3222   001CFE  B4D8               	btfsc	status,2,c
  3223   001D00  EF84  F00E         	goto	u1081
  3224   001D04  EF86  F00E         	goto	u1080
  3225   001D08                     u1081:
  3226   001D08  EF96  F00E         	goto	l2285
  3227   001D0C                     u1080:
  3228   001D0C  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  3229   001D0E  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  3230   001D10  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  3231   001D12  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  3232   001D14  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  3233   001D16  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  3234   001D18  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  3235   001D1A  6C13               	negf	___aodiv@quotient^0,c
  3236   001D1C  0E00               	movlw	0
  3237   001D1E  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  3238   001D20  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  3239   001D22  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  3240   001D24  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  3241   001D26  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  3242   001D28  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  3243   001D2A  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  3244   001D2C                     l2285:
  3245   001D2C  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3246   001D30  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3247   001D34  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3248   001D38  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3249   001D3C  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3250   001D40  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3251   001D44  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3252   001D48  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3253   001D4C  0012               	return		;funcret
  3254   001D4E                     __end_of___aodiv:
  3255                           	callstack 0
  3256                           
  3257 ;; *************** function _sendStringSerial4 *****************
  3258 ;; Defined at:
  3259 ;;		line 37 in file "../serial.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;  string          2    1[COMRAM] PTR unsigned char 
  3262 ;;		 -> main@readout3(100), main@readout2(100), 
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;		None
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      void 
  3267 ;; Registers used:
  3268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3274 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3277 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3278 ;;Total ram usage:        2 bytes
  3279 ;; Hardware stack levels used: 1
  3280 ;; Hardware stack levels required when called: 2
  3281 ;; This function calls:
  3282 ;;		_sendCharSerial4
  3283 ;; This function is called by:
  3284 ;;		_main
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           	psect	text12
  3289   002C4C                     __ptext12:
  3290                           	callstack 0
  3291   002C4C                     _sendStringSerial4:
  3292                           	callstack 28
  3293   002C4C                     
  3294                           ;../serial.c: 40:     while (*string != 0)
  3295   002C4C  EF31  F016         	goto	l2935
  3296   002C50                     l2931:
  3297                           
  3298                           ;../serial.c: 41:     {;../serial.c: 42:         sendCharSerial4(*string++);
  3299   002C50  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3300   002C54  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3301   002C58  50DF               	movf	indf2,w,c
  3302   002C5A  ECBE  F016         	call	_sendCharSerial4
  3303   002C5E  4A02               	infsnz	sendStringSerial4@string^0,f,c
  3304   002C60  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  3305   002C62                     l2935:
  3306                           
  3307                           ;../serial.c: 40:     while (*string != 0)
  3308   002C62  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3309   002C66  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3310   002C6A  50DF               	movf	indf2,w,c
  3311   002C6C  A4D8               	btfss	status,2,c
  3312   002C6E  EF3B  F016         	goto	u1741
  3313   002C72  EF3D  F016         	goto	u1740
  3314   002C76                     u1741:
  3315   002C76  EF28  F016         	goto	l2931
  3316   002C7A                     u1740:
  3317   002C7A  0012               	return		;funcret
  3318   002C7C                     __end_of_sendStringSerial4:
  3319                           	callstack 0
  3320                           
  3321 ;; *************** function _sendCharSerial4 *****************
  3322 ;; Defined at:
  3323 ;;		line 30 in file "../serial.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;  charToSend      1    wreg     unsigned char 
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;  charToSend      1    0[COMRAM] unsigned char 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      void 
  3330 ;; Registers used:
  3331 ;;		wreg
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3338 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3340 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3341 ;;Total ram usage:        1 bytes
  3342 ;; Hardware stack levels used: 1
  3343 ;; Hardware stack levels required when called: 1
  3344 ;; This function calls:
  3345 ;;		Nothing
  3346 ;; This function is called by:
  3347 ;;		_sendStringSerial4
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           	psect	text13
  3352   002D7C                     __ptext13:
  3353                           	callstack 0
  3354   002D7C                     _sendCharSerial4:
  3355                           	callstack 28
  3356                           
  3357                           ;incstack = 0
  3358                           ;sendCharSerial4@charToSend stored from wreg
  3359   002D7C  6E01               	movwf	sendCharSerial4@charToSend^0,c
  3360   002D7E                     l433:
  3361   002D7E  010E               	movlb	14	; () banked
  3362   002D80  A537               	btfss	55,2,b	;volatile
  3363   002D82  EFC5  F016         	goto	u1531
  3364   002D86  EFC7  F016         	goto	u1530
  3365   002D8A                     u1531:
  3366   002D8A  EFBF  F016         	goto	l433
  3367   002D8E                     u1530:
  3368   002D8E                     
  3369                           ; BSR set to: 14
  3370                           ;../serial.c: 32:     TX4REG = charToSend;
  3371   002D8E  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3372   002D92                     
  3373                           ; BSR set to: 14
  3374   002D92  0012               	return		;funcret
  3375   002D94                     __end_of_sendCharSerial4:
  3376                           	callstack 0
  3377                           
  3378 ;; *************** function _motor_action *****************
  3379 ;; Defined at:
  3380 ;;		line 196 in file "../dc_motor.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;  color           2   33[COMRAM] unsigned int 
  3383 ;;  l               2   35[COMRAM] PTR struct DC_motor
  3384 ;;		 -> main@motorL(9), 
  3385 ;;  r               2   37[COMRAM] PTR struct DC_motor
  3386 ;;		 -> main@motorR(9), 
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;		None
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  1    wreg      void 
  3391 ;; Registers used:
  3392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3398 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3400 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3401 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3402 ;;Total ram usage:        8 bytes
  3403 ;; Hardware stack levels used: 1
  3404 ;; Hardware stack levels required when called: 4
  3405 ;; This function calls:
  3406 ;;		_left_135
  3407 ;;		_left_90
  3408 ;;		_reverse_fromcard
  3409 ;;		_reverse_onesquare
  3410 ;;		_right_135
  3411 ;;		_right_90
  3412 ;;		_spin_180
  3413 ;;		_stop
  3414 ;; This function is called by:
  3415 ;;		_main
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text14
  3420   0015C0                     __ptext14:
  3421                           	callstack 0
  3422   0015C0                     _motor_action:
  3423                           	callstack 26
  3424   0015C0                     
  3425                           ;../dc_motor.c: 196: void motor_action(unsigned int color, struct DC_motor *l, struct DC
      +                          _motor *r);../dc_motor.c: 197: {;../dc_motor.c: 198:     switch (color){
  3426   0015C0  EFDC  F00B         	goto	l2993
  3427   0015C4                     l2959:
  3428                           
  3429                           ;../dc_motor.c: 200:             reverse_fromcard(l,r);
  3430   0015C4  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3431   0015C8  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3432   0015CC  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3433   0015D0  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3434   0015D4  EC18  F013         	call	_reverse_fromcard	;wreg free
  3435                           
  3436                           ;../dc_motor.c: 201:             stop(l,r);
  3437   0015D8  C024  F01A         	movff	motor_action@l,stop@mL
  3438   0015DC  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3439   0015E0  C026  F01C         	movff	motor_action@r,stop@mR
  3440   0015E4  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3441   0015E8  ECBA  F013         	call	_stop	;wreg free
  3442   0015EC                     
  3443                           ;../dc_motor.c: 202:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3444   0015EC  0E29               	movlw	41
  3445   0015EE  6E29               	movwf	(??_motor_action+1)^0,c
  3446   0015F0  0E96               	movlw	150
  3447   0015F2  6E28               	movwf	??_motor_action^0,c
  3448   0015F4  0E7F               	movlw	127
  3449   0015F6                     u1967:
  3450   0015F6  2EE8               	decfsz	wreg,f,c
  3451   0015F8  D7FE               	bra	u1967
  3452   0015FA  2E28               	decfsz	??_motor_action^0,f,c
  3453   0015FC  D7FC               	bra	u1967
  3454   0015FE  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3455   001600  D7FA               	bra	u1967
  3456   001602  F000               	nop	
  3457   001604                     
  3458                           ;../dc_motor.c: 203:             stop(l,r);
  3459   001604  C024  F01A         	movff	motor_action@l,stop@mL
  3460   001608  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3461   00160C  C026  F01C         	movff	motor_action@r,stop@mR
  3462   001610  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3463   001614  ECBA  F013         	call	_stop	;wreg free
  3464   001618                     
  3465                           ;../dc_motor.c: 204:             right_90(l,r);
  3466   001618  C024  F01A         	movff	motor_action@l,right_90@mL
  3467   00161C  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3468   001620  C026  F01C         	movff	motor_action@r,right_90@mR
  3469   001624  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3470   001628  EC81  F011         	call	_right_90	;wreg free
  3471                           
  3472                           ;../dc_motor.c: 205:             break;
  3473   00162C  EF06  F00C         	goto	l326
  3474   001630                     l2967:
  3475                           
  3476                           ;../dc_motor.c: 207:             reverse_fromcard(l,r);
  3477   001630  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3478   001634  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3479   001638  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3480   00163C  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3481   001640  EC18  F013         	call	_reverse_fromcard	;wreg free
  3482                           
  3483                           ;../dc_motor.c: 208:             stop(l,r);
  3484   001644  C024  F01A         	movff	motor_action@l,stop@mL
  3485   001648  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3486   00164C  C026  F01C         	movff	motor_action@r,stop@mR
  3487   001650  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3488   001654  ECBA  F013         	call	_stop	;wreg free
  3489   001658                     
  3490                           ;../dc_motor.c: 209:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3491   001658  0E29               	movlw	41
  3492   00165A  6E29               	movwf	(??_motor_action+1)^0,c
  3493   00165C  0E96               	movlw	150
  3494   00165E  6E28               	movwf	??_motor_action^0,c
  3495   001660  0E7F               	movlw	127
  3496   001662                     u1977:
  3497   001662  2EE8               	decfsz	wreg,f,c
  3498   001664  D7FE               	bra	u1977
  3499   001666  2E28               	decfsz	??_motor_action^0,f,c
  3500   001668  D7FC               	bra	u1977
  3501   00166A  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3502   00166C  D7FA               	bra	u1977
  3503   00166E  F000               	nop	
  3504   001670                     
  3505                           ;../dc_motor.c: 210:             stop(l,r);
  3506   001670  C024  F01A         	movff	motor_action@l,stop@mL
  3507   001674  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3508   001678  C026  F01C         	movff	motor_action@r,stop@mR
  3509   00167C  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3510   001680  ECBA  F013         	call	_stop	;wreg free
  3511   001684                     
  3512                           ;../dc_motor.c: 211:             left_90(l,r);
  3513   001684  C024  F01A         	movff	motor_action@l,left_90@mL
  3514   001688  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3515   00168C  C026  F01C         	movff	motor_action@r,left_90@mR
  3516   001690  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3517   001694  ECD3  F011         	call	_left_90	;wreg free
  3518                           
  3519                           ;../dc_motor.c: 212:             break;
  3520   001698  EF06  F00C         	goto	l326
  3521   00169C                     l2975:
  3522                           
  3523                           ;../dc_motor.c: 214:             reverse_fromcard(l,r);
  3524   00169C  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3525   0016A0  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3526   0016A4  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3527   0016A8  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3528   0016AC  EC18  F013         	call	_reverse_fromcard	;wreg free
  3529                           
  3530                           ;../dc_motor.c: 215:             stop(l,r);
  3531   0016B0  C024  F01A         	movff	motor_action@l,stop@mL
  3532   0016B4  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3533   0016B8  C026  F01C         	movff	motor_action@r,stop@mR
  3534   0016BC  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3535   0016C0  ECBA  F013         	call	_stop	;wreg free
  3536   0016C4                     
  3537                           ;../dc_motor.c: 216:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3538   0016C4  0E29               	movlw	41
  3539   0016C6  6E29               	movwf	(??_motor_action+1)^0,c
  3540   0016C8  0E96               	movlw	150
  3541   0016CA  6E28               	movwf	??_motor_action^0,c
  3542   0016CC  0E7F               	movlw	127
  3543   0016CE                     u1987:
  3544   0016CE  2EE8               	decfsz	wreg,f,c
  3545   0016D0  D7FE               	bra	u1987
  3546   0016D2  2E28               	decfsz	??_motor_action^0,f,c
  3547   0016D4  D7FC               	bra	u1987
  3548   0016D6  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3549   0016D8  D7FA               	bra	u1987
  3550   0016DA  F000               	nop	
  3551   0016DC                     
  3552                           ;../dc_motor.c: 217:             spin_180(l,r);
  3553   0016DC  C024  F01A         	movff	motor_action@l,spin_180@mL
  3554   0016E0  C025  F01B         	movff	motor_action@l+1,spin_180@mL+1
  3555   0016E4  C026  F01C         	movff	motor_action@r,spin_180@mR
  3556   0016E8  C027  F01D         	movff	motor_action@r+1,spin_180@mR+1
  3557   0016EC  EC25  F012         	call	_spin_180	;wreg free
  3558   0016F0                     
  3559                           ;../dc_motor.c: 218:             stop(l,r);
  3560   0016F0  C024  F01A         	movff	motor_action@l,stop@mL
  3561   0016F4  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3562   0016F8  C026  F01C         	movff	motor_action@r,stop@mR
  3563   0016FC  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3564   001700  ECBA  F013         	call	_stop	;wreg free
  3565                           
  3566                           ;../dc_motor.c: 219:             break;
  3567   001704  EF06  F00C         	goto	l326
  3568   001708                     l2983:
  3569                           
  3570                           ;../dc_motor.c: 221:             reverse_onesquare(l,r);
  3571   001708  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3572   00170C  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3573   001710  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3574   001714  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3575   001718  ECC7  F012         	call	_reverse_onesquare	;wreg free
  3576                           
  3577                           ;../dc_motor.c: 222:             right_90(l,r);
  3578   00171C  C024  F01A         	movff	motor_action@l,right_90@mL
  3579   001720  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3580   001724  C026  F01C         	movff	motor_action@r,right_90@mR
  3581   001728  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3582   00172C  EC81  F011         	call	_right_90	;wreg free
  3583                           
  3584                           ;../dc_motor.c: 223:             break;
  3585   001730  EF06  F00C         	goto	l326
  3586   001734                     l2985:
  3587                           
  3588                           ;../dc_motor.c: 225:             reverse_onesquare(l,r);
  3589   001734  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3590   001738  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3591   00173C  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3592   001740  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3593   001744  ECC7  F012         	call	_reverse_onesquare	;wreg free
  3594                           
  3595                           ;../dc_motor.c: 226:             left_90(l,r);
  3596   001748  C024  F01A         	movff	motor_action@l,left_90@mL
  3597   00174C  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3598   001750  C026  F01C         	movff	motor_action@r,left_90@mR
  3599   001754  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3600   001758  ECD3  F011         	call	_left_90	;wreg free
  3601                           
  3602                           ;../dc_motor.c: 227:             break;
  3603   00175C  EF06  F00C         	goto	l326
  3604   001760                     l2987:
  3605                           
  3606                           ;../dc_motor.c: 229:             reverse_fromcard(l,r);
  3607   001760  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3608   001764  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3609   001768  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3610   00176C  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3611   001770  EC18  F013         	call	_reverse_fromcard	;wreg free
  3612                           
  3613                           ;../dc_motor.c: 230:             right_135(l,r);
  3614   001774  C024  F01A         	movff	motor_action@l,right_135@mL
  3615   001778  C025  F01B         	movff	motor_action@l+1,right_135@mL+1
  3616   00177C  C026  F01C         	movff	motor_action@r,right_135@mR
  3617   001780  C027  F01D         	movff	motor_action@r+1,right_135@mR+1
  3618   001784  EC76  F012         	call	_right_135	;wreg free
  3619                           
  3620                           ;../dc_motor.c: 231:             break;
  3621   001788  EF06  F00C         	goto	l326
  3622   00178C                     l2989:
  3623                           
  3624                           ;../dc_motor.c: 233:             reverse_fromcard(l,r);
  3625   00178C  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3626   001790  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3627   001794  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3628   001798  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3629   00179C  EC18  F013         	call	_reverse_fromcard	;wreg free
  3630                           
  3631                           ;../dc_motor.c: 234:             left_135(l,r);
  3632   0017A0  C024  F01A         	movff	motor_action@l,left_135@mL
  3633   0017A4  C025  F01B         	movff	motor_action@l+1,left_135@mL+1
  3634   0017A8  C026  F01C         	movff	motor_action@r,left_135@mR
  3635   0017AC  C027  F01D         	movff	motor_action@r+1,left_135@mR+1
  3636   0017B0  EC69  F013         	call	_left_135	;wreg free
  3637                           
  3638                           ;../dc_motor.c: 235:             break;
  3639   0017B4  EF06  F00C         	goto	l326
  3640   0017B8                     l2993:
  3641   0017B8  C022  F028         	movff	motor_action@color,??_motor_action
  3642   0017BC  C023  F029         	movff	motor_action@color+1,??_motor_action+1
  3643                           
  3644                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3645                           ; Switch size 1, requested type "simple"
  3646                           ; Number of cases is 1, Range of values is 0 to 0
  3647                           ; switch strategies available:
  3648                           ; Name         Instructions Cycles
  3649                           ; simple_byte            4     3 (average)
  3650                           ;	Chosen strategy is simple_byte
  3651   0017C0  5029               	movf	(??_motor_action+1)^0,w,c
  3652   0017C2  0A00               	xorlw	0	; case 0
  3653   0017C4  B4D8               	btfsc	status,2,c
  3654   0017C6  EFE7  F00B         	goto	l3223
  3655   0017CA  EF06  F00C         	goto	l326
  3656   0017CE                     l3223:
  3657                           
  3658                           ; Switch size 1, requested type "simple"
  3659                           ; Number of cases is 7, Range of values is 1 to 7
  3660                           ; switch strategies available:
  3661                           ; Name         Instructions Cycles
  3662                           ; simple_byte           22    12 (average)
  3663                           ;	Chosen strategy is simple_byte
  3664   0017CE  5028               	movf	??_motor_action^0,w,c
  3665   0017D0  0A01               	xorlw	1	; case 1
  3666   0017D2  B4D8               	btfsc	status,2,c
  3667   0017D4  EFE2  F00A         	goto	l2959
  3668   0017D8  0A03               	xorlw	3	; case 2
  3669   0017DA  B4D8               	btfsc	status,2,c
  3670   0017DC  EF18  F00B         	goto	l2967
  3671   0017E0  0A01               	xorlw	1	; case 3
  3672   0017E2  B4D8               	btfsc	status,2,c
  3673   0017E4  EF4E  F00B         	goto	l2975
  3674   0017E8  0A07               	xorlw	7	; case 4
  3675   0017EA  B4D8               	btfsc	status,2,c
  3676   0017EC  EF84  F00B         	goto	l2983
  3677   0017F0  0A01               	xorlw	1	; case 5
  3678   0017F2  B4D8               	btfsc	status,2,c
  3679   0017F4  EF9A  F00B         	goto	l2985
  3680   0017F8  0A03               	xorlw	3	; case 6
  3681   0017FA  B4D8               	btfsc	status,2,c
  3682   0017FC  EFB0  F00B         	goto	l2987
  3683   001800  0A01               	xorlw	1	; case 7
  3684   001802  B4D8               	btfsc	status,2,c
  3685   001804  EFC6  F00B         	goto	l2989
  3686   001808  EF06  F00C         	goto	l326
  3687   00180C                     l326:
  3688   00180C  0012               	return		;funcret
  3689   00180E                     __end_of_motor_action:
  3690                           	callstack 0
  3691                           
  3692 ;; *************** function _stop *****************
  3693 ;; Defined at:
  3694 ;;		line 61 in file "../dc_motor.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3697 ;;		 -> main@motorL(9), 
  3698 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3699 ;;		 -> main@motorR(9), 
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;  i               2   30[COMRAM] int 
  3702 ;; Return value:  Size  Location     Type
  3703 ;;                  1    wreg      void 
  3704 ;; Registers used:
  3705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3706 ;; Tracked objects:
  3707 ;;		On entry : 0/0
  3708 ;;		On exit  : 0/0
  3709 ;;		Unchanged: 0/0
  3710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3711 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3712 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3713 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3714 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3715 ;;Total ram usage:        7 bytes
  3716 ;; Hardware stack levels used: 1
  3717 ;; Hardware stack levels required when called: 3
  3718 ;; This function calls:
  3719 ;;		_setMotorPWM
  3720 ;; This function is called by:
  3721 ;;		_main
  3722 ;;		_motor_action
  3723 ;;		_motor_action_return
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           	psect	text15
  3728   002774                     __ptext15:
  3729                           	callstack 0
  3730   002774                     _stop:
  3731                           	callstack 27
  3732   002774                     
  3733                           ;../dc_motor.c: 61: void stop(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c: 6
      +                          2: {;../dc_motor.c: 63:     mL->direction = 0;
  3734   002774  EE20 F001          	lfsr	2,1
  3735   002778  501A               	movf	stop@mL^0,w,c
  3736   00277A  26D9               	addwf	fsr2l,f,c
  3737   00277C  501B               	movf	(stop@mL+1)^0,w,c
  3738   00277E  22DA               	addwfc	fsr2h,f,c
  3739   002780  0E00               	movlw	0
  3740   002782  6EDF               	movwf	indf2,c
  3741                           
  3742                           ;../dc_motor.c: 64:     mR->direction = 0;
  3743   002784  EE20 F001          	lfsr	2,1
  3744   002788  501C               	movf	stop@mR^0,w,c
  3745   00278A  26D9               	addwf	fsr2l,f,c
  3746   00278C  501D               	movf	(stop@mR+1)^0,w,c
  3747   00278E  22DA               	addwfc	fsr2h,f,c
  3748   002790  0E00               	movlw	0
  3749   002792  6EDF               	movwf	indf2,c
  3750   002794                     
  3751                           ;../dc_motor.c: 65:     for (int i = 5;i>0;i = i - 1)
  3752   002794  0E00               	movlw	0
  3753   002796  6E20               	movwf	(stop@i+1)^0,c
  3754   002798  0E05               	movlw	5
  3755   00279A  6E1F               	movwf	stop@i^0,c
  3756   00279C                     l2569:
  3757                           
  3758                           ;../dc_motor.c: 66:     {;../dc_motor.c: 67:         mL->power = i;
  3759   00279C  C01A  FFD9         	movff	stop@mL,fsr2l
  3760   0027A0  C01B  FFDA         	movff	stop@mL+1,fsr2h
  3761   0027A4  C01F  FFDF         	movff	stop@i,indf2
  3762                           
  3763                           ;../dc_motor.c: 68:         mR->power = i;
  3764   0027A8  C01C  FFD9         	movff	stop@mR,fsr2l
  3765   0027AC  C01D  FFDA         	movff	stop@mR+1,fsr2h
  3766   0027B0  C01F  FFDF         	movff	stop@i,indf2
  3767   0027B4                     
  3768                           ;../dc_motor.c: 69:         setMotorPWM(mL);
  3769   0027B4  C01A  F00F         	movff	stop@mL,setMotorPWM@m
  3770   0027B8  C01B  F010         	movff	stop@mL+1,setMotorPWM@m+1
  3771   0027BC  ECF9  F00C         	call	_setMotorPWM	;wreg free
  3772   0027C0                     
  3773                           ;../dc_motor.c: 70:         setMotorPWM(mR);
  3774   0027C0  C01C  F00F         	movff	stop@mR,setMotorPWM@m
  3775   0027C4  C01D  F010         	movff	stop@mR+1,setMotorPWM@m+1
  3776   0027C8  ECF9  F00C         	call	_setMotorPWM	;wreg free
  3777   0027CC                     
  3778                           ;../dc_motor.c: 71:         _delay((unsigned long)((10)*(64000000/4000.0)));
  3779   0027CC  0ED0               	movlw	208
  3780   0027CE  6E1E               	movwf	??_stop^0,c
  3781   0027D0  0ECA               	movlw	202
  3782   0027D2                     u1997:
  3783   0027D2  2EE8               	decfsz	wreg,f,c
  3784   0027D4  D7FE               	bra	u1997
  3785   0027D6  2E1E               	decfsz	??_stop^0,f,c
  3786   0027D8  D7FC               	bra	u1997
  3787   0027DA                     
  3788                           ;../dc_motor.c: 72:     }
  3789   0027DA  0EFF               	movlw	255
  3790   0027DC  241F               	addwf	stop@i^0,w,c
  3791   0027DE  6E1F               	movwf	stop@i^0,c
  3792   0027E0  0EFF               	movlw	255
  3793   0027E2  2020               	addwfc	(stop@i+1)^0,w,c
  3794   0027E4  6E20               	movwf	(stop@i+1)^0,c
  3795   0027E6  BE20               	btfsc	(stop@i+1)^0,7,c
  3796   0027E8  EF00  F014         	goto	u1450
  3797   0027EC  5020               	movf	(stop@i+1)^0,w,c
  3798   0027EE  E106               	bnz	u1451
  3799   0027F0  041F               	decf	stop@i^0,w,c
  3800   0027F2  B0D8               	btfsc	status,0,c
  3801   0027F4  EFFE  F013         	goto	u1451
  3802   0027F8  EF00  F014         	goto	u1450
  3803   0027FC                     u1451:
  3804   0027FC  EFCE  F013         	goto	l2569
  3805   002800                     u1450:
  3806   002800  0012               	return		;funcret
  3807   002802                     __end_of_stop:
  3808                           	callstack 0
  3809                           
  3810 ;; *************** function _spin_180 *****************
  3811 ;; Defined at:
  3812 ;;		line 151 in file "../dc_motor.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3815 ;;		 -> main@motorL(9), 
  3816 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3817 ;;		 -> main@motorR(9), 
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;  i               2   31[COMRAM] int 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  1    wreg      void 
  3822 ;; Registers used:
  3823 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3829 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3830 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3831 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3832 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3833 ;;Total ram usage:        8 bytes
  3834 ;; Hardware stack levels used: 1
  3835 ;; Hardware stack levels required when called: 3
  3836 ;; This function calls:
  3837 ;;		_setMotorPWM
  3838 ;; This function is called by:
  3839 ;;		_main
  3840 ;;		_motor_action
  3841 ;;		_motor_action_return
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845                           	psect	text16
  3846   00244A                     __ptext16:
  3847                           	callstack 0
  3848   00244A                     _spin_180:
  3849                           	callstack 27
  3850   00244A                     
  3851                           ;../dc_motor.c: 151: void spin_180(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 152: {;../dc_motor.c: 153:     mL->direction = 1;
  3852   00244A  EE20 F001          	lfsr	2,1
  3853   00244E  501A               	movf	spin_180@mL^0,w,c
  3854   002450  26D9               	addwf	fsr2l,f,c
  3855   002452  501B               	movf	(spin_180@mL+1)^0,w,c
  3856   002454  22DA               	addwfc	fsr2h,f,c
  3857   002456  0E01               	movlw	1
  3858   002458  6EDF               	movwf	indf2,c
  3859                           
  3860                           ;../dc_motor.c: 154:     mR->direction = 0;
  3861   00245A  EE20 F001          	lfsr	2,1
  3862   00245E  501C               	movf	spin_180@mR^0,w,c
  3863   002460  26D9               	addwf	fsr2l,f,c
  3864   002462  501D               	movf	(spin_180@mR+1)^0,w,c
  3865   002464  22DA               	addwfc	fsr2h,f,c
  3866   002466  0E00               	movlw	0
  3867   002468  6EDF               	movwf	indf2,c
  3868   00246A                     
  3869                           ;../dc_motor.c: 155:     for (int i = 0;i<50;i = i + 2)
  3870   00246A  0E00               	movlw	0
  3871   00246C  6E21               	movwf	(spin_180@i+1)^0,c
  3872   00246E  0E00               	movlw	0
  3873   002470  6E20               	movwf	spin_180@i^0,c
  3874   002472                     l2589:
  3875                           
  3876                           ;../dc_motor.c: 156:     {;../dc_motor.c: 157:         mL->power = i;
  3877   002472  C01A  FFD9         	movff	spin_180@mL,fsr2l
  3878   002476  C01B  FFDA         	movff	spin_180@mL+1,fsr2h
  3879   00247A  C020  FFDF         	movff	spin_180@i,indf2
  3880   00247E                     
  3881                           ;../dc_motor.c: 158:         mR->power = 50 + i;
  3882   00247E  5020               	movf	spin_180@i^0,w,c
  3883   002480  0F32               	addlw	50
  3884   002482  C01C  FFD9         	movff	spin_180@mR,fsr2l
  3885   002486  C01D  FFDA         	movff	spin_180@mR+1,fsr2h
  3886   00248A  6EDF               	movwf	indf2,c
  3887   00248C                     
  3888                           ;../dc_motor.c: 159:         setMotorPWM(mL);
  3889   00248C  C01A  F00F         	movff	spin_180@mL,setMotorPWM@m
  3890   002490  C01B  F010         	movff	spin_180@mL+1,setMotorPWM@m+1
  3891   002494  ECF9  F00C         	call	_setMotorPWM	;wreg free
  3892   002498                     
  3893                           ;../dc_motor.c: 160:         setMotorPWM(mR);
  3894   002498  C01C  F00F         	movff	spin_180@mR,setMotorPWM@m
  3895   00249C  C01D  F010         	movff	spin_180@mR+1,setMotorPWM@m+1
  3896   0024A0  ECF9  F00C         	call	_setMotorPWM	;wreg free
  3897   0024A4                     
  3898                           ;../dc_motor.c: 161:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3899   0024A4  0E35               	movlw	53
  3900   0024A6                     u2007:
  3901   0024A6  2EE8               	decfsz	wreg,f,c
  3902   0024A8  D7FE               	bra	u2007
  3903   0024AA  F000               	nop	
  3904   0024AC                     
  3905                           ;../dc_motor.c: 162:     }
  3906   0024AC  0E02               	movlw	2
  3907   0024AE  2420               	addwf	spin_180@i^0,w,c
  3908   0024B0  6E20               	movwf	spin_180@i^0,c
  3909   0024B2  0E00               	movlw	0
  3910   0024B4  2021               	addwfc	(spin_180@i+1)^0,w,c
  3911   0024B6  6E21               	movwf	(spin_180@i+1)^0,c
  3912   0024B8  BE21               	btfsc	(spin_180@i+1)^0,7,c
  3913   0024BA  EF68  F012         	goto	u1461
  3914   0024BE  5021               	movf	(spin_180@i+1)^0,w,c
  3915   0024C0  E109               	bnz	u1460
  3916   0024C2  0E32               	movlw	50
  3917   0024C4  5C20               	subwf	spin_180@i^0,w,c
  3918   0024C6  A0D8               	btfss	status,0,c
  3919   0024C8  EF68  F012         	goto	u1461
  3920   0024CC  EF6A  F012         	goto	u1460
  3921   0024D0                     u1461:
  3922   0024D0  EF39  F012         	goto	l2589
  3923   0024D4                     u1460:
  3924   0024D4                     
  3925                           ;../dc_motor.c: 163:     _delay((unsigned long)((290)*(64000000/4000.0)));
  3926   0024D4  0E18               	movlw	24
  3927   0024D6  6E1F               	movwf	(??_spin_180+1)^0,c
  3928   0024D8  0E8A               	movlw	138
  3929   0024DA  6E1E               	movwf	??_spin_180^0,c
  3930   0024DC  0EE8               	movlw	232
  3931   0024DE                     u2017:
  3932   0024DE  2EE8               	decfsz	wreg,f,c
  3933   0024E0  D7FE               	bra	u2017
  3934   0024E2  2E1E               	decfsz	??_spin_180^0,f,c
  3935   0024E4  D7FC               	bra	u2017
  3936   0024E6  2E1F               	decfsz	(??_spin_180+1)^0,f,c
  3937   0024E8  D7FA               	bra	u2017
  3938   0024EA  0012               	return		;funcret
  3939   0024EC                     __end_of_spin_180:
  3940                           	callstack 0
  3941                           
  3942 ;; *************** function _right_90 *****************
  3943 ;; Defined at:
  3944 ;;		line 121 in file "../dc_motor.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3947 ;;		 -> main@motorL(9), 
  3948 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3949 ;;		 -> main@motorR(9), 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  i               2   31[COMRAM] int 
  3952 ;; Return value:  Size  Location     Type
  3953 ;;                  1    wreg      void 
  3954 ;; Registers used:
  3955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3961 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3962 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3963 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3964 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3965 ;;Total ram usage:        8 bytes
  3966 ;; Hardware stack levels used: 1
  3967 ;; Hardware stack levels required when called: 3
  3968 ;; This function calls:
  3969 ;;		_setMotorPWM
  3970 ;; This function is called by:
  3971 ;;		_motor_action
  3972 ;;		_motor_action_return
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           	psect	text17
  3977   002302                     __ptext17:
  3978                           	callstack 0
  3979   002302                     _right_90:
  3980                           	callstack 26
  3981   002302                     
  3982                           ;../dc_motor.c: 121: void right_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 122: {;../dc_motor.c: 123:     mL->direction = 1;
  3983   002302  EE20 F001          	lfsr	2,1
  3984   002306  501A               	movf	right_90@mL^0,w,c
  3985   002308  26D9               	addwf	fsr2l,f,c
  3986   00230A  501B               	movf	(right_90@mL+1)^0,w,c
  3987   00230C  22DA               	addwfc	fsr2h,f,c
  3988   00230E  0E01               	movlw	1
  3989   002310  6EDF               	movwf	indf2,c
  3990                           
  3991                           ;../dc_motor.c: 124:     mR->direction = 0;
  3992   002312  EE20 F001          	lfsr	2,1
  3993   002316  501C               	movf	right_90@mR^0,w,c
  3994   002318  26D9               	addwf	fsr2l,f,c
  3995   00231A  501D               	movf	(right_90@mR+1)^0,w,c
  3996   00231C  22DA               	addwfc	fsr2h,f,c
  3997   00231E  0E00               	movlw	0
  3998   002320  6EDF               	movwf	indf2,c
  3999   002322                     
  4000                           ;../dc_motor.c: 125:     for (int i = 0;i<50;i = i + 2)
  4001   002322  0E00               	movlw	0
  4002   002324  6E21               	movwf	(right_90@i+1)^0,c
  4003   002326  0E00               	movlw	0
  4004   002328  6E20               	movwf	right_90@i^0,c
  4005   00232A                     l2657:
  4006                           
  4007                           ;../dc_motor.c: 126:     {;../dc_motor.c: 127:         mL->power = i;
  4008   00232A  C01A  FFD9         	movff	right_90@mL,fsr2l
  4009   00232E  C01B  FFDA         	movff	right_90@mL+1,fsr2h
  4010   002332  C020  FFDF         	movff	right_90@i,indf2
  4011   002336                     
  4012                           ;../dc_motor.c: 128:         mR->power = 50 + i;
  4013   002336  5020               	movf	right_90@i^0,w,c
  4014   002338  0F32               	addlw	50
  4015   00233A  C01C  FFD9         	movff	right_90@mR,fsr2l
  4016   00233E  C01D  FFDA         	movff	right_90@mR+1,fsr2h
  4017   002342  6EDF               	movwf	indf2,c
  4018   002344                     
  4019                           ;../dc_motor.c: 129:         setMotorPWM(mL);
  4020   002344  C01A  F00F         	movff	right_90@mL,setMotorPWM@m
  4021   002348  C01B  F010         	movff	right_90@mL+1,setMotorPWM@m+1
  4022   00234C  ECF9  F00C         	call	_setMotorPWM	;wreg free
  4023   002350                     
  4024                           ;../dc_motor.c: 130:         setMotorPWM(mR);
  4025   002350  C01C  F00F         	movff	right_90@mR,setMotorPWM@m
  4026   002354  C01D  F010         	movff	right_90@mR+1,setMotorPWM@m+1
  4027   002358  ECF9  F00C         	call	_setMotorPWM	;wreg free
  4028   00235C                     
  4029                           ;../dc_motor.c: 131:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4030   00235C  0E35               	movlw	53
  4031   00235E                     u2027:
  4032   00235E  2EE8               	decfsz	wreg,f,c
  4033   002360  D7FE               	bra	u2027
  4034   002362  F000               	nop	
  4035   002364                     
  4036                           ;../dc_motor.c: 132:     }
  4037   002364  0E02               	movlw	2
  4038   002366  2420               	addwf	right_90@i^0,w,c
  4039   002368  6E20               	movwf	right_90@i^0,c
  4040   00236A  0E00               	movlw	0
  4041   00236C  2021               	addwfc	(right_90@i+1)^0,w,c
  4042   00236E  6E21               	movwf	(right_90@i+1)^0,c
  4043   002370  BE21               	btfsc	(right_90@i+1)^0,7,c
  4044   002372  EFC4  F011         	goto	u1491
  4045   002376  5021               	movf	(right_90@i+1)^0,w,c
  4046   002378  E109               	bnz	u1490
  4047   00237A  0E32               	movlw	50
  4048   00237C  5C20               	subwf	right_90@i^0,w,c
  4049   00237E  A0D8               	btfss	status,0,c
  4050   002380  EFC4  F011         	goto	u1491
  4051   002384  EFC6  F011         	goto	u1490
  4052   002388                     u1491:
  4053   002388  EF95  F011         	goto	l2657
  4054   00238C                     u1490:
  4055   00238C                     
  4056                           ;../dc_motor.c: 133:     _delay((unsigned long)((165)*(64000000/4000.0)));
  4057   00238C  0E0E               	movlw	14
  4058   00238E  6E1F               	movwf	(??_right_90+1)^0,c
  4059   002390  0E65               	movlw	101
  4060   002392  6E1E               	movwf	??_right_90^0,c
  4061   002394  0E87               	movlw	135
  4062   002396                     u2037:
  4063   002396  2EE8               	decfsz	wreg,f,c
  4064   002398  D7FE               	bra	u2037
  4065   00239A  2E1E               	decfsz	??_right_90^0,f,c
  4066   00239C  D7FC               	bra	u2037
  4067   00239E  2E1F               	decfsz	(??_right_90+1)^0,f,c
  4068   0023A0  D7FA               	bra	u2037
  4069   0023A2  F000               	nop	
  4070   0023A4  0012               	return		;funcret
  4071   0023A6                     __end_of_right_90:
  4072                           	callstack 0
  4073                           
  4074 ;; *************** function _right_135 *****************
  4075 ;; Defined at:
  4076 ;;		line 166 in file "../dc_motor.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4079 ;;		 -> main@motorL(9), 
  4080 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4081 ;;		 -> main@motorR(9), 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;  i               2   31[COMRAM] int 
  4084 ;; Return value:  Size  Location     Type
  4085 ;;                  1    wreg      void 
  4086 ;; Registers used:
  4087 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4093 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4094 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4095 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4096 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4097 ;;Total ram usage:        8 bytes
  4098 ;; Hardware stack levels used: 1
  4099 ;; Hardware stack levels required when called: 3
  4100 ;; This function calls:
  4101 ;;		_setMotorPWM
  4102 ;; This function is called by:
  4103 ;;		_motor_action
  4104 ;;		_motor_action_return
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           	psect	text18
  4109   0024EC                     __ptext18:
  4110                           	callstack 0
  4111   0024EC                     _right_135:
  4112                           	callstack 26
  4113   0024EC                     
  4114                           ;../dc_motor.c: 166: void right_135(struct DC_motor *mL, struct DC_motor *mR);../dc_moto
      +                          r.c: 167: {;../dc_motor.c: 168:     mL->direction = 1;
  4115   0024EC  EE20 F001          	lfsr	2,1
  4116   0024F0  501A               	movf	right_135@mL^0,w,c
  4117   0024F2  26D9               	addwf	fsr2l,f,c
  4118   0024F4  501B               	movf	(right_135@mL+1)^0,w,c
  4119   0024F6  22DA               	addwfc	fsr2h,f,c
  4120   0024F8  0E01               	movlw	1
  4121   0024FA  6EDF               	movwf	indf2,c
  4122                           
  4123                           ;../dc_motor.c: 169:     mR->direction = 0;
  4124   0024FC  EE20 F001          	lfsr	2,1
  4125   002500  501C               	movf	right_135@mR^0,w,c
  4126   002502  26D9               	addwf	fsr2l,f,c
  4127   002504  501D               	movf	(right_135@mR+1)^0,w,c
  4128   002506  22DA               	addwfc	fsr2h,f,c
  4129   002508  0E00               	movlw	0
  4130   00250A  6EDF               	movwf	indf2,c
  4131   00250C                     
  4132                           ;../dc_motor.c: 170:     for (int i = 0;i<50;i = i + 2)
  4133   00250C  0E00               	movlw	0
  4134   00250E  6E21               	movwf	(right_135@i+1)^0,c
  4135   002510  0E00               	movlw	0
  4136   002512  6E20               	movwf	right_135@i^0,c
  4137   002514                     l2705:
  4138                           
  4139                           ;../dc_motor.c: 171:     {;../dc_motor.c: 172:         mL->power = i;
  4140   002514  C01A  FFD9         	movff	right_135@mL,fsr2l
  4141   002518  C01B  FFDA         	movff	right_135@mL+1,fsr2h
  4142   00251C  C020  FFDF         	movff	right_135@i,indf2
  4143   002520                     
  4144                           ;../dc_motor.c: 173:         mR->power = 50 + i;
  4145   002520  5020               	movf	right_135@i^0,w,c
  4146   002522  0F32               	addlw	50
  4147   002524  C01C  FFD9         	movff	right_135@mR,fsr2l
  4148   002528  C01D  FFDA         	movff	right_135@mR+1,fsr2h
  4149   00252C  6EDF               	movwf	indf2,c
  4150   00252E                     
  4151                           ;../dc_motor.c: 174:         setMotorPWM(mL);
  4152   00252E  C01A  F00F         	movff	right_135@mL,setMotorPWM@m
  4153   002532  C01B  F010         	movff	right_135@mL+1,setMotorPWM@m+1
  4154   002536  ECF9  F00C         	call	_setMotorPWM	;wreg free
  4155   00253A                     
  4156                           ;../dc_motor.c: 175:         setMotorPWM(mR);
  4157   00253A  C01C  F00F         	movff	right_135@mR,setMotorPWM@m
  4158   00253E  C01D  F010         	movff	right_135@mR+1,setMotorPWM@m+1
  4159   002542  ECF9  F00C         	call	_setMotorPWM	;wreg free
  4160   002546                     
  4161                           ;../dc_motor.c: 176:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4162   002546  0E35               	movlw	53
  4163   002548                     u2047:
  4164   002548  2EE8               	decfsz	wreg,f,c
  4165   00254A  D7FE               	bra	u2047
  4166   00254C  F000               	nop	
  4167   00254E                     
  4168                           ;../dc_motor.c: 177:     }
  4169   00254E  0E02               	movlw	2
  4170   002550  2420               	addwf	right_135@i^0,w,c
  4171   002552  6E20               	movwf	right_135@i^0,c
  4172   002554  0E00               	movlw	0
  4173   002556  2021               	addwfc	(right_135@i+1)^0,w,c
  4174   002558  6E21               	movwf	(right_135@i+1)^0,c
  4175   00255A  BE21               	btfsc	(right_135@i+1)^0,7,c
  4176   00255C  EFB9  F012         	goto	u1511
  4177   002560  5021               	movf	(right_135@i+1)^0,w,c
  4178   002562  E109               	bnz	u1510
  4179   002564  0E32               	movlw	50
  4180   002566  5C20               	subwf	right_135@i^0,w,c
  4181   002568  A0D8               	btfss	status,0,c
  4182   00256A  EFB9  F012         	goto	u1511
  4183   00256E  EFBB  F012         	goto	u1510
  4184   002572                     u1511:
  4185   002572  EF8A  F012         	goto	l2705
  4186   002576                     u1510:
  4187   002576                     
  4188                           ;../dc_motor.c: 178:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4189   002576  0E13               	movlw	19
  4190   002578  6E1F               	movwf	(??_right_135+1)^0,c
  4191   00257A  0EAC               	movlw	172
  4192   00257C  6E1E               	movwf	??_right_135^0,c
  4193   00257E  0E2A               	movlw	42
  4194   002580                     u2057:
  4195   002580  2EE8               	decfsz	wreg,f,c
  4196   002582  D7FE               	bra	u2057
  4197   002584  2E1E               	decfsz	??_right_135^0,f,c
  4198   002586  D7FC               	bra	u2057
  4199   002588  2E1F               	decfsz	(??_right_135+1)^0,f,c
  4200   00258A  D7FA               	bra	u2057
  4201   00258C  0012               	return		;funcret
  4202   00258E                     __end_of_right_135:
  4203                           	callstack 0
  4204                           
  4205 ;; *************** function _reverse_onesquare *****************
  4206 ;; Defined at:
  4207 ;;		line 106 in file "../dc_motor.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4210 ;;		 -> main@motorL(9), 
  4211 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4212 ;;		 -> main@motorR(9), 
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;  i               2   31[COMRAM] int 
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  1    wreg      void 
  4217 ;; Registers used:
  4218 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4224 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4225 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4226 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4227 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4228 ;;Total ram usage:        8 bytes
  4229 ;; Hardware stack levels used: 1
  4230 ;; Hardware stack levels required when called: 3
  4231 ;; This function calls:
  4232 ;;		_setMotorPWM
  4233 ;; This function is called by:
  4234 ;;		_motor_action
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           	psect	text19
  4239   00258E                     __ptext19:
  4240                           	callstack 0
  4241   00258E                     _reverse_onesquare:
  4242                           	callstack 26
  4243   00258E                     
  4244                           ;../dc_motor.c: 106: void reverse_onesquare (struct DC_motor *mL, struct DC_motor *mR);.
      +                          ./dc_motor.c: 107: {;../dc_motor.c: 108:     mL->direction = 0;
  4245   00258E  EE20 F001          	lfsr	2,1
  4246   002592  501A               	movf	reverse_onesquare@mL^0,w,c
  4247   002594  26D9               	addwf	fsr2l,f,c
  4248   002596  501B               	movf	(reverse_onesquare@mL+1)^0,w,c
  4249   002598  22DA               	addwfc	fsr2h,f,c
  4250   00259A  0E00               	movlw	0
  4251   00259C  6EDF               	movwf	indf2,c
  4252                           
  4253                           ;../dc_motor.c: 109:     mR->direction = 0;
  4254   00259E  EE20 F001          	lfsr	2,1
  4255   0025A2  501C               	movf	reverse_onesquare@mR^0,w,c
  4256   0025A4  26D9               	addwf	fsr2l,f,c
  4257   0025A6  501D               	movf	(reverse_onesquare@mR+1)^0,w,c
  4258   0025A8  22DA               	addwfc	fsr2h,f,c
  4259   0025AA  0E00               	movlw	0
  4260   0025AC  6EDF               	movwf	indf2,c
  4261   0025AE                     
  4262                           ;../dc_motor.c: 110:     for (int i=0;i<51;i=i + 2)
  4263   0025AE  0E00               	movlw	0
  4264   0025B0  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  4265   0025B2  0E00               	movlw	0
  4266   0025B4  6E20               	movwf	reverse_onesquare@i^0,c
  4267   0025B6                     l2635:
  4268                           
  4269                           ;../dc_motor.c: 111:     {;../dc_motor.c: 112:         mL->power = i;
  4270   0025B6  C01A  FFD9         	movff	reverse_onesquare@mL,fsr2l
  4271   0025BA  C01B  FFDA         	movff	reverse_onesquare@mL+1,fsr2h
  4272   0025BE  C020  FFDF         	movff	reverse_onesquare@i,indf2
  4273                           
  4274                           ;../dc_motor.c: 113:         mR->power = i;
  4275   0025C2  C01C  FFD9         	movff	reverse_onesquare@mR,fsr2l
  4276   0025C6  C01D  FFDA         	movff	reverse_onesquare@mR+1,fsr2h
  4277   0025CA  C020  FFDF         	movff	reverse_onesquare@i,indf2
  4278   0025CE                     
  4279                           ;../dc_motor.c: 114:         setMotorPWM(mL);
  4280   0025CE  C01A  F00F         	movff	reverse_onesquare@mL,setMotorPWM@m
  4281   0025D2  C01B  F010         	movff	reverse_onesquare@mL+1,setMotorPWM@m+1
  4282   0025D6  ECF9  F00C         	call	_setMotorPWM	;wreg free
  4283   0025DA                     
  4284                           ;../dc_motor.c: 115:         setMotorPWM(mR);
  4285   0025DA  C01C  F00F         	movff	reverse_onesquare@mR,setMotorPWM@m
  4286   0025DE  C01D  F010         	movff	reverse_onesquare@mR+1,setMotorPWM@m+1
  4287   0025E2  ECF9  F00C         	call	_setMotorPWM	;wreg free
  4288   0025E6                     
  4289                           ;../dc_motor.c: 116:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4290   0025E6  0E35               	movlw	53
  4291   0025E8                     u2067:
  4292   0025E8  2EE8               	decfsz	wreg,f,c
  4293   0025EA  D7FE               	bra	u2067
  4294   0025EC  F000               	nop	
  4295   0025EE                     
  4296                           ;../dc_motor.c: 117:     }
  4297   0025EE  0E02               	movlw	2
  4298   0025F0  2420               	addwf	reverse_onesquare@i^0,w,c
  4299   0025F2  6E20               	movwf	reverse_onesquare@i^0,c
  4300   0025F4  0E00               	movlw	0
  4301   0025F6  2021               	addwfc	(reverse_onesquare@i+1)^0,w,c
  4302   0025F8  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  4303   0025FA  BE21               	btfsc	(reverse_onesquare@i+1)^0,7,c
  4304   0025FC  EF09  F013         	goto	u1481
  4305   002600  5021               	movf	(reverse_onesquare@i+1)^0,w,c
  4306   002602  E109               	bnz	u1480
  4307   002604  0E33               	movlw	51
  4308   002606  5C20               	subwf	reverse_onesquare@i^0,w,c
  4309   002608  A0D8               	btfss	status,0,c
  4310   00260A  EF09  F013         	goto	u1481
  4311   00260E  EF0B  F013         	goto	u1480
  4312   002612                     u1481:
  4313   002612  EFDB  F012         	goto	l2635
  4314   002616                     u1480:
  4315   002616                     
  4316                           ;../dc_motor.c: 118:     _delay((unsigned long)((1100)*(64000000/4000.0)));
  4317   002616  0E5A               	movlw	90
  4318   002618  6E1F               	movwf	(??_reverse_onesquare+1)^0,c
  4319   00261A  0E49               	movlw	73
  4320   00261C  6E1E               	movwf	??_reverse_onesquare^0,c
  4321   00261E  0EE7               	movlw	231
  4322   002620                     u2077:
  4323   002620  2EE8               	decfsz	wreg,f,c
  4324   002622  D7FE               	bra	u2077
  4325   002624  2E1E               	decfsz	??_reverse_onesquare^0,f,c
  4326   002626  D7FC               	bra	u2077
  4327   002628  2E1F               	decfsz	(??_reverse_onesquare+1)^0,f,c
  4328   00262A  D7FA               	bra	u2077
  4329   00262C  F000               	nop	
  4330   00262E  0012               	return		;funcret
  4331   002630                     __end_of_reverse_onesquare:
  4332                           	callstack 0
  4333                           
  4334 ;; *************** function _reverse_fromcard *****************
  4335 ;; Defined at:
  4336 ;;		line 91 in file "../dc_motor.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4339 ;;		 -> main@motorL(9), 
  4340 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4341 ;;		 -> main@motorR(9), 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  i               2   31[COMRAM] int 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      void 
  4346 ;; Registers used:
  4347 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4354 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4355 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4356 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4357 ;;Total ram usage:        8 bytes
  4358 ;; Hardware stack levels used: 1
  4359 ;; Hardware stack levels required when called: 3
  4360 ;; This function calls:
  4361 ;;		_setMotorPWM
  4362 ;; This function is called by:
  4363 ;;		_motor_action
  4364 ;;		_motor_action_return
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text20
  4369   002630                     __ptext20:
  4370                           	callstack 0
  4371   002630                     _reverse_fromcard:
  4372                           	callstack 26
  4373   002630                     
  4374                           ;../dc_motor.c: 91: void reverse_fromcard (struct DC_motor *mL, struct DC_motor *mR);../
      +                          dc_motor.c: 92: {;../dc_motor.c: 93:     mL->direction = 0;
  4375   002630  EE20 F001          	lfsr	2,1
  4376   002634  501A               	movf	reverse_fromcard@mL^0,w,c
  4377   002636  26D9               	addwf	fsr2l,f,c
  4378   002638  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  4379   00263A  22DA               	addwfc	fsr2h,f,c
  4380   00263C  0E00               	movlw	0
  4381   00263E  6EDF               	movwf	indf2,c
  4382                           
  4383                           ;../dc_motor.c: 94:     mL->direction = 0;
  4384   002640  EE20 F001          	lfsr	2,1
  4385   002644  501A               	movf	reverse_fromcard@mL^0,w,c
  4386   002646  26D9               	addwf	fsr2l,f,c
  4387   002648  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  4388   00264A  22DA               	addwfc	fsr2h,f,c
  4389   00264C  0E00               	movlw	0
  4390   00264E  6EDF               	movwf	indf2,c
  4391   002650                     
  4392                           ;../dc_motor.c: 95:     for (int i = 0;i < 41;i = i + 2)
  4393   002650  0E00               	movlw	0
  4394   002652  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  4395   002654  0E00               	movlw	0
  4396   002656  6E20               	movwf	reverse_fromcard@i^0,c
  4397   002658                     l2613:
  4398                           
  4399                           ;../dc_motor.c: 96:     {;../dc_motor.c: 97:         mL->power = i;
  4400   002658  C01A  FFD9         	movff	reverse_fromcard@mL,fsr2l
  4401   00265C  C01B  FFDA         	movff	reverse_fromcard@mL+1,fsr2h
  4402   002660  C020  FFDF         	movff	reverse_fromcard@i,indf2
  4403                           
  4404                           ;../dc_motor.c: 98:         mR->power = i;
  4405   002664  C01C  FFD9         	movff	reverse_fromcard@mR,fsr2l
  4406   002668  C01D  FFDA         	movff	reverse_fromcard@mR+1,fsr2h
  4407   00266C  C020  FFDF         	movff	reverse_fromcard@i,indf2
  4408   002670                     
  4409                           ;../dc_motor.c: 99:         setMotorPWM(mL);
  4410   002670  C01A  F00F         	movff	reverse_fromcard@mL,setMotorPWM@m
  4411   002674  C01B  F010         	movff	reverse_fromcard@mL+1,setMotorPWM@m+1
  4412   002678  ECF9  F00C         	call	_setMotorPWM	;wreg free
  4413   00267C                     
  4414                           ;../dc_motor.c: 100:         setMotorPWM(mR);
  4415   00267C  C01C  F00F         	movff	reverse_fromcard@mR,setMotorPWM@m
  4416   002680  C01D  F010         	movff	reverse_fromcard@mR+1,setMotorPWM@m+1
  4417   002684  ECF9  F00C         	call	_setMotorPWM	;wreg free
  4418   002688                     
  4419                           ;../dc_motor.c: 101:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4420   002688  0E35               	movlw	53
  4421   00268A                     u2087:
  4422   00268A  2EE8               	decfsz	wreg,f,c
  4423   00268C  D7FE               	bra	u2087
  4424   00268E  F000               	nop	
  4425   002690                     
  4426                           ;../dc_motor.c: 102:     }
  4427   002690  0E02               	movlw	2
  4428   002692  2420               	addwf	reverse_fromcard@i^0,w,c
  4429   002694  6E20               	movwf	reverse_fromcard@i^0,c
  4430   002696  0E00               	movlw	0
  4431   002698  2021               	addwfc	(reverse_fromcard@i+1)^0,w,c
  4432   00269A  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  4433   00269C  BE21               	btfsc	(reverse_fromcard@i+1)^0,7,c
  4434   00269E  EF5A  F013         	goto	u1471
  4435   0026A2  5021               	movf	(reverse_fromcard@i+1)^0,w,c
  4436   0026A4  E109               	bnz	u1470
  4437   0026A6  0E29               	movlw	41
  4438   0026A8  5C20               	subwf	reverse_fromcard@i^0,w,c
  4439   0026AA  A0D8               	btfss	status,0,c
  4440   0026AC  EF5A  F013         	goto	u1471
  4441   0026B0  EF5C  F013         	goto	u1470
  4442   0026B4                     u1471:
  4443   0026B4  EF2C  F013         	goto	l2613
  4444   0026B8                     u1470:
  4445   0026B8                     
  4446                           ;../dc_motor.c: 103:     _delay((unsigned long)((500)*(64000000/4000.0)));
  4447   0026B8  0E29               	movlw	41
  4448   0026BA  6E1F               	movwf	(??_reverse_fromcard+1)^0,c
  4449   0026BC  0E96               	movlw	150
  4450   0026BE  6E1E               	movwf	??_reverse_fromcard^0,c
  4451   0026C0  0E7F               	movlw	127
  4452   0026C2                     u2097:
  4453   0026C2  2EE8               	decfsz	wreg,f,c
  4454   0026C4  D7FE               	bra	u2097
  4455   0026C6  2E1E               	decfsz	??_reverse_fromcard^0,f,c
  4456   0026C8  D7FC               	bra	u2097
  4457   0026CA  2E1F               	decfsz	(??_reverse_fromcard+1)^0,f,c
  4458   0026CC  D7FA               	bra	u2097
  4459   0026CE  F000               	nop	
  4460   0026D0  0012               	return		;funcret
  4461   0026D2                     __end_of_reverse_fromcard:
  4462                           	callstack 0
  4463                           
  4464 ;; *************** function _left_90 *****************
  4465 ;; Defined at:
  4466 ;;		line 136 in file "../dc_motor.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4469 ;;		 -> main@motorL(9), 
  4470 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4471 ;;		 -> main@motorR(9), 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  i               2   31[COMRAM] int 
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4483 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4484 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4485 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4486 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4487 ;;Total ram usage:        8 bytes
  4488 ;; Hardware stack levels used: 1
  4489 ;; Hardware stack levels required when called: 3
  4490 ;; This function calls:
  4491 ;;		_setMotorPWM
  4492 ;; This function is called by:
  4493 ;;		_motor_action
  4494 ;;		_motor_action_return
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           	psect	text21
  4499   0023A6                     __ptext21:
  4500                           	callstack 0
  4501   0023A6                     _left_90:
  4502                           	callstack 26
  4503   0023A6                     
  4504                           ;../dc_motor.c: 136: void left_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 137: {;../dc_motor.c: 138:     mL->direction = 0;
  4505   0023A6  EE20 F001          	lfsr	2,1
  4506   0023AA  501A               	movf	left_90@mL^0,w,c
  4507   0023AC  26D9               	addwf	fsr2l,f,c
  4508   0023AE  501B               	movf	(left_90@mL+1)^0,w,c
  4509   0023B0  22DA               	addwfc	fsr2h,f,c
  4510   0023B2  0E00               	movlw	0
  4511   0023B4  6EDF               	movwf	indf2,c
  4512                           
  4513                           ;../dc_motor.c: 139:     mR->direction = 1;
  4514   0023B6  EE20 F001          	lfsr	2,1
  4515   0023BA  501C               	movf	left_90@mR^0,w,c
  4516   0023BC  26D9               	addwf	fsr2l,f,c
  4517   0023BE  501D               	movf	(left_90@mR+1)^0,w,c
  4518   0023C0  22DA               	addwfc	fsr2h,f,c
  4519   0023C2  0E01               	movlw	1
  4520   0023C4  6EDF               	movwf	indf2,c
  4521   0023C6                     
  4522                           ;../dc_motor.c: 140:     for (int i = 0;i<50;i = i + 2)
  4523   0023C6  0E00               	movlw	0
  4524   0023C8  6E21               	movwf	(left_90@i+1)^0,c
  4525   0023CA  0E00               	movlw	0
  4526   0023CC  6E20               	movwf	left_90@i^0,c
  4527   0023CE                     l2681:
  4528                           
  4529                           ;../dc_motor.c: 141:     {;../dc_motor.c: 142:         mL->power = 50 + i;
  4530   0023CE  5020               	movf	left_90@i^0,w,c
  4531   0023D0  0F32               	addlw	50
  4532   0023D2  C01A  FFD9         	movff	left_90@mL,fsr2l
  4533   0023D6  C01B  FFDA         	movff	left_90@mL+1,fsr2h
  4534   0023DA  6EDF               	movwf	indf2,c
  4535   0023DC                     
  4536                           ;../dc_motor.c: 143:         mR->power = i;
  4537   0023DC  C01C  FFD9         	movff	left_90@mR,fsr2l
  4538   0023E0  C01D  FFDA         	movff	left_90@mR+1,fsr2h
  4539   0023E4  C020  FFDF         	movff	left_90@i,indf2
  4540   0023E8                     
  4541                           ;../dc_motor.c: 144:         setMotorPWM(mL);
  4542   0023E8  C01A  F00F         	movff	left_90@mL,setMotorPWM@m
  4543   0023EC  C01B  F010         	movff	left_90@mL+1,setMotorPWM@m+1
  4544   0023F0  ECF9  F00C         	call	_setMotorPWM	;wreg free
  4545   0023F4                     
  4546                           ;../dc_motor.c: 145:         setMotorPWM(mR);
  4547   0023F4  C01C  F00F         	movff	left_90@mR,setMotorPWM@m
  4548   0023F8  C01D  F010         	movff	left_90@mR+1,setMotorPWM@m+1
  4549   0023FC  ECF9  F00C         	call	_setMotorPWM	;wreg free
  4550   002400                     
  4551                           ;../dc_motor.c: 146:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4552   002400  0E35               	movlw	53
  4553   002402                     u2107:
  4554   002402  2EE8               	decfsz	wreg,f,c
  4555   002404  D7FE               	bra	u2107
  4556   002406  F000               	nop	
  4557   002408                     
  4558                           ;../dc_motor.c: 147:     }
  4559   002408  0E02               	movlw	2
  4560   00240A  2420               	addwf	left_90@i^0,w,c
  4561   00240C  6E20               	movwf	left_90@i^0,c
  4562   00240E  0E00               	movlw	0
  4563   002410  2021               	addwfc	(left_90@i+1)^0,w,c
  4564   002412  6E21               	movwf	(left_90@i+1)^0,c
  4565   002414  BE21               	btfsc	(left_90@i+1)^0,7,c
  4566   002416  EF16  F012         	goto	u1501
  4567   00241A  5021               	movf	(left_90@i+1)^0,w,c
  4568   00241C  E109               	bnz	u1500
  4569   00241E  0E32               	movlw	50
  4570   002420  5C20               	subwf	left_90@i^0,w,c
  4571   002422  A0D8               	btfss	status,0,c
  4572   002424  EF16  F012         	goto	u1501
  4573   002428  EF18  F012         	goto	u1500
  4574   00242C                     u1501:
  4575   00242C  EFE7  F011         	goto	l2681
  4576   002430                     u1500:
  4577   002430                     
  4578                           ;../dc_motor.c: 148:     _delay((unsigned long)((165)*(64000000/4000.0)));
  4579   002430  0E0E               	movlw	14
  4580   002432  6E1F               	movwf	(??_left_90+1)^0,c
  4581   002434  0E65               	movlw	101
  4582   002436  6E1E               	movwf	??_left_90^0,c
  4583   002438  0E87               	movlw	135
  4584   00243A                     u2117:
  4585   00243A  2EE8               	decfsz	wreg,f,c
  4586   00243C  D7FE               	bra	u2117
  4587   00243E  2E1E               	decfsz	??_left_90^0,f,c
  4588   002440  D7FC               	bra	u2117
  4589   002442  2E1F               	decfsz	(??_left_90+1)^0,f,c
  4590   002444  D7FA               	bra	u2117
  4591   002446  F000               	nop	
  4592   002448  0012               	return		;funcret
  4593   00244A                     __end_of_left_90:
  4594                           	callstack 0
  4595                           
  4596 ;; *************** function _left_135 *****************
  4597 ;; Defined at:
  4598 ;;		line 181 in file "../dc_motor.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4601 ;;		 -> main@motorL(9), 
  4602 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4603 ;;		 -> main@motorR(9), 
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;  i               2   31[COMRAM] int 
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  1    wreg      void 
  4608 ;; Registers used:
  4609 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4615 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4616 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4617 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4618 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4619 ;;Total ram usage:        8 bytes
  4620 ;; Hardware stack levels used: 1
  4621 ;; Hardware stack levels required when called: 3
  4622 ;; This function calls:
  4623 ;;		_setMotorPWM
  4624 ;; This function is called by:
  4625 ;;		_motor_action
  4626 ;;		_motor_action_return
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           	psect	text22
  4631   0026D2                     __ptext22:
  4632                           	callstack 0
  4633   0026D2                     _left_135:
  4634                           	callstack 26
  4635   0026D2                     
  4636                           ;../dc_motor.c: 181: void left_135(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 182: {;../dc_motor.c: 183:     mL->direction = 0;
  4637   0026D2  EE20 F001          	lfsr	2,1
  4638   0026D6  501A               	movf	left_135@mL^0,w,c
  4639   0026D8  26D9               	addwf	fsr2l,f,c
  4640   0026DA  501B               	movf	(left_135@mL+1)^0,w,c
  4641   0026DC  22DA               	addwfc	fsr2h,f,c
  4642   0026DE  0E00               	movlw	0
  4643   0026E0  6EDF               	movwf	indf2,c
  4644                           
  4645                           ;../dc_motor.c: 184:     mR->direction = 1;
  4646   0026E2  EE20 F001          	lfsr	2,1
  4647   0026E6  501C               	movf	left_135@mR^0,w,c
  4648   0026E8  26D9               	addwf	fsr2l,f,c
  4649   0026EA  501D               	movf	(left_135@mR+1)^0,w,c
  4650   0026EC  22DA               	addwfc	fsr2h,f,c
  4651   0026EE  0E01               	movlw	1
  4652   0026F0  6EDF               	movwf	indf2,c
  4653   0026F2                     
  4654                           ;../dc_motor.c: 185:     for (int i = 0;i<50;i = i + 2)
  4655   0026F2  0E00               	movlw	0
  4656   0026F4  6E21               	movwf	(left_135@i+1)^0,c
  4657   0026F6  0E00               	movlw	0
  4658   0026F8  6E20               	movwf	left_135@i^0,c
  4659   0026FA                     l2729:
  4660                           
  4661                           ;../dc_motor.c: 186:     {;../dc_motor.c: 187:         mL->power = 50 + i;
  4662   0026FA  5020               	movf	left_135@i^0,w,c
  4663   0026FC  0F32               	addlw	50
  4664   0026FE  C01A  FFD9         	movff	left_135@mL,fsr2l
  4665   002702  C01B  FFDA         	movff	left_135@mL+1,fsr2h
  4666   002706  6EDF               	movwf	indf2,c
  4667   002708                     
  4668                           ;../dc_motor.c: 188:         mR->power = i;
  4669   002708  C01C  FFD9         	movff	left_135@mR,fsr2l
  4670   00270C  C01D  FFDA         	movff	left_135@mR+1,fsr2h
  4671   002710  C020  FFDF         	movff	left_135@i,indf2
  4672   002714                     
  4673                           ;../dc_motor.c: 189:         setMotorPWM(mL);
  4674   002714  C01A  F00F         	movff	left_135@mL,setMotorPWM@m
  4675   002718  C01B  F010         	movff	left_135@mL+1,setMotorPWM@m+1
  4676   00271C  ECF9  F00C         	call	_setMotorPWM	;wreg free
  4677   002720                     
  4678                           ;../dc_motor.c: 190:         setMotorPWM(mR);
  4679   002720  C01C  F00F         	movff	left_135@mR,setMotorPWM@m
  4680   002724  C01D  F010         	movff	left_135@mR+1,setMotorPWM@m+1
  4681   002728  ECF9  F00C         	call	_setMotorPWM	;wreg free
  4682   00272C                     
  4683                           ;../dc_motor.c: 191:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4684   00272C  0E35               	movlw	53
  4685   00272E                     u2127:
  4686   00272E  2EE8               	decfsz	wreg,f,c
  4687   002730  D7FE               	bra	u2127
  4688   002732  F000               	nop	
  4689   002734                     
  4690                           ;../dc_motor.c: 192:     }
  4691   002734  0E02               	movlw	2
  4692   002736  2420               	addwf	left_135@i^0,w,c
  4693   002738  6E20               	movwf	left_135@i^0,c
  4694   00273A  0E00               	movlw	0
  4695   00273C  2021               	addwfc	(left_135@i+1)^0,w,c
  4696   00273E  6E21               	movwf	(left_135@i+1)^0,c
  4697   002740  BE21               	btfsc	(left_135@i+1)^0,7,c
  4698   002742  EFAC  F013         	goto	u1521
  4699   002746  5021               	movf	(left_135@i+1)^0,w,c
  4700   002748  E109               	bnz	u1520
  4701   00274A  0E32               	movlw	50
  4702   00274C  5C20               	subwf	left_135@i^0,w,c
  4703   00274E  A0D8               	btfss	status,0,c
  4704   002750  EFAC  F013         	goto	u1521
  4705   002754  EFAE  F013         	goto	u1520
  4706   002758                     u1521:
  4707   002758  EF7D  F013         	goto	l2729
  4708   00275C                     u1520:
  4709   00275C                     
  4710                           ;../dc_motor.c: 193:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4711   00275C  0E13               	movlw	19
  4712   00275E  6E1F               	movwf	(??_left_135+1)^0,c
  4713   002760  0EAC               	movlw	172
  4714   002762  6E1E               	movwf	??_left_135^0,c
  4715   002764  0E2A               	movlw	42
  4716   002766                     u2137:
  4717   002766  2EE8               	decfsz	wreg,f,c
  4718   002768  D7FE               	bra	u2137
  4719   00276A  2E1E               	decfsz	??_left_135^0,f,c
  4720   00276C  D7FC               	bra	u2137
  4721   00276E  2E1F               	decfsz	(??_left_135+1)^0,f,c
  4722   002770  D7FA               	bra	u2137
  4723   002772  0012               	return		;funcret
  4724   002774                     __end_of_left_135:
  4725                           	callstack 0
  4726                           
  4727 ;; *************** function _initUSART4 *****************
  4728 ;; Defined at:
  4729 ;;		line 5 in file "../serial.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;		None
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;		None
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  1    wreg      void 
  4736 ;; Registers used:
  4737 ;;		wreg, status,2
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4747 ;;Total ram usage:        0 bytes
  4748 ;; Hardware stack levels used: 1
  4749 ;; Hardware stack levels required when called: 1
  4750 ;; This function calls:
  4751 ;;		Nothing
  4752 ;; This function is called by:
  4753 ;;		_main
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           	psect	text23
  4758   002D5E                     __ptext23:
  4759                           	callstack 0
  4760   002D5E                     _initUSART4:
  4761                           	callstack 29
  4762   002D5E                     
  4763                           ;../serial.c: 9:     RC0PPS = 0x12;
  4764   002D5E  0E12               	movlw	18
  4765   002D60  010E               	movlb	14	; () banked
  4766   002D62  6F62               	movwf	98,b	;volatile
  4767                           
  4768                           ;../serial.c: 10:     RX4PPS = 0x11;
  4769   002D64  0E11               	movlw	17
  4770   002D66  6F15               	movwf	21,b	;volatile
  4771   002D68                     
  4772                           ; BSR set to: 14
  4773                           ;../serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  4774   002D68  97E9               	bcf	233,3,b	;volatile
  4775   002D6A                     
  4776                           ; BSR set to: 14
  4777                           ;../serial.c: 13:     TX4STAbits.BRGH = 0;
  4778   002D6A  95E8               	bcf	232,2,b	;volatile
  4779                           
  4780                           ;../serial.c: 14:     SP4BRGL = 103;
  4781   002D6C  0E67               	movlw	103
  4782   002D6E  6FE5               	movwf	229,b	;volatile
  4783                           
  4784                           ;../serial.c: 15:     SP4BRGH = 0;
  4785   002D70  0E00               	movlw	0
  4786   002D72  6FE6               	movwf	230,b	;volatile
  4787   002D74                     
  4788                           ; BSR set to: 14
  4789                           ;../serial.c: 17:     RC4STAbits.CREN = 1;
  4790   002D74  89E7               	bsf	231,4,b	;volatile
  4791   002D76                     
  4792                           ; BSR set to: 14
  4793                           ;../serial.c: 18:     TX4STAbits.TXEN = 1;
  4794   002D76  8BE8               	bsf	232,5,b	;volatile
  4795   002D78                     
  4796                           ; BSR set to: 14
  4797                           ;../serial.c: 19:     RC4STAbits.SPEN = 1;
  4798   002D78  8FE7               	bsf	231,7,b	;volatile
  4799   002D7A                     
  4800                           ; BSR set to: 14
  4801   002D7A  0012               	return		;funcret
  4802   002D7C                     __end_of_initUSART4:
  4803                           	callstack 0
  4804                           
  4805 ;; *************** function _initDCmotorsPWM *****************
  4806 ;; Defined at:
  4807 ;;		line 5 in file "../dc_motor.c"
  4808 ;; Parameters:    Size  Location     Type
  4809 ;;  PWMperiod       2    0[COMRAM] int 
  4810 ;; Auto vars:     Size  Location     Type
  4811 ;;		None
  4812 ;; Return value:  Size  Location     Type
  4813 ;;                  1    wreg      void 
  4814 ;; Registers used:
  4815 ;;		wreg, status,2
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4821 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4824 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4825 ;;Total ram usage:        2 bytes
  4826 ;; Hardware stack levels used: 1
  4827 ;; Hardware stack levels required when called: 1
  4828 ;; This function calls:
  4829 ;;		Nothing
  4830 ;; This function is called by:
  4831 ;;		_main
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           	psect	text24
  4836   002B88                     __ptext24:
  4837                           	callstack 0
  4838   002B88                     _initDCmotorsPWM:
  4839                           	callstack 29
  4840   002B88                     
  4841                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  4842   002B88  9485               	bcf	133,2,c	;volatile
  4843                           
  4844                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  4845   002B8A  9885               	bcf	133,4,c	;volatile
  4846                           
  4847                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  4848   002B8C  9E83               	bcf	131,7,c	;volatile
  4849                           
  4850                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  4851   002B8E  9C87               	bcf	135,6,c	;volatile
  4852                           
  4853                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  4854   002B90  947D               	bcf	125,2,c	;volatile
  4855                           
  4856                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  4857   002B92  987D               	bcf	125,4,c	;volatile
  4858                           
  4859                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  4860   002B94  9E7B               	bcf	123,7,c	;volatile
  4861                           
  4862                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  4863   002B96  9C7F               	bcf	127,6,c	;volatile
  4864   002B98                     
  4865                           ;../dc_motor.c: 17:     T2CONbits.CKPS=0b0011;
  4866   002B98  50BD               	movf	189,w,c	;volatile
  4867   002B9A  0B8F               	andlw	-113
  4868   002B9C  0930               	iorlw	48
  4869   002B9E  6EBD               	movwf	189,c	;volatile
  4870                           
  4871                           ;../dc_motor.c: 18:     T2HLTbits.MODE=0b00000;
  4872   002BA0  0EE0               	movlw	-32
  4873   002BA2  16BE               	andwf	190,f,c	;volatile
  4874                           
  4875                           ;../dc_motor.c: 19:     T2CLKCONbits.CS=0b0001;
  4876   002BA4  50BF               	movf	191,w,c	;volatile
  4877   002BA6  0BF0               	andlw	-16
  4878   002BA8  0901               	iorlw	1
  4879   002BAA  6EBF               	movwf	191,c	;volatile
  4880   002BAC                     
  4881                           ;../dc_motor.c: 23:     T2PR=PWMperiod;
  4882   002BAC  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4883   002BB0                     
  4884                           ;../dc_motor.c: 24:     T2CONbits.ON=1;
  4885   002BB0  8EBD               	bsf	189,7,c	;volatile
  4886                           
  4887                           ;../dc_motor.c: 26:     RE2PPS=0x0A;
  4888   002BB2  0E0A               	movlw	10
  4889   002BB4  010E               	movlb	14	; () banked
  4890   002BB6  6F74               	movwf	116,b	;volatile
  4891                           
  4892                           ;../dc_motor.c: 27:     RC7PPS=0x0B;
  4893   002BB8  0E0B               	movlw	11
  4894   002BBA  6F69               	movwf	105,b	;volatile
  4895                           
  4896                           ;../dc_motor.c: 29:     PWM6DCH=0;
  4897   002BBC  0E00               	movlw	0
  4898   002BBE  6EA3               	movwf	163,c	;volatile
  4899                           
  4900                           ;../dc_motor.c: 30:     PWM7DCH=0;
  4901   002BC0  0E00               	movlw	0
  4902   002BC2  6EA0               	movwf	160,c	;volatile
  4903   002BC4                     
  4904                           ; BSR set to: 14
  4905                           ;../dc_motor.c: 32:     PWM6CONbits.EN = 1;
  4906   002BC4  8EA4               	bsf	164,7,c	;volatile
  4907   002BC6                     
  4908                           ; BSR set to: 14
  4909                           ;../dc_motor.c: 33:     PWM7CONbits.EN = 1;
  4910   002BC6  8EA1               	bsf	161,7,c	;volatile
  4911   002BC8                     
  4912                           ; BSR set to: 14
  4913   002BC8  0012               	return		;funcret
  4914   002BCA                     __end_of_initDCmotorsPWM:
  4915                           	callstack 0
  4916                           
  4917 ;; *************** function _forward *****************
  4918 ;; Defined at:
  4919 ;;		line 77 in file "../dc_motor.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4922 ;;		 -> main@motorL(9), 
  4923 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4924 ;;		 -> main@motorR(9), 
  4925 ;; Auto vars:     Size  Location     Type
  4926 ;;  i               2   29[COMRAM] int 
  4927 ;; Return value:  Size  Location     Type
  4928 ;;                  1    wreg      void 
  4929 ;; Registers used:
  4930 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4931 ;; Tracked objects:
  4932 ;;		On entry : 0/0
  4933 ;;		On exit  : 0/0
  4934 ;;		Unchanged: 0/0
  4935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4936 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4937 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4939 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4940 ;;Total ram usage:        6 bytes
  4941 ;; Hardware stack levels used: 1
  4942 ;; Hardware stack levels required when called: 3
  4943 ;; This function calls:
  4944 ;;		_setMotorPWM
  4945 ;; This function is called by:
  4946 ;;		_main
  4947 ;;		_motor_action_return
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           	psect	text25
  4952   002802                     __ptext25:
  4953                           	callstack 0
  4954   002802                     _forward:
  4955                           	callstack 27
  4956   002802                     
  4957                           ;../dc_motor.c: 77: void forward(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c
      +                          : 78: {;../dc_motor.c: 79:     mL->direction = 1;
  4958   002802  EE20 F001          	lfsr	2,1
  4959   002806  501A               	movf	forward@mL^0,w,c
  4960   002808  26D9               	addwf	fsr2l,f,c
  4961   00280A  501B               	movf	(forward@mL+1)^0,w,c
  4962   00280C  22DA               	addwfc	fsr2h,f,c
  4963   00280E  0E01               	movlw	1
  4964   002810  6EDF               	movwf	indf2,c
  4965                           
  4966                           ;../dc_motor.c: 80:     mR->direction = 1;
  4967   002812  EE20 F001          	lfsr	2,1
  4968   002816  501C               	movf	forward@mR^0,w,c
  4969   002818  26D9               	addwf	fsr2l,f,c
  4970   00281A  501D               	movf	(forward@mR+1)^0,w,c
  4971   00281C  22DA               	addwfc	fsr2h,f,c
  4972   00281E  0E01               	movlw	1
  4973   002820  6EDF               	movwf	indf2,c
  4974   002822                     
  4975                           ;../dc_motor.c: 81:     for (int i=0;i<31;i=i+2)
  4976   002822  0E00               	movlw	0
  4977   002824  6E1F               	movwf	(forward@i+1)^0,c
  4978   002826  0E00               	movlw	0
  4979   002828  6E1E               	movwf	forward@i^0,c
  4980   00282A                     l2945:
  4981                           
  4982                           ;../dc_motor.c: 82:     {;../dc_motor.c: 83:         mL->power = i;
  4983   00282A  C01A  FFD9         	movff	forward@mL,fsr2l
  4984   00282E  C01B  FFDA         	movff	forward@mL+1,fsr2h
  4985   002832  C01E  FFDF         	movff	forward@i,indf2
  4986                           
  4987                           ;../dc_motor.c: 84:         mR->power = i;
  4988   002836  C01C  FFD9         	movff	forward@mR,fsr2l
  4989   00283A  C01D  FFDA         	movff	forward@mR+1,fsr2h
  4990   00283E  C01E  FFDF         	movff	forward@i,indf2
  4991   002842                     
  4992                           ;../dc_motor.c: 85:         setMotorPWM(mL);
  4993   002842  C01A  F00F         	movff	forward@mL,setMotorPWM@m
  4994   002846  C01B  F010         	movff	forward@mL+1,setMotorPWM@m+1
  4995   00284A  ECF9  F00C         	call	_setMotorPWM	;wreg free
  4996   00284E                     
  4997                           ;../dc_motor.c: 86:         setMotorPWM(mR);
  4998   00284E  C01C  F00F         	movff	forward@mR,setMotorPWM@m
  4999   002852  C01D  F010         	movff	forward@mR+1,setMotorPWM@m+1
  5000   002856  ECF9  F00C         	call	_setMotorPWM	;wreg free
  5001   00285A                     
  5002                           ;../dc_motor.c: 87:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  5003   00285A  0E6A               	movlw	106
  5004   00285C                     u2147:
  5005   00285C  2EE8               	decfsz	wreg,f,c
  5006   00285E  D7FE               	bra	u2147
  5007   002860  D000               	nop2	
  5008   002862                     
  5009                           ;../dc_motor.c: 88:     }
  5010   002862  0E02               	movlw	2
  5011   002864  241E               	addwf	forward@i^0,w,c
  5012   002866  6E1E               	movwf	forward@i^0,c
  5013   002868  0E00               	movlw	0
  5014   00286A  201F               	addwfc	(forward@i+1)^0,w,c
  5015   00286C  6E1F               	movwf	(forward@i+1)^0,c
  5016   00286E  BE1F               	btfsc	(forward@i+1)^0,7,c
  5017   002870  EF43  F014         	goto	u1751
  5018   002874  501F               	movf	(forward@i+1)^0,w,c
  5019   002876  E109               	bnz	u1750
  5020   002878  0E1F               	movlw	31
  5021   00287A  5C1E               	subwf	forward@i^0,w,c
  5022   00287C  A0D8               	btfss	status,0,c
  5023   00287E  EF43  F014         	goto	u1751
  5024   002882  EF45  F014         	goto	u1750
  5025   002886                     u1751:
  5026   002886  EF15  F014         	goto	l2945
  5027   00288A                     u1750:
  5028   00288A  0012               	return		;funcret
  5029   00288C                     __end_of_forward:
  5030                           	callstack 0
  5031                           
  5032 ;; *************** function _setMotorPWM *****************
  5033 ;; Defined at:
  5034 ;;		line 38 in file "../dc_motor.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;  m               2   14[COMRAM] PTR struct DC_motor
  5037 ;;		 -> main@motorR(9), main@motorL(9), 
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;  PWMduty         2   23[COMRAM] int 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5049 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5050 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5051 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5052 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5053 ;;Total ram usage:       11 bytes
  5054 ;; Hardware stack levels used: 1
  5055 ;; Hardware stack levels required when called: 2
  5056 ;; This function calls:
  5057 ;;		___awdiv
  5058 ;;		___wmul
  5059 ;; This function is called by:
  5060 ;;		_main
  5061 ;;		_stop
  5062 ;;		_forward
  5063 ;;		_reverse_fromcard
  5064 ;;		_reverse_onesquare
  5065 ;;		_right_90
  5066 ;;		_left_90
  5067 ;;		_spin_180
  5068 ;;		_right_135
  5069 ;;		_left_135
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           	psect	text26
  5074   0019F2                     __ptext26:
  5075                           	callstack 0
  5076   0019F2                     _setMotorPWM:
  5077                           	callstack 27
  5078   0019F2                     
  5079                           ;../dc_motor.c: 38: void setMotorPWM(struct DC_motor *m);../dc_motor.c: 39: {;../dc_moto
      +                          r.c: 40:  int PWMduty;;../dc_motor.c: 42:  if (m->direction){
  5080   0019F2  EE20 F001          	lfsr	2,1
  5081   0019F6  500F               	movf	setMotorPWM@m^0,w,c
  5082   0019F8  26D9               	addwf	fsr2l,f,c
  5083   0019FA  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5084   0019FC  22DA               	addwfc	fsr2h,f,c
  5085   0019FE  50DF               	movf	indf2,w,c
  5086   001A00  B4D8               	btfsc	status,2,c
  5087   001A02  EF05  F00D         	goto	u1381
  5088   001A06  EF07  F00D         	goto	u1380
  5089   001A0A                     u1381:
  5090   001A0A  EF38  F00D         	goto	l2483
  5091   001A0E                     u1380:
  5092   001A0E                     
  5093                           ;../dc_motor.c: 44:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  5094   001A0E  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  5095   001A12  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5096   001A16  50DF               	movf	indf2,w,c
  5097   001A18  6E11               	movwf	??_setMotorPWM^0,c
  5098   001A1A  5011               	movf	??_setMotorPWM^0,w,c
  5099   001A1C  6E01               	movwf	___wmul@multiplier^0,c
  5100   001A1E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5101   001A20  EE20 F007          	lfsr	2,7
  5102   001A24  500F               	movf	setMotorPWM@m^0,w,c
  5103   001A26  26D9               	addwf	fsr2l,f,c
  5104   001A28  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5105   001A2A  22DA               	addwfc	fsr2h,f,c
  5106   001A2C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5107   001A30  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5108   001A34  EC7C  F016         	call	___wmul	;wreg free
  5109   001A38  C001  F007         	movff	?___wmul,___awdiv@dividend
  5110   001A3C  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  5111   001A40  0E00               	movlw	0
  5112   001A42  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  5113   001A44  0E64               	movlw	100
  5114   001A46  6E09               	movwf	___awdiv@divisor^0,c
  5115   001A48  EC6D  F010         	call	___awdiv	;wreg free
  5116   001A4C  EE20 F007          	lfsr	2,7
  5117   001A50  500F               	movf	setMotorPWM@m^0,w,c
  5118   001A52  26D9               	addwf	fsr2l,f,c
  5119   001A54  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5120   001A56  22DA               	addwfc	fsr2h,f,c
  5121   001A58  CFDE F012          	movff	postinc2,??_setMotorPWM+1
  5122   001A5C  CFDD F013          	movff	postdec2,??_setMotorPWM+2
  5123   001A60  5007               	movf	?___awdiv^0,w,c
  5124   001A62  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  5125   001A64  6E18               	movwf	setMotorPWM@PWMduty^0,c
  5126   001A66  5008               	movf	(?___awdiv+1)^0,w,c
  5127   001A68  5813               	subwfb	(??_setMotorPWM+2)^0,w,c
  5128   001A6A  6E19               	movwf	(setMotorPWM@PWMduty+1)^0,c
  5129                           
  5130                           ;../dc_motor.c: 45:  }
  5131   001A6C  EF5B  F00D         	goto	l2485
  5132   001A70                     l2483:
  5133                           
  5134                           ;../dc_motor.c: 48:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  5135   001A70  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  5136   001A74  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5137   001A78  50DF               	movf	indf2,w,c
  5138   001A7A  6E11               	movwf	??_setMotorPWM^0,c
  5139   001A7C  5011               	movf	??_setMotorPWM^0,w,c
  5140   001A7E  6E01               	movwf	___wmul@multiplier^0,c
  5141   001A80  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5142   001A82  EE20 F007          	lfsr	2,7
  5143   001A86  500F               	movf	setMotorPWM@m^0,w,c
  5144   001A88  26D9               	addwf	fsr2l,f,c
  5145   001A8A  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5146   001A8C  22DA               	addwfc	fsr2h,f,c
  5147   001A8E  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5148   001A92  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5149   001A96  EC7C  F016         	call	___wmul	;wreg free
  5150   001A9A  C001  F007         	movff	?___wmul,___awdiv@dividend
  5151   001A9E  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  5152   001AA2  0E00               	movlw	0
  5153   001AA4  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  5154   001AA6  0E64               	movlw	100
  5155   001AA8  6E09               	movwf	___awdiv@divisor^0,c
  5156   001AAA  EC6D  F010         	call	___awdiv	;wreg free
  5157   001AAE  C007  F018         	movff	?___awdiv,setMotorPWM@PWMduty
  5158   001AB2  C008  F019         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  5159   001AB6                     l2485:
  5160                           
  5161                           ;../dc_motor.c: 51:  *(m->dutyHighByte) = PWMduty;
  5162   001AB6  EE20 F002          	lfsr	2,2
  5163   001ABA  500F               	movf	setMotorPWM@m^0,w,c
  5164   001ABC  26D9               	addwf	fsr2l,f,c
  5165   001ABE  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5166   001AC0  22DA               	addwfc	fsr2h,f,c
  5167   001AC2  CFDE F011          	movff	postinc2,??_setMotorPWM
  5168   001AC6  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5169   001ACA  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5170   001ACE  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5171   001AD2  C018  FFDF         	movff	setMotorPWM@PWMduty,indf2
  5172   001AD6                     
  5173                           ;../dc_motor.c: 53:  if (m->direction){
  5174   001AD6  EE20 F001          	lfsr	2,1
  5175   001ADA  500F               	movf	setMotorPWM@m^0,w,c
  5176   001ADC  26D9               	addwf	fsr2l,f,c
  5177   001ADE  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5178   001AE0  22DA               	addwfc	fsr2h,f,c
  5179   001AE2  50DF               	movf	indf2,w,c
  5180   001AE4  B4D8               	btfsc	status,2,c
  5181   001AE6  EF77  F00D         	goto	u1391
  5182   001AEA  EF79  F00D         	goto	u1390
  5183   001AEE                     u1391:
  5184   001AEE  EFAE  F00D         	goto	l2491
  5185   001AF2                     u1390:
  5186   001AF2                     
  5187                           ;../dc_motor.c: 54:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  5188   001AF2  EE20 F004          	lfsr	2,4
  5189   001AF6  500F               	movf	setMotorPWM@m^0,w,c
  5190   001AF8  26D9               	addwf	fsr2l,f,c
  5191   001AFA  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5192   001AFC  22DA               	addwfc	fsr2h,f,c
  5193   001AFE  CFDE F011          	movff	postinc2,??_setMotorPWM
  5194   001B02  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5195   001B06  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5196   001B0A  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5197   001B0E  EE10 F004          	lfsr	1,4
  5198   001B12  500F               	movf	setMotorPWM@m^0,w,c
  5199   001B14  26E1               	addwf	fsr1l,f,c
  5200   001B16  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5201   001B18  22E2               	addwfc	fsr1h,f,c
  5202   001B1A  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  5203   001B1E  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  5204   001B22  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  5205   001B26  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  5206   001B2A  50E7               	movf	indf1,w,c
  5207   001B2C  6E15               	movwf	(??_setMotorPWM+4)^0,c
  5208   001B2E  EE10 F006          	lfsr	1,6
  5209   001B32  500F               	movf	setMotorPWM@m^0,w,c
  5210   001B34  26E1               	addwf	fsr1l,f,c
  5211   001B36  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5212   001B38  22E2               	addwfc	fsr1h,f,c
  5213   001B3A  50E7               	movf	indf1,w,c
  5214   001B3C  6E16               	movwf	(??_setMotorPWM+5)^0,c
  5215   001B3E  0E01               	movlw	1
  5216   001B40  6E17               	movwf	(??_setMotorPWM+6)^0,c
  5217   001B42  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  5218   001B44  EFA6  F00D         	goto	u1404
  5219   001B48                     u1405:
  5220   001B48  90D8               	bcf	status,0,c
  5221   001B4A  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  5222   001B4C                     u1404:
  5223   001B4C  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  5224   001B4E  EFA4  F00D         	goto	u1405
  5225   001B52  5017               	movf	(??_setMotorPWM+6)^0,w,c
  5226   001B54  1015               	iorwf	(??_setMotorPWM+4)^0,w,c
  5227   001B56  6EDF               	movwf	indf2,c
  5228                           
  5229                           ;../dc_motor.c: 55:  } else {
  5230   001B58  EFE2  F00D         	goto	l268
  5231   001B5C                     l2491:
  5232                           
  5233                           ;../dc_motor.c: 56:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  5234   001B5C  EE20 F004          	lfsr	2,4
  5235   001B60  500F               	movf	setMotorPWM@m^0,w,c
  5236   001B62  26D9               	addwf	fsr2l,f,c
  5237   001B64  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5238   001B66  22DA               	addwfc	fsr2h,f,c
  5239   001B68  CFDE F011          	movff	postinc2,??_setMotorPWM
  5240   001B6C  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5241   001B70  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5242   001B74  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5243   001B78  EE10 F004          	lfsr	1,4
  5244   001B7C  500F               	movf	setMotorPWM@m^0,w,c
  5245   001B7E  26E1               	addwf	fsr1l,f,c
  5246   001B80  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5247   001B82  22E2               	addwfc	fsr1h,f,c
  5248   001B84  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  5249   001B88  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  5250   001B8C  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  5251   001B90  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  5252   001B94  50E7               	movf	indf1,w,c
  5253   001B96  6E15               	movwf	(??_setMotorPWM+4)^0,c
  5254   001B98  EE10 F006          	lfsr	1,6
  5255   001B9C  500F               	movf	setMotorPWM@m^0,w,c
  5256   001B9E  26E1               	addwf	fsr1l,f,c
  5257   001BA0  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5258   001BA2  22E2               	addwfc	fsr1h,f,c
  5259   001BA4  50E7               	movf	indf1,w,c
  5260   001BA6  6E16               	movwf	(??_setMotorPWM+5)^0,c
  5261   001BA8  0E01               	movlw	1
  5262   001BAA  6E17               	movwf	(??_setMotorPWM+6)^0,c
  5263   001BAC  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  5264   001BAE  EFDB  F00D         	goto	u1414
  5265   001BB2                     u1415:
  5266   001BB2  90D8               	bcf	status,0,c
  5267   001BB4  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  5268   001BB6                     u1414:
  5269   001BB6  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  5270   001BB8  EFD9  F00D         	goto	u1415
  5271   001BBC  5017               	movf	(??_setMotorPWM+6)^0,w,c
  5272   001BBE  0AFF               	xorlw	255
  5273   001BC0  1415               	andwf	(??_setMotorPWM+4)^0,w,c
  5274   001BC2  6EDF               	movwf	indf2,c
  5275   001BC4                     l268:
  5276   001BC4  0012               	return		;funcret
  5277   001BC6                     __end_of_setMotorPWM:
  5278                           	callstack 0
  5279                           
  5280 ;; *************** function ___wmul *****************
  5281 ;; Defined at:
  5282 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5283 ;; Parameters:    Size  Location     Type
  5284 ;;  multiplier      2    0[COMRAM] unsigned int 
  5285 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;  product         2    4[COMRAM] unsigned int 
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  2    0[COMRAM] unsigned int 
  5290 ;; Registers used:
  5291 ;;		wreg, status,2, status,0, prodl, prodh
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5297 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5298 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5300 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5301 ;;Total ram usage:        6 bytes
  5302 ;; Hardware stack levels used: 1
  5303 ;; Hardware stack levels required when called: 1
  5304 ;; This function calls:
  5305 ;;		Nothing
  5306 ;; This function is called by:
  5307 ;;		_setMotorPWM
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           	psect	text27
  5312   002CF8                     __ptext27:
  5313                           	callstack 0
  5314   002CF8                     ___wmul:
  5315                           	callstack 27
  5316   002CF8  5001               	movf	___wmul@multiplier^0,w,c
  5317   002CFA  0203               	mulwf	___wmul@multiplicand^0,c
  5318   002CFC  CFF3 F005          	movff	prodl,___wmul@product
  5319   002D00  CFF4 F006          	movff	prodh,___wmul@product+1
  5320   002D04  5001               	movf	___wmul@multiplier^0,w,c
  5321   002D06  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5322   002D08  50F3               	movf	243,w,c
  5323   002D0A  2606               	addwf	(___wmul@product+1)^0,f,c
  5324   002D0C  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5325   002D0E  0203               	mulwf	___wmul@multiplicand^0,c
  5326   002D10  50F3               	movf	243,w,c
  5327   002D12  2606               	addwf	(___wmul@product+1)^0,f,c
  5328   002D14  C005  F001         	movff	___wmul@product,?___wmul
  5329   002D18  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5330   002D1C  0012               	return		;funcret
  5331   002D1E                     __end_of___wmul:
  5332                           	callstack 0
  5333                           
  5334 ;; *************** function ___awdiv *****************
  5335 ;; Defined at:
  5336 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  dividend        2    6[COMRAM] int 
  5339 ;;  divisor         2    8[COMRAM] int 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  quotient        2   12[COMRAM] int 
  5342 ;;  sign            1   11[COMRAM] unsigned char 
  5343 ;;  counter         1   10[COMRAM] unsigned char 
  5344 ;; Return value:  Size  Location     Type
  5345 ;;                  2    6[COMRAM] int 
  5346 ;; Registers used:
  5347 ;;		wreg, status,2, status,0
  5348 ;; Tracked objects:
  5349 ;;		On entry : 0/0
  5350 ;;		On exit  : 0/0
  5351 ;;		Unchanged: 0/0
  5352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5354 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5356 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5357 ;;Total ram usage:        8 bytes
  5358 ;; Hardware stack levels used: 1
  5359 ;; Hardware stack levels required when called: 1
  5360 ;; This function calls:
  5361 ;;		Nothing
  5362 ;; This function is called by:
  5363 ;;		_setMotorPWM
  5364 ;; This function uses a non-reentrant model
  5365 ;;
  5366                           
  5367                           	psect	text28
  5368   0020DA                     __ptext28:
  5369                           	callstack 0
  5370   0020DA                     ___awdiv:
  5371                           	callstack 27
  5372   0020DA  0E00               	movlw	0
  5373   0020DC  6E0C               	movwf	___awdiv@sign^0,c
  5374   0020DE  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
  5375   0020E0  EF76  F010         	goto	u1200
  5376   0020E4  EF74  F010         	goto	u1201
  5377   0020E8                     u1201:
  5378   0020E8  EF7C  F010         	goto	l2361
  5379   0020EC                     u1200:
  5380   0020EC  6C09               	negf	___awdiv@divisor^0,c
  5381   0020EE  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  5382   0020F0  B0D8               	btfsc	status,0,c
  5383   0020F2  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  5384   0020F4  0E01               	movlw	1
  5385   0020F6  6E0C               	movwf	___awdiv@sign^0,c
  5386   0020F8                     l2361:
  5387   0020F8  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
  5388   0020FA  EF83  F010         	goto	u1210
  5389   0020FE  EF81  F010         	goto	u1211
  5390   002102                     u1211:
  5391   002102  EF89  F010         	goto	l2367
  5392   002106                     u1210:
  5393   002106  6C07               	negf	___awdiv@dividend^0,c
  5394   002108  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  5395   00210A  B0D8               	btfsc	status,0,c
  5396   00210C  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  5397   00210E  0E01               	movlw	1
  5398   002110  1A0C               	xorwf	___awdiv@sign^0,f,c
  5399   002112                     l2367:
  5400   002112  0E00               	movlw	0
  5401   002114  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  5402   002116  0E00               	movlw	0
  5403   002118  6E0D               	movwf	___awdiv@quotient^0,c
  5404   00211A  5009               	movf	___awdiv@divisor^0,w,c
  5405   00211C  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  5406   00211E  B4D8               	btfsc	status,2,c
  5407   002120  EF94  F010         	goto	u1221
  5408   002124  EF96  F010         	goto	u1220
  5409   002128                     u1221:
  5410   002128  EFBE  F010         	goto	l2389
  5411   00212C                     u1220:
  5412   00212C  0E01               	movlw	1
  5413   00212E  6E0B               	movwf	___awdiv@counter^0,c
  5414   002130  EF9E  F010         	goto	l2375
  5415   002134                     l2373:
  5416   002134  90D8               	bcf	status,0,c
  5417   002136  3609               	rlcf	___awdiv@divisor^0,f,c
  5418   002138  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  5419   00213A  2A0B               	incf	___awdiv@counter^0,f,c
  5420   00213C                     l2375:
  5421   00213C  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  5422   00213E  EFA3  F010         	goto	u1231
  5423   002142  EFA5  F010         	goto	u1230
  5424   002146                     u1231:
  5425   002146  EF9A  F010         	goto	l2373
  5426   00214A                     u1230:
  5427   00214A                     l2377:
  5428   00214A  90D8               	bcf	status,0,c
  5429   00214C  360D               	rlcf	___awdiv@quotient^0,f,c
  5430   00214E  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  5431   002150  5009               	movf	___awdiv@divisor^0,w,c
  5432   002152  5C07               	subwf	___awdiv@dividend^0,w,c
  5433   002154  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5434   002156  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  5435   002158  A0D8               	btfss	status,0,c
  5436   00215A  EFB1  F010         	goto	u1241
  5437   00215E  EFB3  F010         	goto	u1240
  5438   002162                     u1241:
  5439   002162  EFB8  F010         	goto	l2385
  5440   002166                     u1240:
  5441   002166  5009               	movf	___awdiv@divisor^0,w,c
  5442   002168  5E07               	subwf	___awdiv@dividend^0,f,c
  5443   00216A  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5444   00216C  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  5445   00216E  800D               	bsf	___awdiv@quotient^0,0,c
  5446   002170                     l2385:
  5447   002170  90D8               	bcf	status,0,c
  5448   002172  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  5449   002174  3209               	rrcf	___awdiv@divisor^0,f,c
  5450   002176  2E0B               	decfsz	___awdiv@counter^0,f,c
  5451   002178  EFA5  F010         	goto	l2377
  5452   00217C                     l2389:
  5453   00217C  500C               	movf	___awdiv@sign^0,w,c
  5454   00217E  B4D8               	btfsc	status,2,c
  5455   002180  EFC4  F010         	goto	u1251
  5456   002184  EFC6  F010         	goto	u1250
  5457   002188                     u1251:
  5458   002188  EFCA  F010         	goto	l2393
  5459   00218C                     u1250:
  5460   00218C  6C0D               	negf	___awdiv@quotient^0,c
  5461   00218E  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  5462   002190  B0D8               	btfsc	status,0,c
  5463   002192  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  5464   002194                     l2393:
  5465   002194  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  5466   002198  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  5467   00219C  0012               	return		;funcret
  5468   00219E                     __end_of___awdiv:
  5469                           	callstack 0
  5470                           
  5471 ;; *************** function _color_read *****************
  5472 ;; Defined at:
  5473 ;;		line 111 in file "../color.c"
  5474 ;; Parameters:    Size  Location     Type
  5475 ;;  rgb             2   11[COMRAM] PTR struct RGB_val
  5476 ;;		 -> main@RGB_recorded(8), main@RGB_calibrated(8), 
  5477 ;; Auto vars:     Size  Location     Type
  5478 ;;		None
  5479 ;; Return value:  Size  Location     Type
  5480 ;;                  1    wreg      void 
  5481 ;; Registers used:
  5482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5483 ;; Tracked objects:
  5484 ;;		On entry : 0/0
  5485 ;;		On exit  : 0/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5488 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5490 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5491 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5492 ;;Total ram usage:        4 bytes
  5493 ;; Hardware stack levels used: 1
  5494 ;; Hardware stack levels required when called: 4
  5495 ;; This function calls:
  5496 ;;		_color_read_Blue
  5497 ;;		_color_read_Green
  5498 ;;		_color_read_Luminosity
  5499 ;;		_color_read_Red
  5500 ;; This function is called by:
  5501 ;;		_main
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           	psect	text29
  5506   00225C                     __ptext29:
  5507                           	callstack 0
  5508   00225C                     _color_read:
  5509                           	callstack 26
  5510   00225C                     
  5511                           ;../color.c: 111: void color_read(struct RGB_val *rgb);../color.c: 112: {;../color.c: 11
      +                          3:     rgb->L = color_read_Luminosity();
  5512   00225C  EC2A  F015         	call	_color_read_Luminosity	;wreg free
  5513   002260  C00C  FFD9         	movff	color_read@rgb,fsr2l
  5514   002264  C00D  FFDA         	movff	color_read@rgb+1,fsr2h
  5515   002268  C005  FFDE         	movff	?_color_read_Luminosity,postinc2
  5516   00226C  C006  FFDD         	movff	?_color_read_Luminosity+1,postdec2
  5517   002270                     
  5518                           ;../color.c: 114:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5519   002270  0E09               	movlw	9
  5520   002272  6E0F               	movwf	(??_color_read+1)^0,c
  5521   002274  0E1E               	movlw	30
  5522   002276  6E0E               	movwf	??_color_read^0,c
  5523   002278  0EE4               	movlw	228
  5524   00227A                     u2157:
  5525   00227A  2EE8               	decfsz	wreg,f,c
  5526   00227C  D7FE               	bra	u2157
  5527   00227E  2E0E               	decfsz	??_color_read^0,f,c
  5528   002280  D7FC               	bra	u2157
  5529   002282  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5530   002284  D7FA               	bra	u2157
  5531   002286  D000               	nop2	
  5532   002288                     
  5533                           ;../color.c: 115:     rgb->R = color_read_Red();
  5534   002288  EC02  F015         	call	_color_read_Red	;wreg free
  5535   00228C  EE20 F002          	lfsr	2,2
  5536   002290  500C               	movf	color_read@rgb^0,w,c
  5537   002292  26D9               	addwf	fsr2l,f,c
  5538   002294  500D               	movf	(color_read@rgb+1)^0,w,c
  5539   002296  22DA               	addwfc	fsr2h,f,c
  5540   002298  C005  FFDE         	movff	?_color_read_Red,postinc2
  5541   00229C  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  5542                           
  5543                           ;../color.c: 116:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5544   0022A0  0E09               	movlw	9
  5545   0022A2  6E0F               	movwf	(??_color_read+1)^0,c
  5546   0022A4  0E1E               	movlw	30
  5547   0022A6  6E0E               	movwf	??_color_read^0,c
  5548   0022A8  0EE4               	movlw	228
  5549   0022AA                     u2167:
  5550   0022AA  2EE8               	decfsz	wreg,f,c
  5551   0022AC  D7FE               	bra	u2167
  5552   0022AE  2E0E               	decfsz	??_color_read^0,f,c
  5553   0022B0  D7FC               	bra	u2167
  5554   0022B2  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5555   0022B4  D7FA               	bra	u2167
  5556   0022B6  D000               	nop2	
  5557   0022B8                     
  5558                           ;../color.c: 117:     rgb->G = color_read_Green();
  5559   0022B8  EC52  F015         	call	_color_read_Green	;wreg free
  5560   0022BC  EE20 F004          	lfsr	2,4
  5561   0022C0  500C               	movf	color_read@rgb^0,w,c
  5562   0022C2  26D9               	addwf	fsr2l,f,c
  5563   0022C4  500D               	movf	(color_read@rgb+1)^0,w,c
  5564   0022C6  22DA               	addwfc	fsr2h,f,c
  5565   0022C8  C005  FFDE         	movff	?_color_read_Green,postinc2
  5566   0022CC  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  5567   0022D0                     
  5568                           ;../color.c: 118:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5569   0022D0  0E09               	movlw	9
  5570   0022D2  6E0F               	movwf	(??_color_read+1)^0,c
  5571   0022D4  0E1E               	movlw	30
  5572   0022D6  6E0E               	movwf	??_color_read^0,c
  5573   0022D8  0EE4               	movlw	228
  5574   0022DA                     u2177:
  5575   0022DA  2EE8               	decfsz	wreg,f,c
  5576   0022DC  D7FE               	bra	u2177
  5577   0022DE  2E0E               	decfsz	??_color_read^0,f,c
  5578   0022E0  D7FC               	bra	u2177
  5579   0022E2  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5580   0022E4  D7FA               	bra	u2177
  5581   0022E6  D000               	nop2	
  5582                           
  5583                           ;../color.c: 119:     rgb->B = color_read_Blue();
  5584   0022E8  EC7A  F015         	call	_color_read_Blue	;wreg free
  5585   0022EC  EE20 F006          	lfsr	2,6
  5586   0022F0  500C               	movf	color_read@rgb^0,w,c
  5587   0022F2  26D9               	addwf	fsr2l,f,c
  5588   0022F4  500D               	movf	(color_read@rgb+1)^0,w,c
  5589   0022F6  22DA               	addwfc	fsr2h,f,c
  5590   0022F8  C005  FFDE         	movff	?_color_read_Blue,postinc2
  5591   0022FC  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  5592   002300  0012               	return		;funcret
  5593   002302                     __end_of_color_read:
  5594                           	callstack 0
  5595                           
  5596 ;; *************** function _color_read_Red *****************
  5597 ;; Defined at:
  5598 ;;		line 69 in file "../color.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;		None
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;  tmp             2    9[COMRAM] unsigned int 
  5603 ;; Return value:  Size  Location     Type
  5604 ;;                  2    4[COMRAM] unsigned int 
  5605 ;; Registers used:
  5606 ;;		wreg, status,2, status,0, cstack
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5614 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5615 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5616 ;;Total ram usage:        7 bytes
  5617 ;; Hardware stack levels used: 1
  5618 ;; Hardware stack levels required when called: 3
  5619 ;; This function calls:
  5620 ;;		_I2C_2_Master_Read
  5621 ;;		_I2C_2_Master_RepStart
  5622 ;;		_I2C_2_Master_Start
  5623 ;;		_I2C_2_Master_Stop
  5624 ;;		_I2C_2_Master_Write
  5625 ;; This function is called by:
  5626 ;;		_color_read
  5627 ;; This function uses a non-reentrant model
  5628 ;;
  5629                           
  5630                           	psect	text30
  5631   002A04                     __ptext30:
  5632                           	callstack 0
  5633   002A04                     _color_read_Red:
  5634                           	callstack 26
  5635   002A04                     
  5636                           ;../color.c: 71:  unsigned int tmp;;../color.c: 72:  I2C_2_Master_Start();
  5637   002A04  ECE5  F016         	call	_I2C_2_Master_Start	;wreg free
  5638                           
  5639                           ;../color.c: 73:  I2C_2_Master_Write(0x52 | 0x00);
  5640   002A08  0E52               	movlw	82
  5641   002A0A  ECD5  F016         	call	_I2C_2_Master_Write
  5642                           
  5643                           ;../color.c: 74:  I2C_2_Master_Write(0xA0 | 0x16);
  5644   002A0E  0EB6               	movlw	182
  5645   002A10  ECD5  F016         	call	_I2C_2_Master_Write
  5646                           
  5647                           ;../color.c: 75:  I2C_2_Master_RepStart();
  5648   002A14  ECDB  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5649                           
  5650                           ;../color.c: 76:  I2C_2_Master_Write(0x52 | 0x01);
  5651   002A18  0E53               	movlw	83
  5652   002A1A  ECD5  F016         	call	_I2C_2_Master_Write
  5653                           
  5654                           ;../color.c: 77:  tmp=I2C_2_Master_Read(1);
  5655   002A1E  0E01               	movlw	1
  5656   002A20  ECE5  F015         	call	_I2C_2_Master_Read
  5657   002A24  6E07               	movwf	??_color_read_Red^0,c
  5658   002A26  5007               	movf	??_color_read_Red^0,w,c
  5659   002A28  6E0A               	movwf	color_read_Red@tmp^0,c
  5660   002A2A  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  5661                           
  5662                           ;../color.c: 78:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5663   002A2C  0E00               	movlw	0
  5664   002A2E  ECE5  F015         	call	_I2C_2_Master_Read
  5665   002A32  6E07               	movwf	??_color_read_Red^0,c
  5666   002A34  5007               	movf	??_color_read_Red^0,w,c
  5667   002A36  6E09               	movwf	(??_color_read_Red+2)^0,c
  5668   002A38  6A08               	clrf	(??_color_read_Red+1)^0,c
  5669   002A3A  500A               	movf	color_read_Red@tmp^0,w,c
  5670   002A3C  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  5671   002A3E  6E0A               	movwf	color_read_Red@tmp^0,c
  5672   002A40  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  5673   002A42  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  5674   002A44  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5675                           
  5676                           ;../color.c: 79:  I2C_2_Master_Stop();
  5677   002A46  ECE0  F016         	call	_I2C_2_Master_Stop	;wreg free
  5678   002A4A                     
  5679                           ;../color.c: 80:  return tmp;
  5680   002A4A  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5681   002A4E  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5682   002A52  0012               	return		;funcret
  5683   002A54                     __end_of_color_read_Red:
  5684                           	callstack 0
  5685                           
  5686 ;; *************** function _color_read_Luminosity *****************
  5687 ;; Defined at:
  5688 ;;		line 55 in file "../color.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;		None
  5691 ;; Auto vars:     Size  Location     Type
  5692 ;;  tmp             2    9[COMRAM] unsigned int 
  5693 ;; Return value:  Size  Location     Type
  5694 ;;                  2    4[COMRAM] unsigned int 
  5695 ;; Registers used:
  5696 ;;		wreg, status,2, status,0, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 0/0
  5699 ;;		On exit  : 0/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5702 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5703 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5704 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5705 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5706 ;;Total ram usage:        7 bytes
  5707 ;; Hardware stack levels used: 1
  5708 ;; Hardware stack levels required when called: 3
  5709 ;; This function calls:
  5710 ;;		_I2C_2_Master_Read
  5711 ;;		_I2C_2_Master_RepStart
  5712 ;;		_I2C_2_Master_Start
  5713 ;;		_I2C_2_Master_Stop
  5714 ;;		_I2C_2_Master_Write
  5715 ;; This function is called by:
  5716 ;;		_color_read
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text31
  5721   002A54                     __ptext31:
  5722                           	callstack 0
  5723   002A54                     _color_read_Luminosity:
  5724                           	callstack 26
  5725   002A54                     
  5726                           ;../color.c: 57:  unsigned int tmp;;../color.c: 58:  I2C_2_Master_Start();
  5727   002A54  ECE5  F016         	call	_I2C_2_Master_Start	;wreg free
  5728                           
  5729                           ;../color.c: 59:  I2C_2_Master_Write(0x52 | 0x00);
  5730   002A58  0E52               	movlw	82
  5731   002A5A  ECD5  F016         	call	_I2C_2_Master_Write
  5732                           
  5733                           ;../color.c: 60:  I2C_2_Master_Write(0xA0 | 0x14);
  5734   002A5E  0EB4               	movlw	180
  5735   002A60  ECD5  F016         	call	_I2C_2_Master_Write
  5736                           
  5737                           ;../color.c: 61:  I2C_2_Master_RepStart();
  5738   002A64  ECDB  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5739                           
  5740                           ;../color.c: 62:  I2C_2_Master_Write(0x52 | 0x01);
  5741   002A68  0E53               	movlw	83
  5742   002A6A  ECD5  F016         	call	_I2C_2_Master_Write
  5743                           
  5744                           ;../color.c: 63:  tmp=I2C_2_Master_Read(1);
  5745   002A6E  0E01               	movlw	1
  5746   002A70  ECE5  F015         	call	_I2C_2_Master_Read
  5747   002A74  6E07               	movwf	??_color_read_Luminosity^0,c
  5748   002A76  5007               	movf	??_color_read_Luminosity^0,w,c
  5749   002A78  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5750   002A7A  6A0B               	clrf	(color_read_Luminosity@tmp+1)^0,c
  5751                           
  5752                           ;../color.c: 64:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5753   002A7C  0E00               	movlw	0
  5754   002A7E  ECE5  F015         	call	_I2C_2_Master_Read
  5755   002A82  6E07               	movwf	??_color_read_Luminosity^0,c
  5756   002A84  5007               	movf	??_color_read_Luminosity^0,w,c
  5757   002A86  6E09               	movwf	(??_color_read_Luminosity+2)^0,c
  5758   002A88  6A08               	clrf	(??_color_read_Luminosity+1)^0,c
  5759   002A8A  500A               	movf	color_read_Luminosity@tmp^0,w,c
  5760   002A8C  1008               	iorwf	(??_color_read_Luminosity+1)^0,w,c
  5761   002A8E  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5762   002A90  500B               	movf	(color_read_Luminosity@tmp+1)^0,w,c
  5763   002A92  1009               	iorwf	(??_color_read_Luminosity+2)^0,w,c
  5764   002A94  6E0B               	movwf	(color_read_Luminosity@tmp+1)^0,c
  5765                           
  5766                           ;../color.c: 65:  I2C_2_Master_Stop();
  5767   002A96  ECE0  F016         	call	_I2C_2_Master_Stop	;wreg free
  5768   002A9A                     
  5769                           ;../color.c: 66:  return tmp;
  5770   002A9A  C00A  F005         	movff	color_read_Luminosity@tmp,?_color_read_Luminosity
  5771   002A9E  C00B  F006         	movff	color_read_Luminosity@tmp+1,?_color_read_Luminosity+1
  5772   002AA2  0012               	return		;funcret
  5773   002AA4                     __end_of_color_read_Luminosity:
  5774                           	callstack 0
  5775                           
  5776 ;; *************** function _color_read_Green *****************
  5777 ;; Defined at:
  5778 ;;		line 83 in file "../color.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  tmp             2    9[COMRAM] unsigned int 
  5783 ;; Return value:  Size  Location     Type
  5784 ;;                  2    4[COMRAM] unsigned int 
  5785 ;; Registers used:
  5786 ;;		wreg, status,2, status,0, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5793 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5794 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5795 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5796 ;;Total ram usage:        7 bytes
  5797 ;; Hardware stack levels used: 1
  5798 ;; Hardware stack levels required when called: 3
  5799 ;; This function calls:
  5800 ;;		_I2C_2_Master_Read
  5801 ;;		_I2C_2_Master_RepStart
  5802 ;;		_I2C_2_Master_Start
  5803 ;;		_I2C_2_Master_Stop
  5804 ;;		_I2C_2_Master_Write
  5805 ;; This function is called by:
  5806 ;;		_color_read
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809                           
  5810                           	psect	text32
  5811   002AA4                     __ptext32:
  5812                           	callstack 0
  5813   002AA4                     _color_read_Green:
  5814                           	callstack 26
  5815   002AA4                     
  5816                           ;../color.c: 85:  unsigned int tmp;;../color.c: 86:  I2C_2_Master_Start();
  5817   002AA4  ECE5  F016         	call	_I2C_2_Master_Start	;wreg free
  5818                           
  5819                           ;../color.c: 87:  I2C_2_Master_Write(0x52 | 0x00);
  5820   002AA8  0E52               	movlw	82
  5821   002AAA  ECD5  F016         	call	_I2C_2_Master_Write
  5822                           
  5823                           ;../color.c: 88:  I2C_2_Master_Write(0xA0 | 0x18);
  5824   002AAE  0EB8               	movlw	184
  5825   002AB0  ECD5  F016         	call	_I2C_2_Master_Write
  5826                           
  5827                           ;../color.c: 89:  I2C_2_Master_RepStart();
  5828   002AB4  ECDB  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5829                           
  5830                           ;../color.c: 90:  I2C_2_Master_Write(0x52 | 0x01);
  5831   002AB8  0E53               	movlw	83
  5832   002ABA  ECD5  F016         	call	_I2C_2_Master_Write
  5833                           
  5834                           ;../color.c: 91:  tmp=I2C_2_Master_Read(1);
  5835   002ABE  0E01               	movlw	1
  5836   002AC0  ECE5  F015         	call	_I2C_2_Master_Read
  5837   002AC4  6E07               	movwf	??_color_read_Green^0,c
  5838   002AC6  5007               	movf	??_color_read_Green^0,w,c
  5839   002AC8  6E0A               	movwf	color_read_Green@tmp^0,c
  5840   002ACA  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5841                           
  5842                           ;../color.c: 92:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5843   002ACC  0E00               	movlw	0
  5844   002ACE  ECE5  F015         	call	_I2C_2_Master_Read
  5845   002AD2  6E07               	movwf	??_color_read_Green^0,c
  5846   002AD4  5007               	movf	??_color_read_Green^0,w,c
  5847   002AD6  6E09               	movwf	(??_color_read_Green+2)^0,c
  5848   002AD8  6A08               	clrf	(??_color_read_Green+1)^0,c
  5849   002ADA  500A               	movf	color_read_Green@tmp^0,w,c
  5850   002ADC  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5851   002ADE  6E0A               	movwf	color_read_Green@tmp^0,c
  5852   002AE0  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5853   002AE2  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5854   002AE4  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5855                           
  5856                           ;../color.c: 93:  I2C_2_Master_Stop();
  5857   002AE6  ECE0  F016         	call	_I2C_2_Master_Stop	;wreg free
  5858   002AEA                     
  5859                           ;../color.c: 94:  return tmp;
  5860   002AEA  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5861   002AEE  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5862   002AF2  0012               	return		;funcret
  5863   002AF4                     __end_of_color_read_Green:
  5864                           	callstack 0
  5865                           
  5866 ;; *************** function _color_read_Blue *****************
  5867 ;; Defined at:
  5868 ;;		line 97 in file "../color.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;		None
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;  tmp             2    9[COMRAM] unsigned int 
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  2    4[COMRAM] unsigned int 
  5875 ;; Registers used:
  5876 ;;		wreg, status,2, status,0, cstack
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5883 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5884 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5885 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5886 ;;Total ram usage:        7 bytes
  5887 ;; Hardware stack levels used: 1
  5888 ;; Hardware stack levels required when called: 3
  5889 ;; This function calls:
  5890 ;;		_I2C_2_Master_Read
  5891 ;;		_I2C_2_Master_RepStart
  5892 ;;		_I2C_2_Master_Start
  5893 ;;		_I2C_2_Master_Stop
  5894 ;;		_I2C_2_Master_Write
  5895 ;; This function is called by:
  5896 ;;		_color_read
  5897 ;; This function uses a non-reentrant model
  5898 ;;
  5899                           
  5900                           	psect	text33
  5901   002AF4                     __ptext33:
  5902                           	callstack 0
  5903   002AF4                     _color_read_Blue:
  5904                           	callstack 26
  5905   002AF4                     
  5906                           ;../color.c: 99:  unsigned int tmp;;../color.c: 100:  I2C_2_Master_Start();
  5907   002AF4  ECE5  F016         	call	_I2C_2_Master_Start	;wreg free
  5908                           
  5909                           ;../color.c: 101:  I2C_2_Master_Write(0x52 | 0x00);
  5910   002AF8  0E52               	movlw	82
  5911   002AFA  ECD5  F016         	call	_I2C_2_Master_Write
  5912                           
  5913                           ;../color.c: 102:  I2C_2_Master_Write(0xA0 | 0x1A);
  5914   002AFE  0EBA               	movlw	186
  5915   002B00  ECD5  F016         	call	_I2C_2_Master_Write
  5916                           
  5917                           ;../color.c: 103:  I2C_2_Master_RepStart();
  5918   002B04  ECDB  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5919                           
  5920                           ;../color.c: 104:  I2C_2_Master_Write(0x52 | 0x01);
  5921   002B08  0E53               	movlw	83
  5922   002B0A  ECD5  F016         	call	_I2C_2_Master_Write
  5923                           
  5924                           ;../color.c: 105:  tmp=I2C_2_Master_Read(1);
  5925   002B0E  0E01               	movlw	1
  5926   002B10  ECE5  F015         	call	_I2C_2_Master_Read
  5927   002B14  6E07               	movwf	??_color_read_Blue^0,c
  5928   002B16  5007               	movf	??_color_read_Blue^0,w,c
  5929   002B18  6E0A               	movwf	color_read_Blue@tmp^0,c
  5930   002B1A  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5931                           
  5932                           ;../color.c: 106:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5933   002B1C  0E00               	movlw	0
  5934   002B1E  ECE5  F015         	call	_I2C_2_Master_Read
  5935   002B22  6E07               	movwf	??_color_read_Blue^0,c
  5936   002B24  5007               	movf	??_color_read_Blue^0,w,c
  5937   002B26  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5938   002B28  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5939   002B2A  500A               	movf	color_read_Blue@tmp^0,w,c
  5940   002B2C  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5941   002B2E  6E0A               	movwf	color_read_Blue@tmp^0,c
  5942   002B30  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5943   002B32  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5944   002B34  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5945                           
  5946                           ;../color.c: 107:  I2C_2_Master_Stop();
  5947   002B36  ECE0  F016         	call	_I2C_2_Master_Stop	;wreg free
  5948   002B3A                     
  5949                           ;../color.c: 108:  return tmp;
  5950   002B3A  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5951   002B3E  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5952   002B42  0012               	return		;funcret
  5953   002B44                     __end_of_color_read_Blue:
  5954                           	callstack 0
  5955                           
  5956 ;; *************** function _I2C_2_Master_RepStart *****************
  5957 ;; Defined at:
  5958 ;;		line 33 in file "../i2c.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;		None
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;		None
  5963 ;; Return value:  Size  Location     Type
  5964 ;;                  1    wreg      void 
  5965 ;; Registers used:
  5966 ;;		wreg, status,2, status,0, cstack
  5967 ;; Tracked objects:
  5968 ;;		On entry : 0/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5976 ;;Total ram usage:        0 bytes
  5977 ;; Hardware stack levels used: 1
  5978 ;; Hardware stack levels required when called: 2
  5979 ;; This function calls:
  5980 ;;		_I2C_2_Master_Idle
  5981 ;; This function is called by:
  5982 ;;		_color_read_Luminosity
  5983 ;;		_color_read_Red
  5984 ;;		_color_read_Green
  5985 ;;		_color_read_Blue
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           	psect	text34
  5990   002DB6                     __ptext34:
  5991                           	callstack 0
  5992   002DB6                     _I2C_2_Master_RepStart:
  5993                           	callstack 26
  5994   002DB6                     
  5995                           ;../i2c.c: 35:   I2C_2_Master_Idle();
  5996   002DB6  EC68  F016         	call	_I2C_2_Master_Idle	;wreg free
  5997   002DBA                     
  5998                           ;../i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5999   002DBA  010E               	movlb	14	; () banked
  6000   002DBC  83DA               	bsf	218,1,b	;volatile
  6001   002DBE                     
  6002                           ; BSR set to: 14
  6003   002DBE  0012               	return		;funcret
  6004   002DC0                     __end_of_I2C_2_Master_RepStart:
  6005                           	callstack 0
  6006                           
  6007 ;; *************** function _I2C_2_Master_Read *****************
  6008 ;; Defined at:
  6009 ;;		line 51 in file "../i2c.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;  ack             1    wreg     unsigned char 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;  ack             1    2[COMRAM] unsigned char 
  6014 ;;  tmp             1    3[COMRAM] unsigned char 
  6015 ;; Return value:  Size  Location     Type
  6016 ;;                  1    wreg      unsigned char 
  6017 ;; Registers used:
  6018 ;;		wreg, status,2, status,0, cstack
  6019 ;; Tracked objects:
  6020 ;;		On entry : 0/0
  6021 ;;		On exit  : 0/0
  6022 ;;		Unchanged: 0/0
  6023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6025 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6026 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6027 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6028 ;;Total ram usage:        3 bytes
  6029 ;; Hardware stack levels used: 1
  6030 ;; Hardware stack levels required when called: 2
  6031 ;; This function calls:
  6032 ;;		_I2C_2_Master_Idle
  6033 ;; This function is called by:
  6034 ;;		_color_read_Luminosity
  6035 ;;		_color_read_Red
  6036 ;;		_color_read_Green
  6037 ;;		_color_read_Blue
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	text35
  6042   002BCA                     __ptext35:
  6043                           	callstack 0
  6044   002BCA                     _I2C_2_Master_Read:
  6045                           	callstack 26
  6046                           
  6047                           ; BSR set to: 14
  6048                           ;incstack = 0
  6049                           ;I2C_2_Master_Read@ack stored from wreg
  6050   002BCA  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  6051   002BCC                     
  6052                           ;../i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);../i2c.c: 52: {;../i2c
      +                          .c: 53:   unsigned char tmp;;../i2c.c: 54:   I2C_2_Master_Idle();
  6053   002BCC  EC68  F016         	call	_I2C_2_Master_Idle	;wreg free
  6054   002BD0                     
  6055                           ;../i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6056   002BD0  010E               	movlb	14	; () banked
  6057   002BD2  87DA               	bsf	218,3,b	;volatile
  6058                           
  6059                           ;../i2c.c: 56:   I2C_2_Master_Idle();
  6060   002BD4  EC68  F016         	call	_I2C_2_Master_Idle	;wreg free
  6061   002BD8                     
  6062                           ;../i2c.c: 57:   tmp = SSP2BUF;
  6063   002BD8  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6064                           
  6065                           ;../i2c.c: 58:   I2C_2_Master_Idle();
  6066   002BDC  EC68  F016         	call	_I2C_2_Master_Idle	;wreg free
  6067   002BE0                     
  6068                           ;../i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6069   002BE0  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  6070   002BE2  B4D8               	btfsc	status,2,c
  6071   002BE4  EFF6  F015         	goto	u1361
  6072   002BE8  EFFA  F015         	goto	u1360
  6073   002BEC                     u1361:
  6074   002BEC  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6075   002BEE  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  6076   002BF0  EFFB  F015         	goto	u1378
  6077   002BF4                     u1360:
  6078   002BF4  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6079   002BF6                     u1378:
  6080   002BF6  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  6081   002BF8  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  6082   002BFA  010E               	movlb	14	; () banked
  6083   002BFC  51DA               	movf	218,w,b	;volatile
  6084   002BFE  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6085   002C00  0BDF               	andlw	-33
  6086   002C02  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6087   002C04  6FDA               	movwf	218,b	;volatile
  6088   002C06                     
  6089                           ; BSR set to: 14
  6090                           ;../i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6091   002C06  89DA               	bsf	218,4,b	;volatile
  6092   002C08                     
  6093                           ; BSR set to: 14
  6094                           ;../i2c.c: 61:   return tmp;
  6095   002C08  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  6096   002C0A                     
  6097                           ; BSR set to: 14
  6098   002C0A  0012               	return		;funcret
  6099   002C0C                     __end_of_I2C_2_Master_Read:
  6100                           	callstack 0
  6101                           
  6102 ;; *************** function _color_processor_hard *****************
  6103 ;; Defined at:
  6104 ;;		line 152 in file "../color.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  6107 ;;		 -> main@RGB_recorded(8), 
  6108 ;;  calibrated      2    2[COMRAM] PTR unsigned int 
  6109 ;;		 -> main@color_calibrated(64), 
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  cb              2   22[COMRAM] unsigned int 
  6112 ;;  cg              2   20[COMRAM] unsigned int 
  6113 ;;  cr              2   18[COMRAM] unsigned int 
  6114 ;;  condition_b     1    8[COMRAM] _Bool 
  6115 ;;  condition_g     1    7[COMRAM] _Bool 
  6116 ;;  condition_r     1    6[COMRAM] _Bool 
  6117 ;;  i               2    0        int 
  6118 ;;  b               2   16[COMRAM] unsigned int 
  6119 ;;  g               2   14[COMRAM] unsigned int 
  6120 ;;  r               2   12[COMRAM] unsigned int 
  6121 ;; Return value:  Size  Location     Type
  6122 ;;                  2    0[COMRAM] unsigned int 
  6123 ;; Registers used:
  6124 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6130 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6131 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6132 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6133 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6134 ;;Total ram usage:       24 bytes
  6135 ;; Hardware stack levels used: 1
  6136 ;; Hardware stack levels required when called: 1
  6137 ;; This function calls:
  6138 ;;		Nothing
  6139 ;; This function is called by:
  6140 ;;		_main
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           	psect	text36
  6145   00180E                     __ptext36:
  6146                           	callstack 0
  6147   00180E                     _color_processor_hard:
  6148                           	callstack 29
  6149   00180E                     
  6150                           ;../color.c: 152: unsigned int color_processor_hard(struct RGB_val *rgb, unsigned int ca
      +                          librated[]);../color.c: 153: {;../color.c: 154:     unsigned int r = rgb->R;
  6151   00180E  EE20 F002          	lfsr	2,2
  6152   001812  5001               	movf	color_processor_hard@rgb^0,w,c
  6153   001814  26D9               	addwf	fsr2l,f,c
  6154   001816  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6155   001818  22DA               	addwfc	fsr2h,f,c
  6156   00181A  CFDE F00D          	movff	postinc2,color_processor_hard@r
  6157   00181E  CFDD F00E          	movff	postdec2,color_processor_hard@r+1
  6158                           
  6159                           ;../color.c: 155:     unsigned int g = rgb->G;
  6160   001822  EE20 F004          	lfsr	2,4
  6161   001826  5001               	movf	color_processor_hard@rgb^0,w,c
  6162   001828  26D9               	addwf	fsr2l,f,c
  6163   00182A  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6164   00182C  22DA               	addwfc	fsr2h,f,c
  6165   00182E  CFDE F00F          	movff	postinc2,color_processor_hard@g
  6166   001832  CFDD F010          	movff	postdec2,color_processor_hard@g+1
  6167                           
  6168                           ;../color.c: 156:     unsigned int b = rgb->B;
  6169   001836  EE20 F006          	lfsr	2,6
  6170   00183A  5001               	movf	color_processor_hard@rgb^0,w,c
  6171   00183C  26D9               	addwf	fsr2l,f,c
  6172   00183E  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6173   001840  22DA               	addwfc	fsr2h,f,c
  6174   001842  CFDE F011          	movff	postinc2,color_processor_hard@b
  6175   001846  CFDD F012          	movff	postdec2,color_processor_hard@b+1
  6176   00184A                     
  6177                           ;../color.c: 160:         unsigned int cr = calibrated[4*i+1];
  6178   00184A  EE20 F002          	lfsr	2,2
  6179   00184E  5003               	movf	color_processor_hard@calibrated^0,w,c
  6180   001850  26D9               	addwf	fsr2l,f,c
  6181   001852  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6182   001854  22DA               	addwfc	fsr2h,f,c
  6183   001856  CFDE F013          	movff	postinc2,color_processor_hard@cr
  6184   00185A  CFDD F014          	movff	postdec2,color_processor_hard@cr+1
  6185                           
  6186                           ;../color.c: 161:         unsigned int cg = calibrated[4*i+2];
  6187   00185E  EE20 F004          	lfsr	2,4
  6188   001862  5003               	movf	color_processor_hard@calibrated^0,w,c
  6189   001864  26D9               	addwf	fsr2l,f,c
  6190   001866  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6191   001868  22DA               	addwfc	fsr2h,f,c
  6192   00186A  CFDE F015          	movff	postinc2,color_processor_hard@cg
  6193   00186E  CFDD F016          	movff	postdec2,color_processor_hard@cg+1
  6194                           
  6195                           ;../color.c: 162:         unsigned int cb = calibrated[4*i+3];
  6196   001872  EE20 F006          	lfsr	2,6
  6197   001876  5003               	movf	color_processor_hard@calibrated^0,w,c
  6198   001878  26D9               	addwf	fsr2l,f,c
  6199   00187A  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6200   00187C  22DA               	addwfc	fsr2h,f,c
  6201   00187E  CFDE F017          	movff	postinc2,color_processor_hard@cb
  6202   001882  CFDD F018          	movff	postdec2,color_processor_hard@cb+1
  6203   001886                     
  6204                           ;../color.c: 164:         _Bool condition_r = r>cr-20 && r<cr+20;
  6205   001886  0E00               	movlw	0
  6206   001888  6E0A               	movwf	_color_processor_hard$370^0,c
  6207   00188A  0EEC               	movlw	236
  6208   00188C  2413               	addwf	color_processor_hard@cr^0,w,c
  6209   00188E  6E05               	movwf	??_color_processor_hard^0,c
  6210   001890  0EFF               	movlw	255
  6211   001892  2014               	addwfc	(color_processor_hard@cr+1)^0,w,c
  6212   001894  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6213   001896  500D               	movf	color_processor_hard@r^0,w,c
  6214   001898  5C05               	subwf	??_color_processor_hard^0,w,c
  6215   00189A  500E               	movf	(color_processor_hard@r+1)^0,w,c
  6216   00189C  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6217   00189E  B0D8               	btfsc	status,0,c
  6218   0018A0  EF54  F00C         	goto	u1591
  6219   0018A4  EF56  F00C         	goto	u1590
  6220   0018A8                     u1591:
  6221   0018A8  EF69  F00C         	goto	l64
  6222   0018AC                     u1590:
  6223   0018AC  0E14               	movlw	20
  6224   0018AE  2413               	addwf	color_processor_hard@cr^0,w,c
  6225   0018B0  6E05               	movwf	??_color_processor_hard^0,c
  6226   0018B2  0E00               	movlw	0
  6227   0018B4  2014               	addwfc	(color_processor_hard@cr+1)^0,w,c
  6228   0018B6  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6229   0018B8  5005               	movf	??_color_processor_hard^0,w,c
  6230   0018BA  5C0D               	subwf	color_processor_hard@r^0,w,c
  6231   0018BC  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6232   0018BE  580E               	subwfb	(color_processor_hard@r+1)^0,w,c
  6233   0018C0  B0D8               	btfsc	status,0,c
  6234   0018C2  EF65  F00C         	goto	u1601
  6235   0018C6  EF67  F00C         	goto	u1600
  6236   0018CA                     u1601:
  6237   0018CA  EF69  F00C         	goto	l64
  6238   0018CE                     u1600:
  6239   0018CE  0E01               	movlw	1
  6240   0018D0  6E0A               	movwf	_color_processor_hard$370^0,c
  6241   0018D2                     l64:
  6242   0018D2  500A               	movf	_color_processor_hard$370^0,w,c
  6243   0018D4  A4D8               	btfss	status,2,c
  6244   0018D6  EF6F  F00C         	goto	u1611
  6245   0018DA  EF72  F00C         	goto	u1610
  6246   0018DE                     u1611:
  6247   0018DE  0E01               	movlw	1
  6248   0018E0  EF73  F00C         	goto	u1620
  6249   0018E4                     u1610:
  6250   0018E4  0E00               	movlw	0
  6251   0018E6                     u1620:
  6252   0018E6  6E07               	movwf	color_processor_hard@condition_r^0,c
  6253                           
  6254                           ;../color.c: 165:         _Bool condition_g = b>cb-20 && b<cb+20;
  6255   0018E8  0E00               	movlw	0
  6256   0018EA  6E0B               	movwf	_color_processor_hard$372^0,c
  6257   0018EC  0EEC               	movlw	236
  6258   0018EE  2417               	addwf	color_processor_hard@cb^0,w,c
  6259   0018F0  6E05               	movwf	??_color_processor_hard^0,c
  6260   0018F2  0EFF               	movlw	255
  6261   0018F4  2018               	addwfc	(color_processor_hard@cb+1)^0,w,c
  6262   0018F6  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6263   0018F8  5011               	movf	color_processor_hard@b^0,w,c
  6264   0018FA  5C05               	subwf	??_color_processor_hard^0,w,c
  6265   0018FC  5012               	movf	(color_processor_hard@b+1)^0,w,c
  6266   0018FE  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6267   001900  B0D8               	btfsc	status,0,c
  6268   001902  EF85  F00C         	goto	u1631
  6269   001906  EF87  F00C         	goto	u1630
  6270   00190A                     u1631:
  6271   00190A  EF9A  F00C         	goto	l66
  6272   00190E                     u1630:
  6273   00190E  0E14               	movlw	20
  6274   001910  2417               	addwf	color_processor_hard@cb^0,w,c
  6275   001912  6E05               	movwf	??_color_processor_hard^0,c
  6276   001914  0E00               	movlw	0
  6277   001916  2018               	addwfc	(color_processor_hard@cb+1)^0,w,c
  6278   001918  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6279   00191A  5005               	movf	??_color_processor_hard^0,w,c
  6280   00191C  5C11               	subwf	color_processor_hard@b^0,w,c
  6281   00191E  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6282   001920  5812               	subwfb	(color_processor_hard@b+1)^0,w,c
  6283   001922  B0D8               	btfsc	status,0,c
  6284   001924  EF96  F00C         	goto	u1641
  6285   001928  EF98  F00C         	goto	u1640
  6286   00192C                     u1641:
  6287   00192C  EF9A  F00C         	goto	l66
  6288   001930                     u1640:
  6289   001930  0E01               	movlw	1
  6290   001932  6E0B               	movwf	_color_processor_hard$372^0,c
  6291   001934                     l66:
  6292   001934  500B               	movf	_color_processor_hard$372^0,w,c
  6293   001936  A4D8               	btfss	status,2,c
  6294   001938  EFA0  F00C         	goto	u1651
  6295   00193C  EFA3  F00C         	goto	u1650
  6296   001940                     u1651:
  6297   001940  0E01               	movlw	1
  6298   001942  EFA4  F00C         	goto	u1660
  6299   001946                     u1650:
  6300   001946  0E00               	movlw	0
  6301   001948                     u1660:
  6302   001948  6E08               	movwf	color_processor_hard@condition_g^0,c
  6303                           
  6304                           ;../color.c: 166:         _Bool condition_b = g>cg-20 && g<cg+20;
  6305   00194A  0E00               	movlw	0
  6306   00194C  6E0C               	movwf	_color_processor_hard$374^0,c
  6307   00194E  0EEC               	movlw	236
  6308   001950  2415               	addwf	color_processor_hard@cg^0,w,c
  6309   001952  6E05               	movwf	??_color_processor_hard^0,c
  6310   001954  0EFF               	movlw	255
  6311   001956  2016               	addwfc	(color_processor_hard@cg+1)^0,w,c
  6312   001958  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6313   00195A  500F               	movf	color_processor_hard@g^0,w,c
  6314   00195C  5C05               	subwf	??_color_processor_hard^0,w,c
  6315   00195E  5010               	movf	(color_processor_hard@g+1)^0,w,c
  6316   001960  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6317   001962  B0D8               	btfsc	status,0,c
  6318   001964  EFB6  F00C         	goto	u1671
  6319   001968  EFB8  F00C         	goto	u1670
  6320   00196C                     u1671:
  6321   00196C  EFCB  F00C         	goto	l68
  6322   001970                     u1670:
  6323   001970  0E14               	movlw	20
  6324   001972  2415               	addwf	color_processor_hard@cg^0,w,c
  6325   001974  6E05               	movwf	??_color_processor_hard^0,c
  6326   001976  0E00               	movlw	0
  6327   001978  2016               	addwfc	(color_processor_hard@cg+1)^0,w,c
  6328   00197A  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6329   00197C  5005               	movf	??_color_processor_hard^0,w,c
  6330   00197E  5C0F               	subwf	color_processor_hard@g^0,w,c
  6331   001980  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6332   001982  5810               	subwfb	(color_processor_hard@g+1)^0,w,c
  6333   001984  B0D8               	btfsc	status,0,c
  6334   001986  EFC7  F00C         	goto	u1681
  6335   00198A  EFC9  F00C         	goto	u1680
  6336   00198E                     u1681:
  6337   00198E  EFCB  F00C         	goto	l68
  6338   001992                     u1680:
  6339   001992  0E01               	movlw	1
  6340   001994  6E0C               	movwf	_color_processor_hard$374^0,c
  6341   001996                     l68:
  6342   001996  500C               	movf	_color_processor_hard$374^0,w,c
  6343   001998  A4D8               	btfss	status,2,c
  6344   00199A  EFD1  F00C         	goto	u1691
  6345   00199E  EFD4  F00C         	goto	u1690
  6346   0019A2                     u1691:
  6347   0019A2  0E01               	movlw	1
  6348   0019A4  EFD5  F00C         	goto	u1700
  6349   0019A8                     u1690:
  6350   0019A8  0E00               	movlw	0
  6351   0019AA                     u1700:
  6352   0019AA  6E09               	movwf	color_processor_hard@condition_b^0,c
  6353                           
  6354                           ;../color.c: 168:         if (condition_r && condition_g && condition_b){
  6355   0019AC  5007               	movf	color_processor_hard@condition_r^0,w,c
  6356   0019AE  B4D8               	btfsc	status,2,c
  6357   0019B0  EFDC  F00C         	goto	u1711
  6358   0019B4  EFDE  F00C         	goto	u1710
  6359   0019B8                     u1711:
  6360   0019B8  EFF4  F00C         	goto	l2875
  6361   0019BC                     u1710:
  6362   0019BC  5008               	movf	color_processor_hard@condition_g^0,w,c
  6363   0019BE  B4D8               	btfsc	status,2,c
  6364   0019C0  EFE4  F00C         	goto	u1721
  6365   0019C4  EFE6  F00C         	goto	u1720
  6366   0019C8                     u1721:
  6367   0019C8  EFF4  F00C         	goto	l2875
  6368   0019CC                     u1720:
  6369   0019CC  5009               	movf	color_processor_hard@condition_b^0,w,c
  6370   0019CE  B4D8               	btfsc	status,2,c
  6371   0019D0  EFEC  F00C         	goto	u1731
  6372   0019D4  EFEE  F00C         	goto	u1730
  6373   0019D8                     u1731:
  6374   0019D8  EFF4  F00C         	goto	l2875
  6375   0019DC                     u1730:
  6376   0019DC                     
  6377                           ;../color.c: 169:             return i+1;
  6378   0019DC  0E00               	movlw	0
  6379   0019DE  6E02               	movwf	(?_color_processor_hard+1)^0,c
  6380   0019E0  0E01               	movlw	1
  6381   0019E2  6E01               	movwf	?_color_processor_hard^0,c
  6382   0019E4  EFF8  F00C         	goto	l70
  6383   0019E8                     l2875:
  6384   0019E8  0E00               	movlw	0
  6385   0019EA  6E02               	movwf	(?_color_processor_hard+1)^0,c
  6386   0019EC  0E00               	movlw	0
  6387   0019EE  6E01               	movwf	?_color_processor_hard^0,c
  6388   0019F0                     l70:
  6389   0019F0  0012               	return		;funcret
  6390   0019F2                     __end_of_color_processor_hard:
  6391                           	callstack 0
  6392                           
  6393 ;; *************** function _color_processor_easy *****************
  6394 ;; Defined at:
  6395 ;;		line 134 in file "../color.c"
  6396 ;; Parameters:    Size  Location     Type
  6397 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  6398 ;;		 -> main@RGB_recorded(8), 
  6399 ;; Auto vars:     Size  Location     Type
  6400 ;;  b               2    8[COMRAM] unsigned int 
  6401 ;;  a               2    6[COMRAM] unsigned int 
  6402 ;;  c               2    4[COMRAM] unsigned int 
  6403 ;;  color           2    2[COMRAM] unsigned int 
  6404 ;; Return value:  Size  Location     Type
  6405 ;;                  2    0[COMRAM] unsigned int 
  6406 ;; Registers used:
  6407 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : 0/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6413 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6414 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6416 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6417 ;;Total ram usage:       10 bytes
  6418 ;; Hardware stack levels used: 1
  6419 ;; Hardware stack levels required when called: 1
  6420 ;; This function calls:
  6421 ;;		Nothing
  6422 ;; This function is called by:
  6423 ;;		_main
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           	psect	text37
  6428   00219E                     __ptext37:
  6429                           	callstack 0
  6430   00219E                     _color_processor_easy:
  6431                           	callstack 29
  6432   00219E                     
  6433                           ;../color.c: 134: unsigned int color_processor_easy(struct RGB_val *rgb);../color.c: 135
      +                          : {;../color.c: 136:     unsigned int a = rgb->R;
  6434   00219E  EE20 F002          	lfsr	2,2
  6435   0021A2  5001               	movf	color_processor_easy@rgb^0,w,c
  6436   0021A4  26D9               	addwf	fsr2l,f,c
  6437   0021A6  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6438   0021A8  22DA               	addwfc	fsr2h,f,c
  6439   0021AA  CFDE F007          	movff	postinc2,color_processor_easy@a
  6440   0021AE  CFDD F008          	movff	postdec2,color_processor_easy@a+1
  6441                           
  6442                           ;../color.c: 137:     unsigned int b = rgb->G;
  6443   0021B2  EE20 F004          	lfsr	2,4
  6444   0021B6  5001               	movf	color_processor_easy@rgb^0,w,c
  6445   0021B8  26D9               	addwf	fsr2l,f,c
  6446   0021BA  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6447   0021BC  22DA               	addwfc	fsr2h,f,c
  6448   0021BE  CFDE F009          	movff	postinc2,color_processor_easy@b
  6449   0021C2  CFDD F00A          	movff	postdec2,color_processor_easy@b+1
  6450                           
  6451                           ;../color.c: 138:     unsigned int c = rgb->B;
  6452   0021C6  EE20 F006          	lfsr	2,6
  6453   0021CA  5001               	movf	color_processor_easy@rgb^0,w,c
  6454   0021CC  26D9               	addwf	fsr2l,f,c
  6455   0021CE  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6456   0021D0  22DA               	addwfc	fsr2h,f,c
  6457   0021D2  CFDE F005          	movff	postinc2,color_processor_easy@c
  6458   0021D6  CFDD F006          	movff	postdec2,color_processor_easy@c+1
  6459   0021DA                     
  6460                           ;../color.c: 139:     unsigned int color;;../color.c: 140:     if (a>=b & a>=c){
  6461   0021DA  5009               	movf	color_processor_easy@b^0,w,c
  6462   0021DC  5C07               	subwf	color_processor_easy@a^0,w,c
  6463   0021DE  500A               	movf	(color_processor_easy@b+1)^0,w,c
  6464   0021E0  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6465   0021E2  A0D8               	btfss	status,0,c
  6466   0021E4  EFF6  F010         	goto	u1551
  6467   0021E8  EFF8  F010         	goto	u1550
  6468   0021EC                     u1551:
  6469   0021EC  EF09  F011         	goto	l2823
  6470   0021F0                     u1550:
  6471   0021F0  5005               	movf	color_processor_easy@c^0,w,c
  6472   0021F2  5C07               	subwf	color_processor_easy@a^0,w,c
  6473   0021F4  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6474   0021F6  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6475   0021F8  A0D8               	btfss	status,0,c
  6476   0021FA  EF01  F011         	goto	u1561
  6477   0021FE  EF03  F011         	goto	u1560
  6478   002202                     u1561:
  6479   002202  EF09  F011         	goto	l2823
  6480   002206                     u1560:
  6481   002206                     
  6482                           ;../color.c: 141:         color=1;
  6483   002206  0E00               	movlw	0
  6484   002208  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6485   00220A  0E01               	movlw	1
  6486   00220C  6E03               	movwf	color_processor_easy@color^0,c
  6487                           
  6488                           ;../color.c: 142:     }
  6489   00220E  EF29  F011         	goto	l2831
  6490   002212                     l2823:
  6491   002212  5007               	movf	color_processor_easy@a^0,w,c
  6492   002214  5C09               	subwf	color_processor_easy@b^0,w,c
  6493   002216  5008               	movf	(color_processor_easy@a+1)^0,w,c
  6494   002218  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6495   00221A  A0D8               	btfss	status,0,c
  6496   00221C  EF12  F011         	goto	u1571
  6497   002220  EF14  F011         	goto	u1570
  6498   002224                     u1571:
  6499   002224  EF25  F011         	goto	l2829
  6500   002228                     u1570:
  6501   002228  5005               	movf	color_processor_easy@c^0,w,c
  6502   00222A  5C09               	subwf	color_processor_easy@b^0,w,c
  6503   00222C  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6504   00222E  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6505   002230  A0D8               	btfss	status,0,c
  6506   002232  EF1D  F011         	goto	u1581
  6507   002236  EF1F  F011         	goto	u1580
  6508   00223A                     u1581:
  6509   00223A  EF25  F011         	goto	l2829
  6510   00223E                     u1580:
  6511   00223E                     
  6512                           ;../color.c: 144:         color=2;
  6513   00223E  0E00               	movlw	0
  6514   002240  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6515   002242  0E02               	movlw	2
  6516   002244  6E03               	movwf	color_processor_easy@color^0,c
  6517                           
  6518                           ;../color.c: 145:     }
  6519   002246  EF29  F011         	goto	l2831
  6520   00224A                     l2829:
  6521                           
  6522                           ;../color.c: 147:         color=3;
  6523   00224A  0E00               	movlw	0
  6524   00224C  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6525   00224E  0E03               	movlw	3
  6526   002250  6E03               	movwf	color_processor_easy@color^0,c
  6527   002252                     l2831:
  6528                           
  6529                           ;../color.c: 149:     return color;
  6530   002252  C003  F001         	movff	color_processor_easy@color,?_color_processor_easy
  6531   002256  C004  F002         	movff	color_processor_easy@color+1,?_color_processor_easy+1
  6532   00225A  0012               	return		;funcret
  6533   00225C                     __end_of_color_processor_easy:
  6534                           	callstack 0
  6535                           
  6536 ;; *************** function _color_click_init *****************
  6537 ;; Defined at:
  6538 ;;		line 6 in file "../color.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;		None
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;		None
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      void 
  6545 ;; Registers used:
  6546 ;;		wreg, status,2, status,0, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6554 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6555 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6556 ;;Total ram usage:        1 bytes
  6557 ;; Hardware stack levels used: 1
  6558 ;; Hardware stack levels required when called: 4
  6559 ;; This function calls:
  6560 ;;		_I2C_2_Master_Init
  6561 ;;		_color_writetoaddr
  6562 ;; This function is called by:
  6563 ;;		_main
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           	psect	text38
  6568   002906                     __ptext38:
  6569                           	callstack 0
  6570   002906                     _color_click_init:
  6571                           	callstack 26
  6572   002906                     
  6573                           ;../color.c: 9:     I2C_2_Master_Init();
  6574   002906  EC53  F016         	call	_I2C_2_Master_Init	;wreg free
  6575   00290A                     
  6576                           ;../color.c: 12:   color_writetoaddr(0x00, 0x01);
  6577   00290A  0E01               	movlw	1
  6578   00290C  6E03               	movwf	color_writetoaddr@value^0,c
  6579   00290E  0E00               	movlw	0
  6580   002910  EC8F  F016         	call	_color_writetoaddr
  6581   002914                     
  6582                           ;../color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6583   002914  0E3F               	movlw	63
  6584   002916  6E05               	movwf	??_color_click_init^0,c
  6585   002918  0E55               	movlw	85
  6586   00291A                     u2187:
  6587   00291A  2EE8               	decfsz	wreg,f,c
  6588   00291C  D7FE               	bra	u2187
  6589   00291E  2E05               	decfsz	??_color_click_init^0,f,c
  6590   002920  D7FC               	bra	u2187
  6591   002922  F000               	nop	
  6592   002924                     
  6593                           ;../color.c: 16:  color_writetoaddr(0x00, 0x03);
  6594   002924  0E03               	movlw	3
  6595   002926  6E03               	movwf	color_writetoaddr@value^0,c
  6596   002928  0E00               	movlw	0
  6597   00292A  EC8F  F016         	call	_color_writetoaddr
  6598   00292E                     
  6599                           ;../color.c: 19:  color_writetoaddr(0x01, 0xD5);
  6600   00292E  0ED5               	movlw	213
  6601   002930  6E03               	movwf	color_writetoaddr@value^0,c
  6602   002932  0E01               	movlw	1
  6603   002934  EC8F  F016         	call	_color_writetoaddr
  6604   002938                     
  6605                           ;../color.c: 22:     TRISHbits.TRISH1 = 0;
  6606   002938  9288               	bcf	136,1,c	;volatile
  6607   00293A                     
  6608                           ;../color.c: 23:     TRISDbits.TRISD3 = 0;
  6609   00293A  9684               	bcf	132,3,c	;volatile
  6610   00293C                     
  6611                           ;../color.c: 24:     TRISDbits.TRISD4 = 0;
  6612   00293C  9884               	bcf	132,4,c	;volatile
  6613   00293E                     
  6614                           ;../color.c: 25:     TRISHbits.TRISH0 = 0;
  6615   00293E  9088               	bcf	136,0,c	;volatile
  6616   002940                     
  6617                           ;../color.c: 26:     TRISFbits.TRISF0 = 0;
  6618   002940  9086               	bcf	134,0,c	;volatile
  6619   002942                     
  6620                           ;../color.c: 28:     LATHbits.LATH1 = 1;
  6621   002942  8280               	bsf	128,1,c	;volatile
  6622   002944                     
  6623                           ;../color.c: 29:     LATDbits.LATD3 = 1;
  6624   002944  867C               	bsf	124,3,c	;volatile
  6625   002946                     
  6626                           ;../color.c: 30:     LATDbits.LATD4 = 0;
  6627   002946  987C               	bcf	124,4,c	;volatile
  6628   002948                     
  6629                           ;../color.c: 31:     LATHbits.LATH0 = 0;
  6630   002948  9080               	bcf	128,0,c	;volatile
  6631   00294A                     
  6632                           ;../color.c: 32:     LATFbits.LATF0 = 0;
  6633   00294A  907E               	bcf	126,0,c	;volatile
  6634   00294C                     
  6635                           ;../color.c: 35:     LATDbits.LATD7=0;
  6636   00294C  9E7C               	bcf	124,7,c	;volatile
  6637   00294E                     
  6638                           ;../color.c: 36:     LATHbits.LATH3=0;
  6639   00294E  9680               	bcf	128,3,c	;volatile
  6640   002950                     
  6641                           ;../color.c: 37:     TRISDbits.TRISD7=0;
  6642   002950  9E84               	bcf	132,7,c	;volatile
  6643   002952                     
  6644                           ;../color.c: 38:     TRISHbits.TRISH3=0;
  6645   002952  9688               	bcf	136,3,c	;volatile
  6646   002954                     
  6647                           ;../color.c: 40:     TRISFbits.TRISF2=1;
  6648   002954  8486               	bsf	134,2,c	;volatile
  6649   002956                     
  6650                           ;../color.c: 41:     ANSELFbits.ANSELF2=0;
  6651   002956  010E               	movlb	14	; () banked
  6652   002958  95B4               	bcf	180,2,b	;volatile
  6653   00295A                     
  6654                           ; BSR set to: 14
  6655                           ;../color.c: 42:     TRISFbits.TRISF3=1;
  6656   00295A  8686               	bsf	134,3,c	;volatile
  6657   00295C                     
  6658                           ; BSR set to: 14
  6659                           ;../color.c: 43:     ANSELFbits.ANSELF3=0;
  6660   00295C  97B4               	bcf	180,3,b	;volatile
  6661   00295E                     
  6662                           ; BSR set to: 14
  6663   00295E  0012               	return		;funcret
  6664   002960                     __end_of_color_click_init:
  6665                           	callstack 0
  6666                           
  6667 ;; *************** function _color_writetoaddr *****************
  6668 ;; Defined at:
  6669 ;;		line 46 in file "../color.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;  address         1    wreg     unsigned char 
  6672 ;;  value           1    2[COMRAM] unsigned char 
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;  address         1    3[COMRAM] unsigned char 
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  1    wreg      void 
  6677 ;; Registers used:
  6678 ;;		wreg, status,2, status,0, cstack
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6684 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6687 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6688 ;;Total ram usage:        2 bytes
  6689 ;; Hardware stack levels used: 1
  6690 ;; Hardware stack levels required when called: 3
  6691 ;; This function calls:
  6692 ;;		_I2C_2_Master_Start
  6693 ;;		_I2C_2_Master_Stop
  6694 ;;		_I2C_2_Master_Write
  6695 ;; This function is called by:
  6696 ;;		_color_click_init
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text39
  6701   002D1E                     __ptext39:
  6702                           	callstack 0
  6703   002D1E                     _color_writetoaddr:
  6704                           	callstack 26
  6705                           
  6706                           ; BSR set to: 14
  6707                           ;incstack = 0
  6708                           ;color_writetoaddr@address stored from wreg
  6709   002D1E  6E04               	movwf	color_writetoaddr@address^0,c
  6710   002D20                     
  6711                           ;../color.c: 46: void color_writetoaddr(char address, char value);../color.c: 47: {;../c
      +                          olor.c: 48:     I2C_2_Master_Start();
  6712   002D20  ECE5  F016         	call	_I2C_2_Master_Start	;wreg free
  6713                           
  6714                           ;../color.c: 49:     I2C_2_Master_Write(0x52 | 0x00);
  6715   002D24  0E52               	movlw	82
  6716   002D26  ECD5  F016         	call	_I2C_2_Master_Write
  6717                           
  6718                           ;../color.c: 50:     I2C_2_Master_Write(0x80 | address);
  6719   002D2A  5004               	movf	color_writetoaddr@address^0,w,c
  6720   002D2C  0980               	iorlw	128
  6721   002D2E  ECD5  F016         	call	_I2C_2_Master_Write
  6722                           
  6723                           ;../color.c: 51:     I2C_2_Master_Write(value);
  6724   002D32  5003               	movf	color_writetoaddr@value^0,w,c
  6725   002D34  ECD5  F016         	call	_I2C_2_Master_Write
  6726                           
  6727                           ;../color.c: 52:     I2C_2_Master_Stop();
  6728   002D38  ECE0  F016         	call	_I2C_2_Master_Stop	;wreg free
  6729   002D3C  0012               	return		;funcret
  6730   002D3E                     __end_of_color_writetoaddr:
  6731                           	callstack 0
  6732                           
  6733 ;; *************** function _I2C_2_Master_Write *****************
  6734 ;; Defined at:
  6735 ;;		line 45 in file "../i2c.c"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;  data_byte       1    wreg     unsigned char 
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;  data_byte       1    1[COMRAM] unsigned char 
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  1    wreg      void 
  6742 ;; Registers used:
  6743 ;;		wreg, status,2, status,0, cstack
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6750 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6752 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6753 ;;Total ram usage:        1 bytes
  6754 ;; Hardware stack levels used: 1
  6755 ;; Hardware stack levels required when called: 2
  6756 ;; This function calls:
  6757 ;;		_I2C_2_Master_Idle
  6758 ;; This function is called by:
  6759 ;;		_color_writetoaddr
  6760 ;;		_color_read_Luminosity
  6761 ;;		_color_read_Red
  6762 ;;		_color_read_Green
  6763 ;;		_color_read_Blue
  6764 ;; This function uses a non-reentrant model
  6765 ;;
  6766                           
  6767                           	psect	text40
  6768   002DAA                     __ptext40:
  6769                           	callstack 0
  6770   002DAA                     _I2C_2_Master_Write:
  6771                           	callstack 26
  6772                           
  6773                           ;incstack = 0
  6774                           ;I2C_2_Master_Write@data_byte stored from wreg
  6775   002DAA  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6776   002DAC                     
  6777                           ;../i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);../i2c.c: 46: {;../i2c.c
      +                          : 47:   I2C_2_Master_Idle();
  6778   002DAC  EC68  F016         	call	_I2C_2_Master_Idle	;wreg free
  6779   002DB0                     
  6780                           ;../i2c.c: 48:   SSP2BUF = data_byte;
  6781   002DB0  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6782   002DB4  0012               	return		;funcret
  6783   002DB6                     __end_of_I2C_2_Master_Write:
  6784                           	callstack 0
  6785                           
  6786 ;; *************** function _I2C_2_Master_Stop *****************
  6787 ;; Defined at:
  6788 ;;		line 39 in file "../i2c.c"
  6789 ;; Parameters:    Size  Location     Type
  6790 ;;		None
  6791 ;; Auto vars:     Size  Location     Type
  6792 ;;		None
  6793 ;; Return value:  Size  Location     Type
  6794 ;;                  1    wreg      void 
  6795 ;; Registers used:
  6796 ;;		wreg, status,2, status,0, cstack
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 0/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6806 ;;Total ram usage:        0 bytes
  6807 ;; Hardware stack levels used: 1
  6808 ;; Hardware stack levels required when called: 2
  6809 ;; This function calls:
  6810 ;;		_I2C_2_Master_Idle
  6811 ;; This function is called by:
  6812 ;;		_color_writetoaddr
  6813 ;;		_color_read_Luminosity
  6814 ;;		_color_read_Red
  6815 ;;		_color_read_Green
  6816 ;;		_color_read_Blue
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           	psect	text41
  6821   002DC0                     __ptext41:
  6822                           	callstack 0
  6823   002DC0                     _I2C_2_Master_Stop:
  6824                           	callstack 26
  6825   002DC0                     
  6826                           ;../i2c.c: 41:   I2C_2_Master_Idle();
  6827   002DC0  EC68  F016         	call	_I2C_2_Master_Idle	;wreg free
  6828   002DC4                     
  6829                           ;../i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6830   002DC4  010E               	movlb	14	; () banked
  6831   002DC6  85DA               	bsf	218,2,b	;volatile
  6832   002DC8                     
  6833                           ; BSR set to: 14
  6834   002DC8  0012               	return		;funcret
  6835   002DCA                     __end_of_I2C_2_Master_Stop:
  6836                           	callstack 0
  6837                           
  6838 ;; *************** function _I2C_2_Master_Start *****************
  6839 ;; Defined at:
  6840 ;;		line 27 in file "../i2c.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;		None
  6843 ;; Auto vars:     Size  Location     Type
  6844 ;;		None
  6845 ;; Return value:  Size  Location     Type
  6846 ;;                  1    wreg      void 
  6847 ;; Registers used:
  6848 ;;		wreg, status,2, status,0, cstack
  6849 ;; Tracked objects:
  6850 ;;		On entry : 0/0
  6851 ;;		On exit  : 0/0
  6852 ;;		Unchanged: 0/0
  6853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6858 ;;Total ram usage:        0 bytes
  6859 ;; Hardware stack levels used: 1
  6860 ;; Hardware stack levels required when called: 2
  6861 ;; This function calls:
  6862 ;;		_I2C_2_Master_Idle
  6863 ;; This function is called by:
  6864 ;;		_color_writetoaddr
  6865 ;;		_color_read_Luminosity
  6866 ;;		_color_read_Red
  6867 ;;		_color_read_Green
  6868 ;;		_color_read_Blue
  6869 ;; This function uses a non-reentrant model
  6870 ;;
  6871                           
  6872                           	psect	text42
  6873   002DCA                     __ptext42:
  6874                           	callstack 0
  6875   002DCA                     _I2C_2_Master_Start:
  6876                           	callstack 26
  6877   002DCA                     
  6878                           ;../i2c.c: 29:   I2C_2_Master_Idle();
  6879   002DCA  EC68  F016         	call	_I2C_2_Master_Idle	;wreg free
  6880   002DCE                     
  6881                           ;../i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6882   002DCE  010E               	movlb	14	; () banked
  6883   002DD0  81DA               	bsf	218,0,b	;volatile
  6884   002DD2                     
  6885                           ; BSR set to: 14
  6886   002DD2  0012               	return		;funcret
  6887   002DD4                     __end_of_I2C_2_Master_Start:
  6888                           	callstack 0
  6889                           
  6890 ;; *************** function _I2C_2_Master_Idle *****************
  6891 ;; Defined at:
  6892 ;;		line 22 in file "../i2c.c"
  6893 ;; Parameters:    Size  Location     Type
  6894 ;;		None
  6895 ;; Auto vars:     Size  Location     Type
  6896 ;;		None
  6897 ;; Return value:  Size  Location     Type
  6898 ;;                  1    wreg      void 
  6899 ;; Registers used:
  6900 ;;		wreg, status,2, status,0
  6901 ;; Tracked objects:
  6902 ;;		On entry : 0/0
  6903 ;;		On exit  : 0/0
  6904 ;;		Unchanged: 0/0
  6905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6908 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6909 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6910 ;;Total ram usage:        1 bytes
  6911 ;; Hardware stack levels used: 1
  6912 ;; Hardware stack levels required when called: 1
  6913 ;; This function calls:
  6914 ;;		Nothing
  6915 ;; This function is called by:
  6916 ;;		_I2C_2_Master_Start
  6917 ;;		_I2C_2_Master_RepStart
  6918 ;;		_I2C_2_Master_Stop
  6919 ;;		_I2C_2_Master_Write
  6920 ;;		_I2C_2_Master_Read
  6921 ;; This function uses a non-reentrant model
  6922 ;;
  6923                           
  6924                           	psect	text43
  6925   002CD0                     __ptext43:
  6926                           	callstack 0
  6927   002CD0                     _I2C_2_Master_Idle:
  6928                           	callstack 26
  6929   002CD0                     l101:
  6930   002CD0  010E               	movlb	14	; () banked
  6931   002CD2  B5D8               	btfsc	216,2,b	;volatile
  6932   002CD4  EF6E  F016         	goto	u1181
  6933   002CD8  EF70  F016         	goto	u1180
  6934   002CDC                     u1181:
  6935   002CDC  EF68  F016         	goto	l101
  6936   002CE0                     u1180:
  6937   002CE0                     
  6938                           ; BSR set to: 14
  6939   002CE0  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6940   002CE4  0E1F               	movlw	31
  6941   002CE6  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  6942   002CE8  A4D8               	btfss	status,2,c
  6943   002CEA  EF79  F016         	goto	u1191
  6944   002CEE  EF7B  F016         	goto	u1190
  6945   002CF2                     u1191:
  6946   002CF2  EF68  F016         	goto	l101
  6947   002CF6                     u1190:
  6948   002CF6                     
  6949                           ; BSR set to: 14
  6950   002CF6  0012               	return		;funcret
  6951   002CF8                     __end_of_I2C_2_Master_Idle:
  6952                           	callstack 0
  6953                           
  6954 ;; *************** function _I2C_2_Master_Init *****************
  6955 ;; Defined at:
  6956 ;;		line 4 in file "../i2c.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;		None
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;		None
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  1    wreg      void 
  6963 ;; Registers used:
  6964 ;;		wreg, status,2
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6974 ;;Total ram usage:        0 bytes
  6975 ;; Hardware stack levels used: 1
  6976 ;; Hardware stack levels required when called: 1
  6977 ;; This function calls:
  6978 ;;		Nothing
  6979 ;; This function is called by:
  6980 ;;		_color_click_init
  6981 ;;		_main
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           	psect	text44
  6986   002CA6                     __ptext44:
  6987                           	callstack 0
  6988   002CA6                     _I2C_2_Master_Init:
  6989                           	callstack 28
  6990   002CA6                     
  6991                           ;../i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6992   002CA6  010E               	movlb	14	; () banked
  6993   002CA8  51D9               	movf	217,w,b	;volatile
  6994   002CAA  0BF0               	andlw	-16
  6995   002CAC  0908               	iorlw	8
  6996   002CAE  6FD9               	movwf	217,b	;volatile
  6997   002CB0                     
  6998                           ; BSR set to: 14
  6999                           ;../i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  7000   002CB0  8BD9               	bsf	217,5,b	;volatile
  7001                           
  7002                           ;../i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  7003   002CB2  0E9F               	movlw	159
  7004   002CB4  6FD6               	movwf	214,b	;volatile
  7005   002CB6                     
  7006                           ; BSR set to: 14
  7007                           ;../i2c.c: 12:   TRISDbits.TRISD5 = 1;
  7008   002CB6  8A84               	bsf	132,5,c	;volatile
  7009   002CB8                     
  7010                           ; BSR set to: 14
  7011                           ;../i2c.c: 13:   TRISDbits.TRISD6 = 1;
  7012   002CB8  8C84               	bsf	132,6,c	;volatile
  7013   002CBA                     
  7014                           ; BSR set to: 14
  7015                           ;../i2c.c: 14:   ANSELDbits.ANSELD5=0;
  7016   002CBA  9BA7               	bcf	167,5,b	;volatile
  7017   002CBC                     
  7018                           ; BSR set to: 14
  7019                           ;../i2c.c: 15:   ANSELDbits.ANSELD6=0;
  7020   002CBC  9DA7               	bcf	167,6,b	;volatile
  7021                           
  7022                           ;../i2c.c: 16:   SSP2DATPPS=0x1D;
  7023   002CBE  0E1D               	movlw	29
  7024   002CC0  6F1D               	movwf	29,b	;volatile
  7025                           
  7026                           ;../i2c.c: 17:   SSP2CLKPPS=0x1E;
  7027   002CC2  0E1E               	movlw	30
  7028   002CC4  6F1C               	movwf	28,b	;volatile
  7029                           
  7030                           ;../i2c.c: 18:   RD5PPS=0x1C;
  7031   002CC6  0E1C               	movlw	28
  7032   002CC8  6F6F               	movwf	111,b	;volatile
  7033                           
  7034                           ;../i2c.c: 19:   RD6PPS=0x1B;
  7035   002CCA  0E1B               	movlw	27
  7036   002CCC  6F70               	movwf	112,b	;volatile
  7037   002CCE                     
  7038                           ; BSR set to: 14
  7039   002CCE  0012               	return		;funcret
  7040   002CD0                     __end_of_I2C_2_Master_Init:
  7041                           	callstack 0
  7042                           
  7043 ;; *************** function _Timer0_init *****************
  7044 ;; Defined at:
  7045 ;;		line 62 in file "../rc_servo.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;		None
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;		None
  7050 ;; Return value:  Size  Location     Type
  7051 ;;                  1    wreg      void 
  7052 ;; Registers used:
  7053 ;;		wreg, status,2
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7063 ;;Total ram usage:        0 bytes
  7064 ;; Hardware stack levels used: 1
  7065 ;; Hardware stack levels required when called: 1
  7066 ;; This function calls:
  7067 ;;		Nothing
  7068 ;; This function is called by:
  7069 ;;		_main
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           	psect	text45
  7074   002D3E                     __ptext45:
  7075                           	callstack 0
  7076   002D3E                     _Timer0_init:
  7077                           	callstack 29
  7078   002D3E                     
  7079                           ;../rc_servo.c: 64:     T0CON1bits.T0CS=0b010;
  7080   002D3E  50D6               	movf	214,w,c	;volatile
  7081   002D40  0B1F               	andlw	-225
  7082   002D42  0940               	iorlw	64
  7083   002D44  6ED6               	movwf	214,c	;volatile
  7084   002D46                     
  7085                           ;../rc_servo.c: 65:     T0CON1bits.T0ASYNC=1;
  7086   002D46  88D6               	bsf	214,4,c	;volatile
  7087                           
  7088                           ;../rc_servo.c: 66:     T0CON1bits.T0CKPS=0b0111;
  7089   002D48  50D6               	movf	214,w,c	;volatile
  7090   002D4A  0BF0               	andlw	-16
  7091   002D4C  0907               	iorlw	7
  7092   002D4E  6ED6               	movwf	214,c	;volatile
  7093   002D50                     
  7094                           ;../rc_servo.c: 68:     T0CON0bits.T016BIT=1;
  7095   002D50  88D5               	bsf	213,4,c	;volatile
  7096                           
  7097                           ;../rc_servo.c: 71:     TMR0H=(65535-2500)>>8;
  7098   002D52  0EF6               	movlw	246
  7099   002D54  6ED4               	movwf	212,c	;volatile
  7100                           
  7101                           ;../rc_servo.c: 72:     TMR0L=(unsigned char)(65535-2500);
  7102   002D56  0E3B               	movlw	59
  7103   002D58  6ED3               	movwf	211,c	;volatile
  7104   002D5A                     
  7105                           ;../rc_servo.c: 73:     T0CON0bits.T0EN=1;
  7106   002D5A  8ED5               	bsf	213,7,c	;volatile
  7107   002D5C  0012               	return		;funcret
  7108   002D5E                     __end_of_Timer0_init:
  7109                           	callstack 0
  7110                           
  7111 ;; *************** function _Interrupts_init *****************
  7112 ;; Defined at:
  7113 ;;		line 8 in file "../rc_servo.c"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;		None
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;		None
  7118 ;; Return value:  Size  Location     Type
  7119 ;;                  1    wreg      void 
  7120 ;; Registers used:
  7121 ;;		None
  7122 ;; Tracked objects:
  7123 ;;		On entry : 0/0
  7124 ;;		On exit  : 0/0
  7125 ;;		Unchanged: 0/0
  7126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7131 ;;Total ram usage:        0 bytes
  7132 ;; Hardware stack levels used: 1
  7133 ;; Hardware stack levels required when called: 1
  7134 ;; This function calls:
  7135 ;;		Nothing
  7136 ;; This function is called by:
  7137 ;;		_main
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           	psect	text46
  7142   002D94                     __ptext46:
  7143                           	callstack 0
  7144   002D94                     _Interrupts_init:
  7145                           	callstack 29
  7146   002D94                     
  7147                           ;../rc_servo.c: 12:     INTCONbits.IPEN = 1;
  7148   002D94  8AF2               	bsf	242,5,c	;volatile
  7149                           
  7150                           ;../rc_servo.c: 13:     INTCONbits.PEIE = 1;
  7151   002D96  8CF2               	bsf	242,6,c	;volatile
  7152                           
  7153                           ;../rc_servo.c: 16:     PIE0bits.TMR0IE = 1;
  7154   002D98  010E               	movlb	14	; () banked
  7155   002D9A  8B29               	bsf	41,5,b	;volatile
  7156                           
  7157                           ;../rc_servo.c: 17:     IPR0bits.TMR0IP = 1;
  7158   002D9C  8B1F               	bsf	31,5,b	;volatile
  7159                           
  7160                           ;../rc_servo.c: 18:     PIR0bits.TMR0IF = 0;
  7161   002D9E  9B33               	bcf	51,5,b	;volatile
  7162                           
  7163                           ;../rc_servo.c: 20:     PIE2bits.C1IE=1;
  7164   002DA0  812B               	bsf	43,0,b	;volatile
  7165                           
  7166                           ;../rc_servo.c: 21:     IPR2bits.C1IP=0;
  7167   002DA2  9121               	bcf	33,0,b	;volatile
  7168                           
  7169                           ;../rc_servo.c: 22:     PIR2bits.C1IF=0;
  7170   002DA4  9135               	bcf	53,0,b	;volatile
  7171                           
  7172                           ;../rc_servo.c: 24:     INTCONbits.GIE = 1;
  7173   002DA6  8EF2               	bsf	242,7,c	;volatile
  7174   002DA8                     
  7175                           ; BSR set to: 14
  7176   002DA8  0012               	return		;funcret
  7177   002DAA                     __end_of_Interrupts_init:
  7178                           	callstack 0
  7179                           
  7180 ;; *************** function _HighISR *****************
  7181 ;; Defined at:
  7182 ;;		line 31 in file "../rc_servo.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;		None
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;		None
  7187 ;; Return value:  Size  Location     Type
  7188 ;;                  1    wreg      void 
  7189 ;; Registers used:
  7190 ;;		wreg, status,2, status,0
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7200 ;;Total ram usage:        0 bytes
  7201 ;; Hardware stack levels used: 1
  7202 ;; This function calls:
  7203 ;;		Nothing
  7204 ;; This function is called by:
  7205 ;;		Interrupt level 2
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           	psect	intcode
  7210   000008                     __pintcode:
  7211                           	callstack 0
  7212   000008                     _HighISR:
  7213                           	callstack 22
  7214                           
  7215                           ; BSR set to: 14
  7216                           ;incstack = 0
  7217   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7218   00000A                     
  7219                           ;../rc_servo.c: 33:     if(PIR0bits.TMR0IF||!PORTFbits.RF2){
  7220   00000A  010E               	movlb	14	; () banked
  7221   00000C  BB33               	btfsc	51,5,b	;volatile
  7222   00000E  EF0B  F000         	goto	i2u190_41
  7223   000012  EF0D  F000         	goto	i2u190_40
  7224   000016                     i2u190_41:
  7225   000016  EF14  F000         	goto	i2l3193
  7226   00001A                     i2u190_40:
  7227   00001A                     
  7228                           ; BSR set to: 14
  7229   00001A  B48E               	btfsc	142,2,c	;volatile
  7230   00001C  EF12  F000         	goto	i2u191_41
  7231   000020  EF14  F000         	goto	i2u191_40
  7232   000024                     i2u191_41:
  7233   000024  EF1D  F000         	goto	i2l380
  7234   000028                     i2u191_40:
  7235   000028                     i2l3193:
  7236                           
  7237                           ; BSR set to: 14
  7238                           ;../rc_servo.c: 36:         time++;
  7239   000028  0101               	movlb	1	; () banked
  7240   00002A  4BF4               	infsnz	_time& (0+255),f,b
  7241   00002C  2BF5               	incf	(_time+1)& (0+255),f,b
  7242   00002E                     
  7243                           ; BSR set to: 1
  7244                           ;../rc_servo.c: 39:         TMR0L = 0b11011011;
  7245   00002E  0EDB               	movlw	219
  7246   000030  6ED3               	movwf	211,c	;volatile
  7247   000032                     
  7248                           ; BSR set to: 1
  7249                           ;../rc_servo.c: 40:         TMR0H = 0b00001011;
  7250   000032  0E0B               	movlw	11
  7251   000034  6ED4               	movwf	212,c	;volatile
  7252   000036                     
  7253                           ; BSR set to: 1
  7254                           ;../rc_servo.c: 42:         PIR0bits.TMR0IF=0;
  7255   000036  010E               	movlb	14	; () banked
  7256   000038  9B33               	bcf	51,5,b	;volatile
  7257   00003A                     i2l380:
  7258                           
  7259                           ; BSR set to: 14
  7260   00003A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7261   00003C  0011               	retfie		f
  7262   00003E                     __end_of_HighISR:
  7263                           	callstack 0
  7264                           
  7265                           	psect	rparam
  7266   000000                     
  7267                           	psect	temp
  7268   00005F                     btemp:
  7269                           	callstack 0
  7270   00005F                     	ds	1
  7271   000000                     int$flags	set	btemp
  7272   000000                     wtemp8	set	btemp+1
  7273   000000                     ttemp5	set	btemp+1
  7274   000000                     ttemp6	set	btemp+4
  7275   000000                     ttemp7	set	btemp+8
  7276                           
  7277                           	psect	idloc
  7278                           
  7279                           ;Config register IDLOC0 @ 0x200000
  7280                           ;	unspecified, using default values
  7281   200000                     	org	2097152
  7282   200000  0FFF               	dw	4095
  7283                           
  7284                           ;Config register IDLOC1 @ 0x200002
  7285                           ;	unspecified, using default values
  7286   200002                     	org	2097154
  7287   200002  0FFF               	dw	4095
  7288                           
  7289                           ;Config register IDLOC2 @ 0x200004
  7290                           ;	unspecified, using default values
  7291   200004                     	org	2097156
  7292   200004  0FFF               	dw	4095
  7293                           
  7294                           ;Config register IDLOC3 @ 0x200006
  7295                           ;	unspecified, using default values
  7296   200006                     	org	2097158
  7297   200006  0FFF               	dw	4095
  7298                           
  7299                           ;Config register IDLOC4 @ 0x200008
  7300                           ;	unspecified, using default values
  7301   200008                     	org	2097160
  7302   200008  0FFF               	dw	4095
  7303                           
  7304                           ;Config register IDLOC5 @ 0x20000A
  7305                           ;	unspecified, using default values
  7306   20000A                     	org	2097162
  7307   20000A  0FFF               	dw	4095
  7308                           
  7309                           ;Config register IDLOC6 @ 0x20000C
  7310                           ;	unspecified, using default values
  7311   20000C                     	org	2097164
  7312   20000C  0FFF               	dw	4095
  7313                           
  7314                           ;Config register IDLOC7 @ 0x20000E
  7315                           ;	unspecified, using default values
  7316   20000E                     	org	2097166
  7317   20000E  0FFF               	dw	4095
  7318                           
  7319                           	psect	config
  7320                           
  7321                           ;Config register CONFIG1L @ 0x300000
  7322                           ;	External Oscillator mode Selection bits
  7323                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7324                           ;	Power-up default value for COSC bits
  7325                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7326   300000                     	org	3145728
  7327   300000  AA                 	db	170
  7328                           
  7329                           ;Config register CONFIG1H @ 0x300001
  7330                           ;	unspecified, using default values
  7331                           ;	Clock Out Enable bit
  7332                           ;	CLKOUTEN = 0x1, unprogrammed default
  7333                           ;	Clock Switch Enable bit
  7334                           ;	CSWEN = 0x1, unprogrammed default
  7335                           ;	Fail-Safe Clock Monitor Enable bit
  7336                           ;	FCMEN = 0x1, unprogrammed default
  7337   300001                     	org	3145729
  7338   300001  FF                 	db	255
  7339                           
  7340                           ;Config register CONFIG2L @ 0x300002
  7341                           ;	unspecified, using default values
  7342                           ;	Master Clear Enable bit
  7343                           ;	MCLRE = 0x1, unprogrammed default
  7344                           ;	Power-up Timer Enable bit
  7345                           ;	PWRTE = 0x1, unprogrammed default
  7346                           ;	Low-power BOR enable bit
  7347                           ;	LPBOREN = 0x1, unprogrammed default
  7348                           ;	Brown-out Reset Enable bits
  7349                           ;	BOREN = 0x3, unprogrammed default
  7350   300002                     	org	3145730
  7351   300002  FF                 	db	255
  7352                           
  7353                           ;Config register CONFIG2H @ 0x300003
  7354                           ;	unspecified, using default values
  7355                           ;	Brown Out Reset Voltage selection bits
  7356                           ;	BORV = 0x3, unprogrammed default
  7357                           ;	ZCD Disable bit
  7358                           ;	ZCD = 0x1, unprogrammed default
  7359                           ;	PPSLOCK bit One-Way Set Enable bit
  7360                           ;	PPS1WAY = 0x1, unprogrammed default
  7361                           ;	Stack Full/Underflow Reset Enable bit
  7362                           ;	STVREN = 0x1, unprogrammed default
  7363                           ;	Debugger Enable bit
  7364                           ;	DEBUG = 0x1, unprogrammed default
  7365                           ;	Extended Instruction Set Enable bit
  7366                           ;	XINST = 0x1, unprogrammed default
  7367   300003                     	org	3145731
  7368   300003  FF                 	db	255
  7369                           
  7370                           ;Config register CONFIG3L @ 0x300004
  7371                           ;	WDT Period Select bits
  7372                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7373                           ;	WDT operating mode
  7374                           ;	WDTE = OFF, WDT Disabled
  7375   300004                     	org	3145732
  7376   300004  9F                 	db	159
  7377                           
  7378                           ;Config register CONFIG3H @ 0x300005
  7379                           ;	unspecified, using default values
  7380                           ;	WDT Window Select bits
  7381                           ;	WDTCWS = 0x7, unprogrammed default
  7382                           ;	WDT input clock selector
  7383                           ;	WDTCCS = 0x7, unprogrammed default
  7384   300005                     	org	3145733
  7385   300005  FF                 	db	255
  7386                           
  7387                           ;Config register CONFIG4L @ 0x300006
  7388                           ;	unspecified, using default values
  7389                           ;	Write Protection Block 0
  7390                           ;	WRT0 = 0x1, unprogrammed default
  7391                           ;	Write Protection Block 1
  7392                           ;	WRT1 = 0x1, unprogrammed default
  7393                           ;	Write Protection Block 2
  7394                           ;	WRT2 = 0x1, unprogrammed default
  7395                           ;	Write Protection Block 3
  7396                           ;	WRT3 = 0x1, unprogrammed default
  7397                           ;	Write Protection Block 3
  7398                           ;	WRT4 = 0x1, unprogrammed default
  7399                           ;	Write Protection Block 3
  7400                           ;	WRT5 = 0x1, unprogrammed default
  7401                           ;	Write Protection Block 3
  7402                           ;	WRT6 = 0x1, unprogrammed default
  7403                           ;	Write Protection Block 3
  7404                           ;	WRT7 = 0x1, unprogrammed default
  7405   300006                     	org	3145734
  7406   300006  FF                 	db	255
  7407                           
  7408                           ;Config register CONFIG4H @ 0x300007
  7409                           ;	unspecified, using default values
  7410                           ;	Configuration Register Write Protection bit
  7411                           ;	WRTC = 0x1, unprogrammed default
  7412                           ;	Boot Block Write Protection bit
  7413                           ;	WRTB = 0x1, unprogrammed default
  7414                           ;	Data EEPROM Write Protection bit
  7415                           ;	WRTD = 0x1, unprogrammed default
  7416                           ;	Scanner Enable bit
  7417                           ;	SCANE = 0x1, unprogrammed default
  7418                           ;	Low Voltage Programming Enable bit
  7419                           ;	LVP = 0x1, unprogrammed default
  7420   300007                     	org	3145735
  7421   300007  FF                 	db	255
  7422                           
  7423                           ;Config register CONFIG5L @ 0x300008
  7424                           ;	unspecified, using default values
  7425                           ;	UserNVM Program Memory Code Protection bit
  7426                           ;	CP = 0x1, unprogrammed default
  7427                           ;	DataNVM Memory Code Protection bit
  7428                           ;	CPD = 0x1, unprogrammed default
  7429   300008                     	org	3145736
  7430   300008  FF                 	db	255
  7431                           
  7432                           ;Config register CONFIG5H @ 0x300009
  7433                           ;	unspecified, using default values
  7434   300009                     	org	3145737
  7435   300009  FF                 	db	255
  7436                           
  7437                           ;Config register CONFIG6L @ 0x30000A
  7438                           ;	unspecified, using default values
  7439                           ;	Table Read Protection Block 0
  7440                           ;	EBTR0 = 0x1, unprogrammed default
  7441                           ;	Table Read Protection Block 1
  7442                           ;	EBTR1 = 0x1, unprogrammed default
  7443                           ;	Table Read Protection Block 2
  7444                           ;	EBTR2 = 0x1, unprogrammed default
  7445                           ;	Table Read Protection Block 3
  7446                           ;	EBTR3 = 0x1, unprogrammed default
  7447                           ;	Table Read Protection Block 4
  7448                           ;	EBTR4 = 0x1, unprogrammed default
  7449                           ;	Table Read Protection Block 5
  7450                           ;	EBTR5 = 0x1, unprogrammed default
  7451                           ;	Table Read Protection Block 6
  7452                           ;	EBTR6 = 0x1, unprogrammed default
  7453                           ;	Table Read Protection Block 7
  7454                           ;	EBTR7 = 0x1, unprogrammed default
  7455   30000A                     	org	3145738
  7456   30000A  FF                 	db	255
  7457                           
  7458                           ;Config register CONFIG6H @ 0x30000B
  7459                           ;	unspecified, using default values
  7460                           ;	Boot Block Table Read Protection bit
  7461                           ;	EBTRB = 0x1, unprogrammed default
  7462   30000B                     	org	3145739
  7463   30000B  FF                 	db	255
  7464                           tosu	equ	0xFFF
  7465                           tosh	equ	0xFFE
  7466                           tosl	equ	0xFFD
  7467                           stkptr	equ	0xFFC
  7468                           pclatu	equ	0xFFB
  7469                           pclath	equ	0xFFA
  7470                           pcl	equ	0xFF9
  7471                           tblptru	equ	0xFF8
  7472                           tblptrh	equ	0xFF7
  7473                           tblptrl	equ	0xFF6
  7474                           tablat	equ	0xFF5
  7475                           prodh	equ	0xFF4
  7476                           prodl	equ	0xFF3
  7477                           indf0	equ	0xFEF
  7478                           postinc0	equ	0xFEE
  7479                           postdec0	equ	0xFED
  7480                           preinc0	equ	0xFEC
  7481                           plusw0	equ	0xFEB
  7482                           fsr0h	equ	0xFEA
  7483                           fsr0l	equ	0xFE9
  7484                           wreg	equ	0xFE8
  7485                           indf1	equ	0xFE7
  7486                           postinc1	equ	0xFE6
  7487                           postdec1	equ	0xFE5
  7488                           preinc1	equ	0xFE4
  7489                           plusw1	equ	0xFE3
  7490                           fsr1h	equ	0xFE2
  7491                           fsr1l	equ	0xFE1
  7492                           bsr	equ	0xFE0
  7493                           indf2	equ	0xFDF
  7494                           postinc2	equ	0xFDE
  7495                           postdec2	equ	0xFDD
  7496                           preinc2	equ	0xFDC
  7497                           plusw2	equ	0xFDB
  7498                           fsr2h	equ	0xFDA
  7499                           fsr2l	equ	0xFD9
  7500                           status	equ	0xFD8

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         187
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     92      94
    BANK0           160    159     160
    BANK1           256    240     252
    BANK2           256      0     172
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2391$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2338$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2338$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    motor_action@r	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_action@l	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    spin_180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    spin_180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_onesquare@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_onesquare@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_fromcard@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_fromcard@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    S589DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    S589DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    color_processor_hard@calibrated	PTR unsigned int  size(2) Largest target is 64
		 -> main@color_calibrated(BANK1[64]), 

    color_processor_hard@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_processor_easy@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_read@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), main@RGB_calibrated(BANK1[8]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _motor_action->_left_135
    _motor_action->_left_90
    _motor_action->_reverse_fromcard
    _motor_action->_reverse_onesquare
    _motor_action->_right_135
    _motor_action->_right_90
    _motor_action->_spin_180
    _stop->_setMotorPWM
    _spin_180->_setMotorPWM
    _right_90->_setMotorPWM
    _right_135->_setMotorPWM
    _reverse_onesquare->_setMotorPWM
    _reverse_fromcard->_setMotorPWM
    _left_90->_setMotorPWM
    _left_135->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _color_read->_color_read_Blue
    _color_read->_color_read_Green
    _color_read->_color_read_Luminosity
    _color_read->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Luminosity->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               385   385      0   55878
                                             88 COMRAM     4     4      0
                                             27 BANK0    132   132      0
                                              0 BANK1    240   240      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
               _color_processor_easy
               _color_processor_hard
                         _color_read
                            _forward
                    _initDCmotorsPWM
                         _initUSART4
                       _motor_action
                  _sendStringSerial4
                        _setMotorPWM
                           _spin_180
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    5722
                                              0 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5219
                                             80 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    4869
                                             62 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3649
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     219
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _motor_action                                         8     2      6   30862
                                             33 COMRAM     8     2      6
                           _left_135
                            _left_90
                   _reverse_fromcard
                  _reverse_onesquare
                          _right_135
                           _right_90
                           _spin_180
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 7     3      4    5075
                                             25 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _spin_180                                             8     4      4    3403
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_90                                             8     4      4    3555
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_135                                            8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_onesquare                                    8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_fromcard                                     8     4      4    4163
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_90                                              8     4      4    3555
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_135                                             8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                              6     2      4    3555
                                             25 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    2703
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read                                           4     2      2     768
                                             11 COMRAM     4     2      2
                    _color_read_Blue
                   _color_read_Green
              _color_read_Luminosity
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Luminosity                                7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_processor_hard                                26    22      4     829
                                              0 COMRAM    24    20      4
 ---------------------------------------------------------------------------------
 (1) _color_processor_easy                                10     8      2     346
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_processor_easy
   _color_processor_hard
   _color_read
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Luminosity
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _motor_action
     _left_135
       _setMotorPWM
     _left_90
       _setMotorPWM
     _reverse_fromcard
       _setMotorPWM
     _reverse_onesquare
       _setMotorPWM
     _right_135
       _setMotorPWM
     _right_90
       _setMotorPWM
     _spin_180
       _setMotorPWM
     _stop
       _setMotorPWM
   _sendStringSerial4
     _sendCharSerial4
   _setMotorPWM
   _spin_180
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
   _stop

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      60        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      AC       9       67.2%
BITBANK1           100      0       0       6        0.0%
BANK1              100     F0      FC       7       98.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      A0       5      100.0%
BITBIGSFRllllhh     91      0       0      40        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5C      5E       1      100.0%
BITBIGSFRllllll     32      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      49        0.0%
BITBIGSFRllllll     26      0       0      58        0.0%
BITBIGSFRllllhl     20      0       0      43        0.0%
BITBIGSFRhhlhhh     1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      35        0.0%
BITBIGSFRhhlhl      13      0       0      34        0.0%
BITBIGSFRhllh       11      0       0      37        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      44        0.0%
BITBIGSFRllllhh      8      0       0      41        0.0%
BITBIGSFRllllll      7      0       0      54        0.0%
BITBIGSFRllllll      7      0       0      52        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRllllll      6      0       0      48        0.0%
BITBIGSFRllllll      5      0       0      47        0.0%
BITBIGSFRhlll        5      0       0      38        0.0%
BITBIGSFRllllll      3      0       0      46        0.0%
BITBIGSFRllh         2      0       0      39        0.0%
BITBIGSFRllllll      1      0       0      50        0.0%
BITBIGSFRllllll      1      0       0      51        0.0%
BITBIGSFRllllll      1      0       0      55        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      56        0.0%
BITBIGSFRllllhl      1      0       0      42        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2A6      59        0.0%
DATA                 0      0     2A6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Dec 11 13:39:42 2022

                 _color_read_Red 2A04                  _color_read_Blue 2AF4  
                             l33 295E                               l42 2A52  
                             l51 2300                               l36 2D3C  
                             l45 2AF2                               l70 19F0  
                             l39 2AA2                               l64 18D2  
                             l48 2B42                               l58 225A  
                             l66 1934                               l68 1996  
                             l98 2CCE                     ___awdiv@sign 000C  
            ___wmul@multiplicand 0003                 _color_read_Green 2AA4  
              ??_Interrupts_init 0001                              l101 2CD0  
                            l110 2DBE                              l104 2CF6  
                            l113 2DC8                              l201 103A  
                            l107 2DD2                              l116 2DB4  
                            l204 1078                              l205 108C  
                            l214 1286                              l119 2C0A  
                            l303 24EA                              l313 2772  
                            l308 258C                              l261 2BC8  
                            l326 180C                              l424 2D7A  
                            l273 2800                              l433 2D7E  
                            l442 2C7A                              l283 26D0  
                            l372 2DA8                              l268 1BC4  
                            l436 2D92                              l445 2D1C  
                            l293 23A4                              l197 0EAE  
                            l278 288A                              l383 2D5C  
                            l288 262E                              l298 2448  
                            l572 1EB0                              l559 1D4C  
                            l676 219C                motor_action@color 0022  
                            u970 2022                              u971 201E  
                            u980 2034                              u981 2030  
                            u990 205C                              u991 2058  
                            _abs 2C0C                              _pad 288C  
                            wreg 000FE8                             l1200 20D8  
                           l1211 2DD4                             l1123 29B0  
                           ?_abs 0013                             l1208 2B86  
                           l1145 28AE                             l3001 0E18  
                           l1154 13CE                             l3011 0E34  
                           l3003 0E24                             l1156 13D6  
                           l2301 1DB2                             l1149 2904  
                           l1157 141C                             l1181 2A02  
                           l3101 116A                             l3021 0E4E  
                           l3013 0E34                             l3005 0E28  
                           l2311 1E28                             l2303 1DD0  
                           l2231 205C                             l2223 2010  
                           l1175 200E                             l3111 1206  
                           l3103 1186                             l3031 0E76  
                           l3023 0E52                             l3015 0E3A  
                           l3007 0E2C                             l1168 15BE  
                           l2321 1E90                             l2313 1E48  
                           l2305 1DD8                             l1185 2C42  
                           l2233 2092                             l2225 2022  
                           l2241 2B62                             l2401 1376  
                           l3121 124A                             l3113 120C  
                           l3105 11A0                             l3041 0EBC  
                           l3033 0E7E                             l3025 0E5A  
                           l3017 0E3E                             l3009 0E30  
                           l2251 1BF8                             l2315 1E5A  
                           l2307 1DEC                             l2227 2034  
                           l2243 2B66                             l2331 28BA  
                           l2411 13EE                             l2403 1386  
                           l3131 1290                             l3123 125E  
                           l3115 1214                             l3107 11DE  
                           l3051 0F00                             l3035 0E8A  
                           l3027 0E5E                             l3019 0E46  
                           l1188 2C4A                             l2261 1C3A  
                           l2253 1BFC                             l2245 1BC6  
                           l2309 1DFA                             l2317 1E60  
                           l2341 2C26                             l2229 203E  
                           l2237 2B44                             l2333 28CE  
                           l2325 288C                             l2421 1424  
                           l2413 13F4                             l2405 13A6  
                           l2501 1EFA                             l3141 131E  
                           l3133 12BE                             l3125 1268  
                           l3109 11EA                             l3117 121C  
                           l3061 0FDA                             l3053 0F36  
                           l3037 0E96                             l3029 0E72  
                           l2343 2CD0                             l3223 17CE  
                           l2271 1C94                             l2263 1C58  
                           l2255 1C0A                             l2247 1BCA  
                           l2319 1E70                             l2239 2B50  
                           l2335 28D2                             l2327 289A  
                           l2431 14C2                             l2423 142E  
                           l2415 1404                             l2407 13C2  
                           l2503 1F0A                             l3143 1332  
                           l3135 12D6                             l3119 1234  
                           l3071 101E                             l3063 0FE6  
                           l3055 0F6C                             l3047 0EC6  
                           l3039 0EA2                             l2345 2CE0  
                           l2361 20F8                             l2353 20DA  
                           l2601 24B8                             l2273 1CC2  
                           l2265 1C60                             l2281 1CFC  
                           l2257 1C2A                             l2249 1BD8  
                           l2337 28F0                             l2329 28A6  
                           l2441 1588                             l2425 1434  
                           l2433 1526                             l2417 1410  
                           l2409 13DE                             l2513 1FD0  
                           l2505 1F2A                             l3137 12EE  
                           l3129 1288                             l3081 10AE  
                           l3073 104A                             l3065 0FFE  
                           l3057 0FA2                             l3049 0ED2  
                           l2531 2CBA                             l2523 2CA6  
                           l2451 2DCE                             l2371 212C  
                           l2363 2106                             l2355 20DE  
                           l2347 2CF8                             l2603 24D4  
                           l2283 1D0C                             l2275 1CE2  
                           l2267 1C74                             l2259 1C2E  
                           l2291 1D52                             l2339 2C0C  
                           l2443 158E                             l2435 1540  
                           l2427 14B6                             l2419 1418  
                           l2507 1F4A                             l3139 12F4  
                           l3091 1108                             l3083 10BA  
                           l3075 1086                             l3067 1000  
                           l3059 0FA4                             l2533 2CBC  
                           l2525 2CB0                             l2453 2DAC  
                           l2461 2DB6                             l2381 2166  
                           l2373 2134                             l2365 210E  
                           l2357 20EC                             l2349 2D14  
                           l2621 2690                             l2613 2658  
                           l2605 2630                             l2285 1D2C  
                           l2277 1CE4                             l2269 1C82  
                           l2293 1D60                             l2445 159E  
                           l2437 155E                             l2429 14BC  
                           l2509 1FA0                             l2517 1FE2  
                           l3093 111C                             l3085 10D2  
                           l3077 1092                             l3069 1018  
                           l2527 2CB6                             l2455 2DB0  
                           l2535 2D20                             l2471 2BE0  
                           l2463 2DBA                             l2551 2AEA  
                           l2543 2A04                             l2391 218C  
                           l2383 216E                             l2375 213C  
                           l2367 2112                             l2359 20F4  
                           l2623 269C                             l2615 2670  
                           l2607 2650                             l2711 253A  
                           l2279 1CF6                             l2295 1D80  
                           l2439 1578                             l3095 1128  
                           l3087 10EE                             l3079 109A  
                           l2529 2CB8                             l2449 2DCA  
                           l2457 2DC0                             l2801 295A  
                           l2473 2C06                             l2465 2BCC  
                           l2537 2A54                             l2545 2A4A  
                           l2393 2194                             l2385 2170  
                           l2377 214A                             l2369 211A  
                           l2481 1A0E                             l2721 26D2  
                           l2625 26B8                             l2617 267C  
                           l2641 25E6                             l2713 2546  
                           l2705 2514                             l2561 2774  
                           l2297 1D84                             l2289 1D4E  
                           l3097 1136                             l3089 10F6  
                           l2459 2DC4                             l2803 295C  
                           l2475 2C08                             l2467 2BD0  
                           l2555 2AF4                             l2539 2A9A  
                           l2811 22B8                             l2387 2176  
                           l2379 2150                             l2491 1B5C  
                           l2483 1A70                             l2731 2708  
                           l2723 26F2                             l2619 2688  
                           l2643 25EE                             l2635 25B6  
                           l2627 258E                             l2715 254E  
                           l2707 2520                             l2651 2322  
                           l2571 27B4                             l2563 2794  
                           l2299 1D92                             l3099 114E  
                           l2901 2D50                             l2821 2206  
                           l2469 2BD8                             l2557 2B3A  
                           l2549 2AA4                             l2813 22D0  
                           l2805 225C                             l2389 217C  
                           l2485 1AB6                             l2741 2740  
                           l2733 2714                             l2645 25FA  
                           l2637 25CE                             l2629 25AE  
                           l2717 255A                             l2709 252E  
                           l2661 2344                             l2581 244A  
                           l2573 27C0                             l2397 1342  
                           l2493 1EB2                             l2903 2D5A  
                           l2831 2252                             l2823 2212  
                           l2815 219E                             l2807 2270  
                           l2487 1AD6                             l2479 19F2  
                           l2911 2D74                             l2743 275C  
                           l2735 2720                             l2647 2616  
                           l2639 25DA                             l2719 2576  
                           l2671 238C                             l2663 2350  
                           l2591 247E                             l2583 246A  
                           l2575 27CC                             l2399 1362  
                           l2495 1EDA                             l2751 29BE  
                           l2761 290A                             l2825 2228  
                           l2817 21DA                             l2809 2288  
                           l2489 1AF2                             l2913 2D76  
                           l2905 2D5E                             l2737 272C  
                           l2729 26FA                             l2681 23CE  
                           l2673 23A6                             l2665 235C  
                           l2657 232A                             l2649 2302  
                           l2593 248C                             l2577 27DA  
                           l2569 279C                             l2745 2D7E  
                           l2497 1EE8                             l2753 29DA  
                           l2921 297A                             l2771 293A  
                           l2763 2914                             l2827 223E  
                           l2819 21F0                             l2851 18CE  
                           l2843 184A                             l2835 180E  
                           l2915 2D78                             l2907 2D68  
                           l2739 2734                             l2691 2408  
                           l2683 23DC                             l2675 23C6  
                           l2667 2364                             l2659 2336  
                           l2595 2498                             l2579 27E6  
                           l2747 2D8E                             l2931 2C50  
                           l2499 1EF6                             l2755 29FA  
                           l2923 2982                             l2781 2944  
                           l2773 293C                             l2765 2924  
                           l2829 224A                             l2861 1970  
                           l2853 18EC                             l2845 1886  
                           l2837 184A                             l2909 2D6A  
                           l2693 2414                             l2685 23E8  
                           l2669 2370                             l2597 24A4  
                           l2589 2472                             l2933 2C5E  
                           l2749 29B2                             l2925 299E  
                           l2917 2960                             ?_pad 0011  
                           l2791 294E                             l2783 2946  
                           l2775 293E                             l2767 292E  
                           l2759 2906                             l2863 1992  
                           l2855 190E                             l2847 188A  
                           l2951 285A                             l2695 2430  
                           l2687 23F4                             l2599 24AC  
                           l2935 2C62                             l2919 2972  
                           l2793 2950                             l2785 2948  
                           l2777 2940                             l2769 2938  
                           l2865 19BC                             l2857 1930  
                           l2849 18AC                             l2953 2862  
                           l2945 282A                             l2937 2802  
                           l2689 2400                             l2697 24EC  
                           l2961 15EC                             l2929 2C4C  
                           l2795 2952                             l2787 294A  
                           l2779 2942                             l2867 19CC  
                           l2875 19E8                             l2859 194E  
                           l2955 286E                             l2947 2842  
                           l2939 2822                             l2891 2BC4  
                           l2883 2B88                             l2699 250C  
                           l2971 1670                             l2963 1604  
                           l2797 2954                             l2789 294C  
                           l2869 19DC                             l2949 284E  
                           l2893 2BC6                             l2885 2B98  
                           l2981 16F0                             l2973 1684  
                           l2965 1618                             l2957 15C0  
                           l2895 2D94                             l2799 2956  
                           l2887 2BAC                             l2983 1708  
                           l2975 169C                             l2967 1630  
                           l2959 15C4                             l2897 2D3E  
                           l2889 2BB0                             l2985 1734  
                           l2977 16C4                             l2969 1658  
                           l2993 17B8                             l2899 2D46  
                           l2987 1760                             l2979 16DC  
                           l2989 178C                             l2999 0E14  
                           STR_1 0E04                             STR_2 0E01  
                           u1000 2092                             u1001 208E  
                           u1010 2B86                             u1011 2B82  
                           u1020 1BD8                             u1100 1D92  
                           u1021 1BD4                             u1101 1D8E  
                           u1030 1C0A                             u1110 1DD0  
                           u1031 1C06                             u1111 1DCC  
                           u1200 20EC                             u1120 1DFA  
                           u1201 20E8                             u1041 1C34  
                           u1121 1DF6                             u1210 2106  
                           u1050 1C58                             u1130 1E28  
                           u1211 2102                             u1051 1C54  
                           u1131 1E24                             u1220 212C  
                           u1060 1C82                             u1140 1E70  
                           u1300 13EE                             u1221 2128  
                           u1061 1C7E                             u1141 1E6C  
                           u1301 13EA                             u1230 214A  
                           u1070 1CC2                             u1150 289A  
                           u1310 1404                             u1231 2146  
                           u2007 24A6                             u1071 1CBE  
                           u1151 2896                             u1311 1400  
                           u1240 2166                             u1080 1D0C  
                           u1160 28F0                             u1320 1540  
                           u1241 2162                             u2017 24DE  
                           u1081 1D08                             u1161 28EC  
                           u1321 153C                             u1250 218C  
                           u1090 1D60                             u1170 2C26  
                           u1330 155E                             u1251 2188  
                           u2107 2402                             u2027 235E  
                           u1091 1D5C                             u1171 2C22  
                           u1331 155A                             u1180 2CE0  
                           u1404 1B4C                             u1500 2430  
                           u1340 1578                             u1260 1372  
                           u1420 1EDA                             u1181 2CDC  
                           u1405 1B48                             u2117 243A  
                           u1501 242C                             u2037 2396  
                           u1341 1574                             u1261 136C  
                           u1421 1ED6                             u1190 2CF6  
                           u1414 1BB6                             u1510 2576  
                           u1350 1588                             u1270 1374  
                           u1430 1F2A                             u1191 2CF2  
                           u1415 1BB2                             u2127 272E  
                           u1511 2572                             u2047 2548  
                           u1351 1584                             u1431 1F26  
                           u1600 18CE                             u1360 2BF4  
                           u1520 275C                             u1280 1386  
                           u1440 1F4A                     _BAUD4CONbits 000EE9  
                           u1601 18CA                             u1361 2BEC  
                           u2137 2766                             u1521 2758  
                           u2057 2580                             u1281 1382  
                           u1441 1F46                             _LATE 000F7D  
                           u1610 18E4                             u1450 2800  
                           u1530 2D8E                             u1290 13C2  
                           u1611 18DE                             u2147 285C  
                           u2067 25E8                             u1451 27FC  
                           u1531 2D8A                             u1291 13BE  
                           _LATG 000F7F                             u1700 19AA  
                           u1620 18E6                             u1380 1A0E  
                           u1460 24D4                             u1540 29FA  
                           u2157 227A                             u1381 1A0A  
                           u2077 2620                             u1461 24D0  
                           u1541 29F6                             u1550 21F0  
                           u1710 19BC                             u1630 190E  
                           u1390 1AF2                             u1470 26B8  
                           u1551 21EC                             u1711 19B8  
                           u1631 190A                             u2167 22AA  
                           u1391 1AEE                             u1471 26B4  
                           u2087 268A                             u1560 2206  
                           u1720 19CC                             u1640 1930  
                           u1480 2616                             u1800 1066  
                           u1561 2202                             u1721 19C8  
                           u1641 192C                             u2177 22DA  
                           u2097 26C2                             u1481 2612  
                           u1801 105E                             u1570 2228  
                           u1730 19DC                             u1650 1946  
                           u1378 2BF6                             u1490 238C  
                           u1810 1078                             _T2PR 000FBC  
                           u2187 291A                             u1571 2224  
                           u1731 19D8                             u1651 1940  
                           u1491 2388                             u1811 1074  
                           u1580 223E                             u1660 1948  
                           u1740 2C7A                             u1820 1086  
                           u1581 223A                             u1741 2C76  
                           u1821 1082                             u1670 1970  
                           u1590 18AC                             u1750 288A  
                           u1830 10D2                             u1671 196C  
                           u1591 18A8                             u1751 2886  
                           u1831 10CE                             u1680 1992  
                           u1840 10EE                             u1808 1068  
                           u1681 198E                             u1841 10EA  
                           u1761 0E9C                             u1690 19A8  
                           u1850 1108                             u1691 19A2  
                           u1851 1104                             u1771 0EA8  
                           u1860 1136                             u1780 0EBC  
                           u1861 1132                             u1781 0EB8  
                           u1870 124A                             u1790 103A  
                           u1871 1246                             u1791 1036  
                           u1927 0FF0                             u1880 1282  
                           u1881 127E                             u1937 100A  
                           u1890 131E                             u1891 131A  
                           u1947 1226                             u1957 12E0  
                           u1967 15F6                             u1977 1662  
                           u1987 16CE                             u1997 27D2  
                           abs@a 0013                             _dbuf 028C  
                           _main 0E14                             _dtoa 1342  
                           _prec 01F2                             _time 01F4  
                           pad@i 0018                             pad@p 0015  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             pad@w 001A  
                           fsr2l 000FD9                             btemp 005F  
                           _stop 2774                             prodh 000FF4  
                           prodl 000FF3                             start 003E  
         __end_of_color_read_Red 2A54                  __end_of_HighISR 003E  
                   ___param_bank 000000                            ??_abs 0015  
                          ??_pad 0017         _color_processor_hard$370 000A  
       _color_processor_hard$372 000B         _color_processor_hard$374 000C  
                __end_of___aodiv 1D4E                            ?_main 0001  
                          ?_dtoa 001C                  __end_of___aomod 1EB2  
                __end_of___awdiv 219E          ??_color_read_Luminosity 0007  
                          ?_stop 001A                  ___awdiv@divisor 0009  
                          i2l380 003A                  ___awdiv@counter 000B  
                   vfpfcnvrt@fmt 0041                            _TMR0H 000FD4  
                          _TMR0L 000FD3                     main@readout2 007B  
                   main@readout3 0100          __end_of_sendCharSerial4 2D94  
     __end_of_I2C_2_Master_Start 2DD4       __end_of_I2C_2_Master_Write 2DB6  
                __end_of_left_90 244A                            _flags 01FA  
                          _fputc 2010                  __end_of_forward 288C  
                          _fputs 2B44                            pad@fp 0011  
                          _width 01F0                            _putch 2DD4  
                          main@i 01CC                            main@j 01C6  
                          main@k 01CA                            dtoa@d 001E  
                          dtoa@i 003C                            dtoa@n 0034  
                          dtoa@p 0030                            dtoa@s 003E  
                          dtoa@w 0032                            tablat 000FF5  
                          ttemp5 0060                            ttemp6 0063  
                          ttemp7 0067                            stop@i 001F  
                          status 000FD8                            wtemp8 0060  
                __end_of_sprintf 29B2          __end_of_color_read_Blue 2B44  
          _I2C_2_Master_RepStart 2DB6                  ?_color_read_Red 0005  
                __initialization 2C7C   color_processor_hard@calibrated 0003  
                   __end_of_main 1342                     __end_of_dtoa 15C0  
                   __end_of_stop 2802                           ??_main 0059  
                         ??_dtoa 0026                           ??_stop 001E  
                  __activetblptr 000003                     ?_setMotorPWM 000F  
                         ?_fputc 0001                           ?_fputs 000A  
               ___awdiv@dividend 0007                           ?_putch 0001  
                         _RC0PPS 000E62                           _RC4REG 000EE3  
                         _RE2PPS 000E74                           _RD5PPS 000E6F  
                         _RC7PPS 000E69                           _RD6PPS 000E70  
                         i2l3191 001A                           i2l3193 0028  
                         i2l3195 002E                           i2l3197 0032  
                         i2l3189 000A                           i2l3199 0036  
                      ??_HighISR 0001         __end_of_color_click_init 2960  
                         _RX4PPS 000E15                           _TX4REG 000EE4  
                  ??_Timer0_init 0001        color_processor_easy@color 0003  
                   vfprintf@cfmt 0057                 __end_of_left_135 2774  
                      ??___aodiv 0011                        ??___aomod 0011  
                         ___wmul 2CF8                        ??___awdiv 000B  
                         clear_0 2C82                           clear_1 2C8E  
               ___awdiv@quotient 000D                           isa$std 000001  
                         pad@buf 0013                           dtoa@fp 001C  
                      ??_left_90 001E                 __end_of_right_90 23A6  
                  main@time_path 0164                           fputc@c 0001  
                         fputs@c 000E                           fputs@i 000F  
                         fputs@s 000A                        ??_forward 001E  
               __end_of_spin_180 24EC                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 ?_sendCharSerial4 0001  
                         putch@c 0001                 __end_of_vfprintf 2A04  
                         stop@mL 001A                           stop@mR 001C  
              ??_initDCmotorsPWM 0003                        ??_sprintf 0059  
            reverse_onesquare@mL 001A              reverse_onesquare@mR 001C  
                     __accesstop 0060          __end_of__initialization 2C9C  
       __end_of_color_read_Green 2AF4           ?_I2C_2_Master_RepStart 0001  
                  ___rparam_used 000001                 ?_color_read_Blue 0005  
                _Interrupts_init 2D94                   __pcstackCOMRAM 0001  
                  color_read@rgb 000C                    __end_of_fputc 20DA  
                  __end_of_fputs 2B88                    __end_of_putch 2DD6  
            __end_of_Timer0_init 2D5E                          ??_fputc 0005  
                        ??_fputs 000E                          ??_putch 0001  
                     __pbssBANK0 00FF                       __pbssBANK1 01F0  
                     __pbssBANK2 0200           color_processor_hard@cb 0017  
         color_processor_hard@cg 0015           color_processor_hard@cr 0013  
              _color_writetoaddr 2D1E                     _T2CLKCONbits 000FBF  
             ?_color_writetoaddr 0003                          ?___wmul 0001  
                 main@color_flag 005B                   main@color_name 01C8  
                 main@color_path 00DF                      right_135@mL 001A  
                    right_135@mR 001C              ??_color_writetoaddr 0004  
               _reverse_fromcard 2630    __end_of_color_read_Luminosity 2AA4  
                        _SP4BRGH 000EE6                          _SP4BRGL 000EE5  
                        _PWM6DCH 000FA3                          _PWM7DCH 000FA0  
                        _SSP2ADD 000ED6                          _SSP2BUF 000ED5  
                      ?_left_135 001A                       _color_read 225C  
        __end_of_Interrupts_init 2DAA           color_writetoaddr@value 0003  
               ??_color_read_Red 0007                          _HighISR 0008  
      __end_of_color_writetoaddr 2D3E         color_read_Luminosity@tmp 000A  
             _I2C_2_Master_Start 2DCA                       _initUSART4 2D5E  
             _I2C_2_Master_Write 2DAA                        ?_right_90 001A  
                        __Hparam 0000                          __Lparam 0000  
color_processor_hard@condition_b 0009  color_processor_hard@condition_g 0008  
color_processor_hard@condition_r 0007                color_read_Red@tmp 000A  
                    _Timer0_init 2D3E                        ?_spin_180 001A  
        sendStringSerial4@string 0002                          ___aodiv 1BC6  
                        ___aomod 1D4E                          ___awdiv 20DA  
            ?_I2C_2_Master_Start 0001              ?_I2C_2_Master_Write 0001  
                     _off_period 01F6                        ?_vfprintf 0051  
                   __psmallconst 0E00                          __pcinit 2C7C  
                        __ramtop 0E00                          __ptext0 0E14  
                        __ptext1 2960                          __ptext2 29B2  
                        __ptext3 1EB2                          __ptext4 1342  
                        __ptext5 288C                          __ptext6 2B44  
                        __ptext7 2010                          __ptext8 2DD4  
                        __ptext9 2C0C                          _left_90 23A6  
                      _T2CONbits 000FBD                          _forward 2802  
                      _T2HLTbits 000FBE        main@lowerbound_calibrated 00FD  
                  ?_motor_action 0022                    _RxBufWriteCnt 005E  
                        _sprintf 2960             ??_I2C_2_Master_Start 0002  
                     ??_left_135 001E             ??_I2C_2_Master_Write 0002  
           end_of_initialization 2C9C                __end_of_right_135 258E  
             setMotorPWM@PWMduty 0018                          fputc@fp 0003  
                        fputs@fp 000C                ?_color_click_init 0001  
   __end_of_color_processor_easy 225C     __end_of_color_processor_hard 19F2  
                     ??_right_90 001E               ??_color_click_init 0005  
              __end_of_vfpfcnvrt 2010                       ??_spin_180 001E  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE                 vfpfcnvrt@convarg 0047  
                     main@F14639 025A                       main@F14647 023C  
                     ??_vfprintf 0057                  _initDCmotorsPWM 2B88  
                      _PORTFbits 000F8E                   ??_motor_action 0028  
                      _TRISCbits 000F83                        _TRISDbits 000F84  
                      _TRISEbits 000F85                        _TRISFbits 000F86  
                      _TRISGbits 000F87                        _TRISHbits 000F88  
             reverse_fromcard@mL 001A               reverse_fromcard@mR 001C  
                    ?_color_read 000C         color_writetoaddr@address 0004  
        ??_I2C_2_Master_RepStart 0002                 ?_Interrupts_init 0001  
                     left_135@mL 001A                       left_135@mR 001C  
                   _EUSART4RXbuf 0278                     _EUSART4TXbuf 0200  
              ?_color_read_Green 0005                      ?_initUSART4 0001  
      sendCharSerial4@charToSend 0001                       main@motorL 01E7  
                     main@motorR 01DE               ??_color_read_Green 0007  
                    vfpfcnvrt@ap 0043                      vfpfcnvrt@cp 004F  
                    vfpfcnvrt@fp 003F                   __end_of___wmul 2D1E  
            start_initialization 2C7C                      __end_of_abs 2C4C  
                    __end_of_pad 2906                    _TxBufWriteCnt 00FF  
       __end_of_reverse_fromcard 26D2              color_read_Green@tmp 000A  
        __end_of_initDCmotorsPWM 2BCA                      vfprintf@fmt 0053  
                       ??___wmul 0005               reverse_onesquare@i 0020  
                    __pbssCOMRAM 005D             _color_processor_easy 219E  
           _color_processor_hard 180E                    __pcstackBANK0 0060  
                  __pcstackBANK1 0100                 ___aodiv@dividend 0001  
             main@RGB_calibrated 01CE                         ?_HighISR 0001  
        color_processor_easy@rgb 0001          color_processor_hard@rgb 0001  
          color_processor_easy@a 0007            color_processor_easy@b 0009  
          color_processor_easy@c 0005            color_processor_hard@b 0011  
          color_processor_hard@g 000F            color_processor_hard@r 000D  
                      _dtoa$2419 002E             __end_of_motor_action 180E  
                   ?_Timer0_init 0001                        __pintcode 0008  
                       ?___aodiv 0001                         ?___aomod 0001  
                       ?___awdiv 0007                 ___aodiv@quotient 0013  
                     right_135@i 0020                       right_90@mL 001A  
                     right_90@mR 001C             I2C_2_Master_Read@ack 0003  
           I2C_2_Master_Read@tmp 0004                         ?_left_90 001A  
                    __smallconst 0E00                         ?_forward 001A  
              _I2C_2_Master_Idle 2CD0            ?_color_processor_easy 0001  
          ?_color_processor_hard 0001                 main@RGB_recorded 01D6  
              _I2C_2_Master_Init 2CA6                _I2C_2_Master_Read 2BCA  
              _I2C_2_Master_Stop 2DC0                     _RxBufReadCnt 005D  
             ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 0011  
          _color_read_Luminosity 2A54               ?_I2C_2_Master_Stop 0001  
       initDCmotorsPWM@PWMperiod 0001                         ?_sprintf 0060  
              _sendStringSerial4 2C4C              ??_I2C_2_Master_Idle 0001  
            ??_I2C_2_Master_Init 0001              ??_I2C_2_Master_Read 0002  
                 ___wmul@product 0005              ??_I2C_2_Master_Stop 0002  
                       _LATCbits 000F7B                         _LATDbits 000F7C  
                       _LATEbits 000F7D                         _LATFbits 000F7E  
                      _on_period 01F8                         _LATGbits 000F7F  
                       _LATHbits 000F80                        _right_135 24EC  
                       _IPR0bits 000E1F                         _IPR2bits 000E21  
                       _PIE0bits 000E29                         _PIE2bits 000E2B  
             ?_sendStringSerial4 0002                       spin_180@mL 001A  
                     spin_180@mR 001C                         i2u190_40 001A  
                       i2u190_41 0016                         i2u191_40 0028  
                       i2u191_41 0024                         _PIR0bits 000E33  
                       _PIR2bits 000E35                         _PIR4bits 000E37  
               ?_initDCmotorsPWM 0001                ??_sendCharSerial4 0001  
                       _SSP2CON2 000EDA              ??_sendStringSerial4 0004  
                       _SSP2STAT 000ED8                _reverse_onesquare 258E  
                      _vfpfcnvrt 1EB2        __end_of_I2C_2_Master_Idle 2CF8  
             ?_reverse_onesquare 001A        __end_of_I2C_2_Master_Init 2CD0  
      __end_of_I2C_2_Master_Read 2C0C                ___wmul@multiplier 0001  
              reverse_fromcard@i 0020        __end_of_I2C_2_Master_Stop 2DCA  
                   setMotorPWM@m 000F      I2C_2_Master_Write@data_byte 0002  
                      left_135@i 0020                        left_90@mL 001A  
                      left_90@mR 001C             main@color_calibrated 0182  
              ??_color_read_Blue 0007                     _TxBufReadCnt 01FB  
            ??_reverse_onesquare 001E        main@upperbound_calibrated 01C2  
                   ??_color_read 000E        __end_of_sendStringSerial4 2C7C  
  __end_of_I2C_2_Master_RepStart 2DC0               color_read_Blue@tmp 000A  
            __end_of_setMotorPWM 1BC6                       ?_right_135 001A  
                   ??_initUSART4 0001                         __Hrparam 0000  
                     vfprintf@ap 0055                         __Lrparam 0000  
                     vfprintf@fp 0051        __end_of_reverse_onesquare 2630  
                      forward@mL 001A                        forward@mR 001C  
                     ?_vfpfcnvrt 003F               __end_of_color_read 2302  
                ___aodiv@divisor 0009                  ___aodiv@counter 0011  
                     _ANSELDbits 000EA7           ??_color_processor_easy 0003  
         ??_color_processor_hard 0005                       _ANSELFbits 000EB4  
                     sprintf@fmt 0062                       _T0CON0bits 000FD5  
                     _T0CON1bits 000FD6           ?_color_read_Luminosity 0005  
             __end_of_initUSART4 2D7C                         __ptext10 1D4E  
                       __ptext11 1BC6                         __ptext20 2630  
                       __ptext12 2C4C                         __ptext21 23A6  
                       __ptext13 2D7C                         __ptext30 2A04  
                       __ptext22 26D2                         __ptext14 15C0  
                       __ptext31 2A54                         __ptext23 2D5E  
                       __ptext15 2774                         __ptext40 2DAA  
                       __ptext32 2AA4                         __ptext24 2B88  
                       __ptext16 244A                         __ptext41 2DC0  
                       __ptext33 2AF4                         __ptext25 2802  
                       __ptext17 2302                         __ptext42 2DCA  
                       __ptext34 2DB6                         __ptext26 19F2  
                       __ptext18 24EC                         __ptext43 2CD0  
                       __ptext35 2BCA                         __ptext27 2CF8  
                       __ptext19 258E                         __ptext44 2CA6  
                       __ptext36 180E                         __ptext28 20DA  
                       __ptext45 2D3E                         __ptext37 219E  
                       __ptext29 225C                         __ptext46 2D94  
                       __ptext38 2906                         __ptext39 2D1E  
                      right_90@i 0020                         _left_135 26D2  
                   _SSP2CON1bits 000ED9                     _SSP2CON2bits 000EDA  
                       _right_90 2302                ?_reverse_fromcard 001A  
                      spin_180@i 0020                         _spin_180 244A  
                       isa$xinst 000000               ??_reverse_fromcard 001E  
                     _RC4STAbits 000EE7                         int$flags 005F  
                  motor_action@l 0024                    motor_action@r 0026  
                       _vfprintf 29B2                         left_90@i 0020  
               ___aomod@dividend 0001                  main@time_return 01C4  
                     _INTCONbits 000FF2                     _motor_action 15C0  
                       forward@i 001E                      _setMotorPWM 19F2  
                    _PWM6CONbits 000FA4                      _PWM7CONbits 000FA1  
                       intlevel2 0000                        sprintf@ap 006E  
                    ??_right_135 001E                  ___aomod@divisor 0009  
                    ??_vfpfcnvrt 0045                  ___aomod@counter 0011  
               _color_click_init 2906                         sprintf@f 0070  
                       sprintf@s 0060                       _SSP2DATPPS 000E1D  
                     _SSP2CLKPPS 000E1C                       _TX4STAbits 000EE8  
                   ___aodiv@sign 0012                  _sendCharSerial4 2D7C  
                   ___aomod@sign 0012  
