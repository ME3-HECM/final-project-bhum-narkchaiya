

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Dec 11 00:16:51 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    67   000000                     
    68                           ; Version 2.35
    69                           ; Generated 05/05/2021 GMT
    70                           ; 
    71                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution. Publication is not required when
    85                           ;        this file is used in an embedded application.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F67K40 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103   000000                     _TX4REG	set	3812
   104   000000                     _RC4STAbits	set	3815
   105   000000                     _SP4BRGH	set	3814
   106   000000                     _T0CON0bits	set	4053
   107   000000                     _T0CON1bits	set	4054
   108   000000                     _TMR0H	set	4052
   109   000000                     _TRISGbits	set	3975
   110   000000                     _TRISEbits	set	3973
   111   000000                     _LATFbits	set	3966
   112   000000                     _TRISFbits	set	3974
   113   000000                     _LATG	set	3967
   114   000000                     _LATE	set	3965
   115   000000                     _SSP2CON2bits	set	3802
   116   000000                     _LATGbits	set	3967
   117   000000                     _LATEbits	set	3965
   118   000000                     _RX4PPS	set	3605
   119   000000                     _SSP2CLKPPS	set	3612
   120   000000                     _SSP2DATPPS	set	3613
   121   000000                     _ANSELDbits	set	3751
   122   000000                     _ANSELFbits	set	3764
   123   000000                     _LATDbits	set	3964
   124   000000                     _LATHbits	set	3968
   125   000000                     _TRISDbits	set	3972
   126   000000                     _TRISHbits	set	3976
   127   000000                     _PORTFbits	set	3982
   128   000000                     _PWM7DCH	set	4000
   129   000000                     _PWM6DCH	set	4003
   130   000000                     _TRISCbits	set	3971
   131   000000                     _SSP2BUF	set	3797
   132   000000                     _SSP2ADD	set	3798
   133   000000                     _SSP2CON1bits	set	3801
   134   000000                     _RC4REG	set	3811
   135   000000                     _SP4BRGL	set	3813
   136   000000                     _TX4STAbits	set	3816
   137   000000                     _BAUD4CONbits	set	3817
   138   000000                     _LATCbits	set	3963
   139   000000                     _SSP2CON2	set	3802
   140   000000                     _SSP2STAT	set	3800
   141   000000                     _IPR0bits	set	3615
   142   000000                     _PIE0bits	set	3625
   143   000000                     _RC7PPS	set	3689
   144   000000                     _RD5PPS	set	3695
   145   000000                     _RE2PPS	set	3700
   146   000000                     _RD6PPS	set	3696
   147   000000                     _PWM6CONbits	set	4004
   148   000000                     _T2PR	set	4028
   149   000000                     _T2CONbits	set	4029
   150   000000                     _INTCONbits	set	4082
   151   000000                     _PWM7CONbits	set	4001
   152   000000                     _TMR0L	set	4051
   153   000000                     _T2CLKCONbits	set	4031
   154   000000                     _T2HLTbits	set	4030
   155   000000                     _PIE2bits	set	3627
   156   000000                     _PIR0bits	set	3635
   157   000000                     _IPR2bits	set	3617
   158   000000                     _PIR2bits	set	3637
   159   000000                     _PIR4bits	set	3639
   160   000000                     _RC0PPS	set	3682
   161                           
   162                           	psect	smallconst
   163   000E00                     __psmallconst:
   164                           	callstack 0
   165   000E00  00                 	db	0
   166   000E01                     STR_2:
   167                           
   168                           ; BSR set to: 14
   169   000E01  25                 	db	37
   170   000E02  64                 	db	100	;'d'
   171   000E03  20                 	db	32
   172   000E04  25                 	db	37
   173   000E05  64                 	db	100	;'d'
   174   000E06  20                 	db	32
   175   000E07  25                 	db	37
   176   000E08  64                 	db	100	;'d'
   177   000E09  20                 	db	32
   178   000E0A  25                 	db	37
   179   000E0B  64                 	db	100	;'d'
   180   000E0C  20                 	db	32
   181   000E0D  25                 	db	37
   182   000E0E  64                 	db	100	;'d'
   183   000E0F  20                 	db	32
   184   000E10  0D                 	db	13
   185   000E11  0A                 	db	10
   186   000E12  00                 	db	0
   187   000E13  00                 	db	0	; dummy byte at the end
   188   000000                     
   189                           ; #config settings
   190                           
   191                           	psect	cinit
   192   002C64                     __pcinit:
   193                           	callstack 0
   194   002C64                     start_initialization:
   195                           	callstack 0
   196   002C64                     __initialization:
   197                           	callstack 0
   198                           
   199                           ; Clear objects allocated to BANK2 (112 bytes)
   200   002C64  EE02  F000         	lfsr	0,__pbssBANK2
   201   002C68  0E70               	movlw	112
   202   002C6A                     clear_0:
   203   002C6A  6AEE               	clrf	postinc0,c
   204   002C6C  06E8               	decf	wreg,f,c
   205   002C6E  E1FD               	bnz	clear_0
   206                           
   207                           ; Clear objects allocated to BANK1 (12 bytes)
   208   002C70  EE01  F0F0         	lfsr	0,__pbssBANK1
   209   002C74  0E0C               	movlw	12
   210   002C76                     clear_1:
   211   002C76  6AEE               	clrf	postinc0,c
   212   002C78  06E8               	decf	wreg,f,c
   213   002C7A  E1FD               	bnz	clear_1
   214                           
   215                           ; Clear objects allocated to BANK0 (1 bytes)
   216   002C7C  0100               	movlb	0
   217   002C7E  6BFF               	clrf	__pbssBANK0& (0+255),b
   218                           
   219                           ; Clear objects allocated to COMRAM (2 bytes)
   220   002C80  6A5E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   221   002C82  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   222   002C84                     end_of_initialization:
   223                           	callstack 0
   224   002C84                     __end_of__initialization:
   225                           	callstack 0
   226   002C84  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   227   002C86  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   228   002C88  0100               	movlb	0
   229   002C8A  EF0A  F007         	goto	_main	;jump to C main() function
   230                           
   231                           	psect	bssCOMRAM
   232   00005D                     __pbssCOMRAM:
   233                           	callstack 0
   234   00005D                     _RxBufReadCnt:
   235                           	callstack 0
   236   00005D                     	ds	1
   237   00005E                     _RxBufWriteCnt:
   238                           	callstack 0
   239   00005E                     	ds	1
   240                           
   241                           	psect	bssBANK0
   242   0000FF                     __pbssBANK0:
   243                           	callstack 0
   244   0000FF                     _TxBufWriteCnt:
   245                           	callstack 0
   246   0000FF                     	ds	1
   247                           
   248                           	psect	bssBANK1
   249   0001F0                     __pbssBANK1:
   250                           	callstack 0
   251   0001F0                     _width:
   252                           	callstack 0
   253   0001F0                     	ds	2
   254   0001F2                     _prec:
   255                           	callstack 0
   256   0001F2                     	ds	2
   257   0001F4                     _time:
   258                           	callstack 0
   259   0001F4                     	ds	2
   260   0001F6                     _off_period:
   261                           	callstack 0
   262   0001F6                     	ds	2
   263   0001F8                     _on_period:
   264                           	callstack 0
   265   0001F8                     	ds	2
   266   0001FA                     _flags:
   267                           	callstack 0
   268   0001FA                     	ds	1
   269   0001FB                     _TxBufReadCnt:
   270                           	callstack 0
   271   0001FB                     	ds	1
   272                           
   273                           	psect	bssBANK2
   274   000200                     __pbssBANK2:
   275                           	callstack 0
   276   000200                     _EUSART4TXbuf:
   277                           	callstack 0
   278   000200                     	ds	60
   279   00023C                     _EUSART4RXbuf:
   280                           	callstack 0
   281   00023C                     	ds	20
   282   000250                     _dbuf:
   283                           	callstack 0
   284   000250                     	ds	32
   285                           
   286                           	psect	cstackBANK1
   287   000100                     __pcstackBANK1:
   288                           	callstack 0
   289   000100                     main@readout3:
   290                           	callstack 0
   291                           
   292                           ; 100 bytes @ 0x0
   293   000100                     	ds	100
   294   000164                     main@time_path:
   295                           	callstack 0
   296                           
   297                           ; 30 bytes @ 0x64
   298   000164                     	ds	30
   299   000182                     main@color_calibrated:
   300                           	callstack 0
   301                           
   302                           ; 64 bytes @ 0x82
   303   000182                     	ds	64
   304   0001C2                     main@upperbound_calibrated:
   305                           	callstack 0
   306                           
   307                           ; 2 bytes @ 0xC2
   308   0001C2                     	ds	2
   309   0001C4                     main@time_return:
   310                           	callstack 0
   311                           
   312                           ; 2 bytes @ 0xC4
   313   0001C4                     	ds	2
   314   0001C6                     main@j:
   315                           	callstack 0
   316                           
   317                           ; 2 bytes @ 0xC6
   318   0001C6                     	ds	2
   319   0001C8                     main@color_name:
   320                           	callstack 0
   321                           
   322                           ; 2 bytes @ 0xC8
   323   0001C8                     	ds	2
   324   0001CA                     main@k:
   325                           	callstack 0
   326                           
   327                           ; 2 bytes @ 0xCA
   328   0001CA                     	ds	2
   329   0001CC                     main@i:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0xCC
   333   0001CC                     	ds	2
   334   0001CE                     main@RGB_calibrated:
   335                           	callstack 0
   336                           
   337                           ; 8 bytes @ 0xCE
   338   0001CE                     	ds	8
   339   0001D6                     main@RGB_recorded:
   340                           	callstack 0
   341                           
   342                           ; 8 bytes @ 0xD6
   343   0001D6                     	ds	8
   344   0001DE                     main@motorR:
   345                           	callstack 0
   346                           
   347                           ; 9 bytes @ 0xDE
   348   0001DE                     	ds	9
   349   0001E7                     main@motorL:
   350                           	callstack 0
   351                           
   352                           ; 9 bytes @ 0xE7
   353   0001E7                     	ds	9
   354                           
   355                           	psect	cstackBANK0
   356   000060                     __pcstackBANK0:
   357                           	callstack 0
   358   000060                     ?_sprintf:
   359                           	callstack 0
   360   000060                     sprintf@s:
   361                           	callstack 0
   362                           
   363                           ; 2 bytes @ 0x0
   364   000060                     	ds	2
   365   000062                     sprintf@fmt:
   366                           	callstack 0
   367                           
   368                           ; 2 bytes @ 0x2
   369   000062                     	ds	12
   370   00006E                     sprintf@ap:
   371                           	callstack 0
   372                           
   373                           ; 2 bytes @ 0xE
   374   00006E                     	ds	2
   375   000070                     sprintf@f:
   376                           	callstack 0
   377                           
   378                           ; 11 bytes @ 0x10
   379   000070                     	ds	11
   380   00007B                     main@readout2:
   381                           	callstack 0
   382                           
   383                           ; 100 bytes @ 0x1B
   384   00007B                     	ds	100
   385   0000DF                     main@color_path:
   386                           	callstack 0
   387                           
   388                           ; 30 bytes @ 0x7F
   389   0000DF                     	ds	30
   390   0000FD                     main@lowerbound_calibrated:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x9D
   394   0000FD                     	ds	2
   395                           
   396                           	psect	cstackCOMRAM
   397   000001                     __pcstackCOMRAM:
   398                           	callstack 0
   399   000001                     ??_I2C_2_Master_Idle:
   400   000001                     ?_color_processor_easy:
   401                           	callstack 0
   402   000001                     ?_color_processor_hard:
   403                           	callstack 0
   404   000001                     ?___wmul:
   405                           	callstack 0
   406   000001                     ?___aodiv:
   407                           	callstack 0
   408   000001                     ?___aomod:
   409                           	callstack 0
   410   000001                     sendCharSerial4@charToSend:
   411                           	callstack 0
   412   000001                     color_processor_easy@rgb:
   413                           	callstack 0
   414   000001                     color_processor_hard@rgb:
   415                           	callstack 0
   416   000001                     initDCmotorsPWM@PWMperiod:
   417                           	callstack 0
   418   000001                     ___wmul@multiplier:
   419                           	callstack 0
   420   000001                     fputc@c:
   421                           	callstack 0
   422   000001                     ___aodiv@dividend:
   423                           	callstack 0
   424   000001                     ___aomod@dividend:
   425                           	callstack 0
   426                           
   427                           ; 8 bytes @ 0x0
   428   000001                     	ds	1
   429   000002                     ??_I2C_2_Master_Read:
   430   000002                     I2C_2_Master_Write@data_byte:
   431                           	callstack 0
   432   000002                     sendStringSerial4@string:
   433                           	callstack 0
   434                           
   435                           ; 2 bytes @ 0x1
   436   000002                     	ds	1
   437   000003                     color_writetoaddr@value:
   438                           	callstack 0
   439   000003                     I2C_2_Master_Read@ack:
   440                           	callstack 0
   441   000003                     color_processor_easy@color:
   442                           	callstack 0
   443   000003                     color_processor_hard@calibrated:
   444                           	callstack 0
   445   000003                     ___wmul@multiplicand:
   446                           	callstack 0
   447   000003                     fputc@fp:
   448                           	callstack 0
   449                           
   450                           ; 2 bytes @ 0x2
   451   000003                     	ds	1
   452   000004                     color_writetoaddr@address:
   453                           	callstack 0
   454   000004                     I2C_2_Master_Read@tmp:
   455                           	callstack 0
   456                           
   457                           ; 1 bytes @ 0x3
   458   000004                     	ds	1
   459   000005                     ??_fputc:
   460   000005                     ??_color_click_init:
   461   000005                     ??_color_processor_hard:
   462   000005                     ?_color_read_Luminosity:
   463                           	callstack 0
   464   000005                     ?_color_read_Red:
   465                           	callstack 0
   466   000005                     ?_color_read_Green:
   467                           	callstack 0
   468   000005                     ?_color_read_Blue:
   469                           	callstack 0
   470   000005                     color_processor_easy@c:
   471                           	callstack 0
   472   000005                     ___wmul@product:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x4
   476   000005                     	ds	2
   477   000007                     ??_color_read_Luminosity:
   478   000007                     ??_color_read_Red:
   479   000007                     ??_color_read_Green:
   480   000007                     ??_color_read_Blue:
   481   000007                     ?___awdiv:
   482                           	callstack 0
   483   000007                     color_processor_hard@condition_r:
   484                           	callstack 0
   485   000007                     color_processor_easy@a:
   486                           	callstack 0
   487   000007                     ___awdiv@dividend:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x6
   491   000007                     	ds	1
   492   000008                     color_processor_hard@condition_g:
   493                           	callstack 0
   494                           
   495                           ; 1 bytes @ 0x7
   496   000008                     	ds	1
   497   000009                     color_processor_hard@condition_b:
   498                           	callstack 0
   499   000009                     color_processor_easy@b:
   500                           	callstack 0
   501   000009                     ___awdiv@divisor:
   502                           	callstack 0
   503   000009                     ___aodiv@divisor:
   504                           	callstack 0
   505   000009                     ___aomod@divisor:
   506                           	callstack 0
   507                           
   508                           ; 8 bytes @ 0x8
   509   000009                     	ds	1
   510   00000A                     _color_processor_hard$370:
   511                           	callstack 0
   512   00000A                     color_read_Luminosity@tmp:
   513                           	callstack 0
   514   00000A                     color_read_Red@tmp:
   515                           	callstack 0
   516   00000A                     color_read_Green@tmp:
   517                           	callstack 0
   518   00000A                     color_read_Blue@tmp:
   519                           	callstack 0
   520   00000A                     fputs@s:
   521                           	callstack 0
   522                           
   523                           ; 2 bytes @ 0x9
   524   00000A                     	ds	1
   525   00000B                     _color_processor_hard$372:
   526                           	callstack 0
   527   00000B                     ___awdiv@counter:
   528                           	callstack 0
   529                           
   530                           ; 1 bytes @ 0xA
   531   00000B                     	ds	1
   532   00000C                     _color_processor_hard$374:
   533                           	callstack 0
   534   00000C                     ___awdiv@sign:
   535                           	callstack 0
   536   00000C                     color_read@rgb:
   537                           	callstack 0
   538   00000C                     fputs@fp:
   539                           	callstack 0
   540                           
   541                           ; 2 bytes @ 0xB
   542   00000C                     	ds	1
   543   00000D                     color_processor_hard@r:
   544                           	callstack 0
   545   00000D                     ___awdiv@quotient:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0xC
   549   00000D                     	ds	1
   550   00000E                     ??_color_read:
   551   00000E                     fputs@c:
   552                           	callstack 0
   553                           
   554                           ; 1 bytes @ 0xD
   555   00000E                     	ds	1
   556   00000F                     color_processor_hard@g:
   557                           	callstack 0
   558   00000F                     setMotorPWM@m:
   559                           	callstack 0
   560   00000F                     fputs@i:
   561                           	callstack 0
   562                           
   563                           ; 2 bytes @ 0xE
   564   00000F                     	ds	2
   565   000011                     ??_setMotorPWM:
   566   000011                     ___aodiv@counter:
   567                           	callstack 0
   568   000011                     ___aomod@counter:
   569                           	callstack 0
   570   000011                     color_processor_hard@b:
   571                           	callstack 0
   572   000011                     pad@fp:
   573                           	callstack 0
   574                           
   575                           ; 2 bytes @ 0x10
   576   000011                     	ds	1
   577   000012                     ___aodiv@sign:
   578                           	callstack 0
   579   000012                     ___aomod@sign:
   580                           	callstack 0
   581                           
   582                           ; 1 bytes @ 0x11
   583   000012                     	ds	1
   584   000013                     ?_abs:
   585                           	callstack 0
   586   000013                     color_processor_hard@cr:
   587                           	callstack 0
   588   000013                     pad@buf:
   589                           	callstack 0
   590   000013                     abs@a:
   591                           	callstack 0
   592   000013                     ___aodiv@quotient:
   593                           	callstack 0
   594                           
   595                           ; 8 bytes @ 0x12
   596   000013                     	ds	2
   597   000015                     ??_abs:
   598   000015                     color_processor_hard@cg:
   599                           	callstack 0
   600   000015                     pad@p:
   601                           	callstack 0
   602                           
   603                           ; 2 bytes @ 0x14
   604   000015                     	ds	2
   605   000017                     ??_pad:
   606   000017                     color_processor_hard@cb:
   607                           	callstack 0
   608                           
   609                           ; 2 bytes @ 0x16
   610   000017                     	ds	1
   611   000018                     setMotorPWM@PWMduty:
   612                           	callstack 0
   613   000018                     pad@i:
   614                           	callstack 0
   615                           
   616                           ; 2 bytes @ 0x17
   617   000018                     	ds	2
   618   00001A                     stop@mL:
   619                           	callstack 0
   620   00001A                     forward@mL:
   621                           	callstack 0
   622   00001A                     reverse_fromcard@mL:
   623                           	callstack 0
   624   00001A                     reverse_onesquare@mL:
   625                           	callstack 0
   626   00001A                     right_90@mL:
   627                           	callstack 0
   628   00001A                     left_90@mL:
   629                           	callstack 0
   630   00001A                     spin_180@mL:
   631                           	callstack 0
   632   00001A                     right_135@mL:
   633                           	callstack 0
   634   00001A                     left_135@mL:
   635                           	callstack 0
   636   00001A                     pad@w:
   637                           	callstack 0
   638                           
   639                           ; 2 bytes @ 0x19
   640   00001A                     	ds	2
   641   00001C                     stop@mR:
   642                           	callstack 0
   643   00001C                     forward@mR:
   644                           	callstack 0
   645   00001C                     reverse_fromcard@mR:
   646                           	callstack 0
   647   00001C                     reverse_onesquare@mR:
   648                           	callstack 0
   649   00001C                     right_90@mR:
   650                           	callstack 0
   651   00001C                     left_90@mR:
   652                           	callstack 0
   653   00001C                     spin_180@mR:
   654                           	callstack 0
   655   00001C                     right_135@mR:
   656                           	callstack 0
   657   00001C                     left_135@mR:
   658                           	callstack 0
   659   00001C                     dtoa@fp:
   660                           	callstack 0
   661                           
   662                           ; 2 bytes @ 0x1B
   663   00001C                     	ds	2
   664   00001E                     ??_stop:
   665   00001E                     ??_spin_180:
   666   00001E                     ??_reverse_fromcard:
   667   00001E                     ??_reverse_onesquare:
   668   00001E                     ??_right_90:
   669   00001E                     ??_left_90:
   670   00001E                     ??_right_135:
   671   00001E                     ??_left_135:
   672   00001E                     forward@i:
   673                           	callstack 0
   674   00001E                     dtoa@d:
   675                           	callstack 0
   676                           
   677                           ; 8 bytes @ 0x1D
   678   00001E                     	ds	1
   679   00001F                     stop@i:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0x1E
   683   00001F                     	ds	1
   684   000020                     reverse_fromcard@i:
   685                           	callstack 0
   686   000020                     reverse_onesquare@i:
   687                           	callstack 0
   688   000020                     right_90@i:
   689                           	callstack 0
   690   000020                     left_90@i:
   691                           	callstack 0
   692   000020                     spin_180@i:
   693                           	callstack 0
   694   000020                     right_135@i:
   695                           	callstack 0
   696   000020                     left_135@i:
   697                           	callstack 0
   698                           
   699                           ; 2 bytes @ 0x1F
   700   000020                     	ds	2
   701   000022                     motor_action@color:
   702                           	callstack 0
   703                           
   704                           ; 2 bytes @ 0x21
   705   000022                     	ds	2
   706   000024                     motor_action@l:
   707                           	callstack 0
   708                           
   709                           ; 2 bytes @ 0x23
   710   000024                     	ds	2
   711   000026                     ??_dtoa:
   712   000026                     motor_action@r:
   713                           	callstack 0
   714                           
   715                           ; 2 bytes @ 0x25
   716   000026                     	ds	2
   717   000028                     ??_motor_action:
   718                           
   719                           ; 1 bytes @ 0x27
   720   000028                     	ds	6
   721   00002E                     _dtoa$2417:
   722                           	callstack 0
   723                           
   724                           ; 2 bytes @ 0x2D
   725   00002E                     	ds	2
   726   000030                     dtoa@p:
   727                           	callstack 0
   728                           
   729                           ; 2 bytes @ 0x2F
   730   000030                     	ds	2
   731   000032                     dtoa@w:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x31
   735   000032                     	ds	2
   736   000034                     dtoa@n:
   737                           	callstack 0
   738                           
   739                           ; 8 bytes @ 0x33
   740   000034                     	ds	8
   741   00003C                     dtoa@i:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x3B
   745   00003C                     	ds	2
   746   00003E                     dtoa@s:
   747                           	callstack 0
   748                           
   749                           ; 1 bytes @ 0x3D
   750   00003E                     	ds	1
   751   00003F                     vfpfcnvrt@fp:
   752                           	callstack 0
   753                           
   754                           ; 2 bytes @ 0x3E
   755   00003F                     	ds	2
   756   000041                     vfpfcnvrt@fmt:
   757                           	callstack 0
   758                           
   759                           ; 2 bytes @ 0x40
   760   000041                     	ds	2
   761   000043                     vfpfcnvrt@ap:
   762                           	callstack 0
   763                           
   764                           ; 2 bytes @ 0x42
   765   000043                     	ds	2
   766   000045                     ??_vfpfcnvrt:
   767                           
   768                           ; 1 bytes @ 0x44
   769   000045                     	ds	2
   770   000047                     vfpfcnvrt@convarg:
   771                           	callstack 0
   772                           
   773                           ; 8 bytes @ 0x46
   774   000047                     	ds	8
   775   00004F                     vfpfcnvrt@cp:
   776                           	callstack 0
   777                           
   778                           ; 2 bytes @ 0x4E
   779   00004F                     	ds	2
   780   000051                     ?_vfprintf:
   781                           	callstack 0
   782   000051                     vfprintf@fp:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x50
   786   000051                     	ds	2
   787   000053                     vfprintf@fmt:
   788                           	callstack 0
   789                           
   790                           ; 2 bytes @ 0x52
   791   000053                     	ds	2
   792   000055                     vfprintf@ap:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x54
   796   000055                     	ds	2
   797   000057                     vfprintf@cfmt:
   798                           	callstack 0
   799                           
   800                           ; 2 bytes @ 0x56
   801   000057                     	ds	2
   802   000059                     ??_main:
   803                           
   804                           ; 1 bytes @ 0x58
   805   000059                     	ds	2
   806   00005B                     main@color_flag:
   807                           	callstack 0
   808                           
   809                           ; 2 bytes @ 0x5A
   810   00005B                     	ds	2
   811                           
   812 ;;
   813 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   814 ;;
   815 ;; *************** function _main *****************
   816 ;; Defined at:
   817 ;;		line 20 in file "../main.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;  readout3      100    0[BANK1 ] unsigned char [100]
   822 ;;  readout2      100   27[BANK0 ] unsigned char [100]
   823 ;;  k               2  202[BANK1 ] int 
   824 ;;  i               2  204[BANK1 ] int 
   825 ;;  color_calibr   64  130[BANK1 ] int [32]
   826 ;;  time_path      30  100[BANK1 ] unsigned int [15]
   827 ;;  color_path     30  127[BANK0 ] unsigned int [15]
   828 ;;  motorL          9  231[BANK1 ] struct DC_motor
   829 ;;  motorR          9  222[BANK1 ] struct DC_motor
   830 ;;  RGB_recorded    8  214[BANK1 ] struct RGB_val
   831 ;;  RGB_calibrat    8  206[BANK1 ] struct RGB_val
   832 ;;  L_calibrated    8    0        struct RGB_val
   833 ;;  color_name      2  200[BANK1 ] unsigned int 
   834 ;;  j               2  198[BANK1 ] int 
   835 ;;  time_return     2  196[BANK1 ] unsigned int 
   836 ;;  color_flag      2   90[COMRAM] unsigned int 
   837 ;;  upperbound_c    2  194[BANK1 ] unsigned int 
   838 ;;  lowerbound_c    2  157[BANK0 ] unsigned int 
   839 ;;  PWMcycle        1    0        unsigned char 
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   850 ;;      Locals:         2     132     240       0       0       0       0       0       0       0       0       0       
      +0       0       0
   851 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   852 ;;      Totals:         4     132     240       0       0       0       0       0       0       0       0       0       
      +0       0       0
   853 ;;Total ram usage:      376 bytes
   854 ;; Hardware stack levels required when called: 9
   855 ;; This function calls:
   856 ;;		_I2C_2_Master_Init
   857 ;;		_Interrupts_init
   858 ;;		_Timer0_init
   859 ;;		_color_click_init
   860 ;;		_color_processor_easy
   861 ;;		_color_processor_hard
   862 ;;		_color_read
   863 ;;		_forward
   864 ;;		_initDCmotorsPWM
   865 ;;		_initUSART4
   866 ;;		_motor_action
   867 ;;		_sendStringSerial4
   868 ;;		_setMotorPWM
   869 ;;		_spin_180
   870 ;;		_sprintf
   871 ;;		_stop
   872 ;; This function is called by:
   873 ;;		Startup code after reset
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           	psect	text0
   878   000E14                     __ptext0:
   879                           	callstack 0
   880   000E14                     _main:
   881                           	callstack 22
   882   000E14                     
   883                           ;../main.c: 22:     color_click_init();
   884   000E14  EC77  F014         	call	_color_click_init	;wreg free
   885   000E18                     
   886                           ;../main.c: 23:     initDCmotorsPWM(20);
   887   000E18  0E00               	movlw	0
   888   000E1A  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   889   000E1C  0E14               	movlw	20
   890   000E1E  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   891   000E20  ECB8  F015         	call	_initDCmotorsPWM	;wreg free
   892   000E24                     
   893                           ;../main.c: 24:     Interrupts_init();
   894   000E24  ECBE  F016         	call	_Interrupts_init	;wreg free
   895   000E28                     
   896                           ;../main.c: 25:     Timer0_init();
   897   000E28  EC93  F016         	call	_Timer0_init	;wreg free
   898   000E2C                     
   899                           ;../main.c: 26:     I2C_2_Master_Init();
   900   000E2C  EC47  F016         	call	_I2C_2_Master_Init	;wreg free
   901   000E30                     
   902                           ;../main.c: 27:     initUSART4();
   903   000E30  ECA3  F016         	call	_initUSART4	;wreg free
   904   000E34                     
   905                           ;../main.c: 32:     motorL.power = 0;
   906   000E34  0E00               	movlw	0
   907   000E36  0101               	movlb	1	; () banked
   908   000E38  6FE7               	movwf	main@motorL& (0+255),b
   909   000E3A                     
   910                           ; BSR set to: 1
   911                           ;../main.c: 33:     motorL.direction = 0;
   912   000E3A  0E00               	movlw	0
   913   000E3C  6FE8               	movwf	(main@motorL+1)& (0+255),b
   914   000E3E                     
   915                           ; BSR set to: 1
   916                           ;../main.c: 34:     motorL.dutyHighByte = (unsigned char *)(&PWM6DCH);
   917   000E3E  0EA3               	movlw	163
   918   000E40  6FE9               	movwf	(main@motorL+2)& (0+255),b
   919   000E42  0E0F               	movlw	15
   920   000E44  6FEA               	movwf	(main@motorL+3)& (0+255),b
   921   000E46                     
   922                           ; BSR set to: 1
   923                           ;../main.c: 35:     motorL.dir_LAT = (unsigned char *)(&LATE);
   924   000E46  0E7D               	movlw	125
   925   000E48  6FEB               	movwf	(main@motorL+4)& (0+255),b
   926   000E4A  0E0F               	movlw	15
   927   000E4C  6FEC               	movwf	(main@motorL+5)& (0+255),b
   928   000E4E                     
   929                           ; BSR set to: 1
   930                           ;../main.c: 36:     motorL.dir_pin = 4;
   931   000E4E  0E04               	movlw	4
   932   000E50  6FED               	movwf	(main@motorL+6)& (0+255),b
   933   000E52                     
   934                           ; BSR set to: 1
   935                           ;../main.c: 37:     motorL.PWMperiod = PWMcycle;
   936   000E52  0E00               	movlw	0
   937   000E54  6FEF               	movwf	(main@motorL+8)& (0+255),b
   938   000E56  0EC8               	movlw	200
   939   000E58  6FEE               	movwf	(main@motorL+7)& (0+255),b
   940   000E5A                     
   941                           ; BSR set to: 1
   942                           ;../main.c: 38:     motorR.power = 0;
   943   000E5A  0E00               	movlw	0
   944   000E5C  6FDE               	movwf	main@motorR& (0+255),b
   945   000E5E                     
   946                           ; BSR set to: 1
   947                           ;../main.c: 39:     motorR.direction = 0;
   948   000E5E  0E00               	movlw	0
   949   000E60  6FDF               	movwf	(main@motorR+1)& (0+255),b
   950                           
   951                           ;../main.c: 40:     motorR.dutyHighByte = (unsigned char *)(&PWM7DCH);
   952   000E62  0EA0               	movlw	160
   953   000E64  6FE0               	movwf	(main@motorR+2)& (0+255),b
   954   000E66  0E0F               	movlw	15
   955   000E68  6FE1               	movwf	(main@motorR+3)& (0+255),b
   956                           
   957                           ;../main.c: 41:     motorR.dir_LAT = (unsigned char *)(&LATG);
   958   000E6A  0E7F               	movlw	127
   959   000E6C  6FE2               	movwf	(main@motorR+4)& (0+255),b
   960   000E6E  0E0F               	movlw	15
   961   000E70  6FE3               	movwf	(main@motorR+5)& (0+255),b
   962   000E72                     
   963                           ; BSR set to: 1
   964                           ;../main.c: 42:     motorR.dir_pin = 6;
   965   000E72  0E06               	movlw	6
   966   000E74  6FE4               	movwf	(main@motorR+6)& (0+255),b
   967   000E76                     
   968                           ; BSR set to: 1
   969                           ;../main.c: 43:     motorR.PWMperiod = PWMcycle;
   970   000E76  0E00               	movlw	0
   971   000E78  6FE6               	movwf	(main@motorR+8)& (0+255),b
   972   000E7A  0EC8               	movlw	200
   973   000E7C  6FE5               	movwf	(main@motorR+7)& (0+255),b
   974   000E7E                     
   975                           ; BSR set to: 1
   976                           ;../main.c: 44:     setMotorPWM(&motorL);
   977   000E7E  0EE7               	movlw	low main@motorL
   978   000E80  6E0F               	movwf	setMotorPWM@m^0,c
   979   000E82  0E01               	movlw	high main@motorL
   980   000E84  6E10               	movwf	(setMotorPWM@m+1)^0,c
   981   000E86  ECED  F00C         	call	_setMotorPWM	;wreg free
   982   000E8A                     
   983                           ;../main.c: 45:     setMotorPWM(&motorR);
   984   000E8A  0EDE               	movlw	low main@motorR
   985   000E8C  6E0F               	movwf	setMotorPWM@m^0,c
   986   000E8E  0E01               	movlw	high main@motorR
   987   000E90  6E10               	movwf	(setMotorPWM@m+1)^0,c
   988   000E92  ECED  F00C         	call	_setMotorPWM	;wreg free
   989   000E96                     l193:
   990   000E96  B68E               	btfsc	142,3,c	;volatile
   991   000E98  EF50  F007         	goto	u1741
   992   000E9C  EF52  F007         	goto	u1740
   993   000EA0                     u1741:
   994   000EA0  EF4B  F007         	goto	l193
   995   000EA4                     u1740:
   996   000EA4                     
   997                           ;../main.c: 64:         for (int i=0;i<8;i++){
   998   000EA4  0E00               	movlw	0
   999   000EA6  0101               	movlb	1	; () banked
  1000   000EA8  6FCD               	movwf	(main@i+1)& (0+255),b
  1001   000EAA  0E00               	movlw	0
  1002   000EAC  6FCC               	movwf	main@i& (0+255),b
  1003   000EAE                     l3035:
  1004                           
  1005                           ; BSR set to: 1
  1006                           ;../main.c: 65:             color_read(&RGB_calibrated);
  1007   000EAE  0ECE               	movlw	low main@RGB_calibrated
  1008   000EB0  6E0C               	movwf	color_read@rgb^0,c
  1009   000EB2  0E01               	movlw	high main@RGB_calibrated
  1010   000EB4  6E0D               	movwf	(color_read@rgb+1)^0,c
  1011   000EB6  EC22  F011         	call	_color_read	;wreg free
  1012   000EBA                     
  1013                           ;../main.c: 66:             color_calibrated[4*i] = RGB_calibrated.L;
  1014   000EBA  C1CC  F059         	movff	main@i,??_main
  1015   000EBE  C1CD  F05A         	movff	main@i+1,??_main+1
  1016   000EC2  90D8               	bcf	status,0,c
  1017   000EC4  3659               	rlcf	??_main^0,f,c
  1018   000EC6  365A               	rlcf	(??_main+1)^0,f,c
  1019   000EC8  90D8               	bcf	status,0,c
  1020   000ECA  3659               	rlcf	??_main^0,f,c
  1021   000ECC  365A               	rlcf	(??_main+1)^0,f,c
  1022   000ECE  90D8               	bcf	status,0,c
  1023   000ED0  3659               	rlcf	??_main^0,f,c
  1024   000ED2  365A               	rlcf	(??_main+1)^0,f,c
  1025   000ED4  0E82               	movlw	low main@color_calibrated
  1026   000ED6  2459               	addwf	??_main^0,w,c
  1027   000ED8  6ED9               	movwf	fsr2l,c
  1028   000EDA  0E01               	movlw	high main@color_calibrated
  1029   000EDC  205A               	addwfc	(??_main+1)^0,w,c
  1030   000EDE  6EDA               	movwf	fsr2h,c
  1031   000EE0  C1CE  FFDE         	movff	main@RGB_calibrated,postinc2
  1032   000EE4  C1CF  FFDD         	movff	main@RGB_calibrated+1,postdec2
  1033   000EE8                     
  1034                           ;../main.c: 67:             color_calibrated[4*i+1] = RGB_calibrated.R;
  1035   000EE8  C1CC  F059         	movff	main@i,??_main
  1036   000EEC  C1CD  F05A         	movff	main@i+1,??_main+1
  1037   000EF0  90D8               	bcf	status,0,c
  1038   000EF2  3659               	rlcf	??_main^0,f,c
  1039   000EF4  365A               	rlcf	(??_main+1)^0,f,c
  1040   000EF6  90D8               	bcf	status,0,c
  1041   000EF8  3659               	rlcf	??_main^0,f,c
  1042   000EFA  365A               	rlcf	(??_main+1)^0,f,c
  1043   000EFC  90D8               	bcf	status,0,c
  1044   000EFE  3659               	rlcf	??_main^0,f,c
  1045   000F00  365A               	rlcf	(??_main+1)^0,f,c
  1046   000F02  0E02               	movlw	2
  1047   000F04  2659               	addwf	??_main^0,f,c
  1048   000F06  0E00               	movlw	0
  1049   000F08  225A               	addwfc	(??_main+1)^0,f,c
  1050   000F0A  0E82               	movlw	low main@color_calibrated
  1051   000F0C  2459               	addwf	??_main^0,w,c
  1052   000F0E  6ED9               	movwf	fsr2l,c
  1053   000F10  0E01               	movlw	high main@color_calibrated
  1054   000F12  205A               	addwfc	(??_main+1)^0,w,c
  1055   000F14  6EDA               	movwf	fsr2h,c
  1056   000F16  C1D0  FFDE         	movff	main@RGB_calibrated+2,postinc2
  1057   000F1A  C1D1  FFDD         	movff	main@RGB_calibrated+3,postdec2
  1058   000F1E                     
  1059                           ;../main.c: 68:             color_calibrated[4*i+2] = RGB_calibrated.G;
  1060   000F1E  C1CC  F059         	movff	main@i,??_main
  1061   000F22  C1CD  F05A         	movff	main@i+1,??_main+1
  1062   000F26  90D8               	bcf	status,0,c
  1063   000F28  3659               	rlcf	??_main^0,f,c
  1064   000F2A  365A               	rlcf	(??_main+1)^0,f,c
  1065   000F2C  90D8               	bcf	status,0,c
  1066   000F2E  3659               	rlcf	??_main^0,f,c
  1067   000F30  365A               	rlcf	(??_main+1)^0,f,c
  1068   000F32  90D8               	bcf	status,0,c
  1069   000F34  3659               	rlcf	??_main^0,f,c
  1070   000F36  365A               	rlcf	(??_main+1)^0,f,c
  1071   000F38  0E04               	movlw	4
  1072   000F3A  2659               	addwf	??_main^0,f,c
  1073   000F3C  0E00               	movlw	0
  1074   000F3E  225A               	addwfc	(??_main+1)^0,f,c
  1075   000F40  0E82               	movlw	low main@color_calibrated
  1076   000F42  2459               	addwf	??_main^0,w,c
  1077   000F44  6ED9               	movwf	fsr2l,c
  1078   000F46  0E01               	movlw	high main@color_calibrated
  1079   000F48  205A               	addwfc	(??_main+1)^0,w,c
  1080   000F4A  6EDA               	movwf	fsr2h,c
  1081   000F4C  C1D2  FFDE         	movff	main@RGB_calibrated+4,postinc2
  1082   000F50  C1D3  FFDD         	movff	main@RGB_calibrated+5,postdec2
  1083   000F54                     
  1084                           ;../main.c: 69:             color_calibrated[4*i+3] = RGB_calibrated.B;
  1085   000F54  C1CC  F059         	movff	main@i,??_main
  1086   000F58  C1CD  F05A         	movff	main@i+1,??_main+1
  1087   000F5C  90D8               	bcf	status,0,c
  1088   000F5E  3659               	rlcf	??_main^0,f,c
  1089   000F60  365A               	rlcf	(??_main+1)^0,f,c
  1090   000F62  90D8               	bcf	status,0,c
  1091   000F64  3659               	rlcf	??_main^0,f,c
  1092   000F66  365A               	rlcf	(??_main+1)^0,f,c
  1093   000F68  90D8               	bcf	status,0,c
  1094   000F6A  3659               	rlcf	??_main^0,f,c
  1095   000F6C  365A               	rlcf	(??_main+1)^0,f,c
  1096   000F6E  0E06               	movlw	6
  1097   000F70  2659               	addwf	??_main^0,f,c
  1098   000F72  0E00               	movlw	0
  1099   000F74  225A               	addwfc	(??_main+1)^0,f,c
  1100   000F76  0E82               	movlw	low main@color_calibrated
  1101   000F78  2459               	addwf	??_main^0,w,c
  1102   000F7A  6ED9               	movwf	fsr2l,c
  1103   000F7C  0E01               	movlw	high main@color_calibrated
  1104   000F7E  205A               	addwfc	(??_main+1)^0,w,c
  1105   000F80  6EDA               	movwf	fsr2h,c
  1106   000F82  C1D4  FFDE         	movff	main@RGB_calibrated+6,postinc2
  1107   000F86  C1D5  FFDD         	movff	main@RGB_calibrated+7,postdec2
  1108   000F8A                     
  1109                           ;../main.c: 70:             LATHbits.LATH3 = 1;
  1110   000F8A  8680               	bsf	128,3,c	;volatile
  1111   000F8C                     
  1112                           ;../main.c: 72:             char readout2[100];;../main.c: 73:             sprintf(reado
      +                          ut2,"%d %d %d %d \r\n", RGB_calibrated.L,RGB_calibrated.R,RGB_calibrated.G,RGB_calibrate
      +                          d.B);
  1113   000F8C  0E7B               	movlw	low main@readout2
  1114   000F8E  0100               	movlb	0	; () banked
  1115   000F90  6F60               	movwf	sprintf@s& (0+255),b
  1116   000F92  0E00               	movlw	high main@readout2
  1117   000F94  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1118   000F96  0E04               	movlw	low (STR_2+3)
  1119   000F98  6F62               	movwf	sprintf@fmt& (0+255),b
  1120   000F9A  0E0E               	movlw	high (STR_2+3)
  1121   000F9C  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1122   000F9E  C1CE  F064         	movff	main@RGB_calibrated,?_sprintf+4
  1123   000FA2  C1CF  F065         	movff	main@RGB_calibrated+1,?_sprintf+5
  1124   000FA6  C1D0  F066         	movff	main@RGB_calibrated+2,?_sprintf+6
  1125   000FAA  C1D1  F067         	movff	main@RGB_calibrated+3,?_sprintf+7
  1126   000FAE  C1D2  F068         	movff	main@RGB_calibrated+4,?_sprintf+8
  1127   000FB2  C1D3  F069         	movff	main@RGB_calibrated+5,?_sprintf+9
  1128   000FB6  C1D4  F06A         	movff	main@RGB_calibrated+6,?_sprintf+10
  1129   000FBA  C1D5  F06B         	movff	main@RGB_calibrated+7,?_sprintf+11
  1130   000FBE  ECA4  F014         	call	_sprintf	;wreg free
  1131   000FC2                     
  1132                           ;../main.c: 74:             sendStringSerial4(readout2);
  1133   000FC2  0E7B               	movlw	low main@readout2
  1134   000FC4  6E02               	movwf	sendStringSerial4@string^0,c
  1135   000FC6  0E00               	movlw	high main@readout2
  1136   000FC8  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1137   000FCA  EC1A  F016         	call	_sendStringSerial4	;wreg free
  1138   000FCE                     
  1139                           ;../main.c: 75:             _delay((unsigned long)((2000)*(64000000/4000.0)));
  1140   000FCE  0EA3               	movlw	163
  1141   000FD0  6E5A               	movwf	(??_main+1)^0,c
  1142   000FD2  0E57               	movlw	87
  1143   000FD4  6E59               	movwf	??_main^0,c
  1144   000FD6  0E02               	movlw	2
  1145   000FD8                     u1887:
  1146   000FD8  2EE8               	decfsz	wreg,f,c
  1147   000FDA  D7FE               	bra	u1887
  1148   000FDC  2E59               	decfsz	??_main^0,f,c
  1149   000FDE  D7FC               	bra	u1887
  1150   000FE0  2E5A               	decfsz	(??_main+1)^0,f,c
  1151   000FE2  D7FA               	bra	u1887
  1152   000FE4  D000               	nop2	
  1153   000FE6                     
  1154                           ;../main.c: 76:             LATHbits.LATH3 = 0;
  1155   000FE6  9680               	bcf	128,3,c	;volatile
  1156   000FE8                     
  1157                           ;../main.c: 77:             _delay((unsigned long)((2000)*(64000000/4000.0)));
  1158   000FE8  0EA3               	movlw	163
  1159   000FEA  6E5A               	movwf	(??_main+1)^0,c
  1160   000FEC  0E57               	movlw	87
  1161   000FEE  6E59               	movwf	??_main^0,c
  1162   000FF0  0E02               	movlw	2
  1163   000FF2                     u1897:
  1164   000FF2  2EE8               	decfsz	wreg,f,c
  1165   000FF4  D7FE               	bra	u1897
  1166   000FF6  2E59               	decfsz	??_main^0,f,c
  1167   000FF8  D7FC               	bra	u1897
  1168   000FFA  2E5A               	decfsz	(??_main+1)^0,f,c
  1169   000FFC  D7FA               	bra	u1897
  1170   000FFE  D000               	nop2	
  1171   001000                     
  1172                           ;../main.c: 78:         }
  1173   001000  0101               	movlb	1	; () banked
  1174   001002  4BCC               	infsnz	main@i& (0+255),f,b
  1175   001004  2BCD               	incf	(main@i+1)& (0+255),f,b
  1176   001006                     
  1177                           ; BSR set to: 1
  1178   001006  BFCD               	btfsc	(main@i+1)& (0+255),7,b
  1179   001008  EF0F  F008         	goto	u1751
  1180   00100C  51CD               	movf	(main@i+1)& (0+255),w,b
  1181   00100E  E109               	bnz	u1750
  1182   001010  0E08               	movlw	8
  1183   001012  5DCC               	subwf	main@i& (0+255),w,b
  1184   001014  A0D8               	btfss	status,0,c
  1185   001016  EF0F  F008         	goto	u1751
  1186   00101A  EF11  F008         	goto	u1750
  1187   00101E                     u1751:
  1188   00101E  EF57  F007         	goto	l3035
  1189   001022                     u1750:
  1190   001022                     
  1191                           ; BSR set to: 1
  1192                           ;../main.c: 81:         lowerbound_calibrated = color_calibrated[8];
  1193   001022  C192  F0FD         	movff	main@color_calibrated+16,main@lowerbound_calibrated
  1194   001026  C193  F0FE         	movff	main@color_calibrated+17,main@lowerbound_calibrated+1
  1195                           
  1196                           ;../main.c: 82:         upperbound_calibrated = color_calibrated[28];
  1197   00102A  C1BA  F1C2         	movff	main@color_calibrated+56,main@upperbound_calibrated
  1198   00102E  C1BB  F1C3         	movff	main@color_calibrated+57,main@upperbound_calibrated+1
  1199   001032                     l3061:
  1200   001032  0E01               	movlw	1
  1201   001034  A68E               	btfss	142,3,c	;volatile
  1202   001036  0E00               	movlw	0
  1203   001038  A48E               	btfss	142,2,c	;volatile
  1204   00103A  0E00               	movlw	0
  1205   00103C  B0E8               	btfsc	wreg,0,c
  1206   00103E  EF23  F008         	goto	u1761
  1207   001042  EF27  F008         	goto	u1760
  1208   001046                     u1761:
  1209   001046  6A59               	clrf	??_main^0,c
  1210   001048  2A59               	incf	??_main^0,f,c
  1211   00104A  EF28  F008         	goto	u1768
  1212   00104E                     u1760:
  1213   00104E  6A59               	clrf	??_main^0,c
  1214   001050                     u1768:
  1215   001050  5059               	movf	??_main^0,w,c
  1216   001052  A4D8               	btfss	status,2,c
  1217   001054  EF2E  F008         	goto	u1771
  1218   001058  EF30  F008         	goto	u1770
  1219   00105C                     u1771:
  1220   00105C  EF19  F008         	goto	l3061
  1221   001060                     u1770:
  1222   001060                     
  1223                           ;../main.c: 86:         if (!PORTFbits.RF2){LATDbits.LATD7 = 1;}
  1224   001060  B48E               	btfsc	142,2,c	;volatile
  1225   001062  EF35  F008         	goto	u1781
  1226   001066  EF37  F008         	goto	u1780
  1227   00106A                     u1781:
  1228   00106A  EF3A  F008         	goto	l201
  1229   00106E                     u1780:
  1230   00106E  8E7C               	bsf	124,7,c	;volatile
  1231   001070  EF0E  F009         	goto	l3107
  1232   001074                     l201:
  1233   001074  8680               	bsf	128,3,c	;volatile
  1234   001076  EF0E  F009         	goto	l3107
  1235   00107A                     l3065:
  1236                           
  1237                           ; BSR set to: 1
  1238                           ;../main.c: 91:             time = 0;
  1239   00107A  0E00               	movlw	0
  1240   00107C  6FF5               	movwf	(_time+1)& (0+255),b
  1241   00107E  0E00               	movlw	0
  1242   001080  6FF4               	movwf	_time& (0+255),b
  1243   001082                     
  1244                           ; BSR set to: 1
  1245                           ;../main.c: 92:             forward(&motorL,&motorR);
  1246   001082  0EE7               	movlw	low main@motorL
  1247   001084  6E1A               	movwf	forward@mL^0,c
  1248   001086  0E01               	movlw	high main@motorL
  1249   001088  6E1B               	movwf	(forward@mL+1)^0,c
  1250   00108A  0EDE               	movlw	low main@motorR
  1251   00108C  6E1C               	movwf	forward@mR^0,c
  1252   00108E  0E01               	movlw	high main@motorR
  1253   001090  6E1D               	movwf	(forward@mR+1)^0,c
  1254   001092  ECF5  F013         	call	_forward	;wreg free
  1255   001096                     
  1256                           ;../main.c: 93:             color_read(&RGB_recorded);
  1257   001096  0ED6               	movlw	low main@RGB_recorded
  1258   001098  6E0C               	movwf	color_read@rgb^0,c
  1259   00109A  0E01               	movlw	high main@RGB_recorded
  1260   00109C  6E0D               	movwf	(color_read@rgb+1)^0,c
  1261   00109E  EC22  F011         	call	_color_read	;wreg free
  1262   0010A2                     
  1263                           ;../main.c: 94:             if (RGB_recorded.L<upperbound_calibrated && RGB_recorded.L>l
      +                          owerbound_calibrated){color_flag=1;}
  1264   0010A2  0101               	movlb	1	; () banked
  1265   0010A4  51C2               	movf	main@upperbound_calibrated& (0+255),w,b
  1266   0010A6  5DD6               	subwf	main@RGB_recorded& (0+255),w,b
  1267   0010A8  51C3               	movf	(main@upperbound_calibrated+1)& (0+255),w,b
  1268   0010AA  59D7               	subwfb	(main@RGB_recorded+1)& (0+255),w,b
  1269   0010AC  B0D8               	btfsc	status,0,c
  1270   0010AE  EF5B  F008         	goto	u1791
  1271   0010B2  EF5D  F008         	goto	u1790
  1272   0010B6                     u1791:
  1273   0010B6  EF6F  F008         	goto	l3077
  1274   0010BA                     u1790:
  1275   0010BA                     
  1276                           ; BSR set to: 1
  1277   0010BA  51D6               	movf	main@RGB_recorded& (0+255),w,b
  1278   0010BC  0100               	movlb	0	; () banked
  1279   0010BE  5DFD               	subwf	main@lowerbound_calibrated& (0+255),w,b
  1280   0010C0  0101               	movlb	1	; () banked
  1281   0010C2  51D7               	movf	(main@RGB_recorded+1)& (0+255),w,b
  1282   0010C4  0100               	movlb	0	; () banked
  1283   0010C6  59FE               	subwfb	(main@lowerbound_calibrated+1)& (0+255),w,b
  1284   0010C8  B0D8               	btfsc	status,0,c
  1285   0010CA  EF69  F008         	goto	u1801
  1286   0010CE  EF6B  F008         	goto	u1800
  1287   0010D2                     u1801:
  1288   0010D2  EF6F  F008         	goto	l3077
  1289   0010D6                     u1800:
  1290   0010D6                     
  1291                           ; BSR set to: 0
  1292   0010D6  0E00               	movlw	0
  1293   0010D8  6E5C               	movwf	(main@color_flag+1)^0,c
  1294   0010DA  0E01               	movlw	1
  1295   0010DC  6E5B               	movwf	main@color_flag^0,c
  1296   0010DE                     l3077:
  1297                           
  1298                           ;../main.c: 95:             if (color_flag){
  1299   0010DE  505B               	movf	main@color_flag^0,w,c
  1300   0010E0  105C               	iorwf	(main@color_flag+1)^0,w,c
  1301   0010E2  B4D8               	btfsc	status,2,c
  1302   0010E4  EF76  F008         	goto	u1811
  1303   0010E8  EF78  F008         	goto	u1810
  1304   0010EC                     u1811:
  1305   0010EC  EF02  F009         	goto	l3105
  1306   0010F0                     u1810:
  1307   0010F0                     
  1308                           ;../main.c: 96:                 stop(&motorL,&motorR);
  1309   0010F0  0EE7               	movlw	low main@motorL
  1310   0010F2  6E1A               	movwf	stop@mL^0,c
  1311   0010F4  0E01               	movlw	high main@motorL
  1312   0010F6  6E1B               	movwf	(stop@mL+1)^0,c
  1313   0010F8  0EDE               	movlw	low main@motorR
  1314   0010FA  6E1C               	movwf	stop@mR^0,c
  1315   0010FC  0E01               	movlw	high main@motorR
  1316   0010FE  6E1D               	movwf	(stop@mR+1)^0,c
  1317   001100  ECAE  F013         	call	_stop	;wreg free
  1318   001104                     
  1319                           ;../main.c: 97:                 color_read(&RGB_recorded);
  1320   001104  0ED6               	movlw	low main@RGB_recorded
  1321   001106  6E0C               	movwf	color_read@rgb^0,c
  1322   001108  0E01               	movlw	high main@RGB_recorded
  1323   00110A  6E0D               	movwf	(color_read@rgb+1)^0,c
  1324   00110C  EC22  F011         	call	_color_read	;wreg free
  1325   001110                     
  1326                           ;../main.c: 98:                 if (LATDbits.LATD7){color_name = color_processor_easy(&R
      +                          GB_recorded);}
  1327   001110  AE7C               	btfss	124,7,c	;volatile
  1328   001112  EF8D  F008         	goto	u1821
  1329   001116  EF8F  F008         	goto	u1820
  1330   00111A                     u1821:
  1331   00111A  EF9B  F008         	goto	l3087
  1332   00111E                     u1820:
  1333   00111E  0ED6               	movlw	low main@RGB_recorded
  1334   001120  6E01               	movwf	color_processor_easy@rgb^0,c
  1335   001122  0E01               	movlw	high main@RGB_recorded
  1336   001124  6E02               	movwf	(color_processor_easy@rgb+1)^0,c
  1337   001126  ECC3  F010         	call	_color_processor_easy	;wreg free
  1338   00112A  C001  F1C8         	movff	?_color_processor_easy,main@color_name
  1339   00112E  C002  F1C9         	movff	?_color_processor_easy+1,main@color_name+1
  1340   001132  EFA9  F008         	goto	l3089
  1341   001136                     l3087:
  1342   001136  0ED6               	movlw	low main@RGB_recorded
  1343   001138  6E01               	movwf	color_processor_hard@rgb^0,c
  1344   00113A  0E01               	movlw	high main@RGB_recorded
  1345   00113C  6E02               	movwf	(color_processor_hard@rgb+1)^0,c
  1346   00113E  0E82               	movlw	low main@color_calibrated
  1347   001140  6E03               	movwf	color_processor_hard@calibrated^0,c
  1348   001142  0E01               	movlw	high main@color_calibrated
  1349   001144  6E04               	movwf	(color_processor_hard@calibrated+1)^0,c
  1350   001146  ECFB  F00B         	call	_color_processor_hard	;wreg free
  1351   00114A  C001  F1C8         	movff	?_color_processor_hard,main@color_name
  1352   00114E  C002  F1C9         	movff	?_color_processor_hard+1,main@color_name+1
  1353   001152                     l3089:
  1354                           
  1355                           ;../main.c: 100:                 color_path[j] = color_name;
  1356   001152  90D8               	bcf	status,0,c
  1357   001154  0101               	movlb	1	; () banked
  1358   001156  35C6               	rlcf	main@j& (0+255),w,b
  1359   001158  6ED9               	movwf	fsr2l,c
  1360   00115A  35C7               	rlcf	(main@j+1)& (0+255),w,b
  1361   00115C  6EDA               	movwf	fsr2h,c
  1362   00115E  0EDF               	movlw	low main@color_path
  1363   001160  26D9               	addwf	fsr2l,f,c
  1364   001162  0E00               	movlw	high main@color_path
  1365   001164  22DA               	addwfc	fsr2h,f,c
  1366   001166  C1C8  FFDE         	movff	main@color_name,postinc2
  1367   00116A  C1C9  FFDD         	movff	main@color_name+1,postdec2
  1368   00116E                     
  1369                           ; BSR set to: 1
  1370                           ;../main.c: 101:                 time_path[j] = time;
  1371   00116E  90D8               	bcf	status,0,c
  1372   001170  35C6               	rlcf	main@j& (0+255),w,b
  1373   001172  6ED9               	movwf	fsr2l,c
  1374   001174  35C7               	rlcf	(main@j+1)& (0+255),w,b
  1375   001176  6EDA               	movwf	fsr2h,c
  1376   001178  0E64               	movlw	low main@time_path
  1377   00117A  26D9               	addwf	fsr2l,f,c
  1378   00117C  0E01               	movlw	high main@time_path
  1379   00117E  22DA               	addwfc	fsr2h,f,c
  1380   001180  C1F4  FFDE         	movff	_time,postinc2
  1381   001184  C1F5  FFDD         	movff	_time+1,postdec2
  1382   001188                     
  1383                           ; BSR set to: 1
  1384                           ;../main.c: 104:                 char readout3[100];;../main.c: 105:                 spr
      +                          intf(readout3,"%d %d %d %d %d \r\n", color_name,RGB_recorded.L,RGB_recorded.R,RGB_record
      +                          ed.G,RGB_recorded.B);
  1385   001188  0E00               	movlw	low main@readout3
  1386   00118A  0100               	movlb	0	; () banked
  1387   00118C  6F60               	movwf	sprintf@s& (0+255),b
  1388   00118E  0E01               	movlw	high main@readout3
  1389   001190  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1390   001192  0E01               	movlw	low STR_2
  1391   001194  6F62               	movwf	sprintf@fmt& (0+255),b
  1392   001196  0E0E               	movlw	high STR_2
  1393   001198  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1394   00119A  C1C8  F064         	movff	main@color_name,?_sprintf+4
  1395   00119E  C1C9  F065         	movff	main@color_name+1,?_sprintf+5
  1396   0011A2  C1D6  F066         	movff	main@RGB_recorded,?_sprintf+6
  1397   0011A6  C1D7  F067         	movff	main@RGB_recorded+1,?_sprintf+7
  1398   0011AA  C1D8  F068         	movff	main@RGB_recorded+2,?_sprintf+8
  1399   0011AE  C1D9  F069         	movff	main@RGB_recorded+3,?_sprintf+9
  1400   0011B2  C1DA  F06A         	movff	main@RGB_recorded+4,?_sprintf+10
  1401   0011B6  C1DB  F06B         	movff	main@RGB_recorded+5,?_sprintf+11
  1402   0011BA  C1DC  F06C         	movff	main@RGB_recorded+6,?_sprintf+12
  1403   0011BE  C1DD  F06D         	movff	main@RGB_recorded+7,?_sprintf+13
  1404   0011C2  ECA4  F014         	call	_sprintf	;wreg free
  1405   0011C6                     
  1406                           ;../main.c: 106:                 sendStringSerial4(readout3);
  1407   0011C6  0E00               	movlw	low main@readout3
  1408   0011C8  6E02               	movwf	sendStringSerial4@string^0,c
  1409   0011CA  0E01               	movlw	high main@readout3
  1410   0011CC  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1411   0011CE  EC1A  F016         	call	_sendStringSerial4	;wreg free
  1412   0011D2                     
  1413                           ;../main.c: 108:                 motor_action(color_name,&motorL,&motorR);
  1414   0011D2  C1C8  F022         	movff	main@color_name,motor_action@color
  1415   0011D6  C1C9  F023         	movff	main@color_name+1,motor_action@color+1
  1416   0011DA  0EE7               	movlw	low main@motorL
  1417   0011DC  6E24               	movwf	motor_action@l^0,c
  1418   0011DE  0E01               	movlw	high main@motorL
  1419   0011E0  6E25               	movwf	(motor_action@l+1)^0,c
  1420   0011E2  0EDE               	movlw	low main@motorR
  1421   0011E4  6E26               	movwf	motor_action@r^0,c
  1422   0011E6  0E01               	movlw	high main@motorR
  1423   0011E8  6E27               	movwf	(motor_action@r+1)^0,c
  1424   0011EA  ECD4  F00A         	call	_motor_action	;wreg free
  1425   0011EE                     
  1426                           ;../main.c: 110:                 j++;
  1427   0011EE  0101               	movlb	1	; () banked
  1428   0011F0  4BC6               	infsnz	main@j& (0+255),f,b
  1429   0011F2  2BC7               	incf	(main@j+1)& (0+255),f,b
  1430   0011F4                     
  1431                           ; BSR set to: 1
  1432                           ;../main.c: 111:                 time = 0;
  1433   0011F4  0E00               	movlw	0
  1434   0011F6  6FF5               	movwf	(_time+1)& (0+255),b
  1435   0011F8  0E00               	movlw	0
  1436   0011FA  6FF4               	movwf	_time& (0+255),b
  1437   0011FC                     
  1438                           ; BSR set to: 1
  1439                           ;../main.c: 112:                 color_flag = 0;
  1440   0011FC  0E00               	movlw	0
  1441   0011FE  6E5C               	movwf	(main@color_flag+1)^0,c
  1442   001200  0E00               	movlw	0
  1443   001202  6E5B               	movwf	main@color_flag^0,c
  1444   001204                     l3105:
  1445                           
  1446                           ;../main.c: 114:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1447   001204  0E11               	movlw	17
  1448   001206  6E5A               	movwf	(??_main+1)^0,c
  1449   001208  0E3C               	movlw	60
  1450   00120A  6E59               	movwf	??_main^0,c
  1451   00120C  0ECB               	movlw	203
  1452   00120E                     u1907:
  1453   00120E  2EE8               	decfsz	wreg,f,c
  1454   001210  D7FE               	bra	u1907
  1455   001212  2E59               	decfsz	??_main^0,f,c
  1456   001214  D7FC               	bra	u1907
  1457   001216  2E5A               	decfsz	(??_main+1)^0,f,c
  1458   001218  D7FA               	bra	u1907
  1459   00121A  F000               	nop	
  1460   00121C                     l3107:
  1461                           
  1462                           ;../main.c: 90:         while (color_name != 8){
  1463   00121C  0E08               	movlw	8
  1464   00121E  0101               	movlb	1	; () banked
  1465   001220  19C8               	xorwf	main@color_name& (0+255),w,b
  1466   001222  11C9               	iorwf	(main@color_name+1)& (0+255),w,b
  1467   001224  A4D8               	btfss	status,2,c
  1468   001226  EF17  F009         	goto	u1831
  1469   00122A  EF19  F009         	goto	u1830
  1470   00122E                     u1831:
  1471   00122E  EF3D  F008         	goto	l3065
  1472   001232                     u1830:
  1473   001232                     
  1474                           ; BSR set to: 1
  1475                           ;../main.c: 118:         spin_180(&motorL,&motorR);
  1476   001232  0EE7               	movlw	low main@motorL
  1477   001234  6E1A               	movwf	spin_180@mL^0,c
  1478   001236  0E01               	movlw	high main@motorL
  1479   001238  6E1B               	movwf	(spin_180@mL+1)^0,c
  1480   00123A  0EDE               	movlw	low main@motorR
  1481   00123C  6E1C               	movwf	spin_180@mR^0,c
  1482   00123E  0E01               	movlw	high main@motorR
  1483   001240  6E1D               	movwf	(spin_180@mR+1)^0,c
  1484   001242  EC19  F012         	call	_spin_180	;wreg free
  1485   001246                     
  1486                           ;../main.c: 119:         for (int k=0;k<15;k++){
  1487   001246  0E00               	movlw	0
  1488   001248  0101               	movlb	1	; () banked
  1489   00124A  6FCB               	movwf	(main@k+1)& (0+255),b
  1490   00124C  0E00               	movlw	0
  1491   00124E  6FCA               	movwf	main@k& (0+255),b
  1492   001250                     l3113:
  1493                           
  1494                           ; BSR set to: 1
  1495   001250  BFCB               	btfsc	(main@k+1)& (0+255),7,b
  1496   001252  EF34  F009         	goto	u1841
  1497   001256  51CB               	movf	(main@k+1)& (0+255),w,b
  1498   001258  E109               	bnz	u1840
  1499   00125A  0E0F               	movlw	15
  1500   00125C  5DCA               	subwf	main@k& (0+255),w,b
  1501   00125E  A0D8               	btfss	status,0,c
  1502   001260  EF34  F009         	goto	u1841
  1503   001264  EF36  F009         	goto	u1840
  1504   001268                     u1841:
  1505   001268  EF38  F009         	goto	l210
  1506   00126C                     u1840:
  1507   00126C  EF4B  F007         	goto	l193
  1508   001270                     l210:
  1509                           
  1510                           ; BSR set to: 1
  1511                           ;../main.c: 120:             INTCONbits.GIE = 0;
  1512   001270  9EF2               	bcf	242,7,c	;volatile
  1513   001272                     
  1514                           ; BSR set to: 1
  1515                           ;../main.c: 121:             time_return = 0;
  1516   001272  0E00               	movlw	0
  1517   001274  6FC5               	movwf	(main@time_return+1)& (0+255),b
  1518   001276  0E00               	movlw	0
  1519   001278  6FC4               	movwf	main@time_return& (0+255),b
  1520   00127A                     
  1521                           ; BSR set to: 1
  1522                           ;../main.c: 122:             motor_action(color_path[k],&motorL,&motorR);
  1523   00127A  90D8               	bcf	status,0,c
  1524   00127C  35CA               	rlcf	main@k& (0+255),w,b
  1525   00127E  6ED9               	movwf	fsr2l,c
  1526   001280  35CB               	rlcf	(main@k+1)& (0+255),w,b
  1527   001282  6EDA               	movwf	fsr2h,c
  1528   001284  0EDF               	movlw	low main@color_path
  1529   001286  26D9               	addwf	fsr2l,f,c
  1530   001288  0E00               	movlw	high main@color_path
  1531   00128A  22DA               	addwfc	fsr2h,f,c
  1532   00128C  CFDE F022          	movff	postinc2,motor_action@color
  1533   001290  CFDD F023          	movff	postdec2,motor_action@color+1
  1534   001294  0EE7               	movlw	low main@motorL
  1535   001296  6E24               	movwf	motor_action@l^0,c
  1536   001298  0E01               	movlw	high main@motorL
  1537   00129A  6E25               	movwf	(motor_action@l+1)^0,c
  1538   00129C  0EDE               	movlw	low main@motorR
  1539   00129E  6E26               	movwf	motor_action@r^0,c
  1540   0012A0  0E01               	movlw	high main@motorR
  1541   0012A2  6E27               	movwf	(motor_action@r+1)^0,c
  1542   0012A4  ECD4  F00A         	call	_motor_action	;wreg free
  1543   0012A8                     
  1544                           ;../main.c: 123:             forward(&motorL,&motorR);
  1545   0012A8  0EE7               	movlw	low main@motorL
  1546   0012AA  6E1A               	movwf	forward@mL^0,c
  1547   0012AC  0E01               	movlw	high main@motorL
  1548   0012AE  6E1B               	movwf	(forward@mL+1)^0,c
  1549   0012B0  0EDE               	movlw	low main@motorR
  1550   0012B2  6E1C               	movwf	forward@mR^0,c
  1551   0012B4  0E01               	movlw	high main@motorR
  1552   0012B6  6E1D               	movwf	(forward@mR+1)^0,c
  1553   0012B8  ECF5  F013         	call	_forward	;wreg free
  1554                           
  1555                           ;../main.c: 124:             while (time_return < time_path[k]) {
  1556   0012BC  EF6F  F009         	goto	l3127
  1557   0012C0                     l3123:
  1558                           
  1559                           ; BSR set to: 1
  1560                           ;../main.c: 125:                 _delay((unsigned long)((50)*(64000000/4000.0)));
  1561   0012C0  0E05               	movlw	5
  1562   0012C2  6E5A               	movwf	(??_main+1)^0,c
  1563   0012C4  0E0F               	movlw	15
  1564   0012C6  6E59               	movwf	??_main^0,c
  1565   0012C8  0EF1               	movlw	241
  1566   0012CA                     u1917:
  1567   0012CA  2EE8               	decfsz	wreg,f,c
  1568   0012CC  D7FE               	bra	u1917
  1569   0012CE  2E59               	decfsz	??_main^0,f,c
  1570   0012D0  D7FC               	bra	u1917
  1571   0012D2  2E5A               	decfsz	(??_main+1)^0,f,c
  1572   0012D4  D7FA               	bra	u1917
  1573   0012D6  F000               	nop	
  1574   0012D8                     
  1575                           ;../main.c: 126:                 time_return++;
  1576   0012D8  0101               	movlb	1	; () banked
  1577   0012DA  4BC4               	infsnz	main@time_return& (0+255),f,b
  1578   0012DC  2BC5               	incf	(main@time_return+1)& (0+255),f,b
  1579   0012DE                     l3127:
  1580                           
  1581                           ;../main.c: 124:             while (time_return < time_path[k]) {
  1582   0012DE  90D8               	bcf	status,0,c
  1583   0012E0  0101               	movlb	1	; () banked
  1584   0012E2  35CA               	rlcf	main@k& (0+255),w,b
  1585   0012E4  6ED9               	movwf	fsr2l,c
  1586   0012E6  35CB               	rlcf	(main@k+1)& (0+255),w,b
  1587   0012E8  6EDA               	movwf	fsr2h,c
  1588   0012EA  0E64               	movlw	low main@time_path
  1589   0012EC  26D9               	addwf	fsr2l,f,c
  1590   0012EE  0E01               	movlw	high main@time_path
  1591   0012F0  22DA               	addwfc	fsr2h,f,c
  1592   0012F2  50DE               	movf	postinc2,w,c
  1593   0012F4  5DC4               	subwf	main@time_return& (0+255),w,b
  1594   0012F6  50DE               	movf	postinc2,w,c
  1595   0012F8  59C5               	subwfb	(main@time_return+1)& (0+255),w,b
  1596   0012FA  A0D8               	btfss	status,0,c
  1597   0012FC  EF82  F009         	goto	u1851
  1598   001300  EF84  F009         	goto	u1850
  1599   001304                     u1851:
  1600   001304  EF60  F009         	goto	l3123
  1601   001308                     u1850:
  1602   001308                     
  1603                           ; BSR set to: 1
  1604                           ;../main.c: 128:             stop(&motorL,&motorR);
  1605   001308  0EE7               	movlw	low main@motorL
  1606   00130A  6E1A               	movwf	stop@mL^0,c
  1607   00130C  0E01               	movlw	high main@motorL
  1608   00130E  6E1B               	movwf	(stop@mL+1)^0,c
  1609   001310  0EDE               	movlw	low main@motorR
  1610   001312  6E1C               	movwf	stop@mR^0,c
  1611   001314  0E01               	movlw	high main@motorR
  1612   001316  6E1D               	movwf	(stop@mR+1)^0,c
  1613   001318  ECAE  F013         	call	_stop	;wreg free
  1614   00131C                     
  1615                           ;../main.c: 129:         }
  1616   00131C  0101               	movlb	1	; () banked
  1617   00131E  4BCA               	infsnz	main@k& (0+255),f,b
  1618   001320  2BCB               	incf	(main@k+1)& (0+255),f,b
  1619   001322  EF28  F009         	goto	l3113
  1620   001326  EF1F  F000         	goto	start
  1621   00132A                     __end_of_main:
  1622                           	callstack 0
  1623                           
  1624 ;; *************** function _sprintf *****************
  1625 ;; Defined at:
  1626 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;  s               2    0[BANK0 ] PTR unsigned char 
  1629 ;;		 -> main@readout3(100), main@readout2(100), 
  1630 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1631 ;;		 -> STR_2(18), STR_1(15), 
  1632 ;; Auto vars:     Size  Location     Type
  1633 ;;  f              11   16[BANK0 ] struct _IO_FILE
  1634 ;;  ap              2   14[BANK0 ] PTR void [1]
  1635 ;;		 -> ?_sprintf(2), 
  1636 ;;  ret             2    0        int 
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  2    0[BANK0 ] int 
  1639 ;; Registers used:
  1640 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1646 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1647 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1649 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1650 ;;Total ram usage:       27 bytes
  1651 ;; Hardware stack levels used: 1
  1652 ;; Hardware stack levels required when called: 8
  1653 ;; This function calls:
  1654 ;;		_vfprintf
  1655 ;; This function is called by:
  1656 ;;		_main
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660                           	psect	text1
  1661   002948                     __ptext1:
  1662                           	callstack 0
  1663   002948                     _sprintf:
  1664                           	callstack 22
  1665   002948  0E64               	movlw	low (?_sprintf+4)
  1666   00294A  0100               	movlb	0	; () banked
  1667   00294C  6F6E               	movwf	sprintf@ap& (0+255),b
  1668   00294E  0E00               	movlw	high (?_sprintf+4)
  1669   002950  6F6F               	movwf	(sprintf@ap+1)& (0+255),b
  1670   002952  C060  F070         	movff	sprintf@s,sprintf@f
  1671   002956  C061  F071         	movff	sprintf@s+1,sprintf@f+1
  1672   00295A                     
  1673                           ; BSR set to: 0
  1674   00295A  0E00               	movlw	0
  1675   00295C  6F74               	movwf	(sprintf@f+4)& (0+255),b
  1676   00295E  0E00               	movlw	0
  1677   002960  6F73               	movwf	(sprintf@f+3)& (0+255),b
  1678   002962                     
  1679                           ; BSR set to: 0
  1680   002962  0E00               	movlw	0
  1681   002964  6F7A               	movwf	(sprintf@f+10)& (0+255),b
  1682   002966  0E00               	movlw	0
  1683   002968  6F79               	movwf	(sprintf@f+9)& (0+255),b
  1684   00296A                     
  1685                           ; BSR set to: 0
  1686   00296A  0E70               	movlw	low sprintf@f
  1687   00296C  6E51               	movwf	vfprintf@fp^0,c
  1688   00296E  0E00               	movlw	high sprintf@f
  1689   002970  6E52               	movwf	(vfprintf@fp+1)^0,c
  1690   002972  C062  F053         	movff	sprintf@fmt,vfprintf@fmt
  1691   002976  C063  F054         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1692   00297A  0E6E               	movlw	low sprintf@ap
  1693   00297C  6E55               	movwf	vfprintf@ap^0,c
  1694   00297E  0E00               	movlw	high sprintf@ap
  1695   002980  6E56               	movwf	(vfprintf@ap+1)^0,c
  1696   002982  ECCD  F014         	call	_vfprintf	;wreg free
  1697   002986  0100               	movlb	0	; () banked
  1698   002988  5173               	movf	(sprintf@f+3)& (0+255),w,b
  1699   00298A  2560               	addwf	sprintf@s& (0+255),w,b
  1700   00298C  6ED9               	movwf	fsr2l,c
  1701   00298E  5174               	movf	(sprintf@f+4)& (0+255),w,b
  1702   002990  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  1703   002992  6EDA               	movwf	fsr2h,c
  1704   002994  0E00               	movlw	0
  1705   002996  6EDF               	movwf	indf2,c
  1706   002998                     
  1707                           ; BSR set to: 0
  1708   002998  0012               	return		;funcret
  1709   00299A                     __end_of_sprintf:
  1710                           	callstack 0
  1711                           
  1712 ;; *************** function _vfprintf *****************
  1713 ;; Defined at:
  1714 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1715 ;; Parameters:    Size  Location     Type
  1716 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
  1717 ;;		 -> sprintf@f(11), 
  1718 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
  1719 ;;		 -> STR_2(18), STR_1(15), 
  1720 ;;  ap              2   84[COMRAM] PTR PTR void 
  1721 ;;		 -> sprintf@ap(2), 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  cfmt            2   86[COMRAM] PTR unsigned char 
  1724 ;;		 -> STR_2(18), STR_1(15), 
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  2   80[COMRAM] int 
  1727 ;; Registers used:
  1728 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1734 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1735 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1737 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1738 ;;Total ram usage:        8 bytes
  1739 ;; Hardware stack levels used: 1
  1740 ;; Hardware stack levels required when called: 7
  1741 ;; This function calls:
  1742 ;;		_vfpfcnvrt
  1743 ;; This function is called by:
  1744 ;;		_sprintf
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           	psect	text2
  1749   00299A                     __ptext2:
  1750                           	callstack 0
  1751   00299A                     _vfprintf:
  1752                           	callstack 22
  1753   00299A                     
  1754                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  1755   00299A  C053  F057         	movff	vfprintf@fmt,vfprintf@cfmt
  1756   00299E  C054  F058         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1757                           
  1758                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1759   0029A2  EFE1  F014         	goto	l2745
  1760   0029A6                     l2743:
  1761                           
  1762                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1763   0029A6  C051  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1764   0029AA  C052  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1765   0029AE  0E57               	movlw	low vfprintf@cfmt
  1766   0029B0  6E41               	movwf	vfpfcnvrt@fmt^0,c
  1767   0029B2  0E00               	movlw	high vfprintf@cfmt
  1768   0029B4  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1769   0029B6  C055  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
  1770   0029BA  C056  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1771   0029BE  EC4D  F00F         	call	_vfpfcnvrt	;wreg free
  1772   0029C2                     l2745:
  1773                           
  1774                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1775   0029C2  C057  FFF6         	movff	vfprintf@cfmt,tblptrl
  1776   0029C6  C058  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1777   0029CA                     	if	0	;tblptru may be non-zero
  1778   0029CA                     	endif
  1779   0029CA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1780   0029CA  0E00               	movlw	low (__mediumconst shr (0+16))
  1781   0029CC  6EF8               	movwf	tblptru,c
  1782   0029CE                     	endif
  1783   0029CE  0008               	tblrd		*
  1784   0029D0  50F5               	movf	tablat,w,c
  1785   0029D2  0900               	iorlw	0
  1786   0029D4  A4D8               	btfss	status,2,c
  1787   0029D6  EFEF  F014         	goto	u1521
  1788   0029DA  EFF1  F014         	goto	u1520
  1789   0029DE                     u1521:
  1790   0029DE  EFD3  F014         	goto	l2743
  1791   0029E2                     u1520:
  1792   0029E2                     
  1793                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  1794   0029E2  0E00               	movlw	0
  1795   0029E4  6E52               	movwf	(?_vfprintf+1)^0,c
  1796   0029E6  0E00               	movlw	0
  1797   0029E8  6E51               	movwf	?_vfprintf^0,c
  1798   0029EA  0012               	return		;funcret
  1799   0029EC                     __end_of_vfprintf:
  1800                           	callstack 0
  1801                           
  1802 ;; *************** function _vfpfcnvrt *****************
  1803 ;; Defined at:
  1804 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
  1807 ;;		 -> sprintf@f(11), 
  1808 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
  1809 ;;		 -> vfprintf@cfmt(2), 
  1810 ;;  ap              2   66[COMRAM] PTR PTR void 
  1811 ;;		 -> sprintf@ap(2), 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;  convarg         8   70[COMRAM] struct .
  1814 ;;  cp              2   78[COMRAM] PTR unsigned char 
  1815 ;;		 -> STR_2(18), STR_1(15), 
  1816 ;;  i               2    0        int 
  1817 ;;  done            2    0        int 
  1818 ;;  c               1    0        unsigned char 
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      void 
  1821 ;; Registers used:
  1822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1828 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1829 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1830 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1831 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1832 ;;Total ram usage:       18 bytes
  1833 ;; Hardware stack levels used: 1
  1834 ;; Hardware stack levels required when called: 6
  1835 ;; This function calls:
  1836 ;;		_dtoa
  1837 ;;		_fputc
  1838 ;; This function is called by:
  1839 ;;		_vfprintf
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text3
  1844   001E9A                     __ptext3:
  1845                           	callstack 0
  1846   001E9A                     _vfpfcnvrt:
  1847                           	callstack 22
  1848   001E9A                     
  1849                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  1850   001E9A  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1851   001E9E  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1852   001EA2  CFDE FFF6          	movff	postinc2,tblptrl
  1853   001EA6  CFDD FFF7          	movff	postdec2,tblptrh
  1854   001EAA                     	if	0	;tblptru may be non-zero
  1855   001EAA                     	endif
  1856   001EAA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1857   001EAA  0E00               	movlw	low (__mediumconst shr (0+16))
  1858   001EAC  6EF8               	movwf	tblptru,c
  1859   001EAE                     	endif
  1860   001EAE  0008               	tblrd		*
  1861   001EB0  50F5               	movf	tablat,w,c
  1862   001EB2  0A25               	xorlw	37
  1863   001EB4  A4D8               	btfss	status,2,c
  1864   001EB6  EF5F  F00F         	goto	u1401
  1865   001EBA  EF61  F00F         	goto	u1400
  1866   001EBE                     u1401:
  1867   001EBE  EFE5  F00F         	goto	l2509
  1868   001EC2                     u1400:
  1869   001EC2                     
  1870                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  1871   001EC2  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1872   001EC6  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1873   001ECA  2ADE               	incf	postinc2,f,c
  1874   001ECC  0E00               	movlw	0
  1875   001ECE  22DD               	addwfc	postdec2,f,c
  1876   001ED0                     
  1877                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  1878   001ED0  0E00               	movlw	0
  1879   001ED2  0101               	movlb	1	; () banked
  1880   001ED4  6FF1               	movwf	(_width+1)& (0+255),b
  1881   001ED6  0E00               	movlw	0
  1882   001ED8  6FF0               	movwf	_width& (0+255),b
  1883   001EDA  C1F0  F1FA         	movff	_width,_flags
  1884   001EDE                     
  1885                           ; BSR set to: 1
  1886                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  1887   001EDE  69F2               	setf	_prec& (0+255),b
  1888   001EE0  69F3               	setf	(_prec+1)& (0+255),b
  1889   001EE2                     
  1890                           ; BSR set to: 1
  1891                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1892   001EE2  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1893   001EE6  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1894   001EEA  CFDE F04F          	movff	postinc2,vfpfcnvrt@cp
  1895   001EEE  CFDD F050          	movff	postdec2,vfpfcnvrt@cp+1
  1896   001EF2                     
  1897                           ; BSR set to: 1
  1898                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1899   001EF2  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1900   001EF6  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1901   001EFA                     	if	0	;tblptru may be non-zero
  1902   001EFA                     	endif
  1903   001EFA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1904   001EFA  0E00               	movlw	low (__mediumconst shr (0+16))
  1905   001EFC  6EF8               	movwf	tblptru,c
  1906   001EFE                     	endif
  1907   001EFE  0008               	tblrd		*
  1908   001F00  50F5               	movf	tablat,w,c
  1909   001F02  0A64               	xorlw	100
  1910   001F04  B4D8               	btfsc	status,2,c
  1911   001F06  EF87  F00F         	goto	u1411
  1912   001F0A  EF89  F00F         	goto	u1410
  1913   001F0E                     u1411:
  1914   001F0E  EF99  F00F         	goto	l2499
  1915   001F12                     u1410:
  1916   001F12                     
  1917                           ; BSR set to: 1
  1918   001F12  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1919   001F16  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1920   001F1A                     	if	0	;tblptru may be non-zero
  1921   001F1A                     	endif
  1922   001F1A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1923   001F1A  0E00               	movlw	low (__mediumconst shr (0+16))
  1924   001F1C  6EF8               	movwf	tblptru,c
  1925   001F1E                     	endif
  1926   001F1E  0008               	tblrd		*
  1927   001F20  50F5               	movf	tablat,w,c
  1928   001F22  0A69               	xorlw	105
  1929   001F24  A4D8               	btfss	status,2,c
  1930   001F26  EF97  F00F         	goto	u1421
  1931   001F2A  EF99  F00F         	goto	u1420
  1932   001F2E                     u1421:
  1933   001F2E  EFDC  F00F         	goto	l2505
  1934   001F32                     u1420:
  1935   001F32                     l2499:
  1936                           
  1937                           ; BSR set to: 1
  1938                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1939   001F32  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1940   001F36  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1941   001F3A  CFDF F045          	movff	indf2,??_vfpfcnvrt
  1942   001F3E  0E02               	movlw	2
  1943   001F40  26DE               	addwf	postinc2,f,c
  1944   001F42  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  1945   001F46  0E00               	movlw	0
  1946   001F48  22DD               	addwfc	postdec2,f,c
  1947   001F4A  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1948   001F4E  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1949   001F52  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg
  1950   001F56  CFDD F048          	movff	postdec2,vfpfcnvrt@convarg+1
  1951   001F5A  0E00               	movlw	0
  1952   001F5C  BE48               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1953   001F5E  0EFF               	movlw	-1
  1954   001F60  6E49               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1955   001F62  6E4A               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1956   001F64  6E4B               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1957   001F66  6E4C               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1958   001F68  6E4D               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1959   001F6A  6E4E               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1960                           
  1961                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1962   001F6C  0E01               	movlw	1
  1963   001F6E  244F               	addwf	vfpfcnvrt@cp^0,w,c
  1964   001F70  6E45               	movwf	??_vfpfcnvrt^0,c
  1965   001F72  0E00               	movlw	0
  1966   001F74  2050               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1967   001F76  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  1968   001F78  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1969   001F7C  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1970   001F80  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  1971   001F84  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1972   001F88                     
  1973                           ; BSR set to: 1
  1974                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1975   001F88  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1976   001F8C  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1977   001F90  C047  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  1978   001F94  C048  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1979   001F98  C049  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1980   001F9C  C04A  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1981   001FA0  C04B  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1982   001FA4  C04C  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1983   001FA8  C04D  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1984   001FAC  C04E  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1985   001FB0  EC95  F009         	call	_dtoa	;wreg free
  1986   001FB4  EFFB  F00F         	goto	l1171
  1987   001FB8                     l2505:
  1988                           
  1989                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1990   001FB8  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1991   001FBC  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1992   001FC0  2ADE               	incf	postinc2,f,c
  1993   001FC2  0E00               	movlw	0
  1994   001FC4  22DD               	addwfc	postdec2,f,c
  1995   001FC6  EFFB  F00F         	goto	l1171
  1996   001FCA                     l2509:
  1997                           
  1998                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1999   001FCA  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2000   001FCE  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2001   001FD2  CFDE FFF6          	movff	postinc2,tblptrl
  2002   001FD6  CFDD FFF7          	movff	postdec2,tblptrh
  2003   001FDA                     	if	0	;tblptru may be non-zero
  2004   001FDA                     	endif
  2005   001FDA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2006   001FDA  0E00               	movlw	low (__mediumconst shr (0+16))
  2007   001FDC  6EF8               	movwf	tblptru,c
  2008   001FDE                     	endif
  2009   001FDE  0008               	tblrd		*
  2010   001FE0  50F5               	movf	tablat,w,c
  2011   001FE2  6E01               	movwf	fputc@c^0,c
  2012   001FE4  6A02               	clrf	(fputc@c+1)^0,c
  2013   001FE6  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2014   001FEA  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2015   001FEE  ECFC  F00F         	call	_fputc	;wreg free
  2016   001FF2  EFDC  F00F         	goto	l2505
  2017   001FF6                     l1171:
  2018   001FF6  0012               	return		;funcret
  2019   001FF8                     __end_of_vfpfcnvrt:
  2020                           	callstack 0
  2021                           
  2022 ;; *************** function _dtoa *****************
  2023 ;; Defined at:
  2024 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2027 ;;		 -> sprintf@f(11), 
  2028 ;;  d               8   29[COMRAM] long long 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  n               8   51[COMRAM] long long 
  2031 ;;  i               2   59[COMRAM] int 
  2032 ;;  w               2   49[COMRAM] int 
  2033 ;;  p               2   47[COMRAM] int 
  2034 ;;  s               1   61[COMRAM] unsigned char 
  2035 ;; Return value:  Size  Location     Type
  2036 ;;                  1    wreg      void 
  2037 ;; Registers used:
  2038 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2039 ;; Tracked objects:
  2040 ;;		On entry : 0/0
  2041 ;;		On exit  : 0/0
  2042 ;;		Unchanged: 0/0
  2043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2044 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2045 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2046 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2047 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2048 ;;Total ram usage:       35 bytes
  2049 ;; Hardware stack levels used: 1
  2050 ;; Hardware stack levels required when called: 5
  2051 ;; This function calls:
  2052 ;;		___aodiv
  2053 ;;		___aomod
  2054 ;;		_abs
  2055 ;;		_pad
  2056 ;; This function is called by:
  2057 ;;		_vfpfcnvrt
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           	psect	text4
  2062   00132A                     __ptext4:
  2063                           	callstack 0
  2064   00132A                     _dtoa:
  2065                           	callstack 22
  2066   00132A                     
  2067                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2068   00132A  C01E  F034         	movff	dtoa@d,dtoa@n
  2069   00132E  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  2070   001332  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  2071   001336  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  2072   00133A  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  2073   00133E  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  2074   001342  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  2075   001346  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  2076   00134A                     
  2077                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2078   00134A  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  2079   00134C  EFAA  F009         	goto	u1241
  2080   001350  EFAD  F009         	goto	u1240
  2081   001354                     u1241:
  2082   001354  0E01               	movlw	1
  2083   001356  EFAE  F009         	goto	u1250
  2084   00135A                     u1240:
  2085   00135A  0E00               	movlw	0
  2086   00135C                     u1250:
  2087   00135C  6E3E               	movwf	dtoa@s^0,c
  2088   00135E                     
  2089                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2090   00135E  503E               	movf	dtoa@s^0,w,c
  2091   001360  B4D8               	btfsc	status,2,c
  2092   001362  EFB5  F009         	goto	u1261
  2093   001366  EFB7  F009         	goto	u1260
  2094   00136A                     u1261:
  2095   00136A  EFC7  F009         	goto	l2397
  2096   00136E                     u1260:
  2097   00136E                     
  2098                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2099   00136E  1E3B               	comf	(dtoa@n+7)^0,f,c
  2100   001370  1E3A               	comf	(dtoa@n+6)^0,f,c
  2101   001372  1E39               	comf	(dtoa@n+5)^0,f,c
  2102   001374  1E38               	comf	(dtoa@n+4)^0,f,c
  2103   001376  1E37               	comf	(dtoa@n+3)^0,f,c
  2104   001378  1E36               	comf	(dtoa@n+2)^0,f,c
  2105   00137A  1E35               	comf	(dtoa@n+1)^0,f,c
  2106   00137C  6C34               	negf	dtoa@n^0,c
  2107   00137E  0E00               	movlw	0
  2108   001380  2235               	addwfc	(dtoa@n+1)^0,f,c
  2109   001382  2236               	addwfc	(dtoa@n+2)^0,f,c
  2110   001384  2237               	addwfc	(dtoa@n+3)^0,f,c
  2111   001386  2238               	addwfc	(dtoa@n+4)^0,f,c
  2112   001388  2239               	addwfc	(dtoa@n+5)^0,f,c
  2113   00138A  223A               	addwfc	(dtoa@n+6)^0,f,c
  2114   00138C  223B               	addwfc	(dtoa@n+7)^0,f,c
  2115   00138E                     l2397:
  2116                           
  2117                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2118   00138E  0101               	movlb	1	; () banked
  2119   001390  BFF3               	btfsc	(_prec+1)& (0+255),7,b
  2120   001392  EFD5  F009         	goto	u1270
  2121   001396  51F3               	movf	(_prec+1)& (0+255),w,b
  2122   001398  E106               	bnz	u1271
  2123   00139A  05F2               	decf	_prec& (0+255),w,b
  2124   00139C  B0D8               	btfsc	status,0,c
  2125   00139E  EFD3  F009         	goto	u1271
  2126   0013A2  EFD5  F009         	goto	u1270
  2127   0013A6                     u1271:
  2128   0013A6  EFDB  F009         	goto	l1150
  2129   0013AA                     u1270:
  2130   0013AA                     
  2131                           ; BSR set to: 1
  2132   0013AA  0E00               	movlw	0
  2133   0013AC  6E31               	movwf	(dtoa@p+1)^0,c
  2134   0013AE  0E01               	movlw	1
  2135   0013B0  6E30               	movwf	dtoa@p^0,c
  2136   0013B2  EFDF  F009         	goto	l1152
  2137   0013B6                     l1150:
  2138                           
  2139                           ; BSR set to: 1
  2140   0013B6  C1F2  F030         	movff	_prec,dtoa@p
  2141   0013BA  C1F3  F031         	movff	_prec+1,dtoa@p+1
  2142   0013BE                     l1152:
  2143                           
  2144                           ; BSR set to: 1
  2145                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2146   0013BE  C1F0  F032         	movff	_width,dtoa@w
  2147   0013C2  C1F1  F033         	movff	_width+1,dtoa@w+1
  2148   0013C6                     
  2149                           ; BSR set to: 1
  2150                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2151   0013C6  503E               	movf	dtoa@s^0,w,c
  2152   0013C8  B4D8               	btfsc	status,2,c
  2153   0013CA  EFE9  F009         	goto	u1281
  2154   0013CE  EFEB  F009         	goto	u1280
  2155   0013D2                     u1281:
  2156   0013D2  EF02  F00A         	goto	l1153
  2157   0013D6                     u1280:
  2158   0013D6                     
  2159                           ; BSR set to: 1
  2160                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2161   0013D6  0632               	decf	dtoa@w^0,f,c
  2162   0013D8  A0D8               	btfss	status,0,c
  2163   0013DA  0633               	decf	(dtoa@w+1)^0,f,c
  2164   0013DC                     
  2165                           ; BSR set to: 1
  2166                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2167   0013DC  503E               	movf	dtoa@s^0,w,c
  2168   0013DE  A4D8               	btfss	status,2,c
  2169   0013E0  EFF4  F009         	goto	u1291
  2170   0013E4  EFF6  F009         	goto	u1290
  2171   0013E8                     u1291:
  2172   0013E8  EFFC  F009         	goto	l2409
  2173   0013EC                     u1290:
  2174   0013EC                     
  2175                           ; BSR set to: 1
  2176   0013EC  0E00               	movlw	0
  2177   0013EE  6E2F               	movwf	(_dtoa$2417+1)^0,c
  2178   0013F0  0E2B               	movlw	43
  2179   0013F2  6E2E               	movwf	_dtoa$2417^0,c
  2180   0013F4  EF00  F00A         	goto	l2411
  2181   0013F8                     l2409:
  2182                           
  2183                           ; BSR set to: 1
  2184   0013F8  0E00               	movlw	0
  2185   0013FA  6E2F               	movwf	(_dtoa$2417+1)^0,c
  2186   0013FC  0E2D               	movlw	45
  2187   0013FE  6E2E               	movwf	_dtoa$2417^0,c
  2188   001400                     l2411:
  2189                           
  2190                           ; BSR set to: 1
  2191   001400  C02E  F03E         	movff	_dtoa$2417,dtoa@s
  2192   001404                     l1153:
  2193                           
  2194                           ; BSR set to: 1
  2195                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2196   001404  0E00               	movlw	0
  2197   001406  6E3D               	movwf	(dtoa@i+1)^0,c
  2198   001408  0E1F               	movlw	31
  2199   00140A  6E3C               	movwf	dtoa@i^0,c
  2200   00140C                     
  2201                           ; BSR set to: 1
  2202                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2203   00140C  0E00               	movlw	0
  2204   00140E  0102               	movlb	2	; () banked
  2205   001410  6F6F               	movwf	(_dbuf+31)& (0+255),b
  2206                           
  2207                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2208   001412  EF87  F00A         	goto	l2425
  2209   001416                     l2415:
  2210                           
  2211                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2212   001416  063C               	decf	dtoa@i^0,f,c
  2213   001418  A0D8               	btfss	status,0,c
  2214   00141A  063D               	decf	(dtoa@i+1)^0,f,c
  2215   00141C                     
  2216                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2217   00141C  0E50               	movlw	low _dbuf
  2218   00141E  243C               	addwf	dtoa@i^0,w,c
  2219   001420  6ED9               	movwf	fsr2l,c
  2220   001422  0E02               	movlw	high _dbuf
  2221   001424  203D               	addwfc	(dtoa@i+1)^0,w,c
  2222   001426  6EDA               	movwf	fsr2h,c
  2223   001428  C034  F001         	movff	dtoa@n,___aomod@dividend
  2224   00142C  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  2225   001430  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  2226   001434  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  2227   001438  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  2228   00143C  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  2229   001440  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  2230   001444  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  2231   001448  0E0A               	movlw	10
  2232   00144A  6E09               	movwf	___aomod@divisor^0,c
  2233   00144C  0E00               	movlw	0
  2234   00144E  6E0A               	movwf	(___aomod@divisor+1)^0,c
  2235   001450  0E00               	movlw	0
  2236   001452  6E0B               	movwf	(___aomod@divisor+2)^0,c
  2237   001454  0E00               	movlw	0
  2238   001456  6E0C               	movwf	(___aomod@divisor+3)^0,c
  2239   001458  0E00               	movlw	0
  2240   00145A  6E0D               	movwf	(___aomod@divisor+4)^0,c
  2241   00145C  0E00               	movlw	0
  2242   00145E  6E0E               	movwf	(___aomod@divisor+5)^0,c
  2243   001460  0E00               	movlw	0
  2244   001462  6E0F               	movwf	(___aomod@divisor+6)^0,c
  2245   001464  0E00               	movlw	0
  2246   001466  6E10               	movwf	(___aomod@divisor+7)^0,c
  2247   001468  EC9B  F00E         	call	___aomod	;wreg free
  2248   00146C  C001  F026         	movff	?___aomod,??_dtoa
  2249   001470  C002  F027         	movff	?___aomod+1,??_dtoa+1
  2250   001474  C003  F028         	movff	?___aomod+2,??_dtoa+2
  2251   001478  C004  F029         	movff	?___aomod+3,??_dtoa+3
  2252   00147C  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  2253   001480  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  2254   001484  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  2255   001488  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  2256   00148C  C026  F013         	movff	??_dtoa,abs@a
  2257   001490  C027  F014         	movff	??_dtoa+1,abs@a+1
  2258   001494  ECFA  F015         	call	_abs	;wreg free
  2259   001498  5013               	movf	?_abs^0,w,c
  2260   00149A  0F30               	addlw	48
  2261   00149C  6EDF               	movwf	indf2,c
  2262   00149E                     
  2263                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2264   00149E  0630               	decf	dtoa@p^0,f,c
  2265   0014A0  A0D8               	btfss	status,0,c
  2266   0014A2  0631               	decf	(dtoa@p+1)^0,f,c
  2267   0014A4                     
  2268                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2269   0014A4  0632               	decf	dtoa@w^0,f,c
  2270   0014A6  A0D8               	btfss	status,0,c
  2271   0014A8  0633               	decf	(dtoa@w+1)^0,f,c
  2272   0014AA                     
  2273                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2274   0014AA  C034  F001         	movff	dtoa@n,___aodiv@dividend
  2275   0014AE  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  2276   0014B2  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  2277   0014B6  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  2278   0014BA  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  2279   0014BE  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  2280   0014C2  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  2281   0014C6  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  2282   0014CA  0E0A               	movlw	10
  2283   0014CC  6E09               	movwf	___aodiv@divisor^0,c
  2284   0014CE  0E00               	movlw	0
  2285   0014D0  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  2286   0014D2  0E00               	movlw	0
  2287   0014D4  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  2288   0014D6  0E00               	movlw	0
  2289   0014D8  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  2290   0014DA  0E00               	movlw	0
  2291   0014DC  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  2292   0014DE  0E00               	movlw	0
  2293   0014E0  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  2294   0014E2  0E00               	movlw	0
  2295   0014E4  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  2296   0014E6  0E00               	movlw	0
  2297   0014E8  6E10               	movwf	(___aodiv@divisor+7)^0,c
  2298   0014EA  ECD7  F00D         	call	___aodiv	;wreg free
  2299   0014EE  C001  F034         	movff	?___aodiv,dtoa@n
  2300   0014F2  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  2301   0014F6  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  2302   0014FA  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  2303   0014FE  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  2304   001502  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  2305   001506  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  2306   00150A  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  2307   00150E                     l2425:
  2308                           
  2309                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2310   00150E  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  2311   001510  EF92  F00A         	goto	u1301
  2312   001514  503D               	movf	(dtoa@i+1)^0,w,c
  2313   001516  E108               	bnz	u1300
  2314   001518  043C               	decf	dtoa@i^0,w,c
  2315   00151A  A0D8               	btfss	status,0,c
  2316   00151C  EF92  F00A         	goto	u1301
  2317   001520  EF94  F00A         	goto	u1300
  2318   001524                     u1301:
  2319   001524  EFB0  F00A         	goto	l2431
  2320   001528                     u1300:
  2321   001528  5034               	movf	dtoa@n^0,w,c
  2322   00152A  1035               	iorwf	(dtoa@n+1)^0,w,c
  2323   00152C  1036               	iorwf	(dtoa@n+2)^0,w,c
  2324   00152E  1037               	iorwf	(dtoa@n+3)^0,w,c
  2325   001530  1038               	iorwf	(dtoa@n+4)^0,w,c
  2326   001532  1039               	iorwf	(dtoa@n+5)^0,w,c
  2327   001534  103A               	iorwf	(dtoa@n+6)^0,w,c
  2328   001536  103B               	iorwf	(dtoa@n+7)^0,w,c
  2329   001538  A4D8               	btfss	status,2,c
  2330   00153A  EFA1  F00A         	goto	u1311
  2331   00153E  EFA3  F00A         	goto	u1310
  2332   001542                     u1311:
  2333   001542  EF0B  F00A         	goto	l2415
  2334   001546                     u1310:
  2335   001546  BE31               	btfsc	(dtoa@p+1)^0,7,c
  2336   001548  EFB0  F00A         	goto	u1320
  2337   00154C  5031               	movf	(dtoa@p+1)^0,w,c
  2338   00154E  E106               	bnz	u1321
  2339   001550  0430               	decf	dtoa@p^0,w,c
  2340   001552  B0D8               	btfsc	status,0,c
  2341   001554  EFAE  F00A         	goto	u1321
  2342   001558  EFB0  F00A         	goto	u1320
  2343   00155C                     u1321:
  2344   00155C  EF0B  F00A         	goto	l2415
  2345   001560                     u1320:
  2346   001560                     l2431:
  2347                           
  2348                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2349   001560  503E               	movf	dtoa@s^0,w,c
  2350   001562  B4D8               	btfsc	status,2,c
  2351   001564  EFB6  F00A         	goto	u1331
  2352   001568  EFB8  F00A         	goto	u1330
  2353   00156C                     u1331:
  2354   00156C  EFC3  F00A         	goto	l2437
  2355   001570                     u1330:
  2356   001570                     
  2357                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2358   001570  063C               	decf	dtoa@i^0,f,c
  2359   001572  A0D8               	btfss	status,0,c
  2360   001574  063D               	decf	(dtoa@i+1)^0,f,c
  2361   001576                     
  2362                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2363   001576  0E50               	movlw	low _dbuf
  2364   001578  243C               	addwf	dtoa@i^0,w,c
  2365   00157A  6ED9               	movwf	fsr2l,c
  2366   00157C  0E02               	movlw	high _dbuf
  2367   00157E  203D               	addwfc	(dtoa@i+1)^0,w,c
  2368   001580  6EDA               	movwf	fsr2h,c
  2369   001582  C03E  FFDF         	movff	dtoa@s,indf2
  2370   001586                     l2437:
  2371                           
  2372                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2373   001586  C01C  F011         	movff	dtoa@fp,pad@fp
  2374   00158A  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  2375   00158E  0E50               	movlw	low _dbuf
  2376   001590  243C               	addwf	dtoa@i^0,w,c
  2377   001592  6E13               	movwf	pad@buf^0,c
  2378   001594  0E02               	movlw	high _dbuf
  2379   001596  203D               	addwfc	(dtoa@i+1)^0,w,c
  2380   001598  6E14               	movwf	(pad@buf+1)^0,c
  2381   00159A  C032  F015         	movff	dtoa@w,pad@p
  2382   00159E  C033  F016         	movff	dtoa@w+1,pad@p+1
  2383   0015A2  EC3A  F014         	call	_pad	;wreg free
  2384   0015A6  0012               	return		;funcret
  2385   0015A8                     __end_of_dtoa:
  2386                           	callstack 0
  2387                           
  2388 ;; *************** function _pad *****************
  2389 ;; Defined at:
  2390 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  2393 ;;		 -> sprintf@f(11), 
  2394 ;;  buf             2   18[COMRAM] PTR unsigned char 
  2395 ;;		 -> dbuf(32), 
  2396 ;;  p               2   20[COMRAM] int 
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;  w               2   25[COMRAM] int 
  2399 ;;  i               2   23[COMRAM] int 
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      void 
  2402 ;; Registers used:
  2403 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2409 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2410 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2411 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2412 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2413 ;;Total ram usage:       11 bytes
  2414 ;; Hardware stack levels used: 1
  2415 ;; Hardware stack levels required when called: 4
  2416 ;; This function calls:
  2417 ;;		_fputc
  2418 ;;		_fputs
  2419 ;; This function is called by:
  2420 ;;		_dtoa
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text5
  2425   002874                     __ptext5:
  2426                           	callstack 0
  2427   002874                     _pad:
  2428                           	callstack 22
  2429   002874                     
  2430                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  2431   002874  BE16               	btfsc	(pad@p+1)^0,7,c
  2432   002876  EF3F  F014         	goto	u1131
  2433   00287A  EF41  F014         	goto	u1130
  2434   00287E                     u1131:
  2435   00287E  EF47  F014         	goto	l2321
  2436   002882                     u1130:
  2437   002882  C015  F01A         	movff	pad@p,pad@w
  2438   002886  C016  F01B         	movff	pad@p+1,pad@w+1
  2439   00288A  EF4B  F014         	goto	l1141
  2440   00288E                     l2321:
  2441   00288E  0E00               	movlw	0
  2442   002890  6E1B               	movwf	(pad@w+1)^0,c
  2443   002892  0E00               	movlw	0
  2444   002894  6E1A               	movwf	pad@w^0,c
  2445   002896                     l1141:
  2446                           
  2447                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  2448   002896  0E00               	movlw	0
  2449   002898  6E19               	movwf	(pad@i+1)^0,c
  2450   00289A  0E00               	movlw	0
  2451   00289C  6E18               	movwf	pad@i^0,c
  2452                           
  2453                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2454   00289E  EF5D  F014         	goto	l2327
  2455   0028A2                     l2323:
  2456                           
  2457                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  2458   0028A2  0E00               	movlw	0
  2459   0028A4  6E02               	movwf	(fputc@c+1)^0,c
  2460   0028A6  0E20               	movlw	32
  2461   0028A8  6E01               	movwf	fputc@c^0,c
  2462   0028AA  C011  F003         	movff	pad@fp,fputc@fp
  2463   0028AE  C012  F004         	movff	pad@fp+1,fputc@fp+1
  2464   0028B2  ECFC  F00F         	call	_fputc	;wreg free
  2465   0028B6                     
  2466                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  2467   0028B6  4A18               	infsnz	pad@i^0,f,c
  2468   0028B8  2A19               	incf	(pad@i+1)^0,f,c
  2469   0028BA                     l2327:
  2470                           
  2471                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2472   0028BA  501A               	movf	pad@w^0,w,c
  2473   0028BC  5C18               	subwf	pad@i^0,w,c
  2474   0028BE  5019               	movf	(pad@i+1)^0,w,c
  2475   0028C0  0A80               	xorlw	128
  2476   0028C2  6E17               	movwf	??_pad^0,c
  2477   0028C4  501B               	movf	(pad@w+1)^0,w,c
  2478   0028C6  0A80               	xorlw	128
  2479   0028C8  5817               	subwfb	??_pad^0,w,c
  2480   0028CA  A0D8               	btfss	status,0,c
  2481   0028CC  EF6A  F014         	goto	u1141
  2482   0028D0  EF6C  F014         	goto	u1140
  2483   0028D4                     u1141:
  2484   0028D4  EF51  F014         	goto	l2323
  2485   0028D8                     u1140:
  2486   0028D8                     
  2487                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  2488   0028D8  C013  F00A         	movff	pad@buf,fputs@s
  2489   0028DC  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2490   0028E0  C011  F00C         	movff	pad@fp,fputs@fp
  2491   0028E4  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2492   0028E8  EC96  F015         	call	_fputs	;wreg free
  2493   0028EC  0012               	return		;funcret
  2494   0028EE                     __end_of_pad:
  2495                           	callstack 0
  2496                           
  2497 ;; *************** function _fputs *****************
  2498 ;; Defined at:
  2499 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2502 ;;		 -> dbuf(32), 
  2503 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  2504 ;;		 -> sprintf@f(11), 
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;  i               2   14[COMRAM] int 
  2507 ;;  c               1   13[COMRAM] unsigned char 
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  2    9[COMRAM] int 
  2510 ;; Registers used:
  2511 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2517 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2518 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2520 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2521 ;;Total ram usage:        7 bytes
  2522 ;; Hardware stack levels used: 1
  2523 ;; Hardware stack levels required when called: 3
  2524 ;; This function calls:
  2525 ;;		_fputc
  2526 ;; This function is called by:
  2527 ;;		_pad
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           	psect	text6
  2532   002B2C                     __ptext6:
  2533                           	callstack 0
  2534   002B2C                     _fputs:
  2535                           	callstack 22
  2536   002B2C  0E00               	movlw	0
  2537   002B2E  6E10               	movwf	(fputs@i+1)^0,c
  2538   002B30  0E00               	movlw	0
  2539   002B32  6E0F               	movwf	fputs@i^0,c
  2540   002B34  EFA7  F015         	goto	l2235
  2541   002B38                     l2231:
  2542   002B38  C00E  F001         	movff	fputs@c,fputc@c
  2543   002B3C  6A02               	clrf	(fputc@c+1)^0,c
  2544   002B3E  C00C  F003         	movff	fputs@fp,fputc@fp
  2545   002B42  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  2546   002B46  ECFC  F00F         	call	_fputc	;wreg free
  2547   002B4A  4A0F               	infsnz	fputs@i^0,f,c
  2548   002B4C  2A10               	incf	(fputs@i+1)^0,f,c
  2549   002B4E                     l2235:
  2550   002B4E  500F               	movf	fputs@i^0,w,c
  2551   002B50  240A               	addwf	fputs@s^0,w,c
  2552   002B52  6ED9               	movwf	fsr2l,c
  2553   002B54  5010               	movf	(fputs@i+1)^0,w,c
  2554   002B56  200B               	addwfc	(fputs@s+1)^0,w,c
  2555   002B58  6EDA               	movwf	fsr2h,c
  2556   002B5A  50DF               	movf	indf2,w,c
  2557   002B5C  6E0E               	movwf	fputs@c^0,c
  2558   002B5E  500E               	movf	fputs@c^0,w,c
  2559   002B60  A4D8               	btfss	status,2,c
  2560   002B62  EFB5  F015         	goto	u991
  2561   002B66  EFB7  F015         	goto	u990
  2562   002B6A                     u991:
  2563   002B6A  EF9C  F015         	goto	l2231
  2564   002B6E                     u990:
  2565   002B6E  0012               	return		;funcret
  2566   002B70                     __end_of_fputs:
  2567                           	callstack 0
  2568                           
  2569 ;; *************** function _fputc *****************
  2570 ;; Defined at:
  2571 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;  c               2    0[COMRAM] int 
  2574 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  2575 ;;		 -> sprintf@f(11), 
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;		None
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  2    0[COMRAM] int 
  2580 ;; Registers used:
  2581 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2587 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2589 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2590 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2591 ;;Total ram usage:        9 bytes
  2592 ;; Hardware stack levels used: 1
  2593 ;; Hardware stack levels required when called: 2
  2594 ;; This function calls:
  2595 ;;		_putch
  2596 ;; This function is called by:
  2597 ;;		_pad
  2598 ;;		_vfpfcnvrt
  2599 ;;		_fputs
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text7
  2604   001FF8                     __ptext7:
  2605                           	callstack 0
  2606   001FF8                     _fputc:
  2607                           	callstack 25
  2608   001FF8  5003               	movf	fputc@fp^0,w,c
  2609   001FFA  1004               	iorwf	(fputc@fp+1)^0,w,c
  2610   001FFC  B4D8               	btfsc	status,2,c
  2611   001FFE  EF03  F010         	goto	u951
  2612   002002  EF05  F010         	goto	u950
  2613   002006                     u951:
  2614   002006  EF0E  F010         	goto	l2219
  2615   00200A                     u950:
  2616   00200A  5003               	movf	fputc@fp^0,w,c
  2617   00200C  1004               	iorwf	(fputc@fp+1)^0,w,c
  2618   00200E  A4D8               	btfss	status,2,c
  2619   002010  EF0C  F010         	goto	u961
  2620   002014  EF0E  F010         	goto	u960
  2621   002018                     u961:
  2622   002018  EF13  F010         	goto	l2221
  2623   00201C                     u960:
  2624   00201C                     l2219:
  2625   00201C  5001               	movf	fputc@c^0,w,c
  2626   00201E  ECDE  F016         	call	_putch
  2627   002022  EF60  F010         	goto	l1196
  2628   002026                     l2221:
  2629   002026  EE20 F009          	lfsr	2,9
  2630   00202A  5003               	movf	fputc@fp^0,w,c
  2631   00202C  26D9               	addwf	fsr2l,f,c
  2632   00202E  5004               	movf	(fputc@fp+1)^0,w,c
  2633   002030  22DA               	addwfc	fsr2h,f,c
  2634   002032  50DE               	movf	postinc2,w,c
  2635   002034  10DE               	iorwf	postinc2,w,c
  2636   002036  B4D8               	btfsc	status,2,c
  2637   002038  EF20  F010         	goto	u971
  2638   00203C  EF22  F010         	goto	u970
  2639   002040                     u971:
  2640   002040  EF3D  F010         	goto	l2225
  2641   002044                     u970:
  2642   002044  EE20 F009          	lfsr	2,9
  2643   002048  5003               	movf	fputc@fp^0,w,c
  2644   00204A  26D9               	addwf	fsr2l,f,c
  2645   00204C  5004               	movf	(fputc@fp+1)^0,w,c
  2646   00204E  22DA               	addwfc	fsr2h,f,c
  2647   002050  EE10 F003          	lfsr	1,3
  2648   002054  5003               	movf	fputc@fp^0,w,c
  2649   002056  26E1               	addwf	fsr1l,f,c
  2650   002058  5004               	movf	(fputc@fp+1)^0,w,c
  2651   00205A  22E2               	addwfc	fsr1h,f,c
  2652   00205C  50DE               	movf	postinc2,w,c
  2653   00205E  5CE6               	subwf	postinc1,w,c
  2654   002060  50E6               	movf	postinc1,w,c
  2655   002062  0A80               	xorlw	128
  2656   002064  6E09               	movwf	(??_fputc+4)^0,c
  2657   002066  50DE               	movf	postinc2,w,c
  2658   002068  0A80               	xorlw	128
  2659   00206A  5809               	subwfb	(??_fputc+4)^0,w,c
  2660   00206C  B0D8               	btfsc	status,0,c
  2661   00206E  EF3B  F010         	goto	u981
  2662   002072  EF3D  F010         	goto	u980
  2663   002076                     u981:
  2664   002076  EF60  F010         	goto	l1196
  2665   00207A                     u980:
  2666   00207A                     l2225:
  2667   00207A  EE20 F003          	lfsr	2,3
  2668   00207E  5003               	movf	fputc@fp^0,w,c
  2669   002080  26D9               	addwf	fsr2l,f,c
  2670   002082  5004               	movf	(fputc@fp+1)^0,w,c
  2671   002084  22DA               	addwfc	fsr2h,f,c
  2672   002086  CFDE F005          	movff	postinc2,??_fputc
  2673   00208A  CFDD F006          	movff	postdec2,??_fputc+1
  2674   00208E  C003  FFD9         	movff	fputc@fp,fsr2l
  2675   002092  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2676   002096  CFDE F007          	movff	postinc2,??_fputc+2
  2677   00209A  CFDD F008          	movff	postdec2,??_fputc+3
  2678   00209E  5005               	movf	??_fputc^0,w,c
  2679   0020A0  2407               	addwf	(??_fputc+2)^0,w,c
  2680   0020A2  6ED9               	movwf	fsr2l,c
  2681   0020A4  5006               	movf	(??_fputc+1)^0,w,c
  2682   0020A6  2008               	addwfc	(??_fputc+3)^0,w,c
  2683   0020A8  6EDA               	movwf	fsr2h,c
  2684   0020AA  C001  FFDF         	movff	fputc@c,indf2
  2685   0020AE  EE20 F003          	lfsr	2,3
  2686   0020B2  5003               	movf	fputc@fp^0,w,c
  2687   0020B4  26D9               	addwf	fsr2l,f,c
  2688   0020B6  5004               	movf	(fputc@fp+1)^0,w,c
  2689   0020B8  22DA               	addwfc	fsr2h,f,c
  2690   0020BA  2ADE               	incf	postinc2,f,c
  2691   0020BC  0E00               	movlw	0
  2692   0020BE  22DD               	addwfc	postdec2,f,c
  2693   0020C0                     l1196:
  2694   0020C0  0012               	return		;funcret
  2695   0020C2                     __end_of_fputc:
  2696                           	callstack 0
  2697                           
  2698 ;; *************** function _putch *****************
  2699 ;; Defined at:
  2700 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;  c               1    wreg     unsigned char 
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;  c               1    0[COMRAM] unsigned char 
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  1    wreg      void 
  2707 ;; Registers used:
  2708 ;;		wreg
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2718 ;;Total ram usage:        0 bytes
  2719 ;; Hardware stack levels used: 1
  2720 ;; Hardware stack levels required when called: 1
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_fputc
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text8
  2729   002DBC                     __ptext8:
  2730                           	callstack 0
  2731   002DBC                     _putch:
  2732                           	callstack 25
  2733   002DBC  0012               	return		;funcret
  2734   002DBE                     __end_of_putch:
  2735                           	callstack 0
  2736                           
  2737 ;; *************** function _abs *****************
  2738 ;; Defined at:
  2739 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;  a               2   18[COMRAM] int 
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;		None
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  2   18[COMRAM] int 
  2746 ;; Registers used:
  2747 ;;		wreg, status,2, status,0
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2755 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2756 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2757 ;;Total ram usage:        4 bytes
  2758 ;; Hardware stack levels used: 1
  2759 ;; Hardware stack levels required when called: 1
  2760 ;; This function calls:
  2761 ;;		Nothing
  2762 ;; This function is called by:
  2763 ;;		_dtoa
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text9
  2768   002BF4                     __ptext9:
  2769                           	callstack 0
  2770   002BF4                     _abs:
  2771                           	callstack 25
  2772   002BF4  BE14               	btfsc	(abs@a+1)^0,7,c
  2773   002BF6  EF07  F016         	goto	u1150
  2774   002BFA  5014               	movf	(abs@a+1)^0,w,c
  2775   002BFC  E106               	bnz	u1151
  2776   002BFE  0413               	decf	abs@a^0,w,c
  2777   002C00  B0D8               	btfsc	status,0,c
  2778   002C02  EF05  F016         	goto	u1151
  2779   002C06  EF07  F016         	goto	u1150
  2780   002C0A                     u1151:
  2781   002C0A  EF15  F016         	goto	l1181
  2782   002C0E                     u1150:
  2783   002C0E  C013  F015         	movff	abs@a,??_abs
  2784   002C12  C014  F016         	movff	abs@a+1,??_abs+1
  2785   002C16  1E15               	comf	??_abs^0,f,c
  2786   002C18  1E16               	comf	(??_abs+1)^0,f,c
  2787   002C1A  4A15               	infsnz	??_abs^0,f,c
  2788   002C1C  2A16               	incf	(??_abs+1)^0,f,c
  2789   002C1E  C015  F013         	movff	??_abs,?_abs
  2790   002C22  C016  F014         	movff	??_abs+1,?_abs+1
  2791   002C26  EF19  F016         	goto	l1184
  2792   002C2A                     l1181:
  2793   002C2A  C013  F013         	movff	abs@a,?_abs
  2794   002C2E  C014  F014         	movff	abs@a+1,?_abs+1
  2795   002C32                     l1184:
  2796   002C32  0012               	return		;funcret
  2797   002C34                     __end_of_abs:
  2798                           	callstack 0
  2799                           
  2800 ;; *************** function ___aomod *****************
  2801 ;; Defined at:
  2802 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;  dividend        8    0[COMRAM] long long 
  2805 ;;  divisor         8    8[COMRAM] long long 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;  sign            1   17[COMRAM] unsigned char 
  2808 ;;  counter         1   16[COMRAM] unsigned char 
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  8    0[COMRAM] long long 
  2811 ;; Registers used:
  2812 ;;		wreg, status,2, status,0
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2818 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2819 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2821 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2822 ;;Total ram usage:       18 bytes
  2823 ;; Hardware stack levels used: 1
  2824 ;; Hardware stack levels required when called: 1
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_dtoa
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           	psect	text10
  2833   001D36                     __ptext10:
  2834                           	callstack 0
  2835   001D36                     ___aomod:
  2836                           	callstack 25
  2837   001D36  0E00               	movlw	0
  2838   001D38  6E12               	movwf	___aomod@sign^0,c
  2839   001D3A  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2840   001D3C  EFA4  F00E         	goto	u1070
  2841   001D40  EFA2  F00E         	goto	u1071
  2842   001D44                     u1071:
  2843   001D44  EFB6  F00E         	goto	l2289
  2844   001D48                     u1070:
  2845   001D48  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2846   001D4A  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2847   001D4C  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2848   001D4E  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2849   001D50  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2850   001D52  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2851   001D54  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2852   001D56  6C01               	negf	___aomod@dividend^0,c
  2853   001D58  0E00               	movlw	0
  2854   001D5A  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2855   001D5C  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2856   001D5E  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2857   001D60  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2858   001D62  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2859   001D64  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2860   001D66  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2861   001D68  0E01               	movlw	1
  2862   001D6A  6E12               	movwf	___aomod@sign^0,c
  2863   001D6C                     l2289:
  2864   001D6C  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2865   001D6E  EFBD  F00E         	goto	u1080
  2866   001D72  EFBB  F00E         	goto	u1081
  2867   001D76                     u1081:
  2868   001D76  EFCD  F00E         	goto	l2293
  2869   001D7A                     u1080:
  2870   001D7A  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2871   001D7C  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2872   001D7E  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2873   001D80  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2874   001D82  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2875   001D84  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2876   001D86  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2877   001D88  6C09               	negf	___aomod@divisor^0,c
  2878   001D8A  0E00               	movlw	0
  2879   001D8C  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2880   001D8E  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2881   001D90  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2882   001D92  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2883   001D94  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2884   001D96  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2885   001D98  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2886   001D9A                     l2293:
  2887   001D9A  5009               	movf	___aomod@divisor^0,w,c
  2888   001D9C  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2889   001D9E  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2890   001DA0  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2891   001DA2  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2892   001DA4  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2893   001DA6  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2894   001DA8  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2895   001DAA  B4D8               	btfsc	status,2,c
  2896   001DAC  EFDA  F00E         	goto	u1091
  2897   001DB0  EFDC  F00E         	goto	u1090
  2898   001DB4                     u1091:
  2899   001DB4  EF24  F00F         	goto	l2309
  2900   001DB8                     u1090:
  2901   001DB8  0E01               	movlw	1
  2902   001DBA  6E11               	movwf	___aomod@counter^0,c
  2903   001DBC  EFEA  F00E         	goto	l2299
  2904   001DC0                     l2297:
  2905   001DC0  90D8               	bcf	status,0,c
  2906   001DC2  3609               	rlcf	___aomod@divisor^0,f,c
  2907   001DC4  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2908   001DC6  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2909   001DC8  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2910   001DCA  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2911   001DCC  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2912   001DCE  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2913   001DD0  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2914   001DD2  2A11               	incf	___aomod@counter^0,f,c
  2915   001DD4                     l2299:
  2916   001DD4  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2917   001DD6  EFEF  F00E         	goto	u1101
  2918   001DDA  EFF1  F00E         	goto	u1100
  2919   001DDE                     u1101:
  2920   001DDE  EFE0  F00E         	goto	l2297
  2921   001DE2                     u1100:
  2922   001DE2                     l2301:
  2923   001DE2  5009               	movf	___aomod@divisor^0,w,c
  2924   001DE4  5C01               	subwf	___aomod@dividend^0,w,c
  2925   001DE6  500A               	movf	(___aomod@divisor+1)^0,w,c
  2926   001DE8  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2927   001DEA  500B               	movf	(___aomod@divisor+2)^0,w,c
  2928   001DEC  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2929   001DEE  500C               	movf	(___aomod@divisor+3)^0,w,c
  2930   001DF0  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2931   001DF2  500D               	movf	(___aomod@divisor+4)^0,w,c
  2932   001DF4  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2933   001DF6  500E               	movf	(___aomod@divisor+5)^0,w,c
  2934   001DF8  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2935   001DFA  500F               	movf	(___aomod@divisor+6)^0,w,c
  2936   001DFC  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2937   001DFE  5010               	movf	(___aomod@divisor+7)^0,w,c
  2938   001E00  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2939   001E02  A0D8               	btfss	status,0,c
  2940   001E04  EF06  F00F         	goto	u1111
  2941   001E08  EF08  F00F         	goto	u1110
  2942   001E0C                     u1111:
  2943   001E0C  EF18  F00F         	goto	l2305
  2944   001E10                     u1110:
  2945   001E10  5009               	movf	___aomod@divisor^0,w,c
  2946   001E12  5E01               	subwf	___aomod@dividend^0,f,c
  2947   001E14  500A               	movf	(___aomod@divisor+1)^0,w,c
  2948   001E16  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2949   001E18  500B               	movf	(___aomod@divisor+2)^0,w,c
  2950   001E1A  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2951   001E1C  500C               	movf	(___aomod@divisor+3)^0,w,c
  2952   001E1E  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2953   001E20  500D               	movf	(___aomod@divisor+4)^0,w,c
  2954   001E22  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2955   001E24  500E               	movf	(___aomod@divisor+5)^0,w,c
  2956   001E26  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2957   001E28  500F               	movf	(___aomod@divisor+6)^0,w,c
  2958   001E2A  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2959   001E2C  5010               	movf	(___aomod@divisor+7)^0,w,c
  2960   001E2E  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2961   001E30                     l2305:
  2962   001E30  90D8               	bcf	status,0,c
  2963   001E32  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2964   001E34  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2965   001E36  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2966   001E38  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2967   001E3A  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2968   001E3C  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2969   001E3E  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2970   001E40  3209               	rrcf	___aomod@divisor^0,f,c
  2971   001E42  2E11               	decfsz	___aomod@counter^0,f,c
  2972   001E44  EFF1  F00E         	goto	l2301
  2973   001E48                     l2309:
  2974   001E48  5012               	movf	___aomod@sign^0,w,c
  2975   001E4A  B4D8               	btfsc	status,2,c
  2976   001E4C  EF2A  F00F         	goto	u1121
  2977   001E50  EF2C  F00F         	goto	u1120
  2978   001E54                     u1121:
  2979   001E54  EF3C  F00F         	goto	l2313
  2980   001E58                     u1120:
  2981   001E58  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2982   001E5A  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2983   001E5C  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2984   001E5E  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2985   001E60  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2986   001E62  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2987   001E64  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2988   001E66  6C01               	negf	___aomod@dividend^0,c
  2989   001E68  0E00               	movlw	0
  2990   001E6A  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2991   001E6C  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2992   001E6E  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2993   001E70  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2994   001E72  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2995   001E74  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2996   001E76  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2997   001E78                     l2313:
  2998   001E78  C001  F001         	movff	___aomod@dividend,?___aomod
  2999   001E7C  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  3000   001E80  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  3001   001E84  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  3002   001E88  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  3003   001E8C  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  3004   001E90  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  3005   001E94  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  3006   001E98  0012               	return		;funcret
  3007   001E9A                     __end_of___aomod:
  3008                           	callstack 0
  3009                           
  3010 ;; *************** function ___aodiv *****************
  3011 ;; Defined at:
  3012 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  dividend        8    0[COMRAM] long long 
  3015 ;;  divisor         8    8[COMRAM] long long 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;  quotient        8   18[COMRAM] long long 
  3018 ;;  sign            1   17[COMRAM] unsigned char 
  3019 ;;  counter         1   16[COMRAM] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  8    0[COMRAM] long long 
  3022 ;; Registers used:
  3023 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3029 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3030 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3032 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3033 ;;Total ram usage:       26 bytes
  3034 ;; Hardware stack levels used: 1
  3035 ;; Hardware stack levels required when called: 1
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_dtoa
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           	psect	text11
  3044   001BAE                     __ptext11:
  3045                           	callstack 0
  3046   001BAE                     ___aodiv:
  3047                           	callstack 25
  3048   001BAE  0E00               	movlw	0
  3049   001BB0  6E12               	movwf	___aodiv@sign^0,c
  3050   001BB2  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  3051   001BB4  EFE0  F00D         	goto	u1000
  3052   001BB8  EFDE  F00D         	goto	u1001
  3053   001BBC                     u1001:
  3054   001BBC  EFF2  F00D         	goto	l2245
  3055   001BC0                     u1000:
  3056   001BC0  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  3057   001BC2  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  3058   001BC4  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  3059   001BC6  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  3060   001BC8  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  3061   001BCA  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  3062   001BCC  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  3063   001BCE  6C09               	negf	___aodiv@divisor^0,c
  3064   001BD0  0E00               	movlw	0
  3065   001BD2  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  3066   001BD4  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  3067   001BD6  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  3068   001BD8  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  3069   001BDA  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  3070   001BDC  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  3071   001BDE  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  3072   001BE0  0E01               	movlw	1
  3073   001BE2  6E12               	movwf	___aodiv@sign^0,c
  3074   001BE4                     l2245:
  3075   001BE4  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  3076   001BE6  EFF9  F00D         	goto	u1010
  3077   001BEA  EFF7  F00D         	goto	u1011
  3078   001BEE                     u1011:
  3079   001BEE  EF0B  F00E         	goto	l2251
  3080   001BF2                     u1010:
  3081   001BF2  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  3082   001BF4  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  3083   001BF6  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  3084   001BF8  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  3085   001BFA  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  3086   001BFC  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  3087   001BFE  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  3088   001C00  6C01               	negf	___aodiv@dividend^0,c
  3089   001C02  0E00               	movlw	0
  3090   001C04  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  3091   001C06  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  3092   001C08  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  3093   001C0A  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  3094   001C0C  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  3095   001C0E  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  3096   001C10  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  3097   001C12  0E01               	movlw	1
  3098   001C14  1A12               	xorwf	___aodiv@sign^0,f,c
  3099   001C16                     l2251:
  3100   001C16  EE20  F013         	lfsr	2,___aodiv@quotient
  3101   001C1A  0E07               	movlw	7
  3102   001C1C                     u1021:
  3103   001C1C  6ADE               	clrf	postinc2,c
  3104   001C1E  06E8               	decf	wreg,f,c
  3105   001C20  E2FD               	bc	u1021
  3106   001C22  5009               	movf	___aodiv@divisor^0,w,c
  3107   001C24  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  3108   001C26  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  3109   001C28  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  3110   001C2A  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  3111   001C2C  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  3112   001C2E  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  3113   001C30  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  3114   001C32  B4D8               	btfsc	status,2,c
  3115   001C34  EF1E  F00E         	goto	u1031
  3116   001C38  EF20  F00E         	goto	u1030
  3117   001C3C                     u1031:
  3118   001C3C  EF72  F00E         	goto	l2273
  3119   001C40                     u1030:
  3120   001C40  0E01               	movlw	1
  3121   001C42  6E11               	movwf	___aodiv@counter^0,c
  3122   001C44  EF2E  F00E         	goto	l2259
  3123   001C48                     l2257:
  3124   001C48  90D8               	bcf	status,0,c
  3125   001C4A  3609               	rlcf	___aodiv@divisor^0,f,c
  3126   001C4C  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  3127   001C4E  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  3128   001C50  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  3129   001C52  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  3130   001C54  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  3131   001C56  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  3132   001C58  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  3133   001C5A  2A11               	incf	___aodiv@counter^0,f,c
  3134   001C5C                     l2259:
  3135   001C5C  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  3136   001C5E  EF33  F00E         	goto	u1041
  3137   001C62  EF35  F00E         	goto	u1040
  3138   001C66                     u1041:
  3139   001C66  EF24  F00E         	goto	l2257
  3140   001C6A                     u1040:
  3141   001C6A                     l2261:
  3142   001C6A  90D8               	bcf	status,0,c
  3143   001C6C  3613               	rlcf	___aodiv@quotient^0,f,c
  3144   001C6E  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  3145   001C70  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  3146   001C72  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  3147   001C74  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  3148   001C76  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  3149   001C78  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  3150   001C7A  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  3151   001C7C  5009               	movf	___aodiv@divisor^0,w,c
  3152   001C7E  5C01               	subwf	___aodiv@dividend^0,w,c
  3153   001C80  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3154   001C82  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  3155   001C84  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3156   001C86  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  3157   001C88  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3158   001C8A  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  3159   001C8C  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3160   001C8E  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  3161   001C90  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3162   001C92  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  3163   001C94  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3164   001C96  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  3165   001C98  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3166   001C9A  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  3167   001C9C  A0D8               	btfss	status,0,c
  3168   001C9E  EF53  F00E         	goto	u1051
  3169   001CA2  EF55  F00E         	goto	u1050
  3170   001CA6                     u1051:
  3171   001CA6  EF66  F00E         	goto	l2269
  3172   001CAA                     u1050:
  3173   001CAA  5009               	movf	___aodiv@divisor^0,w,c
  3174   001CAC  5E01               	subwf	___aodiv@dividend^0,f,c
  3175   001CAE  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3176   001CB0  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  3177   001CB2  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3178   001CB4  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  3179   001CB6  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3180   001CB8  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  3181   001CBA  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3182   001CBC  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  3183   001CBE  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3184   001CC0  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  3185   001CC2  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3186   001CC4  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  3187   001CC6  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3188   001CC8  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  3189   001CCA  8013               	bsf	___aodiv@quotient^0,0,c
  3190   001CCC                     l2269:
  3191   001CCC  90D8               	bcf	status,0,c
  3192   001CCE  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  3193   001CD0  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  3194   001CD2  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  3195   001CD4  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  3196   001CD6  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  3197   001CD8  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  3198   001CDA  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  3199   001CDC  3209               	rrcf	___aodiv@divisor^0,f,c
  3200   001CDE  2E11               	decfsz	___aodiv@counter^0,f,c
  3201   001CE0  EF35  F00E         	goto	l2261
  3202   001CE4                     l2273:
  3203   001CE4  5012               	movf	___aodiv@sign^0,w,c
  3204   001CE6  B4D8               	btfsc	status,2,c
  3205   001CE8  EF78  F00E         	goto	u1061
  3206   001CEC  EF7A  F00E         	goto	u1060
  3207   001CF0                     u1061:
  3208   001CF0  EF8A  F00E         	goto	l2277
  3209   001CF4                     u1060:
  3210   001CF4  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  3211   001CF6  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  3212   001CF8  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  3213   001CFA  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  3214   001CFC  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  3215   001CFE  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  3216   001D00  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  3217   001D02  6C13               	negf	___aodiv@quotient^0,c
  3218   001D04  0E00               	movlw	0
  3219   001D06  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  3220   001D08  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  3221   001D0A  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  3222   001D0C  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  3223   001D0E  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  3224   001D10  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  3225   001D12  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  3226   001D14                     l2277:
  3227   001D14  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3228   001D18  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3229   001D1C  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3230   001D20  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3231   001D24  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3232   001D28  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3233   001D2C  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3234   001D30  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3235   001D34  0012               	return		;funcret
  3236   001D36                     __end_of___aodiv:
  3237                           	callstack 0
  3238                           
  3239 ;; *************** function _sendStringSerial4 *****************
  3240 ;; Defined at:
  3241 ;;		line 37 in file "../serial.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  string          2    1[COMRAM] PTR unsigned char 
  3244 ;;		 -> main@readout3(100), main@readout2(100), 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;		None
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3256 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3259 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3260 ;;Total ram usage:        2 bytes
  3261 ;; Hardware stack levels used: 1
  3262 ;; Hardware stack levels required when called: 2
  3263 ;; This function calls:
  3264 ;;		_sendCharSerial4
  3265 ;; This function is called by:
  3266 ;;		_main
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text12
  3271   002C34                     __ptext12:
  3272                           	callstack 0
  3273   002C34                     _sendStringSerial4:
  3274                           	callstack 28
  3275   002C34                     
  3276                           ;../serial.c: 40:     while (*string != 0)
  3277   002C34  EF25  F016         	goto	l2927
  3278   002C38                     l2923:
  3279                           
  3280                           ;../serial.c: 41:     {;../serial.c: 42:         sendCharSerial4(*string++);
  3281   002C38  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3282   002C3C  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3283   002C40  50DF               	movf	indf2,w,c
  3284   002C42  ECB2  F016         	call	_sendCharSerial4
  3285   002C46  4A02               	infsnz	sendStringSerial4@string^0,f,c
  3286   002C48  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  3287   002C4A                     l2927:
  3288                           
  3289                           ;../serial.c: 40:     while (*string != 0)
  3290   002C4A  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3291   002C4E  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3292   002C52  50DF               	movf	indf2,w,c
  3293   002C54  A4D8               	btfss	status,2,c
  3294   002C56  EF2F  F016         	goto	u1721
  3295   002C5A  EF31  F016         	goto	u1720
  3296   002C5E                     u1721:
  3297   002C5E  EF1C  F016         	goto	l2923
  3298   002C62                     u1720:
  3299   002C62  0012               	return		;funcret
  3300   002C64                     __end_of_sendStringSerial4:
  3301                           	callstack 0
  3302                           
  3303 ;; *************** function _sendCharSerial4 *****************
  3304 ;; Defined at:
  3305 ;;		line 30 in file "../serial.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;  charToSend      1    wreg     unsigned char 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;  charToSend      1    0[COMRAM] unsigned char 
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      void 
  3312 ;; Registers used:
  3313 ;;		wreg
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3322 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3323 ;;Total ram usage:        1 bytes
  3324 ;; Hardware stack levels used: 1
  3325 ;; Hardware stack levels required when called: 1
  3326 ;; This function calls:
  3327 ;;		Nothing
  3328 ;; This function is called by:
  3329 ;;		_sendStringSerial4
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           	psect	text13
  3334   002D64                     __ptext13:
  3335                           	callstack 0
  3336   002D64                     _sendCharSerial4:
  3337                           	callstack 28
  3338                           
  3339                           ;incstack = 0
  3340                           ;sendCharSerial4@charToSend stored from wreg
  3341   002D64  6E01               	movwf	sendCharSerial4@charToSend^0,c
  3342   002D66                     l429:
  3343   002D66  010E               	movlb	14	; () banked
  3344   002D68  A537               	btfss	55,2,b	;volatile
  3345   002D6A  EFB9  F016         	goto	u1511
  3346   002D6E  EFBB  F016         	goto	u1510
  3347   002D72                     u1511:
  3348   002D72  EFB3  F016         	goto	l429
  3349   002D76                     u1510:
  3350   002D76                     
  3351                           ; BSR set to: 14
  3352                           ;../serial.c: 32:     TX4REG = charToSend;
  3353   002D76  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3354   002D7A                     
  3355                           ; BSR set to: 14
  3356   002D7A  0012               	return		;funcret
  3357   002D7C                     __end_of_sendCharSerial4:
  3358                           	callstack 0
  3359                           
  3360 ;; *************** function _motor_action *****************
  3361 ;; Defined at:
  3362 ;;		line 196 in file "../dc_motor.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;  color           2   33[COMRAM] unsigned int 
  3365 ;;  l               2   35[COMRAM] PTR struct DC_motor
  3366 ;;		 -> main@motorL(9), 
  3367 ;;  r               2   37[COMRAM] PTR struct DC_motor
  3368 ;;		 -> main@motorR(9), 
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;		None
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  1    wreg      void 
  3373 ;; Registers used:
  3374 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3380 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3382 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3383 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3384 ;;Total ram usage:        8 bytes
  3385 ;; Hardware stack levels used: 1
  3386 ;; Hardware stack levels required when called: 4
  3387 ;; This function calls:
  3388 ;;		_left_135
  3389 ;;		_left_90
  3390 ;;		_reverse_fromcard
  3391 ;;		_reverse_onesquare
  3392 ;;		_right_135
  3393 ;;		_right_90
  3394 ;;		_spin_180
  3395 ;;		_stop
  3396 ;; This function is called by:
  3397 ;;		_main
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text14
  3402   0015A8                     __ptext14:
  3403                           	callstack 0
  3404   0015A8                     _motor_action:
  3405                           	callstack 26
  3406   0015A8                     
  3407                           ;../dc_motor.c: 196: void motor_action(unsigned int color, struct DC_motor *l, struct DC
      +                          _motor *r);../dc_motor.c: 197: {;../dc_motor.c: 198:     switch (color){
  3408   0015A8  EFD0  F00B         	goto	l2985
  3409   0015AC                     l2951:
  3410                           
  3411                           ;../dc_motor.c: 200:             reverse_fromcard(l,r);
  3412   0015AC  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3413   0015B0  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3414   0015B4  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3415   0015B8  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3416   0015BC  EC0C  F013         	call	_reverse_fromcard	;wreg free
  3417                           
  3418                           ;../dc_motor.c: 201:             stop(l,r);
  3419   0015C0  C024  F01A         	movff	motor_action@l,stop@mL
  3420   0015C4  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3421   0015C8  C026  F01C         	movff	motor_action@r,stop@mR
  3422   0015CC  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3423   0015D0  ECAE  F013         	call	_stop	;wreg free
  3424   0015D4                     
  3425                           ;../dc_motor.c: 202:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3426   0015D4  0E29               	movlw	41
  3427   0015D6  6E29               	movwf	(??_motor_action+1)^0,c
  3428   0015D8  0E96               	movlw	150
  3429   0015DA  6E28               	movwf	??_motor_action^0,c
  3430   0015DC  0E7F               	movlw	127
  3431   0015DE                     u1927:
  3432   0015DE  2EE8               	decfsz	wreg,f,c
  3433   0015E0  D7FE               	bra	u1927
  3434   0015E2  2E28               	decfsz	??_motor_action^0,f,c
  3435   0015E4  D7FC               	bra	u1927
  3436   0015E6  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3437   0015E8  D7FA               	bra	u1927
  3438   0015EA  F000               	nop	
  3439   0015EC                     
  3440                           ;../dc_motor.c: 203:             stop(l,r);
  3441   0015EC  C024  F01A         	movff	motor_action@l,stop@mL
  3442   0015F0  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3443   0015F4  C026  F01C         	movff	motor_action@r,stop@mR
  3444   0015F8  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3445   0015FC  ECAE  F013         	call	_stop	;wreg free
  3446   001600                     
  3447                           ;../dc_motor.c: 204:             right_90(l,r);
  3448   001600  C024  F01A         	movff	motor_action@l,right_90@mL
  3449   001604  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3450   001608  C026  F01C         	movff	motor_action@r,right_90@mR
  3451   00160C  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3452   001610  EC75  F011         	call	_right_90	;wreg free
  3453                           
  3454                           ;../dc_motor.c: 205:             break;
  3455   001614  EFFA  F00B         	goto	l322
  3456   001618                     l2959:
  3457                           
  3458                           ;../dc_motor.c: 207:             reverse_fromcard(l,r);
  3459   001618  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3460   00161C  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3461   001620  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3462   001624  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3463   001628  EC0C  F013         	call	_reverse_fromcard	;wreg free
  3464                           
  3465                           ;../dc_motor.c: 208:             stop(l,r);
  3466   00162C  C024  F01A         	movff	motor_action@l,stop@mL
  3467   001630  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3468   001634  C026  F01C         	movff	motor_action@r,stop@mR
  3469   001638  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3470   00163C  ECAE  F013         	call	_stop	;wreg free
  3471   001640                     
  3472                           ;../dc_motor.c: 209:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3473   001640  0E29               	movlw	41
  3474   001642  6E29               	movwf	(??_motor_action+1)^0,c
  3475   001644  0E96               	movlw	150
  3476   001646  6E28               	movwf	??_motor_action^0,c
  3477   001648  0E7F               	movlw	127
  3478   00164A                     u1937:
  3479   00164A  2EE8               	decfsz	wreg,f,c
  3480   00164C  D7FE               	bra	u1937
  3481   00164E  2E28               	decfsz	??_motor_action^0,f,c
  3482   001650  D7FC               	bra	u1937
  3483   001652  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3484   001654  D7FA               	bra	u1937
  3485   001656  F000               	nop	
  3486   001658                     
  3487                           ;../dc_motor.c: 210:             stop(l,r);
  3488   001658  C024  F01A         	movff	motor_action@l,stop@mL
  3489   00165C  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3490   001660  C026  F01C         	movff	motor_action@r,stop@mR
  3491   001664  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3492   001668  ECAE  F013         	call	_stop	;wreg free
  3493   00166C                     
  3494                           ;../dc_motor.c: 211:             left_90(l,r);
  3495   00166C  C024  F01A         	movff	motor_action@l,left_90@mL
  3496   001670  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3497   001674  C026  F01C         	movff	motor_action@r,left_90@mR
  3498   001678  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3499   00167C  ECC7  F011         	call	_left_90	;wreg free
  3500                           
  3501                           ;../dc_motor.c: 212:             break;
  3502   001680  EFFA  F00B         	goto	l322
  3503   001684                     l2967:
  3504                           
  3505                           ;../dc_motor.c: 214:             reverse_fromcard(l,r);
  3506   001684  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3507   001688  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3508   00168C  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3509   001690  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3510   001694  EC0C  F013         	call	_reverse_fromcard	;wreg free
  3511                           
  3512                           ;../dc_motor.c: 215:             stop(l,r);
  3513   001698  C024  F01A         	movff	motor_action@l,stop@mL
  3514   00169C  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3515   0016A0  C026  F01C         	movff	motor_action@r,stop@mR
  3516   0016A4  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3517   0016A8  ECAE  F013         	call	_stop	;wreg free
  3518   0016AC                     
  3519                           ;../dc_motor.c: 216:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3520   0016AC  0E29               	movlw	41
  3521   0016AE  6E29               	movwf	(??_motor_action+1)^0,c
  3522   0016B0  0E96               	movlw	150
  3523   0016B2  6E28               	movwf	??_motor_action^0,c
  3524   0016B4  0E7F               	movlw	127
  3525   0016B6                     u1947:
  3526   0016B6  2EE8               	decfsz	wreg,f,c
  3527   0016B8  D7FE               	bra	u1947
  3528   0016BA  2E28               	decfsz	??_motor_action^0,f,c
  3529   0016BC  D7FC               	bra	u1947
  3530   0016BE  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3531   0016C0  D7FA               	bra	u1947
  3532   0016C2  F000               	nop	
  3533   0016C4                     
  3534                           ;../dc_motor.c: 217:             spin_180(l,r);
  3535   0016C4  C024  F01A         	movff	motor_action@l,spin_180@mL
  3536   0016C8  C025  F01B         	movff	motor_action@l+1,spin_180@mL+1
  3537   0016CC  C026  F01C         	movff	motor_action@r,spin_180@mR
  3538   0016D0  C027  F01D         	movff	motor_action@r+1,spin_180@mR+1
  3539   0016D4  EC19  F012         	call	_spin_180	;wreg free
  3540   0016D8                     
  3541                           ;../dc_motor.c: 218:             stop(l,r);
  3542   0016D8  C024  F01A         	movff	motor_action@l,stop@mL
  3543   0016DC  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3544   0016E0  C026  F01C         	movff	motor_action@r,stop@mR
  3545   0016E4  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3546   0016E8  ECAE  F013         	call	_stop	;wreg free
  3547                           
  3548                           ;../dc_motor.c: 219:             break;
  3549   0016EC  EFFA  F00B         	goto	l322
  3550   0016F0                     l2975:
  3551                           
  3552                           ;../dc_motor.c: 221:             reverse_onesquare(l,r);
  3553   0016F0  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3554   0016F4  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3555   0016F8  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3556   0016FC  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3557   001700  ECBB  F012         	call	_reverse_onesquare	;wreg free
  3558                           
  3559                           ;../dc_motor.c: 222:             right_90(l,r);
  3560   001704  C024  F01A         	movff	motor_action@l,right_90@mL
  3561   001708  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3562   00170C  C026  F01C         	movff	motor_action@r,right_90@mR
  3563   001710  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3564   001714  EC75  F011         	call	_right_90	;wreg free
  3565                           
  3566                           ;../dc_motor.c: 223:             break;
  3567   001718  EFFA  F00B         	goto	l322
  3568   00171C                     l2977:
  3569                           
  3570                           ;../dc_motor.c: 225:             reverse_onesquare(l,r);
  3571   00171C  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3572   001720  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3573   001724  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3574   001728  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3575   00172C  ECBB  F012         	call	_reverse_onesquare	;wreg free
  3576                           
  3577                           ;../dc_motor.c: 226:             left_90(l,r);
  3578   001730  C024  F01A         	movff	motor_action@l,left_90@mL
  3579   001734  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3580   001738  C026  F01C         	movff	motor_action@r,left_90@mR
  3581   00173C  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3582   001740  ECC7  F011         	call	_left_90	;wreg free
  3583                           
  3584                           ;../dc_motor.c: 227:             break;
  3585   001744  EFFA  F00B         	goto	l322
  3586   001748                     l2979:
  3587                           
  3588                           ;../dc_motor.c: 229:             reverse_fromcard(l,r);
  3589   001748  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3590   00174C  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3591   001750  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3592   001754  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3593   001758  EC0C  F013         	call	_reverse_fromcard	;wreg free
  3594                           
  3595                           ;../dc_motor.c: 230:             right_135(l,r);
  3596   00175C  C024  F01A         	movff	motor_action@l,right_135@mL
  3597   001760  C025  F01B         	movff	motor_action@l+1,right_135@mL+1
  3598   001764  C026  F01C         	movff	motor_action@r,right_135@mR
  3599   001768  C027  F01D         	movff	motor_action@r+1,right_135@mR+1
  3600   00176C  EC6A  F012         	call	_right_135	;wreg free
  3601                           
  3602                           ;../dc_motor.c: 231:             break;
  3603   001770  EFFA  F00B         	goto	l322
  3604   001774                     l2981:
  3605                           
  3606                           ;../dc_motor.c: 233:             reverse_fromcard(l,r);
  3607   001774  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3608   001778  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3609   00177C  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3610   001780  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3611   001784  EC0C  F013         	call	_reverse_fromcard	;wreg free
  3612                           
  3613                           ;../dc_motor.c: 234:             left_135(l,r);
  3614   001788  C024  F01A         	movff	motor_action@l,left_135@mL
  3615   00178C  C025  F01B         	movff	motor_action@l+1,left_135@mL+1
  3616   001790  C026  F01C         	movff	motor_action@r,left_135@mR
  3617   001794  C027  F01D         	movff	motor_action@r+1,left_135@mR+1
  3618   001798  EC5D  F013         	call	_left_135	;wreg free
  3619                           
  3620                           ;../dc_motor.c: 235:             break;
  3621   00179C  EFFA  F00B         	goto	l322
  3622   0017A0                     l2985:
  3623   0017A0  C022  F028         	movff	motor_action@color,??_motor_action
  3624   0017A4  C023  F029         	movff	motor_action@color+1,??_motor_action+1
  3625                           
  3626                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3627                           ; Switch size 1, requested type "simple"
  3628                           ; Number of cases is 1, Range of values is 0 to 0
  3629                           ; switch strategies available:
  3630                           ; Name         Instructions Cycles
  3631                           ; simple_byte            4     3 (average)
  3632                           ;	Chosen strategy is simple_byte
  3633   0017A8  5029               	movf	(??_motor_action+1)^0,w,c
  3634   0017AA  0A00               	xorlw	0	; case 0
  3635   0017AC  B4D8               	btfsc	status,2,c
  3636   0017AE  EFDB  F00B         	goto	l3211
  3637   0017B2  EFFA  F00B         	goto	l322
  3638   0017B6                     l3211:
  3639                           
  3640                           ; Switch size 1, requested type "simple"
  3641                           ; Number of cases is 7, Range of values is 1 to 7
  3642                           ; switch strategies available:
  3643                           ; Name         Instructions Cycles
  3644                           ; simple_byte           22    12 (average)
  3645                           ;	Chosen strategy is simple_byte
  3646   0017B6  5028               	movf	??_motor_action^0,w,c
  3647   0017B8  0A01               	xorlw	1	; case 1
  3648   0017BA  B4D8               	btfsc	status,2,c
  3649   0017BC  EFD6  F00A         	goto	l2951
  3650   0017C0  0A03               	xorlw	3	; case 2
  3651   0017C2  B4D8               	btfsc	status,2,c
  3652   0017C4  EF0C  F00B         	goto	l2959
  3653   0017C8  0A01               	xorlw	1	; case 3
  3654   0017CA  B4D8               	btfsc	status,2,c
  3655   0017CC  EF42  F00B         	goto	l2967
  3656   0017D0  0A07               	xorlw	7	; case 4
  3657   0017D2  B4D8               	btfsc	status,2,c
  3658   0017D4  EF78  F00B         	goto	l2975
  3659   0017D8  0A01               	xorlw	1	; case 5
  3660   0017DA  B4D8               	btfsc	status,2,c
  3661   0017DC  EF8E  F00B         	goto	l2977
  3662   0017E0  0A03               	xorlw	3	; case 6
  3663   0017E2  B4D8               	btfsc	status,2,c
  3664   0017E4  EFA4  F00B         	goto	l2979
  3665   0017E8  0A01               	xorlw	1	; case 7
  3666   0017EA  B4D8               	btfsc	status,2,c
  3667   0017EC  EFBA  F00B         	goto	l2981
  3668   0017F0  EFFA  F00B         	goto	l322
  3669   0017F4                     l322:
  3670   0017F4  0012               	return		;funcret
  3671   0017F6                     __end_of_motor_action:
  3672                           	callstack 0
  3673                           
  3674 ;; *************** function _stop *****************
  3675 ;; Defined at:
  3676 ;;		line 61 in file "../dc_motor.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3679 ;;		 -> main@motorL(9), 
  3680 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3681 ;;		 -> main@motorR(9), 
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;  i               2   30[COMRAM] int 
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  1    wreg      void 
  3686 ;; Registers used:
  3687 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3693 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3694 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3695 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3696 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3697 ;;Total ram usage:        7 bytes
  3698 ;; Hardware stack levels used: 1
  3699 ;; Hardware stack levels required when called: 3
  3700 ;; This function calls:
  3701 ;;		_setMotorPWM
  3702 ;; This function is called by:
  3703 ;;		_main
  3704 ;;		_motor_action
  3705 ;;		_motor_action_return
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text15
  3710   00275C                     __ptext15:
  3711                           	callstack 0
  3712   00275C                     _stop:
  3713                           	callstack 27
  3714   00275C                     
  3715                           ;../dc_motor.c: 61: void stop(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c: 6
      +                          2: {;../dc_motor.c: 63:     mL->direction = 0;
  3716   00275C  EE20 F001          	lfsr	2,1
  3717   002760  501A               	movf	stop@mL^0,w,c
  3718   002762  26D9               	addwf	fsr2l,f,c
  3719   002764  501B               	movf	(stop@mL+1)^0,w,c
  3720   002766  22DA               	addwfc	fsr2h,f,c
  3721   002768  0E00               	movlw	0
  3722   00276A  6EDF               	movwf	indf2,c
  3723                           
  3724                           ;../dc_motor.c: 64:     mR->direction = 0;
  3725   00276C  EE20 F001          	lfsr	2,1
  3726   002770  501C               	movf	stop@mR^0,w,c
  3727   002772  26D9               	addwf	fsr2l,f,c
  3728   002774  501D               	movf	(stop@mR+1)^0,w,c
  3729   002776  22DA               	addwfc	fsr2h,f,c
  3730   002778  0E00               	movlw	0
  3731   00277A  6EDF               	movwf	indf2,c
  3732   00277C                     
  3733                           ;../dc_motor.c: 65:     for (int i = 5;i>0;i = i - 1)
  3734   00277C  0E00               	movlw	0
  3735   00277E  6E20               	movwf	(stop@i+1)^0,c
  3736   002780  0E05               	movlw	5
  3737   002782  6E1F               	movwf	stop@i^0,c
  3738   002784                     l2561:
  3739                           
  3740                           ;../dc_motor.c: 66:     {;../dc_motor.c: 67:         mL->power = i;
  3741   002784  C01A  FFD9         	movff	stop@mL,fsr2l
  3742   002788  C01B  FFDA         	movff	stop@mL+1,fsr2h
  3743   00278C  C01F  FFDF         	movff	stop@i,indf2
  3744                           
  3745                           ;../dc_motor.c: 68:         mR->power = i;
  3746   002790  C01C  FFD9         	movff	stop@mR,fsr2l
  3747   002794  C01D  FFDA         	movff	stop@mR+1,fsr2h
  3748   002798  C01F  FFDF         	movff	stop@i,indf2
  3749   00279C                     
  3750                           ;../dc_motor.c: 69:         setMotorPWM(mL);
  3751   00279C  C01A  F00F         	movff	stop@mL,setMotorPWM@m
  3752   0027A0  C01B  F010         	movff	stop@mL+1,setMotorPWM@m+1
  3753   0027A4  ECED  F00C         	call	_setMotorPWM	;wreg free
  3754   0027A8                     
  3755                           ;../dc_motor.c: 70:         setMotorPWM(mR);
  3756   0027A8  C01C  F00F         	movff	stop@mR,setMotorPWM@m
  3757   0027AC  C01D  F010         	movff	stop@mR+1,setMotorPWM@m+1
  3758   0027B0  ECED  F00C         	call	_setMotorPWM	;wreg free
  3759   0027B4                     
  3760                           ;../dc_motor.c: 71:         _delay((unsigned long)((10)*(64000000/4000.0)));
  3761   0027B4  0ED0               	movlw	208
  3762   0027B6  6E1E               	movwf	??_stop^0,c
  3763   0027B8  0ECA               	movlw	202
  3764   0027BA                     u1957:
  3765   0027BA  2EE8               	decfsz	wreg,f,c
  3766   0027BC  D7FE               	bra	u1957
  3767   0027BE  2E1E               	decfsz	??_stop^0,f,c
  3768   0027C0  D7FC               	bra	u1957
  3769   0027C2                     
  3770                           ;../dc_motor.c: 72:     }
  3771   0027C2  0EFF               	movlw	255
  3772   0027C4  241F               	addwf	stop@i^0,w,c
  3773   0027C6  6E1F               	movwf	stop@i^0,c
  3774   0027C8  0EFF               	movlw	255
  3775   0027CA  2020               	addwfc	(stop@i+1)^0,w,c
  3776   0027CC  6E20               	movwf	(stop@i+1)^0,c
  3777   0027CE  BE20               	btfsc	(stop@i+1)^0,7,c
  3778   0027D0  EFF4  F013         	goto	u1430
  3779   0027D4  5020               	movf	(stop@i+1)^0,w,c
  3780   0027D6  E106               	bnz	u1431
  3781   0027D8  041F               	decf	stop@i^0,w,c
  3782   0027DA  B0D8               	btfsc	status,0,c
  3783   0027DC  EFF2  F013         	goto	u1431
  3784   0027E0  EFF4  F013         	goto	u1430
  3785   0027E4                     u1431:
  3786   0027E4  EFC2  F013         	goto	l2561
  3787   0027E8                     u1430:
  3788   0027E8  0012               	return		;funcret
  3789   0027EA                     __end_of_stop:
  3790                           	callstack 0
  3791                           
  3792 ;; *************** function _spin_180 *****************
  3793 ;; Defined at:
  3794 ;;		line 151 in file "../dc_motor.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3797 ;;		 -> main@motorL(9), 
  3798 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3799 ;;		 -> main@motorR(9), 
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;  i               2   31[COMRAM] int 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      void 
  3804 ;; Registers used:
  3805 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3811 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3812 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3813 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3814 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3815 ;;Total ram usage:        8 bytes
  3816 ;; Hardware stack levels used: 1
  3817 ;; Hardware stack levels required when called: 3
  3818 ;; This function calls:
  3819 ;;		_setMotorPWM
  3820 ;; This function is called by:
  3821 ;;		_main
  3822 ;;		_motor_action
  3823 ;;		_motor_action_return
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           	psect	text16
  3828   002432                     __ptext16:
  3829                           	callstack 0
  3830   002432                     _spin_180:
  3831                           	callstack 27
  3832   002432                     
  3833                           ;../dc_motor.c: 151: void spin_180(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 152: {;../dc_motor.c: 153:     mL->direction = 1;
  3834   002432  EE20 F001          	lfsr	2,1
  3835   002436  501A               	movf	spin_180@mL^0,w,c
  3836   002438  26D9               	addwf	fsr2l,f,c
  3837   00243A  501B               	movf	(spin_180@mL+1)^0,w,c
  3838   00243C  22DA               	addwfc	fsr2h,f,c
  3839   00243E  0E01               	movlw	1
  3840   002440  6EDF               	movwf	indf2,c
  3841                           
  3842                           ;../dc_motor.c: 154:     mR->direction = 0;
  3843   002442  EE20 F001          	lfsr	2,1
  3844   002446  501C               	movf	spin_180@mR^0,w,c
  3845   002448  26D9               	addwf	fsr2l,f,c
  3846   00244A  501D               	movf	(spin_180@mR+1)^0,w,c
  3847   00244C  22DA               	addwfc	fsr2h,f,c
  3848   00244E  0E00               	movlw	0
  3849   002450  6EDF               	movwf	indf2,c
  3850   002452                     
  3851                           ;../dc_motor.c: 155:     for (int i = 0;i<50;i = i + 2)
  3852   002452  0E00               	movlw	0
  3853   002454  6E21               	movwf	(spin_180@i+1)^0,c
  3854   002456  0E00               	movlw	0
  3855   002458  6E20               	movwf	spin_180@i^0,c
  3856   00245A                     l2581:
  3857                           
  3858                           ;../dc_motor.c: 156:     {;../dc_motor.c: 157:         mL->power = i;
  3859   00245A  C01A  FFD9         	movff	spin_180@mL,fsr2l
  3860   00245E  C01B  FFDA         	movff	spin_180@mL+1,fsr2h
  3861   002462  C020  FFDF         	movff	spin_180@i,indf2
  3862   002466                     
  3863                           ;../dc_motor.c: 158:         mR->power = 50 + i;
  3864   002466  5020               	movf	spin_180@i^0,w,c
  3865   002468  0F32               	addlw	50
  3866   00246A  C01C  FFD9         	movff	spin_180@mR,fsr2l
  3867   00246E  C01D  FFDA         	movff	spin_180@mR+1,fsr2h
  3868   002472  6EDF               	movwf	indf2,c
  3869   002474                     
  3870                           ;../dc_motor.c: 159:         setMotorPWM(mL);
  3871   002474  C01A  F00F         	movff	spin_180@mL,setMotorPWM@m
  3872   002478  C01B  F010         	movff	spin_180@mL+1,setMotorPWM@m+1
  3873   00247C  ECED  F00C         	call	_setMotorPWM	;wreg free
  3874   002480                     
  3875                           ;../dc_motor.c: 160:         setMotorPWM(mR);
  3876   002480  C01C  F00F         	movff	spin_180@mR,setMotorPWM@m
  3877   002484  C01D  F010         	movff	spin_180@mR+1,setMotorPWM@m+1
  3878   002488  ECED  F00C         	call	_setMotorPWM	;wreg free
  3879   00248C                     
  3880                           ;../dc_motor.c: 161:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3881   00248C  0E35               	movlw	53
  3882   00248E                     u1967:
  3883   00248E  2EE8               	decfsz	wreg,f,c
  3884   002490  D7FE               	bra	u1967
  3885   002492  F000               	nop	
  3886   002494                     
  3887                           ;../dc_motor.c: 162:     }
  3888   002494  0E02               	movlw	2
  3889   002496  2420               	addwf	spin_180@i^0,w,c
  3890   002498  6E20               	movwf	spin_180@i^0,c
  3891   00249A  0E00               	movlw	0
  3892   00249C  2021               	addwfc	(spin_180@i+1)^0,w,c
  3893   00249E  6E21               	movwf	(spin_180@i+1)^0,c
  3894   0024A0  BE21               	btfsc	(spin_180@i+1)^0,7,c
  3895   0024A2  EF5C  F012         	goto	u1441
  3896   0024A6  5021               	movf	(spin_180@i+1)^0,w,c
  3897   0024A8  E109               	bnz	u1440
  3898   0024AA  0E32               	movlw	50
  3899   0024AC  5C20               	subwf	spin_180@i^0,w,c
  3900   0024AE  A0D8               	btfss	status,0,c
  3901   0024B0  EF5C  F012         	goto	u1441
  3902   0024B4  EF5E  F012         	goto	u1440
  3903   0024B8                     u1441:
  3904   0024B8  EF2D  F012         	goto	l2581
  3905   0024BC                     u1440:
  3906   0024BC                     
  3907                           ;../dc_motor.c: 163:     _delay((unsigned long)((290)*(64000000/4000.0)));
  3908   0024BC  0E18               	movlw	24
  3909   0024BE  6E1F               	movwf	(??_spin_180+1)^0,c
  3910   0024C0  0E8A               	movlw	138
  3911   0024C2  6E1E               	movwf	??_spin_180^0,c
  3912   0024C4  0EE8               	movlw	232
  3913   0024C6                     u1977:
  3914   0024C6  2EE8               	decfsz	wreg,f,c
  3915   0024C8  D7FE               	bra	u1977
  3916   0024CA  2E1E               	decfsz	??_spin_180^0,f,c
  3917   0024CC  D7FC               	bra	u1977
  3918   0024CE  2E1F               	decfsz	(??_spin_180+1)^0,f,c
  3919   0024D0  D7FA               	bra	u1977
  3920   0024D2  0012               	return		;funcret
  3921   0024D4                     __end_of_spin_180:
  3922                           	callstack 0
  3923                           
  3924 ;; *************** function _right_90 *****************
  3925 ;; Defined at:
  3926 ;;		line 121 in file "../dc_motor.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3929 ;;		 -> main@motorL(9), 
  3930 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3931 ;;		 -> main@motorR(9), 
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;  i               2   31[COMRAM] int 
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  1    wreg      void 
  3936 ;; Registers used:
  3937 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3943 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3944 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3945 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3946 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3947 ;;Total ram usage:        8 bytes
  3948 ;; Hardware stack levels used: 1
  3949 ;; Hardware stack levels required when called: 3
  3950 ;; This function calls:
  3951 ;;		_setMotorPWM
  3952 ;; This function is called by:
  3953 ;;		_motor_action
  3954 ;;		_motor_action_return
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           	psect	text17
  3959   0022EA                     __ptext17:
  3960                           	callstack 0
  3961   0022EA                     _right_90:
  3962                           	callstack 26
  3963   0022EA                     
  3964                           ;../dc_motor.c: 121: void right_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 122: {;../dc_motor.c: 123:     mL->direction = 1;
  3965   0022EA  EE20 F001          	lfsr	2,1
  3966   0022EE  501A               	movf	right_90@mL^0,w,c
  3967   0022F0  26D9               	addwf	fsr2l,f,c
  3968   0022F2  501B               	movf	(right_90@mL+1)^0,w,c
  3969   0022F4  22DA               	addwfc	fsr2h,f,c
  3970   0022F6  0E01               	movlw	1
  3971   0022F8  6EDF               	movwf	indf2,c
  3972                           
  3973                           ;../dc_motor.c: 124:     mR->direction = 0;
  3974   0022FA  EE20 F001          	lfsr	2,1
  3975   0022FE  501C               	movf	right_90@mR^0,w,c
  3976   002300  26D9               	addwf	fsr2l,f,c
  3977   002302  501D               	movf	(right_90@mR+1)^0,w,c
  3978   002304  22DA               	addwfc	fsr2h,f,c
  3979   002306  0E00               	movlw	0
  3980   002308  6EDF               	movwf	indf2,c
  3981   00230A                     
  3982                           ;../dc_motor.c: 125:     for (int i = 0;i<50;i = i + 2)
  3983   00230A  0E00               	movlw	0
  3984   00230C  6E21               	movwf	(right_90@i+1)^0,c
  3985   00230E  0E00               	movlw	0
  3986   002310  6E20               	movwf	right_90@i^0,c
  3987   002312                     l2649:
  3988                           
  3989                           ;../dc_motor.c: 126:     {;../dc_motor.c: 127:         mL->power = i;
  3990   002312  C01A  FFD9         	movff	right_90@mL,fsr2l
  3991   002316  C01B  FFDA         	movff	right_90@mL+1,fsr2h
  3992   00231A  C020  FFDF         	movff	right_90@i,indf2
  3993   00231E                     
  3994                           ;../dc_motor.c: 128:         mR->power = 50 + i;
  3995   00231E  5020               	movf	right_90@i^0,w,c
  3996   002320  0F32               	addlw	50
  3997   002322  C01C  FFD9         	movff	right_90@mR,fsr2l
  3998   002326  C01D  FFDA         	movff	right_90@mR+1,fsr2h
  3999   00232A  6EDF               	movwf	indf2,c
  4000   00232C                     
  4001                           ;../dc_motor.c: 129:         setMotorPWM(mL);
  4002   00232C  C01A  F00F         	movff	right_90@mL,setMotorPWM@m
  4003   002330  C01B  F010         	movff	right_90@mL+1,setMotorPWM@m+1
  4004   002334  ECED  F00C         	call	_setMotorPWM	;wreg free
  4005   002338                     
  4006                           ;../dc_motor.c: 130:         setMotorPWM(mR);
  4007   002338  C01C  F00F         	movff	right_90@mR,setMotorPWM@m
  4008   00233C  C01D  F010         	movff	right_90@mR+1,setMotorPWM@m+1
  4009   002340  ECED  F00C         	call	_setMotorPWM	;wreg free
  4010   002344                     
  4011                           ;../dc_motor.c: 131:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4012   002344  0E35               	movlw	53
  4013   002346                     u1987:
  4014   002346  2EE8               	decfsz	wreg,f,c
  4015   002348  D7FE               	bra	u1987
  4016   00234A  F000               	nop	
  4017   00234C                     
  4018                           ;../dc_motor.c: 132:     }
  4019   00234C  0E02               	movlw	2
  4020   00234E  2420               	addwf	right_90@i^0,w,c
  4021   002350  6E20               	movwf	right_90@i^0,c
  4022   002352  0E00               	movlw	0
  4023   002354  2021               	addwfc	(right_90@i+1)^0,w,c
  4024   002356  6E21               	movwf	(right_90@i+1)^0,c
  4025   002358  BE21               	btfsc	(right_90@i+1)^0,7,c
  4026   00235A  EFB8  F011         	goto	u1471
  4027   00235E  5021               	movf	(right_90@i+1)^0,w,c
  4028   002360  E109               	bnz	u1470
  4029   002362  0E32               	movlw	50
  4030   002364  5C20               	subwf	right_90@i^0,w,c
  4031   002366  A0D8               	btfss	status,0,c
  4032   002368  EFB8  F011         	goto	u1471
  4033   00236C  EFBA  F011         	goto	u1470
  4034   002370                     u1471:
  4035   002370  EF89  F011         	goto	l2649
  4036   002374                     u1470:
  4037   002374                     
  4038                           ;../dc_motor.c: 133:     _delay((unsigned long)((165)*(64000000/4000.0)));
  4039   002374  0E0E               	movlw	14
  4040   002376  6E1F               	movwf	(??_right_90+1)^0,c
  4041   002378  0E65               	movlw	101
  4042   00237A  6E1E               	movwf	??_right_90^0,c
  4043   00237C  0E87               	movlw	135
  4044   00237E                     u1997:
  4045   00237E  2EE8               	decfsz	wreg,f,c
  4046   002380  D7FE               	bra	u1997
  4047   002382  2E1E               	decfsz	??_right_90^0,f,c
  4048   002384  D7FC               	bra	u1997
  4049   002386  2E1F               	decfsz	(??_right_90+1)^0,f,c
  4050   002388  D7FA               	bra	u1997
  4051   00238A  F000               	nop	
  4052   00238C  0012               	return		;funcret
  4053   00238E                     __end_of_right_90:
  4054                           	callstack 0
  4055                           
  4056 ;; *************** function _right_135 *****************
  4057 ;; Defined at:
  4058 ;;		line 166 in file "../dc_motor.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4061 ;;		 -> main@motorL(9), 
  4062 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4063 ;;		 -> main@motorR(9), 
  4064 ;; Auto vars:     Size  Location     Type
  4065 ;;  i               2   31[COMRAM] int 
  4066 ;; Return value:  Size  Location     Type
  4067 ;;                  1    wreg      void 
  4068 ;; Registers used:
  4069 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4070 ;; Tracked objects:
  4071 ;;		On entry : 0/0
  4072 ;;		On exit  : 0/0
  4073 ;;		Unchanged: 0/0
  4074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4075 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4076 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4077 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4078 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4079 ;;Total ram usage:        8 bytes
  4080 ;; Hardware stack levels used: 1
  4081 ;; Hardware stack levels required when called: 3
  4082 ;; This function calls:
  4083 ;;		_setMotorPWM
  4084 ;; This function is called by:
  4085 ;;		_motor_action
  4086 ;;		_motor_action_return
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           	psect	text18
  4091   0024D4                     __ptext18:
  4092                           	callstack 0
  4093   0024D4                     _right_135:
  4094                           	callstack 26
  4095   0024D4                     
  4096                           ;../dc_motor.c: 166: void right_135(struct DC_motor *mL, struct DC_motor *mR);../dc_moto
      +                          r.c: 167: {;../dc_motor.c: 168:     mL->direction = 1;
  4097   0024D4  EE20 F001          	lfsr	2,1
  4098   0024D8  501A               	movf	right_135@mL^0,w,c
  4099   0024DA  26D9               	addwf	fsr2l,f,c
  4100   0024DC  501B               	movf	(right_135@mL+1)^0,w,c
  4101   0024DE  22DA               	addwfc	fsr2h,f,c
  4102   0024E0  0E01               	movlw	1
  4103   0024E2  6EDF               	movwf	indf2,c
  4104                           
  4105                           ;../dc_motor.c: 169:     mR->direction = 0;
  4106   0024E4  EE20 F001          	lfsr	2,1
  4107   0024E8  501C               	movf	right_135@mR^0,w,c
  4108   0024EA  26D9               	addwf	fsr2l,f,c
  4109   0024EC  501D               	movf	(right_135@mR+1)^0,w,c
  4110   0024EE  22DA               	addwfc	fsr2h,f,c
  4111   0024F0  0E00               	movlw	0
  4112   0024F2  6EDF               	movwf	indf2,c
  4113   0024F4                     
  4114                           ;../dc_motor.c: 170:     for (int i = 0;i<50;i = i + 2)
  4115   0024F4  0E00               	movlw	0
  4116   0024F6  6E21               	movwf	(right_135@i+1)^0,c
  4117   0024F8  0E00               	movlw	0
  4118   0024FA  6E20               	movwf	right_135@i^0,c
  4119   0024FC                     l2697:
  4120                           
  4121                           ;../dc_motor.c: 171:     {;../dc_motor.c: 172:         mL->power = i;
  4122   0024FC  C01A  FFD9         	movff	right_135@mL,fsr2l
  4123   002500  C01B  FFDA         	movff	right_135@mL+1,fsr2h
  4124   002504  C020  FFDF         	movff	right_135@i,indf2
  4125   002508                     
  4126                           ;../dc_motor.c: 173:         mR->power = 50 + i;
  4127   002508  5020               	movf	right_135@i^0,w,c
  4128   00250A  0F32               	addlw	50
  4129   00250C  C01C  FFD9         	movff	right_135@mR,fsr2l
  4130   002510  C01D  FFDA         	movff	right_135@mR+1,fsr2h
  4131   002514  6EDF               	movwf	indf2,c
  4132   002516                     
  4133                           ;../dc_motor.c: 174:         setMotorPWM(mL);
  4134   002516  C01A  F00F         	movff	right_135@mL,setMotorPWM@m
  4135   00251A  C01B  F010         	movff	right_135@mL+1,setMotorPWM@m+1
  4136   00251E  ECED  F00C         	call	_setMotorPWM	;wreg free
  4137   002522                     
  4138                           ;../dc_motor.c: 175:         setMotorPWM(mR);
  4139   002522  C01C  F00F         	movff	right_135@mR,setMotorPWM@m
  4140   002526  C01D  F010         	movff	right_135@mR+1,setMotorPWM@m+1
  4141   00252A  ECED  F00C         	call	_setMotorPWM	;wreg free
  4142   00252E                     
  4143                           ;../dc_motor.c: 176:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4144   00252E  0E35               	movlw	53
  4145   002530                     u2007:
  4146   002530  2EE8               	decfsz	wreg,f,c
  4147   002532  D7FE               	bra	u2007
  4148   002534  F000               	nop	
  4149   002536                     
  4150                           ;../dc_motor.c: 177:     }
  4151   002536  0E02               	movlw	2
  4152   002538  2420               	addwf	right_135@i^0,w,c
  4153   00253A  6E20               	movwf	right_135@i^0,c
  4154   00253C  0E00               	movlw	0
  4155   00253E  2021               	addwfc	(right_135@i+1)^0,w,c
  4156   002540  6E21               	movwf	(right_135@i+1)^0,c
  4157   002542  BE21               	btfsc	(right_135@i+1)^0,7,c
  4158   002544  EFAD  F012         	goto	u1491
  4159   002548  5021               	movf	(right_135@i+1)^0,w,c
  4160   00254A  E109               	bnz	u1490
  4161   00254C  0E32               	movlw	50
  4162   00254E  5C20               	subwf	right_135@i^0,w,c
  4163   002550  A0D8               	btfss	status,0,c
  4164   002552  EFAD  F012         	goto	u1491
  4165   002556  EFAF  F012         	goto	u1490
  4166   00255A                     u1491:
  4167   00255A  EF7E  F012         	goto	l2697
  4168   00255E                     u1490:
  4169   00255E                     
  4170                           ;../dc_motor.c: 178:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4171   00255E  0E13               	movlw	19
  4172   002560  6E1F               	movwf	(??_right_135+1)^0,c
  4173   002562  0EAC               	movlw	172
  4174   002564  6E1E               	movwf	??_right_135^0,c
  4175   002566  0E2A               	movlw	42
  4176   002568                     u2017:
  4177   002568  2EE8               	decfsz	wreg,f,c
  4178   00256A  D7FE               	bra	u2017
  4179   00256C  2E1E               	decfsz	??_right_135^0,f,c
  4180   00256E  D7FC               	bra	u2017
  4181   002570  2E1F               	decfsz	(??_right_135+1)^0,f,c
  4182   002572  D7FA               	bra	u2017
  4183   002574  0012               	return		;funcret
  4184   002576                     __end_of_right_135:
  4185                           	callstack 0
  4186                           
  4187 ;; *************** function _reverse_onesquare *****************
  4188 ;; Defined at:
  4189 ;;		line 106 in file "../dc_motor.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4192 ;;		 -> main@motorL(9), 
  4193 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4194 ;;		 -> main@motorR(9), 
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;  i               2   31[COMRAM] int 
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  1    wreg      void 
  4199 ;; Registers used:
  4200 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4206 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4208 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4209 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4210 ;;Total ram usage:        8 bytes
  4211 ;; Hardware stack levels used: 1
  4212 ;; Hardware stack levels required when called: 3
  4213 ;; This function calls:
  4214 ;;		_setMotorPWM
  4215 ;; This function is called by:
  4216 ;;		_motor_action
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           	psect	text19
  4221   002576                     __ptext19:
  4222                           	callstack 0
  4223   002576                     _reverse_onesquare:
  4224                           	callstack 26
  4225   002576                     
  4226                           ;../dc_motor.c: 106: void reverse_onesquare (struct DC_motor *mL, struct DC_motor *mR);.
      +                          ./dc_motor.c: 107: {;../dc_motor.c: 108:     mL->direction = 0;
  4227   002576  EE20 F001          	lfsr	2,1
  4228   00257A  501A               	movf	reverse_onesquare@mL^0,w,c
  4229   00257C  26D9               	addwf	fsr2l,f,c
  4230   00257E  501B               	movf	(reverse_onesquare@mL+1)^0,w,c
  4231   002580  22DA               	addwfc	fsr2h,f,c
  4232   002582  0E00               	movlw	0
  4233   002584  6EDF               	movwf	indf2,c
  4234                           
  4235                           ;../dc_motor.c: 109:     mR->direction = 0;
  4236   002586  EE20 F001          	lfsr	2,1
  4237   00258A  501C               	movf	reverse_onesquare@mR^0,w,c
  4238   00258C  26D9               	addwf	fsr2l,f,c
  4239   00258E  501D               	movf	(reverse_onesquare@mR+1)^0,w,c
  4240   002590  22DA               	addwfc	fsr2h,f,c
  4241   002592  0E00               	movlw	0
  4242   002594  6EDF               	movwf	indf2,c
  4243   002596                     
  4244                           ;../dc_motor.c: 110:     for (int i=0;i<51;i=i + 2)
  4245   002596  0E00               	movlw	0
  4246   002598  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  4247   00259A  0E00               	movlw	0
  4248   00259C  6E20               	movwf	reverse_onesquare@i^0,c
  4249   00259E                     l2627:
  4250                           
  4251                           ;../dc_motor.c: 111:     {;../dc_motor.c: 112:         mL->power = i;
  4252   00259E  C01A  FFD9         	movff	reverse_onesquare@mL,fsr2l
  4253   0025A2  C01B  FFDA         	movff	reverse_onesquare@mL+1,fsr2h
  4254   0025A6  C020  FFDF         	movff	reverse_onesquare@i,indf2
  4255                           
  4256                           ;../dc_motor.c: 113:         mR->power = i;
  4257   0025AA  C01C  FFD9         	movff	reverse_onesquare@mR,fsr2l
  4258   0025AE  C01D  FFDA         	movff	reverse_onesquare@mR+1,fsr2h
  4259   0025B2  C020  FFDF         	movff	reverse_onesquare@i,indf2
  4260   0025B6                     
  4261                           ;../dc_motor.c: 114:         setMotorPWM(mL);
  4262   0025B6  C01A  F00F         	movff	reverse_onesquare@mL,setMotorPWM@m
  4263   0025BA  C01B  F010         	movff	reverse_onesquare@mL+1,setMotorPWM@m+1
  4264   0025BE  ECED  F00C         	call	_setMotorPWM	;wreg free
  4265   0025C2                     
  4266                           ;../dc_motor.c: 115:         setMotorPWM(mR);
  4267   0025C2  C01C  F00F         	movff	reverse_onesquare@mR,setMotorPWM@m
  4268   0025C6  C01D  F010         	movff	reverse_onesquare@mR+1,setMotorPWM@m+1
  4269   0025CA  ECED  F00C         	call	_setMotorPWM	;wreg free
  4270   0025CE                     
  4271                           ;../dc_motor.c: 116:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4272   0025CE  0E35               	movlw	53
  4273   0025D0                     u2027:
  4274   0025D0  2EE8               	decfsz	wreg,f,c
  4275   0025D2  D7FE               	bra	u2027
  4276   0025D4  F000               	nop	
  4277   0025D6                     
  4278                           ;../dc_motor.c: 117:     }
  4279   0025D6  0E02               	movlw	2
  4280   0025D8  2420               	addwf	reverse_onesquare@i^0,w,c
  4281   0025DA  6E20               	movwf	reverse_onesquare@i^0,c
  4282   0025DC  0E00               	movlw	0
  4283   0025DE  2021               	addwfc	(reverse_onesquare@i+1)^0,w,c
  4284   0025E0  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  4285   0025E2  BE21               	btfsc	(reverse_onesquare@i+1)^0,7,c
  4286   0025E4  EFFD  F012         	goto	u1461
  4287   0025E8  5021               	movf	(reverse_onesquare@i+1)^0,w,c
  4288   0025EA  E109               	bnz	u1460
  4289   0025EC  0E33               	movlw	51
  4290   0025EE  5C20               	subwf	reverse_onesquare@i^0,w,c
  4291   0025F0  A0D8               	btfss	status,0,c
  4292   0025F2  EFFD  F012         	goto	u1461
  4293   0025F6  EFFF  F012         	goto	u1460
  4294   0025FA                     u1461:
  4295   0025FA  EFCF  F012         	goto	l2627
  4296   0025FE                     u1460:
  4297   0025FE                     
  4298                           ;../dc_motor.c: 118:     _delay((unsigned long)((1100)*(64000000/4000.0)));
  4299   0025FE  0E5A               	movlw	90
  4300   002600  6E1F               	movwf	(??_reverse_onesquare+1)^0,c
  4301   002602  0E49               	movlw	73
  4302   002604  6E1E               	movwf	??_reverse_onesquare^0,c
  4303   002606  0EE7               	movlw	231
  4304   002608                     u2037:
  4305   002608  2EE8               	decfsz	wreg,f,c
  4306   00260A  D7FE               	bra	u2037
  4307   00260C  2E1E               	decfsz	??_reverse_onesquare^0,f,c
  4308   00260E  D7FC               	bra	u2037
  4309   002610  2E1F               	decfsz	(??_reverse_onesquare+1)^0,f,c
  4310   002612  D7FA               	bra	u2037
  4311   002614  F000               	nop	
  4312   002616  0012               	return		;funcret
  4313   002618                     __end_of_reverse_onesquare:
  4314                           	callstack 0
  4315                           
  4316 ;; *************** function _reverse_fromcard *****************
  4317 ;; Defined at:
  4318 ;;		line 91 in file "../dc_motor.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4321 ;;		 -> main@motorL(9), 
  4322 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4323 ;;		 -> main@motorR(9), 
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  i               2   31[COMRAM] int 
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  1    wreg      void 
  4328 ;; Registers used:
  4329 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4335 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4336 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4337 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4338 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4339 ;;Total ram usage:        8 bytes
  4340 ;; Hardware stack levels used: 1
  4341 ;; Hardware stack levels required when called: 3
  4342 ;; This function calls:
  4343 ;;		_setMotorPWM
  4344 ;; This function is called by:
  4345 ;;		_motor_action
  4346 ;;		_motor_action_return
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350                           	psect	text20
  4351   002618                     __ptext20:
  4352                           	callstack 0
  4353   002618                     _reverse_fromcard:
  4354                           	callstack 26
  4355   002618                     
  4356                           ;../dc_motor.c: 91: void reverse_fromcard (struct DC_motor *mL, struct DC_motor *mR);../
      +                          dc_motor.c: 92: {;../dc_motor.c: 93:     mL->direction = 0;
  4357   002618  EE20 F001          	lfsr	2,1
  4358   00261C  501A               	movf	reverse_fromcard@mL^0,w,c
  4359   00261E  26D9               	addwf	fsr2l,f,c
  4360   002620  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  4361   002622  22DA               	addwfc	fsr2h,f,c
  4362   002624  0E00               	movlw	0
  4363   002626  6EDF               	movwf	indf2,c
  4364                           
  4365                           ;../dc_motor.c: 94:     mL->direction = 0;
  4366   002628  EE20 F001          	lfsr	2,1
  4367   00262C  501A               	movf	reverse_fromcard@mL^0,w,c
  4368   00262E  26D9               	addwf	fsr2l,f,c
  4369   002630  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  4370   002632  22DA               	addwfc	fsr2h,f,c
  4371   002634  0E00               	movlw	0
  4372   002636  6EDF               	movwf	indf2,c
  4373   002638                     
  4374                           ;../dc_motor.c: 95:     for (int i = 0;i < 41;i = i + 2)
  4375   002638  0E00               	movlw	0
  4376   00263A  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  4377   00263C  0E00               	movlw	0
  4378   00263E  6E20               	movwf	reverse_fromcard@i^0,c
  4379   002640                     l2605:
  4380                           
  4381                           ;../dc_motor.c: 96:     {;../dc_motor.c: 97:         mL->power = i;
  4382   002640  C01A  FFD9         	movff	reverse_fromcard@mL,fsr2l
  4383   002644  C01B  FFDA         	movff	reverse_fromcard@mL+1,fsr2h
  4384   002648  C020  FFDF         	movff	reverse_fromcard@i,indf2
  4385                           
  4386                           ;../dc_motor.c: 98:         mR->power = i;
  4387   00264C  C01C  FFD9         	movff	reverse_fromcard@mR,fsr2l
  4388   002650  C01D  FFDA         	movff	reverse_fromcard@mR+1,fsr2h
  4389   002654  C020  FFDF         	movff	reverse_fromcard@i,indf2
  4390   002658                     
  4391                           ;../dc_motor.c: 99:         setMotorPWM(mL);
  4392   002658  C01A  F00F         	movff	reverse_fromcard@mL,setMotorPWM@m
  4393   00265C  C01B  F010         	movff	reverse_fromcard@mL+1,setMotorPWM@m+1
  4394   002660  ECED  F00C         	call	_setMotorPWM	;wreg free
  4395   002664                     
  4396                           ;../dc_motor.c: 100:         setMotorPWM(mR);
  4397   002664  C01C  F00F         	movff	reverse_fromcard@mR,setMotorPWM@m
  4398   002668  C01D  F010         	movff	reverse_fromcard@mR+1,setMotorPWM@m+1
  4399   00266C  ECED  F00C         	call	_setMotorPWM	;wreg free
  4400   002670                     
  4401                           ;../dc_motor.c: 101:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4402   002670  0E35               	movlw	53
  4403   002672                     u2047:
  4404   002672  2EE8               	decfsz	wreg,f,c
  4405   002674  D7FE               	bra	u2047
  4406   002676  F000               	nop	
  4407   002678                     
  4408                           ;../dc_motor.c: 102:     }
  4409   002678  0E02               	movlw	2
  4410   00267A  2420               	addwf	reverse_fromcard@i^0,w,c
  4411   00267C  6E20               	movwf	reverse_fromcard@i^0,c
  4412   00267E  0E00               	movlw	0
  4413   002680  2021               	addwfc	(reverse_fromcard@i+1)^0,w,c
  4414   002682  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  4415   002684  BE21               	btfsc	(reverse_fromcard@i+1)^0,7,c
  4416   002686  EF4E  F013         	goto	u1451
  4417   00268A  5021               	movf	(reverse_fromcard@i+1)^0,w,c
  4418   00268C  E109               	bnz	u1450
  4419   00268E  0E29               	movlw	41
  4420   002690  5C20               	subwf	reverse_fromcard@i^0,w,c
  4421   002692  A0D8               	btfss	status,0,c
  4422   002694  EF4E  F013         	goto	u1451
  4423   002698  EF50  F013         	goto	u1450
  4424   00269C                     u1451:
  4425   00269C  EF20  F013         	goto	l2605
  4426   0026A0                     u1450:
  4427   0026A0                     
  4428                           ;../dc_motor.c: 103:     _delay((unsigned long)((500)*(64000000/4000.0)));
  4429   0026A0  0E29               	movlw	41
  4430   0026A2  6E1F               	movwf	(??_reverse_fromcard+1)^0,c
  4431   0026A4  0E96               	movlw	150
  4432   0026A6  6E1E               	movwf	??_reverse_fromcard^0,c
  4433   0026A8  0E7F               	movlw	127
  4434   0026AA                     u2057:
  4435   0026AA  2EE8               	decfsz	wreg,f,c
  4436   0026AC  D7FE               	bra	u2057
  4437   0026AE  2E1E               	decfsz	??_reverse_fromcard^0,f,c
  4438   0026B0  D7FC               	bra	u2057
  4439   0026B2  2E1F               	decfsz	(??_reverse_fromcard+1)^0,f,c
  4440   0026B4  D7FA               	bra	u2057
  4441   0026B6  F000               	nop	
  4442   0026B8  0012               	return		;funcret
  4443   0026BA                     __end_of_reverse_fromcard:
  4444                           	callstack 0
  4445                           
  4446 ;; *************** function _left_90 *****************
  4447 ;; Defined at:
  4448 ;;		line 136 in file "../dc_motor.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4451 ;;		 -> main@motorL(9), 
  4452 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4453 ;;		 -> main@motorR(9), 
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  i               2   31[COMRAM] int 
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      void 
  4458 ;; Registers used:
  4459 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4465 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4466 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4467 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4468 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4469 ;;Total ram usage:        8 bytes
  4470 ;; Hardware stack levels used: 1
  4471 ;; Hardware stack levels required when called: 3
  4472 ;; This function calls:
  4473 ;;		_setMotorPWM
  4474 ;; This function is called by:
  4475 ;;		_motor_action
  4476 ;;		_motor_action_return
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text21
  4481   00238E                     __ptext21:
  4482                           	callstack 0
  4483   00238E                     _left_90:
  4484                           	callstack 26
  4485   00238E                     
  4486                           ;../dc_motor.c: 136: void left_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 137: {;../dc_motor.c: 138:     mL->direction = 0;
  4487   00238E  EE20 F001          	lfsr	2,1
  4488   002392  501A               	movf	left_90@mL^0,w,c
  4489   002394  26D9               	addwf	fsr2l,f,c
  4490   002396  501B               	movf	(left_90@mL+1)^0,w,c
  4491   002398  22DA               	addwfc	fsr2h,f,c
  4492   00239A  0E00               	movlw	0
  4493   00239C  6EDF               	movwf	indf2,c
  4494                           
  4495                           ;../dc_motor.c: 139:     mR->direction = 1;
  4496   00239E  EE20 F001          	lfsr	2,1
  4497   0023A2  501C               	movf	left_90@mR^0,w,c
  4498   0023A4  26D9               	addwf	fsr2l,f,c
  4499   0023A6  501D               	movf	(left_90@mR+1)^0,w,c
  4500   0023A8  22DA               	addwfc	fsr2h,f,c
  4501   0023AA  0E01               	movlw	1
  4502   0023AC  6EDF               	movwf	indf2,c
  4503   0023AE                     
  4504                           ;../dc_motor.c: 140:     for (int i = 0;i<50;i = i + 2)
  4505   0023AE  0E00               	movlw	0
  4506   0023B0  6E21               	movwf	(left_90@i+1)^0,c
  4507   0023B2  0E00               	movlw	0
  4508   0023B4  6E20               	movwf	left_90@i^0,c
  4509   0023B6                     l2673:
  4510                           
  4511                           ;../dc_motor.c: 141:     {;../dc_motor.c: 142:         mL->power = 50 + i;
  4512   0023B6  5020               	movf	left_90@i^0,w,c
  4513   0023B8  0F32               	addlw	50
  4514   0023BA  C01A  FFD9         	movff	left_90@mL,fsr2l
  4515   0023BE  C01B  FFDA         	movff	left_90@mL+1,fsr2h
  4516   0023C2  6EDF               	movwf	indf2,c
  4517   0023C4                     
  4518                           ;../dc_motor.c: 143:         mR->power = i;
  4519   0023C4  C01C  FFD9         	movff	left_90@mR,fsr2l
  4520   0023C8  C01D  FFDA         	movff	left_90@mR+1,fsr2h
  4521   0023CC  C020  FFDF         	movff	left_90@i,indf2
  4522   0023D0                     
  4523                           ;../dc_motor.c: 144:         setMotorPWM(mL);
  4524   0023D0  C01A  F00F         	movff	left_90@mL,setMotorPWM@m
  4525   0023D4  C01B  F010         	movff	left_90@mL+1,setMotorPWM@m+1
  4526   0023D8  ECED  F00C         	call	_setMotorPWM	;wreg free
  4527   0023DC                     
  4528                           ;../dc_motor.c: 145:         setMotorPWM(mR);
  4529   0023DC  C01C  F00F         	movff	left_90@mR,setMotorPWM@m
  4530   0023E0  C01D  F010         	movff	left_90@mR+1,setMotorPWM@m+1
  4531   0023E4  ECED  F00C         	call	_setMotorPWM	;wreg free
  4532   0023E8                     
  4533                           ;../dc_motor.c: 146:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4534   0023E8  0E35               	movlw	53
  4535   0023EA                     u2067:
  4536   0023EA  2EE8               	decfsz	wreg,f,c
  4537   0023EC  D7FE               	bra	u2067
  4538   0023EE  F000               	nop	
  4539   0023F0                     
  4540                           ;../dc_motor.c: 147:     }
  4541   0023F0  0E02               	movlw	2
  4542   0023F2  2420               	addwf	left_90@i^0,w,c
  4543   0023F4  6E20               	movwf	left_90@i^0,c
  4544   0023F6  0E00               	movlw	0
  4545   0023F8  2021               	addwfc	(left_90@i+1)^0,w,c
  4546   0023FA  6E21               	movwf	(left_90@i+1)^0,c
  4547   0023FC  BE21               	btfsc	(left_90@i+1)^0,7,c
  4548   0023FE  EF0A  F012         	goto	u1481
  4549   002402  5021               	movf	(left_90@i+1)^0,w,c
  4550   002404  E109               	bnz	u1480
  4551   002406  0E32               	movlw	50
  4552   002408  5C20               	subwf	left_90@i^0,w,c
  4553   00240A  A0D8               	btfss	status,0,c
  4554   00240C  EF0A  F012         	goto	u1481
  4555   002410  EF0C  F012         	goto	u1480
  4556   002414                     u1481:
  4557   002414  EFDB  F011         	goto	l2673
  4558   002418                     u1480:
  4559   002418                     
  4560                           ;../dc_motor.c: 148:     _delay((unsigned long)((165)*(64000000/4000.0)));
  4561   002418  0E0E               	movlw	14
  4562   00241A  6E1F               	movwf	(??_left_90+1)^0,c
  4563   00241C  0E65               	movlw	101
  4564   00241E  6E1E               	movwf	??_left_90^0,c
  4565   002420  0E87               	movlw	135
  4566   002422                     u2077:
  4567   002422  2EE8               	decfsz	wreg,f,c
  4568   002424  D7FE               	bra	u2077
  4569   002426  2E1E               	decfsz	??_left_90^0,f,c
  4570   002428  D7FC               	bra	u2077
  4571   00242A  2E1F               	decfsz	(??_left_90+1)^0,f,c
  4572   00242C  D7FA               	bra	u2077
  4573   00242E  F000               	nop	
  4574   002430  0012               	return		;funcret
  4575   002432                     __end_of_left_90:
  4576                           	callstack 0
  4577                           
  4578 ;; *************** function _left_135 *****************
  4579 ;; Defined at:
  4580 ;;		line 181 in file "../dc_motor.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4583 ;;		 -> main@motorL(9), 
  4584 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4585 ;;		 -> main@motorR(9), 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  i               2   31[COMRAM] int 
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1    wreg      void 
  4590 ;; Registers used:
  4591 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4597 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4598 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4599 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4600 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4601 ;;Total ram usage:        8 bytes
  4602 ;; Hardware stack levels used: 1
  4603 ;; Hardware stack levels required when called: 3
  4604 ;; This function calls:
  4605 ;;		_setMotorPWM
  4606 ;; This function is called by:
  4607 ;;		_motor_action
  4608 ;;		_motor_action_return
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           	psect	text22
  4613   0026BA                     __ptext22:
  4614                           	callstack 0
  4615   0026BA                     _left_135:
  4616                           	callstack 26
  4617   0026BA                     
  4618                           ;../dc_motor.c: 181: void left_135(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 182: {;../dc_motor.c: 183:     mL->direction = 0;
  4619   0026BA  EE20 F001          	lfsr	2,1
  4620   0026BE  501A               	movf	left_135@mL^0,w,c
  4621   0026C0  26D9               	addwf	fsr2l,f,c
  4622   0026C2  501B               	movf	(left_135@mL+1)^0,w,c
  4623   0026C4  22DA               	addwfc	fsr2h,f,c
  4624   0026C6  0E00               	movlw	0
  4625   0026C8  6EDF               	movwf	indf2,c
  4626                           
  4627                           ;../dc_motor.c: 184:     mR->direction = 1;
  4628   0026CA  EE20 F001          	lfsr	2,1
  4629   0026CE  501C               	movf	left_135@mR^0,w,c
  4630   0026D0  26D9               	addwf	fsr2l,f,c
  4631   0026D2  501D               	movf	(left_135@mR+1)^0,w,c
  4632   0026D4  22DA               	addwfc	fsr2h,f,c
  4633   0026D6  0E01               	movlw	1
  4634   0026D8  6EDF               	movwf	indf2,c
  4635   0026DA                     
  4636                           ;../dc_motor.c: 185:     for (int i = 0;i<50;i = i + 2)
  4637   0026DA  0E00               	movlw	0
  4638   0026DC  6E21               	movwf	(left_135@i+1)^0,c
  4639   0026DE  0E00               	movlw	0
  4640   0026E0  6E20               	movwf	left_135@i^0,c
  4641   0026E2                     l2721:
  4642                           
  4643                           ;../dc_motor.c: 186:     {;../dc_motor.c: 187:         mL->power = 50 + i;
  4644   0026E2  5020               	movf	left_135@i^0,w,c
  4645   0026E4  0F32               	addlw	50
  4646   0026E6  C01A  FFD9         	movff	left_135@mL,fsr2l
  4647   0026EA  C01B  FFDA         	movff	left_135@mL+1,fsr2h
  4648   0026EE  6EDF               	movwf	indf2,c
  4649   0026F0                     
  4650                           ;../dc_motor.c: 188:         mR->power = i;
  4651   0026F0  C01C  FFD9         	movff	left_135@mR,fsr2l
  4652   0026F4  C01D  FFDA         	movff	left_135@mR+1,fsr2h
  4653   0026F8  C020  FFDF         	movff	left_135@i,indf2
  4654   0026FC                     
  4655                           ;../dc_motor.c: 189:         setMotorPWM(mL);
  4656   0026FC  C01A  F00F         	movff	left_135@mL,setMotorPWM@m
  4657   002700  C01B  F010         	movff	left_135@mL+1,setMotorPWM@m+1
  4658   002704  ECED  F00C         	call	_setMotorPWM	;wreg free
  4659   002708                     
  4660                           ;../dc_motor.c: 190:         setMotorPWM(mR);
  4661   002708  C01C  F00F         	movff	left_135@mR,setMotorPWM@m
  4662   00270C  C01D  F010         	movff	left_135@mR+1,setMotorPWM@m+1
  4663   002710  ECED  F00C         	call	_setMotorPWM	;wreg free
  4664   002714                     
  4665                           ;../dc_motor.c: 191:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4666   002714  0E35               	movlw	53
  4667   002716                     u2087:
  4668   002716  2EE8               	decfsz	wreg,f,c
  4669   002718  D7FE               	bra	u2087
  4670   00271A  F000               	nop	
  4671   00271C                     
  4672                           ;../dc_motor.c: 192:     }
  4673   00271C  0E02               	movlw	2
  4674   00271E  2420               	addwf	left_135@i^0,w,c
  4675   002720  6E20               	movwf	left_135@i^0,c
  4676   002722  0E00               	movlw	0
  4677   002724  2021               	addwfc	(left_135@i+1)^0,w,c
  4678   002726  6E21               	movwf	(left_135@i+1)^0,c
  4679   002728  BE21               	btfsc	(left_135@i+1)^0,7,c
  4680   00272A  EFA0  F013         	goto	u1501
  4681   00272E  5021               	movf	(left_135@i+1)^0,w,c
  4682   002730  E109               	bnz	u1500
  4683   002732  0E32               	movlw	50
  4684   002734  5C20               	subwf	left_135@i^0,w,c
  4685   002736  A0D8               	btfss	status,0,c
  4686   002738  EFA0  F013         	goto	u1501
  4687   00273C  EFA2  F013         	goto	u1500
  4688   002740                     u1501:
  4689   002740  EF71  F013         	goto	l2721
  4690   002744                     u1500:
  4691   002744                     
  4692                           ;../dc_motor.c: 193:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4693   002744  0E13               	movlw	19
  4694   002746  6E1F               	movwf	(??_left_135+1)^0,c
  4695   002748  0EAC               	movlw	172
  4696   00274A  6E1E               	movwf	??_left_135^0,c
  4697   00274C  0E2A               	movlw	42
  4698   00274E                     u2097:
  4699   00274E  2EE8               	decfsz	wreg,f,c
  4700   002750  D7FE               	bra	u2097
  4701   002752  2E1E               	decfsz	??_left_135^0,f,c
  4702   002754  D7FC               	bra	u2097
  4703   002756  2E1F               	decfsz	(??_left_135+1)^0,f,c
  4704   002758  D7FA               	bra	u2097
  4705   00275A  0012               	return		;funcret
  4706   00275C                     __end_of_left_135:
  4707                           	callstack 0
  4708                           
  4709 ;; *************** function _initUSART4 *****************
  4710 ;; Defined at:
  4711 ;;		line 5 in file "../serial.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;		None
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;		None
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      void 
  4718 ;; Registers used:
  4719 ;;		wreg, status,2
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4729 ;;Total ram usage:        0 bytes
  4730 ;; Hardware stack levels used: 1
  4731 ;; Hardware stack levels required when called: 1
  4732 ;; This function calls:
  4733 ;;		Nothing
  4734 ;; This function is called by:
  4735 ;;		_main
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text23
  4740   002D46                     __ptext23:
  4741                           	callstack 0
  4742   002D46                     _initUSART4:
  4743                           	callstack 29
  4744   002D46                     
  4745                           ;../serial.c: 9:     RC0PPS = 0x12;
  4746   002D46  0E12               	movlw	18
  4747   002D48  010E               	movlb	14	; () banked
  4748   002D4A  6F62               	movwf	98,b	;volatile
  4749                           
  4750                           ;../serial.c: 10:     RX4PPS = 0x11;
  4751   002D4C  0E11               	movlw	17
  4752   002D4E  6F15               	movwf	21,b	;volatile
  4753   002D50                     
  4754                           ; BSR set to: 14
  4755                           ;../serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  4756   002D50  97E9               	bcf	233,3,b	;volatile
  4757   002D52                     
  4758                           ; BSR set to: 14
  4759                           ;../serial.c: 13:     TX4STAbits.BRGH = 0;
  4760   002D52  95E8               	bcf	232,2,b	;volatile
  4761                           
  4762                           ;../serial.c: 14:     SP4BRGL = 103;
  4763   002D54  0E67               	movlw	103
  4764   002D56  6FE5               	movwf	229,b	;volatile
  4765                           
  4766                           ;../serial.c: 15:     SP4BRGH = 0;
  4767   002D58  0E00               	movlw	0
  4768   002D5A  6FE6               	movwf	230,b	;volatile
  4769   002D5C                     
  4770                           ; BSR set to: 14
  4771                           ;../serial.c: 17:     RC4STAbits.CREN = 1;
  4772   002D5C  89E7               	bsf	231,4,b	;volatile
  4773   002D5E                     
  4774                           ; BSR set to: 14
  4775                           ;../serial.c: 18:     TX4STAbits.TXEN = 1;
  4776   002D5E  8BE8               	bsf	232,5,b	;volatile
  4777   002D60                     
  4778                           ; BSR set to: 14
  4779                           ;../serial.c: 19:     RC4STAbits.SPEN = 1;
  4780   002D60  8FE7               	bsf	231,7,b	;volatile
  4781   002D62                     
  4782                           ; BSR set to: 14
  4783   002D62  0012               	return		;funcret
  4784   002D64                     __end_of_initUSART4:
  4785                           	callstack 0
  4786                           
  4787 ;; *************** function _initDCmotorsPWM *****************
  4788 ;; Defined at:
  4789 ;;		line 5 in file "../dc_motor.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  PWMperiod       2    0[COMRAM] int 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;		None
  4794 ;; Return value:  Size  Location     Type
  4795 ;;                  1    wreg      void 
  4796 ;; Registers used:
  4797 ;;		wreg, status,2
  4798 ;; Tracked objects:
  4799 ;;		On entry : 0/0
  4800 ;;		On exit  : 0/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4803 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4806 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4807 ;;Total ram usage:        2 bytes
  4808 ;; Hardware stack levels used: 1
  4809 ;; Hardware stack levels required when called: 1
  4810 ;; This function calls:
  4811 ;;		Nothing
  4812 ;; This function is called by:
  4813 ;;		_main
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           	psect	text24
  4818   002B70                     __ptext24:
  4819                           	callstack 0
  4820   002B70                     _initDCmotorsPWM:
  4821                           	callstack 29
  4822   002B70                     
  4823                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  4824   002B70  9485               	bcf	133,2,c	;volatile
  4825                           
  4826                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  4827   002B72  9885               	bcf	133,4,c	;volatile
  4828                           
  4829                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  4830   002B74  9E83               	bcf	131,7,c	;volatile
  4831                           
  4832                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  4833   002B76  9C87               	bcf	135,6,c	;volatile
  4834                           
  4835                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  4836   002B78  947D               	bcf	125,2,c	;volatile
  4837                           
  4838                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  4839   002B7A  987D               	bcf	125,4,c	;volatile
  4840                           
  4841                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  4842   002B7C  9E7B               	bcf	123,7,c	;volatile
  4843                           
  4844                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  4845   002B7E  9C7F               	bcf	127,6,c	;volatile
  4846   002B80                     
  4847                           ;../dc_motor.c: 17:     T2CONbits.CKPS=0b0011;
  4848   002B80  50BD               	movf	189,w,c	;volatile
  4849   002B82  0B8F               	andlw	-113
  4850   002B84  0930               	iorlw	48
  4851   002B86  6EBD               	movwf	189,c	;volatile
  4852                           
  4853                           ;../dc_motor.c: 18:     T2HLTbits.MODE=0b00000;
  4854   002B88  0EE0               	movlw	-32
  4855   002B8A  16BE               	andwf	190,f,c	;volatile
  4856                           
  4857                           ;../dc_motor.c: 19:     T2CLKCONbits.CS=0b0001;
  4858   002B8C  50BF               	movf	191,w,c	;volatile
  4859   002B8E  0BF0               	andlw	-16
  4860   002B90  0901               	iorlw	1
  4861   002B92  6EBF               	movwf	191,c	;volatile
  4862   002B94                     
  4863                           ;../dc_motor.c: 23:     T2PR=PWMperiod;
  4864   002B94  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4865   002B98                     
  4866                           ;../dc_motor.c: 24:     T2CONbits.ON=1;
  4867   002B98  8EBD               	bsf	189,7,c	;volatile
  4868                           
  4869                           ;../dc_motor.c: 26:     RE2PPS=0x0A;
  4870   002B9A  0E0A               	movlw	10
  4871   002B9C  010E               	movlb	14	; () banked
  4872   002B9E  6F74               	movwf	116,b	;volatile
  4873                           
  4874                           ;../dc_motor.c: 27:     RC7PPS=0x0B;
  4875   002BA0  0E0B               	movlw	11
  4876   002BA2  6F69               	movwf	105,b	;volatile
  4877                           
  4878                           ;../dc_motor.c: 29:     PWM6DCH=0;
  4879   002BA4  0E00               	movlw	0
  4880   002BA6  6EA3               	movwf	163,c	;volatile
  4881                           
  4882                           ;../dc_motor.c: 30:     PWM7DCH=0;
  4883   002BA8  0E00               	movlw	0
  4884   002BAA  6EA0               	movwf	160,c	;volatile
  4885   002BAC                     
  4886                           ; BSR set to: 14
  4887                           ;../dc_motor.c: 32:     PWM6CONbits.EN = 1;
  4888   002BAC  8EA4               	bsf	164,7,c	;volatile
  4889   002BAE                     
  4890                           ; BSR set to: 14
  4891                           ;../dc_motor.c: 33:     PWM7CONbits.EN = 1;
  4892   002BAE  8EA1               	bsf	161,7,c	;volatile
  4893   002BB0                     
  4894                           ; BSR set to: 14
  4895   002BB0  0012               	return		;funcret
  4896   002BB2                     __end_of_initDCmotorsPWM:
  4897                           	callstack 0
  4898                           
  4899 ;; *************** function _forward *****************
  4900 ;; Defined at:
  4901 ;;		line 77 in file "../dc_motor.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4904 ;;		 -> main@motorL(9), 
  4905 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4906 ;;		 -> main@motorR(9), 
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  i               2   29[COMRAM] int 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  1    wreg      void 
  4911 ;; Registers used:
  4912 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4918 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4919 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4921 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4922 ;;Total ram usage:        6 bytes
  4923 ;; Hardware stack levels used: 1
  4924 ;; Hardware stack levels required when called: 3
  4925 ;; This function calls:
  4926 ;;		_setMotorPWM
  4927 ;; This function is called by:
  4928 ;;		_main
  4929 ;;		_motor_action_return
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933                           	psect	text25
  4934   0027EA                     __ptext25:
  4935                           	callstack 0
  4936   0027EA                     _forward:
  4937                           	callstack 27
  4938   0027EA                     
  4939                           ;../dc_motor.c: 77: void forward(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c
      +                          : 78: {;../dc_motor.c: 79:     mL->direction = 1;
  4940   0027EA  EE20 F001          	lfsr	2,1
  4941   0027EE  501A               	movf	forward@mL^0,w,c
  4942   0027F0  26D9               	addwf	fsr2l,f,c
  4943   0027F2  501B               	movf	(forward@mL+1)^0,w,c
  4944   0027F4  22DA               	addwfc	fsr2h,f,c
  4945   0027F6  0E01               	movlw	1
  4946   0027F8  6EDF               	movwf	indf2,c
  4947                           
  4948                           ;../dc_motor.c: 80:     mR->direction = 1;
  4949   0027FA  EE20 F001          	lfsr	2,1
  4950   0027FE  501C               	movf	forward@mR^0,w,c
  4951   002800  26D9               	addwf	fsr2l,f,c
  4952   002802  501D               	movf	(forward@mR+1)^0,w,c
  4953   002804  22DA               	addwfc	fsr2h,f,c
  4954   002806  0E01               	movlw	1
  4955   002808  6EDF               	movwf	indf2,c
  4956   00280A                     
  4957                           ;../dc_motor.c: 81:     for (int i=0;i<31;i=i+2)
  4958   00280A  0E00               	movlw	0
  4959   00280C  6E1F               	movwf	(forward@i+1)^0,c
  4960   00280E  0E00               	movlw	0
  4961   002810  6E1E               	movwf	forward@i^0,c
  4962   002812                     l2937:
  4963                           
  4964                           ;../dc_motor.c: 82:     {;../dc_motor.c: 83:         mL->power = i;
  4965   002812  C01A  FFD9         	movff	forward@mL,fsr2l
  4966   002816  C01B  FFDA         	movff	forward@mL+1,fsr2h
  4967   00281A  C01E  FFDF         	movff	forward@i,indf2
  4968                           
  4969                           ;../dc_motor.c: 84:         mR->power = i;
  4970   00281E  C01C  FFD9         	movff	forward@mR,fsr2l
  4971   002822  C01D  FFDA         	movff	forward@mR+1,fsr2h
  4972   002826  C01E  FFDF         	movff	forward@i,indf2
  4973   00282A                     
  4974                           ;../dc_motor.c: 85:         setMotorPWM(mL);
  4975   00282A  C01A  F00F         	movff	forward@mL,setMotorPWM@m
  4976   00282E  C01B  F010         	movff	forward@mL+1,setMotorPWM@m+1
  4977   002832  ECED  F00C         	call	_setMotorPWM	;wreg free
  4978   002836                     
  4979                           ;../dc_motor.c: 86:         setMotorPWM(mR);
  4980   002836  C01C  F00F         	movff	forward@mR,setMotorPWM@m
  4981   00283A  C01D  F010         	movff	forward@mR+1,setMotorPWM@m+1
  4982   00283E  ECED  F00C         	call	_setMotorPWM	;wreg free
  4983   002842                     
  4984                           ;../dc_motor.c: 87:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4985   002842  0E6A               	movlw	106
  4986   002844                     u2107:
  4987   002844  2EE8               	decfsz	wreg,f,c
  4988   002846  D7FE               	bra	u2107
  4989   002848  D000               	nop2	
  4990   00284A                     
  4991                           ;../dc_motor.c: 88:     }
  4992   00284A  0E02               	movlw	2
  4993   00284C  241E               	addwf	forward@i^0,w,c
  4994   00284E  6E1E               	movwf	forward@i^0,c
  4995   002850  0E00               	movlw	0
  4996   002852  201F               	addwfc	(forward@i+1)^0,w,c
  4997   002854  6E1F               	movwf	(forward@i+1)^0,c
  4998   002856  BE1F               	btfsc	(forward@i+1)^0,7,c
  4999   002858  EF37  F014         	goto	u1731
  5000   00285C  501F               	movf	(forward@i+1)^0,w,c
  5001   00285E  E109               	bnz	u1730
  5002   002860  0E1F               	movlw	31
  5003   002862  5C1E               	subwf	forward@i^0,w,c
  5004   002864  A0D8               	btfss	status,0,c
  5005   002866  EF37  F014         	goto	u1731
  5006   00286A  EF39  F014         	goto	u1730
  5007   00286E                     u1731:
  5008   00286E  EF09  F014         	goto	l2937
  5009   002872                     u1730:
  5010   002872  0012               	return		;funcret
  5011   002874                     __end_of_forward:
  5012                           	callstack 0
  5013                           
  5014 ;; *************** function _setMotorPWM *****************
  5015 ;; Defined at:
  5016 ;;		line 38 in file "../dc_motor.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;  m               2   14[COMRAM] PTR struct DC_motor
  5019 ;;		 -> main@motorR(9), main@motorL(9), 
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  PWMduty         2   23[COMRAM] int 
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  1    wreg      void 
  5024 ;; Registers used:
  5025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5031 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5032 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5033 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5034 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5035 ;;Total ram usage:       11 bytes
  5036 ;; Hardware stack levels used: 1
  5037 ;; Hardware stack levels required when called: 2
  5038 ;; This function calls:
  5039 ;;		___awdiv
  5040 ;;		___wmul
  5041 ;; This function is called by:
  5042 ;;		_main
  5043 ;;		_stop
  5044 ;;		_forward
  5045 ;;		_reverse_fromcard
  5046 ;;		_reverse_onesquare
  5047 ;;		_right_90
  5048 ;;		_left_90
  5049 ;;		_spin_180
  5050 ;;		_right_135
  5051 ;;		_left_135
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           	psect	text26
  5056   0019DA                     __ptext26:
  5057                           	callstack 0
  5058   0019DA                     _setMotorPWM:
  5059                           	callstack 27
  5060   0019DA                     
  5061                           ;../dc_motor.c: 38: void setMotorPWM(struct DC_motor *m);../dc_motor.c: 39: {;../dc_moto
      +                          r.c: 40:  int PWMduty;;../dc_motor.c: 42:  if (m->direction){
  5062   0019DA  EE20 F001          	lfsr	2,1
  5063   0019DE  500F               	movf	setMotorPWM@m^0,w,c
  5064   0019E0  26D9               	addwf	fsr2l,f,c
  5065   0019E2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5066   0019E4  22DA               	addwfc	fsr2h,f,c
  5067   0019E6  50DF               	movf	indf2,w,c
  5068   0019E8  B4D8               	btfsc	status,2,c
  5069   0019EA  EFF9  F00C         	goto	u1361
  5070   0019EE  EFFB  F00C         	goto	u1360
  5071   0019F2                     u1361:
  5072   0019F2  EF2C  F00D         	goto	l2475
  5073   0019F6                     u1360:
  5074   0019F6                     
  5075                           ;../dc_motor.c: 44:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  5076   0019F6  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  5077   0019FA  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5078   0019FE  50DF               	movf	indf2,w,c
  5079   001A00  6E11               	movwf	??_setMotorPWM^0,c
  5080   001A02  5011               	movf	??_setMotorPWM^0,w,c
  5081   001A04  6E01               	movwf	___wmul@multiplier^0,c
  5082   001A06  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5083   001A08  EE20 F007          	lfsr	2,7
  5084   001A0C  500F               	movf	setMotorPWM@m^0,w,c
  5085   001A0E  26D9               	addwf	fsr2l,f,c
  5086   001A10  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5087   001A12  22DA               	addwfc	fsr2h,f,c
  5088   001A14  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5089   001A18  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5090   001A1C  EC70  F016         	call	___wmul	;wreg free
  5091   001A20  C001  F007         	movff	?___wmul,___awdiv@dividend
  5092   001A24  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  5093   001A28  0E00               	movlw	0
  5094   001A2A  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  5095   001A2C  0E64               	movlw	100
  5096   001A2E  6E09               	movwf	___awdiv@divisor^0,c
  5097   001A30  EC61  F010         	call	___awdiv	;wreg free
  5098   001A34  EE20 F007          	lfsr	2,7
  5099   001A38  500F               	movf	setMotorPWM@m^0,w,c
  5100   001A3A  26D9               	addwf	fsr2l,f,c
  5101   001A3C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5102   001A3E  22DA               	addwfc	fsr2h,f,c
  5103   001A40  CFDE F012          	movff	postinc2,??_setMotorPWM+1
  5104   001A44  CFDD F013          	movff	postdec2,??_setMotorPWM+2
  5105   001A48  5007               	movf	?___awdiv^0,w,c
  5106   001A4A  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  5107   001A4C  6E18               	movwf	setMotorPWM@PWMduty^0,c
  5108   001A4E  5008               	movf	(?___awdiv+1)^0,w,c
  5109   001A50  5813               	subwfb	(??_setMotorPWM+2)^0,w,c
  5110   001A52  6E19               	movwf	(setMotorPWM@PWMduty+1)^0,c
  5111                           
  5112                           ;../dc_motor.c: 45:  }
  5113   001A54  EF4F  F00D         	goto	l2477
  5114   001A58                     l2475:
  5115                           
  5116                           ;../dc_motor.c: 48:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  5117   001A58  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  5118   001A5C  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5119   001A60  50DF               	movf	indf2,w,c
  5120   001A62  6E11               	movwf	??_setMotorPWM^0,c
  5121   001A64  5011               	movf	??_setMotorPWM^0,w,c
  5122   001A66  6E01               	movwf	___wmul@multiplier^0,c
  5123   001A68  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5124   001A6A  EE20 F007          	lfsr	2,7
  5125   001A6E  500F               	movf	setMotorPWM@m^0,w,c
  5126   001A70  26D9               	addwf	fsr2l,f,c
  5127   001A72  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5128   001A74  22DA               	addwfc	fsr2h,f,c
  5129   001A76  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5130   001A7A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5131   001A7E  EC70  F016         	call	___wmul	;wreg free
  5132   001A82  C001  F007         	movff	?___wmul,___awdiv@dividend
  5133   001A86  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  5134   001A8A  0E00               	movlw	0
  5135   001A8C  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  5136   001A8E  0E64               	movlw	100
  5137   001A90  6E09               	movwf	___awdiv@divisor^0,c
  5138   001A92  EC61  F010         	call	___awdiv	;wreg free
  5139   001A96  C007  F018         	movff	?___awdiv,setMotorPWM@PWMduty
  5140   001A9A  C008  F019         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  5141   001A9E                     l2477:
  5142                           
  5143                           ;../dc_motor.c: 51:  *(m->dutyHighByte) = PWMduty;
  5144   001A9E  EE20 F002          	lfsr	2,2
  5145   001AA2  500F               	movf	setMotorPWM@m^0,w,c
  5146   001AA4  26D9               	addwf	fsr2l,f,c
  5147   001AA6  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5148   001AA8  22DA               	addwfc	fsr2h,f,c
  5149   001AAA  CFDE F011          	movff	postinc2,??_setMotorPWM
  5150   001AAE  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5151   001AB2  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5152   001AB6  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5153   001ABA  C018  FFDF         	movff	setMotorPWM@PWMduty,indf2
  5154   001ABE                     
  5155                           ;../dc_motor.c: 53:  if (m->direction){
  5156   001ABE  EE20 F001          	lfsr	2,1
  5157   001AC2  500F               	movf	setMotorPWM@m^0,w,c
  5158   001AC4  26D9               	addwf	fsr2l,f,c
  5159   001AC6  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5160   001AC8  22DA               	addwfc	fsr2h,f,c
  5161   001ACA  50DF               	movf	indf2,w,c
  5162   001ACC  B4D8               	btfsc	status,2,c
  5163   001ACE  EF6B  F00D         	goto	u1371
  5164   001AD2  EF6D  F00D         	goto	u1370
  5165   001AD6                     u1371:
  5166   001AD6  EFA2  F00D         	goto	l2483
  5167   001ADA                     u1370:
  5168   001ADA                     
  5169                           ;../dc_motor.c: 54:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  5170   001ADA  EE20 F004          	lfsr	2,4
  5171   001ADE  500F               	movf	setMotorPWM@m^0,w,c
  5172   001AE0  26D9               	addwf	fsr2l,f,c
  5173   001AE2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5174   001AE4  22DA               	addwfc	fsr2h,f,c
  5175   001AE6  CFDE F011          	movff	postinc2,??_setMotorPWM
  5176   001AEA  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5177   001AEE  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5178   001AF2  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5179   001AF6  EE10 F004          	lfsr	1,4
  5180   001AFA  500F               	movf	setMotorPWM@m^0,w,c
  5181   001AFC  26E1               	addwf	fsr1l,f,c
  5182   001AFE  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5183   001B00  22E2               	addwfc	fsr1h,f,c
  5184   001B02  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  5185   001B06  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  5186   001B0A  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  5187   001B0E  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  5188   001B12  50E7               	movf	indf1,w,c
  5189   001B14  6E15               	movwf	(??_setMotorPWM+4)^0,c
  5190   001B16  EE10 F006          	lfsr	1,6
  5191   001B1A  500F               	movf	setMotorPWM@m^0,w,c
  5192   001B1C  26E1               	addwf	fsr1l,f,c
  5193   001B1E  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5194   001B20  22E2               	addwfc	fsr1h,f,c
  5195   001B22  50E7               	movf	indf1,w,c
  5196   001B24  6E16               	movwf	(??_setMotorPWM+5)^0,c
  5197   001B26  0E01               	movlw	1
  5198   001B28  6E17               	movwf	(??_setMotorPWM+6)^0,c
  5199   001B2A  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  5200   001B2C  EF9A  F00D         	goto	u1384
  5201   001B30                     u1385:
  5202   001B30  90D8               	bcf	status,0,c
  5203   001B32  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  5204   001B34                     u1384:
  5205   001B34  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  5206   001B36  EF98  F00D         	goto	u1385
  5207   001B3A  5017               	movf	(??_setMotorPWM+6)^0,w,c
  5208   001B3C  1015               	iorwf	(??_setMotorPWM+4)^0,w,c
  5209   001B3E  6EDF               	movwf	indf2,c
  5210                           
  5211                           ;../dc_motor.c: 55:  } else {
  5212   001B40  EFD6  F00D         	goto	l264
  5213   001B44                     l2483:
  5214                           
  5215                           ;../dc_motor.c: 56:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  5216   001B44  EE20 F004          	lfsr	2,4
  5217   001B48  500F               	movf	setMotorPWM@m^0,w,c
  5218   001B4A  26D9               	addwf	fsr2l,f,c
  5219   001B4C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5220   001B4E  22DA               	addwfc	fsr2h,f,c
  5221   001B50  CFDE F011          	movff	postinc2,??_setMotorPWM
  5222   001B54  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5223   001B58  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5224   001B5C  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5225   001B60  EE10 F004          	lfsr	1,4
  5226   001B64  500F               	movf	setMotorPWM@m^0,w,c
  5227   001B66  26E1               	addwf	fsr1l,f,c
  5228   001B68  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5229   001B6A  22E2               	addwfc	fsr1h,f,c
  5230   001B6C  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  5231   001B70  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  5232   001B74  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  5233   001B78  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  5234   001B7C  50E7               	movf	indf1,w,c
  5235   001B7E  6E15               	movwf	(??_setMotorPWM+4)^0,c
  5236   001B80  EE10 F006          	lfsr	1,6
  5237   001B84  500F               	movf	setMotorPWM@m^0,w,c
  5238   001B86  26E1               	addwf	fsr1l,f,c
  5239   001B88  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5240   001B8A  22E2               	addwfc	fsr1h,f,c
  5241   001B8C  50E7               	movf	indf1,w,c
  5242   001B8E  6E16               	movwf	(??_setMotorPWM+5)^0,c
  5243   001B90  0E01               	movlw	1
  5244   001B92  6E17               	movwf	(??_setMotorPWM+6)^0,c
  5245   001B94  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  5246   001B96  EFCF  F00D         	goto	u1394
  5247   001B9A                     u1395:
  5248   001B9A  90D8               	bcf	status,0,c
  5249   001B9C  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  5250   001B9E                     u1394:
  5251   001B9E  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  5252   001BA0  EFCD  F00D         	goto	u1395
  5253   001BA4  5017               	movf	(??_setMotorPWM+6)^0,w,c
  5254   001BA6  0AFF               	xorlw	255
  5255   001BA8  1415               	andwf	(??_setMotorPWM+4)^0,w,c
  5256   001BAA  6EDF               	movwf	indf2,c
  5257   001BAC                     l264:
  5258   001BAC  0012               	return		;funcret
  5259   001BAE                     __end_of_setMotorPWM:
  5260                           	callstack 0
  5261                           
  5262 ;; *************** function ___wmul *****************
  5263 ;; Defined at:
  5264 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;  multiplier      2    0[COMRAM] unsigned int 
  5267 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;  product         2    4[COMRAM] unsigned int 
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  2    0[COMRAM] unsigned int 
  5272 ;; Registers used:
  5273 ;;		wreg, status,2, status,0, prodl, prodh
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5279 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5280 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5282 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5283 ;;Total ram usage:        6 bytes
  5284 ;; Hardware stack levels used: 1
  5285 ;; Hardware stack levels required when called: 1
  5286 ;; This function calls:
  5287 ;;		Nothing
  5288 ;; This function is called by:
  5289 ;;		_setMotorPWM
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293                           	psect	text27
  5294   002CE0                     __ptext27:
  5295                           	callstack 0
  5296   002CE0                     ___wmul:
  5297                           	callstack 27
  5298   002CE0  5001               	movf	___wmul@multiplier^0,w,c
  5299   002CE2  0203               	mulwf	___wmul@multiplicand^0,c
  5300   002CE4  CFF3 F005          	movff	prodl,___wmul@product
  5301   002CE8  CFF4 F006          	movff	prodh,___wmul@product+1
  5302   002CEC  5001               	movf	___wmul@multiplier^0,w,c
  5303   002CEE  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5304   002CF0  50F3               	movf	243,w,c
  5305   002CF2  2606               	addwf	(___wmul@product+1)^0,f,c
  5306   002CF4  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5307   002CF6  0203               	mulwf	___wmul@multiplicand^0,c
  5308   002CF8  50F3               	movf	243,w,c
  5309   002CFA  2606               	addwf	(___wmul@product+1)^0,f,c
  5310   002CFC  C005  F001         	movff	___wmul@product,?___wmul
  5311   002D00  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5312   002D04  0012               	return		;funcret
  5313   002D06                     __end_of___wmul:
  5314                           	callstack 0
  5315                           
  5316 ;; *************** function ___awdiv *****************
  5317 ;; Defined at:
  5318 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;  dividend        2    6[COMRAM] int 
  5321 ;;  divisor         2    8[COMRAM] int 
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;  quotient        2   12[COMRAM] int 
  5324 ;;  sign            1   11[COMRAM] unsigned char 
  5325 ;;  counter         1   10[COMRAM] unsigned char 
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  2    6[COMRAM] int 
  5328 ;; Registers used:
  5329 ;;		wreg, status,2, status,0
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5335 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5336 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5338 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5339 ;;Total ram usage:        8 bytes
  5340 ;; Hardware stack levels used: 1
  5341 ;; Hardware stack levels required when called: 1
  5342 ;; This function calls:
  5343 ;;		Nothing
  5344 ;; This function is called by:
  5345 ;;		_setMotorPWM
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text28
  5350   0020C2                     __ptext28:
  5351                           	callstack 0
  5352   0020C2                     ___awdiv:
  5353                           	callstack 27
  5354   0020C2  0E00               	movlw	0
  5355   0020C4  6E0C               	movwf	___awdiv@sign^0,c
  5356   0020C6  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
  5357   0020C8  EF6A  F010         	goto	u1180
  5358   0020CC  EF68  F010         	goto	u1181
  5359   0020D0                     u1181:
  5360   0020D0  EF70  F010         	goto	l2353
  5361   0020D4                     u1180:
  5362   0020D4  6C09               	negf	___awdiv@divisor^0,c
  5363   0020D6  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  5364   0020D8  B0D8               	btfsc	status,0,c
  5365   0020DA  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  5366   0020DC  0E01               	movlw	1
  5367   0020DE  6E0C               	movwf	___awdiv@sign^0,c
  5368   0020E0                     l2353:
  5369   0020E0  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
  5370   0020E2  EF77  F010         	goto	u1190
  5371   0020E6  EF75  F010         	goto	u1191
  5372   0020EA                     u1191:
  5373   0020EA  EF7D  F010         	goto	l2359
  5374   0020EE                     u1190:
  5375   0020EE  6C07               	negf	___awdiv@dividend^0,c
  5376   0020F0  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  5377   0020F2  B0D8               	btfsc	status,0,c
  5378   0020F4  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  5379   0020F6  0E01               	movlw	1
  5380   0020F8  1A0C               	xorwf	___awdiv@sign^0,f,c
  5381   0020FA                     l2359:
  5382   0020FA  0E00               	movlw	0
  5383   0020FC  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  5384   0020FE  0E00               	movlw	0
  5385   002100  6E0D               	movwf	___awdiv@quotient^0,c
  5386   002102  5009               	movf	___awdiv@divisor^0,w,c
  5387   002104  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  5388   002106  B4D8               	btfsc	status,2,c
  5389   002108  EF88  F010         	goto	u1201
  5390   00210C  EF8A  F010         	goto	u1200
  5391   002110                     u1201:
  5392   002110  EFB2  F010         	goto	l2381
  5393   002114                     u1200:
  5394   002114  0E01               	movlw	1
  5395   002116  6E0B               	movwf	___awdiv@counter^0,c
  5396   002118  EF92  F010         	goto	l2367
  5397   00211C                     l2365:
  5398   00211C  90D8               	bcf	status,0,c
  5399   00211E  3609               	rlcf	___awdiv@divisor^0,f,c
  5400   002120  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  5401   002122  2A0B               	incf	___awdiv@counter^0,f,c
  5402   002124                     l2367:
  5403   002124  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  5404   002126  EF97  F010         	goto	u1211
  5405   00212A  EF99  F010         	goto	u1210
  5406   00212E                     u1211:
  5407   00212E  EF8E  F010         	goto	l2365
  5408   002132                     u1210:
  5409   002132                     l2369:
  5410   002132  90D8               	bcf	status,0,c
  5411   002134  360D               	rlcf	___awdiv@quotient^0,f,c
  5412   002136  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  5413   002138  5009               	movf	___awdiv@divisor^0,w,c
  5414   00213A  5C07               	subwf	___awdiv@dividend^0,w,c
  5415   00213C  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5416   00213E  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  5417   002140  A0D8               	btfss	status,0,c
  5418   002142  EFA5  F010         	goto	u1221
  5419   002146  EFA7  F010         	goto	u1220
  5420   00214A                     u1221:
  5421   00214A  EFAC  F010         	goto	l2377
  5422   00214E                     u1220:
  5423   00214E  5009               	movf	___awdiv@divisor^0,w,c
  5424   002150  5E07               	subwf	___awdiv@dividend^0,f,c
  5425   002152  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5426   002154  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  5427   002156  800D               	bsf	___awdiv@quotient^0,0,c
  5428   002158                     l2377:
  5429   002158  90D8               	bcf	status,0,c
  5430   00215A  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  5431   00215C  3209               	rrcf	___awdiv@divisor^0,f,c
  5432   00215E  2E0B               	decfsz	___awdiv@counter^0,f,c
  5433   002160  EF99  F010         	goto	l2369
  5434   002164                     l2381:
  5435   002164  500C               	movf	___awdiv@sign^0,w,c
  5436   002166  B4D8               	btfsc	status,2,c
  5437   002168  EFB8  F010         	goto	u1231
  5438   00216C  EFBA  F010         	goto	u1230
  5439   002170                     u1231:
  5440   002170  EFBE  F010         	goto	l2385
  5441   002174                     u1230:
  5442   002174  6C0D               	negf	___awdiv@quotient^0,c
  5443   002176  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  5444   002178  B0D8               	btfsc	status,0,c
  5445   00217A  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  5446   00217C                     l2385:
  5447   00217C  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  5448   002180  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  5449   002184  0012               	return		;funcret
  5450   002186                     __end_of___awdiv:
  5451                           	callstack 0
  5452                           
  5453 ;; *************** function _color_read *****************
  5454 ;; Defined at:
  5455 ;;		line 111 in file "../color.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;  rgb             2   11[COMRAM] PTR struct RGB_val
  5458 ;;		 -> main@RGB_recorded(8), main@RGB_calibrated(8), 
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;		None
  5461 ;; Return value:  Size  Location     Type
  5462 ;;                  1    wreg      void 
  5463 ;; Registers used:
  5464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5470 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5472 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5473 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5474 ;;Total ram usage:        4 bytes
  5475 ;; Hardware stack levels used: 1
  5476 ;; Hardware stack levels required when called: 4
  5477 ;; This function calls:
  5478 ;;		_color_read_Blue
  5479 ;;		_color_read_Green
  5480 ;;		_color_read_Luminosity
  5481 ;;		_color_read_Red
  5482 ;; This function is called by:
  5483 ;;		_main
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           	psect	text29
  5488   002244                     __ptext29:
  5489                           	callstack 0
  5490   002244                     _color_read:
  5491                           	callstack 26
  5492   002244                     
  5493                           ;../color.c: 111: void color_read(struct RGB_val *rgb);../color.c: 112: {;../color.c: 11
      +                          3:     rgb->L = color_read_Luminosity();
  5494   002244  EC1E  F015         	call	_color_read_Luminosity	;wreg free
  5495   002248  C00C  FFD9         	movff	color_read@rgb,fsr2l
  5496   00224C  C00D  FFDA         	movff	color_read@rgb+1,fsr2h
  5497   002250  C005  FFDE         	movff	?_color_read_Luminosity,postinc2
  5498   002254  C006  FFDD         	movff	?_color_read_Luminosity+1,postdec2
  5499   002258                     
  5500                           ;../color.c: 114:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5501   002258  0E09               	movlw	9
  5502   00225A  6E0F               	movwf	(??_color_read+1)^0,c
  5503   00225C  0E1E               	movlw	30
  5504   00225E  6E0E               	movwf	??_color_read^0,c
  5505   002260  0EE4               	movlw	228
  5506   002262                     u2117:
  5507   002262  2EE8               	decfsz	wreg,f,c
  5508   002264  D7FE               	bra	u2117
  5509   002266  2E0E               	decfsz	??_color_read^0,f,c
  5510   002268  D7FC               	bra	u2117
  5511   00226A  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5512   00226C  D7FA               	bra	u2117
  5513   00226E  D000               	nop2	
  5514   002270                     
  5515                           ;../color.c: 115:     rgb->R = color_read_Red();
  5516   002270  ECF6  F014         	call	_color_read_Red	;wreg free
  5517   002274  EE20 F002          	lfsr	2,2
  5518   002278  500C               	movf	color_read@rgb^0,w,c
  5519   00227A  26D9               	addwf	fsr2l,f,c
  5520   00227C  500D               	movf	(color_read@rgb+1)^0,w,c
  5521   00227E  22DA               	addwfc	fsr2h,f,c
  5522   002280  C005  FFDE         	movff	?_color_read_Red,postinc2
  5523   002284  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  5524                           
  5525                           ;../color.c: 116:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5526   002288  0E09               	movlw	9
  5527   00228A  6E0F               	movwf	(??_color_read+1)^0,c
  5528   00228C  0E1E               	movlw	30
  5529   00228E  6E0E               	movwf	??_color_read^0,c
  5530   002290  0EE4               	movlw	228
  5531   002292                     u2127:
  5532   002292  2EE8               	decfsz	wreg,f,c
  5533   002294  D7FE               	bra	u2127
  5534   002296  2E0E               	decfsz	??_color_read^0,f,c
  5535   002298  D7FC               	bra	u2127
  5536   00229A  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5537   00229C  D7FA               	bra	u2127
  5538   00229E  D000               	nop2	
  5539   0022A0                     
  5540                           ;../color.c: 117:     rgb->G = color_read_Green();
  5541   0022A0  EC46  F015         	call	_color_read_Green	;wreg free
  5542   0022A4  EE20 F004          	lfsr	2,4
  5543   0022A8  500C               	movf	color_read@rgb^0,w,c
  5544   0022AA  26D9               	addwf	fsr2l,f,c
  5545   0022AC  500D               	movf	(color_read@rgb+1)^0,w,c
  5546   0022AE  22DA               	addwfc	fsr2h,f,c
  5547   0022B0  C005  FFDE         	movff	?_color_read_Green,postinc2
  5548   0022B4  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  5549   0022B8                     
  5550                           ;../color.c: 118:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5551   0022B8  0E09               	movlw	9
  5552   0022BA  6E0F               	movwf	(??_color_read+1)^0,c
  5553   0022BC  0E1E               	movlw	30
  5554   0022BE  6E0E               	movwf	??_color_read^0,c
  5555   0022C0  0EE4               	movlw	228
  5556   0022C2                     u2137:
  5557   0022C2  2EE8               	decfsz	wreg,f,c
  5558   0022C4  D7FE               	bra	u2137
  5559   0022C6  2E0E               	decfsz	??_color_read^0,f,c
  5560   0022C8  D7FC               	bra	u2137
  5561   0022CA  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5562   0022CC  D7FA               	bra	u2137
  5563   0022CE  D000               	nop2	
  5564                           
  5565                           ;../color.c: 119:     rgb->B = color_read_Blue();
  5566   0022D0  EC6E  F015         	call	_color_read_Blue	;wreg free
  5567   0022D4  EE20 F006          	lfsr	2,6
  5568   0022D8  500C               	movf	color_read@rgb^0,w,c
  5569   0022DA  26D9               	addwf	fsr2l,f,c
  5570   0022DC  500D               	movf	(color_read@rgb+1)^0,w,c
  5571   0022DE  22DA               	addwfc	fsr2h,f,c
  5572   0022E0  C005  FFDE         	movff	?_color_read_Blue,postinc2
  5573   0022E4  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  5574   0022E8  0012               	return		;funcret
  5575   0022EA                     __end_of_color_read:
  5576                           	callstack 0
  5577                           
  5578 ;; *************** function _color_read_Red *****************
  5579 ;; Defined at:
  5580 ;;		line 69 in file "../color.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;		None
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  tmp             2    9[COMRAM] unsigned int 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  2    4[COMRAM] unsigned int 
  5587 ;; Registers used:
  5588 ;;		wreg, status,2, status,0, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5594 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5595 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5596 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5597 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5598 ;;Total ram usage:        7 bytes
  5599 ;; Hardware stack levels used: 1
  5600 ;; Hardware stack levels required when called: 3
  5601 ;; This function calls:
  5602 ;;		_I2C_2_Master_Read
  5603 ;;		_I2C_2_Master_RepStart
  5604 ;;		_I2C_2_Master_Start
  5605 ;;		_I2C_2_Master_Stop
  5606 ;;		_I2C_2_Master_Write
  5607 ;; This function is called by:
  5608 ;;		_color_read
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text30
  5613   0029EC                     __ptext30:
  5614                           	callstack 0
  5615   0029EC                     _color_read_Red:
  5616                           	callstack 26
  5617   0029EC                     
  5618                           ;../color.c: 71:  unsigned int tmp;;../color.c: 72:  I2C_2_Master_Start();
  5619   0029EC  ECD9  F016         	call	_I2C_2_Master_Start	;wreg free
  5620                           
  5621                           ;../color.c: 73:  I2C_2_Master_Write(0x52 | 0x00);
  5622   0029F0  0E52               	movlw	82
  5623   0029F2  ECC9  F016         	call	_I2C_2_Master_Write
  5624                           
  5625                           ;../color.c: 74:  I2C_2_Master_Write(0xA0 | 0x16);
  5626   0029F6  0EB6               	movlw	182
  5627   0029F8  ECC9  F016         	call	_I2C_2_Master_Write
  5628                           
  5629                           ;../color.c: 75:  I2C_2_Master_RepStart();
  5630   0029FC  ECCF  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5631                           
  5632                           ;../color.c: 76:  I2C_2_Master_Write(0x52 | 0x01);
  5633   002A00  0E53               	movlw	83
  5634   002A02  ECC9  F016         	call	_I2C_2_Master_Write
  5635                           
  5636                           ;../color.c: 77:  tmp=I2C_2_Master_Read(1);
  5637   002A06  0E01               	movlw	1
  5638   002A08  ECD9  F015         	call	_I2C_2_Master_Read
  5639   002A0C  6E07               	movwf	??_color_read_Red^0,c
  5640   002A0E  5007               	movf	??_color_read_Red^0,w,c
  5641   002A10  6E0A               	movwf	color_read_Red@tmp^0,c
  5642   002A12  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  5643                           
  5644                           ;../color.c: 78:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5645   002A14  0E00               	movlw	0
  5646   002A16  ECD9  F015         	call	_I2C_2_Master_Read
  5647   002A1A  6E07               	movwf	??_color_read_Red^0,c
  5648   002A1C  5007               	movf	??_color_read_Red^0,w,c
  5649   002A1E  6E09               	movwf	(??_color_read_Red+2)^0,c
  5650   002A20  6A08               	clrf	(??_color_read_Red+1)^0,c
  5651   002A22  500A               	movf	color_read_Red@tmp^0,w,c
  5652   002A24  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  5653   002A26  6E0A               	movwf	color_read_Red@tmp^0,c
  5654   002A28  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  5655   002A2A  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  5656   002A2C  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5657                           
  5658                           ;../color.c: 79:  I2C_2_Master_Stop();
  5659   002A2E  ECD4  F016         	call	_I2C_2_Master_Stop	;wreg free
  5660   002A32                     
  5661                           ;../color.c: 80:  return tmp;
  5662   002A32  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5663   002A36  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5664   002A3A  0012               	return		;funcret
  5665   002A3C                     __end_of_color_read_Red:
  5666                           	callstack 0
  5667                           
  5668 ;; *************** function _color_read_Luminosity *****************
  5669 ;; Defined at:
  5670 ;;		line 55 in file "../color.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;		None
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;  tmp             2    9[COMRAM] unsigned int 
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  2    4[COMRAM] unsigned int 
  5677 ;; Registers used:
  5678 ;;		wreg, status,2, status,0, cstack
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5684 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5685 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5686 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5687 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5688 ;;Total ram usage:        7 bytes
  5689 ;; Hardware stack levels used: 1
  5690 ;; Hardware stack levels required when called: 3
  5691 ;; This function calls:
  5692 ;;		_I2C_2_Master_Read
  5693 ;;		_I2C_2_Master_RepStart
  5694 ;;		_I2C_2_Master_Start
  5695 ;;		_I2C_2_Master_Stop
  5696 ;;		_I2C_2_Master_Write
  5697 ;; This function is called by:
  5698 ;;		_color_read
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           	psect	text31
  5703   002A3C                     __ptext31:
  5704                           	callstack 0
  5705   002A3C                     _color_read_Luminosity:
  5706                           	callstack 26
  5707   002A3C                     
  5708                           ;../color.c: 57:  unsigned int tmp;;../color.c: 58:  I2C_2_Master_Start();
  5709   002A3C  ECD9  F016         	call	_I2C_2_Master_Start	;wreg free
  5710                           
  5711                           ;../color.c: 59:  I2C_2_Master_Write(0x52 | 0x00);
  5712   002A40  0E52               	movlw	82
  5713   002A42  ECC9  F016         	call	_I2C_2_Master_Write
  5714                           
  5715                           ;../color.c: 60:  I2C_2_Master_Write(0xA0 | 0x14);
  5716   002A46  0EB4               	movlw	180
  5717   002A48  ECC9  F016         	call	_I2C_2_Master_Write
  5718                           
  5719                           ;../color.c: 61:  I2C_2_Master_RepStart();
  5720   002A4C  ECCF  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5721                           
  5722                           ;../color.c: 62:  I2C_2_Master_Write(0x52 | 0x01);
  5723   002A50  0E53               	movlw	83
  5724   002A52  ECC9  F016         	call	_I2C_2_Master_Write
  5725                           
  5726                           ;../color.c: 63:  tmp=I2C_2_Master_Read(1);
  5727   002A56  0E01               	movlw	1
  5728   002A58  ECD9  F015         	call	_I2C_2_Master_Read
  5729   002A5C  6E07               	movwf	??_color_read_Luminosity^0,c
  5730   002A5E  5007               	movf	??_color_read_Luminosity^0,w,c
  5731   002A60  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5732   002A62  6A0B               	clrf	(color_read_Luminosity@tmp+1)^0,c
  5733                           
  5734                           ;../color.c: 64:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5735   002A64  0E00               	movlw	0
  5736   002A66  ECD9  F015         	call	_I2C_2_Master_Read
  5737   002A6A  6E07               	movwf	??_color_read_Luminosity^0,c
  5738   002A6C  5007               	movf	??_color_read_Luminosity^0,w,c
  5739   002A6E  6E09               	movwf	(??_color_read_Luminosity+2)^0,c
  5740   002A70  6A08               	clrf	(??_color_read_Luminosity+1)^0,c
  5741   002A72  500A               	movf	color_read_Luminosity@tmp^0,w,c
  5742   002A74  1008               	iorwf	(??_color_read_Luminosity+1)^0,w,c
  5743   002A76  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5744   002A78  500B               	movf	(color_read_Luminosity@tmp+1)^0,w,c
  5745   002A7A  1009               	iorwf	(??_color_read_Luminosity+2)^0,w,c
  5746   002A7C  6E0B               	movwf	(color_read_Luminosity@tmp+1)^0,c
  5747                           
  5748                           ;../color.c: 65:  I2C_2_Master_Stop();
  5749   002A7E  ECD4  F016         	call	_I2C_2_Master_Stop	;wreg free
  5750   002A82                     
  5751                           ;../color.c: 66:  return tmp;
  5752   002A82  C00A  F005         	movff	color_read_Luminosity@tmp,?_color_read_Luminosity
  5753   002A86  C00B  F006         	movff	color_read_Luminosity@tmp+1,?_color_read_Luminosity+1
  5754   002A8A  0012               	return		;funcret
  5755   002A8C                     __end_of_color_read_Luminosity:
  5756                           	callstack 0
  5757                           
  5758 ;; *************** function _color_read_Green *****************
  5759 ;; Defined at:
  5760 ;;		line 83 in file "../color.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;		None
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;  tmp             2    9[COMRAM] unsigned int 
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  2    4[COMRAM] unsigned int 
  5767 ;; Registers used:
  5768 ;;		wreg, status,2, status,0, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5774 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5775 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5776 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5777 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5778 ;;Total ram usage:        7 bytes
  5779 ;; Hardware stack levels used: 1
  5780 ;; Hardware stack levels required when called: 3
  5781 ;; This function calls:
  5782 ;;		_I2C_2_Master_Read
  5783 ;;		_I2C_2_Master_RepStart
  5784 ;;		_I2C_2_Master_Start
  5785 ;;		_I2C_2_Master_Stop
  5786 ;;		_I2C_2_Master_Write
  5787 ;; This function is called by:
  5788 ;;		_color_read
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           	psect	text32
  5793   002A8C                     __ptext32:
  5794                           	callstack 0
  5795   002A8C                     _color_read_Green:
  5796                           	callstack 26
  5797   002A8C                     
  5798                           ;../color.c: 85:  unsigned int tmp;;../color.c: 86:  I2C_2_Master_Start();
  5799   002A8C  ECD9  F016         	call	_I2C_2_Master_Start	;wreg free
  5800                           
  5801                           ;../color.c: 87:  I2C_2_Master_Write(0x52 | 0x00);
  5802   002A90  0E52               	movlw	82
  5803   002A92  ECC9  F016         	call	_I2C_2_Master_Write
  5804                           
  5805                           ;../color.c: 88:  I2C_2_Master_Write(0xA0 | 0x18);
  5806   002A96  0EB8               	movlw	184
  5807   002A98  ECC9  F016         	call	_I2C_2_Master_Write
  5808                           
  5809                           ;../color.c: 89:  I2C_2_Master_RepStart();
  5810   002A9C  ECCF  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5811                           
  5812                           ;../color.c: 90:  I2C_2_Master_Write(0x52 | 0x01);
  5813   002AA0  0E53               	movlw	83
  5814   002AA2  ECC9  F016         	call	_I2C_2_Master_Write
  5815                           
  5816                           ;../color.c: 91:  tmp=I2C_2_Master_Read(1);
  5817   002AA6  0E01               	movlw	1
  5818   002AA8  ECD9  F015         	call	_I2C_2_Master_Read
  5819   002AAC  6E07               	movwf	??_color_read_Green^0,c
  5820   002AAE  5007               	movf	??_color_read_Green^0,w,c
  5821   002AB0  6E0A               	movwf	color_read_Green@tmp^0,c
  5822   002AB2  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5823                           
  5824                           ;../color.c: 92:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5825   002AB4  0E00               	movlw	0
  5826   002AB6  ECD9  F015         	call	_I2C_2_Master_Read
  5827   002ABA  6E07               	movwf	??_color_read_Green^0,c
  5828   002ABC  5007               	movf	??_color_read_Green^0,w,c
  5829   002ABE  6E09               	movwf	(??_color_read_Green+2)^0,c
  5830   002AC0  6A08               	clrf	(??_color_read_Green+1)^0,c
  5831   002AC2  500A               	movf	color_read_Green@tmp^0,w,c
  5832   002AC4  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5833   002AC6  6E0A               	movwf	color_read_Green@tmp^0,c
  5834   002AC8  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5835   002ACA  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5836   002ACC  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5837                           
  5838                           ;../color.c: 93:  I2C_2_Master_Stop();
  5839   002ACE  ECD4  F016         	call	_I2C_2_Master_Stop	;wreg free
  5840   002AD2                     
  5841                           ;../color.c: 94:  return tmp;
  5842   002AD2  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5843   002AD6  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5844   002ADA  0012               	return		;funcret
  5845   002ADC                     __end_of_color_read_Green:
  5846                           	callstack 0
  5847                           
  5848 ;; *************** function _color_read_Blue *****************
  5849 ;; Defined at:
  5850 ;;		line 97 in file "../color.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;		None
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;  tmp             2    9[COMRAM] unsigned int 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  2    4[COMRAM] unsigned int 
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5865 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5866 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5867 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5868 ;;Total ram usage:        7 bytes
  5869 ;; Hardware stack levels used: 1
  5870 ;; Hardware stack levels required when called: 3
  5871 ;; This function calls:
  5872 ;;		_I2C_2_Master_Read
  5873 ;;		_I2C_2_Master_RepStart
  5874 ;;		_I2C_2_Master_Start
  5875 ;;		_I2C_2_Master_Stop
  5876 ;;		_I2C_2_Master_Write
  5877 ;; This function is called by:
  5878 ;;		_color_read
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           	psect	text33
  5883   002ADC                     __ptext33:
  5884                           	callstack 0
  5885   002ADC                     _color_read_Blue:
  5886                           	callstack 26
  5887   002ADC                     
  5888                           ;../color.c: 99:  unsigned int tmp;;../color.c: 100:  I2C_2_Master_Start();
  5889   002ADC  ECD9  F016         	call	_I2C_2_Master_Start	;wreg free
  5890                           
  5891                           ;../color.c: 101:  I2C_2_Master_Write(0x52 | 0x00);
  5892   002AE0  0E52               	movlw	82
  5893   002AE2  ECC9  F016         	call	_I2C_2_Master_Write
  5894                           
  5895                           ;../color.c: 102:  I2C_2_Master_Write(0xA0 | 0x1A);
  5896   002AE6  0EBA               	movlw	186
  5897   002AE8  ECC9  F016         	call	_I2C_2_Master_Write
  5898                           
  5899                           ;../color.c: 103:  I2C_2_Master_RepStart();
  5900   002AEC  ECCF  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5901                           
  5902                           ;../color.c: 104:  I2C_2_Master_Write(0x52 | 0x01);
  5903   002AF0  0E53               	movlw	83
  5904   002AF2  ECC9  F016         	call	_I2C_2_Master_Write
  5905                           
  5906                           ;../color.c: 105:  tmp=I2C_2_Master_Read(1);
  5907   002AF6  0E01               	movlw	1
  5908   002AF8  ECD9  F015         	call	_I2C_2_Master_Read
  5909   002AFC  6E07               	movwf	??_color_read_Blue^0,c
  5910   002AFE  5007               	movf	??_color_read_Blue^0,w,c
  5911   002B00  6E0A               	movwf	color_read_Blue@tmp^0,c
  5912   002B02  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5913                           
  5914                           ;../color.c: 106:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5915   002B04  0E00               	movlw	0
  5916   002B06  ECD9  F015         	call	_I2C_2_Master_Read
  5917   002B0A  6E07               	movwf	??_color_read_Blue^0,c
  5918   002B0C  5007               	movf	??_color_read_Blue^0,w,c
  5919   002B0E  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5920   002B10  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5921   002B12  500A               	movf	color_read_Blue@tmp^0,w,c
  5922   002B14  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5923   002B16  6E0A               	movwf	color_read_Blue@tmp^0,c
  5924   002B18  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5925   002B1A  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5926   002B1C  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5927                           
  5928                           ;../color.c: 107:  I2C_2_Master_Stop();
  5929   002B1E  ECD4  F016         	call	_I2C_2_Master_Stop	;wreg free
  5930   002B22                     
  5931                           ;../color.c: 108:  return tmp;
  5932   002B22  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5933   002B26  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5934   002B2A  0012               	return		;funcret
  5935   002B2C                     __end_of_color_read_Blue:
  5936                           	callstack 0
  5937                           
  5938 ;; *************** function _I2C_2_Master_RepStart *****************
  5939 ;; Defined at:
  5940 ;;		line 33 in file "../i2c.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;		None
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;		None
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, status,2, status,0, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5958 ;;Total ram usage:        0 bytes
  5959 ;; Hardware stack levels used: 1
  5960 ;; Hardware stack levels required when called: 2
  5961 ;; This function calls:
  5962 ;;		_I2C_2_Master_Idle
  5963 ;; This function is called by:
  5964 ;;		_color_read_Luminosity
  5965 ;;		_color_read_Red
  5966 ;;		_color_read_Green
  5967 ;;		_color_read_Blue
  5968 ;; This function uses a non-reentrant model
  5969 ;;
  5970                           
  5971                           	psect	text34
  5972   002D9E                     __ptext34:
  5973                           	callstack 0
  5974   002D9E                     _I2C_2_Master_RepStart:
  5975                           	callstack 26
  5976   002D9E                     
  5977                           ;../i2c.c: 35:   I2C_2_Master_Idle();
  5978   002D9E  EC5C  F016         	call	_I2C_2_Master_Idle	;wreg free
  5979   002DA2                     
  5980                           ;../i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5981   002DA2  010E               	movlb	14	; () banked
  5982   002DA4  83DA               	bsf	218,1,b	;volatile
  5983   002DA6                     
  5984                           ; BSR set to: 14
  5985   002DA6  0012               	return		;funcret
  5986   002DA8                     __end_of_I2C_2_Master_RepStart:
  5987                           	callstack 0
  5988                           
  5989 ;; *************** function _I2C_2_Master_Read *****************
  5990 ;; Defined at:
  5991 ;;		line 51 in file "../i2c.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;  ack             1    wreg     unsigned char 
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;  ack             1    2[COMRAM] unsigned char 
  5996 ;;  tmp             1    3[COMRAM] unsigned char 
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  1    wreg      unsigned char 
  5999 ;; Registers used:
  6000 ;;		wreg, status,2, status,0, cstack
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6008 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6009 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6010 ;;Total ram usage:        3 bytes
  6011 ;; Hardware stack levels used: 1
  6012 ;; Hardware stack levels required when called: 2
  6013 ;; This function calls:
  6014 ;;		_I2C_2_Master_Idle
  6015 ;; This function is called by:
  6016 ;;		_color_read_Luminosity
  6017 ;;		_color_read_Red
  6018 ;;		_color_read_Green
  6019 ;;		_color_read_Blue
  6020 ;; This function uses a non-reentrant model
  6021 ;;
  6022                           
  6023                           	psect	text35
  6024   002BB2                     __ptext35:
  6025                           	callstack 0
  6026   002BB2                     _I2C_2_Master_Read:
  6027                           	callstack 26
  6028                           
  6029                           ; BSR set to: 14
  6030                           ;incstack = 0
  6031                           ;I2C_2_Master_Read@ack stored from wreg
  6032   002BB2  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  6033   002BB4                     
  6034                           ;../i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);../i2c.c: 52: {;../i2c
      +                          .c: 53:   unsigned char tmp;;../i2c.c: 54:   I2C_2_Master_Idle();
  6035   002BB4  EC5C  F016         	call	_I2C_2_Master_Idle	;wreg free
  6036   002BB8                     
  6037                           ;../i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6038   002BB8  010E               	movlb	14	; () banked
  6039   002BBA  87DA               	bsf	218,3,b	;volatile
  6040                           
  6041                           ;../i2c.c: 56:   I2C_2_Master_Idle();
  6042   002BBC  EC5C  F016         	call	_I2C_2_Master_Idle	;wreg free
  6043   002BC0                     
  6044                           ;../i2c.c: 57:   tmp = SSP2BUF;
  6045   002BC0  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6046                           
  6047                           ;../i2c.c: 58:   I2C_2_Master_Idle();
  6048   002BC4  EC5C  F016         	call	_I2C_2_Master_Idle	;wreg free
  6049   002BC8                     
  6050                           ;../i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6051   002BC8  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  6052   002BCA  B4D8               	btfsc	status,2,c
  6053   002BCC  EFEA  F015         	goto	u1341
  6054   002BD0  EFEE  F015         	goto	u1340
  6055   002BD4                     u1341:
  6056   002BD4  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6057   002BD6  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  6058   002BD8  EFEF  F015         	goto	u1358
  6059   002BDC                     u1340:
  6060   002BDC  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6061   002BDE                     u1358:
  6062   002BDE  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  6063   002BE0  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  6064   002BE2  010E               	movlb	14	; () banked
  6065   002BE4  51DA               	movf	218,w,b	;volatile
  6066   002BE6  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6067   002BE8  0BDF               	andlw	-33
  6068   002BEA  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6069   002BEC  6FDA               	movwf	218,b	;volatile
  6070   002BEE                     
  6071                           ; BSR set to: 14
  6072                           ;../i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6073   002BEE  89DA               	bsf	218,4,b	;volatile
  6074   002BF0                     
  6075                           ; BSR set to: 14
  6076                           ;../i2c.c: 61:   return tmp;
  6077   002BF0  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  6078   002BF2                     
  6079                           ; BSR set to: 14
  6080   002BF2  0012               	return		;funcret
  6081   002BF4                     __end_of_I2C_2_Master_Read:
  6082                           	callstack 0
  6083                           
  6084 ;; *************** function _color_processor_hard *****************
  6085 ;; Defined at:
  6086 ;;		line 152 in file "../color.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  6089 ;;		 -> main@RGB_recorded(8), 
  6090 ;;  calibrated      2    2[COMRAM] PTR unsigned int 
  6091 ;;		 -> main@color_calibrated(64), 
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;  cb              2   22[COMRAM] unsigned int 
  6094 ;;  cg              2   20[COMRAM] unsigned int 
  6095 ;;  cr              2   18[COMRAM] unsigned int 
  6096 ;;  condition_b     1    8[COMRAM] _Bool 
  6097 ;;  condition_g     1    7[COMRAM] _Bool 
  6098 ;;  condition_r     1    6[COMRAM] _Bool 
  6099 ;;  i               2    0        int 
  6100 ;;  b               2   16[COMRAM] unsigned int 
  6101 ;;  g               2   14[COMRAM] unsigned int 
  6102 ;;  r               2   12[COMRAM] unsigned int 
  6103 ;; Return value:  Size  Location     Type
  6104 ;;                  2    0[COMRAM] unsigned int 
  6105 ;; Registers used:
  6106 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6107 ;; Tracked objects:
  6108 ;;		On entry : 0/0
  6109 ;;		On exit  : 0/0
  6110 ;;		Unchanged: 0/0
  6111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6112 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6113 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6115 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6116 ;;Total ram usage:       24 bytes
  6117 ;; Hardware stack levels used: 1
  6118 ;; Hardware stack levels required when called: 1
  6119 ;; This function calls:
  6120 ;;		Nothing
  6121 ;; This function is called by:
  6122 ;;		_main
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           	psect	text36
  6127   0017F6                     __ptext36:
  6128                           	callstack 0
  6129   0017F6                     _color_processor_hard:
  6130                           	callstack 29
  6131   0017F6                     
  6132                           ;../color.c: 152: unsigned int color_processor_hard(struct RGB_val *rgb, unsigned int ca
      +                          librated[]);../color.c: 153: {;../color.c: 154:     unsigned int r = rgb->R;
  6133   0017F6  EE20 F002          	lfsr	2,2
  6134   0017FA  5001               	movf	color_processor_hard@rgb^0,w,c
  6135   0017FC  26D9               	addwf	fsr2l,f,c
  6136   0017FE  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6137   001800  22DA               	addwfc	fsr2h,f,c
  6138   001802  CFDE F00D          	movff	postinc2,color_processor_hard@r
  6139   001806  CFDD F00E          	movff	postdec2,color_processor_hard@r+1
  6140                           
  6141                           ;../color.c: 155:     unsigned int g = rgb->G;
  6142   00180A  EE20 F004          	lfsr	2,4
  6143   00180E  5001               	movf	color_processor_hard@rgb^0,w,c
  6144   001810  26D9               	addwf	fsr2l,f,c
  6145   001812  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6146   001814  22DA               	addwfc	fsr2h,f,c
  6147   001816  CFDE F00F          	movff	postinc2,color_processor_hard@g
  6148   00181A  CFDD F010          	movff	postdec2,color_processor_hard@g+1
  6149                           
  6150                           ;../color.c: 156:     unsigned int b = rgb->B;
  6151   00181E  EE20 F006          	lfsr	2,6
  6152   001822  5001               	movf	color_processor_hard@rgb^0,w,c
  6153   001824  26D9               	addwf	fsr2l,f,c
  6154   001826  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6155   001828  22DA               	addwfc	fsr2h,f,c
  6156   00182A  CFDE F011          	movff	postinc2,color_processor_hard@b
  6157   00182E  CFDD F012          	movff	postdec2,color_processor_hard@b+1
  6158   001832                     
  6159                           ;../color.c: 160:         unsigned int cr = calibrated[4*i+1];
  6160   001832  EE20 F002          	lfsr	2,2
  6161   001836  5003               	movf	color_processor_hard@calibrated^0,w,c
  6162   001838  26D9               	addwf	fsr2l,f,c
  6163   00183A  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6164   00183C  22DA               	addwfc	fsr2h,f,c
  6165   00183E  CFDE F013          	movff	postinc2,color_processor_hard@cr
  6166   001842  CFDD F014          	movff	postdec2,color_processor_hard@cr+1
  6167                           
  6168                           ;../color.c: 161:         unsigned int cg = calibrated[4*i+2];
  6169   001846  EE20 F004          	lfsr	2,4
  6170   00184A  5003               	movf	color_processor_hard@calibrated^0,w,c
  6171   00184C  26D9               	addwf	fsr2l,f,c
  6172   00184E  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6173   001850  22DA               	addwfc	fsr2h,f,c
  6174   001852  CFDE F015          	movff	postinc2,color_processor_hard@cg
  6175   001856  CFDD F016          	movff	postdec2,color_processor_hard@cg+1
  6176                           
  6177                           ;../color.c: 162:         unsigned int cb = calibrated[4*i+3];
  6178   00185A  EE20 F006          	lfsr	2,6
  6179   00185E  5003               	movf	color_processor_hard@calibrated^0,w,c
  6180   001860  26D9               	addwf	fsr2l,f,c
  6181   001862  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6182   001864  22DA               	addwfc	fsr2h,f,c
  6183   001866  CFDE F017          	movff	postinc2,color_processor_hard@cb
  6184   00186A  CFDD F018          	movff	postdec2,color_processor_hard@cb+1
  6185   00186E                     
  6186                           ;../color.c: 164:         _Bool condition_r = r>cr-20 && r<cr+20;
  6187   00186E  0E00               	movlw	0
  6188   001870  6E0A               	movwf	_color_processor_hard$370^0,c
  6189   001872  0EEC               	movlw	236
  6190   001874  2413               	addwf	color_processor_hard@cr^0,w,c
  6191   001876  6E05               	movwf	??_color_processor_hard^0,c
  6192   001878  0EFF               	movlw	255
  6193   00187A  2014               	addwfc	(color_processor_hard@cr+1)^0,w,c
  6194   00187C  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6195   00187E  500D               	movf	color_processor_hard@r^0,w,c
  6196   001880  5C05               	subwf	??_color_processor_hard^0,w,c
  6197   001882  500E               	movf	(color_processor_hard@r+1)^0,w,c
  6198   001884  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6199   001886  B0D8               	btfsc	status,0,c
  6200   001888  EF48  F00C         	goto	u1571
  6201   00188C  EF4A  F00C         	goto	u1570
  6202   001890                     u1571:
  6203   001890  EF5D  F00C         	goto	l64
  6204   001894                     u1570:
  6205   001894  0E14               	movlw	20
  6206   001896  2413               	addwf	color_processor_hard@cr^0,w,c
  6207   001898  6E05               	movwf	??_color_processor_hard^0,c
  6208   00189A  0E00               	movlw	0
  6209   00189C  2014               	addwfc	(color_processor_hard@cr+1)^0,w,c
  6210   00189E  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6211   0018A0  5005               	movf	??_color_processor_hard^0,w,c
  6212   0018A2  5C0D               	subwf	color_processor_hard@r^0,w,c
  6213   0018A4  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6214   0018A6  580E               	subwfb	(color_processor_hard@r+1)^0,w,c
  6215   0018A8  B0D8               	btfsc	status,0,c
  6216   0018AA  EF59  F00C         	goto	u1581
  6217   0018AE  EF5B  F00C         	goto	u1580
  6218   0018B2                     u1581:
  6219   0018B2  EF5D  F00C         	goto	l64
  6220   0018B6                     u1580:
  6221   0018B6  0E01               	movlw	1
  6222   0018B8  6E0A               	movwf	_color_processor_hard$370^0,c
  6223   0018BA                     l64:
  6224   0018BA  500A               	movf	_color_processor_hard$370^0,w,c
  6225   0018BC  A4D8               	btfss	status,2,c
  6226   0018BE  EF63  F00C         	goto	u1591
  6227   0018C2  EF66  F00C         	goto	u1590
  6228   0018C6                     u1591:
  6229   0018C6  0E01               	movlw	1
  6230   0018C8  EF67  F00C         	goto	u1600
  6231   0018CC                     u1590:
  6232   0018CC  0E00               	movlw	0
  6233   0018CE                     u1600:
  6234   0018CE  6E07               	movwf	color_processor_hard@condition_r^0,c
  6235                           
  6236                           ;../color.c: 165:         _Bool condition_g = b>cb-20 && b<cb+20;
  6237   0018D0  0E00               	movlw	0
  6238   0018D2  6E0B               	movwf	_color_processor_hard$372^0,c
  6239   0018D4  0EEC               	movlw	236
  6240   0018D6  2417               	addwf	color_processor_hard@cb^0,w,c
  6241   0018D8  6E05               	movwf	??_color_processor_hard^0,c
  6242   0018DA  0EFF               	movlw	255
  6243   0018DC  2018               	addwfc	(color_processor_hard@cb+1)^0,w,c
  6244   0018DE  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6245   0018E0  5011               	movf	color_processor_hard@b^0,w,c
  6246   0018E2  5C05               	subwf	??_color_processor_hard^0,w,c
  6247   0018E4  5012               	movf	(color_processor_hard@b+1)^0,w,c
  6248   0018E6  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6249   0018E8  B0D8               	btfsc	status,0,c
  6250   0018EA  EF79  F00C         	goto	u1611
  6251   0018EE  EF7B  F00C         	goto	u1610
  6252   0018F2                     u1611:
  6253   0018F2  EF8E  F00C         	goto	l66
  6254   0018F6                     u1610:
  6255   0018F6  0E14               	movlw	20
  6256   0018F8  2417               	addwf	color_processor_hard@cb^0,w,c
  6257   0018FA  6E05               	movwf	??_color_processor_hard^0,c
  6258   0018FC  0E00               	movlw	0
  6259   0018FE  2018               	addwfc	(color_processor_hard@cb+1)^0,w,c
  6260   001900  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6261   001902  5005               	movf	??_color_processor_hard^0,w,c
  6262   001904  5C11               	subwf	color_processor_hard@b^0,w,c
  6263   001906  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6264   001908  5812               	subwfb	(color_processor_hard@b+1)^0,w,c
  6265   00190A  B0D8               	btfsc	status,0,c
  6266   00190C  EF8A  F00C         	goto	u1621
  6267   001910  EF8C  F00C         	goto	u1620
  6268   001914                     u1621:
  6269   001914  EF8E  F00C         	goto	l66
  6270   001918                     u1620:
  6271   001918  0E01               	movlw	1
  6272   00191A  6E0B               	movwf	_color_processor_hard$372^0,c
  6273   00191C                     l66:
  6274   00191C  500B               	movf	_color_processor_hard$372^0,w,c
  6275   00191E  A4D8               	btfss	status,2,c
  6276   001920  EF94  F00C         	goto	u1631
  6277   001924  EF97  F00C         	goto	u1630
  6278   001928                     u1631:
  6279   001928  0E01               	movlw	1
  6280   00192A  EF98  F00C         	goto	u1640
  6281   00192E                     u1630:
  6282   00192E  0E00               	movlw	0
  6283   001930                     u1640:
  6284   001930  6E08               	movwf	color_processor_hard@condition_g^0,c
  6285                           
  6286                           ;../color.c: 166:         _Bool condition_b = g>cg-20 && g<cg+20;
  6287   001932  0E00               	movlw	0
  6288   001934  6E0C               	movwf	_color_processor_hard$374^0,c
  6289   001936  0EEC               	movlw	236
  6290   001938  2415               	addwf	color_processor_hard@cg^0,w,c
  6291   00193A  6E05               	movwf	??_color_processor_hard^0,c
  6292   00193C  0EFF               	movlw	255
  6293   00193E  2016               	addwfc	(color_processor_hard@cg+1)^0,w,c
  6294   001940  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6295   001942  500F               	movf	color_processor_hard@g^0,w,c
  6296   001944  5C05               	subwf	??_color_processor_hard^0,w,c
  6297   001946  5010               	movf	(color_processor_hard@g+1)^0,w,c
  6298   001948  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6299   00194A  B0D8               	btfsc	status,0,c
  6300   00194C  EFAA  F00C         	goto	u1651
  6301   001950  EFAC  F00C         	goto	u1650
  6302   001954                     u1651:
  6303   001954  EFBF  F00C         	goto	l68
  6304   001958                     u1650:
  6305   001958  0E14               	movlw	20
  6306   00195A  2415               	addwf	color_processor_hard@cg^0,w,c
  6307   00195C  6E05               	movwf	??_color_processor_hard^0,c
  6308   00195E  0E00               	movlw	0
  6309   001960  2016               	addwfc	(color_processor_hard@cg+1)^0,w,c
  6310   001962  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6311   001964  5005               	movf	??_color_processor_hard^0,w,c
  6312   001966  5C0F               	subwf	color_processor_hard@g^0,w,c
  6313   001968  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6314   00196A  5810               	subwfb	(color_processor_hard@g+1)^0,w,c
  6315   00196C  B0D8               	btfsc	status,0,c
  6316   00196E  EFBB  F00C         	goto	u1661
  6317   001972  EFBD  F00C         	goto	u1660
  6318   001976                     u1661:
  6319   001976  EFBF  F00C         	goto	l68
  6320   00197A                     u1660:
  6321   00197A  0E01               	movlw	1
  6322   00197C  6E0C               	movwf	_color_processor_hard$374^0,c
  6323   00197E                     l68:
  6324   00197E  500C               	movf	_color_processor_hard$374^0,w,c
  6325   001980  A4D8               	btfss	status,2,c
  6326   001982  EFC5  F00C         	goto	u1671
  6327   001986  EFC8  F00C         	goto	u1670
  6328   00198A                     u1671:
  6329   00198A  0E01               	movlw	1
  6330   00198C  EFC9  F00C         	goto	u1680
  6331   001990                     u1670:
  6332   001990  0E00               	movlw	0
  6333   001992                     u1680:
  6334   001992  6E09               	movwf	color_processor_hard@condition_b^0,c
  6335                           
  6336                           ;../color.c: 168:         if (condition_r && condition_g && condition_b){
  6337   001994  5007               	movf	color_processor_hard@condition_r^0,w,c
  6338   001996  B4D8               	btfsc	status,2,c
  6339   001998  EFD0  F00C         	goto	u1691
  6340   00199C  EFD2  F00C         	goto	u1690
  6341   0019A0                     u1691:
  6342   0019A0  EFE8  F00C         	goto	l2867
  6343   0019A4                     u1690:
  6344   0019A4  5008               	movf	color_processor_hard@condition_g^0,w,c
  6345   0019A6  B4D8               	btfsc	status,2,c
  6346   0019A8  EFD8  F00C         	goto	u1701
  6347   0019AC  EFDA  F00C         	goto	u1700
  6348   0019B0                     u1701:
  6349   0019B0  EFE8  F00C         	goto	l2867
  6350   0019B4                     u1700:
  6351   0019B4  5009               	movf	color_processor_hard@condition_b^0,w,c
  6352   0019B6  B4D8               	btfsc	status,2,c
  6353   0019B8  EFE0  F00C         	goto	u1711
  6354   0019BC  EFE2  F00C         	goto	u1710
  6355   0019C0                     u1711:
  6356   0019C0  EFE8  F00C         	goto	l2867
  6357   0019C4                     u1710:
  6358   0019C4                     
  6359                           ;../color.c: 169:             return i+1;
  6360   0019C4  0E00               	movlw	0
  6361   0019C6  6E02               	movwf	(?_color_processor_hard+1)^0,c
  6362   0019C8  0E01               	movlw	1
  6363   0019CA  6E01               	movwf	?_color_processor_hard^0,c
  6364   0019CC  EFEC  F00C         	goto	l70
  6365   0019D0                     l2867:
  6366   0019D0  0E00               	movlw	0
  6367   0019D2  6E02               	movwf	(?_color_processor_hard+1)^0,c
  6368   0019D4  0E00               	movlw	0
  6369   0019D6  6E01               	movwf	?_color_processor_hard^0,c
  6370   0019D8                     l70:
  6371   0019D8  0012               	return		;funcret
  6372   0019DA                     __end_of_color_processor_hard:
  6373                           	callstack 0
  6374                           
  6375 ;; *************** function _color_processor_easy *****************
  6376 ;; Defined at:
  6377 ;;		line 134 in file "../color.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  6380 ;;		 -> main@RGB_recorded(8), 
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;  b               2    8[COMRAM] unsigned int 
  6383 ;;  a               2    6[COMRAM] unsigned int 
  6384 ;;  c               2    4[COMRAM] unsigned int 
  6385 ;;  color           2    2[COMRAM] unsigned int 
  6386 ;; Return value:  Size  Location     Type
  6387 ;;                  2    0[COMRAM] unsigned int 
  6388 ;; Registers used:
  6389 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6395 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6396 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6398 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6399 ;;Total ram usage:       10 bytes
  6400 ;; Hardware stack levels used: 1
  6401 ;; Hardware stack levels required when called: 1
  6402 ;; This function calls:
  6403 ;;		Nothing
  6404 ;; This function is called by:
  6405 ;;		_main
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           	psect	text37
  6410   002186                     __ptext37:
  6411                           	callstack 0
  6412   002186                     _color_processor_easy:
  6413                           	callstack 29
  6414   002186                     
  6415                           ;../color.c: 134: unsigned int color_processor_easy(struct RGB_val *rgb);../color.c: 135
      +                          : {;../color.c: 136:     unsigned int a = rgb->R;
  6416   002186  EE20 F002          	lfsr	2,2
  6417   00218A  5001               	movf	color_processor_easy@rgb^0,w,c
  6418   00218C  26D9               	addwf	fsr2l,f,c
  6419   00218E  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6420   002190  22DA               	addwfc	fsr2h,f,c
  6421   002192  CFDE F007          	movff	postinc2,color_processor_easy@a
  6422   002196  CFDD F008          	movff	postdec2,color_processor_easy@a+1
  6423                           
  6424                           ;../color.c: 137:     unsigned int b = rgb->G;
  6425   00219A  EE20 F004          	lfsr	2,4
  6426   00219E  5001               	movf	color_processor_easy@rgb^0,w,c
  6427   0021A0  26D9               	addwf	fsr2l,f,c
  6428   0021A2  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6429   0021A4  22DA               	addwfc	fsr2h,f,c
  6430   0021A6  CFDE F009          	movff	postinc2,color_processor_easy@b
  6431   0021AA  CFDD F00A          	movff	postdec2,color_processor_easy@b+1
  6432                           
  6433                           ;../color.c: 138:     unsigned int c = rgb->B;
  6434   0021AE  EE20 F006          	lfsr	2,6
  6435   0021B2  5001               	movf	color_processor_easy@rgb^0,w,c
  6436   0021B4  26D9               	addwf	fsr2l,f,c
  6437   0021B6  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6438   0021B8  22DA               	addwfc	fsr2h,f,c
  6439   0021BA  CFDE F005          	movff	postinc2,color_processor_easy@c
  6440   0021BE  CFDD F006          	movff	postdec2,color_processor_easy@c+1
  6441   0021C2                     
  6442                           ;../color.c: 139:     unsigned int color;;../color.c: 140:     if (a>=b & a>=c){
  6443   0021C2  5009               	movf	color_processor_easy@b^0,w,c
  6444   0021C4  5C07               	subwf	color_processor_easy@a^0,w,c
  6445   0021C6  500A               	movf	(color_processor_easy@b+1)^0,w,c
  6446   0021C8  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6447   0021CA  A0D8               	btfss	status,0,c
  6448   0021CC  EFEA  F010         	goto	u1531
  6449   0021D0  EFEC  F010         	goto	u1530
  6450   0021D4                     u1531:
  6451   0021D4  EFFD  F010         	goto	l2815
  6452   0021D8                     u1530:
  6453   0021D8  5005               	movf	color_processor_easy@c^0,w,c
  6454   0021DA  5C07               	subwf	color_processor_easy@a^0,w,c
  6455   0021DC  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6456   0021DE  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6457   0021E0  A0D8               	btfss	status,0,c
  6458   0021E2  EFF5  F010         	goto	u1541
  6459   0021E6  EFF7  F010         	goto	u1540
  6460   0021EA                     u1541:
  6461   0021EA  EFFD  F010         	goto	l2815
  6462   0021EE                     u1540:
  6463   0021EE                     
  6464                           ;../color.c: 141:         color=1;
  6465   0021EE  0E00               	movlw	0
  6466   0021F0  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6467   0021F2  0E01               	movlw	1
  6468   0021F4  6E03               	movwf	color_processor_easy@color^0,c
  6469                           
  6470                           ;../color.c: 142:     }
  6471   0021F6  EF1D  F011         	goto	l2823
  6472   0021FA                     l2815:
  6473   0021FA  5007               	movf	color_processor_easy@a^0,w,c
  6474   0021FC  5C09               	subwf	color_processor_easy@b^0,w,c
  6475   0021FE  5008               	movf	(color_processor_easy@a+1)^0,w,c
  6476   002200  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6477   002202  A0D8               	btfss	status,0,c
  6478   002204  EF06  F011         	goto	u1551
  6479   002208  EF08  F011         	goto	u1550
  6480   00220C                     u1551:
  6481   00220C  EF19  F011         	goto	l2821
  6482   002210                     u1550:
  6483   002210  5005               	movf	color_processor_easy@c^0,w,c
  6484   002212  5C09               	subwf	color_processor_easy@b^0,w,c
  6485   002214  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6486   002216  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6487   002218  A0D8               	btfss	status,0,c
  6488   00221A  EF11  F011         	goto	u1561
  6489   00221E  EF13  F011         	goto	u1560
  6490   002222                     u1561:
  6491   002222  EF19  F011         	goto	l2821
  6492   002226                     u1560:
  6493   002226                     
  6494                           ;../color.c: 144:         color=2;
  6495   002226  0E00               	movlw	0
  6496   002228  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6497   00222A  0E02               	movlw	2
  6498   00222C  6E03               	movwf	color_processor_easy@color^0,c
  6499                           
  6500                           ;../color.c: 145:     }
  6501   00222E  EF1D  F011         	goto	l2823
  6502   002232                     l2821:
  6503                           
  6504                           ;../color.c: 147:         color=3;
  6505   002232  0E00               	movlw	0
  6506   002234  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6507   002236  0E03               	movlw	3
  6508   002238  6E03               	movwf	color_processor_easy@color^0,c
  6509   00223A                     l2823:
  6510                           
  6511                           ;../color.c: 149:     return color;
  6512   00223A  C003  F001         	movff	color_processor_easy@color,?_color_processor_easy
  6513   00223E  C004  F002         	movff	color_processor_easy@color+1,?_color_processor_easy+1
  6514   002242  0012               	return		;funcret
  6515   002244                     __end_of_color_processor_easy:
  6516                           	callstack 0
  6517                           
  6518 ;; *************** function _color_click_init *****************
  6519 ;; Defined at:
  6520 ;;		line 6 in file "../color.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;		None
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;		None
  6525 ;; Return value:  Size  Location     Type
  6526 ;;                  1    wreg      void 
  6527 ;; Registers used:
  6528 ;;		wreg, status,2, status,0, cstack
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : 0/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6536 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6537 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6538 ;;Total ram usage:        1 bytes
  6539 ;; Hardware stack levels used: 1
  6540 ;; Hardware stack levels required when called: 4
  6541 ;; This function calls:
  6542 ;;		_I2C_2_Master_Init
  6543 ;;		_color_writetoaddr
  6544 ;; This function is called by:
  6545 ;;		_main
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           	psect	text38
  6550   0028EE                     __ptext38:
  6551                           	callstack 0
  6552   0028EE                     _color_click_init:
  6553                           	callstack 26
  6554   0028EE                     
  6555                           ;../color.c: 9:     I2C_2_Master_Init();
  6556   0028EE  EC47  F016         	call	_I2C_2_Master_Init	;wreg free
  6557   0028F2                     
  6558                           ;../color.c: 12:   color_writetoaddr(0x00, 0x01);
  6559   0028F2  0E01               	movlw	1
  6560   0028F4  6E03               	movwf	color_writetoaddr@value^0,c
  6561   0028F6  0E00               	movlw	0
  6562   0028F8  EC83  F016         	call	_color_writetoaddr
  6563   0028FC                     
  6564                           ;../color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6565   0028FC  0E3F               	movlw	63
  6566   0028FE  6E05               	movwf	??_color_click_init^0,c
  6567   002900  0E55               	movlw	85
  6568   002902                     u2147:
  6569   002902  2EE8               	decfsz	wreg,f,c
  6570   002904  D7FE               	bra	u2147
  6571   002906  2E05               	decfsz	??_color_click_init^0,f,c
  6572   002908  D7FC               	bra	u2147
  6573   00290A  F000               	nop	
  6574   00290C                     
  6575                           ;../color.c: 16:  color_writetoaddr(0x00, 0x03);
  6576   00290C  0E03               	movlw	3
  6577   00290E  6E03               	movwf	color_writetoaddr@value^0,c
  6578   002910  0E00               	movlw	0
  6579   002912  EC83  F016         	call	_color_writetoaddr
  6580   002916                     
  6581                           ;../color.c: 19:  color_writetoaddr(0x01, 0xD5);
  6582   002916  0ED5               	movlw	213
  6583   002918  6E03               	movwf	color_writetoaddr@value^0,c
  6584   00291A  0E01               	movlw	1
  6585   00291C  EC83  F016         	call	_color_writetoaddr
  6586   002920                     
  6587                           ;../color.c: 22:     TRISHbits.TRISH1 = 0;
  6588   002920  9288               	bcf	136,1,c	;volatile
  6589   002922                     
  6590                           ;../color.c: 23:     TRISDbits.TRISD3 = 0;
  6591   002922  9684               	bcf	132,3,c	;volatile
  6592   002924                     
  6593                           ;../color.c: 24:     TRISDbits.TRISD4 = 0;
  6594   002924  9884               	bcf	132,4,c	;volatile
  6595   002926                     
  6596                           ;../color.c: 25:     TRISHbits.TRISH0 = 0;
  6597   002926  9088               	bcf	136,0,c	;volatile
  6598   002928                     
  6599                           ;../color.c: 26:     TRISFbits.TRISF0 = 0;
  6600   002928  9086               	bcf	134,0,c	;volatile
  6601   00292A                     
  6602                           ;../color.c: 28:     LATHbits.LATH1 = 1;
  6603   00292A  8280               	bsf	128,1,c	;volatile
  6604   00292C                     
  6605                           ;../color.c: 29:     LATDbits.LATD3 = 1;
  6606   00292C  867C               	bsf	124,3,c	;volatile
  6607   00292E                     
  6608                           ;../color.c: 30:     LATDbits.LATD4 = 0;
  6609   00292E  987C               	bcf	124,4,c	;volatile
  6610   002930                     
  6611                           ;../color.c: 31:     LATHbits.LATH0 = 0;
  6612   002930  9080               	bcf	128,0,c	;volatile
  6613   002932                     
  6614                           ;../color.c: 32:     LATFbits.LATF0 = 0;
  6615   002932  907E               	bcf	126,0,c	;volatile
  6616   002934                     
  6617                           ;../color.c: 35:     LATDbits.LATD7=0;
  6618   002934  9E7C               	bcf	124,7,c	;volatile
  6619   002936                     
  6620                           ;../color.c: 36:     LATHbits.LATH3=0;
  6621   002936  9680               	bcf	128,3,c	;volatile
  6622   002938                     
  6623                           ;../color.c: 37:     TRISDbits.TRISD7=0;
  6624   002938  9E84               	bcf	132,7,c	;volatile
  6625   00293A                     
  6626                           ;../color.c: 38:     TRISHbits.TRISH3=0;
  6627   00293A  9688               	bcf	136,3,c	;volatile
  6628   00293C                     
  6629                           ;../color.c: 40:     TRISFbits.TRISF2=1;
  6630   00293C  8486               	bsf	134,2,c	;volatile
  6631   00293E                     
  6632                           ;../color.c: 41:     ANSELFbits.ANSELF2=0;
  6633   00293E  010E               	movlb	14	; () banked
  6634   002940  95B4               	bcf	180,2,b	;volatile
  6635   002942                     
  6636                           ; BSR set to: 14
  6637                           ;../color.c: 42:     TRISFbits.TRISF3=1;
  6638   002942  8686               	bsf	134,3,c	;volatile
  6639   002944                     
  6640                           ; BSR set to: 14
  6641                           ;../color.c: 43:     ANSELFbits.ANSELF3=0;
  6642   002944  97B4               	bcf	180,3,b	;volatile
  6643   002946                     
  6644                           ; BSR set to: 14
  6645   002946  0012               	return		;funcret
  6646   002948                     __end_of_color_click_init:
  6647                           	callstack 0
  6648                           
  6649 ;; *************** function _color_writetoaddr *****************
  6650 ;; Defined at:
  6651 ;;		line 46 in file "../color.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;  address         1    wreg     unsigned char 
  6654 ;;  value           1    2[COMRAM] unsigned char 
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;  address         1    3[COMRAM] unsigned char 
  6657 ;; Return value:  Size  Location     Type
  6658 ;;                  1    wreg      void 
  6659 ;; Registers used:
  6660 ;;		wreg, status,2, status,0, cstack
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6666 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6667 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6669 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6670 ;;Total ram usage:        2 bytes
  6671 ;; Hardware stack levels used: 1
  6672 ;; Hardware stack levels required when called: 3
  6673 ;; This function calls:
  6674 ;;		_I2C_2_Master_Start
  6675 ;;		_I2C_2_Master_Stop
  6676 ;;		_I2C_2_Master_Write
  6677 ;; This function is called by:
  6678 ;;		_color_click_init
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           	psect	text39
  6683   002D06                     __ptext39:
  6684                           	callstack 0
  6685   002D06                     _color_writetoaddr:
  6686                           	callstack 26
  6687                           
  6688                           ; BSR set to: 14
  6689                           ;incstack = 0
  6690                           ;color_writetoaddr@address stored from wreg
  6691   002D06  6E04               	movwf	color_writetoaddr@address^0,c
  6692   002D08                     
  6693                           ;../color.c: 46: void color_writetoaddr(char address, char value);../color.c: 47: {;../c
      +                          olor.c: 48:     I2C_2_Master_Start();
  6694   002D08  ECD9  F016         	call	_I2C_2_Master_Start	;wreg free
  6695                           
  6696                           ;../color.c: 49:     I2C_2_Master_Write(0x52 | 0x00);
  6697   002D0C  0E52               	movlw	82
  6698   002D0E  ECC9  F016         	call	_I2C_2_Master_Write
  6699                           
  6700                           ;../color.c: 50:     I2C_2_Master_Write(0x80 | address);
  6701   002D12  5004               	movf	color_writetoaddr@address^0,w,c
  6702   002D14  0980               	iorlw	128
  6703   002D16  ECC9  F016         	call	_I2C_2_Master_Write
  6704                           
  6705                           ;../color.c: 51:     I2C_2_Master_Write(value);
  6706   002D1A  5003               	movf	color_writetoaddr@value^0,w,c
  6707   002D1C  ECC9  F016         	call	_I2C_2_Master_Write
  6708                           
  6709                           ;../color.c: 52:     I2C_2_Master_Stop();
  6710   002D20  ECD4  F016         	call	_I2C_2_Master_Stop	;wreg free
  6711   002D24  0012               	return		;funcret
  6712   002D26                     __end_of_color_writetoaddr:
  6713                           	callstack 0
  6714                           
  6715 ;; *************** function _I2C_2_Master_Write *****************
  6716 ;; Defined at:
  6717 ;;		line 45 in file "../i2c.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;  data_byte       1    wreg     unsigned char 
  6720 ;; Auto vars:     Size  Location     Type
  6721 ;;  data_byte       1    1[COMRAM] unsigned char 
  6722 ;; Return value:  Size  Location     Type
  6723 ;;                  1    wreg      void 
  6724 ;; Registers used:
  6725 ;;		wreg, status,2, status,0, cstack
  6726 ;; Tracked objects:
  6727 ;;		On entry : 0/0
  6728 ;;		On exit  : 0/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6732 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6734 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6735 ;;Total ram usage:        1 bytes
  6736 ;; Hardware stack levels used: 1
  6737 ;; Hardware stack levels required when called: 2
  6738 ;; This function calls:
  6739 ;;		_I2C_2_Master_Idle
  6740 ;; This function is called by:
  6741 ;;		_color_writetoaddr
  6742 ;;		_color_read_Luminosity
  6743 ;;		_color_read_Red
  6744 ;;		_color_read_Green
  6745 ;;		_color_read_Blue
  6746 ;; This function uses a non-reentrant model
  6747 ;;
  6748                           
  6749                           	psect	text40
  6750   002D92                     __ptext40:
  6751                           	callstack 0
  6752   002D92                     _I2C_2_Master_Write:
  6753                           	callstack 26
  6754                           
  6755                           ;incstack = 0
  6756                           ;I2C_2_Master_Write@data_byte stored from wreg
  6757   002D92  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6758   002D94                     
  6759                           ;../i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);../i2c.c: 46: {;../i2c.c
      +                          : 47:   I2C_2_Master_Idle();
  6760   002D94  EC5C  F016         	call	_I2C_2_Master_Idle	;wreg free
  6761   002D98                     
  6762                           ;../i2c.c: 48:   SSP2BUF = data_byte;
  6763   002D98  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6764   002D9C  0012               	return		;funcret
  6765   002D9E                     __end_of_I2C_2_Master_Write:
  6766                           	callstack 0
  6767                           
  6768 ;; *************** function _I2C_2_Master_Stop *****************
  6769 ;; Defined at:
  6770 ;;		line 39 in file "../i2c.c"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;		None
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;		None
  6775 ;; Return value:  Size  Location     Type
  6776 ;;                  1    wreg      void 
  6777 ;; Registers used:
  6778 ;;		wreg, status,2, status,0, cstack
  6779 ;; Tracked objects:
  6780 ;;		On entry : 0/0
  6781 ;;		On exit  : 0/0
  6782 ;;		Unchanged: 0/0
  6783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6788 ;;Total ram usage:        0 bytes
  6789 ;; Hardware stack levels used: 1
  6790 ;; Hardware stack levels required when called: 2
  6791 ;; This function calls:
  6792 ;;		_I2C_2_Master_Idle
  6793 ;; This function is called by:
  6794 ;;		_color_writetoaddr
  6795 ;;		_color_read_Luminosity
  6796 ;;		_color_read_Red
  6797 ;;		_color_read_Green
  6798 ;;		_color_read_Blue
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           	psect	text41
  6803   002DA8                     __ptext41:
  6804                           	callstack 0
  6805   002DA8                     _I2C_2_Master_Stop:
  6806                           	callstack 26
  6807   002DA8                     
  6808                           ;../i2c.c: 41:   I2C_2_Master_Idle();
  6809   002DA8  EC5C  F016         	call	_I2C_2_Master_Idle	;wreg free
  6810   002DAC                     
  6811                           ;../i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6812   002DAC  010E               	movlb	14	; () banked
  6813   002DAE  85DA               	bsf	218,2,b	;volatile
  6814   002DB0                     
  6815                           ; BSR set to: 14
  6816   002DB0  0012               	return		;funcret
  6817   002DB2                     __end_of_I2C_2_Master_Stop:
  6818                           	callstack 0
  6819                           
  6820 ;; *************** function _I2C_2_Master_Start *****************
  6821 ;; Defined at:
  6822 ;;		line 27 in file "../i2c.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;		None
  6825 ;; Auto vars:     Size  Location     Type
  6826 ;;		None
  6827 ;; Return value:  Size  Location     Type
  6828 ;;                  1    wreg      void 
  6829 ;; Registers used:
  6830 ;;		wreg, status,2, status,0, cstack
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 0/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6840 ;;Total ram usage:        0 bytes
  6841 ;; Hardware stack levels used: 1
  6842 ;; Hardware stack levels required when called: 2
  6843 ;; This function calls:
  6844 ;;		_I2C_2_Master_Idle
  6845 ;; This function is called by:
  6846 ;;		_color_writetoaddr
  6847 ;;		_color_read_Luminosity
  6848 ;;		_color_read_Red
  6849 ;;		_color_read_Green
  6850 ;;		_color_read_Blue
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           	psect	text42
  6855   002DB2                     __ptext42:
  6856                           	callstack 0
  6857   002DB2                     _I2C_2_Master_Start:
  6858                           	callstack 26
  6859   002DB2                     
  6860                           ;../i2c.c: 29:   I2C_2_Master_Idle();
  6861   002DB2  EC5C  F016         	call	_I2C_2_Master_Idle	;wreg free
  6862   002DB6                     
  6863                           ;../i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6864   002DB6  010E               	movlb	14	; () banked
  6865   002DB8  81DA               	bsf	218,0,b	;volatile
  6866   002DBA                     
  6867                           ; BSR set to: 14
  6868   002DBA  0012               	return		;funcret
  6869   002DBC                     __end_of_I2C_2_Master_Start:
  6870                           	callstack 0
  6871                           
  6872 ;; *************** function _I2C_2_Master_Idle *****************
  6873 ;; Defined at:
  6874 ;;		line 22 in file "../i2c.c"
  6875 ;; Parameters:    Size  Location     Type
  6876 ;;		None
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;		None
  6879 ;; Return value:  Size  Location     Type
  6880 ;;                  1    wreg      void 
  6881 ;; Registers used:
  6882 ;;		wreg, status,2, status,0
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6890 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6891 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6892 ;;Total ram usage:        1 bytes
  6893 ;; Hardware stack levels used: 1
  6894 ;; Hardware stack levels required when called: 1
  6895 ;; This function calls:
  6896 ;;		Nothing
  6897 ;; This function is called by:
  6898 ;;		_I2C_2_Master_Start
  6899 ;;		_I2C_2_Master_RepStart
  6900 ;;		_I2C_2_Master_Stop
  6901 ;;		_I2C_2_Master_Write
  6902 ;;		_I2C_2_Master_Read
  6903 ;; This function uses a non-reentrant model
  6904 ;;
  6905                           
  6906                           	psect	text43
  6907   002CB8                     __ptext43:
  6908                           	callstack 0
  6909   002CB8                     _I2C_2_Master_Idle:
  6910                           	callstack 26
  6911   002CB8                     l101:
  6912   002CB8  010E               	movlb	14	; () banked
  6913   002CBA  B5D8               	btfsc	216,2,b	;volatile
  6914   002CBC  EF62  F016         	goto	u1161
  6915   002CC0  EF64  F016         	goto	u1160
  6916   002CC4                     u1161:
  6917   002CC4  EF5C  F016         	goto	l101
  6918   002CC8                     u1160:
  6919   002CC8                     
  6920                           ; BSR set to: 14
  6921   002CC8  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6922   002CCC  0E1F               	movlw	31
  6923   002CCE  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  6924   002CD0  A4D8               	btfss	status,2,c
  6925   002CD2  EF6D  F016         	goto	u1171
  6926   002CD6  EF6F  F016         	goto	u1170
  6927   002CDA                     u1171:
  6928   002CDA  EF5C  F016         	goto	l101
  6929   002CDE                     u1170:
  6930   002CDE                     
  6931                           ; BSR set to: 14
  6932   002CDE  0012               	return		;funcret
  6933   002CE0                     __end_of_I2C_2_Master_Idle:
  6934                           	callstack 0
  6935                           
  6936 ;; *************** function _I2C_2_Master_Init *****************
  6937 ;; Defined at:
  6938 ;;		line 4 in file "../i2c.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      void 
  6945 ;; Registers used:
  6946 ;;		wreg, status,2
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6956 ;;Total ram usage:        0 bytes
  6957 ;; Hardware stack levels used: 1
  6958 ;; Hardware stack levels required when called: 1
  6959 ;; This function calls:
  6960 ;;		Nothing
  6961 ;; This function is called by:
  6962 ;;		_color_click_init
  6963 ;;		_main
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           	psect	text44
  6968   002C8E                     __ptext44:
  6969                           	callstack 0
  6970   002C8E                     _I2C_2_Master_Init:
  6971                           	callstack 28
  6972   002C8E                     
  6973                           ;../i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6974   002C8E  010E               	movlb	14	; () banked
  6975   002C90  51D9               	movf	217,w,b	;volatile
  6976   002C92  0BF0               	andlw	-16
  6977   002C94  0908               	iorlw	8
  6978   002C96  6FD9               	movwf	217,b	;volatile
  6979   002C98                     
  6980                           ; BSR set to: 14
  6981                           ;../i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6982   002C98  8BD9               	bsf	217,5,b	;volatile
  6983                           
  6984                           ;../i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6985   002C9A  0E9F               	movlw	159
  6986   002C9C  6FD6               	movwf	214,b	;volatile
  6987   002C9E                     
  6988                           ; BSR set to: 14
  6989                           ;../i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6990   002C9E  8A84               	bsf	132,5,c	;volatile
  6991   002CA0                     
  6992                           ; BSR set to: 14
  6993                           ;../i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6994   002CA0  8C84               	bsf	132,6,c	;volatile
  6995   002CA2                     
  6996                           ; BSR set to: 14
  6997                           ;../i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6998   002CA2  9BA7               	bcf	167,5,b	;volatile
  6999   002CA4                     
  7000                           ; BSR set to: 14
  7001                           ;../i2c.c: 15:   ANSELDbits.ANSELD6=0;
  7002   002CA4  9DA7               	bcf	167,6,b	;volatile
  7003                           
  7004                           ;../i2c.c: 16:   SSP2DATPPS=0x1D;
  7005   002CA6  0E1D               	movlw	29
  7006   002CA8  6F1D               	movwf	29,b	;volatile
  7007                           
  7008                           ;../i2c.c: 17:   SSP2CLKPPS=0x1E;
  7009   002CAA  0E1E               	movlw	30
  7010   002CAC  6F1C               	movwf	28,b	;volatile
  7011                           
  7012                           ;../i2c.c: 18:   RD5PPS=0x1C;
  7013   002CAE  0E1C               	movlw	28
  7014   002CB0  6F6F               	movwf	111,b	;volatile
  7015                           
  7016                           ;../i2c.c: 19:   RD6PPS=0x1B;
  7017   002CB2  0E1B               	movlw	27
  7018   002CB4  6F70               	movwf	112,b	;volatile
  7019   002CB6                     
  7020                           ; BSR set to: 14
  7021   002CB6  0012               	return		;funcret
  7022   002CB8                     __end_of_I2C_2_Master_Init:
  7023                           	callstack 0
  7024                           
  7025 ;; *************** function _Timer0_init *****************
  7026 ;; Defined at:
  7027 ;;		line 62 in file "../rc_servo.c"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;		None
  7030 ;; Auto vars:     Size  Location     Type
  7031 ;;		None
  7032 ;; Return value:  Size  Location     Type
  7033 ;;                  1    wreg      void 
  7034 ;; Registers used:
  7035 ;;		wreg, status,2
  7036 ;; Tracked objects:
  7037 ;;		On entry : 0/0
  7038 ;;		On exit  : 0/0
  7039 ;;		Unchanged: 0/0
  7040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7045 ;;Total ram usage:        0 bytes
  7046 ;; Hardware stack levels used: 1
  7047 ;; Hardware stack levels required when called: 1
  7048 ;; This function calls:
  7049 ;;		Nothing
  7050 ;; This function is called by:
  7051 ;;		_main
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text45
  7056   002D26                     __ptext45:
  7057                           	callstack 0
  7058   002D26                     _Timer0_init:
  7059                           	callstack 29
  7060   002D26                     
  7061                           ;../rc_servo.c: 64:     T0CON1bits.T0CS=0b010;
  7062   002D26  50D6               	movf	214,w,c	;volatile
  7063   002D28  0B1F               	andlw	-225
  7064   002D2A  0940               	iorlw	64
  7065   002D2C  6ED6               	movwf	214,c	;volatile
  7066   002D2E                     
  7067                           ;../rc_servo.c: 65:     T0CON1bits.T0ASYNC=1;
  7068   002D2E  88D6               	bsf	214,4,c	;volatile
  7069                           
  7070                           ;../rc_servo.c: 66:     T0CON1bits.T0CKPS=0b0111;
  7071   002D30  50D6               	movf	214,w,c	;volatile
  7072   002D32  0BF0               	andlw	-16
  7073   002D34  0907               	iorlw	7
  7074   002D36  6ED6               	movwf	214,c	;volatile
  7075   002D38                     
  7076                           ;../rc_servo.c: 68:     T0CON0bits.T016BIT=1;
  7077   002D38  88D5               	bsf	213,4,c	;volatile
  7078                           
  7079                           ;../rc_servo.c: 71:     TMR0H=(65535-2500)>>8;
  7080   002D3A  0EF6               	movlw	246
  7081   002D3C  6ED4               	movwf	212,c	;volatile
  7082                           
  7083                           ;../rc_servo.c: 72:     TMR0L=(unsigned char)(65535-2500);
  7084   002D3E  0E3B               	movlw	59
  7085   002D40  6ED3               	movwf	211,c	;volatile
  7086   002D42                     
  7087                           ;../rc_servo.c: 73:     T0CON0bits.T0EN=1;
  7088   002D42  8ED5               	bsf	213,7,c	;volatile
  7089   002D44  0012               	return		;funcret
  7090   002D46                     __end_of_Timer0_init:
  7091                           	callstack 0
  7092                           
  7093 ;; *************** function _Interrupts_init *****************
  7094 ;; Defined at:
  7095 ;;		line 8 in file "../rc_servo.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;		None
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;		None
  7100 ;; Return value:  Size  Location     Type
  7101 ;;                  1    wreg      void 
  7102 ;; Registers used:
  7103 ;;		None
  7104 ;; Tracked objects:
  7105 ;;		On entry : 0/0
  7106 ;;		On exit  : 0/0
  7107 ;;		Unchanged: 0/0
  7108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7113 ;;Total ram usage:        0 bytes
  7114 ;; Hardware stack levels used: 1
  7115 ;; Hardware stack levels required when called: 1
  7116 ;; This function calls:
  7117 ;;		Nothing
  7118 ;; This function is called by:
  7119 ;;		_main
  7120 ;; This function uses a non-reentrant model
  7121 ;;
  7122                           
  7123                           	psect	text46
  7124   002D7C                     __ptext46:
  7125                           	callstack 0
  7126   002D7C                     _Interrupts_init:
  7127                           	callstack 29
  7128   002D7C                     
  7129                           ;../rc_servo.c: 12:     INTCONbits.IPEN = 1;
  7130   002D7C  8AF2               	bsf	242,5,c	;volatile
  7131                           
  7132                           ;../rc_servo.c: 13:     INTCONbits.PEIE = 1;
  7133   002D7E  8CF2               	bsf	242,6,c	;volatile
  7134                           
  7135                           ;../rc_servo.c: 16:     PIE0bits.TMR0IE = 1;
  7136   002D80  010E               	movlb	14	; () banked
  7137   002D82  8B29               	bsf	41,5,b	;volatile
  7138                           
  7139                           ;../rc_servo.c: 17:     IPR0bits.TMR0IP = 1;
  7140   002D84  8B1F               	bsf	31,5,b	;volatile
  7141                           
  7142                           ;../rc_servo.c: 18:     PIR0bits.TMR0IF = 0;
  7143   002D86  9B33               	bcf	51,5,b	;volatile
  7144                           
  7145                           ;../rc_servo.c: 20:     PIE2bits.C1IE=1;
  7146   002D88  812B               	bsf	43,0,b	;volatile
  7147                           
  7148                           ;../rc_servo.c: 21:     IPR2bits.C1IP=0;
  7149   002D8A  9121               	bcf	33,0,b	;volatile
  7150                           
  7151                           ;../rc_servo.c: 22:     PIR2bits.C1IF=0;
  7152   002D8C  9135               	bcf	53,0,b	;volatile
  7153                           
  7154                           ;../rc_servo.c: 24:     INTCONbits.GIE = 1;
  7155   002D8E  8EF2               	bsf	242,7,c	;volatile
  7156   002D90                     
  7157                           ; BSR set to: 14
  7158   002D90  0012               	return		;funcret
  7159   002D92                     __end_of_Interrupts_init:
  7160                           	callstack 0
  7161                           
  7162 ;; *************** function _HighISR *****************
  7163 ;; Defined at:
  7164 ;;		line 31 in file "../rc_servo.c"
  7165 ;; Parameters:    Size  Location     Type
  7166 ;;		None
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;		None
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  1    wreg      void 
  7171 ;; Registers used:
  7172 ;;		wreg, status,2, status,0
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7182 ;;Total ram usage:        0 bytes
  7183 ;; Hardware stack levels used: 1
  7184 ;; This function calls:
  7185 ;;		Nothing
  7186 ;; This function is called by:
  7187 ;;		Interrupt level 2
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           	psect	intcode
  7192   000008                     __pintcode:
  7193                           	callstack 0
  7194   000008                     _HighISR:
  7195                           	callstack 22
  7196                           
  7197                           ; BSR set to: 14
  7198                           ;incstack = 0
  7199   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7200   00000A                     
  7201                           ;../rc_servo.c: 33:     if(PIR0bits.TMR0IF||!PORTFbits.RF2){
  7202   00000A  010E               	movlb	14	; () banked
  7203   00000C  BB33               	btfsc	51,5,b	;volatile
  7204   00000E  EF0B  F000         	goto	i2u186_41
  7205   000012  EF0D  F000         	goto	i2u186_40
  7206   000016                     i2u186_41:
  7207   000016  EF14  F000         	goto	i2l3181
  7208   00001A                     i2u186_40:
  7209   00001A                     
  7210                           ; BSR set to: 14
  7211   00001A  B48E               	btfsc	142,2,c	;volatile
  7212   00001C  EF12  F000         	goto	i2u187_41
  7213   000020  EF14  F000         	goto	i2u187_40
  7214   000024                     i2u187_41:
  7215   000024  EF1D  F000         	goto	i2l376
  7216   000028                     i2u187_40:
  7217   000028                     i2l3181:
  7218                           
  7219                           ; BSR set to: 14
  7220                           ;../rc_servo.c: 36:         time++;
  7221   000028  0101               	movlb	1	; () banked
  7222   00002A  4BF4               	infsnz	_time& (0+255),f,b
  7223   00002C  2BF5               	incf	(_time+1)& (0+255),f,b
  7224   00002E                     
  7225                           ; BSR set to: 1
  7226                           ;../rc_servo.c: 39:         TMR0L = 0b11011011;
  7227   00002E  0EDB               	movlw	219
  7228   000030  6ED3               	movwf	211,c	;volatile
  7229   000032                     
  7230                           ; BSR set to: 1
  7231                           ;../rc_servo.c: 40:         TMR0H = 0b00001011;
  7232   000032  0E0B               	movlw	11
  7233   000034  6ED4               	movwf	212,c	;volatile
  7234   000036                     
  7235                           ; BSR set to: 1
  7236                           ;../rc_servo.c: 42:         PIR0bits.TMR0IF=0;
  7237   000036  010E               	movlb	14	; () banked
  7238   000038  9B33               	bcf	51,5,b	;volatile
  7239   00003A                     i2l376:
  7240                           
  7241                           ; BSR set to: 14
  7242   00003A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7243   00003C  0011               	retfie		f
  7244   00003E                     __end_of_HighISR:
  7245                           	callstack 0
  7246                           
  7247                           	psect	rparam
  7248   000000                     
  7249                           	psect	temp
  7250   00005F                     btemp:
  7251                           	callstack 0
  7252   00005F                     	ds	1
  7253   000000                     int$flags	set	btemp
  7254   000000                     wtemp8	set	btemp+1
  7255   000000                     ttemp5	set	btemp+1
  7256   000000                     ttemp6	set	btemp+4
  7257   000000                     ttemp7	set	btemp+8
  7258                           
  7259                           	psect	idloc
  7260                           
  7261                           ;Config register IDLOC0 @ 0x200000
  7262                           ;	unspecified, using default values
  7263   200000                     	org	2097152
  7264   200000  0FFF               	dw	4095
  7265                           
  7266                           ;Config register IDLOC1 @ 0x200002
  7267                           ;	unspecified, using default values
  7268   200002                     	org	2097154
  7269   200002  0FFF               	dw	4095
  7270                           
  7271                           ;Config register IDLOC2 @ 0x200004
  7272                           ;	unspecified, using default values
  7273   200004                     	org	2097156
  7274   200004  0FFF               	dw	4095
  7275                           
  7276                           ;Config register IDLOC3 @ 0x200006
  7277                           ;	unspecified, using default values
  7278   200006                     	org	2097158
  7279   200006  0FFF               	dw	4095
  7280                           
  7281                           ;Config register IDLOC4 @ 0x200008
  7282                           ;	unspecified, using default values
  7283   200008                     	org	2097160
  7284   200008  0FFF               	dw	4095
  7285                           
  7286                           ;Config register IDLOC5 @ 0x20000A
  7287                           ;	unspecified, using default values
  7288   20000A                     	org	2097162
  7289   20000A  0FFF               	dw	4095
  7290                           
  7291                           ;Config register IDLOC6 @ 0x20000C
  7292                           ;	unspecified, using default values
  7293   20000C                     	org	2097164
  7294   20000C  0FFF               	dw	4095
  7295                           
  7296                           ;Config register IDLOC7 @ 0x20000E
  7297                           ;	unspecified, using default values
  7298   20000E                     	org	2097166
  7299   20000E  0FFF               	dw	4095
  7300                           
  7301                           	psect	config
  7302                           
  7303                           ;Config register CONFIG1L @ 0x300000
  7304                           ;	External Oscillator mode Selection bits
  7305                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7306                           ;	Power-up default value for COSC bits
  7307                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7308   300000                     	org	3145728
  7309   300000  AA                 	db	170
  7310                           
  7311                           ;Config register CONFIG1H @ 0x300001
  7312                           ;	unspecified, using default values
  7313                           ;	Clock Out Enable bit
  7314                           ;	CLKOUTEN = 0x1, unprogrammed default
  7315                           ;	Clock Switch Enable bit
  7316                           ;	CSWEN = 0x1, unprogrammed default
  7317                           ;	Fail-Safe Clock Monitor Enable bit
  7318                           ;	FCMEN = 0x1, unprogrammed default
  7319   300001                     	org	3145729
  7320   300001  FF                 	db	255
  7321                           
  7322                           ;Config register CONFIG2L @ 0x300002
  7323                           ;	unspecified, using default values
  7324                           ;	Master Clear Enable bit
  7325                           ;	MCLRE = 0x1, unprogrammed default
  7326                           ;	Power-up Timer Enable bit
  7327                           ;	PWRTE = 0x1, unprogrammed default
  7328                           ;	Low-power BOR enable bit
  7329                           ;	LPBOREN = 0x1, unprogrammed default
  7330                           ;	Brown-out Reset Enable bits
  7331                           ;	BOREN = 0x3, unprogrammed default
  7332   300002                     	org	3145730
  7333   300002  FF                 	db	255
  7334                           
  7335                           ;Config register CONFIG2H @ 0x300003
  7336                           ;	unspecified, using default values
  7337                           ;	Brown Out Reset Voltage selection bits
  7338                           ;	BORV = 0x3, unprogrammed default
  7339                           ;	ZCD Disable bit
  7340                           ;	ZCD = 0x1, unprogrammed default
  7341                           ;	PPSLOCK bit One-Way Set Enable bit
  7342                           ;	PPS1WAY = 0x1, unprogrammed default
  7343                           ;	Stack Full/Underflow Reset Enable bit
  7344                           ;	STVREN = 0x1, unprogrammed default
  7345                           ;	Debugger Enable bit
  7346                           ;	DEBUG = 0x1, unprogrammed default
  7347                           ;	Extended Instruction Set Enable bit
  7348                           ;	XINST = 0x1, unprogrammed default
  7349   300003                     	org	3145731
  7350   300003  FF                 	db	255
  7351                           
  7352                           ;Config register CONFIG3L @ 0x300004
  7353                           ;	WDT Period Select bits
  7354                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7355                           ;	WDT operating mode
  7356                           ;	WDTE = OFF, WDT Disabled
  7357   300004                     	org	3145732
  7358   300004  9F                 	db	159
  7359                           
  7360                           ;Config register CONFIG3H @ 0x300005
  7361                           ;	unspecified, using default values
  7362                           ;	WDT Window Select bits
  7363                           ;	WDTCWS = 0x7, unprogrammed default
  7364                           ;	WDT input clock selector
  7365                           ;	WDTCCS = 0x7, unprogrammed default
  7366   300005                     	org	3145733
  7367   300005  FF                 	db	255
  7368                           
  7369                           ;Config register CONFIG4L @ 0x300006
  7370                           ;	unspecified, using default values
  7371                           ;	Write Protection Block 0
  7372                           ;	WRT0 = 0x1, unprogrammed default
  7373                           ;	Write Protection Block 1
  7374                           ;	WRT1 = 0x1, unprogrammed default
  7375                           ;	Write Protection Block 2
  7376                           ;	WRT2 = 0x1, unprogrammed default
  7377                           ;	Write Protection Block 3
  7378                           ;	WRT3 = 0x1, unprogrammed default
  7379                           ;	Write Protection Block 3
  7380                           ;	WRT4 = 0x1, unprogrammed default
  7381                           ;	Write Protection Block 3
  7382                           ;	WRT5 = 0x1, unprogrammed default
  7383                           ;	Write Protection Block 3
  7384                           ;	WRT6 = 0x1, unprogrammed default
  7385                           ;	Write Protection Block 3
  7386                           ;	WRT7 = 0x1, unprogrammed default
  7387   300006                     	org	3145734
  7388   300006  FF                 	db	255
  7389                           
  7390                           ;Config register CONFIG4H @ 0x300007
  7391                           ;	unspecified, using default values
  7392                           ;	Configuration Register Write Protection bit
  7393                           ;	WRTC = 0x1, unprogrammed default
  7394                           ;	Boot Block Write Protection bit
  7395                           ;	WRTB = 0x1, unprogrammed default
  7396                           ;	Data EEPROM Write Protection bit
  7397                           ;	WRTD = 0x1, unprogrammed default
  7398                           ;	Scanner Enable bit
  7399                           ;	SCANE = 0x1, unprogrammed default
  7400                           ;	Low Voltage Programming Enable bit
  7401                           ;	LVP = 0x1, unprogrammed default
  7402   300007                     	org	3145735
  7403   300007  FF                 	db	255
  7404                           
  7405                           ;Config register CONFIG5L @ 0x300008
  7406                           ;	unspecified, using default values
  7407                           ;	UserNVM Program Memory Code Protection bit
  7408                           ;	CP = 0x1, unprogrammed default
  7409                           ;	DataNVM Memory Code Protection bit
  7410                           ;	CPD = 0x1, unprogrammed default
  7411   300008                     	org	3145736
  7412   300008  FF                 	db	255
  7413                           
  7414                           ;Config register CONFIG5H @ 0x300009
  7415                           ;	unspecified, using default values
  7416   300009                     	org	3145737
  7417   300009  FF                 	db	255
  7418                           
  7419                           ;Config register CONFIG6L @ 0x30000A
  7420                           ;	unspecified, using default values
  7421                           ;	Table Read Protection Block 0
  7422                           ;	EBTR0 = 0x1, unprogrammed default
  7423                           ;	Table Read Protection Block 1
  7424                           ;	EBTR1 = 0x1, unprogrammed default
  7425                           ;	Table Read Protection Block 2
  7426                           ;	EBTR2 = 0x1, unprogrammed default
  7427                           ;	Table Read Protection Block 3
  7428                           ;	EBTR3 = 0x1, unprogrammed default
  7429                           ;	Table Read Protection Block 4
  7430                           ;	EBTR4 = 0x1, unprogrammed default
  7431                           ;	Table Read Protection Block 5
  7432                           ;	EBTR5 = 0x1, unprogrammed default
  7433                           ;	Table Read Protection Block 6
  7434                           ;	EBTR6 = 0x1, unprogrammed default
  7435                           ;	Table Read Protection Block 7
  7436                           ;	EBTR7 = 0x1, unprogrammed default
  7437   30000A                     	org	3145738
  7438   30000A  FF                 	db	255
  7439                           
  7440                           ;Config register CONFIG6H @ 0x30000B
  7441                           ;	unspecified, using default values
  7442                           ;	Boot Block Table Read Protection bit
  7443                           ;	EBTRB = 0x1, unprogrammed default
  7444   30000B                     	org	3145739
  7445   30000B  FF                 	db	255
  7446                           tosu	equ	0xFFF
  7447                           tosh	equ	0xFFE
  7448                           tosl	equ	0xFFD
  7449                           stkptr	equ	0xFFC
  7450                           pclatu	equ	0xFFB
  7451                           pclath	equ	0xFFA
  7452                           pcl	equ	0xFF9
  7453                           tblptru	equ	0xFF8
  7454                           tblptrh	equ	0xFF7
  7455                           tblptrl	equ	0xFF6
  7456                           tablat	equ	0xFF5
  7457                           prodh	equ	0xFF4
  7458                           prodl	equ	0xFF3
  7459                           indf0	equ	0xFEF
  7460                           postinc0	equ	0xFEE
  7461                           postdec0	equ	0xFED
  7462                           preinc0	equ	0xFEC
  7463                           plusw0	equ	0xFEB
  7464                           fsr0h	equ	0xFEA
  7465                           fsr0l	equ	0xFE9
  7466                           wreg	equ	0xFE8
  7467                           indf1	equ	0xFE7
  7468                           postinc1	equ	0xFE6
  7469                           postdec1	equ	0xFE5
  7470                           preinc1	equ	0xFE4
  7471                           plusw1	equ	0xFE3
  7472                           fsr1h	equ	0xFE2
  7473                           fsr1l	equ	0xFE1
  7474                           bsr	equ	0xFE0
  7475                           indf2	equ	0xFDF
  7476                           postinc2	equ	0xFDE
  7477                           postdec2	equ	0xFDD
  7478                           preinc2	equ	0xFDC
  7479                           plusw2	equ	0xFDB
  7480                           fsr2h	equ	0xFDA
  7481                           fsr2l	equ	0xFD9
  7482                           status	equ	0xFD8

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     92      94
    BANK0           160    159     160
    BANK1           256    240     252
    BANK2           256      0     112
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2389$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2336$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2336$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    motor_action@r	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_action@l	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    spin_180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    spin_180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_onesquare@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_onesquare@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_fromcard@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_fromcard@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    S589DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    S589DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    color_processor_hard@calibrated	PTR unsigned int  size(2) Largest target is 64
		 -> main@color_calibrated(BANK1[64]), 

    color_processor_hard@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_processor_easy@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_read@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), main@RGB_calibrated(BANK1[8]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _motor_action->_left_135
    _motor_action->_left_90
    _motor_action->_reverse_fromcard
    _motor_action->_reverse_onesquare
    _motor_action->_right_135
    _motor_action->_right_90
    _motor_action->_spin_180
    _stop->_setMotorPWM
    _spin_180->_setMotorPWM
    _right_90->_setMotorPWM
    _right_135->_setMotorPWM
    _reverse_onesquare->_setMotorPWM
    _reverse_fromcard->_setMotorPWM
    _left_90->_setMotorPWM
    _left_135->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _color_read->_color_read_Blue
    _color_read->_color_read_Green
    _color_read->_color_read_Luminosity
    _color_read->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Luminosity->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               385   385      0   55876
                                             88 COMRAM     4     4      0
                                             27 BANK0    132   132      0
                                              0 BANK1    240   240      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
               _color_processor_easy
               _color_processor_hard
                         _color_read
                            _forward
                    _initDCmotorsPWM
                         _initUSART4
                       _motor_action
                  _sendStringSerial4
                        _setMotorPWM
                           _spin_180
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    5722
                                              0 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5219
                                             80 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    4869
                                             62 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3649
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     219
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _motor_action                                         8     2      6   30862
                                             33 COMRAM     8     2      6
                           _left_135
                            _left_90
                   _reverse_fromcard
                  _reverse_onesquare
                          _right_135
                           _right_90
                           _spin_180
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 7     3      4    5075
                                             25 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _spin_180                                             8     4      4    3403
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_90                                             8     4      4    3555
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_135                                            8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_onesquare                                    8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_fromcard                                     8     4      4    4163
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_90                                              8     4      4    3555
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_135                                             8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                              6     2      4    3555
                                             25 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    2703
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read                                           4     2      2     768
                                             11 COMRAM     4     2      2
                    _color_read_Blue
                   _color_read_Green
              _color_read_Luminosity
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Luminosity                                7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_processor_hard                                26    22      4     829
                                              0 COMRAM    24    20      4
 ---------------------------------------------------------------------------------
 (1) _color_processor_easy                                10     8      2     346
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_processor_easy
   _color_processor_hard
   _color_read
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Luminosity
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _motor_action
     _left_135
       _setMotorPWM
     _left_90
       _setMotorPWM
     _reverse_fromcard
       _setMotorPWM
     _reverse_onesquare
       _setMotorPWM
     _right_135
       _setMotorPWM
     _right_90
       _setMotorPWM
     _spin_180
       _setMotorPWM
     _stop
       _setMotorPWM
   _sendStringSerial4
     _sendCharSerial4
   _setMotorPWM
   _spin_180
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
   _stop

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      60        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      70       9       43.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     F0      FC       7       98.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      A0       5      100.0%
BITBIGSFRllllhh     91      0       0      40        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5C      5E       1      100.0%
BITBIGSFRllllll     32      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      49        0.0%
BITBIGSFRllllll     26      0       0      58        0.0%
BITBIGSFRllllhl     20      0       0      43        0.0%
BITBIGSFRhhlhhh     1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      35        0.0%
BITBIGSFRhhlhl      13      0       0      34        0.0%
BITBIGSFRhllh       11      0       0      37        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      44        0.0%
BITBIGSFRllllhh      8      0       0      41        0.0%
BITBIGSFRllllll      7      0       0      54        0.0%
BITBIGSFRllllll      7      0       0      52        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRllllll      6      0       0      48        0.0%
BITBIGSFRllllll      5      0       0      47        0.0%
BITBIGSFRhlll        5      0       0      38        0.0%
BITBIGSFRllllll      3      0       0      46        0.0%
BITBIGSFRllh         2      0       0      39        0.0%
BITBIGSFRllllll      1      0       0      50        0.0%
BITBIGSFRllllll      1      0       0      51        0.0%
BITBIGSFRllllll      1      0       0      55        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      56        0.0%
BITBIGSFRllllhl      1      0       0      42        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26A      59        0.0%
DATA                 0      0     26A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Dec 11 00:16:51 2022

                 _color_read_Red 29EC                  _color_read_Blue 2ADC  
                             l33 2946                               l42 2A3A  
                             l51 22E8                               l36 2D24  
                             l45 2ADA                               l70 19D8  
                             l39 2A8A                               l64 18BA  
                             l48 2B2A                               l58 2242  
                             l66 191C                               l68 197E  
                             l98 2CB6                     ___awdiv@sign 000C  
            ___wmul@multiplicand 0003                 _color_read_Green 2A8C  
              ??_Interrupts_init 0001                              l101 2CB8  
                            l110 2DA6                              l104 2CDE  
                            l200 1060                              l113 2DB0  
                            l201 1074                              l210 1270  
                            l107 2DBA                              l116 2D9C  
                            l119 2BF2                              l304 2574  
                            l322 17F4                              l420 2D62  
                            l309 275A                              l264 1BAC  
                            l432 2D7A                              l441 2D04  
                            l257 2BB0                              l193 0E96  
                            l274 2872                              l284 2616  
                            l269 27E8                              l429 2D66  
                            l197 1022                              l294 2430  
                            l438 2C62                              l279 26B8  
                            l368 2D90                              l289 238C  
                            l379 2D44                              l299 24D2  
                            l555 1D34                              l672 2184  
                            l568 1E98                motor_action@color 0022  
                            u950 200A                              u951 2006  
                            u960 201C                              u961 2018  
                            u970 2044                              u971 2040  
                            u980 207A                              u981 2076  
                            u990 2B6E                              u991 2B6A  
                            _abs 2BF4                              _pad 2874  
                            wreg 000FE8                             ?_abs 0013  
                           l1204 2B6E                             l1141 2896  
                           l1150 13B6                             l1207 2DBC  
                           l1119 2998                             l1152 13BE  
                           l1145 28EC                             l1153 1404  
                           l3001 0E30                             l1171 1FF6  
                           l3011 0E46                             l3003 0E34  
                           l1164 15A6                             l2301 1DE2  
                           l1181 2C2A                             l2221 2026  
                           l3101 11F4                             l3021 0E72  
                           l3013 0E4E                             l3005 0E34  
                           l2311 1E58                             l2303 1E10  
                           l2223 2044                             l2215 1FF8  
                           l2231 2B38                             l3111 1246  
                           l3103 11FC                             l3023 0E76  
                           l3015 0E52                             l3007 0E3A  
                           l1184 2C32                             l2241 1BC0  
                           l2313 1E78                             l2305 1E30  
                           l2225 207A                             l2217 200A  
                           l2233 2B4A                             l2321 288E  
                           l2401 13C6                             l1177 29EA  
                           l3121 12A8                             l3113 1250  
                           l3105 1204                             l3041 0F1E  
                           l3025 0E7E                             l3017 0E5A  
                           l3009 0E3E                             l3211 17B6  
                           l2251 1C16                             l2243 1BE0  
                           l2307 1E42                             l2331 2BF4  
                           l2219 201C                             l2235 2B4E  
                           l2323 28A2                             l2411 1400  
                           l2403 13D6                             l3131 131C  
                           l3123 12C0                             l3107 121C  
                           l3051 0FCE                             l3043 0F54  
                           l3035 0EAE                             l3027 0E8A  
                           l3019 0E5E                             l1196 20C0  
                           l2341 2CFC                             l2261 1C6A  
                           l2253 1C22                             l2245 1BE4  
                           l2237 1BAE                             l2309 1E48  
                           l2333 2C0E                             l2229 2B2C  
                           l2325 28B6                             l2317 2874  
                           l2421 14A4                             l2413 140C  
                           l2405 13DC                             l2501 1F88  
                           l3125 12D8                             l3117 1272  
                           l3109 1232                             l3061 1032  
                           l3053 0FE6                             l3045 0F8A  
                           l3037 0EBA                             l3029 0EA4  
                           l2335 2CB8                             l2351 20DC  
                           l2271 1CDE                             l2263 1C7C  
                           l2255 1C40                             l2247 1BF2  
                           l2239 1BB2                             l2327 28BA  
                           l2319 2882                             l2431 1560  
                           l2423 14AA                             l2415 1416  
                           l2407 13EC                             l3127 12DE  
                           l3119 127A                             l3071 10A2  
                           l3063 106E                             l3055 0FE8  
                           l3047 0F8C                             l3039 0EE8  
                           l2521 2CA0                             l2337 2CC8  
                           l2441 2DB2                             l2361 2102  
                           l2353 20E0                             l2345 20C2  
                           l2265 1CAA                             l2257 1C48  
                           l2273 1CE4                             l2249 1C12  
                           l2281 1D36                             l2329 28D8  
                           l2433 1570                             l2417 141C  
                           l2425 150E                             l2409 13F8  
                           l2505 1FB8                             l3129 1308  
                           l3081 1104                             l3073 10BA  
                           l3065 107A                             l3057 1000  
                           l3049 0FC2                             l2523 2CA2  
                           l2515 2C8E                             l2443 2DB6  
                           l2451 2DAC                             l2531 2A82  
                           l2371 2138                             l2363 2114  
                           l2355 20EE                             l2347 20C6  
                           l2339 2CE0                             l2611 2670  
                           l2275 1CF4                             l2267 1CCA  
                           l2259 1C5C                             l2291 1D7A  
                           l2283 1D3A                             l2435 1576  
                           l2427 1528                             l2419 149E  
                           l3091 116E                             l3083 1110  
                           l3075 10D6                             l3067 1082  
                           l3059 1006                             l2525 2CA4  
                           l2517 2C98                             l2445 2D94  
                           l2461 2BC0                             l2453 2D9E  
                           l2541 2A8C                             l2373 214E  
                           l2365 211C                             l2381 2164  
                           l2357 20F6                             l2349 20D4  
                           l2613 2678                             l2605 2640  
                           l2621 2596                             l2701 2516  
                           l2277 1D14                             l2269 1CCC  
                           l2293 1D9A                             l2285 1D48  
                           l2437 1586                             l2429 1546  
                           l2509 1FCA                             l3093 1188  
                           l3085 111E                             l3077 10DE  
                           l3069 1096                             l2519 2C9E  
                           l2447 2D98                             l2527 2D08  
                           l2463 2BC8                             l2455 2DA2  
                           l2543 2AD2                             l2535 29EC  
                           l2383 2174                             l2375 2156  
                           l2367 2124                             l2359 20FA  
                           l2471 19DA                             l2615 2684  
                           l2607 2658                             l2631 25C2  
                           l2711 255E                             l2703 2522  
                           l2295 1DB8                             l2287 1D68  
                           l2391 134A                             l3095 11C6  
                           l3087 1136                             l3079 10F0  
                           l2449 2DA8                             l2465 2BEE  
                           l2457 2BB4                             l2529 2A3C  
                           l2537 2A32                             l2801 2270  
                           l2385 217C                             l2377 2158  
                           l2369 2132                             l2481 1ADA  
                           l2473 19F6                             l2721 26E2  
                           l2713 26BA                             l2617 26A0  
                           l2609 2664                             l2633 25CE  
                           l2705 252E                             l2641 22EA  
                           l2561 2784                             l2553 275C  
                           l2297 1DC0                             l2289 1D6C  
                           l2393 135E                             l3097 11D2  
                           l3089 1152                             l2811 21D8  
                           l2467 2BF0                             l2459 2BB8  
                           l2547 2ADC                             l2803 22A0  
                           l2379 215E                             l2483 1B44  
                           l2475 1A58                             l2731 271C  
                           l2723 26F0                             l2715 26DA  
                           l2635 25D6                             l2627 259E  
                           l2619 2576                             l2707 2536  
                           l2651 231E                             l2643 230A  
                           l2571 27CE                             l2563 279C  
                           l2555 277C                             l2299 1DD4  
                           l2395 136E                             l2491 1EDE  
                           l3099 11EE                             l2821 2232  
                           l2813 21EE                             l2549 2B22  
                           l2805 22B8                             l2477 1A9E  
                           l2901 2D52                             l2733 2728  
                           l2725 26FC                             l2637 25E2  
                           l2629 25B6                             l2709 2542  
                           l2661 2358                             l2653 232C  
                           l2581 245A                             l2573 2432  
                           l2565 27A8                             l2397 138E  
                           l2389 132A                             l2493 1EE2  
                           l2485 1E9A                             l2741 299A  
                           l2751 28EE                             l2823 223A  
                           l2815 21FA                             l2807 2186  
                           l2479 1ABE                             l2903 2D5C  
                           l2735 2744                             l2727 2708  
                           l2639 25FE                             l2663 2374  
                           l2655 2338                             l2591 2494  
                           l2583 2466                             l2575 2452  
                           l2567 27B4                             l2399 13AA  
                           l2495 1EF2                             l2487 1EC2  
                           l2743 29A6                             l2911 295A  
                           l2761 2920                             l2753 28F2  
                           l2817 2210                             l2809 21C2  
                           l2841 1894                             l2905 2D5E  
                           l2729 2714                             l2681 23E8  
                           l2673 23B6                             l2665 238E  
                           l2657 2344                             l2649 2312  
                           l2593 24A0                             l2585 2474  
                           l2569 27C2                             l2737 2D66  
                           l2921 2C34                             l2497 1F12  
                           l2489 1ED0                             l2745 29C2  
                           l2913 2962                             l2771 292A  
                           l2763 2922                             l2755 28FC  
                           l2819 2226                             l2851 1936  
                           l2843 18B6                             l2835 1832  
                           l2827 17F6                             l2931 280A  
                           l2907 2D60                             l2683 23F0  
                           l2675 23C4                             l2667 23AE  
                           l2691 24F4                             l2659 234C  
                           l2595 24BC                             l2587 2480  
                           l2739 2D76                             l2923 2C38  
                           l2499 1F32                             l2747 29E2  
                           l2915 296A                             l2781 2934  
                           l2773 292C                             l2765 2924  
                           l2757 290C                             l2861 19C4  
                           l2853 1958                             l2845 18D4  
                           l2837 186E                             l2829 1832  
                           l2941 2836                             l2685 23FC  
                           l2677 23D0                             l2597 2618  
                           l2589 248C                             l2925 2C46  
                           l2917 2986                             l2909 2948  
                           ?_pad 0011                             l2791 293E  
                           l2783 2936                             l2775 292E  
                           l2767 2926                             l2759 2916  
                           l2855 197A                             l2847 18F6  
                           l2839 1872                             l2943 2842  
                           l2687 2418                             l2679 23DC  
                           l2599 2638                             l2951 15AC  
                           l2927 2C4A                             l2793 2942  
                           l2785 2938                             l2777 2930  
                           l2769 2928                             l2857 19A4  
                           l2849 1918                             l2945 284A  
                           l2937 2812                             l2929 27EA  
                           l2881 2B98                             l2697 24FC  
                           l2689 24D4                             l2961 1640  
                           l2953 15D4                             l2891 2D2E  
                           l2795 2944                             l2787 293A  
                           l2779 2932                             l2859 19B4  
                           l2867 19D0                             l2947 2856  
                           l2939 282A                             l2883 2BAC  
                           l2875 2B70                             l2699 2508  
                           l2971 16C4                             l2963 1658  
                           l2955 15EC                             l2893 2D38  
                           l2789 293C                             l2797 2244  
                           l2885 2BAE                             l2877 2B80  
                           l2981 1774                             l2973 16D8  
                           l2965 166C                             l2957 1600  
                           l2949 15A8                             l2887 2D7C  
                           l2895 2D42                             l2799 2258  
                           l2879 2B94                             l2975 16F0  
                           l2967 1684                             l2959 1618  
                           l2991 0E14                             l2889 2D26  
                           l2897 2D46                             l2977 171C  
                           l2969 16AC                             l2985 17A0  
                           l2993 0E18                             l2899 2D50  
                           l2979 1748                             l2995 0E24  
                           l2997 0E28                             l2999 0E2C  
                           STR_1 0E04                             STR_2 0E01  
                           u1000 1BC0                             u1001 1BBC  
                           u1010 1BF2                             u1011 1BEE  
                           u1100 1DE2                             u1021 1C1C  
                           u1101 1DDE                             u1030 1C40  
                           u1110 1E10                             u1031 1C3C  
                           u1111 1E0C                             u1200 2114  
                           u1040 1C6A                             u1120 1E58  
                           u1201 2110                             u1041 1C66  
                           u1121 1E54                             u1210 2132  
                           u1050 1CAA                             u1130 2882  
                           u1211 212E                             u1051 1CA6  
                           u1131 287E                             u1220 214E  
                           u1060 1CF4                             u1140 28D8  
                           u1300 1528                             u1221 214A  
                           u1061 1CF0                             u1141 28D4  
                           u1301 1524                             u1230 2174  
                           u1070 1D48                             u1150 2C0E  
                           u1310 1546                             u1231 2170  
                           u2007 2530                             u1071 1D44  
                           u1151 2C0A                             u1311 1542  
                           u1160 2CC8                             u1080 1D7A  
                           u1320 1560                             u1240 135A  
                           u1400 1EC2                             u1161 2CC4  
                           u2017 2568                             u1081 1D76  
                           u1321 155C                             u1241 1354  
                           u1401 1EBE                             u1170 2CDE  
                           u1090 1DB8                             u1330 1570  
                           u1250 135C                             u1410 1F12  
                           u1171 2CDA                             u2107 2844  
                           u2027 25D0                             u1091 1DB4  
                           u1331 156C                             u1411 1F0E  
                           u1340 2BDC                             u1180 20D4  
                           u1500 2744                             u1260 136E  
                           u1420 1F32                             u1341 2BD4  
                           u2117 2262                             u1181 20D0  
                           u1501 2740                             u2037 2608  
                           u1261 136A                             u1421 1F2E  
                           u1190 20EE                             u1430 27E8  
                           u1510 2D76                             u1270 13AA  
                           u2127 2292                             u1191 20EA  
                           u2047 2672                             u1431 27E4  
                           u1511 2D72                             u1271 13A6  
                           u1600 18CE                             u1360 19F6  
                           u1440 24BC                             u1280 13D6  
                           u1520 29E2                     _BAUD4CONbits 000EE9  
                           u2137 22C2                             u1361 19F2  
                           u2057 26AA                             u1441 24B8  
                           u1281 13D2                             u1521 29DE  
                           _LATE 000F7D                             u1530 21D8  
                           u1610 18F6                             u1370 1ADA  
                           u1450 26A0                             u1290 13EC  
                           u2147 2902                             u1531 21D4  
                           u1611 18F2                             u1371 1AD6  
                           u2067 23EA                             u1451 269C  
                           u1291 13E8                             _LATG 000F7F  
                           u1540 21EE                             u1700 19B4  
                           u1620 1918                             u1460 25FE  
                           u1541 21EA                             u1701 19B0  
                           u1621 1914                             u2077 2422  
                           u1461 25FA                             u1550 2210  
                           u1710 19C4                             u1630 192E  
                           u1358 2BDE                             u1470 2374  
                           u1551 220C                             u1711 19C0  
                           u1631 1928                             u2087 2716  
                           u1471 2370                             u1560 2226  
                           u1640 1930                             u1384 1B34  
                           u1480 2418                             u1720 2C62  
                           u1800 10D6                             u1561 2222  
                           u1385 1B30                             u2097 274E  
                           u1481 2414                             u1721 2C5E  
                           u1801 10D2                             u1650 1958  
                           u1570 1894                             u1394 1B9E  
                           u1730 2872                             u1490 255E  
                           u1810 10F0                             _T2PR 000FBC  
                           u1651 1954                             u1571 1890  
                           u1395 1B9A                             u1731 286E  
                           u1491 255A                             u1811 10EC  
                           u1660 197A                             u1580 18B6  
                           u1820 111E                             u1740 0EA4  
                           u1661 1976                             u1581 18B2  
                           u1821 111A                             u1741 0EA0  
                           u1670 1990                             u1590 18CC  
                           u1830 1232                             u1750 1022  
                           u1671 198A                             u1591 18C6  
                           u1831 122E                             u1751 101E  
                           u1680 1992                             u1840 126C  
                           u1760 104E                             u1841 1268  
                           u1761 1046                             u1690 19A4  
                           u1850 1308                             u1770 1060  
                           u1691 19A0                             u1851 1304  
                           u1907 120E                             u1771 105C  
                           u1780 106E                             u1917 12CA  
                           u1781 106A                             u1790 10BA  
                           u1927 15DE                             u1791 10B6  
                           u1768 1050                             u1937 164A  
                           u1947 16B6                             u1957 27BA  
                           u1967 248E                             u1887 0FD8  
                           u1977 24C6                             u1897 0FF2  
                           u1987 2346                             u1997 237E  
                           abs@a 0013                             _dbuf 0250  
                           _main 0E14                             _dtoa 132A  
                           _prec 01F2                             _time 01F4  
                           pad@i 0018                             pad@p 0015  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             pad@w 001A  
                           fsr2l 000FD9                             btemp 005F  
                           _stop 275C                             prodh 000FF4  
                           prodl 000FF3                             start 003E  
         __end_of_color_read_Red 2A3C                  __end_of_HighISR 003E  
                   ___param_bank 000000                            ??_abs 0015  
                          ??_pad 0017         _color_processor_hard$370 000A  
       _color_processor_hard$372 000B         _color_processor_hard$374 000C  
                __end_of___aodiv 1D36                            ?_main 0001  
                          ?_dtoa 001C                  __end_of___aomod 1E9A  
                __end_of___awdiv 2186          ??_color_read_Luminosity 0007  
                          ?_stop 001A                  ___awdiv@divisor 0009  
                          i2l376 003A                  ___awdiv@counter 000B  
                   vfpfcnvrt@fmt 0041                            _TMR0H 000FD4  
                          _TMR0L 000FD3                     main@readout2 007B  
                   main@readout3 0100          __end_of_sendCharSerial4 2D7C  
     __end_of_I2C_2_Master_Start 2DBC       __end_of_I2C_2_Master_Write 2D9E  
                __end_of_left_90 2432                            _flags 01FA  
                          _fputc 1FF8                  __end_of_forward 2874  
                          _fputs 2B2C                            pad@fp 0011  
                          _width 01F0                            _putch 2DBC  
                          main@i 01CC                            main@j 01C6  
                          main@k 01CA                            dtoa@d 001E  
                          dtoa@i 003C                            dtoa@n 0034  
                          dtoa@p 0030                            dtoa@s 003E  
                          dtoa@w 0032                            tablat 000FF5  
                          ttemp5 0060                            ttemp6 0063  
                          ttemp7 0067                            stop@i 001F  
                          status 000FD8                            wtemp8 0060  
                __end_of_sprintf 299A          __end_of_color_read_Blue 2B2C  
          _I2C_2_Master_RepStart 2D9E                  ?_color_read_Red 0005  
                __initialization 2C64   color_processor_hard@calibrated 0003  
                   __end_of_main 132A                     __end_of_dtoa 15A8  
                   __end_of_stop 27EA                           ??_main 0059  
                         ??_dtoa 0026                           ??_stop 001E  
                  __activetblptr 000003                     ?_setMotorPWM 000F  
                         ?_fputc 0001                           ?_fputs 000A  
               ___awdiv@dividend 0007                           ?_putch 0001  
                         _RC0PPS 000E62                           _RC4REG 000EE3  
                         _RE2PPS 000E74                           _RD5PPS 000E6F  
                         _RC7PPS 000E69                           _RD6PPS 000E70  
                         i2l3181 0028                           i2l3183 002E  
                         i2l3185 0032                           i2l3177 000A  
                         i2l3187 0036                           i2l3179 001A  
                      ??_HighISR 0001         __end_of_color_click_init 2948  
                         _RX4PPS 000E15                           _TX4REG 000EE4  
                  ??_Timer0_init 0001        color_processor_easy@color 0003  
                   vfprintf@cfmt 0057                 __end_of_left_135 275C  
                      ??___aodiv 0011                        ??___aomod 0011  
                         ___wmul 2CE0                        ??___awdiv 000B  
                         clear_0 2C6A                           clear_1 2C76  
               ___awdiv@quotient 000D                           isa$std 000001  
                         pad@buf 0013                           dtoa@fp 001C  
                      ??_left_90 001E                 __end_of_right_90 238E  
                  main@time_path 0164                           fputc@c 0001  
                         fputs@c 000E                           fputs@i 000F  
                         fputs@s 000A                        ??_forward 001E  
               __end_of_spin_180 24D4                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 ?_sendCharSerial4 0001  
                         putch@c 0001                 __end_of_vfprintf 29EC  
                         stop@mL 001A                           stop@mR 001C  
              ??_initDCmotorsPWM 0003                        ??_sprintf 0059  
            reverse_onesquare@mL 001A              reverse_onesquare@mR 001C  
                     __accesstop 0060          __end_of__initialization 2C84  
       __end_of_color_read_Green 2ADC           ?_I2C_2_Master_RepStart 0001  
                  ___rparam_used 000001                 ?_color_read_Blue 0005  
                _Interrupts_init 2D7C                   __pcstackCOMRAM 0001  
                  color_read@rgb 000C                    __end_of_fputc 20C2  
                  __end_of_fputs 2B70                    __end_of_putch 2DBE  
            __end_of_Timer0_init 2D46                          ??_fputc 0005  
                        ??_fputs 000E                          ??_putch 0001  
                     __pbssBANK0 00FF                       __pbssBANK1 01F0  
                     __pbssBANK2 0200           color_processor_hard@cb 0017  
         color_processor_hard@cg 0015           color_processor_hard@cr 0013  
              _color_writetoaddr 2D06                     _T2CLKCONbits 000FBF  
             ?_color_writetoaddr 0003                          ?___wmul 0001  
                 main@color_flag 005B                   main@color_name 01C8  
                 main@color_path 00DF                      right_135@mL 001A  
                    right_135@mR 001C              ??_color_writetoaddr 0004  
               _reverse_fromcard 2618    __end_of_color_read_Luminosity 2A8C  
                        _SP4BRGH 000EE6                          _SP4BRGL 000EE5  
                        _PWM6DCH 000FA3                          _PWM7DCH 000FA0  
                        _SSP2ADD 000ED6                          _SSP2BUF 000ED5  
                      ?_left_135 001A                       _color_read 2244  
        __end_of_Interrupts_init 2D92           color_writetoaddr@value 0003  
               ??_color_read_Red 0007                          _HighISR 0008  
      __end_of_color_writetoaddr 2D26         color_read_Luminosity@tmp 000A  
             _I2C_2_Master_Start 2DB2                       _initUSART4 2D46  
             _I2C_2_Master_Write 2D92                        ?_right_90 001A  
                        __Hparam 0000                          __Lparam 0000  
color_processor_hard@condition_b 0009  color_processor_hard@condition_g 0008  
color_processor_hard@condition_r 0007                color_read_Red@tmp 000A  
                    _Timer0_init 2D26                        ?_spin_180 001A  
        sendStringSerial4@string 0002                          ___aodiv 1BAE  
                        ___aomod 1D36                          ___awdiv 20C2  
            ?_I2C_2_Master_Start 0001              ?_I2C_2_Master_Write 0001  
                     _off_period 01F6                        ?_vfprintf 0051  
                   __psmallconst 0E00                          __pcinit 2C64  
                        __ramtop 0E00                          __ptext0 0E14  
                        __ptext1 2948                          __ptext2 299A  
                        __ptext3 1E9A                          __ptext4 132A  
                        __ptext5 2874                          __ptext6 2B2C  
                        __ptext7 1FF8                          __ptext8 2DBC  
                        __ptext9 2BF4                          _left_90 238E  
                      _T2CONbits 000FBD                          _forward 27EA  
                      _T2HLTbits 000FBE        main@lowerbound_calibrated 00FD  
                  ?_motor_action 0022                    _RxBufWriteCnt 005E  
                        _sprintf 2948             ??_I2C_2_Master_Start 0002  
                     ??_left_135 001E             ??_I2C_2_Master_Write 0002  
           end_of_initialization 2C84                __end_of_right_135 2576  
             setMotorPWM@PWMduty 0018                          fputc@fp 0003  
                        fputs@fp 000C                ?_color_click_init 0001  
   __end_of_color_processor_easy 2244     __end_of_color_processor_hard 19DA  
                     ??_right_90 001E               ??_color_click_init 0005  
              __end_of_vfpfcnvrt 1FF8                       ??_spin_180 001E  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE                 vfpfcnvrt@convarg 0047  
                     ??_vfprintf 0057                  _initDCmotorsPWM 2B70  
                      _PORTFbits 000F8E                   ??_motor_action 0028  
                      _TRISCbits 000F83                        _TRISDbits 000F84  
                      _TRISEbits 000F85                        _TRISFbits 000F86  
                      _TRISGbits 000F87                        _TRISHbits 000F88  
             reverse_fromcard@mL 001A               reverse_fromcard@mR 001C  
                    ?_color_read 000C         color_writetoaddr@address 0004  
        ??_I2C_2_Master_RepStart 0002                 ?_Interrupts_init 0001  
                     left_135@mL 001A                       left_135@mR 001C  
                   _EUSART4RXbuf 023C                     _EUSART4TXbuf 0200  
              ?_color_read_Green 0005                      ?_initUSART4 0001  
      sendCharSerial4@charToSend 0001                       main@motorL 01E7  
                     main@motorR 01DE               ??_color_read_Green 0007  
                    vfpfcnvrt@ap 0043                      vfpfcnvrt@cp 004F  
                    vfpfcnvrt@fp 003F                   __end_of___wmul 2D06  
            start_initialization 2C64                      __end_of_abs 2C34  
                    __end_of_pad 28EE                    _TxBufWriteCnt 00FF  
       __end_of_reverse_fromcard 26BA              color_read_Green@tmp 000A  
        __end_of_initDCmotorsPWM 2BB2                      vfprintf@fmt 0053  
                       ??___wmul 0005               reverse_onesquare@i 0020  
                    __pbssCOMRAM 005D             _color_processor_easy 2186  
           _color_processor_hard 17F6                    __pcstackBANK0 0060  
                  __pcstackBANK1 0100                 ___aodiv@dividend 0001  
             main@RGB_calibrated 01CE                         ?_HighISR 0001  
        color_processor_easy@rgb 0001          color_processor_hard@rgb 0001  
          color_processor_easy@a 0007            color_processor_easy@b 0009  
          color_processor_easy@c 0005            color_processor_hard@b 0011  
          color_processor_hard@g 000F            color_processor_hard@r 000D  
                      _dtoa$2417 002E             __end_of_motor_action 17F6  
                   ?_Timer0_init 0001                        __pintcode 0008  
                       ?___aodiv 0001                         ?___aomod 0001  
                       ?___awdiv 0007                 ___aodiv@quotient 0013  
                     right_135@i 0020                       right_90@mL 001A  
                     right_90@mR 001C             I2C_2_Master_Read@ack 0003  
           I2C_2_Master_Read@tmp 0004                         ?_left_90 001A  
                    __smallconst 0E00                         ?_forward 001A  
              _I2C_2_Master_Idle 2CB8            ?_color_processor_easy 0001  
          ?_color_processor_hard 0001                 main@RGB_recorded 01D6  
              _I2C_2_Master_Init 2C8E                _I2C_2_Master_Read 2BB2  
              _I2C_2_Master_Stop 2DA8                     _RxBufReadCnt 005D  
             ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 0011  
          _color_read_Luminosity 2A3C               ?_I2C_2_Master_Stop 0001  
       initDCmotorsPWM@PWMperiod 0001                         ?_sprintf 0060  
              _sendStringSerial4 2C34              ??_I2C_2_Master_Idle 0001  
            ??_I2C_2_Master_Init 0001              ??_I2C_2_Master_Read 0002  
                 ___wmul@product 0005              ??_I2C_2_Master_Stop 0002  
                       _LATCbits 000F7B                         _LATDbits 000F7C  
                       _LATEbits 000F7D                         _LATFbits 000F7E  
                      _on_period 01F8                         _LATGbits 000F7F  
                       _LATHbits 000F80                        _right_135 24D4  
                       _IPR0bits 000E1F                         _IPR2bits 000E21  
                       _PIE0bits 000E29                         _PIE2bits 000E2B  
             ?_sendStringSerial4 0002                       spin_180@mL 001A  
                     spin_180@mR 001C                         _PIR0bits 000E33  
                       i2u186_40 001A                         i2u186_41 0016  
                       i2u187_40 0028                         i2u187_41 0024  
                       _PIR2bits 000E35                         _PIR4bits 000E37  
               ?_initDCmotorsPWM 0001                ??_sendCharSerial4 0001  
                       _SSP2CON2 000EDA              ??_sendStringSerial4 0004  
                       _SSP2STAT 000ED8                _reverse_onesquare 2576  
                      _vfpfcnvrt 1E9A        __end_of_I2C_2_Master_Idle 2CE0  
             ?_reverse_onesquare 001A        __end_of_I2C_2_Master_Init 2CB8  
      __end_of_I2C_2_Master_Read 2BF4                ___wmul@multiplier 0001  
              reverse_fromcard@i 0020        __end_of_I2C_2_Master_Stop 2DB2  
                   setMotorPWM@m 000F      I2C_2_Master_Write@data_byte 0002  
                      left_135@i 0020                        left_90@mL 001A  
                      left_90@mR 001C             main@color_calibrated 0182  
              ??_color_read_Blue 0007                     _TxBufReadCnt 01FB  
            ??_reverse_onesquare 001E        main@upperbound_calibrated 01C2  
                   ??_color_read 000E        __end_of_sendStringSerial4 2C64  
  __end_of_I2C_2_Master_RepStart 2DA8               color_read_Blue@tmp 000A  
            __end_of_setMotorPWM 1BAE                       ?_right_135 001A  
                   ??_initUSART4 0001                         __Hrparam 0000  
                     vfprintf@ap 0055                         __Lrparam 0000  
                     vfprintf@fp 0051        __end_of_reverse_onesquare 2618  
                      forward@mL 001A                        forward@mR 001C  
                     ?_vfpfcnvrt 003F               __end_of_color_read 22EA  
                ___aodiv@divisor 0009                  ___aodiv@counter 0011  
                     _ANSELDbits 000EA7           ??_color_processor_easy 0003  
         ??_color_processor_hard 0005                       _ANSELFbits 000EB4  
                     sprintf@fmt 0062                       _T0CON0bits 000FD5  
                     _T0CON1bits 000FD6           ?_color_read_Luminosity 0005  
             __end_of_initUSART4 2D64                         __ptext10 1D36  
                       __ptext11 1BAE                         __ptext20 2618  
                       __ptext12 2C34                         __ptext21 238E  
                       __ptext13 2D64                         __ptext30 29EC  
                       __ptext22 26BA                         __ptext14 15A8  
                       __ptext31 2A3C                         __ptext23 2D46  
                       __ptext15 275C                         __ptext40 2D92  
                       __ptext32 2A8C                         __ptext24 2B70  
                       __ptext16 2432                         __ptext41 2DA8  
                       __ptext33 2ADC                         __ptext25 27EA  
                       __ptext17 22EA                         __ptext42 2DB2  
                       __ptext34 2D9E                         __ptext26 19DA  
                       __ptext18 24D4                         __ptext43 2CB8  
                       __ptext35 2BB2                         __ptext27 2CE0  
                       __ptext19 2576                         __ptext44 2C8E  
                       __ptext36 17F6                         __ptext28 20C2  
                       __ptext45 2D26                         __ptext37 2186  
                       __ptext29 2244                         __ptext46 2D7C  
                       __ptext38 28EE                         __ptext39 2D06  
                      right_90@i 0020                         _left_135 26BA  
                   _SSP2CON1bits 000ED9                     _SSP2CON2bits 000EDA  
                       _right_90 22EA                ?_reverse_fromcard 001A  
                      spin_180@i 0020                         _spin_180 2432  
                       isa$xinst 000000               ??_reverse_fromcard 001E  
                     _RC4STAbits 000EE7                         int$flags 005F  
                  motor_action@l 0024                    motor_action@r 0026  
                       _vfprintf 299A                         left_90@i 0020  
               ___aomod@dividend 0001                  main@time_return 01C4  
                     _INTCONbits 000FF2                     _motor_action 15A8  
                       forward@i 001E                      _setMotorPWM 19DA  
                    _PWM6CONbits 000FA4                      _PWM7CONbits 000FA1  
                       intlevel2 0000                        sprintf@ap 006E  
                    ??_right_135 001E                  ___aomod@divisor 0009  
                    ??_vfpfcnvrt 0045                  ___aomod@counter 0011  
               _color_click_init 28EE                         sprintf@f 0070  
                       sprintf@s 0060                       _SSP2DATPPS 000E1D  
                     _SSP2CLKPPS 000E1C                       _TX4STAbits 000EE8  
                   ___aodiv@sign 0012                  _sendCharSerial4 2D64  
                   ___aomod@sign 0012  
