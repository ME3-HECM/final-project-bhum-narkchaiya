

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Dec 11 16:37:03 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    67   000000                     
    68                           ; Version 2.35
    69                           ; Generated 05/05/2021 GMT
    70                           ; 
    71                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution. Publication is not required when
    85                           ;        this file is used in an embedded application.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F67K40 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103   000000                     _TX4REG	set	3812
   104   000000                     _RC4STAbits	set	3815
   105   000000                     _SP4BRGH	set	3814
   106   000000                     _T0CON0bits	set	4053
   107   000000                     _T0CON1bits	set	4054
   108   000000                     _TMR0H	set	4052
   109   000000                     _TRISGbits	set	3975
   110   000000                     _TRISEbits	set	3973
   111   000000                     _LATFbits	set	3966
   112   000000                     _TRISFbits	set	3974
   113   000000                     _LATG	set	3967
   114   000000                     _LATE	set	3965
   115   000000                     _SSP2CON2bits	set	3802
   116   000000                     _LATGbits	set	3967
   117   000000                     _LATEbits	set	3965
   118   000000                     _RX4PPS	set	3605
   119   000000                     _SSP2CLKPPS	set	3612
   120   000000                     _SSP2DATPPS	set	3613
   121   000000                     _ANSELDbits	set	3751
   122   000000                     _ANSELFbits	set	3764
   123   000000                     _LATDbits	set	3964
   124   000000                     _LATHbits	set	3968
   125   000000                     _TRISDbits	set	3972
   126   000000                     _TRISHbits	set	3976
   127   000000                     _PORTFbits	set	3982
   128   000000                     _PWM7DCH	set	4000
   129   000000                     _PWM6DCH	set	4003
   130   000000                     _TRISCbits	set	3971
   131   000000                     _SSP2BUF	set	3797
   132   000000                     _SSP2ADD	set	3798
   133   000000                     _SSP2CON1bits	set	3801
   134   000000                     _RC4REG	set	3811
   135   000000                     _SP4BRGL	set	3813
   136   000000                     _TX4STAbits	set	3816
   137   000000                     _BAUD4CONbits	set	3817
   138   000000                     _LATCbits	set	3963
   139   000000                     _SSP2CON2	set	3802
   140   000000                     _SSP2STAT	set	3800
   141   000000                     _IPR0bits	set	3615
   142   000000                     _PIE0bits	set	3625
   143   000000                     _RC7PPS	set	3689
   144   000000                     _RD5PPS	set	3695
   145   000000                     _RE2PPS	set	3700
   146   000000                     _RD6PPS	set	3696
   147   000000                     _PWM6CONbits	set	4004
   148   000000                     _T2PR	set	4028
   149   000000                     _T2CONbits	set	4029
   150   000000                     _INTCONbits	set	4082
   151   000000                     _PWM7CONbits	set	4001
   152   000000                     _TMR0L	set	4051
   153   000000                     _T2CLKCONbits	set	4031
   154   000000                     _T2HLTbits	set	4030
   155   000000                     _PIE2bits	set	3627
   156   000000                     _PIR0bits	set	3635
   157   000000                     _IPR2bits	set	3617
   158   000000                     _PIR2bits	set	3637
   159   000000                     _PIR4bits	set	3639
   160   000000                     _RC0PPS	set	3682
   161                           
   162                           	psect	smallconst
   163   000E00                     __psmallconst:
   164                           	callstack 0
   165   000E00  00                 	db	0
   166   000E01                     STR_2:
   167                           
   168                           ; BSR set to: 14
   169   000E01  25                 	db	37
   170   000E02  64                 	db	100	;'d'
   171   000E03  20                 	db	32
   172   000E04  25                 	db	37
   173   000E05  64                 	db	100	;'d'
   174   000E06  20                 	db	32
   175   000E07  25                 	db	37
   176   000E08  64                 	db	100	;'d'
   177   000E09  20                 	db	32
   178   000E0A  25                 	db	37
   179   000E0B  64                 	db	100	;'d'
   180   000E0C  20                 	db	32
   181   000E0D  25                 	db	37
   182   000E0E  64                 	db	100	;'d'
   183   000E0F  20                 	db	32
   184   000E10  0D                 	db	13
   185   000E11  0A                 	db	10
   186   000E12  00                 	db	0
   187   000E13  00                 	db	0	; dummy byte at the end
   188   000000                     
   189                           ; #config settings
   190                           
   191                           	psect	cinit
   192   0029EE                     __pcinit:
   193                           	callstack 0
   194   0029EE                     start_initialization:
   195                           	callstack 0
   196   0029EE                     __initialization:
   197                           	callstack 0
   198                           
   199                           ; Clear objects allocated to BANK2 (152 bytes)
   200   0029EE  EE02  F000         	lfsr	0,__pbssBANK2
   201   0029F2  0E98               	movlw	152
   202   0029F4                     clear_0:
   203   0029F4  6AEE               	clrf	postinc0,c
   204   0029F6  06E8               	decf	wreg,f,c
   205   0029F8  E1FD               	bnz	clear_0
   206                           
   207                           ; Clear objects allocated to BANK1 (28 bytes)
   208   0029FA  EE01  F0DC         	lfsr	0,__pbssBANK1
   209   0029FE  0E1C               	movlw	28
   210   002A00                     clear_1:
   211   002A00  6AEE               	clrf	postinc0,c
   212   002A02  06E8               	decf	wreg,f,c
   213   002A04  E1FD               	bnz	clear_1
   214                           
   215                           ; Clear objects allocated to BANK0 (3 bytes)
   216   002A06  0100               	movlb	0
   217   002A08  6BFF               	clrf	(__pbssBANK0+2)& (0+255),b
   218   002A0A  6BFE               	clrf	(__pbssBANK0+1)& (0+255),b
   219   002A0C  6BFD               	clrf	__pbssBANK0& (0+255),b
   220                           
   221                           ; Clear objects allocated to COMRAM (4 bytes)
   222   002A0E  6A5E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   223   002A10  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   224   002A12  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   225   002A14  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   226   002A16                     end_of_initialization:
   227                           	callstack 0
   228   002A16                     __end_of__initialization:
   229                           	callstack 0
   230   002A16  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   231   002A18  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   232   002A1A  0100               	movlb	0
   233   002A1C  EF64  F00E         	goto	_main	;jump to C main() function
   234                           
   235                           	psect	bssCOMRAM
   236   00005B                     __pbssCOMRAM:
   237                           	callstack 0
   238   00005B                     _TxBufReadCnt:
   239                           	callstack 0
   240   00005B                     	ds	1
   241   00005C                     _TxBufWriteCnt:
   242                           	callstack 0
   243   00005C                     	ds	1
   244   00005D                     _RxBufReadCnt:
   245                           	callstack 0
   246   00005D                     	ds	1
   247   00005E                     _RxBufWriteCnt:
   248                           	callstack 0
   249   00005E                     	ds	1
   250                           
   251                           	psect	bssBANK0
   252   0000FD                     __pbssBANK0:
   253                           	callstack 0
   254   0000FD                     _prec:
   255                           	callstack 0
   256   0000FD                     	ds	2
   257   0000FF                     _flags:
   258                           	callstack 0
   259   0000FF                     	ds	1
   260                           
   261                           	psect	bssBANK1
   262   0001DC                     __pbssBANK1:
   263                           	callstack 0
   264   0001DC                     _EUSART4RXbuf:
   265                           	callstack 0
   266   0001DC                     	ds	20
   267   0001F0                     _width:
   268                           	callstack 0
   269   0001F0                     	ds	2
   270   0001F2                     _time:
   271                           	callstack 0
   272   0001F2                     	ds	2
   273   0001F4                     _off_period:
   274                           	callstack 0
   275   0001F4                     	ds	2
   276   0001F6                     _on_period:
   277                           	callstack 0
   278   0001F6                     	ds	2
   279                           
   280                           	psect	bssBANK2
   281   000200                     __pbssBANK2:
   282                           	callstack 0
   283   000200                     _EUSART4TXbuf:
   284                           	callstack 0
   285   000200                     	ds	60
   286   00023C                     	ds	30
   287   00025A                     	ds	30
   288   000278                     _dbuf:
   289                           	callstack 0
   290   000278                     	ds	32
   291                           
   292                           	psect	cstackBANK1
   293   000100                     __pcstackBANK1:
   294                           	callstack 0
   295   000100                     main@readout3:
   296                           	callstack 0
   297                           
   298                           ; 100 bytes @ 0x0
   299   000100                     	ds	100
   300   000164                     main@time_path:
   301                           	callstack 0
   302                           
   303                           ; 30 bytes @ 0x64
   304   000164                     	ds	30
   305   000182                     main@color_calibrated:
   306                           	callstack 0
   307                           
   308                           ; 64 bytes @ 0x82
   309   000182                     	ds	64
   310   0001C2                     main@RGB_calibrated:
   311                           	callstack 0
   312   0001C2                     main@RGB_recorded:
   313                           	callstack 0
   314                           
   315                           ; 8 bytes @ 0xC2
   316   0001C2                     	ds	8
   317   0001CA                     main@motorR:
   318                           	callstack 0
   319                           
   320                           ; 9 bytes @ 0xCA
   321   0001CA                     	ds	9
   322   0001D3                     main@motorL:
   323                           	callstack 0
   324                           
   325                           ; 9 bytes @ 0xD3
   326   0001D3                     	ds	9
   327                           
   328                           	psect	cstackBANK0
   329   000060                     __pcstackBANK0:
   330                           	callstack 0
   331   000060                     ?_sprintf:
   332                           	callstack 0
   333   000060                     sprintf@s:
   334                           	callstack 0
   335                           
   336                           ; 2 bytes @ 0x0
   337   000060                     	ds	2
   338   000062                     sprintf@fmt:
   339                           	callstack 0
   340                           
   341                           ; 2 bytes @ 0x2
   342   000062                     	ds	12
   343   00006E                     sprintf@ap:
   344                           	callstack 0
   345                           
   346                           ; 2 bytes @ 0xE
   347   00006E                     	ds	2
   348   000070                     sprintf@f:
   349                           	callstack 0
   350                           
   351                           ; 11 bytes @ 0x10
   352   000070                     	ds	11
   353   00007B                     main@readout2:
   354                           	callstack 0
   355                           
   356                           ; 100 bytes @ 0x1B
   357   00007B                     	ds	100
   358   0000DF                     main@color_path:
   359                           	callstack 0
   360                           
   361                           ; 30 bytes @ 0x7F
   362   0000DF                     	ds	30
   363                           
   364                           	psect	cstackCOMRAM
   365   000001                     __pcstackCOMRAM:
   366                           	callstack 0
   367   000001                     ??_I2C_2_Master_Idle:
   368   000001                     ?_color_processor_easy:
   369                           	callstack 0
   370   000001                     ?_color_processor_hard:
   371                           	callstack 0
   372   000001                     ?___wmul:
   373                           	callstack 0
   374   000001                     ?___aodiv:
   375                           	callstack 0
   376   000001                     ?___aomod:
   377                           	callstack 0
   378   000001                     sendCharSerial4@charToSend:
   379                           	callstack 0
   380   000001                     color_processor_easy@rgb:
   381                           	callstack 0
   382   000001                     color_processor_hard@rgb:
   383                           	callstack 0
   384   000001                     initDCmotorsPWM@PWMperiod:
   385                           	callstack 0
   386   000001                     ___wmul@multiplier:
   387                           	callstack 0
   388   000001                     fputc@c:
   389                           	callstack 0
   390   000001                     ___aodiv@dividend:
   391                           	callstack 0
   392   000001                     ___aomod@dividend:
   393                           	callstack 0
   394                           
   395                           ; 8 bytes @ 0x0
   396   000001                     	ds	1
   397   000002                     ??_I2C_2_Master_Read:
   398   000002                     I2C_2_Master_Write@data_byte:
   399                           	callstack 0
   400   000002                     sendStringSerial4@string:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x1
   404   000002                     	ds	1
   405   000003                     color_writetoaddr@value:
   406                           	callstack 0
   407   000003                     I2C_2_Master_Read@ack:
   408                           	callstack 0
   409   000003                     color_processor_easy@color:
   410                           	callstack 0
   411   000003                     color_processor_hard@calibrated:
   412                           	callstack 0
   413   000003                     ___wmul@multiplicand:
   414                           	callstack 0
   415   000003                     fputc@fp:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x2
   419   000003                     	ds	1
   420   000004                     color_writetoaddr@address:
   421                           	callstack 0
   422   000004                     I2C_2_Master_Read@tmp:
   423                           	callstack 0
   424                           
   425                           ; 1 bytes @ 0x3
   426   000004                     	ds	1
   427   000005                     ??_fputc:
   428   000005                     ??_color_click_init:
   429   000005                     ??_color_processor_hard:
   430   000005                     ?_color_read_Luminosity:
   431                           	callstack 0
   432   000005                     ?_color_read_Red:
   433                           	callstack 0
   434   000005                     ?_color_read_Green:
   435                           	callstack 0
   436   000005                     ?_color_read_Blue:
   437                           	callstack 0
   438   000005                     color_processor_easy@c:
   439                           	callstack 0
   440   000005                     ___wmul@product:
   441                           	callstack 0
   442                           
   443                           ; 2 bytes @ 0x4
   444   000005                     	ds	2
   445   000007                     ??_color_read_Luminosity:
   446   000007                     ??_color_read_Red:
   447   000007                     ??_color_read_Green:
   448   000007                     ??_color_read_Blue:
   449   000007                     ?___awdiv:
   450                           	callstack 0
   451   000007                     color_processor_hard@condition_r:
   452                           	callstack 0
   453   000007                     color_processor_easy@a:
   454                           	callstack 0
   455   000007                     ___awdiv@dividend:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x6
   459   000007                     	ds	1
   460   000008                     color_processor_hard@condition_g:
   461                           	callstack 0
   462                           
   463                           ; 1 bytes @ 0x7
   464   000008                     	ds	1
   465   000009                     color_processor_hard@condition_b:
   466                           	callstack 0
   467   000009                     color_processor_easy@b:
   468                           	callstack 0
   469   000009                     ___awdiv@divisor:
   470                           	callstack 0
   471   000009                     ___aodiv@divisor:
   472                           	callstack 0
   473   000009                     ___aomod@divisor:
   474                           	callstack 0
   475                           
   476                           ; 8 bytes @ 0x8
   477   000009                     	ds	1
   478   00000A                     _color_processor_hard$370:
   479                           	callstack 0
   480   00000A                     color_read_Luminosity@tmp:
   481                           	callstack 0
   482   00000A                     color_read_Red@tmp:
   483                           	callstack 0
   484   00000A                     color_read_Green@tmp:
   485                           	callstack 0
   486   00000A                     color_read_Blue@tmp:
   487                           	callstack 0
   488   00000A                     fputs@s:
   489                           	callstack 0
   490                           
   491                           ; 2 bytes @ 0x9
   492   00000A                     	ds	1
   493   00000B                     _color_processor_hard$372:
   494                           	callstack 0
   495   00000B                     ___awdiv@counter:
   496                           	callstack 0
   497                           
   498                           ; 1 bytes @ 0xA
   499   00000B                     	ds	1
   500   00000C                     _color_processor_hard$374:
   501                           	callstack 0
   502   00000C                     ___awdiv@sign:
   503                           	callstack 0
   504   00000C                     color_read@rgb:
   505                           	callstack 0
   506   00000C                     fputs@fp:
   507                           	callstack 0
   508                           
   509                           ; 2 bytes @ 0xB
   510   00000C                     	ds	1
   511   00000D                     color_processor_hard@r:
   512                           	callstack 0
   513   00000D                     ___awdiv@quotient:
   514                           	callstack 0
   515                           
   516                           ; 2 bytes @ 0xC
   517   00000D                     	ds	1
   518   00000E                     ??_color_read:
   519   00000E                     fputs@c:
   520                           	callstack 0
   521                           
   522                           ; 1 bytes @ 0xD
   523   00000E                     	ds	1
   524   00000F                     color_processor_hard@g:
   525                           	callstack 0
   526   00000F                     setMotorPWM@m:
   527                           	callstack 0
   528   00000F                     fputs@i:
   529                           	callstack 0
   530                           
   531                           ; 2 bytes @ 0xE
   532   00000F                     	ds	2
   533   000011                     ??_setMotorPWM:
   534   000011                     ___aodiv@counter:
   535                           	callstack 0
   536   000011                     ___aomod@counter:
   537                           	callstack 0
   538   000011                     color_processor_hard@b:
   539                           	callstack 0
   540   000011                     pad@fp:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0x10
   544   000011                     	ds	1
   545   000012                     ___aodiv@sign:
   546                           	callstack 0
   547   000012                     ___aomod@sign:
   548                           	callstack 0
   549                           
   550                           ; 1 bytes @ 0x11
   551   000012                     	ds	1
   552   000013                     ?_abs:
   553                           	callstack 0
   554   000013                     color_processor_hard@cr:
   555                           	callstack 0
   556   000013                     pad@buf:
   557                           	callstack 0
   558   000013                     abs@a:
   559                           	callstack 0
   560   000013                     ___aodiv@quotient:
   561                           	callstack 0
   562                           
   563                           ; 8 bytes @ 0x12
   564   000013                     	ds	2
   565   000015                     ??_abs:
   566   000015                     color_processor_hard@cg:
   567                           	callstack 0
   568   000015                     pad@p:
   569                           	callstack 0
   570                           
   571                           ; 2 bytes @ 0x14
   572   000015                     	ds	2
   573   000017                     ??_pad:
   574   000017                     color_processor_hard@cb:
   575                           	callstack 0
   576                           
   577                           ; 2 bytes @ 0x16
   578   000017                     	ds	1
   579   000018                     setMotorPWM@PWMduty:
   580                           	callstack 0
   581   000018                     pad@i:
   582                           	callstack 0
   583                           
   584                           ; 2 bytes @ 0x17
   585   000018                     	ds	2
   586   00001A                     stop@mL:
   587                           	callstack 0
   588   00001A                     forward@mL:
   589                           	callstack 0
   590   00001A                     reverse_fromcard@mL:
   591                           	callstack 0
   592   00001A                     reverse_onesquare@mL:
   593                           	callstack 0
   594   00001A                     right_90@mL:
   595                           	callstack 0
   596   00001A                     left_90@mL:
   597                           	callstack 0
   598   00001A                     spin_180@mL:
   599                           	callstack 0
   600   00001A                     right_135@mL:
   601                           	callstack 0
   602   00001A                     left_135@mL:
   603                           	callstack 0
   604   00001A                     pad@w:
   605                           	callstack 0
   606                           
   607                           ; 2 bytes @ 0x19
   608   00001A                     	ds	2
   609   00001C                     stop@mR:
   610                           	callstack 0
   611   00001C                     forward@mR:
   612                           	callstack 0
   613   00001C                     reverse_fromcard@mR:
   614                           	callstack 0
   615   00001C                     reverse_onesquare@mR:
   616                           	callstack 0
   617   00001C                     right_90@mR:
   618                           	callstack 0
   619   00001C                     left_90@mR:
   620                           	callstack 0
   621   00001C                     spin_180@mR:
   622                           	callstack 0
   623   00001C                     right_135@mR:
   624                           	callstack 0
   625   00001C                     left_135@mR:
   626                           	callstack 0
   627   00001C                     dtoa@fp:
   628                           	callstack 0
   629                           
   630                           ; 2 bytes @ 0x1B
   631   00001C                     	ds	2
   632   00001E                     ??_stop:
   633   00001E                     ??_spin_180:
   634   00001E                     ??_reverse_fromcard:
   635   00001E                     ??_reverse_onesquare:
   636   00001E                     ??_right_90:
   637   00001E                     ??_left_90:
   638   00001E                     ??_right_135:
   639   00001E                     ??_left_135:
   640   00001E                     forward@i:
   641                           	callstack 0
   642   00001E                     dtoa@d:
   643                           	callstack 0
   644                           
   645                           ; 8 bytes @ 0x1D
   646   00001E                     	ds	1
   647   00001F                     stop@i:
   648                           	callstack 0
   649                           
   650                           ; 2 bytes @ 0x1E
   651   00001F                     	ds	1
   652   000020                     reverse_fromcard@i:
   653                           	callstack 0
   654   000020                     reverse_onesquare@i:
   655                           	callstack 0
   656   000020                     right_90@i:
   657                           	callstack 0
   658   000020                     left_90@i:
   659                           	callstack 0
   660   000020                     spin_180@i:
   661                           	callstack 0
   662   000020                     right_135@i:
   663                           	callstack 0
   664   000020                     left_135@i:
   665                           	callstack 0
   666                           
   667                           ; 2 bytes @ 0x1F
   668   000020                     	ds	2
   669   000022                     motor_action@color:
   670                           	callstack 0
   671                           
   672                           ; 2 bytes @ 0x21
   673   000022                     	ds	2
   674   000024                     motor_action@l:
   675                           	callstack 0
   676                           
   677                           ; 2 bytes @ 0x23
   678   000024                     	ds	2
   679   000026                     ??_dtoa:
   680   000026                     motor_action@r:
   681                           	callstack 0
   682                           
   683                           ; 2 bytes @ 0x25
   684   000026                     	ds	2
   685   000028                     ??_motor_action:
   686                           
   687                           ; 1 bytes @ 0x27
   688   000028                     	ds	6
   689   00002E                     _dtoa$2419:
   690                           	callstack 0
   691                           
   692                           ; 2 bytes @ 0x2D
   693   00002E                     	ds	2
   694   000030                     dtoa@p:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0x2F
   698   000030                     	ds	2
   699   000032                     dtoa@w:
   700                           	callstack 0
   701                           
   702                           ; 2 bytes @ 0x31
   703   000032                     	ds	2
   704   000034                     dtoa@n:
   705                           	callstack 0
   706                           
   707                           ; 8 bytes @ 0x33
   708   000034                     	ds	8
   709   00003C                     dtoa@i:
   710                           	callstack 0
   711                           
   712                           ; 2 bytes @ 0x3B
   713   00003C                     	ds	2
   714   00003E                     dtoa@s:
   715                           	callstack 0
   716                           
   717                           ; 1 bytes @ 0x3D
   718   00003E                     	ds	1
   719   00003F                     vfpfcnvrt@fp:
   720                           	callstack 0
   721                           
   722                           ; 2 bytes @ 0x3E
   723   00003F                     	ds	2
   724   000041                     vfpfcnvrt@fmt:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0x40
   728   000041                     	ds	2
   729   000043                     vfpfcnvrt@ap:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x42
   733   000043                     	ds	2
   734   000045                     ??_vfpfcnvrt:
   735                           
   736                           ; 1 bytes @ 0x44
   737   000045                     	ds	2
   738   000047                     vfpfcnvrt@convarg:
   739                           	callstack 0
   740                           
   741                           ; 8 bytes @ 0x46
   742   000047                     	ds	8
   743   00004F                     vfpfcnvrt@cp:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x4E
   747   00004F                     	ds	2
   748   000051                     ?_vfprintf:
   749                           	callstack 0
   750   000051                     vfprintf@fp:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0x50
   754   000051                     	ds	2
   755   000053                     vfprintf@fmt:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x52
   759   000053                     	ds	2
   760   000055                     vfprintf@ap:
   761                           	callstack 0
   762                           
   763                           ; 2 bytes @ 0x54
   764   000055                     	ds	2
   765   000057                     vfprintf@cfmt:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x56
   769   000057                     	ds	2
   770   000059                     ??_main:
   771                           
   772                           ; 1 bytes @ 0x58
   773   000059                     	ds	2
   774                           
   775 ;;
   776 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   777 ;;
   778 ;; *************** function _main *****************
   779 ;; Defined at:
   780 ;;		line 20 in file "../main.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;		None
   783 ;; Auto vars:     Size  Location     Type
   784 ;;  readout3      100    0[BANK1 ] unsigned char [100]
   785 ;;  readout2      100   27[BANK0 ] unsigned char [100]
   786 ;;  k               2    0        int 
   787 ;;  i               2    0        int 
   788 ;;  color_calibr   64  130[BANK1 ] int [32]
   789 ;;  time_path      30  100[BANK1 ] unsigned int [15]
   790 ;;  color_path     30  127[BANK0 ] unsigned int [15]
   791 ;;  motorL          9  211[BANK1 ] struct DC_motor
   792 ;;  motorR          9  202[BANK1 ] struct DC_motor
   793 ;;  RGB_recorded    8  194[BANK1 ] struct RGB_val
   794 ;;  RGB_calibrat    8  194[BANK1 ] struct RGB_val
   795 ;;  L_calibrated    8    0        struct RGB_val
   796 ;;  color_name      2    0        unsigned int 
   797 ;;  j               2    0        int 
   798 ;;  time_return     2    0        unsigned int 
   799 ;;  color_flag      2    0        unsigned int 
   800 ;;  upperbound_c    2    0        unsigned int 
   801 ;;  lowerbound_c    2    0        unsigned int 
   802 ;;  PWMcycle        1    0        unsigned char 
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   813 ;;      Locals:         0     130     220       0       0       0       0       0       0       0       0       0       
      +0       0       0
   814 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   815 ;;      Totals:         2     130     220       0       0       0       0       0       0       0       0       0       
      +0       0       0
   816 ;;Total ram usage:      352 bytes
   817 ;; Hardware stack levels required when called: 9
   818 ;; This function calls:
   819 ;;		_I2C_2_Master_Init
   820 ;;		_Interrupts_init
   821 ;;		_Timer0_init
   822 ;;		_color_click_init
   823 ;;		_color_processor_easy
   824 ;;		_color_processor_hard
   825 ;;		_color_read
   826 ;;		_forward
   827 ;;		_initDCmotorsPWM
   828 ;;		_initUSART4
   829 ;;		_motor_action
   830 ;;		_sendStringSerial4
   831 ;;		_setMotorPWM
   832 ;;		_spin_180
   833 ;;		_sprintf
   834 ;;		_stop
   835 ;; This function is called by:
   836 ;;		Startup code after reset
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text0
   841   001CC8                     __ptext0:
   842                           	callstack 0
   843   001CC8                     _main:
   844                           	callstack 22
   845   001CC8                     
   846                           ;../main.c: 22:     color_click_init();
   847   001CC8  EC54  F013         	call	_color_click_init	;wreg free
   848   001CCC                     
   849                           ;../main.c: 23:     initDCmotorsPWM(20);
   850   001CCC  0E00               	movlw	0
   851   001CCE  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   852   001CD0  0E14               	movlw	20
   853   001CD2  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   854   001CD4  EC95  F014         	call	_initDCmotorsPWM	;wreg free
   855   001CD8                     
   856                           ;../main.c: 24:     Interrupts_init();
   857   001CD8  EC9F  F015         	call	_Interrupts_init	;wreg free
   858   001CDC                     
   859                           ;../main.c: 25:     Timer0_init();
   860   001CDC  EC74  F015         	call	_Timer0_init	;wreg free
   861   001CE0                     
   862                           ;../main.c: 26:     I2C_2_Master_Init();
   863   001CE0  EC28  F015         	call	_I2C_2_Master_Init	;wreg free
   864   001CE4                     
   865                           ;../main.c: 27:     initUSART4();
   866   001CE4  EC84  F015         	call	_initUSART4	;wreg free
   867   001CE8                     
   868                           ;../main.c: 32:     motorL.power = 0;
   869   001CE8  0E00               	movlw	0
   870   001CEA  0101               	movlb	1	; () banked
   871   001CEC  6FD3               	movwf	main@motorL& (0+255),b
   872   001CEE                     
   873                           ; BSR set to: 1
   874                           ;../main.c: 33:     motorL.direction = 0;
   875   001CEE  0E00               	movlw	0
   876   001CF0  6FD4               	movwf	(main@motorL+1)& (0+255),b
   877   001CF2                     
   878                           ; BSR set to: 1
   879                           ;../main.c: 34:     motorL.dutyHighByte = (unsigned char *)(&PWM6DCH);
   880   001CF2  0EA3               	movlw	163
   881   001CF4  6FD5               	movwf	(main@motorL+2)& (0+255),b
   882   001CF6  0E0F               	movlw	15
   883   001CF8  6FD6               	movwf	(main@motorL+3)& (0+255),b
   884   001CFA                     
   885                           ; BSR set to: 1
   886                           ;../main.c: 35:     motorL.dir_LAT = (unsigned char *)(&LATE);
   887   001CFA  0E7D               	movlw	125
   888   001CFC  6FD7               	movwf	(main@motorL+4)& (0+255),b
   889   001CFE  0E0F               	movlw	15
   890   001D00  6FD8               	movwf	(main@motorL+5)& (0+255),b
   891   001D02                     
   892                           ; BSR set to: 1
   893                           ;../main.c: 36:     motorL.dir_pin = 4;
   894   001D02  0E04               	movlw	4
   895   001D04  6FD9               	movwf	(main@motorL+6)& (0+255),b
   896   001D06                     
   897                           ; BSR set to: 1
   898                           ;../main.c: 37:     motorL.PWMperiod = PWMcycle;
   899   001D06  0E00               	movlw	0
   900   001D08  6FDB               	movwf	(main@motorL+8)& (0+255),b
   901   001D0A  0EC8               	movlw	200
   902   001D0C  6FDA               	movwf	(main@motorL+7)& (0+255),b
   903   001D0E                     
   904                           ; BSR set to: 1
   905                           ;../main.c: 38:     motorR.power = 0;
   906   001D0E  0E00               	movlw	0
   907   001D10  6FCA               	movwf	main@motorR& (0+255),b
   908   001D12                     
   909                           ; BSR set to: 1
   910                           ;../main.c: 39:     motorR.direction = 0;
   911   001D12  0E00               	movlw	0
   912   001D14  6FCB               	movwf	(main@motorR+1)& (0+255),b
   913                           
   914                           ;../main.c: 40:     motorR.dutyHighByte = (unsigned char *)(&PWM7DCH);
   915   001D16  0EA0               	movlw	160
   916   001D18  6FCC               	movwf	(main@motorR+2)& (0+255),b
   917   001D1A  0E0F               	movlw	15
   918   001D1C  6FCD               	movwf	(main@motorR+3)& (0+255),b
   919                           
   920                           ;../main.c: 41:     motorR.dir_LAT = (unsigned char *)(&LATG);
   921   001D1E  0E7F               	movlw	127
   922   001D20  6FCE               	movwf	(main@motorR+4)& (0+255),b
   923   001D22  0E0F               	movlw	15
   924   001D24  6FCF               	movwf	(main@motorR+5)& (0+255),b
   925   001D26                     
   926                           ; BSR set to: 1
   927                           ;../main.c: 42:     motorR.dir_pin = 6;
   928   001D26  0E06               	movlw	6
   929   001D28  6FD0               	movwf	(main@motorR+6)& (0+255),b
   930   001D2A                     
   931                           ; BSR set to: 1
   932                           ;../main.c: 43:     motorR.PWMperiod = PWMcycle;
   933   001D2A  0E00               	movlw	0
   934   001D2C  6FD2               	movwf	(main@motorR+8)& (0+255),b
   935   001D2E  0EC8               	movlw	200
   936   001D30  6FD1               	movwf	(main@motorR+7)& (0+255),b
   937   001D32                     
   938                           ; BSR set to: 1
   939                           ;../main.c: 44:     setMotorPWM(&motorL);
   940   001D32  0ED3               	movlw	low main@motorL
   941   001D34  6E0F               	movwf	setMotorPWM@m^0,c
   942   001D36  0E01               	movlw	high main@motorL
   943   001D38  6E10               	movwf	(setMotorPWM@m+1)^0,c
   944   001D3A  EC54  F00B         	call	_setMotorPWM	;wreg free
   945   001D3E                     
   946                           ;../main.c: 45:     setMotorPWM(&motorR);
   947   001D3E  0ECA               	movlw	low main@motorR
   948   001D40  6E0F               	movwf	setMotorPWM@m^0,c
   949   001D42  0E01               	movlw	high main@motorR
   950   001D44  6E10               	movwf	(setMotorPWM@m+1)^0,c
   951   001D46  EC54  F00B         	call	_setMotorPWM	;wreg free
   952   001D4A                     
   953                           ;../main.c: 50:     unsigned int color_path[15] = {0};
   954   001D4A  EE20  F0DF         	lfsr	2,main@color_path
   955   001D4E  0E1D               	movlw	29
   956   001D50                     u1641:
   957   001D50  6ADE               	clrf	postinc2,c
   958   001D52  06E8               	decf	wreg,f,c
   959   001D54  E2FD               	bc	u1641
   960   001D56                     
   961                           ;../main.c: 51:     int color_calibrated[32];;../main.c: 52:     unsigned int lowerbound
      +                          _calibrated;;../main.c: 53:     unsigned int upperbound_calibrated;;../main.c: 54:     s
      +                          truct RGB_val RGB_calibrated;;../main.c: 55:     struct RGB_val L_calibrated;;../main.c:
      +                           56:     struct RGB_val RGB_recorded;;../main.c: 57:     unsigned int time_path[15] = {0
      +                          };
   962   001D56  EE21  F064         	lfsr	2,main@time_path
   963   001D5A  0E1D               	movlw	29
   964   001D5C                     u1651:
   965   001D5C  6ADE               	clrf	postinc2,c
   966   001D5E  06E8               	decf	wreg,f,c
   967   001D60  E2FD               	bc	u1651
   968   001D62                     l3146:
   969                           
   970                           ;../main.c: 68:         motor_action(8,&motorL,&motorR);
   971   001D62  0E00               	movlw	0
   972   001D64  6E23               	movwf	(motor_action@color+1)^0,c
   973   001D66  0E08               	movlw	8
   974   001D68  6E22               	movwf	motor_action@color^0,c
   975   001D6A  0ED3               	movlw	low main@motorL
   976   001D6C  6E24               	movwf	motor_action@l^0,c
   977   001D6E  0E01               	movlw	high main@motorL
   978   001D70  6E25               	movwf	(motor_action@l+1)^0,c
   979   001D72  0ECA               	movlw	low main@motorR
   980   001D74  6E26               	movwf	motor_action@r^0,c
   981   001D76  0E01               	movlw	high main@motorR
   982   001D78  6E27               	movwf	(motor_action@r+1)^0,c
   983   001D7A  EC0A  F007         	call	_motor_action	;wreg free
   984   001D7E                     
   985                           ;../main.c: 69:         stop(&motorL,&motorR);
   986   001D7E  0ED3               	movlw	low main@motorL
   987   001D80  6E1A               	movwf	stop@mL^0,c
   988   001D82  0E01               	movlw	high main@motorL
   989   001D84  6E1B               	movwf	(stop@mL+1)^0,c
   990   001D86  0ECA               	movlw	low main@motorR
   991   001D88  6E1C               	movwf	stop@mR^0,c
   992   001D8A  0E01               	movlw	high main@motorR
   993   001D8C  6E1D               	movwf	(stop@mR+1)^0,c
   994   001D8E  EC8B  F012         	call	_stop	;wreg free
   995   001D92                     
   996                           ;../main.c: 71:         _delay((unsigned long)((2000)*(64000000/4000.0)));
   997   001D92  0EA3               	movlw	163
   998   001D94  6E5A               	movwf	(??_main+1)^0,c
   999   001D96  0E57               	movlw	87
  1000   001D98  6E59               	movwf	??_main^0,c
  1001   001D9A  0E02               	movlw	2
  1002   001D9C                     u1687:
  1003   001D9C  2EE8               	decfsz	wreg,f,c
  1004   001D9E  D7FE               	bra	u1687
  1005   001DA0  2E59               	decfsz	??_main^0,f,c
  1006   001DA2  D7FC               	bra	u1687
  1007   001DA4  2E5A               	decfsz	(??_main+1)^0,f,c
  1008   001DA6  D7FA               	bra	u1687
  1009   001DA8  D000               	nop2	
  1010   001DAA  EFB1  F00E         	goto	l3146
  1011   001DAE  EF1F  F000         	goto	start
  1012   001DB2                     __end_of_main:
  1013                           	callstack 0
  1014                           
  1015 ;; *************** function _sprintf *****************
  1016 ;; Defined at:
  1017 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;  s               2    0[BANK0 ] PTR unsigned char 
  1020 ;;		 -> main@readout3(100), main@readout2(100), 
  1021 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1022 ;;		 -> STR_2(18), STR_1(15), 
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;  f              11   16[BANK0 ] struct _IO_FILE
  1025 ;;  ap              2   14[BANK0 ] PTR void [1]
  1026 ;;		 -> ?_sprintf(2), 
  1027 ;;  ret             2    0        int 
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  2    0[BANK0 ] int 
  1030 ;; Registers used:
  1031 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1037 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1038 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1040 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1041 ;;Total ram usage:       27 bytes
  1042 ;; Hardware stack levels used: 1
  1043 ;; Hardware stack levels required when called: 8
  1044 ;; This function calls:
  1045 ;;		_vfprintf
  1046 ;; This function is called by:
  1047 ;;		_main
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text1
  1052   002702                     __ptext1:
  1053                           	callstack 0
  1054   002702                     _sprintf:
  1055                           	callstack 22
  1056   002702  0E64               	movlw	low (?_sprintf+4)
  1057   002704  0100               	movlb	0	; () banked
  1058   002706  6F6E               	movwf	sprintf@ap& (0+255),b
  1059   002708  0E00               	movlw	high (?_sprintf+4)
  1060   00270A  6F6F               	movwf	(sprintf@ap+1)& (0+255),b
  1061   00270C  C060  F070         	movff	sprintf@s,sprintf@f
  1062   002710  C061  F071         	movff	sprintf@s+1,sprintf@f+1
  1063   002714                     
  1064                           ; BSR set to: 0
  1065   002714  0E00               	movlw	0
  1066   002716  6F74               	movwf	(sprintf@f+4)& (0+255),b
  1067   002718  0E00               	movlw	0
  1068   00271A  6F73               	movwf	(sprintf@f+3)& (0+255),b
  1069   00271C                     
  1070                           ; BSR set to: 0
  1071   00271C  0E00               	movlw	0
  1072   00271E  6F7A               	movwf	(sprintf@f+10)& (0+255),b
  1073   002720  0E00               	movlw	0
  1074   002722  6F79               	movwf	(sprintf@f+9)& (0+255),b
  1075   002724                     
  1076                           ; BSR set to: 0
  1077   002724  0E70               	movlw	low sprintf@f
  1078   002726  6E51               	movwf	vfprintf@fp^0,c
  1079   002728  0E00               	movlw	high sprintf@f
  1080   00272A  6E52               	movwf	(vfprintf@fp+1)^0,c
  1081   00272C  C062  F053         	movff	sprintf@fmt,vfprintf@fmt
  1082   002730  C063  F054         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1083   002734  0E6E               	movlw	low sprintf@ap
  1084   002736  6E55               	movwf	vfprintf@ap^0,c
  1085   002738  0E00               	movlw	high sprintf@ap
  1086   00273A  6E56               	movwf	(vfprintf@ap+1)^0,c
  1087   00273C  ECAA  F013         	call	_vfprintf	;wreg free
  1088   002740  0100               	movlb	0	; () banked
  1089   002742  5173               	movf	(sprintf@f+3)& (0+255),w,b
  1090   002744  2560               	addwf	sprintf@s& (0+255),w,b
  1091   002746  6ED9               	movwf	fsr2l,c
  1092   002748  5174               	movf	(sprintf@f+4)& (0+255),w,b
  1093   00274A  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  1094   00274C  6EDA               	movwf	fsr2h,c
  1095   00274E  0E00               	movlw	0
  1096   002750  6EDF               	movwf	indf2,c
  1097   002752                     
  1098                           ; BSR set to: 0
  1099   002752  0012               	return		;funcret
  1100   002754                     __end_of_sprintf:
  1101                           	callstack 0
  1102                           
  1103 ;; *************** function _vfprintf *****************
  1104 ;; Defined at:
  1105 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1106 ;; Parameters:    Size  Location     Type
  1107 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
  1108 ;;		 -> sprintf@f(11), 
  1109 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
  1110 ;;		 -> STR_2(18), STR_1(15), 
  1111 ;;  ap              2   84[COMRAM] PTR PTR void 
  1112 ;;		 -> sprintf@ap(2), 
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;  cfmt            2   86[COMRAM] PTR unsigned char 
  1115 ;;		 -> STR_2(18), STR_1(15), 
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  2   80[COMRAM] int 
  1118 ;; Registers used:
  1119 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1125 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1126 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1128 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1129 ;;Total ram usage:        8 bytes
  1130 ;; Hardware stack levels used: 1
  1131 ;; Hardware stack levels required when called: 7
  1132 ;; This function calls:
  1133 ;;		_vfpfcnvrt
  1134 ;; This function is called by:
  1135 ;;		_sprintf
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           	psect	text2
  1140   002754                     __ptext2:
  1141                           	callstack 0
  1142   002754                     _vfprintf:
  1143                           	callstack 22
  1144   002754                     
  1145                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  1146   002754  C053  F057         	movff	vfprintf@fmt,vfprintf@cfmt
  1147   002758  C054  F058         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1148                           
  1149                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1150   00275C  EFBE  F013         	goto	l2808
  1151   002760                     l2806:
  1152                           
  1153                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1154   002760  C051  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1155   002764  C052  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1156   002768  0E57               	movlw	low vfprintf@cfmt
  1157   00276A  6E41               	movwf	vfpfcnvrt@fmt^0,c
  1158   00276C  0E00               	movlw	high vfprintf@cfmt
  1159   00276E  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1160   002770  C055  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
  1161   002774  C056  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1162   002778  ECB4  F00D         	call	_vfpfcnvrt	;wreg free
  1163   00277C                     l2808:
  1164                           
  1165                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1166   00277C  C057  FFF6         	movff	vfprintf@cfmt,tblptrl
  1167   002780  C058  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1168   002784                     	if	0	;tblptru may be non-zero
  1169   002784                     	endif
  1170   002784                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1171   002784  0E00               	movlw	low (__mediumconst shr (0+16))
  1172   002786  6EF8               	movwf	tblptru,c
  1173   002788                     	endif
  1174   002788  0008               	tblrd		*
  1175   00278A  50F5               	movf	tablat,w,c
  1176   00278C  0900               	iorlw	0
  1177   00278E  A4D8               	btfss	status,2,c
  1178   002790  EFCC  F013         	goto	u1421
  1179   002794  EFCE  F013         	goto	u1420
  1180   002798                     u1421:
  1181   002798  EFB0  F013         	goto	l2806
  1182   00279C                     u1420:
  1183   00279C                     
  1184                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  1185   00279C  0E00               	movlw	0
  1186   00279E  6E52               	movwf	(?_vfprintf+1)^0,c
  1187   0027A0  0E00               	movlw	0
  1188   0027A2  6E51               	movwf	?_vfprintf^0,c
  1189   0027A4  0012               	return		;funcret
  1190   0027A6                     __end_of_vfprintf:
  1191                           	callstack 0
  1192                           
  1193 ;; *************** function _vfpfcnvrt *****************
  1194 ;; Defined at:
  1195 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
  1198 ;;		 -> sprintf@f(11), 
  1199 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
  1200 ;;		 -> vfprintf@cfmt(2), 
  1201 ;;  ap              2   66[COMRAM] PTR PTR void 
  1202 ;;		 -> sprintf@ap(2), 
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;  convarg         8   70[COMRAM] struct .
  1205 ;;  cp              2   78[COMRAM] PTR unsigned char 
  1206 ;;		 -> STR_2(18), STR_1(15), 
  1207 ;;  i               2    0        int 
  1208 ;;  done            2    0        int 
  1209 ;;  c               1    0        unsigned char 
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  1    wreg      void 
  1212 ;; Registers used:
  1213 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1219 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1220 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1221 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1222 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1223 ;;Total ram usage:       18 bytes
  1224 ;; Hardware stack levels used: 1
  1225 ;; Hardware stack levels required when called: 6
  1226 ;; This function calls:
  1227 ;;		_dtoa
  1228 ;;		_fputc
  1229 ;; This function is called by:
  1230 ;;		_vfprintf
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           	psect	text3
  1235   001B68                     __ptext3:
  1236                           	callstack 0
  1237   001B68                     _vfpfcnvrt:
  1238                           	callstack 22
  1239   001B68                     
  1240                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  1241   001B68  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1242   001B6C  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1243   001B70  CFDE FFF6          	movff	postinc2,tblptrl
  1244   001B74  CFDD FFF7          	movff	postdec2,tblptrh
  1245   001B78                     	if	0	;tblptru may be non-zero
  1246   001B78                     	endif
  1247   001B78                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1248   001B78  0E00               	movlw	low (__mediumconst shr (0+16))
  1249   001B7A  6EF8               	movwf	tblptru,c
  1250   001B7C                     	endif
  1251   001B7C  0008               	tblrd		*
  1252   001B7E  50F5               	movf	tablat,w,c
  1253   001B80  0A25               	xorlw	37
  1254   001B82  A4D8               	btfss	status,2,c
  1255   001B84  EFC6  F00D         	goto	u1301
  1256   001B88  EFC8  F00D         	goto	u1300
  1257   001B8C                     u1301:
  1258   001B8C  EF4D  F00E         	goto	l2576
  1259   001B90                     u1300:
  1260   001B90                     
  1261                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  1262   001B90  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1263   001B94  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1264   001B98  2ADE               	incf	postinc2,f,c
  1265   001B9A  0E00               	movlw	0
  1266   001B9C  22DD               	addwfc	postdec2,f,c
  1267   001B9E                     
  1268                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  1269   001B9E  0E00               	movlw	0
  1270   001BA0  0101               	movlb	1	; () banked
  1271   001BA2  6FF1               	movwf	(_width+1)& (0+255),b
  1272   001BA4  0E00               	movlw	0
  1273   001BA6  6FF0               	movwf	_width& (0+255),b
  1274   001BA8  C1F0  F0FF         	movff	_width,_flags
  1275   001BAC                     
  1276                           ; BSR set to: 1
  1277                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  1278   001BAC  0100               	movlb	0	; () banked
  1279   001BAE  69FD               	setf	_prec& (0+255),b
  1280   001BB0  69FE               	setf	(_prec+1)& (0+255),b
  1281   001BB2                     
  1282                           ; BSR set to: 0
  1283                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1284   001BB2  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1285   001BB6  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1286   001BBA  CFDE F04F          	movff	postinc2,vfpfcnvrt@cp
  1287   001BBE  CFDD F050          	movff	postdec2,vfpfcnvrt@cp+1
  1288   001BC2                     
  1289                           ; BSR set to: 0
  1290                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1291   001BC2  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1292   001BC6  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1293   001BCA                     	if	0	;tblptru may be non-zero
  1294   001BCA                     	endif
  1295   001BCA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1296   001BCA  0E00               	movlw	low (__mediumconst shr (0+16))
  1297   001BCC  6EF8               	movwf	tblptru,c
  1298   001BCE                     	endif
  1299   001BCE  0008               	tblrd		*
  1300   001BD0  50F5               	movf	tablat,w,c
  1301   001BD2  0A64               	xorlw	100
  1302   001BD4  B4D8               	btfsc	status,2,c
  1303   001BD6  EFEF  F00D         	goto	u1311
  1304   001BDA  EFF1  F00D         	goto	u1310
  1305   001BDE                     u1311:
  1306   001BDE  EF01  F00E         	goto	l2566
  1307   001BE2                     u1310:
  1308   001BE2                     
  1309                           ; BSR set to: 0
  1310   001BE2  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1311   001BE6  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1312   001BEA                     	if	0	;tblptru may be non-zero
  1313   001BEA                     	endif
  1314   001BEA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1315   001BEA  0E00               	movlw	low (__mediumconst shr (0+16))
  1316   001BEC  6EF8               	movwf	tblptru,c
  1317   001BEE                     	endif
  1318   001BEE  0008               	tblrd		*
  1319   001BF0  50F5               	movf	tablat,w,c
  1320   001BF2  0A69               	xorlw	105
  1321   001BF4  A4D8               	btfss	status,2,c
  1322   001BF6  EFFF  F00D         	goto	u1321
  1323   001BFA  EF01  F00E         	goto	u1320
  1324   001BFE                     u1321:
  1325   001BFE  EF44  F00E         	goto	l2572
  1326   001C02                     u1320:
  1327   001C02                     l2566:
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1331   001C02  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1332   001C06  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1333   001C0A  CFDF F045          	movff	indf2,??_vfpfcnvrt
  1334   001C0E  0E02               	movlw	2
  1335   001C10  26DE               	addwf	postinc2,f,c
  1336   001C12  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  1337   001C16  0E00               	movlw	0
  1338   001C18  22DD               	addwfc	postdec2,f,c
  1339   001C1A  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1340   001C1E  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1341   001C22  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg
  1342   001C26  CFDD F048          	movff	postdec2,vfpfcnvrt@convarg+1
  1343   001C2A  0E00               	movlw	0
  1344   001C2C  BE48               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1345   001C2E  0EFF               	movlw	-1
  1346   001C30  6E49               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1347   001C32  6E4A               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1348   001C34  6E4B               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1349   001C36  6E4C               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1350   001C38  6E4D               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1351   001C3A  6E4E               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1352                           
  1353                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1354   001C3C  0E01               	movlw	1
  1355   001C3E  244F               	addwf	vfpfcnvrt@cp^0,w,c
  1356   001C40  6E45               	movwf	??_vfpfcnvrt^0,c
  1357   001C42  0E00               	movlw	0
  1358   001C44  2050               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1359   001C46  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  1360   001C48  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1361   001C4C  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1362   001C50  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  1363   001C54  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1364   001C58                     
  1365                           ; BSR set to: 0
  1366                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1367   001C58  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1368   001C5C  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1369   001C60  C047  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  1370   001C64  C048  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1371   001C68  C049  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1372   001C6C  C04A  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1373   001C70  C04B  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1374   001C74  C04C  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1375   001C78  C04D  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1376   001C7C  C04E  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1377   001C80  EC23  F009         	call	_dtoa	;wreg free
  1378   001C84  EF63  F00E         	goto	l1180
  1379   001C88                     l2572:
  1380                           
  1381                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1382   001C88  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1383   001C8C  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1384   001C90  2ADE               	incf	postinc2,f,c
  1385   001C92  0E00               	movlw	0
  1386   001C94  22DD               	addwfc	postdec2,f,c
  1387   001C96  EF63  F00E         	goto	l1180
  1388   001C9A                     l2576:
  1389                           
  1390                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1391   001C9A  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1392   001C9E  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1393   001CA2  CFDE FFF6          	movff	postinc2,tblptrl
  1394   001CA6  CFDD FFF7          	movff	postdec2,tblptrh
  1395   001CAA                     	if	0	;tblptru may be non-zero
  1396   001CAA                     	endif
  1397   001CAA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1398   001CAA  0E00               	movlw	low (__mediumconst shr (0+16))
  1399   001CAC  6EF8               	movwf	tblptru,c
  1400   001CAE                     	endif
  1401   001CAE  0008               	tblrd		*
  1402   001CB0  50F5               	movf	tablat,w,c
  1403   001CB2  6E01               	movwf	fputc@c^0,c
  1404   001CB4  6A02               	clrf	(fputc@c+1)^0,c
  1405   001CB6  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1406   001CBA  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1407   001CBE  ECD9  F00E         	call	_fputc	;wreg free
  1408   001CC2  EF44  F00E         	goto	l2572
  1409   001CC6                     l1180:
  1410   001CC6  0012               	return		;funcret
  1411   001CC8                     __end_of_vfpfcnvrt:
  1412                           	callstack 0
  1413                           
  1414 ;; *************** function _dtoa *****************
  1415 ;; Defined at:
  1416 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1419 ;;		 -> sprintf@f(11), 
  1420 ;;  d               8   29[COMRAM] long long 
  1421 ;; Auto vars:     Size  Location     Type
  1422 ;;  n               8   51[COMRAM] long long 
  1423 ;;  i               2   59[COMRAM] int 
  1424 ;;  w               2   49[COMRAM] int 
  1425 ;;  p               2   47[COMRAM] int 
  1426 ;;  s               1   61[COMRAM] unsigned char 
  1427 ;; Return value:  Size  Location     Type
  1428 ;;                  1    wreg      void 
  1429 ;; Registers used:
  1430 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1436 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1437 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1438 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1439 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1440 ;;Total ram usage:       35 bytes
  1441 ;; Hardware stack levels used: 1
  1442 ;; Hardware stack levels required when called: 5
  1443 ;; This function calls:
  1444 ;;		___aodiv
  1445 ;;		___aomod
  1446 ;;		_abs
  1447 ;;		_pad
  1448 ;; This function is called by:
  1449 ;;		_vfpfcnvrt
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text4
  1454   001246                     __ptext4:
  1455                           	callstack 0
  1456   001246                     _dtoa:
  1457                           	callstack 22
  1458   001246                     
  1459                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  1460   001246  C01E  F034         	movff	dtoa@d,dtoa@n
  1461   00124A  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  1462   00124E  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  1463   001252  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  1464   001256  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  1465   00125A  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  1466   00125E  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  1467   001262  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  1468   001266                     
  1469                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  1470   001266  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  1471   001268  EF38  F009         	goto	u1141
  1472   00126C  EF3B  F009         	goto	u1140
  1473   001270                     u1141:
  1474   001270  0E01               	movlw	1
  1475   001272  EF3C  F009         	goto	u1150
  1476   001276                     u1140:
  1477   001276  0E00               	movlw	0
  1478   001278                     u1150:
  1479   001278  6E3E               	movwf	dtoa@s^0,c
  1480   00127A                     
  1481                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  1482   00127A  503E               	movf	dtoa@s^0,w,c
  1483   00127C  B4D8               	btfsc	status,2,c
  1484   00127E  EF43  F009         	goto	u1161
  1485   001282  EF45  F009         	goto	u1160
  1486   001286                     u1161:
  1487   001286  EF55  F009         	goto	l2464
  1488   00128A                     u1160:
  1489   00128A                     
  1490                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  1491   00128A  1E3B               	comf	(dtoa@n+7)^0,f,c
  1492   00128C  1E3A               	comf	(dtoa@n+6)^0,f,c
  1493   00128E  1E39               	comf	(dtoa@n+5)^0,f,c
  1494   001290  1E38               	comf	(dtoa@n+4)^0,f,c
  1495   001292  1E37               	comf	(dtoa@n+3)^0,f,c
  1496   001294  1E36               	comf	(dtoa@n+2)^0,f,c
  1497   001296  1E35               	comf	(dtoa@n+1)^0,f,c
  1498   001298  6C34               	negf	dtoa@n^0,c
  1499   00129A  0E00               	movlw	0
  1500   00129C  2235               	addwfc	(dtoa@n+1)^0,f,c
  1501   00129E  2236               	addwfc	(dtoa@n+2)^0,f,c
  1502   0012A0  2237               	addwfc	(dtoa@n+3)^0,f,c
  1503   0012A2  2238               	addwfc	(dtoa@n+4)^0,f,c
  1504   0012A4  2239               	addwfc	(dtoa@n+5)^0,f,c
  1505   0012A6  223A               	addwfc	(dtoa@n+6)^0,f,c
  1506   0012A8  223B               	addwfc	(dtoa@n+7)^0,f,c
  1507   0012AA                     l2464:
  1508                           
  1509                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  1510   0012AA  0100               	movlb	0	; () banked
  1511   0012AC  BFFE               	btfsc	(_prec+1)& (0+255),7,b
  1512   0012AE  EF63  F009         	goto	u1170
  1513   0012B2  51FE               	movf	(_prec+1)& (0+255),w,b
  1514   0012B4  E106               	bnz	u1171
  1515   0012B6  05FD               	decf	_prec& (0+255),w,b
  1516   0012B8  B0D8               	btfsc	status,0,c
  1517   0012BA  EF61  F009         	goto	u1171
  1518   0012BE  EF63  F009         	goto	u1170
  1519   0012C2                     u1171:
  1520   0012C2  EF69  F009         	goto	l1159
  1521   0012C6                     u1170:
  1522   0012C6                     
  1523                           ; BSR set to: 0
  1524   0012C6  0E00               	movlw	0
  1525   0012C8  6E31               	movwf	(dtoa@p+1)^0,c
  1526   0012CA  0E01               	movlw	1
  1527   0012CC  6E30               	movwf	dtoa@p^0,c
  1528   0012CE  EF6D  F009         	goto	l1161
  1529   0012D2                     l1159:
  1530                           
  1531                           ; BSR set to: 0
  1532   0012D2  C0FD  F030         	movff	_prec,dtoa@p
  1533   0012D6  C0FE  F031         	movff	_prec+1,dtoa@p+1
  1534   0012DA                     l1161:
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  1538   0012DA  C1F0  F032         	movff	_width,dtoa@w
  1539   0012DE  C1F1  F033         	movff	_width+1,dtoa@w+1
  1540   0012E2                     
  1541                           ; BSR set to: 0
  1542                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  1543   0012E2  503E               	movf	dtoa@s^0,w,c
  1544   0012E4  B4D8               	btfsc	status,2,c
  1545   0012E6  EF77  F009         	goto	u1181
  1546   0012EA  EF79  F009         	goto	u1180
  1547   0012EE                     u1181:
  1548   0012EE  EF90  F009         	goto	l1162
  1549   0012F2                     u1180:
  1550   0012F2                     
  1551                           ; BSR set to: 0
  1552                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  1553   0012F2  0632               	decf	dtoa@w^0,f,c
  1554   0012F4  A0D8               	btfss	status,0,c
  1555   0012F6  0633               	decf	(dtoa@w+1)^0,f,c
  1556   0012F8                     
  1557                           ; BSR set to: 0
  1558                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  1559   0012F8  503E               	movf	dtoa@s^0,w,c
  1560   0012FA  A4D8               	btfss	status,2,c
  1561   0012FC  EF82  F009         	goto	u1191
  1562   001300  EF84  F009         	goto	u1190
  1563   001304                     u1191:
  1564   001304  EF8A  F009         	goto	l2476
  1565   001308                     u1190:
  1566   001308                     
  1567                           ; BSR set to: 0
  1568   001308  0E00               	movlw	0
  1569   00130A  6E2F               	movwf	(_dtoa$2419+1)^0,c
  1570   00130C  0E2B               	movlw	43
  1571   00130E  6E2E               	movwf	_dtoa$2419^0,c
  1572   001310  EF8E  F009         	goto	l2478
  1573   001314                     l2476:
  1574                           
  1575                           ; BSR set to: 0
  1576   001314  0E00               	movlw	0
  1577   001316  6E2F               	movwf	(_dtoa$2419+1)^0,c
  1578   001318  0E2D               	movlw	45
  1579   00131A  6E2E               	movwf	_dtoa$2419^0,c
  1580   00131C                     l2478:
  1581                           
  1582                           ; BSR set to: 0
  1583   00131C  C02E  F03E         	movff	_dtoa$2419,dtoa@s
  1584   001320                     l1162:
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  1588   001320  0E00               	movlw	0
  1589   001322  6E3D               	movwf	(dtoa@i+1)^0,c
  1590   001324  0E1F               	movlw	31
  1591   001326  6E3C               	movwf	dtoa@i^0,c
  1592   001328                     
  1593                           ; BSR set to: 0
  1594                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  1595   001328  0E00               	movlw	0
  1596   00132A  0102               	movlb	2	; () banked
  1597   00132C  6F97               	movwf	(_dbuf+31)& (0+255),b
  1598                           
  1599                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1600   00132E  EF15  F00A         	goto	l2492
  1601   001332                     l2482:
  1602                           
  1603                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  1604   001332  063C               	decf	dtoa@i^0,f,c
  1605   001334  A0D8               	btfss	status,0,c
  1606   001336  063D               	decf	(dtoa@i+1)^0,f,c
  1607   001338                     
  1608                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1609   001338  0E78               	movlw	low _dbuf
  1610   00133A  243C               	addwf	dtoa@i^0,w,c
  1611   00133C  6ED9               	movwf	fsr2l,c
  1612   00133E  0E02               	movlw	high _dbuf
  1613   001340  203D               	addwfc	(dtoa@i+1)^0,w,c
  1614   001342  6EDA               	movwf	fsr2h,c
  1615   001344  C034  F001         	movff	dtoa@n,___aomod@dividend
  1616   001348  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1617   00134C  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1618   001350  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1619   001354  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1620   001358  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1621   00135C  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1622   001360  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1623   001364  0E0A               	movlw	10
  1624   001366  6E09               	movwf	___aomod@divisor^0,c
  1625   001368  0E00               	movlw	0
  1626   00136A  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1627   00136C  0E00               	movlw	0
  1628   00136E  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1629   001370  0E00               	movlw	0
  1630   001372  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1631   001374  0E00               	movlw	0
  1632   001376  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1633   001378  0E00               	movlw	0
  1634   00137A  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1635   00137C  0E00               	movlw	0
  1636   00137E  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1637   001380  0E00               	movlw	0
  1638   001382  6E10               	movwf	(___aomod@divisor+7)^0,c
  1639   001384  EC02  F00D         	call	___aomod	;wreg free
  1640   001388  C001  F026         	movff	?___aomod,??_dtoa
  1641   00138C  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1642   001390  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1643   001394  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1644   001398  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1645   00139C  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1646   0013A0  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1647   0013A4  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1648   0013A8  C026  F013         	movff	??_dtoa,abs@a
  1649   0013AC  C027  F014         	movff	??_dtoa+1,abs@a+1
  1650   0013B0  ECD7  F014         	call	_abs	;wreg free
  1651   0013B4  5013               	movf	?_abs^0,w,c
  1652   0013B6  0F30               	addlw	48
  1653   0013B8  6EDF               	movwf	indf2,c
  1654   0013BA                     
  1655                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  1656   0013BA  0630               	decf	dtoa@p^0,f,c
  1657   0013BC  A0D8               	btfss	status,0,c
  1658   0013BE  0631               	decf	(dtoa@p+1)^0,f,c
  1659   0013C0                     
  1660                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  1661   0013C0  0632               	decf	dtoa@w^0,f,c
  1662   0013C2  A0D8               	btfss	status,0,c
  1663   0013C4  0633               	decf	(dtoa@w+1)^0,f,c
  1664   0013C6                     
  1665                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  1666   0013C6  C034  F001         	movff	dtoa@n,___aodiv@dividend
  1667   0013CA  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1668   0013CE  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1669   0013D2  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1670   0013D6  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1671   0013DA  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1672   0013DE  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1673   0013E2  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1674   0013E6  0E0A               	movlw	10
  1675   0013E8  6E09               	movwf	___aodiv@divisor^0,c
  1676   0013EA  0E00               	movlw	0
  1677   0013EC  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1678   0013EE  0E00               	movlw	0
  1679   0013F0  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1680   0013F2  0E00               	movlw	0
  1681   0013F4  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1682   0013F6  0E00               	movlw	0
  1683   0013F8  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1684   0013FA  0E00               	movlw	0
  1685   0013FC  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1686   0013FE  0E00               	movlw	0
  1687   001400  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1688   001402  0E00               	movlw	0
  1689   001404  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1690   001406  EC3E  F00C         	call	___aodiv	;wreg free
  1691   00140A  C001  F034         	movff	?___aodiv,dtoa@n
  1692   00140E  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  1693   001412  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  1694   001416  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  1695   00141A  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  1696   00141E  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  1697   001422  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  1698   001426  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  1699   00142A                     l2492:
  1700                           
  1701                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1702   00142A  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  1703   00142C  EF20  F00A         	goto	u1201
  1704   001430  503D               	movf	(dtoa@i+1)^0,w,c
  1705   001432  E108               	bnz	u1200
  1706   001434  043C               	decf	dtoa@i^0,w,c
  1707   001436  A0D8               	btfss	status,0,c
  1708   001438  EF20  F00A         	goto	u1201
  1709   00143C  EF22  F00A         	goto	u1200
  1710   001440                     u1201:
  1711   001440  EF3E  F00A         	goto	l2498
  1712   001444                     u1200:
  1713   001444  5034               	movf	dtoa@n^0,w,c
  1714   001446  1035               	iorwf	(dtoa@n+1)^0,w,c
  1715   001448  1036               	iorwf	(dtoa@n+2)^0,w,c
  1716   00144A  1037               	iorwf	(dtoa@n+3)^0,w,c
  1717   00144C  1038               	iorwf	(dtoa@n+4)^0,w,c
  1718   00144E  1039               	iorwf	(dtoa@n+5)^0,w,c
  1719   001450  103A               	iorwf	(dtoa@n+6)^0,w,c
  1720   001452  103B               	iorwf	(dtoa@n+7)^0,w,c
  1721   001454  A4D8               	btfss	status,2,c
  1722   001456  EF2F  F00A         	goto	u1211
  1723   00145A  EF31  F00A         	goto	u1210
  1724   00145E                     u1211:
  1725   00145E  EF99  F009         	goto	l2482
  1726   001462                     u1210:
  1727   001462  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1728   001464  EF3E  F00A         	goto	u1220
  1729   001468  5031               	movf	(dtoa@p+1)^0,w,c
  1730   00146A  E106               	bnz	u1221
  1731   00146C  0430               	decf	dtoa@p^0,w,c
  1732   00146E  B0D8               	btfsc	status,0,c
  1733   001470  EF3C  F00A         	goto	u1221
  1734   001474  EF3E  F00A         	goto	u1220
  1735   001478                     u1221:
  1736   001478  EF99  F009         	goto	l2482
  1737   00147C                     u1220:
  1738   00147C                     l2498:
  1739                           
  1740                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  1741   00147C  503E               	movf	dtoa@s^0,w,c
  1742   00147E  B4D8               	btfsc	status,2,c
  1743   001480  EF44  F00A         	goto	u1231
  1744   001484  EF46  F00A         	goto	u1230
  1745   001488                     u1231:
  1746   001488  EF51  F00A         	goto	l2504
  1747   00148C                     u1230:
  1748   00148C                     
  1749                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  1750   00148C  063C               	decf	dtoa@i^0,f,c
  1751   00148E  A0D8               	btfss	status,0,c
  1752   001490  063D               	decf	(dtoa@i+1)^0,f,c
  1753   001492                     
  1754                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  1755   001492  0E78               	movlw	low _dbuf
  1756   001494  243C               	addwf	dtoa@i^0,w,c
  1757   001496  6ED9               	movwf	fsr2l,c
  1758   001498  0E02               	movlw	high _dbuf
  1759   00149A  203D               	addwfc	(dtoa@i+1)^0,w,c
  1760   00149C  6EDA               	movwf	fsr2h,c
  1761   00149E  C03E  FFDF         	movff	dtoa@s,indf2
  1762   0014A2                     l2504:
  1763                           
  1764                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1765   0014A2  C01C  F011         	movff	dtoa@fp,pad@fp
  1766   0014A6  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1767   0014AA  0E78               	movlw	low _dbuf
  1768   0014AC  243C               	addwf	dtoa@i^0,w,c
  1769   0014AE  6E13               	movwf	pad@buf^0,c
  1770   0014B0  0E02               	movlw	high _dbuf
  1771   0014B2  203D               	addwfc	(dtoa@i+1)^0,w,c
  1772   0014B4  6E14               	movwf	(pad@buf+1)^0,c
  1773   0014B6  C032  F015         	movff	dtoa@w,pad@p
  1774   0014BA  C033  F016         	movff	dtoa@w+1,pad@p+1
  1775   0014BE  EC17  F013         	call	_pad	;wreg free
  1776   0014C2  0012               	return		;funcret
  1777   0014C4                     __end_of_dtoa:
  1778                           	callstack 0
  1779                           
  1780 ;; *************** function _pad *****************
  1781 ;; Defined at:
  1782 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1785 ;;		 -> sprintf@f(11), 
  1786 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1787 ;;		 -> dbuf(32), 
  1788 ;;  p               2   20[COMRAM] int 
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;  w               2   25[COMRAM] int 
  1791 ;;  i               2   23[COMRAM] int 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      void 
  1794 ;; Registers used:
  1795 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1801 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1802 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1803 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1804 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1805 ;;Total ram usage:       11 bytes
  1806 ;; Hardware stack levels used: 1
  1807 ;; Hardware stack levels required when called: 4
  1808 ;; This function calls:
  1809 ;;		_fputc
  1810 ;;		_fputs
  1811 ;; This function is called by:
  1812 ;;		_dtoa
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           	psect	text5
  1817   00262E                     __ptext5:
  1818                           	callstack 0
  1819   00262E                     _pad:
  1820                           	callstack 22
  1821   00262E                     
  1822                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  1823   00262E  BE16               	btfsc	(pad@p+1)^0,7,c
  1824   002630  EF1C  F013         	goto	u1031
  1825   002634  EF1E  F013         	goto	u1030
  1826   002638                     u1031:
  1827   002638  EF24  F013         	goto	l2388
  1828   00263C                     u1030:
  1829   00263C  C015  F01A         	movff	pad@p,pad@w
  1830   002640  C016  F01B         	movff	pad@p+1,pad@w+1
  1831   002644  EF28  F013         	goto	l1150
  1832   002648                     l2388:
  1833   002648  0E00               	movlw	0
  1834   00264A  6E1B               	movwf	(pad@w+1)^0,c
  1835   00264C  0E00               	movlw	0
  1836   00264E  6E1A               	movwf	pad@w^0,c
  1837   002650                     l1150:
  1838                           
  1839                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  1840   002650  0E00               	movlw	0
  1841   002652  6E19               	movwf	(pad@i+1)^0,c
  1842   002654  0E00               	movlw	0
  1843   002656  6E18               	movwf	pad@i^0,c
  1844                           
  1845                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1846   002658  EF3A  F013         	goto	l2394
  1847   00265C                     l2390:
  1848                           
  1849                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  1850   00265C  0E00               	movlw	0
  1851   00265E  6E02               	movwf	(fputc@c+1)^0,c
  1852   002660  0E20               	movlw	32
  1853   002662  6E01               	movwf	fputc@c^0,c
  1854   002664  C011  F003         	movff	pad@fp,fputc@fp
  1855   002668  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1856   00266C  ECD9  F00E         	call	_fputc	;wreg free
  1857   002670                     
  1858                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  1859   002670  4A18               	infsnz	pad@i^0,f,c
  1860   002672  2A19               	incf	(pad@i+1)^0,f,c
  1861   002674                     l2394:
  1862                           
  1863                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1864   002674  501A               	movf	pad@w^0,w,c
  1865   002676  5C18               	subwf	pad@i^0,w,c
  1866   002678  5019               	movf	(pad@i+1)^0,w,c
  1867   00267A  0A80               	xorlw	128
  1868   00267C  6E17               	movwf	??_pad^0,c
  1869   00267E  501B               	movf	(pad@w+1)^0,w,c
  1870   002680  0A80               	xorlw	128
  1871   002682  5817               	subwfb	??_pad^0,w,c
  1872   002684  A0D8               	btfss	status,0,c
  1873   002686  EF47  F013         	goto	u1041
  1874   00268A  EF49  F013         	goto	u1040
  1875   00268E                     u1041:
  1876   00268E  EF2E  F013         	goto	l2390
  1877   002692                     u1040:
  1878   002692                     
  1879                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  1880   002692  C013  F00A         	movff	pad@buf,fputs@s
  1881   002696  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1882   00269A  C011  F00C         	movff	pad@fp,fputs@fp
  1883   00269E  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1884   0026A2  EC73  F014         	call	_fputs	;wreg free
  1885   0026A6  0012               	return		;funcret
  1886   0026A8                     __end_of_pad:
  1887                           	callstack 0
  1888                           
  1889 ;; *************** function _fputs *****************
  1890 ;; Defined at:
  1891 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1894 ;;		 -> dbuf(32), 
  1895 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1896 ;;		 -> sprintf@f(11), 
  1897 ;; Auto vars:     Size  Location     Type
  1898 ;;  i               2   14[COMRAM] int 
  1899 ;;  c               1   13[COMRAM] unsigned char 
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  2    9[COMRAM] int 
  1902 ;; Registers used:
  1903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1909 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1910 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1912 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1913 ;;Total ram usage:        7 bytes
  1914 ;; Hardware stack levels used: 1
  1915 ;; Hardware stack levels required when called: 3
  1916 ;; This function calls:
  1917 ;;		_fputc
  1918 ;; This function is called by:
  1919 ;;		_pad
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           	psect	text6
  1924   0028E6                     __ptext6:
  1925                           	callstack 0
  1926   0028E6                     _fputs:
  1927                           	callstack 22
  1928   0028E6  0E00               	movlw	0
  1929   0028E8  6E10               	movwf	(fputs@i+1)^0,c
  1930   0028EA  0E00               	movlw	0
  1931   0028EC  6E0F               	movwf	fputs@i^0,c
  1932   0028EE  EF84  F014         	goto	l2302
  1933   0028F2                     l2298:
  1934   0028F2  C00E  F001         	movff	fputs@c,fputc@c
  1935   0028F6  6A02               	clrf	(fputc@c+1)^0,c
  1936   0028F8  C00C  F003         	movff	fputs@fp,fputc@fp
  1937   0028FC  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1938   002900  ECD9  F00E         	call	_fputc	;wreg free
  1939   002904  4A0F               	infsnz	fputs@i^0,f,c
  1940   002906  2A10               	incf	(fputs@i+1)^0,f,c
  1941   002908                     l2302:
  1942   002908  500F               	movf	fputs@i^0,w,c
  1943   00290A  240A               	addwf	fputs@s^0,w,c
  1944   00290C  6ED9               	movwf	fsr2l,c
  1945   00290E  5010               	movf	(fputs@i+1)^0,w,c
  1946   002910  200B               	addwfc	(fputs@s+1)^0,w,c
  1947   002912  6EDA               	movwf	fsr2h,c
  1948   002914  50DF               	movf	indf2,w,c
  1949   002916  6E0E               	movwf	fputs@c^0,c
  1950   002918  500E               	movf	fputs@c^0,w,c
  1951   00291A  A4D8               	btfss	status,2,c
  1952   00291C  EF92  F014         	goto	u891
  1953   002920  EF94  F014         	goto	u890
  1954   002924                     u891:
  1955   002924  EF79  F014         	goto	l2298
  1956   002928                     u890:
  1957   002928  0012               	return		;funcret
  1958   00292A                     __end_of_fputs:
  1959                           	callstack 0
  1960                           
  1961 ;; *************** function _fputc *****************
  1962 ;; Defined at:
  1963 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;  c               2    0[COMRAM] int 
  1966 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1967 ;;		 -> sprintf@f(11), 
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;		None
  1970 ;; Return value:  Size  Location     Type
  1971 ;;                  2    0[COMRAM] int 
  1972 ;; Registers used:
  1973 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1974 ;; Tracked objects:
  1975 ;;		On entry : 0/0
  1976 ;;		On exit  : 0/0
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1979 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1981 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1982 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1983 ;;Total ram usage:        9 bytes
  1984 ;; Hardware stack levels used: 1
  1985 ;; Hardware stack levels required when called: 2
  1986 ;; This function calls:
  1987 ;;		_putch
  1988 ;; This function is called by:
  1989 ;;		_pad
  1990 ;;		_vfpfcnvrt
  1991 ;;		_fputs
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text7
  1996   001DB2                     __ptext7:
  1997                           	callstack 0
  1998   001DB2                     _fputc:
  1999                           	callstack 25
  2000   001DB2  5003               	movf	fputc@fp^0,w,c
  2001   001DB4  1004               	iorwf	(fputc@fp+1)^0,w,c
  2002   001DB6  B4D8               	btfsc	status,2,c
  2003   001DB8  EFE0  F00E         	goto	u851
  2004   001DBC  EFE2  F00E         	goto	u850
  2005   001DC0                     u851:
  2006   001DC0  EFEB  F00E         	goto	l2286
  2007   001DC4                     u850:
  2008   001DC4  5003               	movf	fputc@fp^0,w,c
  2009   001DC6  1004               	iorwf	(fputc@fp+1)^0,w,c
  2010   001DC8  A4D8               	btfss	status,2,c
  2011   001DCA  EFE9  F00E         	goto	u861
  2012   001DCE  EFEB  F00E         	goto	u860
  2013   001DD2                     u861:
  2014   001DD2  EFF0  F00E         	goto	l2288
  2015   001DD6                     u860:
  2016   001DD6                     l2286:
  2017   001DD6  5001               	movf	fputc@c^0,w,c
  2018   001DD8  ECBF  F015         	call	_putch
  2019   001DDC  EF3D  F00F         	goto	l1205
  2020   001DE0                     l2288:
  2021   001DE0  EE20 F009          	lfsr	2,9
  2022   001DE4  5003               	movf	fputc@fp^0,w,c
  2023   001DE6  26D9               	addwf	fsr2l,f,c
  2024   001DE8  5004               	movf	(fputc@fp+1)^0,w,c
  2025   001DEA  22DA               	addwfc	fsr2h,f,c
  2026   001DEC  50DE               	movf	postinc2,w,c
  2027   001DEE  10DE               	iorwf	postinc2,w,c
  2028   001DF0  B4D8               	btfsc	status,2,c
  2029   001DF2  EFFD  F00E         	goto	u871
  2030   001DF6  EFFF  F00E         	goto	u870
  2031   001DFA                     u871:
  2032   001DFA  EF1A  F00F         	goto	l2292
  2033   001DFE                     u870:
  2034   001DFE  EE20 F009          	lfsr	2,9
  2035   001E02  5003               	movf	fputc@fp^0,w,c
  2036   001E04  26D9               	addwf	fsr2l,f,c
  2037   001E06  5004               	movf	(fputc@fp+1)^0,w,c
  2038   001E08  22DA               	addwfc	fsr2h,f,c
  2039   001E0A  EE10 F003          	lfsr	1,3
  2040   001E0E  5003               	movf	fputc@fp^0,w,c
  2041   001E10  26E1               	addwf	fsr1l,f,c
  2042   001E12  5004               	movf	(fputc@fp+1)^0,w,c
  2043   001E14  22E2               	addwfc	fsr1h,f,c
  2044   001E16  50DE               	movf	postinc2,w,c
  2045   001E18  5CE6               	subwf	postinc1,w,c
  2046   001E1A  50E6               	movf	postinc1,w,c
  2047   001E1C  0A80               	xorlw	128
  2048   001E1E  6E09               	movwf	(??_fputc+4)^0,c
  2049   001E20  50DE               	movf	postinc2,w,c
  2050   001E22  0A80               	xorlw	128
  2051   001E24  5809               	subwfb	(??_fputc+4)^0,w,c
  2052   001E26  B0D8               	btfsc	status,0,c
  2053   001E28  EF18  F00F         	goto	u881
  2054   001E2C  EF1A  F00F         	goto	u880
  2055   001E30                     u881:
  2056   001E30  EF3D  F00F         	goto	l1205
  2057   001E34                     u880:
  2058   001E34                     l2292:
  2059   001E34  EE20 F003          	lfsr	2,3
  2060   001E38  5003               	movf	fputc@fp^0,w,c
  2061   001E3A  26D9               	addwf	fsr2l,f,c
  2062   001E3C  5004               	movf	(fputc@fp+1)^0,w,c
  2063   001E3E  22DA               	addwfc	fsr2h,f,c
  2064   001E40  CFDE F005          	movff	postinc2,??_fputc
  2065   001E44  CFDD F006          	movff	postdec2,??_fputc+1
  2066   001E48  C003  FFD9         	movff	fputc@fp,fsr2l
  2067   001E4C  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2068   001E50  CFDE F007          	movff	postinc2,??_fputc+2
  2069   001E54  CFDD F008          	movff	postdec2,??_fputc+3
  2070   001E58  5005               	movf	??_fputc^0,w,c
  2071   001E5A  2407               	addwf	(??_fputc+2)^0,w,c
  2072   001E5C  6ED9               	movwf	fsr2l,c
  2073   001E5E  5006               	movf	(??_fputc+1)^0,w,c
  2074   001E60  2008               	addwfc	(??_fputc+3)^0,w,c
  2075   001E62  6EDA               	movwf	fsr2h,c
  2076   001E64  C001  FFDF         	movff	fputc@c,indf2
  2077   001E68  EE20 F003          	lfsr	2,3
  2078   001E6C  5003               	movf	fputc@fp^0,w,c
  2079   001E6E  26D9               	addwf	fsr2l,f,c
  2080   001E70  5004               	movf	(fputc@fp+1)^0,w,c
  2081   001E72  22DA               	addwfc	fsr2h,f,c
  2082   001E74  2ADE               	incf	postinc2,f,c
  2083   001E76  0E00               	movlw	0
  2084   001E78  22DD               	addwfc	postdec2,f,c
  2085   001E7A                     l1205:
  2086   001E7A  0012               	return		;funcret
  2087   001E7C                     __end_of_fputc:
  2088                           	callstack 0
  2089                           
  2090 ;; *************** function _putch *****************
  2091 ;; Defined at:
  2092 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;  c               1    wreg     unsigned char 
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;  c               1    0[COMRAM] unsigned char 
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  1    wreg      void 
  2099 ;; Registers used:
  2100 ;;		wreg
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2110 ;;Total ram usage:        0 bytes
  2111 ;; Hardware stack levels used: 1
  2112 ;; Hardware stack levels required when called: 1
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_fputc
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           	psect	text8
  2121   002B7E                     __ptext8:
  2122                           	callstack 0
  2123   002B7E                     _putch:
  2124                           	callstack 25
  2125   002B7E  0012               	return		;funcret
  2126   002B80                     __end_of_putch:
  2127                           	callstack 0
  2128                           
  2129 ;; *************** function _abs *****************
  2130 ;; Defined at:
  2131 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;  a               2   18[COMRAM] int 
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  2   18[COMRAM] int 
  2138 ;; Registers used:
  2139 ;;		wreg, status,2, status,0
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2145 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2147 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2148 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2149 ;;Total ram usage:        4 bytes
  2150 ;; Hardware stack levels used: 1
  2151 ;; Hardware stack levels required when called: 1
  2152 ;; This function calls:
  2153 ;;		Nothing
  2154 ;; This function is called by:
  2155 ;;		_dtoa
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text9
  2160   0029AE                     __ptext9:
  2161                           	callstack 0
  2162   0029AE                     _abs:
  2163                           	callstack 25
  2164   0029AE  BE14               	btfsc	(abs@a+1)^0,7,c
  2165   0029B0  EFE4  F014         	goto	u1050
  2166   0029B4  5014               	movf	(abs@a+1)^0,w,c
  2167   0029B6  E106               	bnz	u1051
  2168   0029B8  0413               	decf	abs@a^0,w,c
  2169   0029BA  B0D8               	btfsc	status,0,c
  2170   0029BC  EFE2  F014         	goto	u1051
  2171   0029C0  EFE4  F014         	goto	u1050
  2172   0029C4                     u1051:
  2173   0029C4  EFF2  F014         	goto	l1190
  2174   0029C8                     u1050:
  2175   0029C8  C013  F015         	movff	abs@a,??_abs
  2176   0029CC  C014  F016         	movff	abs@a+1,??_abs+1
  2177   0029D0  1E15               	comf	??_abs^0,f,c
  2178   0029D2  1E16               	comf	(??_abs+1)^0,f,c
  2179   0029D4  4A15               	infsnz	??_abs^0,f,c
  2180   0029D6  2A16               	incf	(??_abs+1)^0,f,c
  2181   0029D8  C015  F013         	movff	??_abs,?_abs
  2182   0029DC  C016  F014         	movff	??_abs+1,?_abs+1
  2183   0029E0  EFF6  F014         	goto	l1193
  2184   0029E4                     l1190:
  2185   0029E4  C013  F013         	movff	abs@a,?_abs
  2186   0029E8  C014  F014         	movff	abs@a+1,?_abs+1
  2187   0029EC                     l1193:
  2188   0029EC  0012               	return		;funcret
  2189   0029EE                     __end_of_abs:
  2190                           	callstack 0
  2191                           
  2192 ;; *************** function ___aomod *****************
  2193 ;; Defined at:
  2194 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  dividend        8    0[COMRAM] long long 
  2197 ;;  divisor         8    8[COMRAM] long long 
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  sign            1   17[COMRAM] unsigned char 
  2200 ;;  counter         1   16[COMRAM] unsigned char 
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  8    0[COMRAM] long long 
  2203 ;; Registers used:
  2204 ;;		wreg, status,2, status,0
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2210 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2211 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2213 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2214 ;;Total ram usage:       18 bytes
  2215 ;; Hardware stack levels used: 1
  2216 ;; Hardware stack levels required when called: 1
  2217 ;; This function calls:
  2218 ;;		Nothing
  2219 ;; This function is called by:
  2220 ;;		_dtoa
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text10
  2225   001A04                     __ptext10:
  2226                           	callstack 0
  2227   001A04                     ___aomod:
  2228                           	callstack 25
  2229   001A04  0E00               	movlw	0
  2230   001A06  6E12               	movwf	___aomod@sign^0,c
  2231   001A08  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2232   001A0A  EF0B  F00D         	goto	u970
  2233   001A0E  EF09  F00D         	goto	u971
  2234   001A12                     u971:
  2235   001A12  EF1D  F00D         	goto	l2356
  2236   001A16                     u970:
  2237   001A16  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2238   001A18  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2239   001A1A  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2240   001A1C  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2241   001A1E  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2242   001A20  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2243   001A22  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2244   001A24  6C01               	negf	___aomod@dividend^0,c
  2245   001A26  0E00               	movlw	0
  2246   001A28  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2247   001A2A  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2248   001A2C  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2249   001A2E  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2250   001A30  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2251   001A32  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2252   001A34  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2253   001A36  0E01               	movlw	1
  2254   001A38  6E12               	movwf	___aomod@sign^0,c
  2255   001A3A                     l2356:
  2256   001A3A  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2257   001A3C  EF24  F00D         	goto	u980
  2258   001A40  EF22  F00D         	goto	u981
  2259   001A44                     u981:
  2260   001A44  EF34  F00D         	goto	l2360
  2261   001A48                     u980:
  2262   001A48  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2263   001A4A  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2264   001A4C  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2265   001A4E  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2266   001A50  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2267   001A52  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2268   001A54  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2269   001A56  6C09               	negf	___aomod@divisor^0,c
  2270   001A58  0E00               	movlw	0
  2271   001A5A  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2272   001A5C  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2273   001A5E  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2274   001A60  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2275   001A62  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2276   001A64  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2277   001A66  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2278   001A68                     l2360:
  2279   001A68  5009               	movf	___aomod@divisor^0,w,c
  2280   001A6A  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2281   001A6C  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2282   001A6E  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2283   001A70  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2284   001A72  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2285   001A74  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2286   001A76  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2287   001A78  B4D8               	btfsc	status,2,c
  2288   001A7A  EF41  F00D         	goto	u991
  2289   001A7E  EF43  F00D         	goto	u990
  2290   001A82                     u991:
  2291   001A82  EF8B  F00D         	goto	l2376
  2292   001A86                     u990:
  2293   001A86  0E01               	movlw	1
  2294   001A88  6E11               	movwf	___aomod@counter^0,c
  2295   001A8A  EF51  F00D         	goto	l2366
  2296   001A8E                     l2364:
  2297   001A8E  90D8               	bcf	status,0,c
  2298   001A90  3609               	rlcf	___aomod@divisor^0,f,c
  2299   001A92  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2300   001A94  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2301   001A96  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2302   001A98  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2303   001A9A  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2304   001A9C  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2305   001A9E  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2306   001AA0  2A11               	incf	___aomod@counter^0,f,c
  2307   001AA2                     l2366:
  2308   001AA2  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2309   001AA4  EF56  F00D         	goto	u1001
  2310   001AA8  EF58  F00D         	goto	u1000
  2311   001AAC                     u1001:
  2312   001AAC  EF47  F00D         	goto	l2364
  2313   001AB0                     u1000:
  2314   001AB0                     l2368:
  2315   001AB0  5009               	movf	___aomod@divisor^0,w,c
  2316   001AB2  5C01               	subwf	___aomod@dividend^0,w,c
  2317   001AB4  500A               	movf	(___aomod@divisor+1)^0,w,c
  2318   001AB6  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2319   001AB8  500B               	movf	(___aomod@divisor+2)^0,w,c
  2320   001ABA  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2321   001ABC  500C               	movf	(___aomod@divisor+3)^0,w,c
  2322   001ABE  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2323   001AC0  500D               	movf	(___aomod@divisor+4)^0,w,c
  2324   001AC2  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2325   001AC4  500E               	movf	(___aomod@divisor+5)^0,w,c
  2326   001AC6  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2327   001AC8  500F               	movf	(___aomod@divisor+6)^0,w,c
  2328   001ACA  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2329   001ACC  5010               	movf	(___aomod@divisor+7)^0,w,c
  2330   001ACE  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2331   001AD0  A0D8               	btfss	status,0,c
  2332   001AD2  EF6D  F00D         	goto	u1011
  2333   001AD6  EF6F  F00D         	goto	u1010
  2334   001ADA                     u1011:
  2335   001ADA  EF7F  F00D         	goto	l2372
  2336   001ADE                     u1010:
  2337   001ADE  5009               	movf	___aomod@divisor^0,w,c
  2338   001AE0  5E01               	subwf	___aomod@dividend^0,f,c
  2339   001AE2  500A               	movf	(___aomod@divisor+1)^0,w,c
  2340   001AE4  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2341   001AE6  500B               	movf	(___aomod@divisor+2)^0,w,c
  2342   001AE8  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2343   001AEA  500C               	movf	(___aomod@divisor+3)^0,w,c
  2344   001AEC  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2345   001AEE  500D               	movf	(___aomod@divisor+4)^0,w,c
  2346   001AF0  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2347   001AF2  500E               	movf	(___aomod@divisor+5)^0,w,c
  2348   001AF4  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2349   001AF6  500F               	movf	(___aomod@divisor+6)^0,w,c
  2350   001AF8  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2351   001AFA  5010               	movf	(___aomod@divisor+7)^0,w,c
  2352   001AFC  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2353   001AFE                     l2372:
  2354   001AFE  90D8               	bcf	status,0,c
  2355   001B00  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2356   001B02  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2357   001B04  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2358   001B06  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2359   001B08  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2360   001B0A  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2361   001B0C  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2362   001B0E  3209               	rrcf	___aomod@divisor^0,f,c
  2363   001B10  2E11               	decfsz	___aomod@counter^0,f,c
  2364   001B12  EF58  F00D         	goto	l2368
  2365   001B16                     l2376:
  2366   001B16  5012               	movf	___aomod@sign^0,w,c
  2367   001B18  B4D8               	btfsc	status,2,c
  2368   001B1A  EF91  F00D         	goto	u1021
  2369   001B1E  EF93  F00D         	goto	u1020
  2370   001B22                     u1021:
  2371   001B22  EFA3  F00D         	goto	l2380
  2372   001B26                     u1020:
  2373   001B26  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2374   001B28  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2375   001B2A  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2376   001B2C  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2377   001B2E  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2378   001B30  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2379   001B32  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2380   001B34  6C01               	negf	___aomod@dividend^0,c
  2381   001B36  0E00               	movlw	0
  2382   001B38  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2383   001B3A  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2384   001B3C  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2385   001B3E  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2386   001B40  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2387   001B42  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2388   001B44  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2389   001B46                     l2380:
  2390   001B46  C001  F001         	movff	___aomod@dividend,?___aomod
  2391   001B4A  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2392   001B4E  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2393   001B52  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2394   001B56  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2395   001B5A  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2396   001B5E  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2397   001B62  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2398   001B66  0012               	return		;funcret
  2399   001B68                     __end_of___aomod:
  2400                           	callstack 0
  2401                           
  2402 ;; *************** function ___aodiv *****************
  2403 ;; Defined at:
  2404 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;  dividend        8    0[COMRAM] long long 
  2407 ;;  divisor         8    8[COMRAM] long long 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  quotient        8   18[COMRAM] long long 
  2410 ;;  sign            1   17[COMRAM] unsigned char 
  2411 ;;  counter         1   16[COMRAM] unsigned char 
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  8    0[COMRAM] long long 
  2414 ;; Registers used:
  2415 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2421 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2422 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2424 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2425 ;;Total ram usage:       26 bytes
  2426 ;; Hardware stack levels used: 1
  2427 ;; Hardware stack levels required when called: 1
  2428 ;; This function calls:
  2429 ;;		Nothing
  2430 ;; This function is called by:
  2431 ;;		_dtoa
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           	psect	text11
  2436   00187C                     __ptext11:
  2437                           	callstack 0
  2438   00187C                     ___aodiv:
  2439                           	callstack 25
  2440   00187C  0E00               	movlw	0
  2441   00187E  6E12               	movwf	___aodiv@sign^0,c
  2442   001880  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2443   001882  EF47  F00C         	goto	u900
  2444   001886  EF45  F00C         	goto	u901
  2445   00188A                     u901:
  2446   00188A  EF59  F00C         	goto	l2312
  2447   00188E                     u900:
  2448   00188E  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2449   001890  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2450   001892  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2451   001894  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2452   001896  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2453   001898  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2454   00189A  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2455   00189C  6C09               	negf	___aodiv@divisor^0,c
  2456   00189E  0E00               	movlw	0
  2457   0018A0  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2458   0018A2  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2459   0018A4  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2460   0018A6  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2461   0018A8  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2462   0018AA  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2463   0018AC  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2464   0018AE  0E01               	movlw	1
  2465   0018B0  6E12               	movwf	___aodiv@sign^0,c
  2466   0018B2                     l2312:
  2467   0018B2  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2468   0018B4  EF60  F00C         	goto	u910
  2469   0018B8  EF5E  F00C         	goto	u911
  2470   0018BC                     u911:
  2471   0018BC  EF72  F00C         	goto	l2318
  2472   0018C0                     u910:
  2473   0018C0  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2474   0018C2  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2475   0018C4  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2476   0018C6  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2477   0018C8  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2478   0018CA  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2479   0018CC  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2480   0018CE  6C01               	negf	___aodiv@dividend^0,c
  2481   0018D0  0E00               	movlw	0
  2482   0018D2  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2483   0018D4  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2484   0018D6  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2485   0018D8  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2486   0018DA  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2487   0018DC  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2488   0018DE  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2489   0018E0  0E01               	movlw	1
  2490   0018E2  1A12               	xorwf	___aodiv@sign^0,f,c
  2491   0018E4                     l2318:
  2492   0018E4  EE20  F013         	lfsr	2,___aodiv@quotient
  2493   0018E8  0E07               	movlw	7
  2494   0018EA                     u921:
  2495   0018EA  6ADE               	clrf	postinc2,c
  2496   0018EC  06E8               	decf	wreg,f,c
  2497   0018EE  E2FD               	bc	u921
  2498   0018F0  5009               	movf	___aodiv@divisor^0,w,c
  2499   0018F2  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2500   0018F4  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2501   0018F6  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2502   0018F8  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2503   0018FA  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2504   0018FC  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2505   0018FE  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2506   001900  B4D8               	btfsc	status,2,c
  2507   001902  EF85  F00C         	goto	u931
  2508   001906  EF87  F00C         	goto	u930
  2509   00190A                     u931:
  2510   00190A  EFD9  F00C         	goto	l2340
  2511   00190E                     u930:
  2512   00190E  0E01               	movlw	1
  2513   001910  6E11               	movwf	___aodiv@counter^0,c
  2514   001912  EF95  F00C         	goto	l2326
  2515   001916                     l2324:
  2516   001916  90D8               	bcf	status,0,c
  2517   001918  3609               	rlcf	___aodiv@divisor^0,f,c
  2518   00191A  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2519   00191C  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2520   00191E  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2521   001920  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2522   001922  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2523   001924  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2524   001926  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2525   001928  2A11               	incf	___aodiv@counter^0,f,c
  2526   00192A                     l2326:
  2527   00192A  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2528   00192C  EF9A  F00C         	goto	u941
  2529   001930  EF9C  F00C         	goto	u940
  2530   001934                     u941:
  2531   001934  EF8B  F00C         	goto	l2324
  2532   001938                     u940:
  2533   001938                     l2328:
  2534   001938  90D8               	bcf	status,0,c
  2535   00193A  3613               	rlcf	___aodiv@quotient^0,f,c
  2536   00193C  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2537   00193E  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2538   001940  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2539   001942  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2540   001944  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2541   001946  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2542   001948  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2543   00194A  5009               	movf	___aodiv@divisor^0,w,c
  2544   00194C  5C01               	subwf	___aodiv@dividend^0,w,c
  2545   00194E  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2546   001950  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2547   001952  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2548   001954  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2549   001956  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2550   001958  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2551   00195A  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2552   00195C  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2553   00195E  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2554   001960  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2555   001962  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2556   001964  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2557   001966  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2558   001968  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2559   00196A  A0D8               	btfss	status,0,c
  2560   00196C  EFBA  F00C         	goto	u951
  2561   001970  EFBC  F00C         	goto	u950
  2562   001974                     u951:
  2563   001974  EFCD  F00C         	goto	l2336
  2564   001978                     u950:
  2565   001978  5009               	movf	___aodiv@divisor^0,w,c
  2566   00197A  5E01               	subwf	___aodiv@dividend^0,f,c
  2567   00197C  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2568   00197E  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2569   001980  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2570   001982  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2571   001984  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2572   001986  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2573   001988  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2574   00198A  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2575   00198C  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2576   00198E  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2577   001990  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2578   001992  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2579   001994  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2580   001996  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2581   001998  8013               	bsf	___aodiv@quotient^0,0,c
  2582   00199A                     l2336:
  2583   00199A  90D8               	bcf	status,0,c
  2584   00199C  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2585   00199E  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2586   0019A0  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2587   0019A2  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2588   0019A4  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2589   0019A6  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2590   0019A8  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2591   0019AA  3209               	rrcf	___aodiv@divisor^0,f,c
  2592   0019AC  2E11               	decfsz	___aodiv@counter^0,f,c
  2593   0019AE  EF9C  F00C         	goto	l2328
  2594   0019B2                     l2340:
  2595   0019B2  5012               	movf	___aodiv@sign^0,w,c
  2596   0019B4  B4D8               	btfsc	status,2,c
  2597   0019B6  EFDF  F00C         	goto	u961
  2598   0019BA  EFE1  F00C         	goto	u960
  2599   0019BE                     u961:
  2600   0019BE  EFF1  F00C         	goto	l2344
  2601   0019C2                     u960:
  2602   0019C2  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2603   0019C4  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2604   0019C6  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2605   0019C8  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2606   0019CA  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2607   0019CC  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2608   0019CE  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2609   0019D0  6C13               	negf	___aodiv@quotient^0,c
  2610   0019D2  0E00               	movlw	0
  2611   0019D4  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2612   0019D6  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2613   0019D8  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2614   0019DA  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2615   0019DC  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2616   0019DE  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2617   0019E0  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2618   0019E2                     l2344:
  2619   0019E2  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2620   0019E6  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2621   0019EA  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2622   0019EE  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2623   0019F2  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2624   0019F6  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2625   0019FA  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2626   0019FE  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2627   001A02  0012               	return		;funcret
  2628   001A04                     __end_of___aodiv:
  2629                           	callstack 0
  2630                           
  2631 ;; *************** function _spin_180 *****************
  2632 ;; Defined at:
  2633 ;;		line 151 in file "../dc_motor.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  2636 ;;		 -> main@motorL(9), 
  2637 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  2638 ;;		 -> main@motorR(9), 
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  i               2   31[COMRAM] int 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2650 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2651 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2652 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2653 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2654 ;;Total ram usage:        8 bytes
  2655 ;; Hardware stack levels used: 1
  2656 ;; Hardware stack levels required when called: 3
  2657 ;; This function calls:
  2658 ;;		_setMotorPWM
  2659 ;; This function is called by:
  2660 ;;		_main
  2661 ;;		_motor_action_return
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text12
  2666   0021EC                     __ptext12:
  2667                           	callstack 0
  2668   0021EC                     _spin_180:
  2669                           	callstack 27
  2670   0021EC                     
  2671                           ;../dc_motor.c: 151: void spin_180(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 152: {;../dc_motor.c: 153:     mL->direction = 1;
  2672   0021EC  EE20 F001          	lfsr	2,1
  2673   0021F0  501A               	movf	spin_180@mL^0,w,c
  2674   0021F2  26D9               	addwf	fsr2l,f,c
  2675   0021F4  501B               	movf	(spin_180@mL+1)^0,w,c
  2676   0021F6  22DA               	addwfc	fsr2h,f,c
  2677   0021F8  0E01               	movlw	1
  2678   0021FA  6EDF               	movwf	indf2,c
  2679                           
  2680                           ;../dc_motor.c: 154:     mR->direction = 0;
  2681   0021FC  EE20 F001          	lfsr	2,1
  2682   002200  501C               	movf	spin_180@mR^0,w,c
  2683   002202  26D9               	addwf	fsr2l,f,c
  2684   002204  501D               	movf	(spin_180@mR+1)^0,w,c
  2685   002206  22DA               	addwfc	fsr2h,f,c
  2686   002208  0E00               	movlw	0
  2687   00220A  6EDF               	movwf	indf2,c
  2688   00220C                     
  2689                           ;../dc_motor.c: 155:     for (int i = 0;i<50;i = i + 2)
  2690   00220C  0E00               	movlw	0
  2691   00220E  6E21               	movwf	(spin_180@i+1)^0,c
  2692   002210  0E00               	movlw	0
  2693   002212  6E20               	movwf	spin_180@i^0,c
  2694   002214                     l3086:
  2695                           
  2696                           ;../dc_motor.c: 156:     {;../dc_motor.c: 157:         mL->power = i;
  2697   002214  C01A  FFD9         	movff	spin_180@mL,fsr2l
  2698   002218  C01B  FFDA         	movff	spin_180@mL+1,fsr2h
  2699   00221C  C020  FFDF         	movff	spin_180@i,indf2
  2700   002220                     
  2701                           ;../dc_motor.c: 158:         mR->power = 50 + i;
  2702   002220  5020               	movf	spin_180@i^0,w,c
  2703   002222  0F32               	addlw	50
  2704   002224  C01C  FFD9         	movff	spin_180@mR,fsr2l
  2705   002228  C01D  FFDA         	movff	spin_180@mR+1,fsr2h
  2706   00222C  6EDF               	movwf	indf2,c
  2707   00222E                     
  2708                           ;../dc_motor.c: 159:         setMotorPWM(mL);
  2709   00222E  C01A  F00F         	movff	spin_180@mL,setMotorPWM@m
  2710   002232  C01B  F010         	movff	spin_180@mL+1,setMotorPWM@m+1
  2711   002236  EC54  F00B         	call	_setMotorPWM	;wreg free
  2712   00223A                     
  2713                           ;../dc_motor.c: 160:         setMotorPWM(mR);
  2714   00223A  C01C  F00F         	movff	spin_180@mR,setMotorPWM@m
  2715   00223E  C01D  F010         	movff	spin_180@mR+1,setMotorPWM@m+1
  2716   002242  EC54  F00B         	call	_setMotorPWM	;wreg free
  2717   002246                     
  2718                           ;../dc_motor.c: 161:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  2719   002246  0E35               	movlw	53
  2720   002248                     u1697:
  2721   002248  2EE8               	decfsz	wreg,f,c
  2722   00224A  D7FE               	bra	u1697
  2723   00224C  F000               	nop	
  2724   00224E                     
  2725                           ;../dc_motor.c: 162:     }
  2726   00224E  0E02               	movlw	2
  2727   002250  2420               	addwf	spin_180@i^0,w,c
  2728   002252  6E20               	movwf	spin_180@i^0,c
  2729   002254  0E00               	movlw	0
  2730   002256  2021               	addwfc	(spin_180@i+1)^0,w,c
  2731   002258  6E21               	movwf	(spin_180@i+1)^0,c
  2732   00225A  BE21               	btfsc	(spin_180@i+1)^0,7,c
  2733   00225C  EF39  F011         	goto	u1631
  2734   002260  5021               	movf	(spin_180@i+1)^0,w,c
  2735   002262  E109               	bnz	u1630
  2736   002264  0E32               	movlw	50
  2737   002266  5C20               	subwf	spin_180@i^0,w,c
  2738   002268  A0D8               	btfss	status,0,c
  2739   00226A  EF39  F011         	goto	u1631
  2740   00226E  EF3B  F011         	goto	u1630
  2741   002272                     u1631:
  2742   002272  EF0A  F011         	goto	l3086
  2743   002276                     u1630:
  2744   002276                     
  2745                           ;../dc_motor.c: 163:     _delay((unsigned long)((290)*(64000000/4000.0)));
  2746   002276  0E18               	movlw	24
  2747   002278  6E1F               	movwf	(??_spin_180+1)^0,c
  2748   00227A  0E8A               	movlw	138
  2749   00227C  6E1E               	movwf	??_spin_180^0,c
  2750   00227E  0EE8               	movlw	232
  2751   002280                     u1707:
  2752   002280  2EE8               	decfsz	wreg,f,c
  2753   002282  D7FE               	bra	u1707
  2754   002284  2E1E               	decfsz	??_spin_180^0,f,c
  2755   002286  D7FC               	bra	u1707
  2756   002288  2E1F               	decfsz	(??_spin_180+1)^0,f,c
  2757   00228A  D7FA               	bra	u1707
  2758   00228C  0012               	return		;funcret
  2759   00228E                     __end_of_spin_180:
  2760                           	callstack 0
  2761                           
  2762 ;; *************** function _sendStringSerial4 *****************
  2763 ;; Defined at:
  2764 ;;		line 37 in file "../serial.c"
  2765 ;; Parameters:    Size  Location     Type
  2766 ;;  string          2    1[COMRAM] PTR unsigned char 
  2767 ;;		 -> main@readout3(100), main@readout2(100), 
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;		None
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  1    wreg      void 
  2772 ;; Registers used:
  2773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2779 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2782 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2783 ;;Total ram usage:        2 bytes
  2784 ;; Hardware stack levels used: 1
  2785 ;; Hardware stack levels required when called: 2
  2786 ;; This function calls:
  2787 ;;		_sendCharSerial4
  2788 ;; This function is called by:
  2789 ;;		_main
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text13
  2794   002A20                     __ptext13:
  2795                           	callstack 0
  2796   002A20                     _sendStringSerial4:
  2797                           	callstack 28
  2798   002A20                     
  2799                           ;../serial.c: 40:     while (*string != 0)
  2800   002A20  EF1B  F015         	goto	l3076
  2801   002A24                     l3072:
  2802                           
  2803                           ;../serial.c: 41:     {;../serial.c: 42:         sendCharSerial4(*string++);
  2804   002A24  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  2805   002A28  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  2806   002A2C  50DF               	movf	indf2,w,c
  2807   002A2E  EC93  F015         	call	_sendCharSerial4
  2808   002A32  4A02               	infsnz	sendStringSerial4@string^0,f,c
  2809   002A34  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  2810   002A36                     l3076:
  2811                           
  2812                           ;../serial.c: 40:     while (*string != 0)
  2813   002A36  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  2814   002A3A  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  2815   002A3E  50DF               	movf	indf2,w,c
  2816   002A40  A4D8               	btfss	status,2,c
  2817   002A42  EF25  F015         	goto	u1621
  2818   002A46  EF27  F015         	goto	u1620
  2819   002A4A                     u1621:
  2820   002A4A  EF12  F015         	goto	l3072
  2821   002A4E                     u1620:
  2822   002A4E  0012               	return		;funcret
  2823   002A50                     __end_of_sendStringSerial4:
  2824                           	callstack 0
  2825                           
  2826 ;; *************** function _sendCharSerial4 *****************
  2827 ;; Defined at:
  2828 ;;		line 30 in file "../serial.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;  charToSend      1    wreg     unsigned char 
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  charToSend      1    0[COMRAM] unsigned char 
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  1    wreg      void 
  2835 ;; Registers used:
  2836 ;;		wreg
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2843 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2845 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2846 ;;Total ram usage:        1 bytes
  2847 ;; Hardware stack levels used: 1
  2848 ;; Hardware stack levels required when called: 1
  2849 ;; This function calls:
  2850 ;;		Nothing
  2851 ;; This function is called by:
  2852 ;;		_sendStringSerial4
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text14
  2857   002B26                     __ptext14:
  2858                           	callstack 0
  2859   002B26                     _sendCharSerial4:
  2860                           	callstack 28
  2861                           
  2862                           ;incstack = 0
  2863                           ;sendCharSerial4@charToSend stored from wreg
  2864   002B26  6E01               	movwf	sendCharSerial4@charToSend^0,c
  2865   002B28                     l438:
  2866   002B28  010E               	movlb	14	; () banked
  2867   002B2A  A537               	btfss	55,2,b	;volatile
  2868   002B2C  EF9A  F015         	goto	u1411
  2869   002B30  EF9C  F015         	goto	u1410
  2870   002B34                     u1411:
  2871   002B34  EF94  F015         	goto	l438
  2872   002B38                     u1410:
  2873   002B38                     
  2874                           ; BSR set to: 14
  2875                           ;../serial.c: 32:     TX4REG = charToSend;
  2876   002B38  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  2877   002B3C                     
  2878                           ; BSR set to: 14
  2879   002B3C  0012               	return		;funcret
  2880   002B3E                     __end_of_sendCharSerial4:
  2881                           	callstack 0
  2882                           
  2883 ;; *************** function _motor_action *****************
  2884 ;; Defined at:
  2885 ;;		line 197 in file "../dc_motor.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  color           2   33[COMRAM] unsigned int 
  2888 ;;  l               2   35[COMRAM] PTR struct DC_motor
  2889 ;;		 -> main@motorL(9), 
  2890 ;;  r               2   37[COMRAM] PTR struct DC_motor
  2891 ;;		 -> main@motorR(9), 
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;		None
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      void 
  2896 ;; Registers used:
  2897 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2903 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2905 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2906 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2907 ;;Total ram usage:        8 bytes
  2908 ;; Hardware stack levels used: 1
  2909 ;; Hardware stack levels required when called: 4
  2910 ;; This function calls:
  2911 ;;		_forward
  2912 ;;		_left_135
  2913 ;;		_left_90
  2914 ;;		_reverse_fromcard
  2915 ;;		_reverse_onesquare
  2916 ;;		_right_135
  2917 ;;		_right_90
  2918 ;;		_stop
  2919 ;; This function is called by:
  2920 ;;		_main
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text15
  2925   000E14                     __ptext15:
  2926                           	callstack 0
  2927   000E14                     _motor_action:
  2928                           	callstack 26
  2929   000E14                     
  2930                           ;../dc_motor.c: 197: void motor_action(unsigned int color, struct DC_motor *l, struct DC
      +                          _motor *r);../dc_motor.c: 198: {;../dc_motor.c: 199:     switch (color){
  2931   000E14  EFF0  F008         	goto	l3052
  2932   000E18                     l2974:
  2933                           
  2934                           ;../dc_motor.c: 201:             reverse_fromcard(l,r);
  2935   000E18  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  2936   000E1C  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  2937   000E20  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  2938   000E24  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  2939   000E28  ECE9  F011         	call	_reverse_fromcard	;wreg free
  2940                           
  2941                           ;../dc_motor.c: 202:             stop(l,r);
  2942   000E2C  C024  F01A         	movff	motor_action@l,stop@mL
  2943   000E30  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  2944   000E34  C026  F01C         	movff	motor_action@r,stop@mR
  2945   000E38  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  2946   000E3C  EC8B  F012         	call	_stop	;wreg free
  2947   000E40                     l2976:
  2948                           
  2949                           ;../dc_motor.c: 203:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2950   000E40  0E29               	movlw	41
  2951   000E42  6E29               	movwf	(??_motor_action+1)^0,c
  2952   000E44  0E96               	movlw	150
  2953   000E46  6E28               	movwf	??_motor_action^0,c
  2954   000E48  0E7F               	movlw	127
  2955   000E4A                     u1717:
  2956   000E4A  2EE8               	decfsz	wreg,f,c
  2957   000E4C  D7FE               	bra	u1717
  2958   000E4E  2E28               	decfsz	??_motor_action^0,f,c
  2959   000E50  D7FC               	bra	u1717
  2960   000E52  2E29               	decfsz	(??_motor_action+1)^0,f,c
  2961   000E54  D7FA               	bra	u1717
  2962   000E56  F000               	nop	
  2963   000E58                     
  2964                           ;../dc_motor.c: 204:             right_90(l,r);
  2965   000E58  C024  F01A         	movff	motor_action@l,right_90@mL
  2966   000E5C  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  2967   000E60  C026  F01C         	movff	motor_action@r,right_90@mR
  2968   000E64  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  2969   000E68  EC52  F010         	call	_right_90	;wreg free
  2970   000E6C                     
  2971                           ;../dc_motor.c: 205:             stop(l,r);
  2972   000E6C  C024  F01A         	movff	motor_action@l,stop@mL
  2973   000E70  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  2974   000E74  C026  F01C         	movff	motor_action@r,stop@mR
  2975   000E78  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  2976   000E7C  EC8B  F012         	call	_stop	;wreg free
  2977   000E80                     
  2978                           ;../dc_motor.c: 206:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2979   000E80  0E29               	movlw	41
  2980   000E82  6E29               	movwf	(??_motor_action+1)^0,c
  2981   000E84  0E96               	movlw	150
  2982   000E86  6E28               	movwf	??_motor_action^0,c
  2983   000E88  0E7F               	movlw	127
  2984   000E8A                     u1727:
  2985   000E8A  2EE8               	decfsz	wreg,f,c
  2986   000E8C  D7FE               	bra	u1727
  2987   000E8E  2E28               	decfsz	??_motor_action^0,f,c
  2988   000E90  D7FC               	bra	u1727
  2989   000E92  2E29               	decfsz	(??_motor_action+1)^0,f,c
  2990   000E94  D7FA               	bra	u1727
  2991   000E96  F000               	nop	
  2992                           
  2993                           ;../dc_motor.c: 207:             right_90(l,r);
  2994   000E98  C024  F01A         	movff	motor_action@l,right_90@mL
  2995   000E9C  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  2996   000EA0  C026  F01C         	movff	motor_action@r,right_90@mR
  2997   000EA4  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  2998   000EA8  EC52  F010         	call	_right_90	;wreg free
  2999                           
  3000                           ;../dc_motor.c: 208:             stop(l,r);
  3001   000EAC  C024  F01A         	movff	motor_action@l,stop@mL
  3002   000EB0  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3003   000EB4  C026  F01C         	movff	motor_action@r,stop@mR
  3004   000EB8  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3005   000EBC  EC8B  F012         	call	_stop	;wreg free
  3006                           
  3007                           ;../dc_motor.c: 209:             break;
  3008   000EC0  EF22  F009         	goto	l331
  3009   000EC4                     l2984:
  3010                           
  3011                           ;../dc_motor.c: 211:             reverse_fromcard(l,r);
  3012   000EC4  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3013   000EC8  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3014   000ECC  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3015   000ED0  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3016   000ED4  ECE9  F011         	call	_reverse_fromcard	;wreg free
  3017                           
  3018                           ;../dc_motor.c: 212:             stop(l,r);
  3019   000ED8  C024  F01A         	movff	motor_action@l,stop@mL
  3020   000EDC  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3021   000EE0  C026  F01C         	movff	motor_action@r,stop@mR
  3022   000EE4  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3023   000EE8  EC8B  F012         	call	_stop	;wreg free
  3024   000EEC                     
  3025                           ;../dc_motor.c: 213:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3026   000EEC  0E29               	movlw	41
  3027   000EEE  6E29               	movwf	(??_motor_action+1)^0,c
  3028   000EF0  0E96               	movlw	150
  3029   000EF2  6E28               	movwf	??_motor_action^0,c
  3030   000EF4  0E7F               	movlw	127
  3031   000EF6                     u1737:
  3032   000EF6  2EE8               	decfsz	wreg,f,c
  3033   000EF8  D7FE               	bra	u1737
  3034   000EFA  2E28               	decfsz	??_motor_action^0,f,c
  3035   000EFC  D7FC               	bra	u1737
  3036   000EFE  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3037   000F00  D7FA               	bra	u1737
  3038   000F02  F000               	nop	
  3039   000F04                     
  3040                           ;../dc_motor.c: 214:             left_90(l,r);
  3041   000F04  C024  F01A         	movff	motor_action@l,left_90@mL
  3042   000F08  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3043   000F0C  C026  F01C         	movff	motor_action@r,left_90@mR
  3044   000F10  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3045   000F14  ECA4  F010         	call	_left_90	;wreg free
  3046   000F18                     
  3047                           ;../dc_motor.c: 215:             stop(l,r);
  3048   000F18  C024  F01A         	movff	motor_action@l,stop@mL
  3049   000F1C  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3050   000F20  C026  F01C         	movff	motor_action@r,stop@mR
  3051   000F24  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3052   000F28  EC8B  F012         	call	_stop	;wreg free
  3053   000F2C                     
  3054                           ;../dc_motor.c: 216:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3055   000F2C  0E29               	movlw	41
  3056   000F2E  6E29               	movwf	(??_motor_action+1)^0,c
  3057   000F30  0E96               	movlw	150
  3058   000F32  6E28               	movwf	??_motor_action^0,c
  3059   000F34  0E7F               	movlw	127
  3060   000F36                     u1747:
  3061   000F36  2EE8               	decfsz	wreg,f,c
  3062   000F38  D7FE               	bra	u1747
  3063   000F3A  2E28               	decfsz	??_motor_action^0,f,c
  3064   000F3C  D7FC               	bra	u1747
  3065   000F3E  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3066   000F40  D7FA               	bra	u1747
  3067   000F42  F000               	nop	
  3068                           
  3069                           ;../dc_motor.c: 217:             left_90(l,r);
  3070   000F44  C024  F01A         	movff	motor_action@l,left_90@mL
  3071   000F48  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3072   000F4C  C026  F01C         	movff	motor_action@r,left_90@mR
  3073   000F50  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3074   000F54  ECA4  F010         	call	_left_90	;wreg free
  3075                           
  3076                           ;../dc_motor.c: 218:             stop(l,r);
  3077   000F58  C024  F01A         	movff	motor_action@l,stop@mL
  3078   000F5C  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3079   000F60  C026  F01C         	movff	motor_action@r,stop@mR
  3080   000F64  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3081   000F68  EC8B  F012         	call	_stop	;wreg free
  3082                           
  3083                           ;../dc_motor.c: 219:             break;
  3084   000F6C  EF22  F009         	goto	l331
  3085   000F70                     l3004:
  3086                           
  3087                           ;../dc_motor.c: 231:             reverse_onesquare(l,r);
  3088   000F70  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3089   000F74  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3090   000F78  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3091   000F7C  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3092   000F80  EC98  F011         	call	_reverse_onesquare	;wreg free
  3093                           
  3094                           ;../dc_motor.c: 232:             stop(l,r);
  3095   000F84  C024  F01A         	movff	motor_action@l,stop@mL
  3096   000F88  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3097   000F8C  C026  F01C         	movff	motor_action@r,stop@mR
  3098   000F90  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3099   000F94  EC8B  F012         	call	_stop	;wreg free
  3100   000F98  EF20  F007         	goto	l2976
  3101   000F9C                     l3014:
  3102                           
  3103                           ;../dc_motor.c: 241:             reverse_onesquare(l,r);
  3104   000F9C  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3105   000FA0  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3106   000FA4  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3107   000FA8  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3108   000FAC  EC98  F011         	call	_reverse_onesquare	;wreg free
  3109                           
  3110                           ;../dc_motor.c: 242:             stop(l,r);
  3111   000FB0  C024  F01A         	movff	motor_action@l,stop@mL
  3112   000FB4  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3113   000FB8  C026  F01C         	movff	motor_action@r,stop@mR
  3114   000FBC  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3115   000FC0  EC8B  F012         	call	_stop	;wreg free
  3116   000FC4                     
  3117                           ;../dc_motor.c: 243:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3118   000FC4  0E29               	movlw	41
  3119   000FC6  6E29               	movwf	(??_motor_action+1)^0,c
  3120   000FC8  0E96               	movlw	150
  3121   000FCA  6E28               	movwf	??_motor_action^0,c
  3122   000FCC  0E7F               	movlw	127
  3123   000FCE                     u1757:
  3124   000FCE  2EE8               	decfsz	wreg,f,c
  3125   000FD0  D7FE               	bra	u1757
  3126   000FD2  2E28               	decfsz	??_motor_action^0,f,c
  3127   000FD4  D7FC               	bra	u1757
  3128   000FD6  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3129   000FD8  D7FA               	bra	u1757
  3130   000FDA  F000               	nop	
  3131   000FDC                     
  3132                           ;../dc_motor.c: 244:             left_90(l,r);
  3133   000FDC  C024  F01A         	movff	motor_action@l,left_90@mL
  3134   000FE0  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3135   000FE4  C026  F01C         	movff	motor_action@r,left_90@mR
  3136   000FE8  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3137   000FEC  ECA4  F010         	call	_left_90	;wreg free
  3138   000FF0                     l3020:
  3139                           
  3140                           ;../dc_motor.c: 245:             stop(l,r);
  3141   000FF0  C024  F01A         	movff	motor_action@l,stop@mL
  3142   000FF4  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3143   000FF8  C026  F01C         	movff	motor_action@r,stop@mR
  3144   000FFC  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3145   001000  EC8B  F012         	call	_stop	;wreg free
  3146                           
  3147                           ;../dc_motor.c: 246:             break;
  3148   001004  EF22  F009         	goto	l331
  3149   001008                     l3022:
  3150                           
  3151                           ;../dc_motor.c: 248:             reverse_fromcard(l,r);
  3152   001008  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3153   00100C  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3154   001010  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3155   001014  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3156   001018  ECE9  F011         	call	_reverse_fromcard	;wreg free
  3157                           
  3158                           ;../dc_motor.c: 249:             stop(l,r);
  3159   00101C  C024  F01A         	movff	motor_action@l,stop@mL
  3160   001020  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3161   001024  C026  F01C         	movff	motor_action@r,stop@mR
  3162   001028  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3163   00102C  EC8B  F012         	call	_stop	;wreg free
  3164   001030                     
  3165                           ;../dc_motor.c: 250:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3166   001030  0E29               	movlw	41
  3167   001032  6E29               	movwf	(??_motor_action+1)^0,c
  3168   001034  0E96               	movlw	150
  3169   001036  6E28               	movwf	??_motor_action^0,c
  3170   001038  0E7F               	movlw	127
  3171   00103A                     u1767:
  3172   00103A  2EE8               	decfsz	wreg,f,c
  3173   00103C  D7FE               	bra	u1767
  3174   00103E  2E28               	decfsz	??_motor_action^0,f,c
  3175   001040  D7FC               	bra	u1767
  3176   001042  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3177   001044  D7FA               	bra	u1767
  3178   001046  F000               	nop	
  3179   001048                     
  3180                           ;../dc_motor.c: 251:             right_135(l,r);
  3181   001048  C024  F01A         	movff	motor_action@l,right_135@mL
  3182   00104C  C025  F01B         	movff	motor_action@l+1,right_135@mL+1
  3183   001050  C026  F01C         	movff	motor_action@r,right_135@mR
  3184   001054  C027  F01D         	movff	motor_action@r+1,right_135@mR+1
  3185   001058  EC47  F011         	call	_right_135	;wreg free
  3186   00105C                     
  3187                           ;../dc_motor.c: 252:             stop(l,r);
  3188   00105C  C024  F01A         	movff	motor_action@l,stop@mL
  3189   001060  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3190   001064  C026  F01C         	movff	motor_action@r,stop@mR
  3191   001068  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3192   00106C  EC8B  F012         	call	_stop	;wreg free
  3193   001070                     
  3194                           ;../dc_motor.c: 253:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3195   001070  0E29               	movlw	41
  3196   001072  6E29               	movwf	(??_motor_action+1)^0,c
  3197   001074  0E96               	movlw	150
  3198   001076  6E28               	movwf	??_motor_action^0,c
  3199   001078  0E7F               	movlw	127
  3200   00107A                     u1777:
  3201   00107A  2EE8               	decfsz	wreg,f,c
  3202   00107C  D7FE               	bra	u1777
  3203   00107E  2E28               	decfsz	??_motor_action^0,f,c
  3204   001080  D7FC               	bra	u1777
  3205   001082  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3206   001084  D7FA               	bra	u1777
  3207   001086  F000               	nop	
  3208                           
  3209                           ;../dc_motor.c: 254:             right_135(l,r);
  3210   001088  C024  F01A         	movff	motor_action@l,right_135@mL
  3211   00108C  C025  F01B         	movff	motor_action@l+1,right_135@mL+1
  3212   001090  C026  F01C         	movff	motor_action@r,right_135@mR
  3213   001094  C027  F01D         	movff	motor_action@r+1,right_135@mR+1
  3214   001098  EC47  F011         	call	_right_135	;wreg free
  3215                           
  3216                           ;../dc_motor.c: 255:             stop(l,r);
  3217   00109C  C024  F01A         	movff	motor_action@l,stop@mL
  3218   0010A0  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3219   0010A4  C026  F01C         	movff	motor_action@r,stop@mR
  3220   0010A8  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3221   0010AC  EC8B  F012         	call	_stop	;wreg free
  3222                           
  3223                           ;../dc_motor.c: 256:             break;
  3224   0010B0  EF22  F009         	goto	l331
  3225   0010B4                     l3032:
  3226                           
  3227                           ;../dc_motor.c: 258:             reverse_fromcard(l,r);
  3228   0010B4  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3229   0010B8  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3230   0010BC  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3231   0010C0  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3232   0010C4  ECE9  F011         	call	_reverse_fromcard	;wreg free
  3233                           
  3234                           ;../dc_motor.c: 259:             stop(l,r);
  3235   0010C8  C024  F01A         	movff	motor_action@l,stop@mL
  3236   0010CC  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3237   0010D0  C026  F01C         	movff	motor_action@r,stop@mR
  3238   0010D4  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3239   0010D8  EC8B  F012         	call	_stop	;wreg free
  3240   0010DC                     
  3241                           ;../dc_motor.c: 260:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3242   0010DC  0E29               	movlw	41
  3243   0010DE  6E29               	movwf	(??_motor_action+1)^0,c
  3244   0010E0  0E96               	movlw	150
  3245   0010E2  6E28               	movwf	??_motor_action^0,c
  3246   0010E4  0E7F               	movlw	127
  3247   0010E6                     u1787:
  3248   0010E6  2EE8               	decfsz	wreg,f,c
  3249   0010E8  D7FE               	bra	u1787
  3250   0010EA  2E28               	decfsz	??_motor_action^0,f,c
  3251   0010EC  D7FC               	bra	u1787
  3252   0010EE  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3253   0010F0  D7FA               	bra	u1787
  3254   0010F2  F000               	nop	
  3255   0010F4                     
  3256                           ;../dc_motor.c: 261:             left_135(l,r);
  3257   0010F4  C024  F01A         	movff	motor_action@l,left_135@mL
  3258   0010F8  C025  F01B         	movff	motor_action@l+1,left_135@mL+1
  3259   0010FC  C026  F01C         	movff	motor_action@r,left_135@mR
  3260   001100  C027  F01D         	movff	motor_action@r+1,left_135@mR+1
  3261   001104  EC3A  F012         	call	_left_135	;wreg free
  3262   001108  EFF8  F007         	goto	l3020
  3263   00110C                     l3040:
  3264                           
  3265                           ;../dc_motor.c: 265:             reverse_fromcard(l,r);
  3266   00110C  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3267   001110  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3268   001114  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3269   001118  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3270   00111C  ECE9  F011         	call	_reverse_fromcard	;wreg free
  3271                           
  3272                           ;../dc_motor.c: 266:             stop(l,r);
  3273   001120  C024  F01A         	movff	motor_action@l,stop@mL
  3274   001124  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3275   001128  C026  F01C         	movff	motor_action@r,stop@mR
  3276   00112C  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3277   001130  EC8B  F012         	call	_stop	;wreg free
  3278   001134                     
  3279                           ;../dc_motor.c: 267:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3280   001134  0E29               	movlw	41
  3281   001136  6E29               	movwf	(??_motor_action+1)^0,c
  3282   001138  0E96               	movlw	150
  3283   00113A  6E28               	movwf	??_motor_action^0,c
  3284   00113C  0E7F               	movlw	127
  3285   00113E                     u1797:
  3286   00113E  2EE8               	decfsz	wreg,f,c
  3287   001140  D7FE               	bra	u1797
  3288   001142  2E28               	decfsz	??_motor_action^0,f,c
  3289   001144  D7FC               	bra	u1797
  3290   001146  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3291   001148  D7FA               	bra	u1797
  3292   00114A  F000               	nop	
  3293   00114C                     
  3294                           ;../dc_motor.c: 268:             left_90(l,r);
  3295   00114C  C024  F01A         	movff	motor_action@l,left_90@mL
  3296   001150  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3297   001154  C026  F01C         	movff	motor_action@r,left_90@mR
  3298   001158  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3299   00115C  ECA4  F010         	call	_left_90	;wreg free
  3300   001160                     
  3301                           ;../dc_motor.c: 269:             stop(l,r);
  3302   001160  C024  F01A         	movff	motor_action@l,stop@mL
  3303   001164  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3304   001168  C026  F01C         	movff	motor_action@r,stop@mR
  3305   00116C  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3306   001170  EC8B  F012         	call	_stop	;wreg free
  3307   001174                     
  3308                           ;../dc_motor.c: 270:             _delay((unsigned long)((800)*(64000000/4000.0)));
  3309   001174  0E41               	movlw	65
  3310   001176  6E29               	movwf	(??_motor_action+1)^0,c
  3311   001178  0EF0               	movlw	240
  3312   00117A  6E28               	movwf	??_motor_action^0,c
  3313   00117C  0E33               	movlw	51
  3314   00117E                     u1807:
  3315   00117E  2EE8               	decfsz	wreg,f,c
  3316   001180  D7FE               	bra	u1807
  3317   001182  2E28               	decfsz	??_motor_action^0,f,c
  3318   001184  D7FC               	bra	u1807
  3319   001186  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3320   001188  D7FA               	bra	u1807
  3321   00118A  F000               	nop	
  3322                           
  3323                           ;../dc_motor.c: 271:             left_90(l,r);
  3324   00118C  C024  F01A         	movff	motor_action@l,left_90@mL
  3325   001190  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3326   001194  C026  F01C         	movff	motor_action@r,left_90@mR
  3327   001198  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3328   00119C  ECA4  F010         	call	_left_90	;wreg free
  3329                           
  3330                           ;../dc_motor.c: 272:             stop(l,r);
  3331   0011A0  C024  F01A         	movff	motor_action@l,stop@mL
  3332   0011A4  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3333   0011A8  C026  F01C         	movff	motor_action@r,stop@mR
  3334   0011AC  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3335   0011B0  EC8B  F012         	call	_stop	;wreg free
  3336   0011B4                     l329:
  3337                           
  3338                           ;../dc_motor.c: 274:             forward(l,r);
  3339   0011B4  C024  F01A         	movff	motor_action@l,forward@mL
  3340   0011B8  C025  F01B         	movff	motor_action@l+1,forward@mL+1
  3341   0011BC  C026  F01C         	movff	motor_action@r,forward@mR
  3342   0011C0  C027  F01D         	movff	motor_action@r+1,forward@mR+1
  3343   0011C4  ECD2  F012         	call	_forward	;wreg free
  3344                           
  3345                           ;../dc_motor.c: 275:             stop(l,r);
  3346   0011C8  C024  F01A         	movff	motor_action@l,stop@mL
  3347   0011CC  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3348   0011D0  C026  F01C         	movff	motor_action@r,stop@mR
  3349   0011D4  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3350   0011D8  EC8B  F012         	call	_stop	;wreg free
  3351                           
  3352                           ;../dc_motor.c: 276:             break;
  3353   0011DC  EF22  F009         	goto	l331
  3354   0011E0                     l3052:
  3355   0011E0  C022  F028         	movff	motor_action@color,??_motor_action
  3356   0011E4  C023  F029         	movff	motor_action@color+1,??_motor_action+1
  3357                           
  3358                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3359                           ; Switch size 1, requested type "simple"
  3360                           ; Number of cases is 1, Range of values is 0 to 0
  3361                           ; switch strategies available:
  3362                           ; Name         Instructions Cycles
  3363                           ; simple_byte            4     3 (average)
  3364                           ;	Chosen strategy is simple_byte
  3365   0011E8  5029               	movf	(??_motor_action+1)^0,w,c
  3366   0011EA  0A00               	xorlw	0	; case 0
  3367   0011EC  B4D8               	btfsc	status,2,c
  3368   0011EE  EFFB  F008         	goto	l3336
  3369   0011F2  EF22  F009         	goto	l331
  3370   0011F6                     l3336:
  3371                           
  3372                           ; Switch size 1, requested type "simple"
  3373                           ; Number of cases is 9, Range of values is 0 to 8
  3374                           ; switch strategies available:
  3375                           ; Name         Instructions Cycles
  3376                           ; simple_byte           28    15 (average)
  3377                           ;	Chosen strategy is simple_byte
  3378   0011F6  5028               	movf	??_motor_action^0,w,c
  3379   0011F8  0A00               	xorlw	0	; case 0
  3380   0011FA  B4D8               	btfsc	status,2,c
  3381   0011FC  EFDA  F008         	goto	l329
  3382   001200  0A01               	xorlw	1	; case 1
  3383   001202  B4D8               	btfsc	status,2,c
  3384   001204  EF0C  F007         	goto	l2974
  3385   001208  0A03               	xorlw	3	; case 2
  3386   00120A  B4D8               	btfsc	status,2,c
  3387   00120C  EF62  F007         	goto	l2984
  3388   001210  0A01               	xorlw	1	; case 3
  3389   001212  B4D8               	btfsc	status,2,c
  3390   001214  EF62  F007         	goto	l2984
  3391   001218  0A07               	xorlw	7	; case 4
  3392   00121A  B4D8               	btfsc	status,2,c
  3393   00121C  EFB8  F007         	goto	l3004
  3394   001220  0A01               	xorlw	1	; case 5
  3395   001222  B4D8               	btfsc	status,2,c
  3396   001224  EFCE  F007         	goto	l3014
  3397   001228  0A03               	xorlw	3	; case 6
  3398   00122A  B4D8               	btfsc	status,2,c
  3399   00122C  EF04  F008         	goto	l3022
  3400   001230  0A01               	xorlw	1	; case 7
  3401   001232  B4D8               	btfsc	status,2,c
  3402   001234  EF5A  F008         	goto	l3032
  3403   001238  0A0F               	xorlw	15	; case 8
  3404   00123A  B4D8               	btfsc	status,2,c
  3405   00123C  EF86  F008         	goto	l3040
  3406   001240  EF22  F009         	goto	l331
  3407   001244                     l331:
  3408   001244  0012               	return		;funcret
  3409   001246                     __end_of_motor_action:
  3410                           	callstack 0
  3411                           
  3412 ;; *************** function _stop *****************
  3413 ;; Defined at:
  3414 ;;		line 61 in file "../dc_motor.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3417 ;;		 -> main@motorL(9), 
  3418 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3419 ;;		 -> main@motorR(9), 
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;  i               2   30[COMRAM] int 
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      void 
  3424 ;; Registers used:
  3425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3431 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3432 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3433 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3434 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3435 ;;Total ram usage:        7 bytes
  3436 ;; Hardware stack levels used: 1
  3437 ;; Hardware stack levels required when called: 3
  3438 ;; This function calls:
  3439 ;;		_setMotorPWM
  3440 ;; This function is called by:
  3441 ;;		_main
  3442 ;;		_motor_action
  3443 ;;		_motor_action_return
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	text16
  3448   002516                     __ptext16:
  3449                           	callstack 0
  3450   002516                     _stop:
  3451                           	callstack 27
  3452   002516                     
  3453                           ;../dc_motor.c: 61: void stop(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c: 6
      +                          2: {;../dc_motor.c: 63:     mL->direction = 0;
  3454   002516  EE20 F001          	lfsr	2,1
  3455   00251A  501A               	movf	stop@mL^0,w,c
  3456   00251C  26D9               	addwf	fsr2l,f,c
  3457   00251E  501B               	movf	(stop@mL+1)^0,w,c
  3458   002520  22DA               	addwfc	fsr2h,f,c
  3459   002522  0E00               	movlw	0
  3460   002524  6EDF               	movwf	indf2,c
  3461                           
  3462                           ;../dc_motor.c: 64:     mR->direction = 0;
  3463   002526  EE20 F001          	lfsr	2,1
  3464   00252A  501C               	movf	stop@mR^0,w,c
  3465   00252C  26D9               	addwf	fsr2l,f,c
  3466   00252E  501D               	movf	(stop@mR+1)^0,w,c
  3467   002530  22DA               	addwfc	fsr2h,f,c
  3468   002532  0E00               	movlw	0
  3469   002534  6EDF               	movwf	indf2,c
  3470   002536                     
  3471                           ;../dc_motor.c: 65:     for (int i = 5;i>0;i = i - 1)
  3472   002536  0E00               	movlw	0
  3473   002538  6E20               	movwf	(stop@i+1)^0,c
  3474   00253A  0E05               	movlw	5
  3475   00253C  6E1F               	movwf	stop@i^0,c
  3476   00253E                     l2628:
  3477                           
  3478                           ;../dc_motor.c: 66:     {;../dc_motor.c: 67:         mL->power = i;
  3479   00253E  C01A  FFD9         	movff	stop@mL,fsr2l
  3480   002542  C01B  FFDA         	movff	stop@mL+1,fsr2h
  3481   002546  C01F  FFDF         	movff	stop@i,indf2
  3482                           
  3483                           ;../dc_motor.c: 68:         mR->power = i;
  3484   00254A  C01C  FFD9         	movff	stop@mR,fsr2l
  3485   00254E  C01D  FFDA         	movff	stop@mR+1,fsr2h
  3486   002552  C01F  FFDF         	movff	stop@i,indf2
  3487   002556                     
  3488                           ;../dc_motor.c: 69:         setMotorPWM(mL);
  3489   002556  C01A  F00F         	movff	stop@mL,setMotorPWM@m
  3490   00255A  C01B  F010         	movff	stop@mL+1,setMotorPWM@m+1
  3491   00255E  EC54  F00B         	call	_setMotorPWM	;wreg free
  3492   002562                     
  3493                           ;../dc_motor.c: 70:         setMotorPWM(mR);
  3494   002562  C01C  F00F         	movff	stop@mR,setMotorPWM@m
  3495   002566  C01D  F010         	movff	stop@mR+1,setMotorPWM@m+1
  3496   00256A  EC54  F00B         	call	_setMotorPWM	;wreg free
  3497   00256E                     
  3498                           ;../dc_motor.c: 71:         _delay((unsigned long)((10)*(64000000/4000.0)));
  3499   00256E  0ED0               	movlw	208
  3500   002570  6E1E               	movwf	??_stop^0,c
  3501   002572  0ECA               	movlw	202
  3502   002574                     u1817:
  3503   002574  2EE8               	decfsz	wreg,f,c
  3504   002576  D7FE               	bra	u1817
  3505   002578  2E1E               	decfsz	??_stop^0,f,c
  3506   00257A  D7FC               	bra	u1817
  3507   00257C                     
  3508                           ;../dc_motor.c: 72:     }
  3509   00257C  0EFF               	movlw	255
  3510   00257E  241F               	addwf	stop@i^0,w,c
  3511   002580  6E1F               	movwf	stop@i^0,c
  3512   002582  0EFF               	movlw	255
  3513   002584  2020               	addwfc	(stop@i+1)^0,w,c
  3514   002586  6E20               	movwf	(stop@i+1)^0,c
  3515   002588  BE20               	btfsc	(stop@i+1)^0,7,c
  3516   00258A  EFD1  F012         	goto	u1330
  3517   00258E  5020               	movf	(stop@i+1)^0,w,c
  3518   002590  E106               	bnz	u1331
  3519   002592  041F               	decf	stop@i^0,w,c
  3520   002594  B0D8               	btfsc	status,0,c
  3521   002596  EFCF  F012         	goto	u1331
  3522   00259A  EFD1  F012         	goto	u1330
  3523   00259E                     u1331:
  3524   00259E  EF9F  F012         	goto	l2628
  3525   0025A2                     u1330:
  3526   0025A2  0012               	return		;funcret
  3527   0025A4                     __end_of_stop:
  3528                           	callstack 0
  3529                           
  3530 ;; *************** function _right_90 *****************
  3531 ;; Defined at:
  3532 ;;		line 121 in file "../dc_motor.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3535 ;;		 -> main@motorL(9), 
  3536 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3537 ;;		 -> main@motorR(9), 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  i               2   31[COMRAM] int 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3549 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3550 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3551 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3552 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3553 ;;Total ram usage:        8 bytes
  3554 ;; Hardware stack levels used: 1
  3555 ;; Hardware stack levels required when called: 3
  3556 ;; This function calls:
  3557 ;;		_setMotorPWM
  3558 ;; This function is called by:
  3559 ;;		_motor_action
  3560 ;;		_motor_action_return
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text17
  3565   0020A4                     __ptext17:
  3566                           	callstack 0
  3567   0020A4                     _right_90:
  3568                           	callstack 26
  3569   0020A4                     
  3570                           ;../dc_motor.c: 121: void right_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 122: {;../dc_motor.c: 123:     mL->direction = 1;
  3571   0020A4  EE20 F001          	lfsr	2,1
  3572   0020A8  501A               	movf	right_90@mL^0,w,c
  3573   0020AA  26D9               	addwf	fsr2l,f,c
  3574   0020AC  501B               	movf	(right_90@mL+1)^0,w,c
  3575   0020AE  22DA               	addwfc	fsr2h,f,c
  3576   0020B0  0E01               	movlw	1
  3577   0020B2  6EDF               	movwf	indf2,c
  3578                           
  3579                           ;../dc_motor.c: 124:     mR->direction = 0;
  3580   0020B4  EE20 F001          	lfsr	2,1
  3581   0020B8  501C               	movf	right_90@mR^0,w,c
  3582   0020BA  26D9               	addwf	fsr2l,f,c
  3583   0020BC  501D               	movf	(right_90@mR+1)^0,w,c
  3584   0020BE  22DA               	addwfc	fsr2h,f,c
  3585   0020C0  0E00               	movlw	0
  3586   0020C2  6EDF               	movwf	indf2,c
  3587   0020C4                     
  3588                           ;../dc_motor.c: 125:     for (int i = 0;i<251;i = i + 2)
  3589   0020C4  0E00               	movlw	0
  3590   0020C6  6E21               	movwf	(right_90@i+1)^0,c
  3591   0020C8  0E00               	movlw	0
  3592   0020CA  6E20               	movwf	right_90@i^0,c
  3593   0020CC                     l2712:
  3594                           
  3595                           ;../dc_motor.c: 126:     {;../dc_motor.c: 127:         mL->power = i;
  3596   0020CC  C01A  FFD9         	movff	right_90@mL,fsr2l
  3597   0020D0  C01B  FFDA         	movff	right_90@mL+1,fsr2h
  3598   0020D4  C020  FFDF         	movff	right_90@i,indf2
  3599   0020D8                     
  3600                           ;../dc_motor.c: 128:         mR->power = 50 + i;
  3601   0020D8  5020               	movf	right_90@i^0,w,c
  3602   0020DA  0F32               	addlw	50
  3603   0020DC  C01C  FFD9         	movff	right_90@mR,fsr2l
  3604   0020E0  C01D  FFDA         	movff	right_90@mR+1,fsr2h
  3605   0020E4  6EDF               	movwf	indf2,c
  3606   0020E6                     
  3607                           ;../dc_motor.c: 129:         setMotorPWM(mL);
  3608   0020E6  C01A  F00F         	movff	right_90@mL,setMotorPWM@m
  3609   0020EA  C01B  F010         	movff	right_90@mL+1,setMotorPWM@m+1
  3610   0020EE  EC54  F00B         	call	_setMotorPWM	;wreg free
  3611   0020F2                     
  3612                           ;../dc_motor.c: 130:         setMotorPWM(mR);
  3613   0020F2  C01C  F00F         	movff	right_90@mR,setMotorPWM@m
  3614   0020F6  C01D  F010         	movff	right_90@mR+1,setMotorPWM@m+1
  3615   0020FA  EC54  F00B         	call	_setMotorPWM	;wreg free
  3616   0020FE                     
  3617                           ;../dc_motor.c: 131:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3618   0020FE  0E35               	movlw	53
  3619   002100                     u1827:
  3620   002100  2EE8               	decfsz	wreg,f,c
  3621   002102  D7FE               	bra	u1827
  3622   002104  F000               	nop	
  3623   002106                     
  3624                           ;../dc_motor.c: 132:     }
  3625   002106  0E02               	movlw	2
  3626   002108  2420               	addwf	right_90@i^0,w,c
  3627   00210A  6E20               	movwf	right_90@i^0,c
  3628   00210C  0E00               	movlw	0
  3629   00210E  2021               	addwfc	(right_90@i+1)^0,w,c
  3630   002110  6E21               	movwf	(right_90@i+1)^0,c
  3631   002112  BE21               	btfsc	(right_90@i+1)^0,7,c
  3632   002114  EF95  F010         	goto	u1371
  3633   002118  5021               	movf	(right_90@i+1)^0,w,c
  3634   00211A  E109               	bnz	u1370
  3635   00211C  0EFB               	movlw	251
  3636   00211E  5C20               	subwf	right_90@i^0,w,c
  3637   002120  A0D8               	btfss	status,0,c
  3638   002122  EF95  F010         	goto	u1371
  3639   002126  EF97  F010         	goto	u1370
  3640   00212A                     u1371:
  3641   00212A  EF66  F010         	goto	l2712
  3642   00212E                     u1370:
  3643   00212E                     
  3644                           ;../dc_motor.c: 133:     _delay((unsigned long)((165)*(64000000/4000.0)));
  3645   00212E  0E0E               	movlw	14
  3646   002130  6E1F               	movwf	(??_right_90+1)^0,c
  3647   002132  0E65               	movlw	101
  3648   002134  6E1E               	movwf	??_right_90^0,c
  3649   002136  0E87               	movlw	135
  3650   002138                     u1837:
  3651   002138  2EE8               	decfsz	wreg,f,c
  3652   00213A  D7FE               	bra	u1837
  3653   00213C  2E1E               	decfsz	??_right_90^0,f,c
  3654   00213E  D7FC               	bra	u1837
  3655   002140  2E1F               	decfsz	(??_right_90+1)^0,f,c
  3656   002142  D7FA               	bra	u1837
  3657   002144  F000               	nop	
  3658   002146  0012               	return		;funcret
  3659   002148                     __end_of_right_90:
  3660                           	callstack 0
  3661                           
  3662 ;; *************** function _right_135 *****************
  3663 ;; Defined at:
  3664 ;;		line 166 in file "../dc_motor.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3667 ;;		 -> main@motorL(9), 
  3668 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3669 ;;		 -> main@motorR(9), 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  i               2   31[COMRAM] int 
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      void 
  3674 ;; Registers used:
  3675 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3681 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3683 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3684 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3685 ;;Total ram usage:        8 bytes
  3686 ;; Hardware stack levels used: 1
  3687 ;; Hardware stack levels required when called: 3
  3688 ;; This function calls:
  3689 ;;		_setMotorPWM
  3690 ;; This function is called by:
  3691 ;;		_motor_action
  3692 ;;		_motor_action_return
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           	psect	text18
  3697   00228E                     __ptext18:
  3698                           	callstack 0
  3699   00228E                     _right_135:
  3700                           	callstack 26
  3701   00228E                     
  3702                           ;../dc_motor.c: 166: void right_135(struct DC_motor *mL, struct DC_motor *mR);../dc_moto
      +                          r.c: 167: {;../dc_motor.c: 168:     mL->direction = 1;
  3703   00228E  EE20 F001          	lfsr	2,1
  3704   002292  501A               	movf	right_135@mL^0,w,c
  3705   002294  26D9               	addwf	fsr2l,f,c
  3706   002296  501B               	movf	(right_135@mL+1)^0,w,c
  3707   002298  22DA               	addwfc	fsr2h,f,c
  3708   00229A  0E01               	movlw	1
  3709   00229C  6EDF               	movwf	indf2,c
  3710                           
  3711                           ;../dc_motor.c: 169:     mR->direction = 0;
  3712   00229E  EE20 F001          	lfsr	2,1
  3713   0022A2  501C               	movf	right_135@mR^0,w,c
  3714   0022A4  26D9               	addwf	fsr2l,f,c
  3715   0022A6  501D               	movf	(right_135@mR+1)^0,w,c
  3716   0022A8  22DA               	addwfc	fsr2h,f,c
  3717   0022AA  0E00               	movlw	0
  3718   0022AC  6EDF               	movwf	indf2,c
  3719   0022AE                     
  3720                           ;../dc_motor.c: 170:     for (int i = 0;i<300;i = i + 2)
  3721   0022AE  0E00               	movlw	0
  3722   0022B0  6E21               	movwf	(right_135@i+1)^0,c
  3723   0022B2  0E00               	movlw	0
  3724   0022B4  6E20               	movwf	right_135@i^0,c
  3725   0022B6                     l2760:
  3726                           
  3727                           ;../dc_motor.c: 171:     {;../dc_motor.c: 172:         mL->power = i;
  3728   0022B6  C01A  FFD9         	movff	right_135@mL,fsr2l
  3729   0022BA  C01B  FFDA         	movff	right_135@mL+1,fsr2h
  3730   0022BE  C020  FFDF         	movff	right_135@i,indf2
  3731   0022C2                     
  3732                           ;../dc_motor.c: 173:         mR->power = 50 + i;
  3733   0022C2  5020               	movf	right_135@i^0,w,c
  3734   0022C4  0F32               	addlw	50
  3735   0022C6  C01C  FFD9         	movff	right_135@mR,fsr2l
  3736   0022CA  C01D  FFDA         	movff	right_135@mR+1,fsr2h
  3737   0022CE  6EDF               	movwf	indf2,c
  3738   0022D0                     
  3739                           ;../dc_motor.c: 174:         setMotorPWM(mL);
  3740   0022D0  C01A  F00F         	movff	right_135@mL,setMotorPWM@m
  3741   0022D4  C01B  F010         	movff	right_135@mL+1,setMotorPWM@m+1
  3742   0022D8  EC54  F00B         	call	_setMotorPWM	;wreg free
  3743   0022DC                     
  3744                           ;../dc_motor.c: 175:         setMotorPWM(mR);
  3745   0022DC  C01C  F00F         	movff	right_135@mR,setMotorPWM@m
  3746   0022E0  C01D  F010         	movff	right_135@mR+1,setMotorPWM@m+1
  3747   0022E4  EC54  F00B         	call	_setMotorPWM	;wreg free
  3748   0022E8                     
  3749                           ;../dc_motor.c: 176:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3750   0022E8  0E35               	movlw	53
  3751   0022EA                     u1847:
  3752   0022EA  2EE8               	decfsz	wreg,f,c
  3753   0022EC  D7FE               	bra	u1847
  3754   0022EE  F000               	nop	
  3755   0022F0                     
  3756                           ;../dc_motor.c: 177:     }
  3757   0022F0  0E02               	movlw	2
  3758   0022F2  2420               	addwf	right_135@i^0,w,c
  3759   0022F4  6E20               	movwf	right_135@i^0,c
  3760   0022F6  0E00               	movlw	0
  3761   0022F8  2021               	addwfc	(right_135@i+1)^0,w,c
  3762   0022FA  6E21               	movwf	(right_135@i+1)^0,c
  3763   0022FC  BE21               	btfsc	(right_135@i+1)^0,7,c
  3764   0022FE  EF8A  F011         	goto	u1391
  3765   002302  0E2C               	movlw	44
  3766   002304  5C20               	subwf	right_135@i^0,w,c
  3767   002306  0E01               	movlw	1
  3768   002308  5821               	subwfb	(right_135@i+1)^0,w,c
  3769   00230A  A0D8               	btfss	status,0,c
  3770   00230C  EF8A  F011         	goto	u1391
  3771   002310  EF8C  F011         	goto	u1390
  3772   002314                     u1391:
  3773   002314  EF5B  F011         	goto	l2760
  3774   002318                     u1390:
  3775   002318                     
  3776                           ;../dc_motor.c: 178:     _delay((unsigned long)((230)*(64000000/4000.0)));
  3777   002318  0E13               	movlw	19
  3778   00231A  6E1F               	movwf	(??_right_135+1)^0,c
  3779   00231C  0EAC               	movlw	172
  3780   00231E  6E1E               	movwf	??_right_135^0,c
  3781   002320  0E2A               	movlw	42
  3782   002322                     u1857:
  3783   002322  2EE8               	decfsz	wreg,f,c
  3784   002324  D7FE               	bra	u1857
  3785   002326  2E1E               	decfsz	??_right_135^0,f,c
  3786   002328  D7FC               	bra	u1857
  3787   00232A  2E1F               	decfsz	(??_right_135+1)^0,f,c
  3788   00232C  D7FA               	bra	u1857
  3789   00232E  0012               	return		;funcret
  3790   002330                     __end_of_right_135:
  3791                           	callstack 0
  3792                           
  3793 ;; *************** function _reverse_onesquare *****************
  3794 ;; Defined at:
  3795 ;;		line 106 in file "../dc_motor.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3798 ;;		 -> main@motorL(9), 
  3799 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3800 ;;		 -> main@motorR(9), 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  i               2   31[COMRAM] int 
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  1    wreg      void 
  3805 ;; Registers used:
  3806 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3812 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3813 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3814 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3815 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3816 ;;Total ram usage:        8 bytes
  3817 ;; Hardware stack levels used: 1
  3818 ;; Hardware stack levels required when called: 3
  3819 ;; This function calls:
  3820 ;;		_setMotorPWM
  3821 ;; This function is called by:
  3822 ;;		_motor_action
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           	psect	text19
  3827   002330                     __ptext19:
  3828                           	callstack 0
  3829   002330                     _reverse_onesquare:
  3830                           	callstack 26
  3831   002330                     
  3832                           ;../dc_motor.c: 106: void reverse_onesquare (struct DC_motor *mL, struct DC_motor *mR);.
      +                          ./dc_motor.c: 107: {;../dc_motor.c: 108:     mL->direction = 0;
  3833   002330  EE20 F001          	lfsr	2,1
  3834   002334  501A               	movf	reverse_onesquare@mL^0,w,c
  3835   002336  26D9               	addwf	fsr2l,f,c
  3836   002338  501B               	movf	(reverse_onesquare@mL+1)^0,w,c
  3837   00233A  22DA               	addwfc	fsr2h,f,c
  3838   00233C  0E00               	movlw	0
  3839   00233E  6EDF               	movwf	indf2,c
  3840                           
  3841                           ;../dc_motor.c: 109:     mR->direction = 0;
  3842   002340  EE20 F001          	lfsr	2,1
  3843   002344  501C               	movf	reverse_onesquare@mR^0,w,c
  3844   002346  26D9               	addwf	fsr2l,f,c
  3845   002348  501D               	movf	(reverse_onesquare@mR+1)^0,w,c
  3846   00234A  22DA               	addwfc	fsr2h,f,c
  3847   00234C  0E00               	movlw	0
  3848   00234E  6EDF               	movwf	indf2,c
  3849   002350                     
  3850                           ;../dc_motor.c: 110:     for (int i=0;i<9;i=i + 2)
  3851   002350  0E00               	movlw	0
  3852   002352  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  3853   002354  0E00               	movlw	0
  3854   002356  6E20               	movwf	reverse_onesquare@i^0,c
  3855   002358                     l2690:
  3856                           
  3857                           ;../dc_motor.c: 111:     {;../dc_motor.c: 112:         mL->power = i;
  3858   002358  C01A  FFD9         	movff	reverse_onesquare@mL,fsr2l
  3859   00235C  C01B  FFDA         	movff	reverse_onesquare@mL+1,fsr2h
  3860   002360  C020  FFDF         	movff	reverse_onesquare@i,indf2
  3861                           
  3862                           ;../dc_motor.c: 113:         mR->power = i;
  3863   002364  C01C  FFD9         	movff	reverse_onesquare@mR,fsr2l
  3864   002368  C01D  FFDA         	movff	reverse_onesquare@mR+1,fsr2h
  3865   00236C  C020  FFDF         	movff	reverse_onesquare@i,indf2
  3866   002370                     
  3867                           ;../dc_motor.c: 114:         setMotorPWM(mL);
  3868   002370  C01A  F00F         	movff	reverse_onesquare@mL,setMotorPWM@m
  3869   002374  C01B  F010         	movff	reverse_onesquare@mL+1,setMotorPWM@m+1
  3870   002378  EC54  F00B         	call	_setMotorPWM	;wreg free
  3871   00237C                     
  3872                           ;../dc_motor.c: 115:         setMotorPWM(mR);
  3873   00237C  C01C  F00F         	movff	reverse_onesquare@mR,setMotorPWM@m
  3874   002380  C01D  F010         	movff	reverse_onesquare@mR+1,setMotorPWM@m+1
  3875   002384  EC54  F00B         	call	_setMotorPWM	;wreg free
  3876   002388                     
  3877                           ;../dc_motor.c: 116:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3878   002388  0E35               	movlw	53
  3879   00238A                     u1867:
  3880   00238A  2EE8               	decfsz	wreg,f,c
  3881   00238C  D7FE               	bra	u1867
  3882   00238E  F000               	nop	
  3883   002390                     
  3884                           ;../dc_motor.c: 117:     }
  3885   002390  0E02               	movlw	2
  3886   002392  2420               	addwf	reverse_onesquare@i^0,w,c
  3887   002394  6E20               	movwf	reverse_onesquare@i^0,c
  3888   002396  0E00               	movlw	0
  3889   002398  2021               	addwfc	(reverse_onesquare@i+1)^0,w,c
  3890   00239A  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  3891   00239C  BE21               	btfsc	(reverse_onesquare@i+1)^0,7,c
  3892   00239E  EFDA  F011         	goto	u1361
  3893   0023A2  5021               	movf	(reverse_onesquare@i+1)^0,w,c
  3894   0023A4  E109               	bnz	u1360
  3895   0023A6  0E09               	movlw	9
  3896   0023A8  5C20               	subwf	reverse_onesquare@i^0,w,c
  3897   0023AA  A0D8               	btfss	status,0,c
  3898   0023AC  EFDA  F011         	goto	u1361
  3899   0023B0  EFDC  F011         	goto	u1360
  3900   0023B4                     u1361:
  3901   0023B4  EFAC  F011         	goto	l2690
  3902   0023B8                     u1360:
  3903   0023B8                     
  3904                           ;../dc_motor.c: 118:     _delay((unsigned long)((1100)*(64000000/4000.0)));
  3905   0023B8  0E5A               	movlw	90
  3906   0023BA  6E1F               	movwf	(??_reverse_onesquare+1)^0,c
  3907   0023BC  0E49               	movlw	73
  3908   0023BE  6E1E               	movwf	??_reverse_onesquare^0,c
  3909   0023C0  0EE7               	movlw	231
  3910   0023C2                     u1877:
  3911   0023C2  2EE8               	decfsz	wreg,f,c
  3912   0023C4  D7FE               	bra	u1877
  3913   0023C6  2E1E               	decfsz	??_reverse_onesquare^0,f,c
  3914   0023C8  D7FC               	bra	u1877
  3915   0023CA  2E1F               	decfsz	(??_reverse_onesquare+1)^0,f,c
  3916   0023CC  D7FA               	bra	u1877
  3917   0023CE  F000               	nop	
  3918   0023D0  0012               	return		;funcret
  3919   0023D2                     __end_of_reverse_onesquare:
  3920                           	callstack 0
  3921                           
  3922 ;; *************** function _reverse_fromcard *****************
  3923 ;; Defined at:
  3924 ;;		line 91 in file "../dc_motor.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3927 ;;		 -> main@motorL(9), 
  3928 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3929 ;;		 -> main@motorR(9), 
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;  i               2   31[COMRAM] int 
  3932 ;; Return value:  Size  Location     Type
  3933 ;;                  1    wreg      void 
  3934 ;; Registers used:
  3935 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3936 ;; Tracked objects:
  3937 ;;		On entry : 0/0
  3938 ;;		On exit  : 0/0
  3939 ;;		Unchanged: 0/0
  3940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3941 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3942 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3943 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3944 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3945 ;;Total ram usage:        8 bytes
  3946 ;; Hardware stack levels used: 1
  3947 ;; Hardware stack levels required when called: 3
  3948 ;; This function calls:
  3949 ;;		_setMotorPWM
  3950 ;; This function is called by:
  3951 ;;		_motor_action
  3952 ;;		_motor_action_return
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           	psect	text20
  3957   0023D2                     __ptext20:
  3958                           	callstack 0
  3959   0023D2                     _reverse_fromcard:
  3960                           	callstack 26
  3961   0023D2                     
  3962                           ;../dc_motor.c: 91: void reverse_fromcard (struct DC_motor *mL, struct DC_motor *mR);../
      +                          dc_motor.c: 92: {;../dc_motor.c: 93:     mL->direction = 0;
  3963   0023D2  EE20 F001          	lfsr	2,1
  3964   0023D6  501A               	movf	reverse_fromcard@mL^0,w,c
  3965   0023D8  26D9               	addwf	fsr2l,f,c
  3966   0023DA  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  3967   0023DC  22DA               	addwfc	fsr2h,f,c
  3968   0023DE  0E00               	movlw	0
  3969   0023E0  6EDF               	movwf	indf2,c
  3970                           
  3971                           ;../dc_motor.c: 94:     mL->direction = 0;
  3972   0023E2  EE20 F001          	lfsr	2,1
  3973   0023E6  501A               	movf	reverse_fromcard@mL^0,w,c
  3974   0023E8  26D9               	addwf	fsr2l,f,c
  3975   0023EA  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  3976   0023EC  22DA               	addwfc	fsr2h,f,c
  3977   0023EE  0E00               	movlw	0
  3978   0023F0  6EDF               	movwf	indf2,c
  3979   0023F2                     
  3980                           ;../dc_motor.c: 95:     for (int i = 0;i < 9;i = i + 2)
  3981   0023F2  0E00               	movlw	0
  3982   0023F4  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  3983   0023F6  0E00               	movlw	0
  3984   0023F8  6E20               	movwf	reverse_fromcard@i^0,c
  3985   0023FA                     l2668:
  3986                           
  3987                           ;../dc_motor.c: 96:     {;../dc_motor.c: 97:         mL->power = i;
  3988   0023FA  C01A  FFD9         	movff	reverse_fromcard@mL,fsr2l
  3989   0023FE  C01B  FFDA         	movff	reverse_fromcard@mL+1,fsr2h
  3990   002402  C020  FFDF         	movff	reverse_fromcard@i,indf2
  3991                           
  3992                           ;../dc_motor.c: 98:         mR->power = i;
  3993   002406  C01C  FFD9         	movff	reverse_fromcard@mR,fsr2l
  3994   00240A  C01D  FFDA         	movff	reverse_fromcard@mR+1,fsr2h
  3995   00240E  C020  FFDF         	movff	reverse_fromcard@i,indf2
  3996   002412                     
  3997                           ;../dc_motor.c: 99:         setMotorPWM(mL);
  3998   002412  C01A  F00F         	movff	reverse_fromcard@mL,setMotorPWM@m
  3999   002416  C01B  F010         	movff	reverse_fromcard@mL+1,setMotorPWM@m+1
  4000   00241A  EC54  F00B         	call	_setMotorPWM	;wreg free
  4001   00241E                     
  4002                           ;../dc_motor.c: 100:         setMotorPWM(mR);
  4003   00241E  C01C  F00F         	movff	reverse_fromcard@mR,setMotorPWM@m
  4004   002422  C01D  F010         	movff	reverse_fromcard@mR+1,setMotorPWM@m+1
  4005   002426  EC54  F00B         	call	_setMotorPWM	;wreg free
  4006   00242A                     
  4007                           ;../dc_motor.c: 101:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4008   00242A  0E35               	movlw	53
  4009   00242C                     u1887:
  4010   00242C  2EE8               	decfsz	wreg,f,c
  4011   00242E  D7FE               	bra	u1887
  4012   002430  F000               	nop	
  4013   002432                     
  4014                           ;../dc_motor.c: 102:     }
  4015   002432  0E02               	movlw	2
  4016   002434  2420               	addwf	reverse_fromcard@i^0,w,c
  4017   002436  6E20               	movwf	reverse_fromcard@i^0,c
  4018   002438  0E00               	movlw	0
  4019   00243A  2021               	addwfc	(reverse_fromcard@i+1)^0,w,c
  4020   00243C  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  4021   00243E  BE21               	btfsc	(reverse_fromcard@i+1)^0,7,c
  4022   002440  EF2B  F012         	goto	u1351
  4023   002444  5021               	movf	(reverse_fromcard@i+1)^0,w,c
  4024   002446  E109               	bnz	u1350
  4025   002448  0E09               	movlw	9
  4026   00244A  5C20               	subwf	reverse_fromcard@i^0,w,c
  4027   00244C  A0D8               	btfss	status,0,c
  4028   00244E  EF2B  F012         	goto	u1351
  4029   002452  EF2D  F012         	goto	u1350
  4030   002456                     u1351:
  4031   002456  EFFD  F011         	goto	l2668
  4032   00245A                     u1350:
  4033   00245A                     
  4034                           ;../dc_motor.c: 103:     _delay((unsigned long)((500)*(64000000/4000.0)));
  4035   00245A  0E29               	movlw	41
  4036   00245C  6E1F               	movwf	(??_reverse_fromcard+1)^0,c
  4037   00245E  0E96               	movlw	150
  4038   002460  6E1E               	movwf	??_reverse_fromcard^0,c
  4039   002462  0E7F               	movlw	127
  4040   002464                     u1897:
  4041   002464  2EE8               	decfsz	wreg,f,c
  4042   002466  D7FE               	bra	u1897
  4043   002468  2E1E               	decfsz	??_reverse_fromcard^0,f,c
  4044   00246A  D7FC               	bra	u1897
  4045   00246C  2E1F               	decfsz	(??_reverse_fromcard+1)^0,f,c
  4046   00246E  D7FA               	bra	u1897
  4047   002470  F000               	nop	
  4048   002472  0012               	return		;funcret
  4049   002474                     __end_of_reverse_fromcard:
  4050                           	callstack 0
  4051                           
  4052 ;; *************** function _left_90 *****************
  4053 ;; Defined at:
  4054 ;;		line 136 in file "../dc_motor.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4057 ;;		 -> main@motorL(9), 
  4058 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4059 ;;		 -> main@motorR(9), 
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;  i               2   31[COMRAM] int 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  1    wreg      void 
  4064 ;; Registers used:
  4065 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4071 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4072 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4073 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4074 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4075 ;;Total ram usage:        8 bytes
  4076 ;; Hardware stack levels used: 1
  4077 ;; Hardware stack levels required when called: 3
  4078 ;; This function calls:
  4079 ;;		_setMotorPWM
  4080 ;; This function is called by:
  4081 ;;		_motor_action
  4082 ;;		_motor_action_return
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           	psect	text21
  4087   002148                     __ptext21:
  4088                           	callstack 0
  4089   002148                     _left_90:
  4090                           	callstack 26
  4091   002148                     
  4092                           ;../dc_motor.c: 136: void left_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 137: {;../dc_motor.c: 138:     mL->direction = 0;
  4093   002148  EE20 F001          	lfsr	2,1
  4094   00214C  501A               	movf	left_90@mL^0,w,c
  4095   00214E  26D9               	addwf	fsr2l,f,c
  4096   002150  501B               	movf	(left_90@mL+1)^0,w,c
  4097   002152  22DA               	addwfc	fsr2h,f,c
  4098   002154  0E00               	movlw	0
  4099   002156  6EDF               	movwf	indf2,c
  4100                           
  4101                           ;../dc_motor.c: 139:     mR->direction = 1;
  4102   002158  EE20 F001          	lfsr	2,1
  4103   00215C  501C               	movf	left_90@mR^0,w,c
  4104   00215E  26D9               	addwf	fsr2l,f,c
  4105   002160  501D               	movf	(left_90@mR+1)^0,w,c
  4106   002162  22DA               	addwfc	fsr2h,f,c
  4107   002164  0E01               	movlw	1
  4108   002166  6EDF               	movwf	indf2,c
  4109   002168                     
  4110                           ;../dc_motor.c: 140:     for (int i = 0;i<301;i = i + 2)
  4111   002168  0E00               	movlw	0
  4112   00216A  6E21               	movwf	(left_90@i+1)^0,c
  4113   00216C  0E00               	movlw	0
  4114   00216E  6E20               	movwf	left_90@i^0,c
  4115   002170                     l2736:
  4116                           
  4117                           ;../dc_motor.c: 141:     {;../dc_motor.c: 142:         mL->power = 50 + i;
  4118   002170  5020               	movf	left_90@i^0,w,c
  4119   002172  0F32               	addlw	50
  4120   002174  C01A  FFD9         	movff	left_90@mL,fsr2l
  4121   002178  C01B  FFDA         	movff	left_90@mL+1,fsr2h
  4122   00217C  6EDF               	movwf	indf2,c
  4123   00217E                     
  4124                           ;../dc_motor.c: 143:         mR->power = i;
  4125   00217E  C01C  FFD9         	movff	left_90@mR,fsr2l
  4126   002182  C01D  FFDA         	movff	left_90@mR+1,fsr2h
  4127   002186  C020  FFDF         	movff	left_90@i,indf2
  4128   00218A                     
  4129                           ;../dc_motor.c: 144:         setMotorPWM(mL);
  4130   00218A  C01A  F00F         	movff	left_90@mL,setMotorPWM@m
  4131   00218E  C01B  F010         	movff	left_90@mL+1,setMotorPWM@m+1
  4132   002192  EC54  F00B         	call	_setMotorPWM	;wreg free
  4133   002196                     
  4134                           ;../dc_motor.c: 145:         setMotorPWM(mR);
  4135   002196  C01C  F00F         	movff	left_90@mR,setMotorPWM@m
  4136   00219A  C01D  F010         	movff	left_90@mR+1,setMotorPWM@m+1
  4137   00219E  EC54  F00B         	call	_setMotorPWM	;wreg free
  4138   0021A2                     
  4139                           ;../dc_motor.c: 146:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4140   0021A2  0E35               	movlw	53
  4141   0021A4                     u1907:
  4142   0021A4  2EE8               	decfsz	wreg,f,c
  4143   0021A6  D7FE               	bra	u1907
  4144   0021A8  F000               	nop	
  4145   0021AA                     
  4146                           ;../dc_motor.c: 147:     }
  4147   0021AA  0E02               	movlw	2
  4148   0021AC  2420               	addwf	left_90@i^0,w,c
  4149   0021AE  6E20               	movwf	left_90@i^0,c
  4150   0021B0  0E00               	movlw	0
  4151   0021B2  2021               	addwfc	(left_90@i+1)^0,w,c
  4152   0021B4  6E21               	movwf	(left_90@i+1)^0,c
  4153   0021B6  BE21               	btfsc	(left_90@i+1)^0,7,c
  4154   0021B8  EFE7  F010         	goto	u1381
  4155   0021BC  0E2D               	movlw	45
  4156   0021BE  5C20               	subwf	left_90@i^0,w,c
  4157   0021C0  0E01               	movlw	1
  4158   0021C2  5821               	subwfb	(left_90@i+1)^0,w,c
  4159   0021C4  A0D8               	btfss	status,0,c
  4160   0021C6  EFE7  F010         	goto	u1381
  4161   0021CA  EFE9  F010         	goto	u1380
  4162   0021CE                     u1381:
  4163   0021CE  EFB8  F010         	goto	l2736
  4164   0021D2                     u1380:
  4165   0021D2                     
  4166                           ;../dc_motor.c: 148:     _delay((unsigned long)((195)*(64000000/4000.0)));
  4167   0021D2  0E10               	movlw	16
  4168   0021D4  6E1F               	movwf	(??_left_90+1)^0,c
  4169   0021D6  0ED4               	movlw	212
  4170   0021D8  6E1E               	movwf	??_left_90^0,c
  4171   0021DA  0EE6               	movlw	230
  4172   0021DC                     u1917:
  4173   0021DC  2EE8               	decfsz	wreg,f,c
  4174   0021DE  D7FE               	bra	u1917
  4175   0021E0  2E1E               	decfsz	??_left_90^0,f,c
  4176   0021E2  D7FC               	bra	u1917
  4177   0021E4  2E1F               	decfsz	(??_left_90+1)^0,f,c
  4178   0021E6  D7FA               	bra	u1917
  4179   0021E8  D000               	nop2	
  4180   0021EA  0012               	return		;funcret
  4181   0021EC                     __end_of_left_90:
  4182                           	callstack 0
  4183                           
  4184 ;; *************** function _left_135 *****************
  4185 ;; Defined at:
  4186 ;;		line 182 in file "../dc_motor.c"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4189 ;;		 -> main@motorL(9), 
  4190 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4191 ;;		 -> main@motorR(9), 
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;  i               2   31[COMRAM] int 
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      void 
  4196 ;; Registers used:
  4197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4203 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4205 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4206 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4207 ;;Total ram usage:        8 bytes
  4208 ;; Hardware stack levels used: 1
  4209 ;; Hardware stack levels required when called: 3
  4210 ;; This function calls:
  4211 ;;		_setMotorPWM
  4212 ;; This function is called by:
  4213 ;;		_motor_action
  4214 ;;		_motor_action_return
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           	psect	text22
  4219   002474                     __ptext22:
  4220                           	callstack 0
  4221   002474                     _left_135:
  4222                           	callstack 26
  4223   002474                     
  4224                           ;../dc_motor.c: 182: void left_135(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 183: {;../dc_motor.c: 184:     mL->direction = 0;
  4225   002474  EE20 F001          	lfsr	2,1
  4226   002478  501A               	movf	left_135@mL^0,w,c
  4227   00247A  26D9               	addwf	fsr2l,f,c
  4228   00247C  501B               	movf	(left_135@mL+1)^0,w,c
  4229   00247E  22DA               	addwfc	fsr2h,f,c
  4230   002480  0E00               	movlw	0
  4231   002482  6EDF               	movwf	indf2,c
  4232                           
  4233                           ;../dc_motor.c: 185:     mR->direction = 1;
  4234   002484  EE20 F001          	lfsr	2,1
  4235   002488  501C               	movf	left_135@mR^0,w,c
  4236   00248A  26D9               	addwf	fsr2l,f,c
  4237   00248C  501D               	movf	(left_135@mR+1)^0,w,c
  4238   00248E  22DA               	addwfc	fsr2h,f,c
  4239   002490  0E01               	movlw	1
  4240   002492  6EDF               	movwf	indf2,c
  4241   002494                     
  4242                           ;../dc_motor.c: 186:     for (int i = 0;i<300;i = i + 2)
  4243   002494  0E00               	movlw	0
  4244   002496  6E21               	movwf	(left_135@i+1)^0,c
  4245   002498  0E00               	movlw	0
  4246   00249A  6E20               	movwf	left_135@i^0,c
  4247   00249C                     l2784:
  4248                           
  4249                           ;../dc_motor.c: 187:     {;../dc_motor.c: 188:         mL->power = 50 + i;
  4250   00249C  5020               	movf	left_135@i^0,w,c
  4251   00249E  0F32               	addlw	50
  4252   0024A0  C01A  FFD9         	movff	left_135@mL,fsr2l
  4253   0024A4  C01B  FFDA         	movff	left_135@mL+1,fsr2h
  4254   0024A8  6EDF               	movwf	indf2,c
  4255   0024AA                     
  4256                           ;../dc_motor.c: 189:         mR->power = i;
  4257   0024AA  C01C  FFD9         	movff	left_135@mR,fsr2l
  4258   0024AE  C01D  FFDA         	movff	left_135@mR+1,fsr2h
  4259   0024B2  C020  FFDF         	movff	left_135@i,indf2
  4260   0024B6                     
  4261                           ;../dc_motor.c: 190:         setMotorPWM(mL);
  4262   0024B6  C01A  F00F         	movff	left_135@mL,setMotorPWM@m
  4263   0024BA  C01B  F010         	movff	left_135@mL+1,setMotorPWM@m+1
  4264   0024BE  EC54  F00B         	call	_setMotorPWM	;wreg free
  4265   0024C2                     
  4266                           ;../dc_motor.c: 191:         setMotorPWM(mR);
  4267   0024C2  C01C  F00F         	movff	left_135@mR,setMotorPWM@m
  4268   0024C6  C01D  F010         	movff	left_135@mR+1,setMotorPWM@m+1
  4269   0024CA  EC54  F00B         	call	_setMotorPWM	;wreg free
  4270   0024CE                     
  4271                           ;../dc_motor.c: 192:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4272   0024CE  0E35               	movlw	53
  4273   0024D0                     u1927:
  4274   0024D0  2EE8               	decfsz	wreg,f,c
  4275   0024D2  D7FE               	bra	u1927
  4276   0024D4  F000               	nop	
  4277   0024D6                     
  4278                           ;../dc_motor.c: 193:     }
  4279   0024D6  0E02               	movlw	2
  4280   0024D8  2420               	addwf	left_135@i^0,w,c
  4281   0024DA  6E20               	movwf	left_135@i^0,c
  4282   0024DC  0E00               	movlw	0
  4283   0024DE  2021               	addwfc	(left_135@i+1)^0,w,c
  4284   0024E0  6E21               	movwf	(left_135@i+1)^0,c
  4285   0024E2  BE21               	btfsc	(left_135@i+1)^0,7,c
  4286   0024E4  EF7D  F012         	goto	u1401
  4287   0024E8  0E2C               	movlw	44
  4288   0024EA  5C20               	subwf	left_135@i^0,w,c
  4289   0024EC  0E01               	movlw	1
  4290   0024EE  5821               	subwfb	(left_135@i+1)^0,w,c
  4291   0024F0  A0D8               	btfss	status,0,c
  4292   0024F2  EF7D  F012         	goto	u1401
  4293   0024F6  EF7F  F012         	goto	u1400
  4294   0024FA                     u1401:
  4295   0024FA  EF4E  F012         	goto	l2784
  4296   0024FE                     u1400:
  4297   0024FE                     
  4298                           ;../dc_motor.c: 194:     _delay((unsigned long)((290)*(64000000/4000.0)));
  4299   0024FE  0E18               	movlw	24
  4300   002500  6E1F               	movwf	(??_left_135+1)^0,c
  4301   002502  0E8A               	movlw	138
  4302   002504  6E1E               	movwf	??_left_135^0,c
  4303   002506  0EE8               	movlw	232
  4304   002508                     u1937:
  4305   002508  2EE8               	decfsz	wreg,f,c
  4306   00250A  D7FE               	bra	u1937
  4307   00250C  2E1E               	decfsz	??_left_135^0,f,c
  4308   00250E  D7FC               	bra	u1937
  4309   002510  2E1F               	decfsz	(??_left_135+1)^0,f,c
  4310   002512  D7FA               	bra	u1937
  4311   002514  0012               	return		;funcret
  4312   002516                     __end_of_left_135:
  4313                           	callstack 0
  4314                           
  4315 ;; *************** function _forward *****************
  4316 ;; Defined at:
  4317 ;;		line 77 in file "../dc_motor.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4320 ;;		 -> main@motorL(9), 
  4321 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4322 ;;		 -> main@motorR(9), 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  i               2   29[COMRAM] int 
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  1    wreg      void 
  4327 ;; Registers used:
  4328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4334 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4335 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4337 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4338 ;;Total ram usage:        6 bytes
  4339 ;; Hardware stack levels used: 1
  4340 ;; Hardware stack levels required when called: 3
  4341 ;; This function calls:
  4342 ;;		_setMotorPWM
  4343 ;; This function is called by:
  4344 ;;		_main
  4345 ;;		_motor_action
  4346 ;;		_motor_action_return
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350                           	psect	text23
  4351   0025A4                     __ptext23:
  4352                           	callstack 0
  4353   0025A4                     _forward:
  4354                           	callstack 26
  4355   0025A4                     
  4356                           ;../dc_motor.c: 77: void forward(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c
      +                          : 78: {;../dc_motor.c: 79:     mL->direction = 1;
  4357   0025A4  EE20 F001          	lfsr	2,1
  4358   0025A8  501A               	movf	forward@mL^0,w,c
  4359   0025AA  26D9               	addwf	fsr2l,f,c
  4360   0025AC  501B               	movf	(forward@mL+1)^0,w,c
  4361   0025AE  22DA               	addwfc	fsr2h,f,c
  4362   0025B0  0E01               	movlw	1
  4363   0025B2  6EDF               	movwf	indf2,c
  4364                           
  4365                           ;../dc_motor.c: 80:     mR->direction = 1;
  4366   0025B4  EE20 F001          	lfsr	2,1
  4367   0025B8  501C               	movf	forward@mR^0,w,c
  4368   0025BA  26D9               	addwf	fsr2l,f,c
  4369   0025BC  501D               	movf	(forward@mR+1)^0,w,c
  4370   0025BE  22DA               	addwfc	fsr2h,f,c
  4371   0025C0  0E01               	movlw	1
  4372   0025C2  6EDF               	movwf	indf2,c
  4373   0025C4                     
  4374                           ;../dc_motor.c: 81:     for (int i=0;i<31;i=i+2)
  4375   0025C4  0E00               	movlw	0
  4376   0025C6  6E1F               	movwf	(forward@i+1)^0,c
  4377   0025C8  0E00               	movlw	0
  4378   0025CA  6E1E               	movwf	forward@i^0,c
  4379   0025CC                     l2648:
  4380                           
  4381                           ;../dc_motor.c: 82:     {;../dc_motor.c: 83:         mL->power = i;
  4382   0025CC  C01A  FFD9         	movff	forward@mL,fsr2l
  4383   0025D0  C01B  FFDA         	movff	forward@mL+1,fsr2h
  4384   0025D4  C01E  FFDF         	movff	forward@i,indf2
  4385                           
  4386                           ;../dc_motor.c: 84:         mR->power = i;
  4387   0025D8  C01C  FFD9         	movff	forward@mR,fsr2l
  4388   0025DC  C01D  FFDA         	movff	forward@mR+1,fsr2h
  4389   0025E0  C01E  FFDF         	movff	forward@i,indf2
  4390   0025E4                     
  4391                           ;../dc_motor.c: 85:         setMotorPWM(mL);
  4392   0025E4  C01A  F00F         	movff	forward@mL,setMotorPWM@m
  4393   0025E8  C01B  F010         	movff	forward@mL+1,setMotorPWM@m+1
  4394   0025EC  EC54  F00B         	call	_setMotorPWM	;wreg free
  4395   0025F0                     
  4396                           ;../dc_motor.c: 86:         setMotorPWM(mR);
  4397   0025F0  C01C  F00F         	movff	forward@mR,setMotorPWM@m
  4398   0025F4  C01D  F010         	movff	forward@mR+1,setMotorPWM@m+1
  4399   0025F8  EC54  F00B         	call	_setMotorPWM	;wreg free
  4400   0025FC                     
  4401                           ;../dc_motor.c: 87:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4402   0025FC  0E6A               	movlw	106
  4403   0025FE                     u1947:
  4404   0025FE  2EE8               	decfsz	wreg,f,c
  4405   002600  D7FE               	bra	u1947
  4406   002602  D000               	nop2	
  4407   002604                     
  4408                           ;../dc_motor.c: 88:     }
  4409   002604  0E02               	movlw	2
  4410   002606  241E               	addwf	forward@i^0,w,c
  4411   002608  6E1E               	movwf	forward@i^0,c
  4412   00260A  0E00               	movlw	0
  4413   00260C  201F               	addwfc	(forward@i+1)^0,w,c
  4414   00260E  6E1F               	movwf	(forward@i+1)^0,c
  4415   002610  BE1F               	btfsc	(forward@i+1)^0,7,c
  4416   002612  EF14  F013         	goto	u1341
  4417   002616  501F               	movf	(forward@i+1)^0,w,c
  4418   002618  E109               	bnz	u1340
  4419   00261A  0E1F               	movlw	31
  4420   00261C  5C1E               	subwf	forward@i^0,w,c
  4421   00261E  A0D8               	btfss	status,0,c
  4422   002620  EF14  F013         	goto	u1341
  4423   002624  EF16  F013         	goto	u1340
  4424   002628                     u1341:
  4425   002628  EFE6  F012         	goto	l2648
  4426   00262C                     u1340:
  4427   00262C  0012               	return		;funcret
  4428   00262E                     __end_of_forward:
  4429                           	callstack 0
  4430                           
  4431 ;; *************** function _setMotorPWM *****************
  4432 ;; Defined at:
  4433 ;;		line 38 in file "../dc_motor.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;  m               2   14[COMRAM] PTR struct DC_motor
  4436 ;;		 -> main@motorR(9), main@motorL(9), 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  PWMduty         2   23[COMRAM] int 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4448 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4449 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4450 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4451 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4452 ;;Total ram usage:       11 bytes
  4453 ;; Hardware stack levels used: 1
  4454 ;; Hardware stack levels required when called: 2
  4455 ;; This function calls:
  4456 ;;		___awdiv
  4457 ;;		___wmul
  4458 ;; This function is called by:
  4459 ;;		_main
  4460 ;;		_stop
  4461 ;;		_forward
  4462 ;;		_reverse_fromcard
  4463 ;;		_reverse_onesquare
  4464 ;;		_right_90
  4465 ;;		_left_90
  4466 ;;		_spin_180
  4467 ;;		_right_135
  4468 ;;		_left_135
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text24
  4473   0016A8                     __ptext24:
  4474                           	callstack 0
  4475   0016A8                     _setMotorPWM:
  4476                           	callstack 27
  4477   0016A8                     
  4478                           ;../dc_motor.c: 38: void setMotorPWM(struct DC_motor *m);../dc_motor.c: 39: {;../dc_moto
      +                          r.c: 40:  int PWMduty;;../dc_motor.c: 42:  if (m->direction){
  4479   0016A8  EE20 F001          	lfsr	2,1
  4480   0016AC  500F               	movf	setMotorPWM@m^0,w,c
  4481   0016AE  26D9               	addwf	fsr2l,f,c
  4482   0016B0  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4483   0016B2  22DA               	addwfc	fsr2h,f,c
  4484   0016B4  50DF               	movf	indf2,w,c
  4485   0016B6  B4D8               	btfsc	status,2,c
  4486   0016B8  EF60  F00B         	goto	u1261
  4487   0016BC  EF62  F00B         	goto	u1260
  4488   0016C0                     u1261:
  4489   0016C0  EF93  F00B         	goto	l2542
  4490   0016C4                     u1260:
  4491   0016C4                     
  4492                           ;../dc_motor.c: 44:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  4493   0016C4  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  4494   0016C8  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4495   0016CC  50DF               	movf	indf2,w,c
  4496   0016CE  6E11               	movwf	??_setMotorPWM^0,c
  4497   0016D0  5011               	movf	??_setMotorPWM^0,w,c
  4498   0016D2  6E01               	movwf	___wmul@multiplier^0,c
  4499   0016D4  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4500   0016D6  EE20 F007          	lfsr	2,7
  4501   0016DA  500F               	movf	setMotorPWM@m^0,w,c
  4502   0016DC  26D9               	addwf	fsr2l,f,c
  4503   0016DE  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4504   0016E0  22DA               	addwfc	fsr2h,f,c
  4505   0016E2  CFDE F003          	movff	postinc2,___wmul@multiplicand
  4506   0016E6  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  4507   0016EA  EC51  F015         	call	___wmul	;wreg free
  4508   0016EE  C001  F007         	movff	?___wmul,___awdiv@dividend
  4509   0016F2  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  4510   0016F6  0E00               	movlw	0
  4511   0016F8  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  4512   0016FA  0E64               	movlw	100
  4513   0016FC  6E09               	movwf	___awdiv@divisor^0,c
  4514   0016FE  EC3E  F00F         	call	___awdiv	;wreg free
  4515   001702  EE20 F007          	lfsr	2,7
  4516   001706  500F               	movf	setMotorPWM@m^0,w,c
  4517   001708  26D9               	addwf	fsr2l,f,c
  4518   00170A  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4519   00170C  22DA               	addwfc	fsr2h,f,c
  4520   00170E  CFDE F012          	movff	postinc2,??_setMotorPWM+1
  4521   001712  CFDD F013          	movff	postdec2,??_setMotorPWM+2
  4522   001716  5007               	movf	?___awdiv^0,w,c
  4523   001718  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  4524   00171A  6E18               	movwf	setMotorPWM@PWMduty^0,c
  4525   00171C  5008               	movf	(?___awdiv+1)^0,w,c
  4526   00171E  5813               	subwfb	(??_setMotorPWM+2)^0,w,c
  4527   001720  6E19               	movwf	(setMotorPWM@PWMduty+1)^0,c
  4528                           
  4529                           ;../dc_motor.c: 45:  }
  4530   001722  EFB6  F00B         	goto	l2544
  4531   001726                     l2542:
  4532                           
  4533                           ;../dc_motor.c: 48:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  4534   001726  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  4535   00172A  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4536   00172E  50DF               	movf	indf2,w,c
  4537   001730  6E11               	movwf	??_setMotorPWM^0,c
  4538   001732  5011               	movf	??_setMotorPWM^0,w,c
  4539   001734  6E01               	movwf	___wmul@multiplier^0,c
  4540   001736  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4541   001738  EE20 F007          	lfsr	2,7
  4542   00173C  500F               	movf	setMotorPWM@m^0,w,c
  4543   00173E  26D9               	addwf	fsr2l,f,c
  4544   001740  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4545   001742  22DA               	addwfc	fsr2h,f,c
  4546   001744  CFDE F003          	movff	postinc2,___wmul@multiplicand
  4547   001748  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  4548   00174C  EC51  F015         	call	___wmul	;wreg free
  4549   001750  C001  F007         	movff	?___wmul,___awdiv@dividend
  4550   001754  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  4551   001758  0E00               	movlw	0
  4552   00175A  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  4553   00175C  0E64               	movlw	100
  4554   00175E  6E09               	movwf	___awdiv@divisor^0,c
  4555   001760  EC3E  F00F         	call	___awdiv	;wreg free
  4556   001764  C007  F018         	movff	?___awdiv,setMotorPWM@PWMduty
  4557   001768  C008  F019         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4558   00176C                     l2544:
  4559                           
  4560                           ;../dc_motor.c: 51:  *(m->dutyHighByte) = PWMduty;
  4561   00176C  EE20 F002          	lfsr	2,2
  4562   001770  500F               	movf	setMotorPWM@m^0,w,c
  4563   001772  26D9               	addwf	fsr2l,f,c
  4564   001774  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4565   001776  22DA               	addwfc	fsr2h,f,c
  4566   001778  CFDE F011          	movff	postinc2,??_setMotorPWM
  4567   00177C  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  4568   001780  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  4569   001784  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4570   001788  C018  FFDF         	movff	setMotorPWM@PWMduty,indf2
  4571   00178C                     
  4572                           ;../dc_motor.c: 53:  if (m->direction){
  4573   00178C  EE20 F001          	lfsr	2,1
  4574   001790  500F               	movf	setMotorPWM@m^0,w,c
  4575   001792  26D9               	addwf	fsr2l,f,c
  4576   001794  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4577   001796  22DA               	addwfc	fsr2h,f,c
  4578   001798  50DF               	movf	indf2,w,c
  4579   00179A  B4D8               	btfsc	status,2,c
  4580   00179C  EFD2  F00B         	goto	u1271
  4581   0017A0  EFD4  F00B         	goto	u1270
  4582   0017A4                     u1271:
  4583   0017A4  EF09  F00C         	goto	l2550
  4584   0017A8                     u1270:
  4585   0017A8                     
  4586                           ;../dc_motor.c: 54:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  4587   0017A8  EE20 F004          	lfsr	2,4
  4588   0017AC  500F               	movf	setMotorPWM@m^0,w,c
  4589   0017AE  26D9               	addwf	fsr2l,f,c
  4590   0017B0  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4591   0017B2  22DA               	addwfc	fsr2h,f,c
  4592   0017B4  CFDE F011          	movff	postinc2,??_setMotorPWM
  4593   0017B8  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  4594   0017BC  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  4595   0017C0  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4596   0017C4  EE10 F004          	lfsr	1,4
  4597   0017C8  500F               	movf	setMotorPWM@m^0,w,c
  4598   0017CA  26E1               	addwf	fsr1l,f,c
  4599   0017CC  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4600   0017CE  22E2               	addwfc	fsr1h,f,c
  4601   0017D0  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  4602   0017D4  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  4603   0017D8  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  4604   0017DC  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  4605   0017E0  50E7               	movf	indf1,w,c
  4606   0017E2  6E15               	movwf	(??_setMotorPWM+4)^0,c
  4607   0017E4  EE10 F006          	lfsr	1,6
  4608   0017E8  500F               	movf	setMotorPWM@m^0,w,c
  4609   0017EA  26E1               	addwf	fsr1l,f,c
  4610   0017EC  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4611   0017EE  22E2               	addwfc	fsr1h,f,c
  4612   0017F0  50E7               	movf	indf1,w,c
  4613   0017F2  6E16               	movwf	(??_setMotorPWM+5)^0,c
  4614   0017F4  0E01               	movlw	1
  4615   0017F6  6E17               	movwf	(??_setMotorPWM+6)^0,c
  4616   0017F8  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  4617   0017FA  EF01  F00C         	goto	u1284
  4618   0017FE                     u1285:
  4619   0017FE  90D8               	bcf	status,0,c
  4620   001800  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  4621   001802                     u1284:
  4622   001802  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  4623   001804  EFFF  F00B         	goto	u1285
  4624   001808  5017               	movf	(??_setMotorPWM+6)^0,w,c
  4625   00180A  1015               	iorwf	(??_setMotorPWM+4)^0,w,c
  4626   00180C  6EDF               	movwf	indf2,c
  4627                           
  4628                           ;../dc_motor.c: 55:  } else {
  4629   00180E  EF3D  F00C         	goto	l271
  4630   001812                     l2550:
  4631                           
  4632                           ;../dc_motor.c: 56:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  4633   001812  EE20 F004          	lfsr	2,4
  4634   001816  500F               	movf	setMotorPWM@m^0,w,c
  4635   001818  26D9               	addwf	fsr2l,f,c
  4636   00181A  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4637   00181C  22DA               	addwfc	fsr2h,f,c
  4638   00181E  CFDE F011          	movff	postinc2,??_setMotorPWM
  4639   001822  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  4640   001826  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  4641   00182A  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4642   00182E  EE10 F004          	lfsr	1,4
  4643   001832  500F               	movf	setMotorPWM@m^0,w,c
  4644   001834  26E1               	addwf	fsr1l,f,c
  4645   001836  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4646   001838  22E2               	addwfc	fsr1h,f,c
  4647   00183A  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  4648   00183E  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  4649   001842  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  4650   001846  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  4651   00184A  50E7               	movf	indf1,w,c
  4652   00184C  6E15               	movwf	(??_setMotorPWM+4)^0,c
  4653   00184E  EE10 F006          	lfsr	1,6
  4654   001852  500F               	movf	setMotorPWM@m^0,w,c
  4655   001854  26E1               	addwf	fsr1l,f,c
  4656   001856  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4657   001858  22E2               	addwfc	fsr1h,f,c
  4658   00185A  50E7               	movf	indf1,w,c
  4659   00185C  6E16               	movwf	(??_setMotorPWM+5)^0,c
  4660   00185E  0E01               	movlw	1
  4661   001860  6E17               	movwf	(??_setMotorPWM+6)^0,c
  4662   001862  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  4663   001864  EF36  F00C         	goto	u1294
  4664   001868                     u1295:
  4665   001868  90D8               	bcf	status,0,c
  4666   00186A  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  4667   00186C                     u1294:
  4668   00186C  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  4669   00186E  EF34  F00C         	goto	u1295
  4670   001872  5017               	movf	(??_setMotorPWM+6)^0,w,c
  4671   001874  0AFF               	xorlw	255
  4672   001876  1415               	andwf	(??_setMotorPWM+4)^0,w,c
  4673   001878  6EDF               	movwf	indf2,c
  4674   00187A                     l271:
  4675   00187A  0012               	return		;funcret
  4676   00187C                     __end_of_setMotorPWM:
  4677                           	callstack 0
  4678                           
  4679 ;; *************** function ___wmul *****************
  4680 ;; Defined at:
  4681 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;  multiplier      2    0[COMRAM] unsigned int 
  4684 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;  product         2    4[COMRAM] unsigned int 
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  2    0[COMRAM] unsigned int 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, status,0, prodl, prodh
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4697 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4699 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4700 ;;Total ram usage:        6 bytes
  4701 ;; Hardware stack levels used: 1
  4702 ;; Hardware stack levels required when called: 1
  4703 ;; This function calls:
  4704 ;;		Nothing
  4705 ;; This function is called by:
  4706 ;;		_setMotorPWM
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           	psect	text25
  4711   002AA2                     __ptext25:
  4712                           	callstack 0
  4713   002AA2                     ___wmul:
  4714                           	callstack 27
  4715   002AA2  5001               	movf	___wmul@multiplier^0,w,c
  4716   002AA4  0203               	mulwf	___wmul@multiplicand^0,c
  4717   002AA6  CFF3 F005          	movff	prodl,___wmul@product
  4718   002AAA  CFF4 F006          	movff	prodh,___wmul@product+1
  4719   002AAE  5001               	movf	___wmul@multiplier^0,w,c
  4720   002AB0  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  4721   002AB2  50F3               	movf	243,w,c
  4722   002AB4  2606               	addwf	(___wmul@product+1)^0,f,c
  4723   002AB6  5002               	movf	(___wmul@multiplier+1)^0,w,c
  4724   002AB8  0203               	mulwf	___wmul@multiplicand^0,c
  4725   002ABA  50F3               	movf	243,w,c
  4726   002ABC  2606               	addwf	(___wmul@product+1)^0,f,c
  4727   002ABE  C005  F001         	movff	___wmul@product,?___wmul
  4728   002AC2  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4729   002AC6  0012               	return		;funcret
  4730   002AC8                     __end_of___wmul:
  4731                           	callstack 0
  4732                           
  4733 ;; *************** function ___awdiv *****************
  4734 ;; Defined at:
  4735 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  dividend        2    6[COMRAM] int 
  4738 ;;  divisor         2    8[COMRAM] int 
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;  quotient        2   12[COMRAM] int 
  4741 ;;  sign            1   11[COMRAM] unsigned char 
  4742 ;;  counter         1   10[COMRAM] unsigned char 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  2    6[COMRAM] int 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4752 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4753 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4755 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4756 ;;Total ram usage:        8 bytes
  4757 ;; Hardware stack levels used: 1
  4758 ;; Hardware stack levels required when called: 1
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_setMotorPWM
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           	psect	text26
  4767   001E7C                     __ptext26:
  4768                           	callstack 0
  4769   001E7C                     ___awdiv:
  4770                           	callstack 27
  4771   001E7C  0E00               	movlw	0
  4772   001E7E  6E0C               	movwf	___awdiv@sign^0,c
  4773   001E80  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
  4774   001E82  EF47  F00F         	goto	u1080
  4775   001E86  EF45  F00F         	goto	u1081
  4776   001E8A                     u1081:
  4777   001E8A  EF4D  F00F         	goto	l2420
  4778   001E8E                     u1080:
  4779   001E8E  6C09               	negf	___awdiv@divisor^0,c
  4780   001E90  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  4781   001E92  B0D8               	btfsc	status,0,c
  4782   001E94  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  4783   001E96  0E01               	movlw	1
  4784   001E98  6E0C               	movwf	___awdiv@sign^0,c
  4785   001E9A                     l2420:
  4786   001E9A  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
  4787   001E9C  EF54  F00F         	goto	u1090
  4788   001EA0  EF52  F00F         	goto	u1091
  4789   001EA4                     u1091:
  4790   001EA4  EF5A  F00F         	goto	l2426
  4791   001EA8                     u1090:
  4792   001EA8  6C07               	negf	___awdiv@dividend^0,c
  4793   001EAA  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  4794   001EAC  B0D8               	btfsc	status,0,c
  4795   001EAE  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  4796   001EB0  0E01               	movlw	1
  4797   001EB2  1A0C               	xorwf	___awdiv@sign^0,f,c
  4798   001EB4                     l2426:
  4799   001EB4  0E00               	movlw	0
  4800   001EB6  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  4801   001EB8  0E00               	movlw	0
  4802   001EBA  6E0D               	movwf	___awdiv@quotient^0,c
  4803   001EBC  5009               	movf	___awdiv@divisor^0,w,c
  4804   001EBE  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  4805   001EC0  B4D8               	btfsc	status,2,c
  4806   001EC2  EF65  F00F         	goto	u1101
  4807   001EC6  EF67  F00F         	goto	u1100
  4808   001ECA                     u1101:
  4809   001ECA  EF8F  F00F         	goto	l2448
  4810   001ECE                     u1100:
  4811   001ECE  0E01               	movlw	1
  4812   001ED0  6E0B               	movwf	___awdiv@counter^0,c
  4813   001ED2  EF6F  F00F         	goto	l2434
  4814   001ED6                     l2432:
  4815   001ED6  90D8               	bcf	status,0,c
  4816   001ED8  3609               	rlcf	___awdiv@divisor^0,f,c
  4817   001EDA  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  4818   001EDC  2A0B               	incf	___awdiv@counter^0,f,c
  4819   001EDE                     l2434:
  4820   001EDE  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  4821   001EE0  EF74  F00F         	goto	u1111
  4822   001EE4  EF76  F00F         	goto	u1110
  4823   001EE8                     u1111:
  4824   001EE8  EF6B  F00F         	goto	l2432
  4825   001EEC                     u1110:
  4826   001EEC                     l2436:
  4827   001EEC  90D8               	bcf	status,0,c
  4828   001EEE  360D               	rlcf	___awdiv@quotient^0,f,c
  4829   001EF0  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  4830   001EF2  5009               	movf	___awdiv@divisor^0,w,c
  4831   001EF4  5C07               	subwf	___awdiv@dividend^0,w,c
  4832   001EF6  500A               	movf	(___awdiv@divisor+1)^0,w,c
  4833   001EF8  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  4834   001EFA  A0D8               	btfss	status,0,c
  4835   001EFC  EF82  F00F         	goto	u1121
  4836   001F00  EF84  F00F         	goto	u1120
  4837   001F04                     u1121:
  4838   001F04  EF89  F00F         	goto	l2444
  4839   001F08                     u1120:
  4840   001F08  5009               	movf	___awdiv@divisor^0,w,c
  4841   001F0A  5E07               	subwf	___awdiv@dividend^0,f,c
  4842   001F0C  500A               	movf	(___awdiv@divisor+1)^0,w,c
  4843   001F0E  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  4844   001F10  800D               	bsf	___awdiv@quotient^0,0,c
  4845   001F12                     l2444:
  4846   001F12  90D8               	bcf	status,0,c
  4847   001F14  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  4848   001F16  3209               	rrcf	___awdiv@divisor^0,f,c
  4849   001F18  2E0B               	decfsz	___awdiv@counter^0,f,c
  4850   001F1A  EF76  F00F         	goto	l2436
  4851   001F1E                     l2448:
  4852   001F1E  500C               	movf	___awdiv@sign^0,w,c
  4853   001F20  B4D8               	btfsc	status,2,c
  4854   001F22  EF95  F00F         	goto	u1131
  4855   001F26  EF97  F00F         	goto	u1130
  4856   001F2A                     u1131:
  4857   001F2A  EF9B  F00F         	goto	l2452
  4858   001F2E                     u1130:
  4859   001F2E  6C0D               	negf	___awdiv@quotient^0,c
  4860   001F30  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  4861   001F32  B0D8               	btfsc	status,0,c
  4862   001F34  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  4863   001F36                     l2452:
  4864   001F36  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4865   001F3A  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4866   001F3E  0012               	return		;funcret
  4867   001F40                     __end_of___awdiv:
  4868                           	callstack 0
  4869                           
  4870 ;; *************** function _initUSART4 *****************
  4871 ;; Defined at:
  4872 ;;		line 5 in file "../serial.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;		None
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;		None
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  1    wreg      void 
  4879 ;; Registers used:
  4880 ;;		wreg, status,2
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4890 ;;Total ram usage:        0 bytes
  4891 ;; Hardware stack levels used: 1
  4892 ;; Hardware stack levels required when called: 1
  4893 ;; This function calls:
  4894 ;;		Nothing
  4895 ;; This function is called by:
  4896 ;;		_main
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text27
  4901   002B08                     __ptext27:
  4902                           	callstack 0
  4903   002B08                     _initUSART4:
  4904                           	callstack 29
  4905   002B08                     
  4906                           ;../serial.c: 9:     RC0PPS = 0x12;
  4907   002B08  0E12               	movlw	18
  4908   002B0A  010E               	movlb	14	; () banked
  4909   002B0C  6F62               	movwf	98,b	;volatile
  4910                           
  4911                           ;../serial.c: 10:     RX4PPS = 0x11;
  4912   002B0E  0E11               	movlw	17
  4913   002B10  6F15               	movwf	21,b	;volatile
  4914   002B12                     
  4915                           ; BSR set to: 14
  4916                           ;../serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  4917   002B12  97E9               	bcf	233,3,b	;volatile
  4918   002B14                     
  4919                           ; BSR set to: 14
  4920                           ;../serial.c: 13:     TX4STAbits.BRGH = 0;
  4921   002B14  95E8               	bcf	232,2,b	;volatile
  4922                           
  4923                           ;../serial.c: 14:     SP4BRGL = 103;
  4924   002B16  0E67               	movlw	103
  4925   002B18  6FE5               	movwf	229,b	;volatile
  4926                           
  4927                           ;../serial.c: 15:     SP4BRGH = 0;
  4928   002B1A  0E00               	movlw	0
  4929   002B1C  6FE6               	movwf	230,b	;volatile
  4930   002B1E                     
  4931                           ; BSR set to: 14
  4932                           ;../serial.c: 17:     RC4STAbits.CREN = 1;
  4933   002B1E  89E7               	bsf	231,4,b	;volatile
  4934   002B20                     
  4935                           ; BSR set to: 14
  4936                           ;../serial.c: 18:     TX4STAbits.TXEN = 1;
  4937   002B20  8BE8               	bsf	232,5,b	;volatile
  4938   002B22                     
  4939                           ; BSR set to: 14
  4940                           ;../serial.c: 19:     RC4STAbits.SPEN = 1;
  4941   002B22  8FE7               	bsf	231,7,b	;volatile
  4942   002B24                     
  4943                           ; BSR set to: 14
  4944   002B24  0012               	return		;funcret
  4945   002B26                     __end_of_initUSART4:
  4946                           	callstack 0
  4947                           
  4948 ;; *************** function _initDCmotorsPWM *****************
  4949 ;; Defined at:
  4950 ;;		line 5 in file "../dc_motor.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;  PWMperiod       2    0[COMRAM] int 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;		None
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  1    wreg      void 
  4957 ;; Registers used:
  4958 ;;		wreg, status,2
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4964 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4967 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4968 ;;Total ram usage:        2 bytes
  4969 ;; Hardware stack levels used: 1
  4970 ;; Hardware stack levels required when called: 1
  4971 ;; This function calls:
  4972 ;;		Nothing
  4973 ;; This function is called by:
  4974 ;;		_main
  4975 ;; This function uses a non-reentrant model
  4976 ;;
  4977                           
  4978                           	psect	text28
  4979   00292A                     __ptext28:
  4980                           	callstack 0
  4981   00292A                     _initDCmotorsPWM:
  4982                           	callstack 29
  4983   00292A                     
  4984                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  4985   00292A  9485               	bcf	133,2,c	;volatile
  4986                           
  4987                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  4988   00292C  9885               	bcf	133,4,c	;volatile
  4989                           
  4990                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  4991   00292E  9E83               	bcf	131,7,c	;volatile
  4992                           
  4993                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  4994   002930  9C87               	bcf	135,6,c	;volatile
  4995                           
  4996                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  4997   002932  947D               	bcf	125,2,c	;volatile
  4998                           
  4999                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  5000   002934  987D               	bcf	125,4,c	;volatile
  5001                           
  5002                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  5003   002936  9E7B               	bcf	123,7,c	;volatile
  5004                           
  5005                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  5006   002938  9C7F               	bcf	127,6,c	;volatile
  5007   00293A                     
  5008                           ;../dc_motor.c: 17:     T2CONbits.CKPS=0b0011;
  5009   00293A  50BD               	movf	189,w,c	;volatile
  5010   00293C  0B8F               	andlw	-113
  5011   00293E  0930               	iorlw	48
  5012   002940  6EBD               	movwf	189,c	;volatile
  5013                           
  5014                           ;../dc_motor.c: 18:     T2HLTbits.MODE=0b00000;
  5015   002942  0EE0               	movlw	-32
  5016   002944  16BE               	andwf	190,f,c	;volatile
  5017                           
  5018                           ;../dc_motor.c: 19:     T2CLKCONbits.CS=0b0001;
  5019   002946  50BF               	movf	191,w,c	;volatile
  5020   002948  0BF0               	andlw	-16
  5021   00294A  0901               	iorlw	1
  5022   00294C  6EBF               	movwf	191,c	;volatile
  5023   00294E                     
  5024                           ;../dc_motor.c: 23:     T2PR=PWMperiod;
  5025   00294E  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5026   002952                     
  5027                           ;../dc_motor.c: 24:     T2CONbits.ON=1;
  5028   002952  8EBD               	bsf	189,7,c	;volatile
  5029                           
  5030                           ;../dc_motor.c: 26:     RE2PPS=0x0A;
  5031   002954  0E0A               	movlw	10
  5032   002956  010E               	movlb	14	; () banked
  5033   002958  6F74               	movwf	116,b	;volatile
  5034                           
  5035                           ;../dc_motor.c: 27:     RC7PPS=0x0B;
  5036   00295A  0E0B               	movlw	11
  5037   00295C  6F69               	movwf	105,b	;volatile
  5038                           
  5039                           ;../dc_motor.c: 29:     PWM6DCH=0;
  5040   00295E  0E00               	movlw	0
  5041   002960  6EA3               	movwf	163,c	;volatile
  5042                           
  5043                           ;../dc_motor.c: 30:     PWM7DCH=0;
  5044   002962  0E00               	movlw	0
  5045   002964  6EA0               	movwf	160,c	;volatile
  5046   002966                     
  5047                           ; BSR set to: 14
  5048                           ;../dc_motor.c: 32:     PWM6CONbits.EN = 1;
  5049   002966  8EA4               	bsf	164,7,c	;volatile
  5050   002968                     
  5051                           ; BSR set to: 14
  5052                           ;../dc_motor.c: 33:     PWM7CONbits.EN = 1;
  5053   002968  8EA1               	bsf	161,7,c	;volatile
  5054   00296A                     
  5055                           ; BSR set to: 14
  5056   00296A  0012               	return		;funcret
  5057   00296C                     __end_of_initDCmotorsPWM:
  5058                           	callstack 0
  5059                           
  5060 ;; *************** function _color_read *****************
  5061 ;; Defined at:
  5062 ;;		line 111 in file "../color.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;  rgb             2   11[COMRAM] PTR struct RGB_val
  5065 ;;		 -> main@RGB_recorded(8), main@RGB_calibrated(8), 
  5066 ;; Auto vars:     Size  Location     Type
  5067 ;;		None
  5068 ;; Return value:  Size  Location     Type
  5069 ;;                  1    wreg      void 
  5070 ;; Registers used:
  5071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5077 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5079 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5080 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5081 ;;Total ram usage:        4 bytes
  5082 ;; Hardware stack levels used: 1
  5083 ;; Hardware stack levels required when called: 4
  5084 ;; This function calls:
  5085 ;;		_color_read_Blue
  5086 ;;		_color_read_Green
  5087 ;;		_color_read_Luminosity
  5088 ;;		_color_read_Red
  5089 ;; This function is called by:
  5090 ;;		_main
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           	psect	text29
  5095   001FFE                     __ptext29:
  5096                           	callstack 0
  5097   001FFE                     _color_read:
  5098                           	callstack 26
  5099   001FFE                     
  5100                           ;../color.c: 111: void color_read(struct RGB_val *rgb);../color.c: 112: {;../color.c: 11
      +                          3:     rgb->L = color_read_Luminosity();
  5101   001FFE  ECFB  F013         	call	_color_read_Luminosity	;wreg free
  5102   002002  C00C  FFD9         	movff	color_read@rgb,fsr2l
  5103   002006  C00D  FFDA         	movff	color_read@rgb+1,fsr2h
  5104   00200A  C005  FFDE         	movff	?_color_read_Luminosity,postinc2
  5105   00200E  C006  FFDD         	movff	?_color_read_Luminosity+1,postdec2
  5106   002012                     
  5107                           ;../color.c: 114:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5108   002012  0E09               	movlw	9
  5109   002014  6E0F               	movwf	(??_color_read+1)^0,c
  5110   002016  0E1E               	movlw	30
  5111   002018  6E0E               	movwf	??_color_read^0,c
  5112   00201A  0EE4               	movlw	228
  5113   00201C                     u1957:
  5114   00201C  2EE8               	decfsz	wreg,f,c
  5115   00201E  D7FE               	bra	u1957
  5116   002020  2E0E               	decfsz	??_color_read^0,f,c
  5117   002022  D7FC               	bra	u1957
  5118   002024  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5119   002026  D7FA               	bra	u1957
  5120   002028  D000               	nop2	
  5121   00202A                     
  5122                           ;../color.c: 115:     rgb->R = color_read_Red();
  5123   00202A  ECD3  F013         	call	_color_read_Red	;wreg free
  5124   00202E  EE20 F002          	lfsr	2,2
  5125   002032  500C               	movf	color_read@rgb^0,w,c
  5126   002034  26D9               	addwf	fsr2l,f,c
  5127   002036  500D               	movf	(color_read@rgb+1)^0,w,c
  5128   002038  22DA               	addwfc	fsr2h,f,c
  5129   00203A  C005  FFDE         	movff	?_color_read_Red,postinc2
  5130   00203E  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  5131                           
  5132                           ;../color.c: 116:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5133   002042  0E09               	movlw	9
  5134   002044  6E0F               	movwf	(??_color_read+1)^0,c
  5135   002046  0E1E               	movlw	30
  5136   002048  6E0E               	movwf	??_color_read^0,c
  5137   00204A  0EE4               	movlw	228
  5138   00204C                     u1967:
  5139   00204C  2EE8               	decfsz	wreg,f,c
  5140   00204E  D7FE               	bra	u1967
  5141   002050  2E0E               	decfsz	??_color_read^0,f,c
  5142   002052  D7FC               	bra	u1967
  5143   002054  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5144   002056  D7FA               	bra	u1967
  5145   002058  D000               	nop2	
  5146   00205A                     
  5147                           ;../color.c: 117:     rgb->G = color_read_Green();
  5148   00205A  EC23  F014         	call	_color_read_Green	;wreg free
  5149   00205E  EE20 F004          	lfsr	2,4
  5150   002062  500C               	movf	color_read@rgb^0,w,c
  5151   002064  26D9               	addwf	fsr2l,f,c
  5152   002066  500D               	movf	(color_read@rgb+1)^0,w,c
  5153   002068  22DA               	addwfc	fsr2h,f,c
  5154   00206A  C005  FFDE         	movff	?_color_read_Green,postinc2
  5155   00206E  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  5156   002072                     
  5157                           ;../color.c: 118:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5158   002072  0E09               	movlw	9
  5159   002074  6E0F               	movwf	(??_color_read+1)^0,c
  5160   002076  0E1E               	movlw	30
  5161   002078  6E0E               	movwf	??_color_read^0,c
  5162   00207A  0EE4               	movlw	228
  5163   00207C                     u1977:
  5164   00207C  2EE8               	decfsz	wreg,f,c
  5165   00207E  D7FE               	bra	u1977
  5166   002080  2E0E               	decfsz	??_color_read^0,f,c
  5167   002082  D7FC               	bra	u1977
  5168   002084  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5169   002086  D7FA               	bra	u1977
  5170   002088  D000               	nop2	
  5171                           
  5172                           ;../color.c: 119:     rgb->B = color_read_Blue();
  5173   00208A  EC4B  F014         	call	_color_read_Blue	;wreg free
  5174   00208E  EE20 F006          	lfsr	2,6
  5175   002092  500C               	movf	color_read@rgb^0,w,c
  5176   002094  26D9               	addwf	fsr2l,f,c
  5177   002096  500D               	movf	(color_read@rgb+1)^0,w,c
  5178   002098  22DA               	addwfc	fsr2h,f,c
  5179   00209A  C005  FFDE         	movff	?_color_read_Blue,postinc2
  5180   00209E  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  5181   0020A2  0012               	return		;funcret
  5182   0020A4                     __end_of_color_read:
  5183                           	callstack 0
  5184                           
  5185 ;; *************** function _color_read_Red *****************
  5186 ;; Defined at:
  5187 ;;		line 69 in file "../color.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;		None
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  tmp             2    9[COMRAM] unsigned int 
  5192 ;; Return value:  Size  Location     Type
  5193 ;;                  2    4[COMRAM] unsigned int 
  5194 ;; Registers used:
  5195 ;;		wreg, status,2, status,0, cstack
  5196 ;; Tracked objects:
  5197 ;;		On entry : 0/0
  5198 ;;		On exit  : 0/0
  5199 ;;		Unchanged: 0/0
  5200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5201 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5202 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5203 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5204 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5205 ;;Total ram usage:        7 bytes
  5206 ;; Hardware stack levels used: 1
  5207 ;; Hardware stack levels required when called: 3
  5208 ;; This function calls:
  5209 ;;		_I2C_2_Master_Read
  5210 ;;		_I2C_2_Master_RepStart
  5211 ;;		_I2C_2_Master_Start
  5212 ;;		_I2C_2_Master_Stop
  5213 ;;		_I2C_2_Master_Write
  5214 ;; This function is called by:
  5215 ;;		_color_read
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           	psect	text30
  5220   0027A6                     __ptext30:
  5221                           	callstack 0
  5222   0027A6                     _color_read_Red:
  5223                           	callstack 26
  5224   0027A6                     
  5225                           ;../color.c: 71:  unsigned int tmp;;../color.c: 72:  I2C_2_Master_Start();
  5226   0027A6  ECBA  F015         	call	_I2C_2_Master_Start	;wreg free
  5227                           
  5228                           ;../color.c: 73:  I2C_2_Master_Write(0x52 | 0x00);
  5229   0027AA  0E52               	movlw	82
  5230   0027AC  ECAA  F015         	call	_I2C_2_Master_Write
  5231                           
  5232                           ;../color.c: 74:  I2C_2_Master_Write(0xA0 | 0x16);
  5233   0027B0  0EB6               	movlw	182
  5234   0027B2  ECAA  F015         	call	_I2C_2_Master_Write
  5235                           
  5236                           ;../color.c: 75:  I2C_2_Master_RepStart();
  5237   0027B6  ECB0  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5238                           
  5239                           ;../color.c: 76:  I2C_2_Master_Write(0x52 | 0x01);
  5240   0027BA  0E53               	movlw	83
  5241   0027BC  ECAA  F015         	call	_I2C_2_Master_Write
  5242                           
  5243                           ;../color.c: 77:  tmp=I2C_2_Master_Read(1);
  5244   0027C0  0E01               	movlw	1
  5245   0027C2  ECB6  F014         	call	_I2C_2_Master_Read
  5246   0027C6  6E07               	movwf	??_color_read_Red^0,c
  5247   0027C8  5007               	movf	??_color_read_Red^0,w,c
  5248   0027CA  6E0A               	movwf	color_read_Red@tmp^0,c
  5249   0027CC  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  5250                           
  5251                           ;../color.c: 78:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5252   0027CE  0E00               	movlw	0
  5253   0027D0  ECB6  F014         	call	_I2C_2_Master_Read
  5254   0027D4  6E07               	movwf	??_color_read_Red^0,c
  5255   0027D6  5007               	movf	??_color_read_Red^0,w,c
  5256   0027D8  6E09               	movwf	(??_color_read_Red+2)^0,c
  5257   0027DA  6A08               	clrf	(??_color_read_Red+1)^0,c
  5258   0027DC  500A               	movf	color_read_Red@tmp^0,w,c
  5259   0027DE  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  5260   0027E0  6E0A               	movwf	color_read_Red@tmp^0,c
  5261   0027E2  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  5262   0027E4  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  5263   0027E6  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5264                           
  5265                           ;../color.c: 79:  I2C_2_Master_Stop();
  5266   0027E8  ECB5  F015         	call	_I2C_2_Master_Stop	;wreg free
  5267   0027EC                     
  5268                           ;../color.c: 80:  return tmp;
  5269   0027EC  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5270   0027F0  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5271   0027F4  0012               	return		;funcret
  5272   0027F6                     __end_of_color_read_Red:
  5273                           	callstack 0
  5274                           
  5275 ;; *************** function _color_read_Luminosity *****************
  5276 ;; Defined at:
  5277 ;;		line 55 in file "../color.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;		None
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;  tmp             2    9[COMRAM] unsigned int 
  5282 ;; Return value:  Size  Location     Type
  5283 ;;                  2    4[COMRAM] unsigned int 
  5284 ;; Registers used:
  5285 ;;		wreg, status,2, status,0, cstack
  5286 ;; Tracked objects:
  5287 ;;		On entry : 0/0
  5288 ;;		On exit  : 0/0
  5289 ;;		Unchanged: 0/0
  5290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5291 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5292 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5293 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5294 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5295 ;;Total ram usage:        7 bytes
  5296 ;; Hardware stack levels used: 1
  5297 ;; Hardware stack levels required when called: 3
  5298 ;; This function calls:
  5299 ;;		_I2C_2_Master_Read
  5300 ;;		_I2C_2_Master_RepStart
  5301 ;;		_I2C_2_Master_Start
  5302 ;;		_I2C_2_Master_Stop
  5303 ;;		_I2C_2_Master_Write
  5304 ;; This function is called by:
  5305 ;;		_color_read
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           	psect	text31
  5310   0027F6                     __ptext31:
  5311                           	callstack 0
  5312   0027F6                     _color_read_Luminosity:
  5313                           	callstack 26
  5314   0027F6                     
  5315                           ;../color.c: 57:  unsigned int tmp;;../color.c: 58:  I2C_2_Master_Start();
  5316   0027F6  ECBA  F015         	call	_I2C_2_Master_Start	;wreg free
  5317                           
  5318                           ;../color.c: 59:  I2C_2_Master_Write(0x52 | 0x00);
  5319   0027FA  0E52               	movlw	82
  5320   0027FC  ECAA  F015         	call	_I2C_2_Master_Write
  5321                           
  5322                           ;../color.c: 60:  I2C_2_Master_Write(0xA0 | 0x14);
  5323   002800  0EB4               	movlw	180
  5324   002802  ECAA  F015         	call	_I2C_2_Master_Write
  5325                           
  5326                           ;../color.c: 61:  I2C_2_Master_RepStart();
  5327   002806  ECB0  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5328                           
  5329                           ;../color.c: 62:  I2C_2_Master_Write(0x52 | 0x01);
  5330   00280A  0E53               	movlw	83
  5331   00280C  ECAA  F015         	call	_I2C_2_Master_Write
  5332                           
  5333                           ;../color.c: 63:  tmp=I2C_2_Master_Read(1);
  5334   002810  0E01               	movlw	1
  5335   002812  ECB6  F014         	call	_I2C_2_Master_Read
  5336   002816  6E07               	movwf	??_color_read_Luminosity^0,c
  5337   002818  5007               	movf	??_color_read_Luminosity^0,w,c
  5338   00281A  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5339   00281C  6A0B               	clrf	(color_read_Luminosity@tmp+1)^0,c
  5340                           
  5341                           ;../color.c: 64:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5342   00281E  0E00               	movlw	0
  5343   002820  ECB6  F014         	call	_I2C_2_Master_Read
  5344   002824  6E07               	movwf	??_color_read_Luminosity^0,c
  5345   002826  5007               	movf	??_color_read_Luminosity^0,w,c
  5346   002828  6E09               	movwf	(??_color_read_Luminosity+2)^0,c
  5347   00282A  6A08               	clrf	(??_color_read_Luminosity+1)^0,c
  5348   00282C  500A               	movf	color_read_Luminosity@tmp^0,w,c
  5349   00282E  1008               	iorwf	(??_color_read_Luminosity+1)^0,w,c
  5350   002830  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5351   002832  500B               	movf	(color_read_Luminosity@tmp+1)^0,w,c
  5352   002834  1009               	iorwf	(??_color_read_Luminosity+2)^0,w,c
  5353   002836  6E0B               	movwf	(color_read_Luminosity@tmp+1)^0,c
  5354                           
  5355                           ;../color.c: 65:  I2C_2_Master_Stop();
  5356   002838  ECB5  F015         	call	_I2C_2_Master_Stop	;wreg free
  5357   00283C                     
  5358                           ;../color.c: 66:  return tmp;
  5359   00283C  C00A  F005         	movff	color_read_Luminosity@tmp,?_color_read_Luminosity
  5360   002840  C00B  F006         	movff	color_read_Luminosity@tmp+1,?_color_read_Luminosity+1
  5361   002844  0012               	return		;funcret
  5362   002846                     __end_of_color_read_Luminosity:
  5363                           	callstack 0
  5364                           
  5365 ;; *************** function _color_read_Green *****************
  5366 ;; Defined at:
  5367 ;;		line 83 in file "../color.c"
  5368 ;; Parameters:    Size  Location     Type
  5369 ;;		None
  5370 ;; Auto vars:     Size  Location     Type
  5371 ;;  tmp             2    9[COMRAM] unsigned int 
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  2    4[COMRAM] unsigned int 
  5374 ;; Registers used:
  5375 ;;		wreg, status,2, status,0, cstack
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5381 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5382 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5383 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5384 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5385 ;;Total ram usage:        7 bytes
  5386 ;; Hardware stack levels used: 1
  5387 ;; Hardware stack levels required when called: 3
  5388 ;; This function calls:
  5389 ;;		_I2C_2_Master_Read
  5390 ;;		_I2C_2_Master_RepStart
  5391 ;;		_I2C_2_Master_Start
  5392 ;;		_I2C_2_Master_Stop
  5393 ;;		_I2C_2_Master_Write
  5394 ;; This function is called by:
  5395 ;;		_color_read
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399                           	psect	text32
  5400   002846                     __ptext32:
  5401                           	callstack 0
  5402   002846                     _color_read_Green:
  5403                           	callstack 26
  5404   002846                     
  5405                           ;../color.c: 85:  unsigned int tmp;;../color.c: 86:  I2C_2_Master_Start();
  5406   002846  ECBA  F015         	call	_I2C_2_Master_Start	;wreg free
  5407                           
  5408                           ;../color.c: 87:  I2C_2_Master_Write(0x52 | 0x00);
  5409   00284A  0E52               	movlw	82
  5410   00284C  ECAA  F015         	call	_I2C_2_Master_Write
  5411                           
  5412                           ;../color.c: 88:  I2C_2_Master_Write(0xA0 | 0x18);
  5413   002850  0EB8               	movlw	184
  5414   002852  ECAA  F015         	call	_I2C_2_Master_Write
  5415                           
  5416                           ;../color.c: 89:  I2C_2_Master_RepStart();
  5417   002856  ECB0  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5418                           
  5419                           ;../color.c: 90:  I2C_2_Master_Write(0x52 | 0x01);
  5420   00285A  0E53               	movlw	83
  5421   00285C  ECAA  F015         	call	_I2C_2_Master_Write
  5422                           
  5423                           ;../color.c: 91:  tmp=I2C_2_Master_Read(1);
  5424   002860  0E01               	movlw	1
  5425   002862  ECB6  F014         	call	_I2C_2_Master_Read
  5426   002866  6E07               	movwf	??_color_read_Green^0,c
  5427   002868  5007               	movf	??_color_read_Green^0,w,c
  5428   00286A  6E0A               	movwf	color_read_Green@tmp^0,c
  5429   00286C  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5430                           
  5431                           ;../color.c: 92:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5432   00286E  0E00               	movlw	0
  5433   002870  ECB6  F014         	call	_I2C_2_Master_Read
  5434   002874  6E07               	movwf	??_color_read_Green^0,c
  5435   002876  5007               	movf	??_color_read_Green^0,w,c
  5436   002878  6E09               	movwf	(??_color_read_Green+2)^0,c
  5437   00287A  6A08               	clrf	(??_color_read_Green+1)^0,c
  5438   00287C  500A               	movf	color_read_Green@tmp^0,w,c
  5439   00287E  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5440   002880  6E0A               	movwf	color_read_Green@tmp^0,c
  5441   002882  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5442   002884  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5443   002886  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5444                           
  5445                           ;../color.c: 93:  I2C_2_Master_Stop();
  5446   002888  ECB5  F015         	call	_I2C_2_Master_Stop	;wreg free
  5447   00288C                     
  5448                           ;../color.c: 94:  return tmp;
  5449   00288C  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5450   002890  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5451   002894  0012               	return		;funcret
  5452   002896                     __end_of_color_read_Green:
  5453                           	callstack 0
  5454                           
  5455 ;; *************** function _color_read_Blue *****************
  5456 ;; Defined at:
  5457 ;;		line 97 in file "../color.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;		None
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;  tmp             2    9[COMRAM] unsigned int 
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  2    4[COMRAM] unsigned int 
  5464 ;; Registers used:
  5465 ;;		wreg, status,2, status,0, cstack
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5471 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5472 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5473 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5474 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5475 ;;Total ram usage:        7 bytes
  5476 ;; Hardware stack levels used: 1
  5477 ;; Hardware stack levels required when called: 3
  5478 ;; This function calls:
  5479 ;;		_I2C_2_Master_Read
  5480 ;;		_I2C_2_Master_RepStart
  5481 ;;		_I2C_2_Master_Start
  5482 ;;		_I2C_2_Master_Stop
  5483 ;;		_I2C_2_Master_Write
  5484 ;; This function is called by:
  5485 ;;		_color_read
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           	psect	text33
  5490   002896                     __ptext33:
  5491                           	callstack 0
  5492   002896                     _color_read_Blue:
  5493                           	callstack 26
  5494   002896                     
  5495                           ;../color.c: 99:  unsigned int tmp;;../color.c: 100:  I2C_2_Master_Start();
  5496   002896  ECBA  F015         	call	_I2C_2_Master_Start	;wreg free
  5497                           
  5498                           ;../color.c: 101:  I2C_2_Master_Write(0x52 | 0x00);
  5499   00289A  0E52               	movlw	82
  5500   00289C  ECAA  F015         	call	_I2C_2_Master_Write
  5501                           
  5502                           ;../color.c: 102:  I2C_2_Master_Write(0xA0 | 0x1A);
  5503   0028A0  0EBA               	movlw	186
  5504   0028A2  ECAA  F015         	call	_I2C_2_Master_Write
  5505                           
  5506                           ;../color.c: 103:  I2C_2_Master_RepStart();
  5507   0028A6  ECB0  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5508                           
  5509                           ;../color.c: 104:  I2C_2_Master_Write(0x52 | 0x01);
  5510   0028AA  0E53               	movlw	83
  5511   0028AC  ECAA  F015         	call	_I2C_2_Master_Write
  5512                           
  5513                           ;../color.c: 105:  tmp=I2C_2_Master_Read(1);
  5514   0028B0  0E01               	movlw	1
  5515   0028B2  ECB6  F014         	call	_I2C_2_Master_Read
  5516   0028B6  6E07               	movwf	??_color_read_Blue^0,c
  5517   0028B8  5007               	movf	??_color_read_Blue^0,w,c
  5518   0028BA  6E0A               	movwf	color_read_Blue@tmp^0,c
  5519   0028BC  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5520                           
  5521                           ;../color.c: 106:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5522   0028BE  0E00               	movlw	0
  5523   0028C0  ECB6  F014         	call	_I2C_2_Master_Read
  5524   0028C4  6E07               	movwf	??_color_read_Blue^0,c
  5525   0028C6  5007               	movf	??_color_read_Blue^0,w,c
  5526   0028C8  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5527   0028CA  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5528   0028CC  500A               	movf	color_read_Blue@tmp^0,w,c
  5529   0028CE  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5530   0028D0  6E0A               	movwf	color_read_Blue@tmp^0,c
  5531   0028D2  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5532   0028D4  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5533   0028D6  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5534                           
  5535                           ;../color.c: 107:  I2C_2_Master_Stop();
  5536   0028D8  ECB5  F015         	call	_I2C_2_Master_Stop	;wreg free
  5537   0028DC                     
  5538                           ;../color.c: 108:  return tmp;
  5539   0028DC  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5540   0028E0  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5541   0028E4  0012               	return		;funcret
  5542   0028E6                     __end_of_color_read_Blue:
  5543                           	callstack 0
  5544                           
  5545 ;; *************** function _I2C_2_Master_RepStart *****************
  5546 ;; Defined at:
  5547 ;;		line 33 in file "../i2c.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;		None
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;		None
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  1    wreg      void 
  5554 ;; Registers used:
  5555 ;;		wreg, status,2, status,0, cstack
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5565 ;;Total ram usage:        0 bytes
  5566 ;; Hardware stack levels used: 1
  5567 ;; Hardware stack levels required when called: 2
  5568 ;; This function calls:
  5569 ;;		_I2C_2_Master_Idle
  5570 ;; This function is called by:
  5571 ;;		_color_read_Luminosity
  5572 ;;		_color_read_Red
  5573 ;;		_color_read_Green
  5574 ;;		_color_read_Blue
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           	psect	text34
  5579   002B60                     __ptext34:
  5580                           	callstack 0
  5581   002B60                     _I2C_2_Master_RepStart:
  5582                           	callstack 26
  5583   002B60                     
  5584                           ;../i2c.c: 35:   I2C_2_Master_Idle();
  5585   002B60  EC3D  F015         	call	_I2C_2_Master_Idle	;wreg free
  5586   002B64                     
  5587                           ;../i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5588   002B64  010E               	movlb	14	; () banked
  5589   002B66  83DA               	bsf	218,1,b	;volatile
  5590   002B68                     
  5591                           ; BSR set to: 14
  5592   002B68  0012               	return		;funcret
  5593   002B6A                     __end_of_I2C_2_Master_RepStart:
  5594                           	callstack 0
  5595                           
  5596 ;; *************** function _I2C_2_Master_Read *****************
  5597 ;; Defined at:
  5598 ;;		line 51 in file "../i2c.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  ack             1    wreg     unsigned char 
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;  ack             1    2[COMRAM] unsigned char 
  5603 ;;  tmp             1    3[COMRAM] unsigned char 
  5604 ;; Return value:  Size  Location     Type
  5605 ;;                  1    wreg      unsigned char 
  5606 ;; Registers used:
  5607 ;;		wreg, status,2, status,0, cstack
  5608 ;; Tracked objects:
  5609 ;;		On entry : 0/0
  5610 ;;		On exit  : 0/0
  5611 ;;		Unchanged: 0/0
  5612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5614 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5615 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5616 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5617 ;;Total ram usage:        3 bytes
  5618 ;; Hardware stack levels used: 1
  5619 ;; Hardware stack levels required when called: 2
  5620 ;; This function calls:
  5621 ;;		_I2C_2_Master_Idle
  5622 ;; This function is called by:
  5623 ;;		_color_read_Luminosity
  5624 ;;		_color_read_Red
  5625 ;;		_color_read_Green
  5626 ;;		_color_read_Blue
  5627 ;; This function uses a non-reentrant model
  5628 ;;
  5629                           
  5630                           	psect	text35
  5631   00296C                     __ptext35:
  5632                           	callstack 0
  5633   00296C                     _I2C_2_Master_Read:
  5634                           	callstack 26
  5635                           
  5636                           ; BSR set to: 14
  5637                           ;incstack = 0
  5638                           ;I2C_2_Master_Read@ack stored from wreg
  5639   00296C  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  5640   00296E                     
  5641                           ;../i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);../i2c.c: 52: {;../i2c
      +                          .c: 53:   unsigned char tmp;;../i2c.c: 54:   I2C_2_Master_Idle();
  5642   00296E  EC3D  F015         	call	_I2C_2_Master_Idle	;wreg free
  5643   002972                     
  5644                           ;../i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5645   002972  010E               	movlb	14	; () banked
  5646   002974  87DA               	bsf	218,3,b	;volatile
  5647                           
  5648                           ;../i2c.c: 56:   I2C_2_Master_Idle();
  5649   002976  EC3D  F015         	call	_I2C_2_Master_Idle	;wreg free
  5650   00297A                     
  5651                           ;../i2c.c: 57:   tmp = SSP2BUF;
  5652   00297A  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5653                           
  5654                           ;../i2c.c: 58:   I2C_2_Master_Idle();
  5655   00297E  EC3D  F015         	call	_I2C_2_Master_Idle	;wreg free
  5656   002982                     
  5657                           ;../i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5658   002982  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  5659   002984  B4D8               	btfsc	status,2,c
  5660   002986  EFC7  F014         	goto	u1241
  5661   00298A  EFCB  F014         	goto	u1240
  5662   00298E                     u1241:
  5663   00298E  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5664   002990  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  5665   002992  EFCC  F014         	goto	u1258
  5666   002996                     u1240:
  5667   002996  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5668   002998                     u1258:
  5669   002998  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  5670   00299A  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  5671   00299C  010E               	movlb	14	; () banked
  5672   00299E  51DA               	movf	218,w,b	;volatile
  5673   0029A0  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5674   0029A2  0BDF               	andlw	-33
  5675   0029A4  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5676   0029A6  6FDA               	movwf	218,b	;volatile
  5677   0029A8                     
  5678                           ; BSR set to: 14
  5679                           ;../i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5680   0029A8  89DA               	bsf	218,4,b	;volatile
  5681   0029AA                     
  5682                           ; BSR set to: 14
  5683                           ;../i2c.c: 61:   return tmp;
  5684   0029AA  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  5685   0029AC                     
  5686                           ; BSR set to: 14
  5687   0029AC  0012               	return		;funcret
  5688   0029AE                     __end_of_I2C_2_Master_Read:
  5689                           	callstack 0
  5690                           
  5691 ;; *************** function _color_processor_hard *****************
  5692 ;; Defined at:
  5693 ;;		line 152 in file "../color.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  5696 ;;		 -> main@RGB_recorded(8), 
  5697 ;;  calibrated      2    2[COMRAM] PTR unsigned int 
  5698 ;;		 -> main@color_calibrated(64), 
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;  cb              2   22[COMRAM] unsigned int 
  5701 ;;  cg              2   20[COMRAM] unsigned int 
  5702 ;;  cr              2   18[COMRAM] unsigned int 
  5703 ;;  condition_b     1    8[COMRAM] _Bool 
  5704 ;;  condition_g     1    7[COMRAM] _Bool 
  5705 ;;  condition_r     1    6[COMRAM] _Bool 
  5706 ;;  i               2    0        int 
  5707 ;;  b               2   16[COMRAM] unsigned int 
  5708 ;;  g               2   14[COMRAM] unsigned int 
  5709 ;;  r               2   12[COMRAM] unsigned int 
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  2    0[COMRAM] unsigned int 
  5712 ;; Registers used:
  5713 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5714 ;; Tracked objects:
  5715 ;;		On entry : 0/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5719 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5720 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5721 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5722 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5723 ;;Total ram usage:       24 bytes
  5724 ;; Hardware stack levels used: 1
  5725 ;; Hardware stack levels required when called: 1
  5726 ;; This function calls:
  5727 ;;		Nothing
  5728 ;; This function is called by:
  5729 ;;		_main
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           	psect	text36
  5734   0014C4                     __ptext36:
  5735                           	callstack 0
  5736   0014C4                     _color_processor_hard:
  5737                           	callstack 29
  5738   0014C4                     
  5739                           ;../color.c: 152: unsigned int color_processor_hard(struct RGB_val *rgb, unsigned int ca
      +                          librated[]);../color.c: 153: {;../color.c: 154:     unsigned int r = rgb->R;
  5740   0014C4  EE20 F002          	lfsr	2,2
  5741   0014C8  5001               	movf	color_processor_hard@rgb^0,w,c
  5742   0014CA  26D9               	addwf	fsr2l,f,c
  5743   0014CC  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  5744   0014CE  22DA               	addwfc	fsr2h,f,c
  5745   0014D0  CFDE F00D          	movff	postinc2,color_processor_hard@r
  5746   0014D4  CFDD F00E          	movff	postdec2,color_processor_hard@r+1
  5747                           
  5748                           ;../color.c: 155:     unsigned int g = rgb->G;
  5749   0014D8  EE20 F004          	lfsr	2,4
  5750   0014DC  5001               	movf	color_processor_hard@rgb^0,w,c
  5751   0014DE  26D9               	addwf	fsr2l,f,c
  5752   0014E0  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  5753   0014E2  22DA               	addwfc	fsr2h,f,c
  5754   0014E4  CFDE F00F          	movff	postinc2,color_processor_hard@g
  5755   0014E8  CFDD F010          	movff	postdec2,color_processor_hard@g+1
  5756                           
  5757                           ;../color.c: 156:     unsigned int b = rgb->B;
  5758   0014EC  EE20 F006          	lfsr	2,6
  5759   0014F0  5001               	movf	color_processor_hard@rgb^0,w,c
  5760   0014F2  26D9               	addwf	fsr2l,f,c
  5761   0014F4  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  5762   0014F6  22DA               	addwfc	fsr2h,f,c
  5763   0014F8  CFDE F011          	movff	postinc2,color_processor_hard@b
  5764   0014FC  CFDD F012          	movff	postdec2,color_processor_hard@b+1
  5765   001500                     
  5766                           ;../color.c: 160:         unsigned int cr = calibrated[4*i+1];
  5767   001500  EE20 F002          	lfsr	2,2
  5768   001504  5003               	movf	color_processor_hard@calibrated^0,w,c
  5769   001506  26D9               	addwf	fsr2l,f,c
  5770   001508  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  5771   00150A  22DA               	addwfc	fsr2h,f,c
  5772   00150C  CFDE F013          	movff	postinc2,color_processor_hard@cr
  5773   001510  CFDD F014          	movff	postdec2,color_processor_hard@cr+1
  5774                           
  5775                           ;../color.c: 161:         unsigned int cg = calibrated[4*i+2];
  5776   001514  EE20 F004          	lfsr	2,4
  5777   001518  5003               	movf	color_processor_hard@calibrated^0,w,c
  5778   00151A  26D9               	addwf	fsr2l,f,c
  5779   00151C  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  5780   00151E  22DA               	addwfc	fsr2h,f,c
  5781   001520  CFDE F015          	movff	postinc2,color_processor_hard@cg
  5782   001524  CFDD F016          	movff	postdec2,color_processor_hard@cg+1
  5783                           
  5784                           ;../color.c: 162:         unsigned int cb = calibrated[4*i+3];
  5785   001528  EE20 F006          	lfsr	2,6
  5786   00152C  5003               	movf	color_processor_hard@calibrated^0,w,c
  5787   00152E  26D9               	addwf	fsr2l,f,c
  5788   001530  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  5789   001532  22DA               	addwfc	fsr2h,f,c
  5790   001534  CFDE F017          	movff	postinc2,color_processor_hard@cb
  5791   001538  CFDD F018          	movff	postdec2,color_processor_hard@cb+1
  5792   00153C                     
  5793                           ;../color.c: 164:         _Bool condition_r = r>cr-20 && r<cr+20;
  5794   00153C  0E00               	movlw	0
  5795   00153E  6E0A               	movwf	_color_processor_hard$370^0,c
  5796   001540  0EEC               	movlw	236
  5797   001542  2413               	addwf	color_processor_hard@cr^0,w,c
  5798   001544  6E05               	movwf	??_color_processor_hard^0,c
  5799   001546  0EFF               	movlw	255
  5800   001548  2014               	addwfc	(color_processor_hard@cr+1)^0,w,c
  5801   00154A  6E06               	movwf	(??_color_processor_hard+1)^0,c
  5802   00154C  500D               	movf	color_processor_hard@r^0,w,c
  5803   00154E  5C05               	subwf	??_color_processor_hard^0,w,c
  5804   001550  500E               	movf	(color_processor_hard@r+1)^0,w,c
  5805   001552  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  5806   001554  B0D8               	btfsc	status,0,c
  5807   001556  EFAF  F00A         	goto	u1471
  5808   00155A  EFB1  F00A         	goto	u1470
  5809   00155E                     u1471:
  5810   00155E  EFC4  F00A         	goto	l64
  5811   001562                     u1470:
  5812   001562  0E14               	movlw	20
  5813   001564  2413               	addwf	color_processor_hard@cr^0,w,c
  5814   001566  6E05               	movwf	??_color_processor_hard^0,c
  5815   001568  0E00               	movlw	0
  5816   00156A  2014               	addwfc	(color_processor_hard@cr+1)^0,w,c
  5817   00156C  6E06               	movwf	(??_color_processor_hard+1)^0,c
  5818   00156E  5005               	movf	??_color_processor_hard^0,w,c
  5819   001570  5C0D               	subwf	color_processor_hard@r^0,w,c
  5820   001572  5006               	movf	(??_color_processor_hard+1)^0,w,c
  5821   001574  580E               	subwfb	(color_processor_hard@r+1)^0,w,c
  5822   001576  B0D8               	btfsc	status,0,c
  5823   001578  EFC0  F00A         	goto	u1481
  5824   00157C  EFC2  F00A         	goto	u1480
  5825   001580                     u1481:
  5826   001580  EFC4  F00A         	goto	l64
  5827   001584                     u1480:
  5828   001584  0E01               	movlw	1
  5829   001586  6E0A               	movwf	_color_processor_hard$370^0,c
  5830   001588                     l64:
  5831   001588  500A               	movf	_color_processor_hard$370^0,w,c
  5832   00158A  A4D8               	btfss	status,2,c
  5833   00158C  EFCA  F00A         	goto	u1491
  5834   001590  EFCD  F00A         	goto	u1490
  5835   001594                     u1491:
  5836   001594  0E01               	movlw	1
  5837   001596  EFCE  F00A         	goto	u1500
  5838   00159A                     u1490:
  5839   00159A  0E00               	movlw	0
  5840   00159C                     u1500:
  5841   00159C  6E07               	movwf	color_processor_hard@condition_r^0,c
  5842                           
  5843                           ;../color.c: 165:         _Bool condition_g = b>cb-20 && b<cb+20;
  5844   00159E  0E00               	movlw	0
  5845   0015A0  6E0B               	movwf	_color_processor_hard$372^0,c
  5846   0015A2  0EEC               	movlw	236
  5847   0015A4  2417               	addwf	color_processor_hard@cb^0,w,c
  5848   0015A6  6E05               	movwf	??_color_processor_hard^0,c
  5849   0015A8  0EFF               	movlw	255
  5850   0015AA  2018               	addwfc	(color_processor_hard@cb+1)^0,w,c
  5851   0015AC  6E06               	movwf	(??_color_processor_hard+1)^0,c
  5852   0015AE  5011               	movf	color_processor_hard@b^0,w,c
  5853   0015B0  5C05               	subwf	??_color_processor_hard^0,w,c
  5854   0015B2  5012               	movf	(color_processor_hard@b+1)^0,w,c
  5855   0015B4  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  5856   0015B6  B0D8               	btfsc	status,0,c
  5857   0015B8  EFE0  F00A         	goto	u1511
  5858   0015BC  EFE2  F00A         	goto	u1510
  5859   0015C0                     u1511:
  5860   0015C0  EFF5  F00A         	goto	l66
  5861   0015C4                     u1510:
  5862   0015C4  0E14               	movlw	20
  5863   0015C6  2417               	addwf	color_processor_hard@cb^0,w,c
  5864   0015C8  6E05               	movwf	??_color_processor_hard^0,c
  5865   0015CA  0E00               	movlw	0
  5866   0015CC  2018               	addwfc	(color_processor_hard@cb+1)^0,w,c
  5867   0015CE  6E06               	movwf	(??_color_processor_hard+1)^0,c
  5868   0015D0  5005               	movf	??_color_processor_hard^0,w,c
  5869   0015D2  5C11               	subwf	color_processor_hard@b^0,w,c
  5870   0015D4  5006               	movf	(??_color_processor_hard+1)^0,w,c
  5871   0015D6  5812               	subwfb	(color_processor_hard@b+1)^0,w,c
  5872   0015D8  B0D8               	btfsc	status,0,c
  5873   0015DA  EFF1  F00A         	goto	u1521
  5874   0015DE  EFF3  F00A         	goto	u1520
  5875   0015E2                     u1521:
  5876   0015E2  EFF5  F00A         	goto	l66
  5877   0015E6                     u1520:
  5878   0015E6  0E01               	movlw	1
  5879   0015E8  6E0B               	movwf	_color_processor_hard$372^0,c
  5880   0015EA                     l66:
  5881   0015EA  500B               	movf	_color_processor_hard$372^0,w,c
  5882   0015EC  A4D8               	btfss	status,2,c
  5883   0015EE  EFFB  F00A         	goto	u1531
  5884   0015F2  EFFE  F00A         	goto	u1530
  5885   0015F6                     u1531:
  5886   0015F6  0E01               	movlw	1
  5887   0015F8  EFFF  F00A         	goto	u1540
  5888   0015FC                     u1530:
  5889   0015FC  0E00               	movlw	0
  5890   0015FE                     u1540:
  5891   0015FE  6E08               	movwf	color_processor_hard@condition_g^0,c
  5892                           
  5893                           ;../color.c: 166:         _Bool condition_b = g>cg-20 && g<cg+20;
  5894   001600  0E00               	movlw	0
  5895   001602  6E0C               	movwf	_color_processor_hard$374^0,c
  5896   001604  0EEC               	movlw	236
  5897   001606  2415               	addwf	color_processor_hard@cg^0,w,c
  5898   001608  6E05               	movwf	??_color_processor_hard^0,c
  5899   00160A  0EFF               	movlw	255
  5900   00160C  2016               	addwfc	(color_processor_hard@cg+1)^0,w,c
  5901   00160E  6E06               	movwf	(??_color_processor_hard+1)^0,c
  5902   001610  500F               	movf	color_processor_hard@g^0,w,c
  5903   001612  5C05               	subwf	??_color_processor_hard^0,w,c
  5904   001614  5010               	movf	(color_processor_hard@g+1)^0,w,c
  5905   001616  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  5906   001618  B0D8               	btfsc	status,0,c
  5907   00161A  EF11  F00B         	goto	u1551
  5908   00161E  EF13  F00B         	goto	u1550
  5909   001622                     u1551:
  5910   001622  EF26  F00B         	goto	l68
  5911   001626                     u1550:
  5912   001626  0E14               	movlw	20
  5913   001628  2415               	addwf	color_processor_hard@cg^0,w,c
  5914   00162A  6E05               	movwf	??_color_processor_hard^0,c
  5915   00162C  0E00               	movlw	0
  5916   00162E  2016               	addwfc	(color_processor_hard@cg+1)^0,w,c
  5917   001630  6E06               	movwf	(??_color_processor_hard+1)^0,c
  5918   001632  5005               	movf	??_color_processor_hard^0,w,c
  5919   001634  5C0F               	subwf	color_processor_hard@g^0,w,c
  5920   001636  5006               	movf	(??_color_processor_hard+1)^0,w,c
  5921   001638  5810               	subwfb	(color_processor_hard@g+1)^0,w,c
  5922   00163A  B0D8               	btfsc	status,0,c
  5923   00163C  EF22  F00B         	goto	u1561
  5924   001640  EF24  F00B         	goto	u1560
  5925   001644                     u1561:
  5926   001644  EF26  F00B         	goto	l68
  5927   001648                     u1560:
  5928   001648  0E01               	movlw	1
  5929   00164A  6E0C               	movwf	_color_processor_hard$374^0,c
  5930   00164C                     l68:
  5931   00164C  500C               	movf	_color_processor_hard$374^0,w,c
  5932   00164E  A4D8               	btfss	status,2,c
  5933   001650  EF2C  F00B         	goto	u1571
  5934   001654  EF2F  F00B         	goto	u1570
  5935   001658                     u1571:
  5936   001658  0E01               	movlw	1
  5937   00165A  EF30  F00B         	goto	u1580
  5938   00165E                     u1570:
  5939   00165E  0E00               	movlw	0
  5940   001660                     u1580:
  5941   001660  6E09               	movwf	color_processor_hard@condition_b^0,c
  5942                           
  5943                           ;../color.c: 168:         if (condition_r && condition_g && condition_b){
  5944   001662  5007               	movf	color_processor_hard@condition_r^0,w,c
  5945   001664  B4D8               	btfsc	status,2,c
  5946   001666  EF37  F00B         	goto	u1591
  5947   00166A  EF39  F00B         	goto	u1590
  5948   00166E                     u1591:
  5949   00166E  EF4F  F00B         	goto	l2930
  5950   001672                     u1590:
  5951   001672  5008               	movf	color_processor_hard@condition_g^0,w,c
  5952   001674  B4D8               	btfsc	status,2,c
  5953   001676  EF3F  F00B         	goto	u1601
  5954   00167A  EF41  F00B         	goto	u1600
  5955   00167E                     u1601:
  5956   00167E  EF4F  F00B         	goto	l2930
  5957   001682                     u1600:
  5958   001682  5009               	movf	color_processor_hard@condition_b^0,w,c
  5959   001684  B4D8               	btfsc	status,2,c
  5960   001686  EF47  F00B         	goto	u1611
  5961   00168A  EF49  F00B         	goto	u1610
  5962   00168E                     u1611:
  5963   00168E  EF4F  F00B         	goto	l2930
  5964   001692                     u1610:
  5965   001692                     
  5966                           ;../color.c: 169:             return i+1;
  5967   001692  0E00               	movlw	0
  5968   001694  6E02               	movwf	(?_color_processor_hard+1)^0,c
  5969   001696  0E01               	movlw	1
  5970   001698  6E01               	movwf	?_color_processor_hard^0,c
  5971   00169A  EF53  F00B         	goto	l70
  5972   00169E                     l2930:
  5973   00169E  0E00               	movlw	0
  5974   0016A0  6E02               	movwf	(?_color_processor_hard+1)^0,c
  5975   0016A2  0E00               	movlw	0
  5976   0016A4  6E01               	movwf	?_color_processor_hard^0,c
  5977   0016A6                     l70:
  5978   0016A6  0012               	return		;funcret
  5979   0016A8                     __end_of_color_processor_hard:
  5980                           	callstack 0
  5981                           
  5982 ;; *************** function _color_processor_easy *****************
  5983 ;; Defined at:
  5984 ;;		line 134 in file "../color.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  5987 ;;		 -> main@RGB_recorded(8), 
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;  b               2    8[COMRAM] unsigned int 
  5990 ;;  a               2    6[COMRAM] unsigned int 
  5991 ;;  c               2    4[COMRAM] unsigned int 
  5992 ;;  color           2    2[COMRAM] unsigned int 
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  2    0[COMRAM] unsigned int 
  5995 ;; Registers used:
  5996 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/0
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6002 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6003 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6005 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6006 ;;Total ram usage:       10 bytes
  6007 ;; Hardware stack levels used: 1
  6008 ;; Hardware stack levels required when called: 1
  6009 ;; This function calls:
  6010 ;;		Nothing
  6011 ;; This function is called by:
  6012 ;;		_main
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           	psect	text37
  6017   001F40                     __ptext37:
  6018                           	callstack 0
  6019   001F40                     _color_processor_easy:
  6020                           	callstack 29
  6021   001F40                     
  6022                           ;../color.c: 134: unsigned int color_processor_easy(struct RGB_val *rgb);../color.c: 135
      +                          : {;../color.c: 136:     unsigned int a = rgb->R;
  6023   001F40  EE20 F002          	lfsr	2,2
  6024   001F44  5001               	movf	color_processor_easy@rgb^0,w,c
  6025   001F46  26D9               	addwf	fsr2l,f,c
  6026   001F48  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6027   001F4A  22DA               	addwfc	fsr2h,f,c
  6028   001F4C  CFDE F007          	movff	postinc2,color_processor_easy@a
  6029   001F50  CFDD F008          	movff	postdec2,color_processor_easy@a+1
  6030                           
  6031                           ;../color.c: 137:     unsigned int b = rgb->G;
  6032   001F54  EE20 F004          	lfsr	2,4
  6033   001F58  5001               	movf	color_processor_easy@rgb^0,w,c
  6034   001F5A  26D9               	addwf	fsr2l,f,c
  6035   001F5C  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6036   001F5E  22DA               	addwfc	fsr2h,f,c
  6037   001F60  CFDE F009          	movff	postinc2,color_processor_easy@b
  6038   001F64  CFDD F00A          	movff	postdec2,color_processor_easy@b+1
  6039                           
  6040                           ;../color.c: 138:     unsigned int c = rgb->B;
  6041   001F68  EE20 F006          	lfsr	2,6
  6042   001F6C  5001               	movf	color_processor_easy@rgb^0,w,c
  6043   001F6E  26D9               	addwf	fsr2l,f,c
  6044   001F70  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6045   001F72  22DA               	addwfc	fsr2h,f,c
  6046   001F74  CFDE F005          	movff	postinc2,color_processor_easy@c
  6047   001F78  CFDD F006          	movff	postdec2,color_processor_easy@c+1
  6048   001F7C                     
  6049                           ;../color.c: 139:     unsigned int color;;../color.c: 140:     if (a>=b & a>=c){
  6050   001F7C  5009               	movf	color_processor_easy@b^0,w,c
  6051   001F7E  5C07               	subwf	color_processor_easy@a^0,w,c
  6052   001F80  500A               	movf	(color_processor_easy@b+1)^0,w,c
  6053   001F82  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6054   001F84  A0D8               	btfss	status,0,c
  6055   001F86  EFC7  F00F         	goto	u1431
  6056   001F8A  EFC9  F00F         	goto	u1430
  6057   001F8E                     u1431:
  6058   001F8E  EFDA  F00F         	goto	l2878
  6059   001F92                     u1430:
  6060   001F92  5005               	movf	color_processor_easy@c^0,w,c
  6061   001F94  5C07               	subwf	color_processor_easy@a^0,w,c
  6062   001F96  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6063   001F98  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6064   001F9A  A0D8               	btfss	status,0,c
  6065   001F9C  EFD2  F00F         	goto	u1441
  6066   001FA0  EFD4  F00F         	goto	u1440
  6067   001FA4                     u1441:
  6068   001FA4  EFDA  F00F         	goto	l2878
  6069   001FA8                     u1440:
  6070   001FA8                     
  6071                           ;../color.c: 141:         color=1;
  6072   001FA8  0E00               	movlw	0
  6073   001FAA  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6074   001FAC  0E01               	movlw	1
  6075   001FAE  6E03               	movwf	color_processor_easy@color^0,c
  6076                           
  6077                           ;../color.c: 142:     }
  6078   001FB0  EFFA  F00F         	goto	l2886
  6079   001FB4                     l2878:
  6080   001FB4  5007               	movf	color_processor_easy@a^0,w,c
  6081   001FB6  5C09               	subwf	color_processor_easy@b^0,w,c
  6082   001FB8  5008               	movf	(color_processor_easy@a+1)^0,w,c
  6083   001FBA  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6084   001FBC  A0D8               	btfss	status,0,c
  6085   001FBE  EFE3  F00F         	goto	u1451
  6086   001FC2  EFE5  F00F         	goto	u1450
  6087   001FC6                     u1451:
  6088   001FC6  EFF6  F00F         	goto	l2884
  6089   001FCA                     u1450:
  6090   001FCA  5005               	movf	color_processor_easy@c^0,w,c
  6091   001FCC  5C09               	subwf	color_processor_easy@b^0,w,c
  6092   001FCE  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6093   001FD0  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6094   001FD2  A0D8               	btfss	status,0,c
  6095   001FD4  EFEE  F00F         	goto	u1461
  6096   001FD8  EFF0  F00F         	goto	u1460
  6097   001FDC                     u1461:
  6098   001FDC  EFF6  F00F         	goto	l2884
  6099   001FE0                     u1460:
  6100   001FE0                     
  6101                           ;../color.c: 144:         color=2;
  6102   001FE0  0E00               	movlw	0
  6103   001FE2  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6104   001FE4  0E02               	movlw	2
  6105   001FE6  6E03               	movwf	color_processor_easy@color^0,c
  6106                           
  6107                           ;../color.c: 145:     }
  6108   001FE8  EFFA  F00F         	goto	l2886
  6109   001FEC                     l2884:
  6110                           
  6111                           ;../color.c: 147:         color=3;
  6112   001FEC  0E00               	movlw	0
  6113   001FEE  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6114   001FF0  0E03               	movlw	3
  6115   001FF2  6E03               	movwf	color_processor_easy@color^0,c
  6116   001FF4                     l2886:
  6117                           
  6118                           ;../color.c: 149:     return color;
  6119   001FF4  C003  F001         	movff	color_processor_easy@color,?_color_processor_easy
  6120   001FF8  C004  F002         	movff	color_processor_easy@color+1,?_color_processor_easy+1
  6121   001FFC  0012               	return		;funcret
  6122   001FFE                     __end_of_color_processor_easy:
  6123                           	callstack 0
  6124                           
  6125 ;; *************** function _color_click_init *****************
  6126 ;; Defined at:
  6127 ;;		line 6 in file "../color.c"
  6128 ;; Parameters:    Size  Location     Type
  6129 ;;		None
  6130 ;; Auto vars:     Size  Location     Type
  6131 ;;		None
  6132 ;; Return value:  Size  Location     Type
  6133 ;;                  1    wreg      void 
  6134 ;; Registers used:
  6135 ;;		wreg, status,2, status,0, cstack
  6136 ;; Tracked objects:
  6137 ;;		On entry : 0/0
  6138 ;;		On exit  : 0/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6143 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6144 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6145 ;;Total ram usage:        1 bytes
  6146 ;; Hardware stack levels used: 1
  6147 ;; Hardware stack levels required when called: 4
  6148 ;; This function calls:
  6149 ;;		_I2C_2_Master_Init
  6150 ;;		_color_writetoaddr
  6151 ;; This function is called by:
  6152 ;;		_main
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text38
  6157   0026A8                     __ptext38:
  6158                           	callstack 0
  6159   0026A8                     _color_click_init:
  6160                           	callstack 26
  6161   0026A8                     
  6162                           ;../color.c: 9:     I2C_2_Master_Init();
  6163   0026A8  EC28  F015         	call	_I2C_2_Master_Init	;wreg free
  6164   0026AC                     
  6165                           ;../color.c: 12:   color_writetoaddr(0x00, 0x01);
  6166   0026AC  0E01               	movlw	1
  6167   0026AE  6E03               	movwf	color_writetoaddr@value^0,c
  6168   0026B0  0E00               	movlw	0
  6169   0026B2  EC64  F015         	call	_color_writetoaddr
  6170   0026B6                     
  6171                           ;../color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6172   0026B6  0E3F               	movlw	63
  6173   0026B8  6E05               	movwf	??_color_click_init^0,c
  6174   0026BA  0E55               	movlw	85
  6175   0026BC                     u1987:
  6176   0026BC  2EE8               	decfsz	wreg,f,c
  6177   0026BE  D7FE               	bra	u1987
  6178   0026C0  2E05               	decfsz	??_color_click_init^0,f,c
  6179   0026C2  D7FC               	bra	u1987
  6180   0026C4  F000               	nop	
  6181   0026C6                     
  6182                           ;../color.c: 16:  color_writetoaddr(0x00, 0x03);
  6183   0026C6  0E03               	movlw	3
  6184   0026C8  6E03               	movwf	color_writetoaddr@value^0,c
  6185   0026CA  0E00               	movlw	0
  6186   0026CC  EC64  F015         	call	_color_writetoaddr
  6187   0026D0                     
  6188                           ;../color.c: 19:  color_writetoaddr(0x01, 0xD5);
  6189   0026D0  0ED5               	movlw	213
  6190   0026D2  6E03               	movwf	color_writetoaddr@value^0,c
  6191   0026D4  0E01               	movlw	1
  6192   0026D6  EC64  F015         	call	_color_writetoaddr
  6193   0026DA                     
  6194                           ;../color.c: 22:     TRISHbits.TRISH1 = 0;
  6195   0026DA  9288               	bcf	136,1,c	;volatile
  6196   0026DC                     
  6197                           ;../color.c: 23:     TRISDbits.TRISD3 = 0;
  6198   0026DC  9684               	bcf	132,3,c	;volatile
  6199   0026DE                     
  6200                           ;../color.c: 24:     TRISDbits.TRISD4 = 0;
  6201   0026DE  9884               	bcf	132,4,c	;volatile
  6202   0026E0                     
  6203                           ;../color.c: 25:     TRISHbits.TRISH0 = 0;
  6204   0026E0  9088               	bcf	136,0,c	;volatile
  6205   0026E2                     
  6206                           ;../color.c: 26:     TRISFbits.TRISF0 = 0;
  6207   0026E2  9086               	bcf	134,0,c	;volatile
  6208   0026E4                     
  6209                           ;../color.c: 28:     LATHbits.LATH1 = 1;
  6210   0026E4  8280               	bsf	128,1,c	;volatile
  6211   0026E6                     
  6212                           ;../color.c: 29:     LATDbits.LATD3 = 1;
  6213   0026E6  867C               	bsf	124,3,c	;volatile
  6214   0026E8                     
  6215                           ;../color.c: 30:     LATDbits.LATD4 = 0;
  6216   0026E8  987C               	bcf	124,4,c	;volatile
  6217   0026EA                     
  6218                           ;../color.c: 31:     LATHbits.LATH0 = 0;
  6219   0026EA  9080               	bcf	128,0,c	;volatile
  6220   0026EC                     
  6221                           ;../color.c: 32:     LATFbits.LATF0 = 0;
  6222   0026EC  907E               	bcf	126,0,c	;volatile
  6223   0026EE                     
  6224                           ;../color.c: 35:     LATDbits.LATD7=0;
  6225   0026EE  9E7C               	bcf	124,7,c	;volatile
  6226   0026F0                     
  6227                           ;../color.c: 36:     LATHbits.LATH3=0;
  6228   0026F0  9680               	bcf	128,3,c	;volatile
  6229   0026F2                     
  6230                           ;../color.c: 37:     TRISDbits.TRISD7=0;
  6231   0026F2  9E84               	bcf	132,7,c	;volatile
  6232   0026F4                     
  6233                           ;../color.c: 38:     TRISHbits.TRISH3=0;
  6234   0026F4  9688               	bcf	136,3,c	;volatile
  6235   0026F6                     
  6236                           ;../color.c: 40:     TRISFbits.TRISF2=1;
  6237   0026F6  8486               	bsf	134,2,c	;volatile
  6238   0026F8                     
  6239                           ;../color.c: 41:     ANSELFbits.ANSELF2=0;
  6240   0026F8  010E               	movlb	14	; () banked
  6241   0026FA  95B4               	bcf	180,2,b	;volatile
  6242   0026FC                     
  6243                           ; BSR set to: 14
  6244                           ;../color.c: 42:     TRISFbits.TRISF3=1;
  6245   0026FC  8686               	bsf	134,3,c	;volatile
  6246   0026FE                     
  6247                           ; BSR set to: 14
  6248                           ;../color.c: 43:     ANSELFbits.ANSELF3=0;
  6249   0026FE  97B4               	bcf	180,3,b	;volatile
  6250   002700                     
  6251                           ; BSR set to: 14
  6252   002700  0012               	return		;funcret
  6253   002702                     __end_of_color_click_init:
  6254                           	callstack 0
  6255                           
  6256 ;; *************** function _color_writetoaddr *****************
  6257 ;; Defined at:
  6258 ;;		line 46 in file "../color.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  address         1    wreg     unsigned char 
  6261 ;;  value           1    2[COMRAM] unsigned char 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  address         1    3[COMRAM] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      void 
  6266 ;; Registers used:
  6267 ;;		wreg, status,2, status,0, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6273 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6274 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6276 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6277 ;;Total ram usage:        2 bytes
  6278 ;; Hardware stack levels used: 1
  6279 ;; Hardware stack levels required when called: 3
  6280 ;; This function calls:
  6281 ;;		_I2C_2_Master_Start
  6282 ;;		_I2C_2_Master_Stop
  6283 ;;		_I2C_2_Master_Write
  6284 ;; This function is called by:
  6285 ;;		_color_click_init
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text39
  6290   002AC8                     __ptext39:
  6291                           	callstack 0
  6292   002AC8                     _color_writetoaddr:
  6293                           	callstack 26
  6294                           
  6295                           ; BSR set to: 14
  6296                           ;incstack = 0
  6297                           ;color_writetoaddr@address stored from wreg
  6298   002AC8  6E04               	movwf	color_writetoaddr@address^0,c
  6299   002ACA                     
  6300                           ;../color.c: 46: void color_writetoaddr(char address, char value);../color.c: 47: {;../c
      +                          olor.c: 48:     I2C_2_Master_Start();
  6301   002ACA  ECBA  F015         	call	_I2C_2_Master_Start	;wreg free
  6302                           
  6303                           ;../color.c: 49:     I2C_2_Master_Write(0x52 | 0x00);
  6304   002ACE  0E52               	movlw	82
  6305   002AD0  ECAA  F015         	call	_I2C_2_Master_Write
  6306                           
  6307                           ;../color.c: 50:     I2C_2_Master_Write(0x80 | address);
  6308   002AD4  5004               	movf	color_writetoaddr@address^0,w,c
  6309   002AD6  0980               	iorlw	128
  6310   002AD8  ECAA  F015         	call	_I2C_2_Master_Write
  6311                           
  6312                           ;../color.c: 51:     I2C_2_Master_Write(value);
  6313   002ADC  5003               	movf	color_writetoaddr@value^0,w,c
  6314   002ADE  ECAA  F015         	call	_I2C_2_Master_Write
  6315                           
  6316                           ;../color.c: 52:     I2C_2_Master_Stop();
  6317   002AE2  ECB5  F015         	call	_I2C_2_Master_Stop	;wreg free
  6318   002AE6  0012               	return		;funcret
  6319   002AE8                     __end_of_color_writetoaddr:
  6320                           	callstack 0
  6321                           
  6322 ;; *************** function _I2C_2_Master_Write *****************
  6323 ;; Defined at:
  6324 ;;		line 45 in file "../i2c.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;  data_byte       1    wreg     unsigned char 
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;  data_byte       1    1[COMRAM] unsigned char 
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      void 
  6331 ;; Registers used:
  6332 ;;		wreg, status,2, status,0, cstack
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6339 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6341 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6342 ;;Total ram usage:        1 bytes
  6343 ;; Hardware stack levels used: 1
  6344 ;; Hardware stack levels required when called: 2
  6345 ;; This function calls:
  6346 ;;		_I2C_2_Master_Idle
  6347 ;; This function is called by:
  6348 ;;		_color_writetoaddr
  6349 ;;		_color_read_Luminosity
  6350 ;;		_color_read_Red
  6351 ;;		_color_read_Green
  6352 ;;		_color_read_Blue
  6353 ;; This function uses a non-reentrant model
  6354 ;;
  6355                           
  6356                           	psect	text40
  6357   002B54                     __ptext40:
  6358                           	callstack 0
  6359   002B54                     _I2C_2_Master_Write:
  6360                           	callstack 26
  6361                           
  6362                           ;incstack = 0
  6363                           ;I2C_2_Master_Write@data_byte stored from wreg
  6364   002B54  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6365   002B56                     
  6366                           ;../i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);../i2c.c: 46: {;../i2c.c
      +                          : 47:   I2C_2_Master_Idle();
  6367   002B56  EC3D  F015         	call	_I2C_2_Master_Idle	;wreg free
  6368   002B5A                     
  6369                           ;../i2c.c: 48:   SSP2BUF = data_byte;
  6370   002B5A  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6371   002B5E  0012               	return		;funcret
  6372   002B60                     __end_of_I2C_2_Master_Write:
  6373                           	callstack 0
  6374                           
  6375 ;; *************** function _I2C_2_Master_Stop *****************
  6376 ;; Defined at:
  6377 ;;		line 39 in file "../i2c.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;		None
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;		None
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  1    wreg      void 
  6384 ;; Registers used:
  6385 ;;		wreg, status,2, status,0, cstack
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6395 ;;Total ram usage:        0 bytes
  6396 ;; Hardware stack levels used: 1
  6397 ;; Hardware stack levels required when called: 2
  6398 ;; This function calls:
  6399 ;;		_I2C_2_Master_Idle
  6400 ;; This function is called by:
  6401 ;;		_color_writetoaddr
  6402 ;;		_color_read_Luminosity
  6403 ;;		_color_read_Red
  6404 ;;		_color_read_Green
  6405 ;;		_color_read_Blue
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           	psect	text41
  6410   002B6A                     __ptext41:
  6411                           	callstack 0
  6412   002B6A                     _I2C_2_Master_Stop:
  6413                           	callstack 26
  6414   002B6A                     
  6415                           ;../i2c.c: 41:   I2C_2_Master_Idle();
  6416   002B6A  EC3D  F015         	call	_I2C_2_Master_Idle	;wreg free
  6417   002B6E                     
  6418                           ;../i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6419   002B6E  010E               	movlb	14	; () banked
  6420   002B70  85DA               	bsf	218,2,b	;volatile
  6421   002B72                     
  6422                           ; BSR set to: 14
  6423   002B72  0012               	return		;funcret
  6424   002B74                     __end_of_I2C_2_Master_Stop:
  6425                           	callstack 0
  6426                           
  6427 ;; *************** function _I2C_2_Master_Start *****************
  6428 ;; Defined at:
  6429 ;;		line 27 in file "../i2c.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;		None
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;		None
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      void 
  6436 ;; Registers used:
  6437 ;;		wreg, status,2, status,0, cstack
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6447 ;;Total ram usage:        0 bytes
  6448 ;; Hardware stack levels used: 1
  6449 ;; Hardware stack levels required when called: 2
  6450 ;; This function calls:
  6451 ;;		_I2C_2_Master_Idle
  6452 ;; This function is called by:
  6453 ;;		_color_writetoaddr
  6454 ;;		_color_read_Luminosity
  6455 ;;		_color_read_Red
  6456 ;;		_color_read_Green
  6457 ;;		_color_read_Blue
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           	psect	text42
  6462   002B74                     __ptext42:
  6463                           	callstack 0
  6464   002B74                     _I2C_2_Master_Start:
  6465                           	callstack 26
  6466   002B74                     
  6467                           ;../i2c.c: 29:   I2C_2_Master_Idle();
  6468   002B74  EC3D  F015         	call	_I2C_2_Master_Idle	;wreg free
  6469   002B78                     
  6470                           ;../i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6471   002B78  010E               	movlb	14	; () banked
  6472   002B7A  81DA               	bsf	218,0,b	;volatile
  6473   002B7C                     
  6474                           ; BSR set to: 14
  6475   002B7C  0012               	return		;funcret
  6476   002B7E                     __end_of_I2C_2_Master_Start:
  6477                           	callstack 0
  6478                           
  6479 ;; *************** function _I2C_2_Master_Idle *****************
  6480 ;; Defined at:
  6481 ;;		line 22 in file "../i2c.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;		None
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  1    wreg      void 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2, status,0
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6497 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6498 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6499 ;;Total ram usage:        1 bytes
  6500 ;; Hardware stack levels used: 1
  6501 ;; Hardware stack levels required when called: 1
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_I2C_2_Master_Start
  6506 ;;		_I2C_2_Master_RepStart
  6507 ;;		_I2C_2_Master_Stop
  6508 ;;		_I2C_2_Master_Write
  6509 ;;		_I2C_2_Master_Read
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           	psect	text43
  6514   002A7A                     __ptext43:
  6515                           	callstack 0
  6516   002A7A                     _I2C_2_Master_Idle:
  6517                           	callstack 26
  6518   002A7A                     l101:
  6519   002A7A  010E               	movlb	14	; () banked
  6520   002A7C  B5D8               	btfsc	216,2,b	;volatile
  6521   002A7E  EF43  F015         	goto	u1061
  6522   002A82  EF45  F015         	goto	u1060
  6523   002A86                     u1061:
  6524   002A86  EF3D  F015         	goto	l101
  6525   002A8A                     u1060:
  6526   002A8A                     
  6527                           ; BSR set to: 14
  6528   002A8A  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6529   002A8E  0E1F               	movlw	31
  6530   002A90  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  6531   002A92  A4D8               	btfss	status,2,c
  6532   002A94  EF4E  F015         	goto	u1071
  6533   002A98  EF50  F015         	goto	u1070
  6534   002A9C                     u1071:
  6535   002A9C  EF3D  F015         	goto	l101
  6536   002AA0                     u1070:
  6537   002AA0                     
  6538                           ; BSR set to: 14
  6539   002AA0  0012               	return		;funcret
  6540   002AA2                     __end_of_I2C_2_Master_Idle:
  6541                           	callstack 0
  6542                           
  6543 ;; *************** function _I2C_2_Master_Init *****************
  6544 ;; Defined at:
  6545 ;;		line 4 in file "../i2c.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;		None
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;		None
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  1    wreg      void 
  6552 ;; Registers used:
  6553 ;;		wreg, status,2
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6563 ;;Total ram usage:        0 bytes
  6564 ;; Hardware stack levels used: 1
  6565 ;; Hardware stack levels required when called: 1
  6566 ;; This function calls:
  6567 ;;		Nothing
  6568 ;; This function is called by:
  6569 ;;		_color_click_init
  6570 ;;		_main
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	text44
  6575   002A50                     __ptext44:
  6576                           	callstack 0
  6577   002A50                     _I2C_2_Master_Init:
  6578                           	callstack 28
  6579   002A50                     
  6580                           ;../i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6581   002A50  010E               	movlb	14	; () banked
  6582   002A52  51D9               	movf	217,w,b	;volatile
  6583   002A54  0BF0               	andlw	-16
  6584   002A56  0908               	iorlw	8
  6585   002A58  6FD9               	movwf	217,b	;volatile
  6586   002A5A                     
  6587                           ; BSR set to: 14
  6588                           ;../i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6589   002A5A  8BD9               	bsf	217,5,b	;volatile
  6590                           
  6591                           ;../i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6592   002A5C  0E9F               	movlw	159
  6593   002A5E  6FD6               	movwf	214,b	;volatile
  6594   002A60                     
  6595                           ; BSR set to: 14
  6596                           ;../i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6597   002A60  8A84               	bsf	132,5,c	;volatile
  6598   002A62                     
  6599                           ; BSR set to: 14
  6600                           ;../i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6601   002A62  8C84               	bsf	132,6,c	;volatile
  6602   002A64                     
  6603                           ; BSR set to: 14
  6604                           ;../i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6605   002A64  9BA7               	bcf	167,5,b	;volatile
  6606   002A66                     
  6607                           ; BSR set to: 14
  6608                           ;../i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6609   002A66  9DA7               	bcf	167,6,b	;volatile
  6610                           
  6611                           ;../i2c.c: 16:   SSP2DATPPS=0x1D;
  6612   002A68  0E1D               	movlw	29
  6613   002A6A  6F1D               	movwf	29,b	;volatile
  6614                           
  6615                           ;../i2c.c: 17:   SSP2CLKPPS=0x1E;
  6616   002A6C  0E1E               	movlw	30
  6617   002A6E  6F1C               	movwf	28,b	;volatile
  6618                           
  6619                           ;../i2c.c: 18:   RD5PPS=0x1C;
  6620   002A70  0E1C               	movlw	28
  6621   002A72  6F6F               	movwf	111,b	;volatile
  6622                           
  6623                           ;../i2c.c: 19:   RD6PPS=0x1B;
  6624   002A74  0E1B               	movlw	27
  6625   002A76  6F70               	movwf	112,b	;volatile
  6626   002A78                     
  6627                           ; BSR set to: 14
  6628   002A78  0012               	return		;funcret
  6629   002A7A                     __end_of_I2C_2_Master_Init:
  6630                           	callstack 0
  6631                           
  6632 ;; *************** function _Timer0_init *****************
  6633 ;; Defined at:
  6634 ;;		line 62 in file "../rc_servo.c"
  6635 ;; Parameters:    Size  Location     Type
  6636 ;;		None
  6637 ;; Auto vars:     Size  Location     Type
  6638 ;;		None
  6639 ;; Return value:  Size  Location     Type
  6640 ;;                  1    wreg      void 
  6641 ;; Registers used:
  6642 ;;		wreg, status,2
  6643 ;; Tracked objects:
  6644 ;;		On entry : 0/0
  6645 ;;		On exit  : 0/0
  6646 ;;		Unchanged: 0/0
  6647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6652 ;;Total ram usage:        0 bytes
  6653 ;; Hardware stack levels used: 1
  6654 ;; Hardware stack levels required when called: 1
  6655 ;; This function calls:
  6656 ;;		Nothing
  6657 ;; This function is called by:
  6658 ;;		_main
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           	psect	text45
  6663   002AE8                     __ptext45:
  6664                           	callstack 0
  6665   002AE8                     _Timer0_init:
  6666                           	callstack 29
  6667   002AE8                     
  6668                           ;../rc_servo.c: 64:     T0CON1bits.T0CS=0b010;
  6669   002AE8  50D6               	movf	214,w,c	;volatile
  6670   002AEA  0B1F               	andlw	-225
  6671   002AEC  0940               	iorlw	64
  6672   002AEE  6ED6               	movwf	214,c	;volatile
  6673   002AF0                     
  6674                           ;../rc_servo.c: 65:     T0CON1bits.T0ASYNC=1;
  6675   002AF0  88D6               	bsf	214,4,c	;volatile
  6676                           
  6677                           ;../rc_servo.c: 66:     T0CON1bits.T0CKPS=0b0111;
  6678   002AF2  50D6               	movf	214,w,c	;volatile
  6679   002AF4  0BF0               	andlw	-16
  6680   002AF6  0907               	iorlw	7
  6681   002AF8  6ED6               	movwf	214,c	;volatile
  6682   002AFA                     
  6683                           ;../rc_servo.c: 68:     T0CON0bits.T016BIT=1;
  6684   002AFA  88D5               	bsf	213,4,c	;volatile
  6685                           
  6686                           ;../rc_servo.c: 71:     TMR0H=(65535-2500)>>8;
  6687   002AFC  0EF6               	movlw	246
  6688   002AFE  6ED4               	movwf	212,c	;volatile
  6689                           
  6690                           ;../rc_servo.c: 72:     TMR0L=(unsigned char)(65535-2500);
  6691   002B00  0E3B               	movlw	59
  6692   002B02  6ED3               	movwf	211,c	;volatile
  6693   002B04                     
  6694                           ;../rc_servo.c: 73:     T0CON0bits.T0EN=1;
  6695   002B04  8ED5               	bsf	213,7,c	;volatile
  6696   002B06  0012               	return		;funcret
  6697   002B08                     __end_of_Timer0_init:
  6698                           	callstack 0
  6699                           
  6700 ;; *************** function _Interrupts_init *****************
  6701 ;; Defined at:
  6702 ;;		line 8 in file "../rc_servo.c"
  6703 ;; Parameters:    Size  Location     Type
  6704 ;;		None
  6705 ;; Auto vars:     Size  Location     Type
  6706 ;;		None
  6707 ;; Return value:  Size  Location     Type
  6708 ;;                  1    wreg      void 
  6709 ;; Registers used:
  6710 ;;		None
  6711 ;; Tracked objects:
  6712 ;;		On entry : 0/0
  6713 ;;		On exit  : 0/0
  6714 ;;		Unchanged: 0/0
  6715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6720 ;;Total ram usage:        0 bytes
  6721 ;; Hardware stack levels used: 1
  6722 ;; Hardware stack levels required when called: 1
  6723 ;; This function calls:
  6724 ;;		Nothing
  6725 ;; This function is called by:
  6726 ;;		_main
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730                           	psect	text46
  6731   002B3E                     __ptext46:
  6732                           	callstack 0
  6733   002B3E                     _Interrupts_init:
  6734                           	callstack 29
  6735   002B3E                     
  6736                           ;../rc_servo.c: 12:     INTCONbits.IPEN = 1;
  6737   002B3E  8AF2               	bsf	242,5,c	;volatile
  6738                           
  6739                           ;../rc_servo.c: 13:     INTCONbits.PEIE = 1;
  6740   002B40  8CF2               	bsf	242,6,c	;volatile
  6741                           
  6742                           ;../rc_servo.c: 16:     PIE0bits.TMR0IE = 1;
  6743   002B42  010E               	movlb	14	; () banked
  6744   002B44  8B29               	bsf	41,5,b	;volatile
  6745                           
  6746                           ;../rc_servo.c: 17:     IPR0bits.TMR0IP = 1;
  6747   002B46  8B1F               	bsf	31,5,b	;volatile
  6748                           
  6749                           ;../rc_servo.c: 18:     PIR0bits.TMR0IF = 0;
  6750   002B48  9B33               	bcf	51,5,b	;volatile
  6751                           
  6752                           ;../rc_servo.c: 20:     PIE2bits.C1IE=1;
  6753   002B4A  812B               	bsf	43,0,b	;volatile
  6754                           
  6755                           ;../rc_servo.c: 21:     IPR2bits.C1IP=0;
  6756   002B4C  9121               	bcf	33,0,b	;volatile
  6757                           
  6758                           ;../rc_servo.c: 22:     PIR2bits.C1IF=0;
  6759   002B4E  9135               	bcf	53,0,b	;volatile
  6760                           
  6761                           ;../rc_servo.c: 24:     INTCONbits.GIE = 1;
  6762   002B50  8EF2               	bsf	242,7,c	;volatile
  6763   002B52                     
  6764                           ; BSR set to: 14
  6765   002B52  0012               	return		;funcret
  6766   002B54                     __end_of_Interrupts_init:
  6767                           	callstack 0
  6768                           
  6769 ;; *************** function _HighISR *****************
  6770 ;; Defined at:
  6771 ;;		line 31 in file "../rc_servo.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;		None
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;		None
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      void 
  6778 ;; Registers used:
  6779 ;;		wreg, status,2, status,0
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6789 ;;Total ram usage:        0 bytes
  6790 ;; Hardware stack levels used: 1
  6791 ;; This function calls:
  6792 ;;		Nothing
  6793 ;; This function is called by:
  6794 ;;		Interrupt level 2
  6795 ;; This function uses a non-reentrant model
  6796 ;;
  6797                           
  6798                           	psect	intcode
  6799   000008                     __pintcode:
  6800                           	callstack 0
  6801   000008                     _HighISR:
  6802                           	callstack 22
  6803                           
  6804                           ; BSR set to: 14
  6805                           ;incstack = 0
  6806   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6807   00000A                     
  6808                           ;../rc_servo.c: 33:     if(PIR0bits.TMR0IF||!PORTFbits.RF2){
  6809   00000A  010E               	movlb	14	; () banked
  6810   00000C  BB33               	btfsc	51,5,b	;volatile
  6811   00000E  EF0B  F000         	goto	i2u166_41
  6812   000012  EF0D  F000         	goto	i2u166_40
  6813   000016                     i2u166_41:
  6814   000016  EF14  F000         	goto	i2l3306
  6815   00001A                     i2u166_40:
  6816   00001A                     
  6817                           ; BSR set to: 14
  6818   00001A  B48E               	btfsc	142,2,c	;volatile
  6819   00001C  EF12  F000         	goto	i2u167_41
  6820   000020  EF14  F000         	goto	i2u167_40
  6821   000024                     i2u167_41:
  6822   000024  EF1D  F000         	goto	i2l385
  6823   000028                     i2u167_40:
  6824   000028                     i2l3306:
  6825                           
  6826                           ; BSR set to: 14
  6827                           ;../rc_servo.c: 36:         time++;
  6828   000028  0101               	movlb	1	; () banked
  6829   00002A  4BF2               	infsnz	_time& (0+255),f,b
  6830   00002C  2BF3               	incf	(_time+1)& (0+255),f,b
  6831   00002E                     
  6832                           ; BSR set to: 1
  6833                           ;../rc_servo.c: 39:         TMR0L = 0b11011011;
  6834   00002E  0EDB               	movlw	219
  6835   000030  6ED3               	movwf	211,c	;volatile
  6836   000032                     
  6837                           ; BSR set to: 1
  6838                           ;../rc_servo.c: 40:         TMR0H = 0b00001011;
  6839   000032  0E0B               	movlw	11
  6840   000034  6ED4               	movwf	212,c	;volatile
  6841   000036                     
  6842                           ; BSR set to: 1
  6843                           ;../rc_servo.c: 42:         PIR0bits.TMR0IF=0;
  6844   000036  010E               	movlb	14	; () banked
  6845   000038  9B33               	bcf	51,5,b	;volatile
  6846   00003A                     i2l385:
  6847                           
  6848                           ; BSR set to: 14
  6849   00003A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6850   00003C  0011               	retfie		f
  6851   00003E                     __end_of_HighISR:
  6852                           	callstack 0
  6853                           
  6854                           	psect	rparam
  6855   000000                     
  6856                           	psect	temp
  6857   00005F                     btemp:
  6858                           	callstack 0
  6859   00005F                     	ds	1
  6860   000000                     int$flags	set	btemp
  6861   000000                     wtemp8	set	btemp+1
  6862   000000                     ttemp5	set	btemp+1
  6863   000000                     ttemp6	set	btemp+4
  6864   000000                     ttemp7	set	btemp+8
  6865                           
  6866                           	psect	idloc
  6867                           
  6868                           ;Config register IDLOC0 @ 0x200000
  6869                           ;	unspecified, using default values
  6870   200000                     	org	2097152
  6871   200000  0FFF               	dw	4095
  6872                           
  6873                           ;Config register IDLOC1 @ 0x200002
  6874                           ;	unspecified, using default values
  6875   200002                     	org	2097154
  6876   200002  0FFF               	dw	4095
  6877                           
  6878                           ;Config register IDLOC2 @ 0x200004
  6879                           ;	unspecified, using default values
  6880   200004                     	org	2097156
  6881   200004  0FFF               	dw	4095
  6882                           
  6883                           ;Config register IDLOC3 @ 0x200006
  6884                           ;	unspecified, using default values
  6885   200006                     	org	2097158
  6886   200006  0FFF               	dw	4095
  6887                           
  6888                           ;Config register IDLOC4 @ 0x200008
  6889                           ;	unspecified, using default values
  6890   200008                     	org	2097160
  6891   200008  0FFF               	dw	4095
  6892                           
  6893                           ;Config register IDLOC5 @ 0x20000A
  6894                           ;	unspecified, using default values
  6895   20000A                     	org	2097162
  6896   20000A  0FFF               	dw	4095
  6897                           
  6898                           ;Config register IDLOC6 @ 0x20000C
  6899                           ;	unspecified, using default values
  6900   20000C                     	org	2097164
  6901   20000C  0FFF               	dw	4095
  6902                           
  6903                           ;Config register IDLOC7 @ 0x20000E
  6904                           ;	unspecified, using default values
  6905   20000E                     	org	2097166
  6906   20000E  0FFF               	dw	4095
  6907                           
  6908                           	psect	config
  6909                           
  6910                           ;Config register CONFIG1L @ 0x300000
  6911                           ;	External Oscillator mode Selection bits
  6912                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6913                           ;	Power-up default value for COSC bits
  6914                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6915   300000                     	org	3145728
  6916   300000  AA                 	db	170
  6917                           
  6918                           ;Config register CONFIG1H @ 0x300001
  6919                           ;	unspecified, using default values
  6920                           ;	Clock Out Enable bit
  6921                           ;	CLKOUTEN = 0x1, unprogrammed default
  6922                           ;	Clock Switch Enable bit
  6923                           ;	CSWEN = 0x1, unprogrammed default
  6924                           ;	Fail-Safe Clock Monitor Enable bit
  6925                           ;	FCMEN = 0x1, unprogrammed default
  6926   300001                     	org	3145729
  6927   300001  FF                 	db	255
  6928                           
  6929                           ;Config register CONFIG2L @ 0x300002
  6930                           ;	unspecified, using default values
  6931                           ;	Master Clear Enable bit
  6932                           ;	MCLRE = 0x1, unprogrammed default
  6933                           ;	Power-up Timer Enable bit
  6934                           ;	PWRTE = 0x1, unprogrammed default
  6935                           ;	Low-power BOR enable bit
  6936                           ;	LPBOREN = 0x1, unprogrammed default
  6937                           ;	Brown-out Reset Enable bits
  6938                           ;	BOREN = 0x3, unprogrammed default
  6939   300002                     	org	3145730
  6940   300002  FF                 	db	255
  6941                           
  6942                           ;Config register CONFIG2H @ 0x300003
  6943                           ;	unspecified, using default values
  6944                           ;	Brown Out Reset Voltage selection bits
  6945                           ;	BORV = 0x3, unprogrammed default
  6946                           ;	ZCD Disable bit
  6947                           ;	ZCD = 0x1, unprogrammed default
  6948                           ;	PPSLOCK bit One-Way Set Enable bit
  6949                           ;	PPS1WAY = 0x1, unprogrammed default
  6950                           ;	Stack Full/Underflow Reset Enable bit
  6951                           ;	STVREN = 0x1, unprogrammed default
  6952                           ;	Debugger Enable bit
  6953                           ;	DEBUG = 0x1, unprogrammed default
  6954                           ;	Extended Instruction Set Enable bit
  6955                           ;	XINST = 0x1, unprogrammed default
  6956   300003                     	org	3145731
  6957   300003  FF                 	db	255
  6958                           
  6959                           ;Config register CONFIG3L @ 0x300004
  6960                           ;	WDT Period Select bits
  6961                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6962                           ;	WDT operating mode
  6963                           ;	WDTE = OFF, WDT Disabled
  6964   300004                     	org	3145732
  6965   300004  9F                 	db	159
  6966                           
  6967                           ;Config register CONFIG3H @ 0x300005
  6968                           ;	unspecified, using default values
  6969                           ;	WDT Window Select bits
  6970                           ;	WDTCWS = 0x7, unprogrammed default
  6971                           ;	WDT input clock selector
  6972                           ;	WDTCCS = 0x7, unprogrammed default
  6973   300005                     	org	3145733
  6974   300005  FF                 	db	255
  6975                           
  6976                           ;Config register CONFIG4L @ 0x300006
  6977                           ;	unspecified, using default values
  6978                           ;	Write Protection Block 0
  6979                           ;	WRT0 = 0x1, unprogrammed default
  6980                           ;	Write Protection Block 1
  6981                           ;	WRT1 = 0x1, unprogrammed default
  6982                           ;	Write Protection Block 2
  6983                           ;	WRT2 = 0x1, unprogrammed default
  6984                           ;	Write Protection Block 3
  6985                           ;	WRT3 = 0x1, unprogrammed default
  6986                           ;	Write Protection Block 3
  6987                           ;	WRT4 = 0x1, unprogrammed default
  6988                           ;	Write Protection Block 3
  6989                           ;	WRT5 = 0x1, unprogrammed default
  6990                           ;	Write Protection Block 3
  6991                           ;	WRT6 = 0x1, unprogrammed default
  6992                           ;	Write Protection Block 3
  6993                           ;	WRT7 = 0x1, unprogrammed default
  6994   300006                     	org	3145734
  6995   300006  FF                 	db	255
  6996                           
  6997                           ;Config register CONFIG4H @ 0x300007
  6998                           ;	unspecified, using default values
  6999                           ;	Configuration Register Write Protection bit
  7000                           ;	WRTC = 0x1, unprogrammed default
  7001                           ;	Boot Block Write Protection bit
  7002                           ;	WRTB = 0x1, unprogrammed default
  7003                           ;	Data EEPROM Write Protection bit
  7004                           ;	WRTD = 0x1, unprogrammed default
  7005                           ;	Scanner Enable bit
  7006                           ;	SCANE = 0x1, unprogrammed default
  7007                           ;	Low Voltage Programming Enable bit
  7008                           ;	LVP = 0x1, unprogrammed default
  7009   300007                     	org	3145735
  7010   300007  FF                 	db	255
  7011                           
  7012                           ;Config register CONFIG5L @ 0x300008
  7013                           ;	unspecified, using default values
  7014                           ;	UserNVM Program Memory Code Protection bit
  7015                           ;	CP = 0x1, unprogrammed default
  7016                           ;	DataNVM Memory Code Protection bit
  7017                           ;	CPD = 0x1, unprogrammed default
  7018   300008                     	org	3145736
  7019   300008  FF                 	db	255
  7020                           
  7021                           ;Config register CONFIG5H @ 0x300009
  7022                           ;	unspecified, using default values
  7023   300009                     	org	3145737
  7024   300009  FF                 	db	255
  7025                           
  7026                           ;Config register CONFIG6L @ 0x30000A
  7027                           ;	unspecified, using default values
  7028                           ;	Table Read Protection Block 0
  7029                           ;	EBTR0 = 0x1, unprogrammed default
  7030                           ;	Table Read Protection Block 1
  7031                           ;	EBTR1 = 0x1, unprogrammed default
  7032                           ;	Table Read Protection Block 2
  7033                           ;	EBTR2 = 0x1, unprogrammed default
  7034                           ;	Table Read Protection Block 3
  7035                           ;	EBTR3 = 0x1, unprogrammed default
  7036                           ;	Table Read Protection Block 4
  7037                           ;	EBTR4 = 0x1, unprogrammed default
  7038                           ;	Table Read Protection Block 5
  7039                           ;	EBTR5 = 0x1, unprogrammed default
  7040                           ;	Table Read Protection Block 6
  7041                           ;	EBTR6 = 0x1, unprogrammed default
  7042                           ;	Table Read Protection Block 7
  7043                           ;	EBTR7 = 0x1, unprogrammed default
  7044   30000A                     	org	3145738
  7045   30000A  FF                 	db	255
  7046                           
  7047                           ;Config register CONFIG6H @ 0x30000B
  7048                           ;	unspecified, using default values
  7049                           ;	Boot Block Table Read Protection bit
  7050                           ;	EBTRB = 0x1, unprogrammed default
  7051   30000B                     	org	3145739
  7052   30000B  FF                 	db	255
  7053                           tosu	equ	0xFFF
  7054                           tosh	equ	0xFFE
  7055                           tosl	equ	0xFFD
  7056                           stkptr	equ	0xFFC
  7057                           pclatu	equ	0xFFB
  7058                           pclath	equ	0xFFA
  7059                           pcl	equ	0xFF9
  7060                           tblptru	equ	0xFF8
  7061                           tblptrh	equ	0xFF7
  7062                           tblptrl	equ	0xFF6
  7063                           tablat	equ	0xFF5
  7064                           prodh	equ	0xFF4
  7065                           prodl	equ	0xFF3
  7066                           indf0	equ	0xFEF
  7067                           postinc0	equ	0xFEE
  7068                           postdec0	equ	0xFED
  7069                           preinc0	equ	0xFEC
  7070                           plusw0	equ	0xFEB
  7071                           fsr0h	equ	0xFEA
  7072                           fsr0l	equ	0xFE9
  7073                           wreg	equ	0xFE8
  7074                           indf1	equ	0xFE7
  7075                           postinc1	equ	0xFE6
  7076                           postdec1	equ	0xFE5
  7077                           preinc1	equ	0xFE4
  7078                           plusw1	equ	0xFE3
  7079                           fsr1h	equ	0xFE2
  7080                           fsr1l	equ	0xFE1
  7081                           bsr	equ	0xFE0
  7082                           indf2	equ	0xFDF
  7083                           postinc2	equ	0xFDE
  7084                           postdec2	equ	0xFDD
  7085                           preinc2	equ	0xFDC
  7086                           plusw2	equ	0xFDB
  7087                           fsr2h	equ	0xFDA
  7088                           fsr2l	equ	0xFD9
  7089                           status	equ	0xFD8

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         187
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     90      94
    BANK0           160    157     160
    BANK1           256    220     248
    BANK2           256      0     152
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2391$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2338$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2338$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    motor_action@r	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_action@l	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    spin_180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    spin_180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_onesquare@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_onesquare@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_fromcard@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_fromcard@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    S589DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    S589DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    color_processor_hard@calibrated	PTR unsigned int  size(2) Largest target is 64
		 -> main@color_calibrated(BANK1[64]), 

    color_processor_hard@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_processor_easy@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_read@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), main@RGB_calibrated(BANK1[8]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _spin_180->_setMotorPWM
    _sendStringSerial4->_sendCharSerial4
    _motor_action->_left_135
    _motor_action->_left_90
    _motor_action->_reverse_fromcard
    _motor_action->_reverse_onesquare
    _motor_action->_right_135
    _motor_action->_right_90
    _stop->_setMotorPWM
    _right_90->_setMotorPWM
    _right_135->_setMotorPWM
    _reverse_onesquare->_setMotorPWM
    _reverse_fromcard->_setMotorPWM
    _left_90->_setMotorPWM
    _left_135->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _color_read->_color_read_Blue
    _color_read->_color_read_Green
    _color_read->_color_read_Luminosity
    _color_read->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Luminosity->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               385   385      0   66915
                                             88 COMRAM     2     2      0
                                             27 BANK0    130   130      0
                                              0 BANK1    220   220      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
               _color_processor_easy
               _color_processor_hard
                         _color_read
                            _forward
                    _initDCmotorsPWM
                         _initUSART4
                       _motor_action
                  _sendStringSerial4
                        _setMotorPWM
                           _spin_180
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    5722
                                              0 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5219
                                             80 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    4869
                                             62 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3649
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _spin_180                                             8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     219
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _motor_action                                         8     2      6   37858
                                             33 COMRAM     8     2      6
                            _forward
                           _left_135
                            _left_90
                   _reverse_fromcard
                  _reverse_onesquare
                          _right_135
                           _right_90
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 7     3      4    9027
                                             25 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_90                                             8     4      4    3859
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_135                                            8     4      4    3403
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_onesquare                                    8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_fromcard                                     8     4      4    4315
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_90                                              8     4      4    4315
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_135                                             8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _forward                                              6     2      4    3707
                                             25 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    2703
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read                                           4     2      2     768
                                             11 COMRAM     4     2      2
                    _color_read_Blue
                   _color_read_Green
              _color_read_Luminosity
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Luminosity                                7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_processor_hard                                26    22      4     829
                                              0 COMRAM    24    20      4
 ---------------------------------------------------------------------------------
 (1) _color_processor_easy                                10     8      2     346
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_processor_easy
   _color_processor_hard
   _color_read
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Luminosity
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _motor_action
     _forward
     _left_135
       _setMotorPWM
     _left_90
       _setMotorPWM
     _reverse_fromcard
       _setMotorPWM
     _reverse_onesquare
       _setMotorPWM
     _right_135
       _setMotorPWM
     _right_90
       _setMotorPWM
     _stop
       _setMotorPWM
   _sendStringSerial4
     _sendCharSerial4
   _setMotorPWM
   _spin_180
     _setMotorPWM
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
   _stop

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      60        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      98       9       59.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100     DC      F8       7       96.9%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9D      A0       5      100.0%
BITBIGSFRllllhh     91      0       0      40        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5A      5E       1      100.0%
BITBIGSFRllllll     32      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      49        0.0%
BITBIGSFRllllll     26      0       0      58        0.0%
BITBIGSFRllllhl     20      0       0      43        0.0%
BITBIGSFRhhlhhh     1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      35        0.0%
BITBIGSFRhhlhl      13      0       0      34        0.0%
BITBIGSFRhllh       11      0       0      37        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      44        0.0%
BITBIGSFRllllhh      8      0       0      41        0.0%
BITBIGSFRllllll      7      0       0      54        0.0%
BITBIGSFRllllll      7      0       0      52        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRllllll      6      0       0      48        0.0%
BITBIGSFRllllll      5      0       0      47        0.0%
BITBIGSFRhlll        5      0       0      38        0.0%
BITBIGSFRllllll      3      0       0      46        0.0%
BITBIGSFRllh         2      0       0      39        0.0%
BITBIGSFRllllll      1      0       0      50        0.0%
BITBIGSFRllllll      1      0       0      51        0.0%
BITBIGSFRllllll      1      0       0      55        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      56        0.0%
BITBIGSFRllllhl      1      0       0      42        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     28E      59        0.0%
DATA                 0      0     28E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Dec 11 16:37:03 2022

                 _color_read_Red 27A6                  _color_read_Blue 2896  
                             l33 2700                               l42 27F4  
                             l51 20A2                               l36 2AE6  
                             l45 2894                               l70 16A6  
                             l39 2844                               l64 1588  
                             l48 28E4                               l58 1FFC  
                             l66 15EA                               l68 164C  
                             l98 2A78                     ___awdiv@sign 000C  
            ___wmul@multiplicand 0003                 _color_read_Green 2846  
              ??_Interrupts_init 0001                              l101 2A7A  
                            l110 2B68                              l104 2AA0  
                            l113 2B72                              l107 2B7C  
                            l116 2B5E                              l301 21EA  
                            l119 29AC                              l311 232E  
                            l306 228C                              l331 1244  
                            l316 2514                              l271 187A  
                            l264 296A                              l281 262C  
                            l329 11B4                              l441 2B3C  
                            l450 2AC6                              l291 23D0  
                            l276 25A2                              l429 2B24  
                            l286 2472                              l438 2B28  
                            l447 2A4E                              l296 2146  
                            l377 2B52                              l388 2B06  
                            l564 1A02                              l681 1F3E  
                            l577 1B66                motor_action@color 0022  
                            u900 188E                              u901 188A  
                            u910 18C0                              u911 18BC  
                            u921 18EA                              u930 190E  
                            u850 1DC4                              u931 190A  
                            u851 1DC0                              u940 1938  
                            u860 1DD6                              u941 1934  
                            u861 1DD2                              u950 1978  
                            u870 1DFE                              u951 1974  
                            u871 1DFA                              u960 19C2  
                            u880 1E34                              u961 19BE  
                            u881 1E30                              u970 1A16  
                            u890 2928                              u971 1A12  
                            u891 2924                              u980 1A48  
                            u981 1A44                              u990 1A86  
                            u991 1A82                              _abs 29AE  
                            _pad 262E                              wreg 000FE8  
                           ?_abs 0013                             l1205 1E7A  
                           l1213 2928                             l1150 2650  
                           l1216 2B7E                             l1128 2752  
                           l1161 12DA                             l1154 26A6  
                           l1162 1320                             l3020 0FF0  
                           l3004 0F70                             l3100 2276  
                           l2300 2904                             l1180 1CC6  
                           l1173 14C2                             l3030 1070  
                           l3022 1008                             l3014 0F9C  
                           l2310 18AE                             l1190 29E4  
                           l2302 2908                             l3110 1CE0  
                           l3102 1CC8                             l1159 12D2  
                           l3040 110C                             l3032 10B4  
                           l3024 1030                             l3016 0FC4  
                           l2320 18F0                             l2312 18B2  
                           l2304 187C                             l2400 29C8  
                           l3120 1CF2                             l3112 1CE4  
                           l3104 1CCC                             l1193 29EC  
                           l2402 2A7A                             l3042 1134  
                           l3034 10DC                             l3026 1048  
                           l3018 0FDC                             l2330 194A  
                           l2322 190E                             l2314 18C0  
                           l2306 1880                             l1186 27A4  
                           l3130 1D12                             l3122 1CFA  
                           l3114 1CE8                             l3106 1CD8  
                           l2404 2A8A                             l2420 1E9A  
                           l2412 1E7C                             l3044 114C  
                           l3036 10F4                             l3028 105C  
                           l3052 11E0                             l2332 1978  
                           l2324 1916                             l2340 19B2  
                           l2316 18E0                             l2308 188E  
                           l2500 148C                             l3060 2714  
                           l3140 1D4A                             l3132 1D26  
                           l3124 1D02                             l3116 1CE8  
                           l3108 1CDC                             l2510 2B78  
                           l2430 1ECE                             l2422 1EA8  
                           l2414 1E80                             l2406 2AA2  
                           l3046 1160                             l3070 2A20  
                           l2342 19C2                             l2334 1998  
                           l2326 192A                             l2318 18E4  
                           l2350 1A08                             l2502 1492  
                           l3062 271C                             l3150 1D92  
                           l3142 1D4A                             l3134 1D2A  
                           l3126 1D06                             l3118 1CEE  
                           l2512 2B56                             l2520 2B60  
                           l2440 1F08                             l2432 1ED6  
                           l2424 1EB0                             l2416 1E8E  
                           l2408 2ABE                             l3048 1174  
                           l3072 2A24                             l3080 220C  
                           l2344 19E2                             l2336 199A  
                           l2328 1938                             l2360 1A68  
                           l2352 1A16                             l2504 14A2  
                           l3064 2724                             l3144 1D56  
                           l3136 1D32                             l3128 1D0E  
                           l2514 2B5A                             l2530 2982  
                           l2522 2B64                             l2610 288C  
                           l2602 27A6                             l2450 1F2E  
                           l2442 1F10                             l2434 1EDE  
                           l2426 1EB4                             l2418 1E96  
                           l3074 2A32                             l3090 222E  
                           l2338 19AC                             l2370 1ADE  
                           l2362 1A86                             l2354 1A36  
                           l2290 1DFE                             l2282 1DB2  
                           l3066 2740                             l3058 2702  
                           l3146 1D62                             l3138 1D3E  
                           l2508 2B74                             l2516 2B6A  
                           l2532 29A8                             l2524 296E  
                           l2604 27EC                             l2452 1F36  
                           l2444 1F12                             l2436 1EEC  
                           l2428 1EBC                             l2540 16C4  
                           l2700 239C                             l2620 2516  
                           l3076 2A36                             l3092 223A  
                           l2380 1B46                             l2372 1AFE  
                           l2364 1A8E                             l2356 1A3A  
                           l2348 1A04                             l2292 1E34  
                           l2284 1DC4                             l2460 127A  
                           l3148 1D7E                             l2518 2B6E  
                           l2534 29AA                             l2526 2972  
                           l2614 2896                             l2446 1F18  
                           l2438 1EF2                             l2550 1812  
                           l2542 1726                             l2702 23B8  
                           l2630 2556                             l2622 2536  
                           l3094 2246                             l3086 2214  
                           l3078 21EC                             l2374 1B10  
                           l2366 1AA2                             l2358 1A48  
                           l2286 1DD6                             l2390 265C  
                           l2470 12F2                             l2462 128A  
                           l2528 297A                             l2616 28DC  
                           l2608 2846                             l2448 1F1E  
                           l2544 176C                             l2640 25A4  
                           l2720 20FE                             l2712 20CC  
                           l2704 20A4                             l2632 2562  
                           l3336 11F6                             l2800 2B28  
                           l3096 224E                             l3088 2220  
                           l2368 1AB0                             l2376 1B16  
                           l2288 1DE0                             l2296 28E6  
                           l2392 2670                             l2384 262E  
                           l2480 1328                             l2472 12F8  
                           l2464 12AA                             l2456 1246  
                           l2560 1BB2                             l2552 1B68  
                           l2546 178C                             l2538 16A8  
                           l2650 25E4                             l2642 25C4  
                           l2730 2168                             l2722 2106  
                           l2714 20D8                             l2706 20C4  
                           l2634 256E                             l2802 2B38  
                           l3098 225A                             l2378 1B26  
                           l2298 28F2                             l2394 2674  
                           l2386 263C                             l2490 13C6  
                           l2482 1332                             l2474 1308  
                           l2466 12C6                             l2458 1266  
                           l2562 1BC2                             l2554 1B90  
                           l2810 279C                             l2820 26C6  
                           l2900 153C                             l2548 17A8  
                           l2652 25F0                             l2740 218A  
                           l2660 23D2                             l2724 2112  
                           l2716 20E6                             l2636 257C  
                           l2628 253E                             l2396 2692  
                           l2388 2648                             l2484 1338  
                           l2492 142A                             l2476 1314  
                           l2468 12E2                             l2572 1C88  
                           l2564 1BE2                             l2556 1B9E  
                           l2804 2754                             l2590 2A64  
                           l2582 2A50                             l2830 26E0  
                           l2822 26D0                             l2814 26A8  
                           l2910 15C4                             l2902 1540  
                           l2654 25FC                             l2750 21D2  
                           l2742 2196                             l2670 2412  
                           l2662 23F2                             l2726 212E  
                           l2718 20F2                             l2638 2588  
                           l2398 29AE                             l2494 1444  
                           l2486 13BA                             l2478 131C  
                           l2566 1C02                             l2558 1BAC  
                           l2806 2760                             l2592 2A66  
                           l2584 2A5A                             l2840 26EA  
                           l2832 26E2                             l2824 26DA  
                           l2816 26AC                             l2920 1672  
                           l2912 15E6                             l2904 1562  
                           l2656 2604                             l2648 25CC  
                           l2744 21A2                             l2736 2170  
                           l2728 2148                             l2680 245A  
                           l2672 241E                             l2760 22B6  
                           l2752 228E                             l2496 1462  
                           l2488 13C0                             l2568 1C58  
                           l2576 1C9A                             l2808 277C  
                           l2586 2A60                             l2594 2ACA  
                           l2850 26F4                             l2842 26EC  
                           l2834 26E4                             l2826 26DC  
                           l2818 26B6                             l2922 1682  
                           l2930 169E                             l2914 1604  
                           l2906 1584                             l2658 2610  
                           l2746 21AA                             l2738 217E  
                           l2674 242A                             l2690 2358  
                           l2682 2330                             l2770 22F0  
                           l2762 22C2                             l2754 22AE  
                           l2498 147C                             l2588 2A62  
                           l2852 26F6                             l2844 26EE  
                           l2836 26E6                             l2828 26DE  
                           l2924 1692                             l2916 1626  
                           l2908 15A2                             l2596 27F6  
                           l2860 1FFE                             l2940 293A  
                           l2748 21B6                             l2676 2432  
                           l2668 23FA                             l2692 2370  
                           l2684 2350                             l2772 22FC  
                           l2764 22D0                             l2950 2B3E  
                           l2854 26F8                             l2846 26F0  
                           l2838 26E8                             l2870 1F40  
                           l2918 1648                             l2598 283C  
                           l2862 2012                             l2942 294E  
                           l2790 24C2                             l2678 243E  
                           l2694 237C                             l2774 2318  
                           l2766 22DC                             ?_pad 0011  
                           l2952 2AE8                             l2856 26FC  
                           l2848 26F2                             l2880 1FCA  
                           l2872 1F7C                             l2864 202A  
                           l2944 2952                             l2960 2B08  
                           l2792 24CE                             l2784 249C  
                           l2776 2474                             l2696 2388  
                           l2768 22E8                             l2954 2AF0  
                           l2858 26FE                             l2882 1FE0  
                           l2874 1F92                             l2890 14C4  
                           l2866 205A                             l2946 2966  
                           l2938 292A                             l2970 2B22  
                           l2962 2B12                             l2794 24D6  
                           l2786 24AA                             l2778 2494  
                           l2698 2390                             l2956 2AFA  
                           l2884 1FEC                             l2876 1FA8  
                           l2892 1500                             l2868 2072  
                           l2948 2968                             l2964 2B14  
                           l2796 24E2                             l2788 24B6  
                           l2980 0E6C                             l2972 0E14  
                           l2958 2B04                             l2886 1FF4  
                           l2878 1FB4                             l2966 2B1E  
                           l2798 24FE                             l2990 0F18  
                           l2982 0E80                             l2974 0E18  
                           l2968 2B20                             l2992 0F2C  
                           l2984 0EC4                             l2976 0E40  
                           l2898 1500                             l2986 0EEC  
                           l2978 0E58                             l2988 0F04  
                           STR_2 0E01                             u1000 1AB0  
                           u1001 1AAC                             u1010 1ADE  
                           u1011 1ADA                             u1100 1ECE  
                           u1020 1B26                             u1101 1ECA  
                           u1021 1B22                             u1110 1EEC  
                           u1030 263C                             u1111 1EE8  
                           u1031 2638                             u1120 1F08  
                           u1040 2692                             u1200 1444  
                           u1121 1F04                             u1041 268E  
                           u1201 1440                             u1130 1F2E  
                           u1050 29C8                             u1210 1462  
                           u1131 1F2A                             u1051 29C4  
                           u1211 145E                             u1060 2A8A  
                           u1220 147C                             u1140 1276  
                           u1300 1B90                             u1061 2A86  
                           u1221 1478                             u1141 1270  
                           u1301 1B8C                             u1070 2AA0  
                           u1230 148C                             u1150 1278  
                           u1310 1BE2                             u1071 2A9C  
                           u1231 1488                             u1311 1BDE  
                           u1240 2996                             u1080 1E8E  
                           u1400 24FE                             u1160 128A  
                           u1320 1C02                             u1241 298E  
                           u1081 1E8A                             u1401 24FA  
                           u1161 1286                             u1321 1BFE  
                           u1090 1EA8                             u1330 25A2  
                           u1410 2B38                             u1170 12C6  
                           u1091 1EA4                             u1331 259E  
                           u1411 2B34                             u1171 12C2  
                           u1500 159C                             u1260 16C4  
                           u1340 262C                             u1180 12F2  
                           u1420 279C                             u1261 16C0  
                           u1341 2628                             u1181 12EE  
                           u1421 2798                             u1430 1F92  
                           u1510 15C4                             u1270 17A8  
                           u1350 245A                             u1190 1308  
                           u1431 1F8E                             u1511 15C0  
                           u1271 17A4                             u1351 2456  
                           u1191 1304                             u1440 1FA8  
                           u1600 1682                             u1520 15E6  
                           u1360 23B8                     _BAUD4CONbits 000EE9  
                           u1441 1FA4                             u1601 167E  
                           u1521 15E2                             u1361 23B4  
                           _LATE 000F7D                             u1450 1FCA  
                           u1610 1692                             u1530 15FC  
                           u1258 2998                             u1370 212E  
                           u1451 1FC6                             u1611 168E  
                           u1531 15F6                             u1371 212A  
                           _LATG 000F7F                             u1460 1FE0  
                           u1540 15FE                             u1284 1802  
                           u1380 21D2                             u1620 2A4E  
                           u1461 1FDC                             u1285 17FE  
                           u1381 21CE                             u1621 2A4A  
                           u1550 1626                             u1470 1562  
                           u1294 186C                             u1390 2318  
                           u1630 2276                             u1551 1622  
                           u1471 155E                             u1295 1868  
                           u1391 2314                             u1631 2272  
                           u1560 1648                             u1480 1584  
                           u1561 1644                             u1481 1580  
                           u1641 1D50                             u1570 165E  
                           u1490 159A                             _T2PR 000FBC  
                           u1571 1658                             u1491 1594  
                           u1707 2280                             u1651 1D5C  
                           u1580 1660                             u1717 0E4A  
                           u1590 1672                             u1591 166E  
                           u1807 117E                             u1727 0E8A  
                           u1817 2574                             u1737 0EF6  
                           u1907 21A4                             u1827 2100  
                           u1747 0F36                             u1917 21DC  
                           u1837 2138                             u1757 0FCE  
                           u1927 24D0                             u1847 22EA  
                           u1767 103A                             u1687 1D9C  
                           u1937 2508                             u1857 2322  
                           u1777 107A                             u1697 2248  
                           u1947 25FE                             u1867 238A  
                           u1787 10E6                             u1957 201C  
                           u1877 23C2                             u1797 113E  
                           u1967 204C                             u1887 242C  
                           u1977 207C                             u1897 2464  
                           u1987 26BC                             abs@a 0013  
                           _dbuf 0278                             _main 1CC8  
                           _dtoa 1246                             _prec 00FD  
                           _time 01F2                             pad@i 0018  
                           pad@p 0015                             fsr1h 000FE2  
                           fsr2h 000FDA                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           pad@w 001A                             fsr2l 000FD9  
                           btemp 005F                             _stop 2516  
                           prodh 000FF4                             prodl 000FF3  
                           start 003E           __end_of_color_read_Red 27F6  
                __end_of_HighISR 003E                     ___param_bank 000000  
                          ??_abs 0015                            ??_pad 0017  
       _color_processor_hard$370 000A         _color_processor_hard$372 000B  
       _color_processor_hard$374 000C                  __end_of___aodiv 1A04  
                          ?_main 0001                            ?_dtoa 001C  
                __end_of___aomod 1B68                  __end_of___awdiv 1F40  
        ??_color_read_Luminosity 0007                            ?_stop 001A  
                ___awdiv@divisor 0009                            i2l385 003A  
                ___awdiv@counter 000B                     vfpfcnvrt@fmt 0041  
                          _TMR0H 000FD4                            _TMR0L 000FD3  
                   main@readout2 007B                     main@readout3 0100  
        __end_of_sendCharSerial4 2B3E       __end_of_I2C_2_Master_Start 2B7E  
     __end_of_I2C_2_Master_Write 2B60                  __end_of_left_90 21EC  
                          _flags 00FF                            _fputc 1DB2  
                __end_of_forward 262E                            _fputs 28E6  
                          pad@fp 0011                            _width 01F0  
                          _putch 2B7E                            dtoa@d 001E  
                          dtoa@i 003C                            dtoa@n 0034  
                          dtoa@p 0030                            dtoa@s 003E  
                          dtoa@w 0032                            tablat 000FF5  
                          ttemp5 0060                            ttemp6 0063  
                          ttemp7 0067                            stop@i 001F  
                          status 000FD8                            wtemp8 0060  
                __end_of_sprintf 2754          __end_of_color_read_Blue 28E6  
          _I2C_2_Master_RepStart 2B60                  ?_color_read_Red 0005  
                __initialization 29EE   color_processor_hard@calibrated 0003  
                   __end_of_main 1DB2                     __end_of_dtoa 14C4  
                   __end_of_stop 25A4                           ??_main 0059  
                         ??_dtoa 0026                           ??_stop 001E  
                  __activetblptr 000003                     ?_setMotorPWM 000F  
                         ?_fputc 0001                           ?_fputs 000A  
               ___awdiv@dividend 0007                           ?_putch 0001  
                         _RC0PPS 000E62                           _RC4REG 000EE3  
                         _RE2PPS 000E74                           _RD5PPS 000E6F  
                         _RC7PPS 000E69                           _RD6PPS 000E70  
                         i2l3310 0032                           i2l3302 000A  
                         i2l3312 0036                           i2l3304 001A  
                         i2l3306 0028                           i2l3308 002E  
                      ??_HighISR 0001         __end_of_color_click_init 2702  
                         _RX4PPS 000E15                           _TX4REG 000EE4  
                  ??_Timer0_init 0001        color_processor_easy@color 0003  
                   vfprintf@cfmt 0057                 __end_of_left_135 2516  
                      ??___aodiv 0011                        ??___aomod 0011  
                         ___wmul 2AA2                        ??___awdiv 000B  
                         clear_0 29F4                           clear_1 2A00  
               ___awdiv@quotient 000D                           isa$std 000001  
                         pad@buf 0013                           dtoa@fp 001C  
                      ??_left_90 001E                 __end_of_right_90 2148  
                  main@time_path 0164                           fputc@c 0001  
                         fputs@c 000E                           fputs@i 000F  
                         fputs@s 000A                        ??_forward 001E  
               __end_of_spin_180 228E                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 ?_sendCharSerial4 0001  
                         putch@c 0001                 __end_of_vfprintf 27A6  
                         stop@mL 001A                           stop@mR 001C  
              ??_initDCmotorsPWM 0003                        ??_sprintf 0059  
            reverse_onesquare@mL 001A              reverse_onesquare@mR 001C  
                     __accesstop 0060          __end_of__initialization 2A16  
       __end_of_color_read_Green 2896           ?_I2C_2_Master_RepStart 0001  
                  ___rparam_used 000001                 ?_color_read_Blue 0005  
                _Interrupts_init 2B3E                   __pcstackCOMRAM 0001  
                  color_read@rgb 000C                    __end_of_fputc 1E7C  
                  __end_of_fputs 292A                    __end_of_putch 2B80  
            __end_of_Timer0_init 2B08                          ??_fputc 0005  
                        ??_fputs 000E                          ??_putch 0001  
                     __pbssBANK0 00FD                       __pbssBANK1 01DC  
                     __pbssBANK2 0200           color_processor_hard@cb 0017  
         color_processor_hard@cg 0015           color_processor_hard@cr 0013  
              _color_writetoaddr 2AC8                     _T2CLKCONbits 000FBF  
             ?_color_writetoaddr 0003                          ?___wmul 0001  
                 main@color_path 00DF                      right_135@mL 001A  
                    right_135@mR 001C              ??_color_writetoaddr 0004  
               _reverse_fromcard 23D2    __end_of_color_read_Luminosity 2846  
                        _SP4BRGH 000EE6                          _SP4BRGL 000EE5  
                        _PWM6DCH 000FA3                          _PWM7DCH 000FA0  
                        _SSP2ADD 000ED6                          _SSP2BUF 000ED5  
                      ?_left_135 001A                       _color_read 1FFE  
        __end_of_Interrupts_init 2B54           color_writetoaddr@value 0003  
               ??_color_read_Red 0007                          _HighISR 0008  
      __end_of_color_writetoaddr 2AE8         color_read_Luminosity@tmp 000A  
             _I2C_2_Master_Start 2B74                       _initUSART4 2B08  
             _I2C_2_Master_Write 2B54                        ?_right_90 001A  
                        __Hparam 0000                          __Lparam 0000  
color_processor_hard@condition_b 0009  color_processor_hard@condition_g 0008  
color_processor_hard@condition_r 0007                color_read_Red@tmp 000A  
                    _Timer0_init 2AE8                        ?_spin_180 001A  
        sendStringSerial4@string 0002                          ___aodiv 187C  
                        ___aomod 1A04                          ___awdiv 1E7C  
            ?_I2C_2_Master_Start 0001              ?_I2C_2_Master_Write 0001  
                     _off_period 01F4                        ?_vfprintf 0051  
                   __psmallconst 0E00                          __pcinit 29EE  
                        __ramtop 0E00                          __ptext0 1CC8  
                        __ptext1 2702                          __ptext2 2754  
                        __ptext3 1B68                          __ptext4 1246  
                        __ptext5 262E                          __ptext6 28E6  
                        __ptext7 1DB2                          __ptext8 2B7E  
                        __ptext9 29AE                          _left_90 2148  
                      _T2CONbits 000FBD                          _forward 25A4  
                      _T2HLTbits 000FBE                    ?_motor_action 0022  
                  _RxBufWriteCnt 005E                          _sprintf 2702  
           ??_I2C_2_Master_Start 0002                       ??_left_135 001E  
           ??_I2C_2_Master_Write 0002             end_of_initialization 2A16  
              __end_of_right_135 2330               setMotorPWM@PWMduty 0018  
                        fputc@fp 0003                          fputs@fp 000C  
              ?_color_click_init 0001     __end_of_color_processor_easy 1FFE  
   __end_of_color_processor_hard 16A8                       ??_right_90 001E  
             ??_color_click_init 0005                __end_of_vfpfcnvrt 1CC8  
                     ??_spin_180 001E                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
               vfpfcnvrt@convarg 0047                       main@F14639 025A  
                     main@F14647 023C                       ??_vfprintf 0057  
                _initDCmotorsPWM 292A                        _PORTFbits 000F8E  
                 ??_motor_action 0028                        _TRISCbits 000F83  
                      _TRISDbits 000F84                        _TRISEbits 000F85  
                      _TRISFbits 000F86                        _TRISGbits 000F87  
                      _TRISHbits 000F88               reverse_fromcard@mL 001A  
             reverse_fromcard@mR 001C                      ?_color_read 000C  
       color_writetoaddr@address 0004          ??_I2C_2_Master_RepStart 0002  
               ?_Interrupts_init 0001                       left_135@mL 001A  
                     left_135@mR 001C                     _EUSART4RXbuf 01DC  
                   _EUSART4TXbuf 0200                ?_color_read_Green 0005  
                    ?_initUSART4 0001        sendCharSerial4@charToSend 0001  
                     main@motorL 01D3                       main@motorR 01CA  
             ??_color_read_Green 0007                      vfpfcnvrt@ap 0043  
                    vfpfcnvrt@cp 004F                      vfpfcnvrt@fp 003F  
                 __end_of___wmul 2AC8              start_initialization 29EE  
                    __end_of_abs 29EE                      __end_of_pad 26A8  
                  _TxBufWriteCnt 005C         __end_of_reverse_fromcard 2474  
            color_read_Green@tmp 000A          __end_of_initDCmotorsPWM 296C  
                    vfprintf@fmt 0053                         ??___wmul 0005  
             reverse_onesquare@i 0020                      __pbssCOMRAM 005B  
           _color_processor_easy 1F40             _color_processor_hard 14C4  
                  __pcstackBANK0 0060                    __pcstackBANK1 0100  
               ___aodiv@dividend 0001               main@RGB_calibrated 01C2  
                       ?_HighISR 0001          color_processor_easy@rgb 0001  
        color_processor_hard@rgb 0001            color_processor_easy@a 0007  
          color_processor_easy@b 0009            color_processor_easy@c 0005  
          color_processor_hard@b 0011            color_processor_hard@g 000F  
          color_processor_hard@r 000D                        _dtoa$2419 002E  
           __end_of_motor_action 1246                     ?_Timer0_init 0001  
                      __pintcode 0008                         ?___aodiv 0001  
                       ?___aomod 0001                         ?___awdiv 0007  
               ___aodiv@quotient 0013                       right_135@i 0020  
                     right_90@mL 001A                       right_90@mR 001C  
           I2C_2_Master_Read@ack 0003             I2C_2_Master_Read@tmp 0004  
                       ?_left_90 001A                      __smallconst 0E00  
                       ?_forward 001A                _I2C_2_Master_Idle 2A7A  
          ?_color_processor_easy 0001            ?_color_processor_hard 0001  
               main@RGB_recorded 01C2                _I2C_2_Master_Init 2A50  
              _I2C_2_Master_Read 296C                _I2C_2_Master_Stop 2B6A  
                   _RxBufReadCnt 005D               ?_I2C_2_Master_Idle 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001  
                  ??_setMotorPWM 0011            _color_read_Luminosity 27F6  
             ?_I2C_2_Master_Stop 0001         initDCmotorsPWM@PWMperiod 0001  
                       ?_sprintf 0060                _sendStringSerial4 2A20  
            ??_I2C_2_Master_Idle 0001              ??_I2C_2_Master_Init 0001  
            ??_I2C_2_Master_Read 0002                   ___wmul@product 0005  
            ??_I2C_2_Master_Stop 0002                         _LATCbits 000F7B  
                       _LATDbits 000F7C                         _LATEbits 000F7D  
                       _LATFbits 000F7E                        _on_period 01F6  
                       _LATGbits 000F7F                         _LATHbits 000F80  
                      _right_135 228E                         _IPR0bits 000E1F  
                       _IPR2bits 000E21                         _PIE0bits 000E29  
                       _PIE2bits 000E2B               ?_sendStringSerial4 0002  
                     spin_180@mL 001A                       spin_180@mR 001C  
                       i2u166_40 001A                         i2u166_41 0016  
                       i2u167_40 0028                         i2u167_41 0024  
                       _PIR0bits 000E33                         _PIR2bits 000E35  
                       _PIR4bits 000E37                 ?_initDCmotorsPWM 0001  
              ??_sendCharSerial4 0001                         _SSP2CON2 000EDA  
            ??_sendStringSerial4 0004                         _SSP2STAT 000ED8  
              _reverse_onesquare 2330                        _vfpfcnvrt 1B68  
      __end_of_I2C_2_Master_Idle 2AA2               ?_reverse_onesquare 001A  
      __end_of_I2C_2_Master_Init 2A7A        __end_of_I2C_2_Master_Read 29AE  
              ___wmul@multiplier 0001                reverse_fromcard@i 0020  
      __end_of_I2C_2_Master_Stop 2B74                     setMotorPWM@m 000F  
    I2C_2_Master_Write@data_byte 0002                        left_135@i 0020  
                      left_90@mL 001A                        left_90@mR 001C  
           main@color_calibrated 0182                ??_color_read_Blue 0007  
                   _TxBufReadCnt 005B              ??_reverse_onesquare 001E  
                   ??_color_read 000E        __end_of_sendStringSerial4 2A50  
  __end_of_I2C_2_Master_RepStart 2B6A               color_read_Blue@tmp 000A  
            __end_of_setMotorPWM 187C                       ?_right_135 001A  
                   ??_initUSART4 0001                         __Hrparam 0000  
                     vfprintf@ap 0055                         __Lrparam 0000  
                     vfprintf@fp 0051        __end_of_reverse_onesquare 23D2  
                      forward@mL 001A                        forward@mR 001C  
                     ?_vfpfcnvrt 003F               __end_of_color_read 20A4  
                ___aodiv@divisor 0009                  ___aodiv@counter 0011  
                     _ANSELDbits 000EA7           ??_color_processor_easy 0003  
         ??_color_processor_hard 0005                       _ANSELFbits 000EB4  
                     sprintf@fmt 0062                       _T0CON0bits 000FD5  
                     _T0CON1bits 000FD6           ?_color_read_Luminosity 0005  
             __end_of_initUSART4 2B26                         __ptext10 1A04  
                       __ptext11 187C                         __ptext20 23D2  
                       __ptext12 21EC                         __ptext21 2148  
                       __ptext13 2A20                         __ptext30 27A6  
                       __ptext22 2474                         __ptext14 2B26  
                       __ptext31 27F6                         __ptext23 25A4  
                       __ptext15 0E14                         __ptext40 2B54  
                       __ptext32 2846                         __ptext24 16A8  
                       __ptext16 2516                         __ptext41 2B6A  
                       __ptext33 2896                         __ptext25 2AA2  
                       __ptext17 20A4                         __ptext42 2B74  
                       __ptext34 2B60                         __ptext26 1E7C  
                       __ptext18 228E                         __ptext43 2A7A  
                       __ptext35 296C                         __ptext27 2B08  
                       __ptext19 2330                         __ptext44 2A50  
                       __ptext36 14C4                         __ptext28 292A  
                       __ptext45 2AE8                         __ptext37 1F40  
                       __ptext29 1FFE                         __ptext46 2B3E  
                       __ptext38 26A8                         __ptext39 2AC8  
                      right_90@i 0020                         _left_135 2474  
                   _SSP2CON1bits 000ED9                     _SSP2CON2bits 000EDA  
                       _right_90 20A4                ?_reverse_fromcard 001A  
                      spin_180@i 0020                         _spin_180 21EC  
                       isa$xinst 000000               ??_reverse_fromcard 001E  
                     _RC4STAbits 000EE7                         int$flags 005F  
                  motor_action@l 0024                    motor_action@r 0026  
                       _vfprintf 2754                         left_90@i 0020  
               ___aomod@dividend 0001                       _INTCONbits 000FF2  
                   _motor_action 0E14                         forward@i 001E  
                    _setMotorPWM 16A8                      _PWM6CONbits 000FA4  
                    _PWM7CONbits 000FA1                         intlevel2 0000  
                      sprintf@ap 006E                      ??_right_135 001E  
                ___aomod@divisor 0009                      ??_vfpfcnvrt 0045  
                ___aomod@counter 0011                 _color_click_init 26A8  
                       sprintf@f 0070                         sprintf@s 0060  
                     _SSP2DATPPS 000E1D                       _SSP2CLKPPS 000E1C  
                     _TX4STAbits 000EE8                     ___aodiv@sign 0012  
                _sendCharSerial4 2B26                     ___aomod@sign 0012  
