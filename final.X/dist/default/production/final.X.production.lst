

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Dec 10 02:39:19 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    60                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    61                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    62                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    63   000000                     
    64                           ; Version 2.35
    65                           ; Generated 05/05/2021 GMT
    66                           ; 
    67                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution. Publication is not required when
    81                           ;        this file is used in an embedded application.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC18F67K40 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99   000000                     _TX4REG	set	3812
   100   000000                     _RC4STAbits	set	3815
   101   000000                     _SP4BRGH	set	3814
   102   000000                     _TRISGbits	set	3975
   103   000000                     _TRISEbits	set	3973
   104   000000                     _LATFbits	set	3966
   105   000000                     _TRISFbits	set	3974
   106   000000                     _LATG	set	3967
   107   000000                     _LATE	set	3965
   108   000000                     _SSP2CON2bits	set	3802
   109   000000                     _LATGbits	set	3967
   110   000000                     _LATEbits	set	3965
   111   000000                     _RX4PPS	set	3605
   112   000000                     _SSP2CLKPPS	set	3612
   113   000000                     _SSP2DATPPS	set	3613
   114   000000                     _ANSELDbits	set	3751
   115   000000                     _ANSELFbits	set	3764
   116   000000                     _LATDbits	set	3964
   117   000000                     _LATHbits	set	3968
   118   000000                     _TRISDbits	set	3972
   119   000000                     _TRISHbits	set	3976
   120   000000                     _PORTFbits	set	3982
   121   000000                     _PWM7DCH	set	4000
   122   000000                     _PWM6DCH	set	4003
   123   000000                     _TRISCbits	set	3971
   124   000000                     _SSP2BUF	set	3797
   125   000000                     _SSP2ADD	set	3798
   126   000000                     _SSP2CON1bits	set	3801
   127   000000                     _RC4REG	set	3811
   128   000000                     _SP4BRGL	set	3813
   129   000000                     _TX4STAbits	set	3816
   130   000000                     _BAUD4CONbits	set	3817
   131   000000                     _LATCbits	set	3963
   132   000000                     _SSP2CON2	set	3802
   133   000000                     _SSP2STAT	set	3800
   134   000000                     _PIE0bits	set	3625
   135   000000                     _RC7PPS	set	3689
   136   000000                     _RD5PPS	set	3695
   137   000000                     _RE2PPS	set	3700
   138   000000                     _RD6PPS	set	3696
   139   000000                     _PWM6CONbits	set	4004
   140   000000                     _T2PR	set	4028
   141   000000                     _T2CONbits	set	4029
   142   000000                     _PWM7CONbits	set	4001
   143   000000                     _TMR0L	set	4051
   144   000000                     _TMR0H	set	4052
   145   000000                     _T0CON0bits	set	4053
   146   000000                     _T0CON1bits	set	4054
   147   000000                     _INTCONbits	set	4082
   148   000000                     _T2CLKCONbits	set	4031
   149   000000                     _T2HLTbits	set	4030
   150   000000                     _PIR0bits	set	3635
   151   000000                     _PIR4bits	set	3639
   152   000000                     _RC0PPS	set	3682
   153                           
   154                           	psect	smallconst
   155   000E00                     __psmallconst:
   156                           	callstack 0
   157   000E00  00                 	db	0
   158   000E01                     STR_1:
   159   000E01  25                 	db	37
   160   000E02  64                 	db	100	;'d'
   161   000E03  20                 	db	32
   162   000E04  25                 	db	37
   163   000E05  64                 	db	100	;'d'
   164   000E06  20                 	db	32
   165   000E07  25                 	db	37
   166   000E08  64                 	db	100	;'d'
   167   000E09  20                 	db	32
   168   000E0A  25                 	db	37
   169   000E0B  64                 	db	100	;'d'
   170   000E0C  20                 	db	32
   171   000E0D  0D                 	db	13
   172   000E0E  0A                 	db	10
   173   000E0F  00                 	db	0
   174   000E10  00                 	db	0	; dummy byte at the end
   175   000000                     
   176                           ; #config settings
   177                           
   178                           	psect	cinit
   179   002684                     __pcinit:
   180                           	callstack 0
   181   002684                     start_initialization:
   182                           	callstack 0
   183   002684                     __initialization:
   184                           	callstack 0
   185                           
   186                           ; Clear objects allocated to BANK0 (123 bytes)
   187   002684  EE00  F060         	lfsr	0,__pbssBANK0
   188   002688  0E7B               	movlw	123
   189   00268A                     clear_0:
   190   00268A  6AEE               	clrf	postinc0,c
   191   00268C  06E8               	decf	wreg,f,c
   192   00268E  E1FD               	bnz	clear_0
   193                           
   194                           ; Clear objects allocated to COMRAM (2 bytes)
   195   002690  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   196   002692  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   197   002694                     end_of_initialization:
   198                           	callstack 0
   199   002694                     __end_of__initialization:
   200                           	callstack 0
   201   002694  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   202   002696  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   203   002698  0100               	movlb	0
   204   00269A  EF09  F007         	goto	_main	;jump to C main() function
   205                           
   206                           	psect	bssCOMRAM
   207   00005B                     __pbssCOMRAM:
   208                           	callstack 0
   209   00005B                     _RxBufReadCnt:
   210                           	callstack 0
   211   00005B                     	ds	1
   212   00005C                     _RxBufWriteCnt:
   213                           	callstack 0
   214   00005C                     	ds	1
   215                           
   216                           	psect	bssBANK0
   217   000060                     __pbssBANK0:
   218                           	callstack 0
   219   000060                     _EUSART4TXbuf:
   220                           	callstack 0
   221   000060                     	ds	60
   222   00009C                     _EUSART4RXbuf:
   223                           	callstack 0
   224   00009C                     	ds	20
   225   0000B0                     _width:
   226                           	callstack 0
   227   0000B0                     	ds	2
   228   0000B2                     _prec:
   229                           	callstack 0
   230   0000B2                     	ds	2
   231   0000B4                     _off_period:
   232                           	callstack 0
   233   0000B4                     	ds	2
   234   0000B6                     _on_period:
   235                           	callstack 0
   236   0000B6                     	ds	2
   237   0000B8                     _flags:
   238                           	callstack 0
   239   0000B8                     	ds	1
   240   0000B9                     _TxBufReadCnt:
   241                           	callstack 0
   242   0000B9                     	ds	1
   243   0000BA                     _TxBufWriteCnt:
   244                           	callstack 0
   245   0000BA                     	ds	1
   246   0000BB                     _dbuf:
   247                           	callstack 0
   248   0000BB                     	ds	32
   249                           
   250                           	psect	cstackBANK1
   251   000100                     __pcstackBANK1:
   252                           	callstack 0
   253   000100                     main@readout:
   254                           	callstack 0
   255                           
   256                           ; 50 bytes @ 0x0
   257   000100                     	ds	50
   258   000132                     main@color_storage:
   259                           	callstack 0
   260                           
   261                           ; 30 bytes @ 0x32
   262   000132                     	ds	30
   263   000150                     main@time_storage:
   264                           	callstack 0
   265                           
   266                           ; 30 bytes @ 0x50
   267   000150                     	ds	30
   268   00016E                     main@time_flag:
   269                           	callstack 0
   270                           
   271                           ; 2 bytes @ 0x6E
   272   00016E                     	ds	2
   273   000170                     main@time:
   274                           	callstack 0
   275                           
   276                           ; 2 bytes @ 0x70
   277   000170                     	ds	2
   278   000172                     main@home:
   279                           	callstack 0
   280                           
   281                           ; 2 bytes @ 0x72
   282   000172                     	ds	2
   283   000174                     main@color_flag:
   284                           	callstack 0
   285                           
   286                           ; 2 bytes @ 0x74
   287   000174                     	ds	2
   288   000176                     main@color_name:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0x76
   292   000176                     	ds	2
   293   000178                     main@j:
   294                           	callstack 0
   295                           
   296                           ; 2 bytes @ 0x78
   297   000178                     	ds	2
   298   00017A                     main@k:
   299                           	callstack 0
   300                           
   301                           ; 2 bytes @ 0x7A
   302   00017A                     	ds	2
   303   00017C                     main@RGB_recorded:
   304                           	callstack 0
   305                           
   306                           ; 8 bytes @ 0x7C
   307   00017C                     	ds	8
   308   000184                     main@RGB_calibrated:
   309                           	callstack 0
   310                           
   311                           ; 8 bytes @ 0x84
   312   000184                     	ds	8
   313   00018C                     main@motorL:
   314                           	callstack 0
   315                           
   316                           ; 9 bytes @ 0x8C
   317   00018C                     	ds	9
   318   000195                     main@motorR:
   319                           	callstack 0
   320                           
   321                           ; 9 bytes @ 0x95
   322   000195                     	ds	9
   323                           
   324                           	psect	cstackBANK0
   325   0000DB                     __pcstackBANK0:
   326                           	callstack 0
   327   0000DB                     ?_sprintf:
   328                           	callstack 0
   329   0000DB                     sprintf@s:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0x0
   333   0000DB                     	ds	2
   334   0000DD                     sprintf@fmt:
   335                           	callstack 0
   336                           
   337                           ; 2 bytes @ 0x2
   338   0000DD                     	ds	10
   339   0000E7                     sprintf@ap:
   340                           	callstack 0
   341                           
   342                           ; 2 bytes @ 0xC
   343   0000E7                     	ds	2
   344   0000E9                     sprintf@f:
   345                           	callstack 0
   346                           
   347                           ; 11 bytes @ 0xE
   348   0000E9                     	ds	11
   349   0000F4                     ??_main:
   350                           
   351                           ; 1 bytes @ 0x19
   352   0000F4                     	ds	2
   353                           
   354                           	psect	cstackCOMRAM
   355   000001                     __pcstackCOMRAM:
   356                           	callstack 0
   357   000001                     write16bitTMR0val@tmp:
   358                           	callstack 0
   359                           
   360                           ; 2 bytes @ 0x0
   361   000001                     	ds	2
   362   000003                     ??_I2C_2_Master_Idle:
   363   000003                     ?_color_processor_easy:
   364                           	callstack 0
   365   000003                     ?___wmul:
   366                           	callstack 0
   367   000003                     ?___aodiv:
   368                           	callstack 0
   369   000003                     ?___aomod:
   370                           	callstack 0
   371   000003                     sendCharSerial4@charToSend:
   372                           	callstack 0
   373   000003                     color_processor_easy@rgb:
   374                           	callstack 0
   375   000003                     initDCmotorsPWM@PWMperiod:
   376                           	callstack 0
   377   000003                     ___wmul@multiplier:
   378                           	callstack 0
   379   000003                     fputc@c:
   380                           	callstack 0
   381   000003                     ___aodiv@dividend:
   382                           	callstack 0
   383   000003                     ___aomod@dividend:
   384                           	callstack 0
   385                           
   386                           ; 8 bytes @ 0x2
   387   000003                     	ds	1
   388   000004                     ??_I2C_2_Master_Read:
   389   000004                     I2C_2_Master_Write@data_byte:
   390                           	callstack 0
   391   000004                     sendStringSerial4@string:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x3
   395   000004                     	ds	1
   396   000005                     color_writetoaddr@value:
   397                           	callstack 0
   398   000005                     I2C_2_Master_Read@ack:
   399                           	callstack 0
   400   000005                     color_processor_easy@color:
   401                           	callstack 0
   402   000005                     ___wmul@multiplicand:
   403                           	callstack 0
   404   000005                     fputc@fp:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0x4
   408   000005                     	ds	1
   409   000006                     color_writetoaddr@address:
   410                           	callstack 0
   411   000006                     I2C_2_Master_Read@tmp:
   412                           	callstack 0
   413                           
   414                           ; 1 bytes @ 0x5
   415   000006                     	ds	1
   416   000007                     ??_fputc:
   417   000007                     ??_color_click_init:
   418   000007                     ?_color_read_Luminosity:
   419                           	callstack 0
   420   000007                     ?_color_read_Red:
   421                           	callstack 0
   422   000007                     ?_color_read_Green:
   423                           	callstack 0
   424   000007                     ?_color_read_Blue:
   425                           	callstack 0
   426   000007                     color_processor_easy@c:
   427                           	callstack 0
   428   000007                     ___wmul@product:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0x6
   432   000007                     	ds	2
   433   000009                     ??_color_read_Luminosity:
   434   000009                     ??_color_read_Red:
   435   000009                     ??_color_read_Green:
   436   000009                     ??_color_read_Blue:
   437   000009                     ?___awdiv:
   438                           	callstack 0
   439   000009                     color_processor_easy@a:
   440                           	callstack 0
   441   000009                     ___awdiv@dividend:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x8
   445   000009                     	ds	2
   446   00000B                     color_processor_easy@b:
   447                           	callstack 0
   448   00000B                     ___awdiv@divisor:
   449                           	callstack 0
   450   00000B                     ___aodiv@divisor:
   451                           	callstack 0
   452   00000B                     ___aomod@divisor:
   453                           	callstack 0
   454                           
   455                           ; 8 bytes @ 0xA
   456   00000B                     	ds	1
   457   00000C                     color_read_Luminosity@tmp:
   458                           	callstack 0
   459   00000C                     color_read_Red@tmp:
   460                           	callstack 0
   461   00000C                     color_read_Green@tmp:
   462                           	callstack 0
   463   00000C                     color_read_Blue@tmp:
   464                           	callstack 0
   465   00000C                     fputs@s:
   466                           	callstack 0
   467                           
   468                           ; 2 bytes @ 0xB
   469   00000C                     	ds	1
   470   00000D                     ___awdiv@counter:
   471                           	callstack 0
   472                           
   473                           ; 1 bytes @ 0xC
   474   00000D                     	ds	1
   475   00000E                     ___awdiv@sign:
   476                           	callstack 0
   477   00000E                     color_read@rgb:
   478                           	callstack 0
   479   00000E                     fputs@fp:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0xD
   483   00000E                     	ds	1
   484   00000F                     ___awdiv@quotient:
   485                           	callstack 0
   486                           
   487                           ; 2 bytes @ 0xE
   488   00000F                     	ds	1
   489   000010                     ??_color_read:
   490   000010                     fputs@c:
   491                           	callstack 0
   492                           
   493                           ; 1 bytes @ 0xF
   494   000010                     	ds	1
   495   000011                     setMotorPWM@m:
   496                           	callstack 0
   497   000011                     fputs@i:
   498                           	callstack 0
   499                           
   500                           ; 2 bytes @ 0x10
   501   000011                     	ds	2
   502   000013                     ??_setMotorPWM:
   503   000013                     ___aodiv@counter:
   504                           	callstack 0
   505   000013                     ___aomod@counter:
   506                           	callstack 0
   507   000013                     pad@fp:
   508                           	callstack 0
   509                           
   510                           ; 2 bytes @ 0x12
   511   000013                     	ds	1
   512   000014                     ___aodiv@sign:
   513                           	callstack 0
   514   000014                     ___aomod@sign:
   515                           	callstack 0
   516                           
   517                           ; 1 bytes @ 0x13
   518   000014                     	ds	1
   519   000015                     ?_abs:
   520                           	callstack 0
   521   000015                     pad@buf:
   522                           	callstack 0
   523   000015                     abs@a:
   524                           	callstack 0
   525   000015                     ___aodiv@quotient:
   526                           	callstack 0
   527                           
   528                           ; 8 bytes @ 0x14
   529   000015                     	ds	2
   530   000017                     ??_abs:
   531   000017                     pad@p:
   532                           	callstack 0
   533                           
   534                           ; 2 bytes @ 0x16
   535   000017                     	ds	2
   536   000019                     ??_pad:
   537                           
   538                           ; 1 bytes @ 0x18
   539   000019                     	ds	1
   540   00001A                     setMotorPWM@PWMduty:
   541                           	callstack 0
   542   00001A                     pad@i:
   543                           	callstack 0
   544                           
   545                           ; 2 bytes @ 0x19
   546   00001A                     	ds	2
   547   00001C                     stop@mL:
   548                           	callstack 0
   549   00001C                     reverse@mL:
   550                           	callstack 0
   551   00001C                     right_90@mL:
   552                           	callstack 0
   553   00001C                     left_90@mL:
   554                           	callstack 0
   555   00001C                     spin_180@mL:
   556                           	callstack 0
   557   00001C                     right_135@mL:
   558                           	callstack 0
   559   00001C                     left_135@mL:
   560                           	callstack 0
   561   00001C                     pad@w:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0x1B
   565   00001C                     	ds	2
   566   00001E                     stop@mR:
   567                           	callstack 0
   568   00001E                     reverse@mR:
   569                           	callstack 0
   570   00001E                     right_90@mR:
   571                           	callstack 0
   572   00001E                     left_90@mR:
   573                           	callstack 0
   574   00001E                     spin_180@mR:
   575                           	callstack 0
   576   00001E                     right_135@mR:
   577                           	callstack 0
   578   00001E                     left_135@mR:
   579                           	callstack 0
   580   00001E                     dtoa@fp:
   581                           	callstack 0
   582                           
   583                           ; 2 bytes @ 0x1D
   584   00001E                     	ds	2
   585   000020                     ??_stop:
   586   000020                     ??_reverse:
   587   000020                     ??_right_90:
   588   000020                     ??_left_90:
   589   000020                     ??_spin_180:
   590   000020                     ??_right_135:
   591   000020                     ??_left_135:
   592   000020                     dtoa@d:
   593                           	callstack 0
   594                           
   595                           ; 8 bytes @ 0x1F
   596   000020                     	ds	1
   597   000021                     stop@i:
   598                           	callstack 0
   599                           
   600                           ; 2 bytes @ 0x20
   601   000021                     	ds	1
   602   000022                     reverse@i:
   603                           	callstack 0
   604   000022                     right_90@i:
   605                           	callstack 0
   606   000022                     left_90@i:
   607                           	callstack 0
   608   000022                     spin_180@i:
   609                           	callstack 0
   610   000022                     right_135@i:
   611                           	callstack 0
   612   000022                     left_135@i:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x21
   616   000022                     	ds	2
   617   000024                     motor_action@color:
   618                           	callstack 0
   619                           
   620                           ; 2 bytes @ 0x23
   621   000024                     	ds	2
   622   000026                     motor_action@l:
   623                           	callstack 0
   624                           
   625                           ; 2 bytes @ 0x25
   626   000026                     	ds	2
   627   000028                     ??_dtoa:
   628   000028                     motor_action@r:
   629                           	callstack 0
   630                           
   631                           ; 2 bytes @ 0x27
   632   000028                     	ds	2
   633   00002A                     ??_motor_action:
   634                           
   635                           ; 1 bytes @ 0x29
   636   00002A                     	ds	6
   637   000030                     _dtoa$2238:
   638                           	callstack 0
   639                           
   640                           ; 2 bytes @ 0x2F
   641   000030                     	ds	2
   642   000032                     dtoa@p:
   643                           	callstack 0
   644                           
   645                           ; 2 bytes @ 0x31
   646   000032                     	ds	2
   647   000034                     dtoa@w:
   648                           	callstack 0
   649                           
   650                           ; 2 bytes @ 0x33
   651   000034                     	ds	2
   652   000036                     dtoa@n:
   653                           	callstack 0
   654                           
   655                           ; 8 bytes @ 0x35
   656   000036                     	ds	8
   657   00003E                     dtoa@i:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0x3D
   661   00003E                     	ds	2
   662   000040                     dtoa@s:
   663                           	callstack 0
   664                           
   665                           ; 1 bytes @ 0x3F
   666   000040                     	ds	1
   667   000041                     vfpfcnvrt@fp:
   668                           	callstack 0
   669                           
   670                           ; 2 bytes @ 0x40
   671   000041                     	ds	2
   672   000043                     vfpfcnvrt@fmt:
   673                           	callstack 0
   674                           
   675                           ; 2 bytes @ 0x42
   676   000043                     	ds	2
   677   000045                     vfpfcnvrt@ap:
   678                           	callstack 0
   679                           
   680                           ; 2 bytes @ 0x44
   681   000045                     	ds	2
   682   000047                     ??_vfpfcnvrt:
   683                           
   684                           ; 1 bytes @ 0x46
   685   000047                     	ds	2
   686   000049                     vfpfcnvrt@convarg:
   687                           	callstack 0
   688                           
   689                           ; 8 bytes @ 0x48
   690   000049                     	ds	8
   691   000051                     vfpfcnvrt@cp:
   692                           	callstack 0
   693                           
   694                           ; 2 bytes @ 0x50
   695   000051                     	ds	2
   696   000053                     ?_vfprintf:
   697                           	callstack 0
   698   000053                     vfprintf@fp:
   699                           	callstack 0
   700                           
   701                           ; 2 bytes @ 0x52
   702   000053                     	ds	2
   703   000055                     vfprintf@fmt:
   704                           	callstack 0
   705                           
   706                           ; 2 bytes @ 0x54
   707   000055                     	ds	2
   708   000057                     vfprintf@ap:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0x56
   712   000057                     	ds	2
   713   000059                     vfprintf@cfmt:
   714                           	callstack 0
   715                           
   716                           ; 2 bytes @ 0x58
   717   000059                     	ds	2
   718   00005B                     
   719                           ; 1 bytes @ 0x5A
   720 ;;
   721 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   722 ;;
   723 ;; *************** function _main *****************
   724 ;; Defined at:
   725 ;;		line 20 in file "../main.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;		None
   728 ;; Auto vars:     Size  Location     Type
   729 ;;  k               2  122[BANK1 ] int 
   730 ;;  readout        50    0[BANK1 ] unsigned char [50]
   731 ;;  color_calibr   48    0        unsigned int [24]
   732 ;;  time_storage   30   80[BANK1 ] unsigned int [15]
   733 ;;  color_storag   30   50[BANK1 ] unsigned int [15]
   734 ;;  motorR          9  149[BANK1 ] struct DC_motor
   735 ;;  motorL          9  140[BANK1 ] struct DC_motor
   736 ;;  RGB_calibrat    8  132[BANK1 ] struct RGB_val
   737 ;;  RGB_recorded    8  124[BANK1 ] struct RGB_val
   738 ;;  j               2  120[BANK1 ] int 
   739 ;;  color_name      2  118[BANK1 ] unsigned int 
   740 ;;  color_flag      2  116[BANK1 ] unsigned int 
   741 ;;  home            2  114[BANK1 ] unsigned int 
   742 ;;  time            2  112[BANK1 ] unsigned int 
   743 ;;  time_flag       2  110[BANK1 ] unsigned int 
   744 ;;  PWMcycle        1    0        unsigned char 
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   755 ;;      Locals:         0       0     158       0       0       0       0       0       0       0       0       0       
      +0       0       0
   756 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   757 ;;      Totals:         0       2     158       0       0       0       0       0       0       0       0       0       
      +0       0       0
   758 ;;Total ram usage:      160 bytes
   759 ;; Hardware stack levels required when called: 10
   760 ;; This function calls:
   761 ;;		_I2C_2_Master_Init
   762 ;;		_Interrupts_init
   763 ;;		_Timer0_init
   764 ;;		_color_click_init
   765 ;;		_color_processor_easy
   766 ;;		_color_read
   767 ;;		_initDCmotorsPWM
   768 ;;		_initUSART4
   769 ;;		_motor_action
   770 ;;		_sendStringSerial4
   771 ;;		_setMotorPWM
   772 ;;		_sprintf
   773 ;;		_stop
   774 ;; This function is called by:
   775 ;;		Startup code after reset
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           	psect	text0
   780   000E12                     __ptext0:
   781                           	callstack 0
   782   000E12                     _main:
   783                           	callstack 21
   784   000E12                     
   785                           ;../main.c: 22:     color_click_init();
   786   000E12  EC1C  F011         	call	_color_click_init	;wreg free
   787   000E16                     
   788                           ;../main.c: 23:     initDCmotorsPWM(20);
   789   000E16  0E00               	movlw	0
   790   000E18  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   791   000E1A  0E14               	movlw	20
   792   000E1C  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   793   000E1E  EC5D  F012         	call	_initDCmotorsPWM	;wreg free
   794   000E22                     
   795                           ;../main.c: 24:     Interrupts_init();
   796   000E22  EC61  F013         	call	_Interrupts_init	;wreg free
   797   000E26                     
   798                           ;../main.c: 25:     Timer0_init();
   799   000E26  EC23  F013         	call	_Timer0_init	;wreg free
   800   000E2A                     
   801                           ;../main.c: 26:     I2C_2_Master_Init();
   802   000E2A  ECD7  F012         	call	_I2C_2_Master_Init	;wreg free
   803   000E2E                     
   804                           ;../main.c: 27:     initUSART4();
   805   000E2E  EC33  F013         	call	_initUSART4	;wreg free
   806   000E32                     
   807                           ;../main.c: 32:     motorL.power = 0;
   808   000E32  0E00               	movlw	0
   809   000E34  0101               	movlb	1	; () banked
   810   000E36  6F8C               	movwf	main@motorL& (0+255),b
   811   000E38                     
   812                           ; BSR set to: 1
   813                           ;../main.c: 33:     motorL.direction = 0;
   814   000E38  0E00               	movlw	0
   815   000E3A  6F8D               	movwf	(main@motorL+1)& (0+255),b
   816   000E3C                     
   817                           ; BSR set to: 1
   818                           ;../main.c: 34:     motorL.dutyHighByte = (unsigned char *)(&PWM6DCH);
   819   000E3C  0EA3               	movlw	163
   820   000E3E  6F8E               	movwf	(main@motorL+2)& (0+255),b
   821   000E40  0E0F               	movlw	15
   822   000E42  6F8F               	movwf	(main@motorL+3)& (0+255),b
   823   000E44                     
   824                           ; BSR set to: 1
   825                           ;../main.c: 35:     motorL.dir_LAT = (unsigned char *)(&LATE);
   826   000E44  0E7D               	movlw	125
   827   000E46  6F90               	movwf	(main@motorL+4)& (0+255),b
   828   000E48  0E0F               	movlw	15
   829   000E4A  6F91               	movwf	(main@motorL+5)& (0+255),b
   830   000E4C                     
   831                           ; BSR set to: 1
   832                           ;../main.c: 36:     motorL.dir_pin = 4;
   833   000E4C  0E04               	movlw	4
   834   000E4E  6F92               	movwf	(main@motorL+6)& (0+255),b
   835   000E50                     
   836                           ; BSR set to: 1
   837                           ;../main.c: 37:     motorL.PWMperiod = PWMcycle;
   838   000E50  0E00               	movlw	0
   839   000E52  6F94               	movwf	(main@motorL+8)& (0+255),b
   840   000E54  0EC8               	movlw	200
   841   000E56  6F93               	movwf	(main@motorL+7)& (0+255),b
   842   000E58                     
   843                           ; BSR set to: 1
   844                           ;../main.c: 38:     motorR.power = 0;
   845   000E58  0E00               	movlw	0
   846   000E5A  6F95               	movwf	main@motorR& (0+255),b
   847   000E5C                     
   848                           ; BSR set to: 1
   849                           ;../main.c: 39:     motorR.direction = 0;
   850   000E5C  0E00               	movlw	0
   851   000E5E  6F96               	movwf	(main@motorR+1)& (0+255),b
   852                           
   853                           ;../main.c: 40:     motorR.dutyHighByte = (unsigned char *)(&PWM7DCH);
   854   000E60  0EA0               	movlw	160
   855   000E62  6F97               	movwf	(main@motorR+2)& (0+255),b
   856   000E64  0E0F               	movlw	15
   857   000E66  6F98               	movwf	(main@motorR+3)& (0+255),b
   858                           
   859                           ;../main.c: 41:     motorR.dir_LAT = (unsigned char *)(&LATG);
   860   000E68  0E7F               	movlw	127
   861   000E6A  6F99               	movwf	(main@motorR+4)& (0+255),b
   862   000E6C  0E0F               	movlw	15
   863   000E6E  6F9A               	movwf	(main@motorR+5)& (0+255),b
   864   000E70                     
   865                           ; BSR set to: 1
   866                           ;../main.c: 42:     motorR.dir_pin = 6;
   867   000E70  0E06               	movlw	6
   868   000E72  6F9B               	movwf	(main@motorR+6)& (0+255),b
   869   000E74                     
   870                           ; BSR set to: 1
   871                           ;../main.c: 43:     motorR.PWMperiod = PWMcycle;
   872   000E74  0E00               	movlw	0
   873   000E76  6F9D               	movwf	(main@motorR+8)& (0+255),b
   874   000E78  0EC8               	movlw	200
   875   000E7A  6F9C               	movwf	(main@motorR+7)& (0+255),b
   876   000E7C                     
   877                           ; BSR set to: 1
   878                           ;../main.c: 44:     setMotorPWM(&motorL);
   879   000E7C  0E8C               	movlw	low main@motorL
   880   000E7E  6E11               	movwf	setMotorPWM@m^0,c
   881   000E80  0E01               	movlw	high main@motorL
   882   000E82  6E12               	movwf	(setMotorPWM@m+1)^0,c
   883   000E84  EC93  F009         	call	_setMotorPWM	;wreg free
   884   000E88                     
   885                           ;../main.c: 45:     setMotorPWM(&motorR);
   886   000E88  0E95               	movlw	low main@motorR
   887   000E8A  6E11               	movwf	setMotorPWM@m^0,c
   888   000E8C  0E01               	movlw	high main@motorR
   889   000E8E  6E12               	movwf	(setMotorPWM@m+1)^0,c
   890   000E90  EC93  F009         	call	_setMotorPWM	;wreg free
   891   000E94                     
   892                           ;../main.c: 48:     unsigned int color_flag;;../main.c: 49:     unsigned int color_name;
      +                          ;../main.c: 50:     unsigned int color_storage[15];;../main.c: 51:     struct RGB_val RG
      +                          B_recorded;;../main.c: 53:     unsigned int time_storage[15];;../main.c: 54:     unsigne
      +                          d int time;;../main.c: 55:     unsigned int time_flag;;../main.c: 56:     int j;;../main
      +                          .c: 57:     unsigned int home = 0;
   893   000E94  0E00               	movlw	0
   894   000E96  0101               	movlb	1	; () banked
   895   000E98  6F73               	movwf	(main@home+1)& (0+255),b
   896   000E9A  0E00               	movlw	0
   897   000E9C  6F72               	movwf	main@home& (0+255),b
   898   000E9E                     
   899                           ; BSR set to: 1
   900                           ;../main.c: 59:     unsigned int color_calibrated[24];;../main.c: 60:     struct RGB_val
      +                           RGB_calibrated;;../main.c: 63:     color_read(&RGB_calibrated);
   901   000E9E  0E84               	movlw	low main@RGB_calibrated
   902   000EA0  6E0E               	movwf	color_read@rgb^0,c
   903   000EA2  0E01               	movlw	high main@RGB_calibrated
   904   000EA4  6E0F               	movwf	(color_read@rgb+1)^0,c
   905   000EA6  EC5D  F00E         	call	_color_read	;wreg free
   906   000EAA                     
   907                           ;../main.c: 64:     char readout[50];;../main.c: 65:     sprintf(readout,"%d %d %d %d \r
      +                          \n", RGB_calibrated.L,RGB_calibrated.R,RGB_calibrated.G,RGB_calibrated.B);
   908   000EAA  0E00               	movlw	low main@readout
   909   000EAC  0100               	movlb	0	; () banked
   910   000EAE  6FDB               	movwf	sprintf@s& (0+255),b
   911   000EB0  0E01               	movlw	high main@readout
   912   000EB2  6FDC               	movwf	(sprintf@s+1)& (0+255),b
   913   000EB4  0E01               	movlw	low STR_1
   914   000EB6  6FDD               	movwf	sprintf@fmt& (0+255),b
   915   000EB8  0E0E               	movlw	high STR_1
   916   000EBA  6FDE               	movwf	(sprintf@fmt+1)& (0+255),b
   917   000EBC  C184  F0DF         	movff	main@RGB_calibrated,?_sprintf+4
   918   000EC0  C185  F0E0         	movff	main@RGB_calibrated+1,?_sprintf+5
   919   000EC4  C186  F0E1         	movff	main@RGB_calibrated+2,?_sprintf+6
   920   000EC8  C187  F0E2         	movff	main@RGB_calibrated+3,?_sprintf+7
   921   000ECC  C188  F0E3         	movff	main@RGB_calibrated+4,?_sprintf+8
   922   000ED0  C189  F0E4         	movff	main@RGB_calibrated+5,?_sprintf+9
   923   000ED4  C18A  F0E5         	movff	main@RGB_calibrated+6,?_sprintf+10
   924   000ED8  C18B  F0E6         	movff	main@RGB_calibrated+7,?_sprintf+11
   925   000EDC  EC49  F011         	call	_sprintf	;wreg free
   926   000EE0                     
   927                           ;../main.c: 66:     sendStringSerial4(readout);
   928   000EE0  0E00               	movlw	low main@readout
   929   000EE2  6E04               	movwf	sendStringSerial4@string^0,c
   930   000EE4  0E01               	movlw	high main@readout
   931   000EE6  6E05               	movwf	(sendStringSerial4@string+1)^0,c
   932   000EE8  ECBF  F012         	call	_sendStringSerial4	;wreg free
   933   000EEC                     l2859:
   934                           
   935                           ;../main.c: 77:         if (time_flag==1){
   936   000EEC  0101               	movlb	1	; () banked
   937   000EEE  056E               	decf	main@time_flag& (0+255),w,b
   938   000EF0  116F               	iorwf	(main@time_flag+1)& (0+255),w,b
   939   000EF2  A4D8               	btfss	status,2,c
   940   000EF4  EF7E  F007         	goto	u1561
   941   000EF8  EF80  F007         	goto	u1560
   942   000EFC                     u1561:
   943   000EFC  EF86  F007         	goto	l2865
   944   000F00                     u1560:
   945   000F00                     
   946                           ; BSR set to: 1
   947                           ;../main.c: 78:             time++;
   948   000F00  4B70               	infsnz	main@time& (0+255),f,b
   949   000F02  2B71               	incf	(main@time+1)& (0+255),f,b
   950   000F04                     
   951                           ; BSR set to: 1
   952                           ;../main.c: 79:             time_flag = 0;
   953   000F04  0E00               	movlw	0
   954   000F06  6F6F               	movwf	(main@time_flag+1)& (0+255),b
   955   000F08  0E00               	movlw	0
   956   000F0A  6F6E               	movwf	main@time_flag& (0+255),b
   957   000F0C                     l2865:
   958   000F0C  0E01               	movlw	1
   959   000F0E  A68E               	btfss	142,3,c	;volatile
   960   000F10  0E00               	movlw	0
   961   000F12  A48E               	btfss	142,2,c	;volatile
   962   000F14  0E00               	movlw	0
   963   000F16  B0E8               	btfsc	wreg,0,c
   964   000F18  EF90  F007         	goto	u1571
   965   000F1C  EF95  F007         	goto	u1570
   966   000F20                     u1571:
   967   000F20  0100               	movlb	0	; () banked
   968   000F22  6BF4               	clrf	??_main& (0+255),b
   969   000F24  2BF4               	incf	??_main& (0+255),f,b
   970   000F26  EF97  F007         	goto	u1578
   971   000F2A                     u1570:
   972   000F2A  0100               	movlb	0	; () banked
   973   000F2C  6BF4               	clrf	??_main& (0+255),b
   974   000F2E                     u1578:
   975   000F2E  51F4               	movf	??_main& (0+255),w,b
   976   000F30  A4D8               	btfss	status,2,c
   977   000F32  EF9D  F007         	goto	u1581
   978   000F36  EF9F  F007         	goto	u1580
   979   000F3A                     u1581:
   980   000F3A  EF86  F007         	goto	l2865
   981   000F3E                     u1580:
   982   000F3E                     
   983                           ; BSR set to: 0
   984                           ;../main.c: 84:         if (!PORTFbits.RF2){LATDbits.LATD7 = 1;}
   985   000F3E  B48E               	btfsc	142,2,c	;volatile
   986   000F40  EFA4  F007         	goto	u1591
   987   000F44  EFA6  F007         	goto	u1590
   988   000F48                     u1591:
   989   000F48  EFA9  F007         	goto	l181
   990   000F4C                     u1590:
   991   000F4C                     
   992                           ; BSR set to: 0
   993   000F4C  8E7C               	bsf	124,7,c	;volatile
   994   000F4E  EF33  F008         	goto	l2893
   995   000F52                     l181:
   996                           
   997                           ; BSR set to: 0
   998   000F52  8680               	bsf	128,3,c	;volatile
   999   000F54  EF33  F008         	goto	l2893
  1000   000F58                     l184:
  1001                           
  1002                           ; BSR set to: 1
  1003                           ;../main.c: 89:             if (LATDbits.LATD7){
  1004   000F58  AE7C               	btfss	124,7,c	;volatile
  1005   000F5A  EFB1  F007         	goto	u1601
  1006   000F5E  EFB3  F007         	goto	u1600
  1007   000F62                     u1601:
  1008   000F62  EF1A  F008         	goto	l185
  1009   000F66                     u1600:
  1010   000F66                     
  1011                           ; BSR set to: 1
  1012                           ;../main.c: 90:                 if (color_flag){
  1013   000F66  5174               	movf	main@color_flag& (0+255),w,b
  1014   000F68  1175               	iorwf	(main@color_flag+1)& (0+255),w,b
  1015   000F6A  B4D8               	btfsc	status,2,c
  1016   000F6C  EFBA  F007         	goto	u1611
  1017   000F70  EFBC  F007         	goto	u1610
  1018   000F74                     u1611:
  1019   000F74  EF27  F008         	goto	l2891
  1020   000F78                     u1610:
  1021   000F78                     
  1022                           ; BSR set to: 1
  1023                           ;../main.c: 91:                     stop(&motorL,&motorR);
  1024   000F78  0E8C               	movlw	low main@motorL
  1025   000F7A  6E1C               	movwf	stop@mL^0,c
  1026   000F7C  0E01               	movlw	high main@motorL
  1027   000F7E  6E1D               	movwf	(stop@mL+1)^0,c
  1028   000F80  0E95               	movlw	low main@motorR
  1029   000F82  6E1E               	movwf	stop@mR^0,c
  1030   000F84  0E01               	movlw	high main@motorR
  1031   000F86  6E1F               	movwf	(stop@mR+1)^0,c
  1032   000F88  EC98  F010         	call	_stop	;wreg free
  1033   000F8C                     
  1034                           ;../main.c: 92:                     color_read(&RGB_recorded);
  1035   000F8C  0E7C               	movlw	low main@RGB_recorded
  1036   000F8E  6E0E               	movwf	color_read@rgb^0,c
  1037   000F90  0E01               	movlw	high main@RGB_recorded
  1038   000F92  6E0F               	movwf	(color_read@rgb+1)^0,c
  1039   000F94  EC5D  F00E         	call	_color_read	;wreg free
  1040   000F98                     
  1041                           ;../main.c: 93:                     color_name = color_processor_easy(&RGB_recorded);
  1042   000F98  0E7C               	movlw	low main@RGB_recorded
  1043   000F9A  6E03               	movwf	color_processor_easy@rgb^0,c
  1044   000F9C  0E01               	movlw	high main@RGB_recorded
  1045   000F9E  6E04               	movwf	(color_processor_easy@rgb+1)^0,c
  1046   000FA0  ECFE  F00D         	call	_color_processor_easy	;wreg free
  1047   000FA4  C003  F176         	movff	?_color_processor_easy,main@color_name
  1048   000FA8  C004  F177         	movff	?_color_processor_easy+1,main@color_name+1
  1049   000FAC                     
  1050                           ;../main.c: 94:                     color_storage[j] = color_name;
  1051   000FAC  90D8               	bcf	status,0,c
  1052   000FAE  0101               	movlb	1	; () banked
  1053   000FB0  3578               	rlcf	main@j& (0+255),w,b
  1054   000FB2  6ED9               	movwf	fsr2l,c
  1055   000FB4  3579               	rlcf	(main@j+1)& (0+255),w,b
  1056   000FB6  6EDA               	movwf	fsr2h,c
  1057   000FB8  0E32               	movlw	low main@color_storage
  1058   000FBA  26D9               	addwf	fsr2l,f,c
  1059   000FBC  0E01               	movlw	high main@color_storage
  1060   000FBE  22DA               	addwfc	fsr2h,f,c
  1061   000FC0  C176  FFDE         	movff	main@color_name,postinc2
  1062   000FC4  C177  FFDD         	movff	main@color_name+1,postdec2
  1063   000FC8                     
  1064                           ; BSR set to: 1
  1065                           ;../main.c: 95:                     time_storage[j] = time;
  1066   000FC8  90D8               	bcf	status,0,c
  1067   000FCA  3578               	rlcf	main@j& (0+255),w,b
  1068   000FCC  6ED9               	movwf	fsr2l,c
  1069   000FCE  3579               	rlcf	(main@j+1)& (0+255),w,b
  1070   000FD0  6EDA               	movwf	fsr2h,c
  1071   000FD2  0E50               	movlw	low main@time_storage
  1072   000FD4  26D9               	addwf	fsr2l,f,c
  1073   000FD6  0E01               	movlw	high main@time_storage
  1074   000FD8  22DA               	addwfc	fsr2h,f,c
  1075   000FDA  C170  FFDE         	movff	main@time,postinc2
  1076   000FDE  C171  FFDD         	movff	main@time+1,postdec2
  1077                           
  1078                           ;../main.c: 96:                     motor_action(color_flag,&motorL,&motorR);
  1079   000FE2  C174  F024         	movff	main@color_flag,motor_action@color
  1080   000FE6  C175  F025         	movff	main@color_flag+1,motor_action@color+1
  1081   000FEA  0E8C               	movlw	low main@motorL
  1082   000FEC  6E26               	movwf	motor_action@l^0,c
  1083   000FEE  0E01               	movlw	high main@motorL
  1084   000FF0  6E27               	movwf	(motor_action@l+1)^0,c
  1085   000FF2  0E95               	movlw	low main@motorR
  1086   000FF4  6E28               	movwf	motor_action@r^0,c
  1087   000FF6  0E01               	movlw	high main@motorR
  1088   000FF8  6E29               	movwf	(motor_action@r+1)^0,c
  1089   000FFA  ECA2  F00C         	call	_motor_action	;wreg free
  1090   000FFE                     
  1091                           ;../main.c: 97:                     j++;
  1092   000FFE  0101               	movlb	1	; () banked
  1093   001000  4B78               	infsnz	main@j& (0+255),f,b
  1094   001002  2B79               	incf	(main@j+1)& (0+255),f,b
  1095   001004                     
  1096                           ; BSR set to: 1
  1097                           ;../main.c: 98:                     time = 0;
  1098   001004  0E00               	movlw	0
  1099   001006  6F71               	movwf	(main@time+1)& (0+255),b
  1100   001008  0E00               	movlw	0
  1101   00100A  6F70               	movwf	main@time& (0+255),b
  1102   00100C                     
  1103                           ; BSR set to: 1
  1104                           ;../main.c: 100:                     if (color_name != 8) {
  1105   00100C  0E08               	movlw	8
  1106   00100E  1976               	xorwf	main@color_name& (0+255),w,b
  1107   001010  1177               	iorwf	(main@color_name+1)& (0+255),w,b
  1108   001012  B4D8               	btfsc	status,2,c
  1109   001014  EF0E  F008         	goto	u1621
  1110   001018  EF10  F008         	goto	u1620
  1111   00101C                     u1621:
  1112   00101C  EF27  F008         	goto	l2891
  1113   001020                     u1620:
  1114   001020                     
  1115                           ; BSR set to: 1
  1116                           ;../main.c: 101:                         color_flag = 0;
  1117   001020  0E00               	movlw	0
  1118   001022  6F75               	movwf	(main@color_flag+1)& (0+255),b
  1119   001024  0E00               	movlw	0
  1120   001026  6F74               	movwf	main@color_flag& (0+255),b
  1121                           
  1122                           ;../main.c: 102:                         home = 1;
  1123   001028  0E00               	movlw	0
  1124   00102A  6F73               	movwf	(main@home+1)& (0+255),b
  1125   00102C  0E01               	movlw	1
  1126   00102E  6F72               	movwf	main@home& (0+255),b
  1127   001030  EF27  F008         	goto	l2891
  1128   001034                     l185:
  1129                           
  1130                           ; BSR set to: 1
  1131   001034  A680               	btfss	128,3,c	;volatile
  1132   001036  EF1F  F008         	goto	u1631
  1133   00103A  EF21  F008         	goto	u1630
  1134   00103E                     u1631:
  1135   00103E  EF27  F008         	goto	l2891
  1136   001042                     u1630:
  1137   001042                     
  1138                           ; BSR set to: 1
  1139                           ;../main.c: 108:                 color_read(&RGB_recorded);
  1140   001042  0E7C               	movlw	low main@RGB_recorded
  1141   001044  6E0E               	movwf	color_read@rgb^0,c
  1142   001046  0E01               	movlw	high main@RGB_recorded
  1143   001048  6E0F               	movwf	(color_read@rgb+1)^0,c
  1144   00104A  EC5D  F00E         	call	_color_read	;wreg free
  1145   00104E                     l2891:
  1146                           
  1147                           ;../main.c: 110:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1148   00104E  0E11               	movlw	17
  1149   001050  0100               	movlb	0	; () banked
  1150   001052  6FF5               	movwf	(??_main+1)& (0+255),b
  1151   001054  0E3C               	movlw	60
  1152   001056  6FF4               	movwf	??_main& (0+255),b
  1153   001058  0ECB               	movlw	203
  1154   00105A                     u1667:
  1155   00105A  2EE8               	decfsz	wreg,f,c
  1156   00105C  D7FE               	bra	u1667
  1157   00105E  2FF4               	decfsz	??_main& (0+255),f,b
  1158   001060  D7FC               	bra	u1667
  1159   001062  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  1160   001064  D7FA               	bra	u1667
  1161   001066                     l2893:
  1162                           
  1163                           ;../main.c: 88:         while (!home) {
  1164   001066  0101               	movlb	1	; () banked
  1165   001068  5172               	movf	main@home& (0+255),w,b
  1166   00106A  1173               	iorwf	(main@home+1)& (0+255),w,b
  1167   00106C  B4D8               	btfsc	status,2,c
  1168   00106E  EF3B  F008         	goto	u1641
  1169   001072  EF3D  F008         	goto	u1640
  1170   001076                     u1641:
  1171   001076  EFAC  F007         	goto	l184
  1172   00107A                     u1640:
  1173   00107A                     
  1174                           ; BSR set to: 1
  1175                           ;../main.c: 113:         int k;;../main.c: 114:         for (k=0;k<15;k++){
  1176   00107A  0E00               	movlw	0
  1177   00107C  6F7B               	movwf	(main@k+1)& (0+255),b
  1178   00107E  0E00               	movlw	0
  1179   001080  6F7A               	movwf	main@k& (0+255),b
  1180   001082                     l2901:
  1181                           
  1182                           ; BSR set to: 1
  1183                           ;../main.c: 116:         }
  1184   001082  4B7A               	infsnz	main@k& (0+255),f,b
  1185   001084  2B7B               	incf	(main@k+1)& (0+255),f,b
  1186   001086                     
  1187                           ; BSR set to: 1
  1188   001086  BF7B               	btfsc	(main@k+1)& (0+255),7,b
  1189   001088  EF4F  F008         	goto	u1651
  1190   00108C  517B               	movf	(main@k+1)& (0+255),w,b
  1191   00108E  E109               	bnz	u1650
  1192   001090  0E0F               	movlw	15
  1193   001092  5D7A               	subwf	main@k& (0+255),w,b
  1194   001094  A0D8               	btfss	status,0,c
  1195   001096  EF4F  F008         	goto	u1651
  1196   00109A  EF51  F008         	goto	u1650
  1197   00109E                     u1651:
  1198   00109E  EF41  F008         	goto	l2901
  1199   0010A2                     u1650:
  1200   0010A2  EF76  F007         	goto	l2859
  1201   0010A6  EF2A  F000         	goto	start
  1202   0010AA                     __end_of_main:
  1203                           	callstack 0
  1204                           
  1205 ;; *************** function _stop *****************
  1206 ;; Defined at:
  1207 ;;		line 61 in file "../dc_motor.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  1210 ;;		 -> main@motorL(9), 
  1211 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  1212 ;;		 -> main@motorR(9), 
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;  i               2   32[COMRAM] int 
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  1    wreg      void 
  1217 ;; Registers used:
  1218 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1224 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1225 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1226 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1227 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1228 ;;Total ram usage:        7 bytes
  1229 ;; Hardware stack levels used: 1
  1230 ;; Hardware stack levels required when called: 4
  1231 ;; This function calls:
  1232 ;;		_setMotorPWM
  1233 ;; This function is called by:
  1234 ;;		_main
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238                           	psect	text1
  1239   002130                     __ptext1:
  1240                           	callstack 0
  1241   002130                     _stop:
  1242                           	callstack 26
  1243   002130                     
  1244                           ;../dc_motor.c: 61: void stop(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c: 6
      +                          2: {;../dc_motor.c: 63:     mL->direction = 0;
  1245   002130  EE20 F001          	lfsr	2,1
  1246   002134  501C               	movf	stop@mL^0,w,c
  1247   002136  26D9               	addwf	fsr2l,f,c
  1248   002138  501D               	movf	(stop@mL+1)^0,w,c
  1249   00213A  22DA               	addwfc	fsr2h,f,c
  1250   00213C  0E00               	movlw	0
  1251   00213E  6EDF               	movwf	indf2,c
  1252                           
  1253                           ;../dc_motor.c: 64:     mR->direction = 0;
  1254   002140  EE20 F001          	lfsr	2,1
  1255   002144  501E               	movf	stop@mR^0,w,c
  1256   002146  26D9               	addwf	fsr2l,f,c
  1257   002148  501F               	movf	(stop@mR+1)^0,w,c
  1258   00214A  22DA               	addwfc	fsr2h,f,c
  1259   00214C  0E00               	movlw	0
  1260   00214E  6EDF               	movwf	indf2,c
  1261   002150                     
  1262                           ;../dc_motor.c: 65:     for (int i = 5;i>0;i = i - 1)
  1263   002150  0E00               	movlw	0
  1264   002152  6E22               	movwf	(stop@i+1)^0,c
  1265   002154  0E05               	movlw	5
  1266   002156  6E21               	movwf	stop@i^0,c
  1267   002158                     l2631:
  1268                           
  1269                           ;../dc_motor.c: 66:     {;../dc_motor.c: 67:         mL->power = i;
  1270   002158  C01C  FFD9         	movff	stop@mL,fsr2l
  1271   00215C  C01D  FFDA         	movff	stop@mL+1,fsr2h
  1272   002160  C021  FFDF         	movff	stop@i,indf2
  1273                           
  1274                           ;../dc_motor.c: 68:         mR->power = i;
  1275   002164  C01E  FFD9         	movff	stop@mR,fsr2l
  1276   002168  C01F  FFDA         	movff	stop@mR+1,fsr2h
  1277   00216C  C021  FFDF         	movff	stop@i,indf2
  1278   002170                     
  1279                           ;../dc_motor.c: 69:         setMotorPWM(mL);
  1280   002170  C01C  F011         	movff	stop@mL,setMotorPWM@m
  1281   002174  C01D  F012         	movff	stop@mL+1,setMotorPWM@m+1
  1282   002178  EC93  F009         	call	_setMotorPWM	;wreg free
  1283   00217C                     
  1284                           ;../dc_motor.c: 70:         setMotorPWM(mR);
  1285   00217C  C01E  F011         	movff	stop@mR,setMotorPWM@m
  1286   002180  C01F  F012         	movff	stop@mR+1,setMotorPWM@m+1
  1287   002184  EC93  F009         	call	_setMotorPWM	;wreg free
  1288   002188                     
  1289                           ;../dc_motor.c: 71:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1290   002188  0ED0               	movlw	208
  1291   00218A  6E20               	movwf	??_stop^0,c
  1292   00218C  0ECA               	movlw	202
  1293   00218E                     u1677:
  1294   00218E  2EE8               	decfsz	wreg,f,c
  1295   002190  D7FE               	bra	u1677
  1296   002192  2E20               	decfsz	??_stop^0,f,c
  1297   002194  D7FC               	bra	u1677
  1298   002196                     
  1299                           ;../dc_motor.c: 72:     }
  1300   002196  0EFF               	movlw	255
  1301   002198  2421               	addwf	stop@i^0,w,c
  1302   00219A  6E21               	movwf	stop@i^0,c
  1303   00219C  0EFF               	movlw	255
  1304   00219E  2022               	addwfc	(stop@i+1)^0,w,c
  1305   0021A0  6E22               	movwf	(stop@i+1)^0,c
  1306   0021A2  BE22               	btfsc	(stop@i+1)^0,7,c
  1307   0021A4  EFDE  F010         	goto	u1420
  1308   0021A8  5022               	movf	(stop@i+1)^0,w,c
  1309   0021AA  E106               	bnz	u1421
  1310   0021AC  0421               	decf	stop@i^0,w,c
  1311   0021AE  B0D8               	btfsc	status,0,c
  1312   0021B0  EFDC  F010         	goto	u1421
  1313   0021B4  EFDE  F010         	goto	u1420
  1314   0021B8                     u1421:
  1315   0021B8  EFAC  F010         	goto	l2631
  1316   0021BC                     u1420:
  1317   0021BC  0012               	return		;funcret
  1318   0021BE                     __end_of_stop:
  1319                           	callstack 0
  1320                           
  1321 ;; *************** function _sprintf *****************
  1322 ;; Defined at:
  1323 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  s               2    0[BANK0 ] PTR unsigned char 
  1326 ;;		 -> main@readout(50), 
  1327 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1328 ;;		 -> STR_1(15), 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  f              11   14[BANK0 ] struct _IO_FILE
  1331 ;;  ap              2   12[BANK0 ] PTR void [1]
  1332 ;;		 -> ?_sprintf(2), 
  1333 ;;  ret             2    0        int 
  1334 ;; Return value:  Size  Location     Type
  1335 ;;                  2    0[BANK0 ] int 
  1336 ;; Registers used:
  1337 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1338 ;; Tracked objects:
  1339 ;;		On entry : 0/0
  1340 ;;		On exit  : 0/0
  1341 ;;		Unchanged: 0/0
  1342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1343 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1344 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1346 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1347 ;;Total ram usage:       25 bytes
  1348 ;; Hardware stack levels used: 1
  1349 ;; Hardware stack levels required when called: 9
  1350 ;; This function calls:
  1351 ;;		_vfprintf
  1352 ;; This function is called by:
  1353 ;;		_main
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text2
  1358   002292                     __ptext2:
  1359                           	callstack 0
  1360   002292                     _sprintf:
  1361                           	callstack 21
  1362   002292  0EDF               	movlw	low (?_sprintf+4)
  1363   002294  0100               	movlb	0	; () banked
  1364   002296  6FE7               	movwf	sprintf@ap& (0+255),b
  1365   002298  0E00               	movlw	high (?_sprintf+4)
  1366   00229A  6FE8               	movwf	(sprintf@ap+1)& (0+255),b
  1367   00229C  C0DB  F0E9         	movff	sprintf@s,sprintf@f
  1368   0022A0  C0DC  F0EA         	movff	sprintf@s+1,sprintf@f+1
  1369   0022A4                     
  1370                           ; BSR set to: 0
  1371   0022A4  0E00               	movlw	0
  1372   0022A6  6FED               	movwf	(sprintf@f+4)& (0+255),b
  1373   0022A8  0E00               	movlw	0
  1374   0022AA  6FEC               	movwf	(sprintf@f+3)& (0+255),b
  1375   0022AC                     
  1376                           ; BSR set to: 0
  1377   0022AC  0E00               	movlw	0
  1378   0022AE  6FF3               	movwf	(sprintf@f+10)& (0+255),b
  1379   0022B0  0E00               	movlw	0
  1380   0022B2  6FF2               	movwf	(sprintf@f+9)& (0+255),b
  1381   0022B4                     
  1382                           ; BSR set to: 0
  1383   0022B4  0EE9               	movlw	low sprintf@f
  1384   0022B6  6E53               	movwf	vfprintf@fp^0,c
  1385   0022B8  0E00               	movlw	high sprintf@f
  1386   0022BA  6E54               	movwf	(vfprintf@fp+1)^0,c
  1387   0022BC  C0DD  F055         	movff	sprintf@fmt,vfprintf@fmt
  1388   0022C0  C0DE  F056         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1389   0022C4  0EE7               	movlw	low sprintf@ap
  1390   0022C6  6E57               	movwf	vfprintf@ap^0,c
  1391   0022C8  0E00               	movlw	high sprintf@ap
  1392   0022CA  6E58               	movwf	(vfprintf@ap+1)^0,c
  1393   0022CC  EC72  F011         	call	_vfprintf	;wreg free
  1394   0022D0  0100               	movlb	0	; () banked
  1395   0022D2  51EC               	movf	(sprintf@f+3)& (0+255),w,b
  1396   0022D4  25DB               	addwf	sprintf@s& (0+255),w,b
  1397   0022D6  6ED9               	movwf	fsr2l,c
  1398   0022D8  51ED               	movf	(sprintf@f+4)& (0+255),w,b
  1399   0022DA  21DC               	addwfc	(sprintf@s+1)& (0+255),w,b
  1400   0022DC  6EDA               	movwf	fsr2h,c
  1401   0022DE  0E00               	movlw	0
  1402   0022E0  6EDF               	movwf	indf2,c
  1403   0022E2                     
  1404                           ; BSR set to: 0
  1405   0022E2  0012               	return		;funcret
  1406   0022E4                     __end_of_sprintf:
  1407                           	callstack 0
  1408                           
  1409 ;; *************** function _vfprintf *****************
  1410 ;; Defined at:
  1411 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  fp              2   82[COMRAM] PTR struct _IO_FILE
  1414 ;;		 -> sprintf@f(11), 
  1415 ;;  fmt             2   84[COMRAM] PTR const unsigned char 
  1416 ;;		 -> STR_1(15), 
  1417 ;;  ap              2   86[COMRAM] PTR PTR void 
  1418 ;;		 -> sprintf@ap(2), 
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;  cfmt            2   88[COMRAM] PTR unsigned char 
  1421 ;;		 -> STR_1(15), 
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  2   82[COMRAM] int 
  1424 ;; Registers used:
  1425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1431 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1432 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1434 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1435 ;;Total ram usage:        8 bytes
  1436 ;; Hardware stack levels used: 1
  1437 ;; Hardware stack levels required when called: 8
  1438 ;; This function calls:
  1439 ;;		_vfpfcnvrt
  1440 ;; This function is called by:
  1441 ;;		_sprintf
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text3
  1446   0022E4                     __ptext3:
  1447                           	callstack 0
  1448   0022E4                     _vfprintf:
  1449                           	callstack 21
  1450   0022E4                     
  1451                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  1452   0022E4  C055  F059         	movff	vfprintf@fmt,vfprintf@cfmt
  1453   0022E8  C056  F05A         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1454                           
  1455                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1456   0022EC  EF86  F011         	goto	l2487
  1457   0022F0                     l2485:
  1458                           
  1459                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1460   0022F0  C053  F041         	movff	vfprintf@fp,vfpfcnvrt@fp
  1461   0022F4  C054  F042         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1462   0022F8  0E59               	movlw	low vfprintf@cfmt
  1463   0022FA  6E43               	movwf	vfpfcnvrt@fmt^0,c
  1464   0022FC  0E00               	movlw	high vfprintf@cfmt
  1465   0022FE  6E44               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1466   002300  C057  F045         	movff	vfprintf@ap,vfpfcnvrt@ap
  1467   002304  C058  F046         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1468   002308  ECF3  F00B         	call	_vfpfcnvrt	;wreg free
  1469   00230C                     l2487:
  1470                           
  1471                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1472   00230C  C059  FFF6         	movff	vfprintf@cfmt,tblptrl
  1473   002310  C05A  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1474   002314                     	if	0	;tblptru may be non-zero
  1475   002314                     	endif
  1476   002314                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1477   002314  0E00               	movlw	low (__mediumconst shr (0+16))
  1478   002316  6EF8               	movwf	tblptru,c
  1479   002318                     	endif
  1480   002318  0008               	tblrd		*
  1481   00231A  50F5               	movf	tablat,w,c
  1482   00231C  0900               	iorlw	0
  1483   00231E  A4D8               	btfss	status,2,c
  1484   002320  EF94  F011         	goto	u1361
  1485   002324  EF96  F011         	goto	u1360
  1486   002328                     u1361:
  1487   002328  EF78  F011         	goto	l2485
  1488   00232C                     u1360:
  1489   00232C                     
  1490                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  1491   00232C  0E00               	movlw	0
  1492   00232E  6E54               	movwf	(?_vfprintf+1)^0,c
  1493   002330  0E00               	movlw	0
  1494   002332  6E53               	movwf	?_vfprintf^0,c
  1495   002334  0012               	return		;funcret
  1496   002336                     __end_of_vfprintf:
  1497                           	callstack 0
  1498                           
  1499 ;; *************** function _vfpfcnvrt *****************
  1500 ;; Defined at:
  1501 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;  fp              2   64[COMRAM] PTR struct _IO_FILE
  1504 ;;		 -> sprintf@f(11), 
  1505 ;;  fmt             2   66[COMRAM] PTR PTR unsigned char 
  1506 ;;		 -> vfprintf@cfmt(2), 
  1507 ;;  ap              2   68[COMRAM] PTR PTR void 
  1508 ;;		 -> sprintf@ap(2), 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;  convarg         8   72[COMRAM] struct .
  1511 ;;  cp              2   80[COMRAM] PTR unsigned char 
  1512 ;;		 -> STR_1(15), 
  1513 ;;  i               2    0        int 
  1514 ;;  done            2    0        int 
  1515 ;;  c               1    0        unsigned char 
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  1    wreg      void 
  1518 ;; Registers used:
  1519 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1525 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1526 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1527 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1528 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1529 ;;Total ram usage:       18 bytes
  1530 ;; Hardware stack levels used: 1
  1531 ;; Hardware stack levels required when called: 7
  1532 ;; This function calls:
  1533 ;;		_dtoa
  1534 ;;		_fputc
  1535 ;; This function is called by:
  1536 ;;		_vfprintf
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           	psect	text4
  1541   0017E6                     __ptext4:
  1542                           	callstack 0
  1543   0017E6                     _vfpfcnvrt:
  1544                           	callstack 21
  1545   0017E6                     
  1546                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  1547   0017E6  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1548   0017EA  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1549   0017EE  CFDE FFF6          	movff	postinc2,tblptrl
  1550   0017F2  CFDD FFF7          	movff	postdec2,tblptrh
  1551   0017F6                     	if	0	;tblptru may be non-zero
  1552   0017F6                     	endif
  1553   0017F6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1554   0017F6  0E00               	movlw	low (__mediumconst shr (0+16))
  1555   0017F8  6EF8               	movwf	tblptru,c
  1556   0017FA                     	endif
  1557   0017FA  0008               	tblrd		*
  1558   0017FC  50F5               	movf	tablat,w,c
  1559   0017FE  0A25               	xorlw	37
  1560   001800  A4D8               	btfss	status,2,c
  1561   001802  EF05  F00C         	goto	u1261
  1562   001806  EF07  F00C         	goto	u1260
  1563   00180A                     u1261:
  1564   00180A  EF8B  F00C         	goto	l2293
  1565   00180E                     u1260:
  1566   00180E                     
  1567                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  1568   00180E  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1569   001812  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1570   001816  2ADE               	incf	postinc2,f,c
  1571   001818  0E00               	movlw	0
  1572   00181A  22DD               	addwfc	postdec2,f,c
  1573   00181C                     
  1574                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  1575   00181C  0E00               	movlw	0
  1576   00181E  0100               	movlb	0	; () banked
  1577   001820  6FB1               	movwf	(_width+1)& (0+255),b
  1578   001822  0E00               	movlw	0
  1579   001824  6FB0               	movwf	_width& (0+255),b
  1580   001826  C0B0  F0B8         	movff	_width,_flags
  1581   00182A                     
  1582                           ; BSR set to: 0
  1583                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  1584   00182A  69B2               	setf	_prec& (0+255),b
  1585   00182C  69B3               	setf	(_prec+1)& (0+255),b
  1586   00182E                     
  1587                           ; BSR set to: 0
  1588                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1589   00182E  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1590   001832  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1591   001836  CFDE F051          	movff	postinc2,vfpfcnvrt@cp
  1592   00183A  CFDD F052          	movff	postdec2,vfpfcnvrt@cp+1
  1593   00183E                     
  1594                           ; BSR set to: 0
  1595                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1596   00183E  C051  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1597   001842  C052  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1598   001846                     	if	0	;tblptru may be non-zero
  1599   001846                     	endif
  1600   001846                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1601   001846  0E00               	movlw	low (__mediumconst shr (0+16))
  1602   001848  6EF8               	movwf	tblptru,c
  1603   00184A                     	endif
  1604   00184A  0008               	tblrd		*
  1605   00184C  50F5               	movf	tablat,w,c
  1606   00184E  0A64               	xorlw	100
  1607   001850  B4D8               	btfsc	status,2,c
  1608   001852  EF2D  F00C         	goto	u1271
  1609   001856  EF2F  F00C         	goto	u1270
  1610   00185A                     u1271:
  1611   00185A  EF3F  F00C         	goto	l2283
  1612   00185E                     u1270:
  1613   00185E                     
  1614                           ; BSR set to: 0
  1615   00185E  C051  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1616   001862  C052  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1617   001866                     	if	0	;tblptru may be non-zero
  1618   001866                     	endif
  1619   001866                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1620   001866  0E00               	movlw	low (__mediumconst shr (0+16))
  1621   001868  6EF8               	movwf	tblptru,c
  1622   00186A                     	endif
  1623   00186A  0008               	tblrd		*
  1624   00186C  50F5               	movf	tablat,w,c
  1625   00186E  0A69               	xorlw	105
  1626   001870  A4D8               	btfss	status,2,c
  1627   001872  EF3D  F00C         	goto	u1281
  1628   001876  EF3F  F00C         	goto	u1280
  1629   00187A                     u1281:
  1630   00187A  EF82  F00C         	goto	l2289
  1631   00187E                     u1280:
  1632   00187E                     l2283:
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1636   00187E  C045  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1637   001882  C046  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1638   001886  CFDF F047          	movff	indf2,??_vfpfcnvrt
  1639   00188A  0E02               	movlw	2
  1640   00188C  26DE               	addwf	postinc2,f,c
  1641   00188E  CFDF F048          	movff	indf2,??_vfpfcnvrt+1
  1642   001892  0E00               	movlw	0
  1643   001894  22DD               	addwfc	postdec2,f,c
  1644   001896  C047  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1645   00189A  C048  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1646   00189E  CFDE F049          	movff	postinc2,vfpfcnvrt@convarg
  1647   0018A2  CFDD F04A          	movff	postdec2,vfpfcnvrt@convarg+1
  1648   0018A6  0E00               	movlw	0
  1649   0018A8  BE4A               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1650   0018AA  0EFF               	movlw	-1
  1651   0018AC  6E4B               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1652   0018AE  6E4C               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1653   0018B0  6E4D               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1654   0018B2  6E4E               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1655   0018B4  6E4F               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1656   0018B6  6E50               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1657                           
  1658                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1659   0018B8  0E01               	movlw	1
  1660   0018BA  2451               	addwf	vfpfcnvrt@cp^0,w,c
  1661   0018BC  6E47               	movwf	??_vfpfcnvrt^0,c
  1662   0018BE  0E00               	movlw	0
  1663   0018C0  2052               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1664   0018C2  6E48               	movwf	(??_vfpfcnvrt+1)^0,c
  1665   0018C4  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1666   0018C8  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1667   0018CC  C047  FFDE         	movff	??_vfpfcnvrt,postinc2
  1668   0018D0  C048  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1669   0018D4                     
  1670                           ; BSR set to: 0
  1671                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1672   0018D4  C041  F01E         	movff	vfpfcnvrt@fp,dtoa@fp
  1673   0018D8  C042  F01F         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1674   0018DC  C049  F020         	movff	vfpfcnvrt@convarg,dtoa@d
  1675   0018E0  C04A  F021         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1676   0018E4  C04B  F022         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1677   0018E8  C04C  F023         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1678   0018EC  C04D  F024         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1679   0018F0  C04E  F025         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1680   0018F4  C04F  F026         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1681   0018F8  C050  F027         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1682   0018FC  EC55  F008         	call	_dtoa	;wreg free
  1683   001900  EFA1  F00C         	goto	l1123
  1684   001904                     l2289:
  1685                           
  1686                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1687   001904  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1688   001908  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1689   00190C  2ADE               	incf	postinc2,f,c
  1690   00190E  0E00               	movlw	0
  1691   001910  22DD               	addwfc	postdec2,f,c
  1692   001912  EFA1  F00C         	goto	l1123
  1693   001916                     l2293:
  1694                           
  1695                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1696   001916  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1697   00191A  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1698   00191E  CFDE FFF6          	movff	postinc2,tblptrl
  1699   001922  CFDD FFF7          	movff	postdec2,tblptrh
  1700   001926                     	if	0	;tblptru may be non-zero
  1701   001926                     	endif
  1702   001926                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1703   001926  0E00               	movlw	low (__mediumconst shr (0+16))
  1704   001928  6EF8               	movwf	tblptru,c
  1705   00192A                     	endif
  1706   00192A  0008               	tblrd		*
  1707   00192C  50F5               	movf	tablat,w,c
  1708   00192E  6E03               	movwf	fputc@c^0,c
  1709   001930  6A04               	clrf	(fputc@c+1)^0,c
  1710   001932  C041  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1711   001936  C042  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1712   00193A  EC37  F00D         	call	_fputc	;wreg free
  1713   00193E  EF82  F00C         	goto	l2289
  1714   001942                     l1123:
  1715   001942  0012               	return		;funcret
  1716   001944                     __end_of_vfpfcnvrt:
  1717                           	callstack 0
  1718                           
  1719 ;; *************** function _dtoa *****************
  1720 ;; Defined at:
  1721 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  fp              2   29[COMRAM] PTR struct _IO_FILE
  1724 ;;		 -> sprintf@f(11), 
  1725 ;;  d               8   31[COMRAM] long long 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  n               8   53[COMRAM] long long 
  1728 ;;  i               2   61[COMRAM] int 
  1729 ;;  w               2   51[COMRAM] int 
  1730 ;;  p               2   49[COMRAM] int 
  1731 ;;  s               1   63[COMRAM] unsigned char 
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      void 
  1734 ;; Registers used:
  1735 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1741 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1742 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1743 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1744 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1745 ;;Total ram usage:       35 bytes
  1746 ;; Hardware stack levels used: 1
  1747 ;; Hardware stack levels required when called: 6
  1748 ;; This function calls:
  1749 ;;		___aodiv
  1750 ;;		___aomod
  1751 ;;		_abs
  1752 ;;		_pad
  1753 ;; This function is called by:
  1754 ;;		_vfpfcnvrt
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text5
  1759   0010AA                     __ptext5:
  1760                           	callstack 0
  1761   0010AA                     _dtoa:
  1762                           	callstack 21
  1763   0010AA                     
  1764                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  1765   0010AA  C020  F036         	movff	dtoa@d,dtoa@n
  1766   0010AE  C021  F037         	movff	dtoa@d+1,dtoa@n+1
  1767   0010B2  C022  F038         	movff	dtoa@d+2,dtoa@n+2
  1768   0010B6  C023  F039         	movff	dtoa@d+3,dtoa@n+3
  1769   0010BA  C024  F03A         	movff	dtoa@d+4,dtoa@n+4
  1770   0010BE  C025  F03B         	movff	dtoa@d+5,dtoa@n+5
  1771   0010C2  C026  F03C         	movff	dtoa@d+6,dtoa@n+6
  1772   0010C6  C027  F03D         	movff	dtoa@d+7,dtoa@n+7
  1773   0010CA                     
  1774                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  1775   0010CA  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1776   0010CC  EF6A  F008         	goto	u1101
  1777   0010D0  EF6D  F008         	goto	u1100
  1778   0010D4                     u1101:
  1779   0010D4  0E01               	movlw	1
  1780   0010D6  EF6E  F008         	goto	u1110
  1781   0010DA                     u1100:
  1782   0010DA  0E00               	movlw	0
  1783   0010DC                     u1110:
  1784   0010DC  6E40               	movwf	dtoa@s^0,c
  1785   0010DE                     
  1786                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  1787   0010DE  5040               	movf	dtoa@s^0,w,c
  1788   0010E0  B4D8               	btfsc	status,2,c
  1789   0010E2  EF75  F008         	goto	u1121
  1790   0010E6  EF77  F008         	goto	u1120
  1791   0010EA                     u1121:
  1792   0010EA  EF87  F008         	goto	l2181
  1793   0010EE                     u1120:
  1794   0010EE                     
  1795                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  1796   0010EE  1E3D               	comf	(dtoa@n+7)^0,f,c
  1797   0010F0  1E3C               	comf	(dtoa@n+6)^0,f,c
  1798   0010F2  1E3B               	comf	(dtoa@n+5)^0,f,c
  1799   0010F4  1E3A               	comf	(dtoa@n+4)^0,f,c
  1800   0010F6  1E39               	comf	(dtoa@n+3)^0,f,c
  1801   0010F8  1E38               	comf	(dtoa@n+2)^0,f,c
  1802   0010FA  1E37               	comf	(dtoa@n+1)^0,f,c
  1803   0010FC  6C36               	negf	dtoa@n^0,c
  1804   0010FE  0E00               	movlw	0
  1805   001100  2237               	addwfc	(dtoa@n+1)^0,f,c
  1806   001102  2238               	addwfc	(dtoa@n+2)^0,f,c
  1807   001104  2239               	addwfc	(dtoa@n+3)^0,f,c
  1808   001106  223A               	addwfc	(dtoa@n+4)^0,f,c
  1809   001108  223B               	addwfc	(dtoa@n+5)^0,f,c
  1810   00110A  223C               	addwfc	(dtoa@n+6)^0,f,c
  1811   00110C  223D               	addwfc	(dtoa@n+7)^0,f,c
  1812   00110E                     l2181:
  1813                           
  1814                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  1815   00110E  0100               	movlb	0	; () banked
  1816   001110  BFB3               	btfsc	(_prec+1)& (0+255),7,b
  1817   001112  EF95  F008         	goto	u1130
  1818   001116  51B3               	movf	(_prec+1)& (0+255),w,b
  1819   001118  E106               	bnz	u1131
  1820   00111A  05B2               	decf	_prec& (0+255),w,b
  1821   00111C  B0D8               	btfsc	status,0,c
  1822   00111E  EF93  F008         	goto	u1131
  1823   001122  EF95  F008         	goto	u1130
  1824   001126                     u1131:
  1825   001126  EF9B  F008         	goto	l1102
  1826   00112A                     u1130:
  1827   00112A                     
  1828                           ; BSR set to: 0
  1829   00112A  0E00               	movlw	0
  1830   00112C  6E33               	movwf	(dtoa@p+1)^0,c
  1831   00112E  0E01               	movlw	1
  1832   001130  6E32               	movwf	dtoa@p^0,c
  1833   001132  EF9F  F008         	goto	l1104
  1834   001136                     l1102:
  1835                           
  1836                           ; BSR set to: 0
  1837   001136  C0B2  F032         	movff	_prec,dtoa@p
  1838   00113A  C0B3  F033         	movff	_prec+1,dtoa@p+1
  1839   00113E                     l1104:
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  1843   00113E  C0B0  F034         	movff	_width,dtoa@w
  1844   001142  C0B1  F035         	movff	_width+1,dtoa@w+1
  1845   001146                     
  1846                           ; BSR set to: 0
  1847                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  1848   001146  5040               	movf	dtoa@s^0,w,c
  1849   001148  B4D8               	btfsc	status,2,c
  1850   00114A  EFA9  F008         	goto	u1141
  1851   00114E  EFAB  F008         	goto	u1140
  1852   001152                     u1141:
  1853   001152  EFC2  F008         	goto	l1105
  1854   001156                     u1140:
  1855   001156                     
  1856                           ; BSR set to: 0
  1857                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  1858   001156  0634               	decf	dtoa@w^0,f,c
  1859   001158  A0D8               	btfss	status,0,c
  1860   00115A  0635               	decf	(dtoa@w+1)^0,f,c
  1861   00115C                     
  1862                           ; BSR set to: 0
  1863                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  1864   00115C  5040               	movf	dtoa@s^0,w,c
  1865   00115E  A4D8               	btfss	status,2,c
  1866   001160  EFB4  F008         	goto	u1151
  1867   001164  EFB6  F008         	goto	u1150
  1868   001168                     u1151:
  1869   001168  EFBC  F008         	goto	l2193
  1870   00116C                     u1150:
  1871   00116C                     
  1872                           ; BSR set to: 0
  1873   00116C  0E00               	movlw	0
  1874   00116E  6E31               	movwf	(_dtoa$2238+1)^0,c
  1875   001170  0E2B               	movlw	43
  1876   001172  6E30               	movwf	_dtoa$2238^0,c
  1877   001174  EFC0  F008         	goto	l2195
  1878   001178                     l2193:
  1879                           
  1880                           ; BSR set to: 0
  1881   001178  0E00               	movlw	0
  1882   00117A  6E31               	movwf	(_dtoa$2238+1)^0,c
  1883   00117C  0E2D               	movlw	45
  1884   00117E  6E30               	movwf	_dtoa$2238^0,c
  1885   001180                     l2195:
  1886                           
  1887                           ; BSR set to: 0
  1888   001180  C030  F040         	movff	_dtoa$2238,dtoa@s
  1889   001184                     l1105:
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  1893   001184  0E00               	movlw	0
  1894   001186  6E3F               	movwf	(dtoa@i+1)^0,c
  1895   001188  0E1F               	movlw	31
  1896   00118A  6E3E               	movwf	dtoa@i^0,c
  1897   00118C                     
  1898                           ; BSR set to: 0
  1899                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  1900   00118C  0E00               	movlw	0
  1901   00118E  6FDA               	movwf	(_dbuf+31)& (0+255),b
  1902                           
  1903                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1904   001190  EF46  F009         	goto	l2209
  1905   001194                     l2199:
  1906                           
  1907                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  1908   001194  063E               	decf	dtoa@i^0,f,c
  1909   001196  A0D8               	btfss	status,0,c
  1910   001198  063F               	decf	(dtoa@i+1)^0,f,c
  1911   00119A                     
  1912                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1913   00119A  0EBB               	movlw	low _dbuf
  1914   00119C  243E               	addwf	dtoa@i^0,w,c
  1915   00119E  6ED9               	movwf	fsr2l,c
  1916   0011A0  0E00               	movlw	high _dbuf
  1917   0011A2  203F               	addwfc	(dtoa@i+1)^0,w,c
  1918   0011A4  6EDA               	movwf	fsr2h,c
  1919   0011A6  C036  F003         	movff	dtoa@n,___aomod@dividend
  1920   0011AA  C037  F004         	movff	dtoa@n+1,___aomod@dividend+1
  1921   0011AE  C038  F005         	movff	dtoa@n+2,___aomod@dividend+2
  1922   0011B2  C039  F006         	movff	dtoa@n+3,___aomod@dividend+3
  1923   0011B6  C03A  F007         	movff	dtoa@n+4,___aomod@dividend+4
  1924   0011BA  C03B  F008         	movff	dtoa@n+5,___aomod@dividend+5
  1925   0011BE  C03C  F009         	movff	dtoa@n+6,___aomod@dividend+6
  1926   0011C2  C03D  F00A         	movff	dtoa@n+7,___aomod@dividend+7
  1927   0011C6  0E0A               	movlw	10
  1928   0011C8  6E0B               	movwf	___aomod@divisor^0,c
  1929   0011CA  0E00               	movlw	0
  1930   0011CC  6E0C               	movwf	(___aomod@divisor+1)^0,c
  1931   0011CE  0E00               	movlw	0
  1932   0011D0  6E0D               	movwf	(___aomod@divisor+2)^0,c
  1933   0011D2  0E00               	movlw	0
  1934   0011D4  6E0E               	movwf	(___aomod@divisor+3)^0,c
  1935   0011D6  0E00               	movlw	0
  1936   0011D8  6E0F               	movwf	(___aomod@divisor+4)^0,c
  1937   0011DA  0E00               	movlw	0
  1938   0011DC  6E10               	movwf	(___aomod@divisor+5)^0,c
  1939   0011DE  0E00               	movlw	0
  1940   0011E0  6E11               	movwf	(___aomod@divisor+6)^0,c
  1941   0011E2  0E00               	movlw	0
  1942   0011E4  6E12               	movwf	(___aomod@divisor+7)^0,c
  1943   0011E6  EC41  F00B         	call	___aomod	;wreg free
  1944   0011EA  C003  F028         	movff	?___aomod,??_dtoa
  1945   0011EE  C004  F029         	movff	?___aomod+1,??_dtoa+1
  1946   0011F2  C005  F02A         	movff	?___aomod+2,??_dtoa+2
  1947   0011F6  C006  F02B         	movff	?___aomod+3,??_dtoa+3
  1948   0011FA  C007  F02C         	movff	?___aomod+4,??_dtoa+4
  1949   0011FE  C008  F02D         	movff	?___aomod+5,??_dtoa+5
  1950   001202  C009  F02E         	movff	?___aomod+6,??_dtoa+6
  1951   001206  C00A  F02F         	movff	?___aomod+7,??_dtoa+7
  1952   00120A  C028  F015         	movff	??_dtoa,abs@a
  1953   00120E  C029  F016         	movff	??_dtoa+1,abs@a+1
  1954   001212  EC9F  F012         	call	_abs	;wreg free
  1955   001216  5015               	movf	?_abs^0,w,c
  1956   001218  0F30               	addlw	48
  1957   00121A  6EDF               	movwf	indf2,c
  1958   00121C                     
  1959                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  1960   00121C  0632               	decf	dtoa@p^0,f,c
  1961   00121E  A0D8               	btfss	status,0,c
  1962   001220  0633               	decf	(dtoa@p+1)^0,f,c
  1963   001222                     
  1964                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  1965   001222  0634               	decf	dtoa@w^0,f,c
  1966   001224  A0D8               	btfss	status,0,c
  1967   001226  0635               	decf	(dtoa@w+1)^0,f,c
  1968   001228                     
  1969                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  1970   001228  C036  F003         	movff	dtoa@n,___aodiv@dividend
  1971   00122C  C037  F004         	movff	dtoa@n+1,___aodiv@dividend+1
  1972   001230  C038  F005         	movff	dtoa@n+2,___aodiv@dividend+2
  1973   001234  C039  F006         	movff	dtoa@n+3,___aodiv@dividend+3
  1974   001238  C03A  F007         	movff	dtoa@n+4,___aodiv@dividend+4
  1975   00123C  C03B  F008         	movff	dtoa@n+5,___aodiv@dividend+5
  1976   001240  C03C  F009         	movff	dtoa@n+6,___aodiv@dividend+6
  1977   001244  C03D  F00A         	movff	dtoa@n+7,___aodiv@dividend+7
  1978   001248  0E0A               	movlw	10
  1979   00124A  6E0B               	movwf	___aodiv@divisor^0,c
  1980   00124C  0E00               	movlw	0
  1981   00124E  6E0C               	movwf	(___aodiv@divisor+1)^0,c
  1982   001250  0E00               	movlw	0
  1983   001252  6E0D               	movwf	(___aodiv@divisor+2)^0,c
  1984   001254  0E00               	movlw	0
  1985   001256  6E0E               	movwf	(___aodiv@divisor+3)^0,c
  1986   001258  0E00               	movlw	0
  1987   00125A  6E0F               	movwf	(___aodiv@divisor+4)^0,c
  1988   00125C  0E00               	movlw	0
  1989   00125E  6E10               	movwf	(___aodiv@divisor+5)^0,c
  1990   001260  0E00               	movlw	0
  1991   001262  6E11               	movwf	(___aodiv@divisor+6)^0,c
  1992   001264  0E00               	movlw	0
  1993   001266  6E12               	movwf	(___aodiv@divisor+7)^0,c
  1994   001268  EC7D  F00A         	call	___aodiv	;wreg free
  1995   00126C  C003  F036         	movff	?___aodiv,dtoa@n
  1996   001270  C004  F037         	movff	?___aodiv+1,dtoa@n+1
  1997   001274  C005  F038         	movff	?___aodiv+2,dtoa@n+2
  1998   001278  C006  F039         	movff	?___aodiv+3,dtoa@n+3
  1999   00127C  C007  F03A         	movff	?___aodiv+4,dtoa@n+4
  2000   001280  C008  F03B         	movff	?___aodiv+5,dtoa@n+5
  2001   001284  C009  F03C         	movff	?___aodiv+6,dtoa@n+6
  2002   001288  C00A  F03D         	movff	?___aodiv+7,dtoa@n+7
  2003   00128C                     l2209:
  2004                           
  2005                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2006   00128C  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  2007   00128E  EF51  F009         	goto	u1161
  2008   001292  503F               	movf	(dtoa@i+1)^0,w,c
  2009   001294  E108               	bnz	u1160
  2010   001296  043E               	decf	dtoa@i^0,w,c
  2011   001298  A0D8               	btfss	status,0,c
  2012   00129A  EF51  F009         	goto	u1161
  2013   00129E  EF53  F009         	goto	u1160
  2014   0012A2                     u1161:
  2015   0012A2  EF6F  F009         	goto	l2215
  2016   0012A6                     u1160:
  2017   0012A6  5036               	movf	dtoa@n^0,w,c
  2018   0012A8  1037               	iorwf	(dtoa@n+1)^0,w,c
  2019   0012AA  1038               	iorwf	(dtoa@n+2)^0,w,c
  2020   0012AC  1039               	iorwf	(dtoa@n+3)^0,w,c
  2021   0012AE  103A               	iorwf	(dtoa@n+4)^0,w,c
  2022   0012B0  103B               	iorwf	(dtoa@n+5)^0,w,c
  2023   0012B2  103C               	iorwf	(dtoa@n+6)^0,w,c
  2024   0012B4  103D               	iorwf	(dtoa@n+7)^0,w,c
  2025   0012B6  A4D8               	btfss	status,2,c
  2026   0012B8  EF60  F009         	goto	u1171
  2027   0012BC  EF62  F009         	goto	u1170
  2028   0012C0                     u1171:
  2029   0012C0  EFCA  F008         	goto	l2199
  2030   0012C4                     u1170:
  2031   0012C4  BE33               	btfsc	(dtoa@p+1)^0,7,c
  2032   0012C6  EF6F  F009         	goto	u1180
  2033   0012CA  5033               	movf	(dtoa@p+1)^0,w,c
  2034   0012CC  E106               	bnz	u1181
  2035   0012CE  0432               	decf	dtoa@p^0,w,c
  2036   0012D0  B0D8               	btfsc	status,0,c
  2037   0012D2  EF6D  F009         	goto	u1181
  2038   0012D6  EF6F  F009         	goto	u1180
  2039   0012DA                     u1181:
  2040   0012DA  EFCA  F008         	goto	l2199
  2041   0012DE                     u1180:
  2042   0012DE                     l2215:
  2043                           
  2044                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2045   0012DE  5040               	movf	dtoa@s^0,w,c
  2046   0012E0  B4D8               	btfsc	status,2,c
  2047   0012E2  EF75  F009         	goto	u1191
  2048   0012E6  EF77  F009         	goto	u1190
  2049   0012EA                     u1191:
  2050   0012EA  EF82  F009         	goto	l2221
  2051   0012EE                     u1190:
  2052   0012EE                     
  2053                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2054   0012EE  063E               	decf	dtoa@i^0,f,c
  2055   0012F0  A0D8               	btfss	status,0,c
  2056   0012F2  063F               	decf	(dtoa@i+1)^0,f,c
  2057   0012F4                     
  2058                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2059   0012F4  0EBB               	movlw	low _dbuf
  2060   0012F6  243E               	addwf	dtoa@i^0,w,c
  2061   0012F8  6ED9               	movwf	fsr2l,c
  2062   0012FA  0E00               	movlw	high _dbuf
  2063   0012FC  203F               	addwfc	(dtoa@i+1)^0,w,c
  2064   0012FE  6EDA               	movwf	fsr2h,c
  2065   001300  C040  FFDF         	movff	dtoa@s,indf2
  2066   001304                     l2221:
  2067                           
  2068                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2069   001304  C01E  F013         	movff	dtoa@fp,pad@fp
  2070   001308  C01F  F014         	movff	dtoa@fp+1,pad@fp+1
  2071   00130C  0EBB               	movlw	low _dbuf
  2072   00130E  243E               	addwf	dtoa@i^0,w,c
  2073   001310  6E15               	movwf	pad@buf^0,c
  2074   001312  0E00               	movlw	high _dbuf
  2075   001314  203F               	addwfc	(dtoa@i+1)^0,w,c
  2076   001316  6E16               	movwf	(pad@buf+1)^0,c
  2077   001318  C034  F017         	movff	dtoa@w,pad@p
  2078   00131C  C035  F018         	movff	dtoa@w+1,pad@p+1
  2079   001320  ECDF  F010         	call	_pad	;wreg free
  2080   001324  0012               	return		;funcret
  2081   001326                     __end_of_dtoa:
  2082                           	callstack 0
  2083                           
  2084 ;; *************** function _pad *****************
  2085 ;; Defined at:
  2086 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
  2089 ;;		 -> sprintf@f(11), 
  2090 ;;  buf             2   20[COMRAM] PTR unsigned char 
  2091 ;;		 -> dbuf(32), 
  2092 ;;  p               2   22[COMRAM] int 
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;  w               2   27[COMRAM] int 
  2095 ;;  i               2   25[COMRAM] int 
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  1    wreg      void 
  2098 ;; Registers used:
  2099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2105 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2106 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2107 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2108 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2109 ;;Total ram usage:       11 bytes
  2110 ;; Hardware stack levels used: 1
  2111 ;; Hardware stack levels required when called: 5
  2112 ;; This function calls:
  2113 ;;		_fputc
  2114 ;;		_fputs
  2115 ;; This function is called by:
  2116 ;;		_dtoa
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           	psect	text6
  2121   0021BE                     __ptext6:
  2122                           	callstack 0
  2123   0021BE                     _pad:
  2124                           	callstack 21
  2125   0021BE                     
  2126                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  2127   0021BE  BE18               	btfsc	(pad@p+1)^0,7,c
  2128   0021C0  EFE4  F010         	goto	u991
  2129   0021C4  EFE6  F010         	goto	u990
  2130   0021C8                     u991:
  2131   0021C8  EFEC  F010         	goto	l2105
  2132   0021CC                     u990:
  2133   0021CC  C017  F01C         	movff	pad@p,pad@w
  2134   0021D0  C018  F01D         	movff	pad@p+1,pad@w+1
  2135   0021D4  EFF0  F010         	goto	l1093
  2136   0021D8                     l2105:
  2137   0021D8  0E00               	movlw	0
  2138   0021DA  6E1D               	movwf	(pad@w+1)^0,c
  2139   0021DC  0E00               	movlw	0
  2140   0021DE  6E1C               	movwf	pad@w^0,c
  2141   0021E0                     l1093:
  2142                           
  2143                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  2144   0021E0  0E00               	movlw	0
  2145   0021E2  6E1B               	movwf	(pad@i+1)^0,c
  2146   0021E4  0E00               	movlw	0
  2147   0021E6  6E1A               	movwf	pad@i^0,c
  2148                           
  2149                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2150   0021E8  EF02  F011         	goto	l2111
  2151   0021EC                     l2107:
  2152                           
  2153                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  2154   0021EC  0E00               	movlw	0
  2155   0021EE  6E04               	movwf	(fputc@c+1)^0,c
  2156   0021F0  0E20               	movlw	32
  2157   0021F2  6E03               	movwf	fputc@c^0,c
  2158   0021F4  C013  F005         	movff	pad@fp,fputc@fp
  2159   0021F8  C014  F006         	movff	pad@fp+1,fputc@fp+1
  2160   0021FC  EC37  F00D         	call	_fputc	;wreg free
  2161   002200                     
  2162                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  2163   002200  4A1A               	infsnz	pad@i^0,f,c
  2164   002202  2A1B               	incf	(pad@i+1)^0,f,c
  2165   002204                     l2111:
  2166                           
  2167                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2168   002204  501C               	movf	pad@w^0,w,c
  2169   002206  5C1A               	subwf	pad@i^0,w,c
  2170   002208  501B               	movf	(pad@i+1)^0,w,c
  2171   00220A  0A80               	xorlw	128
  2172   00220C  6E19               	movwf	??_pad^0,c
  2173   00220E  501D               	movf	(pad@w+1)^0,w,c
  2174   002210  0A80               	xorlw	128
  2175   002212  5819               	subwfb	??_pad^0,w,c
  2176   002214  A0D8               	btfss	status,0,c
  2177   002216  EF0F  F011         	goto	u1001
  2178   00221A  EF11  F011         	goto	u1000
  2179   00221E                     u1001:
  2180   00221E  EFF6  F010         	goto	l2107
  2181   002222                     u1000:
  2182   002222                     
  2183                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  2184   002222  C015  F00C         	movff	pad@buf,fputs@s
  2185   002226  C016  F00D         	movff	pad@buf+1,fputs@s+1
  2186   00222A  C013  F00E         	movff	pad@fp,fputs@fp
  2187   00222E  C014  F00F         	movff	pad@fp+1,fputs@fp+1
  2188   002232  EC3B  F012         	call	_fputs	;wreg free
  2189   002236  0012               	return		;funcret
  2190   002238                     __end_of_pad:
  2191                           	callstack 0
  2192                           
  2193 ;; *************** function _fputs *****************
  2194 ;; Defined at:
  2195 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  s               2   11[COMRAM] PTR const unsigned char 
  2198 ;;		 -> dbuf(32), 
  2199 ;;  fp              2   13[COMRAM] PTR struct _IO_FILE
  2200 ;;		 -> sprintf@f(11), 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  i               2   16[COMRAM] int 
  2203 ;;  c               1   15[COMRAM] unsigned char 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  2   11[COMRAM] int 
  2206 ;; Registers used:
  2207 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2208 ;; Tracked objects:
  2209 ;;		On entry : 0/0
  2210 ;;		On exit  : 0/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2213 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2214 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2216 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2217 ;;Total ram usage:        7 bytes
  2218 ;; Hardware stack levels used: 1
  2219 ;; Hardware stack levels required when called: 4
  2220 ;; This function calls:
  2221 ;;		_fputc
  2222 ;; This function is called by:
  2223 ;;		_pad
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text7
  2228   002476                     __ptext7:
  2229                           	callstack 0
  2230   002476                     _fputs:
  2231                           	callstack 21
  2232   002476  0E00               	movlw	0
  2233   002478  6E12               	movwf	(fputs@i+1)^0,c
  2234   00247A  0E00               	movlw	0
  2235   00247C  6E11               	movwf	fputs@i^0,c
  2236   00247E  EF4C  F012         	goto	l2019
  2237   002482                     l2015:
  2238   002482  C010  F003         	movff	fputs@c,fputc@c
  2239   002486  6A04               	clrf	(fputc@c+1)^0,c
  2240   002488  C00E  F005         	movff	fputs@fp,fputc@fp
  2241   00248C  C00F  F006         	movff	fputs@fp+1,fputc@fp+1
  2242   002490  EC37  F00D         	call	_fputc	;wreg free
  2243   002494  4A11               	infsnz	fputs@i^0,f,c
  2244   002496  2A12               	incf	(fputs@i+1)^0,f,c
  2245   002498                     l2019:
  2246   002498  5011               	movf	fputs@i^0,w,c
  2247   00249A  240C               	addwf	fputs@s^0,w,c
  2248   00249C  6ED9               	movwf	fsr2l,c
  2249   00249E  5012               	movf	(fputs@i+1)^0,w,c
  2250   0024A0  200D               	addwfc	(fputs@s+1)^0,w,c
  2251   0024A2  6EDA               	movwf	fsr2h,c
  2252   0024A4  50DF               	movf	indf2,w,c
  2253   0024A6  6E10               	movwf	fputs@c^0,c
  2254   0024A8  5010               	movf	fputs@c^0,w,c
  2255   0024AA  A4D8               	btfss	status,2,c
  2256   0024AC  EF5A  F012         	goto	u851
  2257   0024B0  EF5C  F012         	goto	u850
  2258   0024B4                     u851:
  2259   0024B4  EF41  F012         	goto	l2015
  2260   0024B8                     u850:
  2261   0024B8  0012               	return		;funcret
  2262   0024BA                     __end_of_fputs:
  2263                           	callstack 0
  2264                           
  2265 ;; *************** function _fputc *****************
  2266 ;; Defined at:
  2267 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;  c               2    2[COMRAM] int 
  2270 ;;  fp              2    4[COMRAM] PTR struct _IO_FILE
  2271 ;;		 -> sprintf@f(11), 
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;		None
  2274 ;; Return value:  Size  Location     Type
  2275 ;;                  2    2[COMRAM] int 
  2276 ;; Registers used:
  2277 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2283 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2285 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2286 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2287 ;;Total ram usage:        9 bytes
  2288 ;; Hardware stack levels used: 1
  2289 ;; Hardware stack levels required when called: 3
  2290 ;; This function calls:
  2291 ;;		_putch
  2292 ;; This function is called by:
  2293 ;;		_pad
  2294 ;;		_vfpfcnvrt
  2295 ;;		_fputs
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           	psect	text8
  2300   001A6E                     __ptext8:
  2301                           	callstack 0
  2302   001A6E                     _fputc:
  2303                           	callstack 24
  2304   001A6E  5005               	movf	fputc@fp^0,w,c
  2305   001A70  1006               	iorwf	(fputc@fp+1)^0,w,c
  2306   001A72  B4D8               	btfsc	status,2,c
  2307   001A74  EF3E  F00D         	goto	u811
  2308   001A78  EF40  F00D         	goto	u810
  2309   001A7C                     u811:
  2310   001A7C  EF49  F00D         	goto	l2003
  2311   001A80                     u810:
  2312   001A80  5005               	movf	fputc@fp^0,w,c
  2313   001A82  1006               	iorwf	(fputc@fp+1)^0,w,c
  2314   001A84  A4D8               	btfss	status,2,c
  2315   001A86  EF47  F00D         	goto	u821
  2316   001A8A  EF49  F00D         	goto	u820
  2317   001A8E                     u821:
  2318   001A8E  EF4E  F00D         	goto	l2005
  2319   001A92                     u820:
  2320   001A92                     l2003:
  2321   001A92  5003               	movf	fputc@c^0,w,c
  2322   001A94  EC7B  F013         	call	_putch
  2323   001A98  EF9B  F00D         	goto	l1148
  2324   001A9C                     l2005:
  2325   001A9C  EE20 F009          	lfsr	2,9
  2326   001AA0  5005               	movf	fputc@fp^0,w,c
  2327   001AA2  26D9               	addwf	fsr2l,f,c
  2328   001AA4  5006               	movf	(fputc@fp+1)^0,w,c
  2329   001AA6  22DA               	addwfc	fsr2h,f,c
  2330   001AA8  50DE               	movf	postinc2,w,c
  2331   001AAA  10DE               	iorwf	postinc2,w,c
  2332   001AAC  B4D8               	btfsc	status,2,c
  2333   001AAE  EF5B  F00D         	goto	u831
  2334   001AB2  EF5D  F00D         	goto	u830
  2335   001AB6                     u831:
  2336   001AB6  EF78  F00D         	goto	l2009
  2337   001ABA                     u830:
  2338   001ABA  EE20 F009          	lfsr	2,9
  2339   001ABE  5005               	movf	fputc@fp^0,w,c
  2340   001AC0  26D9               	addwf	fsr2l,f,c
  2341   001AC2  5006               	movf	(fputc@fp+1)^0,w,c
  2342   001AC4  22DA               	addwfc	fsr2h,f,c
  2343   001AC6  EE10 F003          	lfsr	1,3
  2344   001ACA  5005               	movf	fputc@fp^0,w,c
  2345   001ACC  26E1               	addwf	fsr1l,f,c
  2346   001ACE  5006               	movf	(fputc@fp+1)^0,w,c
  2347   001AD0  22E2               	addwfc	fsr1h,f,c
  2348   001AD2  50DE               	movf	postinc2,w,c
  2349   001AD4  5CE6               	subwf	postinc1,w,c
  2350   001AD6  50E6               	movf	postinc1,w,c
  2351   001AD8  0A80               	xorlw	128
  2352   001ADA  6E0B               	movwf	(??_fputc+4)^0,c
  2353   001ADC  50DE               	movf	postinc2,w,c
  2354   001ADE  0A80               	xorlw	128
  2355   001AE0  580B               	subwfb	(??_fputc+4)^0,w,c
  2356   001AE2  B0D8               	btfsc	status,0,c
  2357   001AE4  EF76  F00D         	goto	u841
  2358   001AE8  EF78  F00D         	goto	u840
  2359   001AEC                     u841:
  2360   001AEC  EF9B  F00D         	goto	l1148
  2361   001AF0                     u840:
  2362   001AF0                     l2009:
  2363   001AF0  EE20 F003          	lfsr	2,3
  2364   001AF4  5005               	movf	fputc@fp^0,w,c
  2365   001AF6  26D9               	addwf	fsr2l,f,c
  2366   001AF8  5006               	movf	(fputc@fp+1)^0,w,c
  2367   001AFA  22DA               	addwfc	fsr2h,f,c
  2368   001AFC  CFDE F007          	movff	postinc2,??_fputc
  2369   001B00  CFDD F008          	movff	postdec2,??_fputc+1
  2370   001B04  C005  FFD9         	movff	fputc@fp,fsr2l
  2371   001B08  C006  FFDA         	movff	fputc@fp+1,fsr2h
  2372   001B0C  CFDE F009          	movff	postinc2,??_fputc+2
  2373   001B10  CFDD F00A          	movff	postdec2,??_fputc+3
  2374   001B14  5007               	movf	??_fputc^0,w,c
  2375   001B16  2409               	addwf	(??_fputc+2)^0,w,c
  2376   001B18  6ED9               	movwf	fsr2l,c
  2377   001B1A  5008               	movf	(??_fputc+1)^0,w,c
  2378   001B1C  200A               	addwfc	(??_fputc+3)^0,w,c
  2379   001B1E  6EDA               	movwf	fsr2h,c
  2380   001B20  C003  FFDF         	movff	fputc@c,indf2
  2381   001B24  EE20 F003          	lfsr	2,3
  2382   001B28  5005               	movf	fputc@fp^0,w,c
  2383   001B2A  26D9               	addwf	fsr2l,f,c
  2384   001B2C  5006               	movf	(fputc@fp+1)^0,w,c
  2385   001B2E  22DA               	addwfc	fsr2h,f,c
  2386   001B30  2ADE               	incf	postinc2,f,c
  2387   001B32  0E00               	movlw	0
  2388   001B34  22DD               	addwfc	postdec2,f,c
  2389   001B36                     l1148:
  2390   001B36  0012               	return		;funcret
  2391   001B38                     __end_of_fputc:
  2392                           	callstack 0
  2393                           
  2394 ;; *************** function _putch *****************
  2395 ;; Defined at:
  2396 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  c               1    wreg     unsigned char 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;  c               1    0[COMRAM] unsigned char 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  1    wreg      void 
  2403 ;; Registers used:
  2404 ;;		wreg
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2414 ;;Total ram usage:        0 bytes
  2415 ;; Hardware stack levels used: 1
  2416 ;; Hardware stack levels required when called: 2
  2417 ;; This function calls:
  2418 ;;		Nothing
  2419 ;; This function is called by:
  2420 ;;		_fputc
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text9
  2425   0026F6                     __ptext9:
  2426                           	callstack 0
  2427   0026F6                     _putch:
  2428                           	callstack 24
  2429   0026F6  0012               	return		;funcret
  2430   0026F8                     __end_of_putch:
  2431                           	callstack 0
  2432                           
  2433 ;; *************** function _abs *****************
  2434 ;; Defined at:
  2435 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;  a               2   20[COMRAM] int 
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;		None
  2440 ;; Return value:  Size  Location     Type
  2441 ;;                  2   20[COMRAM] int 
  2442 ;; Registers used:
  2443 ;;		wreg, status,2, status,0
  2444 ;; Tracked objects:
  2445 ;;		On entry : 0/0
  2446 ;;		On exit  : 0/0
  2447 ;;		Unchanged: 0/0
  2448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2449 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2451 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2452 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2453 ;;Total ram usage:        4 bytes
  2454 ;; Hardware stack levels used: 1
  2455 ;; Hardware stack levels required when called: 2
  2456 ;; This function calls:
  2457 ;;		Nothing
  2458 ;; This function is called by:
  2459 ;;		_dtoa
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           	psect	text10
  2464   00253E                     __ptext10:
  2465                           	callstack 0
  2466   00253E                     _abs:
  2467                           	callstack 24
  2468   00253E  BE16               	btfsc	(abs@a+1)^0,7,c
  2469   002540  EFAC  F012         	goto	u1010
  2470   002544  5016               	movf	(abs@a+1)^0,w,c
  2471   002546  E106               	bnz	u1011
  2472   002548  0415               	decf	abs@a^0,w,c
  2473   00254A  B0D8               	btfsc	status,0,c
  2474   00254C  EFAA  F012         	goto	u1011
  2475   002550  EFAC  F012         	goto	u1010
  2476   002554                     u1011:
  2477   002554  EFBA  F012         	goto	l1133
  2478   002558                     u1010:
  2479   002558  C015  F017         	movff	abs@a,??_abs
  2480   00255C  C016  F018         	movff	abs@a+1,??_abs+1
  2481   002560  1E17               	comf	??_abs^0,f,c
  2482   002562  1E18               	comf	(??_abs+1)^0,f,c
  2483   002564  4A17               	infsnz	??_abs^0,f,c
  2484   002566  2A18               	incf	(??_abs+1)^0,f,c
  2485   002568  C017  F015         	movff	??_abs,?_abs
  2486   00256C  C018  F016         	movff	??_abs+1,?_abs+1
  2487   002570  EFBE  F012         	goto	l1136
  2488   002574                     l1133:
  2489   002574  C015  F015         	movff	abs@a,?_abs
  2490   002578  C016  F016         	movff	abs@a+1,?_abs+1
  2491   00257C                     l1136:
  2492   00257C  0012               	return		;funcret
  2493   00257E                     __end_of_abs:
  2494                           	callstack 0
  2495                           
  2496 ;; *************** function ___aomod *****************
  2497 ;; Defined at:
  2498 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  dividend        8    2[COMRAM] long long 
  2501 ;;  divisor         8   10[COMRAM] long long 
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;  sign            1   19[COMRAM] unsigned char 
  2504 ;;  counter         1   18[COMRAM] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  8    2[COMRAM] long long 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2514 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2515 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2517 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2518 ;;Total ram usage:       18 bytes
  2519 ;; Hardware stack levels used: 1
  2520 ;; Hardware stack levels required when called: 2
  2521 ;; This function calls:
  2522 ;;		Nothing
  2523 ;; This function is called by:
  2524 ;;		_dtoa
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           	psect	text11
  2529   001682                     __ptext11:
  2530                           	callstack 0
  2531   001682                     ___aomod:
  2532                           	callstack 24
  2533   001682  0E00               	movlw	0
  2534   001684  6E14               	movwf	___aomod@sign^0,c
  2535   001686  BE0A               	btfsc	(___aomod@dividend+7)^0,7,c
  2536   001688  EF4A  F00B         	goto	u930
  2537   00168C  EF48  F00B         	goto	u931
  2538   001690                     u931:
  2539   001690  EF5C  F00B         	goto	l2073
  2540   001694                     u930:
  2541   001694  1E0A               	comf	(___aomod@dividend+7)^0,f,c
  2542   001696  1E09               	comf	(___aomod@dividend+6)^0,f,c
  2543   001698  1E08               	comf	(___aomod@dividend+5)^0,f,c
  2544   00169A  1E07               	comf	(___aomod@dividend+4)^0,f,c
  2545   00169C  1E06               	comf	(___aomod@dividend+3)^0,f,c
  2546   00169E  1E05               	comf	(___aomod@dividend+2)^0,f,c
  2547   0016A0  1E04               	comf	(___aomod@dividend+1)^0,f,c
  2548   0016A2  6C03               	negf	___aomod@dividend^0,c
  2549   0016A4  0E00               	movlw	0
  2550   0016A6  2204               	addwfc	(___aomod@dividend+1)^0,f,c
  2551   0016A8  2205               	addwfc	(___aomod@dividend+2)^0,f,c
  2552   0016AA  2206               	addwfc	(___aomod@dividend+3)^0,f,c
  2553   0016AC  2207               	addwfc	(___aomod@dividend+4)^0,f,c
  2554   0016AE  2208               	addwfc	(___aomod@dividend+5)^0,f,c
  2555   0016B0  2209               	addwfc	(___aomod@dividend+6)^0,f,c
  2556   0016B2  220A               	addwfc	(___aomod@dividend+7)^0,f,c
  2557   0016B4  0E01               	movlw	1
  2558   0016B6  6E14               	movwf	___aomod@sign^0,c
  2559   0016B8                     l2073:
  2560   0016B8  BE12               	btfsc	(___aomod@divisor+7)^0,7,c
  2561   0016BA  EF63  F00B         	goto	u940
  2562   0016BE  EF61  F00B         	goto	u941
  2563   0016C2                     u941:
  2564   0016C2  EF73  F00B         	goto	l2077
  2565   0016C6                     u940:
  2566   0016C6  1E12               	comf	(___aomod@divisor+7)^0,f,c
  2567   0016C8  1E11               	comf	(___aomod@divisor+6)^0,f,c
  2568   0016CA  1E10               	comf	(___aomod@divisor+5)^0,f,c
  2569   0016CC  1E0F               	comf	(___aomod@divisor+4)^0,f,c
  2570   0016CE  1E0E               	comf	(___aomod@divisor+3)^0,f,c
  2571   0016D0  1E0D               	comf	(___aomod@divisor+2)^0,f,c
  2572   0016D2  1E0C               	comf	(___aomod@divisor+1)^0,f,c
  2573   0016D4  6C0B               	negf	___aomod@divisor^0,c
  2574   0016D6  0E00               	movlw	0
  2575   0016D8  220C               	addwfc	(___aomod@divisor+1)^0,f,c
  2576   0016DA  220D               	addwfc	(___aomod@divisor+2)^0,f,c
  2577   0016DC  220E               	addwfc	(___aomod@divisor+3)^0,f,c
  2578   0016DE  220F               	addwfc	(___aomod@divisor+4)^0,f,c
  2579   0016E0  2210               	addwfc	(___aomod@divisor+5)^0,f,c
  2580   0016E2  2211               	addwfc	(___aomod@divisor+6)^0,f,c
  2581   0016E4  2212               	addwfc	(___aomod@divisor+7)^0,f,c
  2582   0016E6                     l2077:
  2583   0016E6  500B               	movf	___aomod@divisor^0,w,c
  2584   0016E8  100C               	iorwf	(___aomod@divisor+1)^0,w,c
  2585   0016EA  100D               	iorwf	(___aomod@divisor+2)^0,w,c
  2586   0016EC  100E               	iorwf	(___aomod@divisor+3)^0,w,c
  2587   0016EE  100F               	iorwf	(___aomod@divisor+4)^0,w,c
  2588   0016F0  1010               	iorwf	(___aomod@divisor+5)^0,w,c
  2589   0016F2  1011               	iorwf	(___aomod@divisor+6)^0,w,c
  2590   0016F4  1012               	iorwf	(___aomod@divisor+7)^0,w,c
  2591   0016F6  B4D8               	btfsc	status,2,c
  2592   0016F8  EF80  F00B         	goto	u951
  2593   0016FC  EF82  F00B         	goto	u950
  2594   001700                     u951:
  2595   001700  EFCA  F00B         	goto	l2093
  2596   001704                     u950:
  2597   001704  0E01               	movlw	1
  2598   001706  6E13               	movwf	___aomod@counter^0,c
  2599   001708  EF90  F00B         	goto	l2083
  2600   00170C                     l2081:
  2601   00170C  90D8               	bcf	status,0,c
  2602   00170E  360B               	rlcf	___aomod@divisor^0,f,c
  2603   001710  360C               	rlcf	(___aomod@divisor+1)^0,f,c
  2604   001712  360D               	rlcf	(___aomod@divisor+2)^0,f,c
  2605   001714  360E               	rlcf	(___aomod@divisor+3)^0,f,c
  2606   001716  360F               	rlcf	(___aomod@divisor+4)^0,f,c
  2607   001718  3610               	rlcf	(___aomod@divisor+5)^0,f,c
  2608   00171A  3611               	rlcf	(___aomod@divisor+6)^0,f,c
  2609   00171C  3612               	rlcf	(___aomod@divisor+7)^0,f,c
  2610   00171E  2A13               	incf	___aomod@counter^0,f,c
  2611   001720                     l2083:
  2612   001720  AE12               	btfss	(___aomod@divisor+7)^0,7,c
  2613   001722  EF95  F00B         	goto	u961
  2614   001726  EF97  F00B         	goto	u960
  2615   00172A                     u961:
  2616   00172A  EF86  F00B         	goto	l2081
  2617   00172E                     u960:
  2618   00172E                     l2085:
  2619   00172E  500B               	movf	___aomod@divisor^0,w,c
  2620   001730  5C03               	subwf	___aomod@dividend^0,w,c
  2621   001732  500C               	movf	(___aomod@divisor+1)^0,w,c
  2622   001734  5804               	subwfb	(___aomod@dividend+1)^0,w,c
  2623   001736  500D               	movf	(___aomod@divisor+2)^0,w,c
  2624   001738  5805               	subwfb	(___aomod@dividend+2)^0,w,c
  2625   00173A  500E               	movf	(___aomod@divisor+3)^0,w,c
  2626   00173C  5806               	subwfb	(___aomod@dividend+3)^0,w,c
  2627   00173E  500F               	movf	(___aomod@divisor+4)^0,w,c
  2628   001740  5807               	subwfb	(___aomod@dividend+4)^0,w,c
  2629   001742  5010               	movf	(___aomod@divisor+5)^0,w,c
  2630   001744  5808               	subwfb	(___aomod@dividend+5)^0,w,c
  2631   001746  5011               	movf	(___aomod@divisor+6)^0,w,c
  2632   001748  5809               	subwfb	(___aomod@dividend+6)^0,w,c
  2633   00174A  5012               	movf	(___aomod@divisor+7)^0,w,c
  2634   00174C  580A               	subwfb	(___aomod@dividend+7)^0,w,c
  2635   00174E  A0D8               	btfss	status,0,c
  2636   001750  EFAC  F00B         	goto	u971
  2637   001754  EFAE  F00B         	goto	u970
  2638   001758                     u971:
  2639   001758  EFBE  F00B         	goto	l2089
  2640   00175C                     u970:
  2641   00175C  500B               	movf	___aomod@divisor^0,w,c
  2642   00175E  5E03               	subwf	___aomod@dividend^0,f,c
  2643   001760  500C               	movf	(___aomod@divisor+1)^0,w,c
  2644   001762  5A04               	subwfb	(___aomod@dividend+1)^0,f,c
  2645   001764  500D               	movf	(___aomod@divisor+2)^0,w,c
  2646   001766  5A05               	subwfb	(___aomod@dividend+2)^0,f,c
  2647   001768  500E               	movf	(___aomod@divisor+3)^0,w,c
  2648   00176A  5A06               	subwfb	(___aomod@dividend+3)^0,f,c
  2649   00176C  500F               	movf	(___aomod@divisor+4)^0,w,c
  2650   00176E  5A07               	subwfb	(___aomod@dividend+4)^0,f,c
  2651   001770  5010               	movf	(___aomod@divisor+5)^0,w,c
  2652   001772  5A08               	subwfb	(___aomod@dividend+5)^0,f,c
  2653   001774  5011               	movf	(___aomod@divisor+6)^0,w,c
  2654   001776  5A09               	subwfb	(___aomod@dividend+6)^0,f,c
  2655   001778  5012               	movf	(___aomod@divisor+7)^0,w,c
  2656   00177A  5A0A               	subwfb	(___aomod@dividend+7)^0,f,c
  2657   00177C                     l2089:
  2658   00177C  90D8               	bcf	status,0,c
  2659   00177E  3212               	rrcf	(___aomod@divisor+7)^0,f,c
  2660   001780  3211               	rrcf	(___aomod@divisor+6)^0,f,c
  2661   001782  3210               	rrcf	(___aomod@divisor+5)^0,f,c
  2662   001784  320F               	rrcf	(___aomod@divisor+4)^0,f,c
  2663   001786  320E               	rrcf	(___aomod@divisor+3)^0,f,c
  2664   001788  320D               	rrcf	(___aomod@divisor+2)^0,f,c
  2665   00178A  320C               	rrcf	(___aomod@divisor+1)^0,f,c
  2666   00178C  320B               	rrcf	___aomod@divisor^0,f,c
  2667   00178E  2E13               	decfsz	___aomod@counter^0,f,c
  2668   001790  EF97  F00B         	goto	l2085
  2669   001794                     l2093:
  2670   001794  5014               	movf	___aomod@sign^0,w,c
  2671   001796  B4D8               	btfsc	status,2,c
  2672   001798  EFD0  F00B         	goto	u981
  2673   00179C  EFD2  F00B         	goto	u980
  2674   0017A0                     u981:
  2675   0017A0  EFE2  F00B         	goto	l2097
  2676   0017A4                     u980:
  2677   0017A4  1E0A               	comf	(___aomod@dividend+7)^0,f,c
  2678   0017A6  1E09               	comf	(___aomod@dividend+6)^0,f,c
  2679   0017A8  1E08               	comf	(___aomod@dividend+5)^0,f,c
  2680   0017AA  1E07               	comf	(___aomod@dividend+4)^0,f,c
  2681   0017AC  1E06               	comf	(___aomod@dividend+3)^0,f,c
  2682   0017AE  1E05               	comf	(___aomod@dividend+2)^0,f,c
  2683   0017B0  1E04               	comf	(___aomod@dividend+1)^0,f,c
  2684   0017B2  6C03               	negf	___aomod@dividend^0,c
  2685   0017B4  0E00               	movlw	0
  2686   0017B6  2204               	addwfc	(___aomod@dividend+1)^0,f,c
  2687   0017B8  2205               	addwfc	(___aomod@dividend+2)^0,f,c
  2688   0017BA  2206               	addwfc	(___aomod@dividend+3)^0,f,c
  2689   0017BC  2207               	addwfc	(___aomod@dividend+4)^0,f,c
  2690   0017BE  2208               	addwfc	(___aomod@dividend+5)^0,f,c
  2691   0017C0  2209               	addwfc	(___aomod@dividend+6)^0,f,c
  2692   0017C2  220A               	addwfc	(___aomod@dividend+7)^0,f,c
  2693   0017C4                     l2097:
  2694   0017C4  C003  F003         	movff	___aomod@dividend,?___aomod
  2695   0017C8  C004  F004         	movff	___aomod@dividend+1,?___aomod+1
  2696   0017CC  C005  F005         	movff	___aomod@dividend+2,?___aomod+2
  2697   0017D0  C006  F006         	movff	___aomod@dividend+3,?___aomod+3
  2698   0017D4  C007  F007         	movff	___aomod@dividend+4,?___aomod+4
  2699   0017D8  C008  F008         	movff	___aomod@dividend+5,?___aomod+5
  2700   0017DC  C009  F009         	movff	___aomod@dividend+6,?___aomod+6
  2701   0017E0  C00A  F00A         	movff	___aomod@dividend+7,?___aomod+7
  2702   0017E4  0012               	return		;funcret
  2703   0017E6                     __end_of___aomod:
  2704                           	callstack 0
  2705                           
  2706 ;; *************** function ___aodiv *****************
  2707 ;; Defined at:
  2708 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  dividend        8    2[COMRAM] long long 
  2711 ;;  divisor         8   10[COMRAM] long long 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;  quotient        8   20[COMRAM] long long 
  2714 ;;  sign            1   19[COMRAM] unsigned char 
  2715 ;;  counter         1   18[COMRAM] unsigned char 
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  8    2[COMRAM] long long 
  2718 ;; Registers used:
  2719 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2725 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2726 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2728 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2729 ;;Total ram usage:       26 bytes
  2730 ;; Hardware stack levels used: 1
  2731 ;; Hardware stack levels required when called: 2
  2732 ;; This function calls:
  2733 ;;		Nothing
  2734 ;; This function is called by:
  2735 ;;		_dtoa
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           	psect	text12
  2740   0014FA                     __ptext12:
  2741                           	callstack 0
  2742   0014FA                     ___aodiv:
  2743                           	callstack 24
  2744   0014FA  0E00               	movlw	0
  2745   0014FC  6E14               	movwf	___aodiv@sign^0,c
  2746   0014FE  BE12               	btfsc	(___aodiv@divisor+7)^0,7,c
  2747   001500  EF86  F00A         	goto	u860
  2748   001504  EF84  F00A         	goto	u861
  2749   001508                     u861:
  2750   001508  EF98  F00A         	goto	l2029
  2751   00150C                     u860:
  2752   00150C  1E12               	comf	(___aodiv@divisor+7)^0,f,c
  2753   00150E  1E11               	comf	(___aodiv@divisor+6)^0,f,c
  2754   001510  1E10               	comf	(___aodiv@divisor+5)^0,f,c
  2755   001512  1E0F               	comf	(___aodiv@divisor+4)^0,f,c
  2756   001514  1E0E               	comf	(___aodiv@divisor+3)^0,f,c
  2757   001516  1E0D               	comf	(___aodiv@divisor+2)^0,f,c
  2758   001518  1E0C               	comf	(___aodiv@divisor+1)^0,f,c
  2759   00151A  6C0B               	negf	___aodiv@divisor^0,c
  2760   00151C  0E00               	movlw	0
  2761   00151E  220C               	addwfc	(___aodiv@divisor+1)^0,f,c
  2762   001520  220D               	addwfc	(___aodiv@divisor+2)^0,f,c
  2763   001522  220E               	addwfc	(___aodiv@divisor+3)^0,f,c
  2764   001524  220F               	addwfc	(___aodiv@divisor+4)^0,f,c
  2765   001526  2210               	addwfc	(___aodiv@divisor+5)^0,f,c
  2766   001528  2211               	addwfc	(___aodiv@divisor+6)^0,f,c
  2767   00152A  2212               	addwfc	(___aodiv@divisor+7)^0,f,c
  2768   00152C  0E01               	movlw	1
  2769   00152E  6E14               	movwf	___aodiv@sign^0,c
  2770   001530                     l2029:
  2771   001530  BE0A               	btfsc	(___aodiv@dividend+7)^0,7,c
  2772   001532  EF9F  F00A         	goto	u870
  2773   001536  EF9D  F00A         	goto	u871
  2774   00153A                     u871:
  2775   00153A  EFB1  F00A         	goto	l2035
  2776   00153E                     u870:
  2777   00153E  1E0A               	comf	(___aodiv@dividend+7)^0,f,c
  2778   001540  1E09               	comf	(___aodiv@dividend+6)^0,f,c
  2779   001542  1E08               	comf	(___aodiv@dividend+5)^0,f,c
  2780   001544  1E07               	comf	(___aodiv@dividend+4)^0,f,c
  2781   001546  1E06               	comf	(___aodiv@dividend+3)^0,f,c
  2782   001548  1E05               	comf	(___aodiv@dividend+2)^0,f,c
  2783   00154A  1E04               	comf	(___aodiv@dividend+1)^0,f,c
  2784   00154C  6C03               	negf	___aodiv@dividend^0,c
  2785   00154E  0E00               	movlw	0
  2786   001550  2204               	addwfc	(___aodiv@dividend+1)^0,f,c
  2787   001552  2205               	addwfc	(___aodiv@dividend+2)^0,f,c
  2788   001554  2206               	addwfc	(___aodiv@dividend+3)^0,f,c
  2789   001556  2207               	addwfc	(___aodiv@dividend+4)^0,f,c
  2790   001558  2208               	addwfc	(___aodiv@dividend+5)^0,f,c
  2791   00155A  2209               	addwfc	(___aodiv@dividend+6)^0,f,c
  2792   00155C  220A               	addwfc	(___aodiv@dividend+7)^0,f,c
  2793   00155E  0E01               	movlw	1
  2794   001560  1A14               	xorwf	___aodiv@sign^0,f,c
  2795   001562                     l2035:
  2796   001562  EE20  F015         	lfsr	2,___aodiv@quotient
  2797   001566  0E07               	movlw	7
  2798   001568                     u881:
  2799   001568  6ADE               	clrf	postinc2,c
  2800   00156A  06E8               	decf	wreg,f,c
  2801   00156C  E2FD               	bc	u881
  2802   00156E  500B               	movf	___aodiv@divisor^0,w,c
  2803   001570  100C               	iorwf	(___aodiv@divisor+1)^0,w,c
  2804   001572  100D               	iorwf	(___aodiv@divisor+2)^0,w,c
  2805   001574  100E               	iorwf	(___aodiv@divisor+3)^0,w,c
  2806   001576  100F               	iorwf	(___aodiv@divisor+4)^0,w,c
  2807   001578  1010               	iorwf	(___aodiv@divisor+5)^0,w,c
  2808   00157A  1011               	iorwf	(___aodiv@divisor+6)^0,w,c
  2809   00157C  1012               	iorwf	(___aodiv@divisor+7)^0,w,c
  2810   00157E  B4D8               	btfsc	status,2,c
  2811   001580  EFC4  F00A         	goto	u891
  2812   001584  EFC6  F00A         	goto	u890
  2813   001588                     u891:
  2814   001588  EF18  F00B         	goto	l2057
  2815   00158C                     u890:
  2816   00158C  0E01               	movlw	1
  2817   00158E  6E13               	movwf	___aodiv@counter^0,c
  2818   001590  EFD4  F00A         	goto	l2043
  2819   001594                     l2041:
  2820   001594  90D8               	bcf	status,0,c
  2821   001596  360B               	rlcf	___aodiv@divisor^0,f,c
  2822   001598  360C               	rlcf	(___aodiv@divisor+1)^0,f,c
  2823   00159A  360D               	rlcf	(___aodiv@divisor+2)^0,f,c
  2824   00159C  360E               	rlcf	(___aodiv@divisor+3)^0,f,c
  2825   00159E  360F               	rlcf	(___aodiv@divisor+4)^0,f,c
  2826   0015A0  3610               	rlcf	(___aodiv@divisor+5)^0,f,c
  2827   0015A2  3611               	rlcf	(___aodiv@divisor+6)^0,f,c
  2828   0015A4  3612               	rlcf	(___aodiv@divisor+7)^0,f,c
  2829   0015A6  2A13               	incf	___aodiv@counter^0,f,c
  2830   0015A8                     l2043:
  2831   0015A8  AE12               	btfss	(___aodiv@divisor+7)^0,7,c
  2832   0015AA  EFD9  F00A         	goto	u901
  2833   0015AE  EFDB  F00A         	goto	u900
  2834   0015B2                     u901:
  2835   0015B2  EFCA  F00A         	goto	l2041
  2836   0015B6                     u900:
  2837   0015B6                     l2045:
  2838   0015B6  90D8               	bcf	status,0,c
  2839   0015B8  3615               	rlcf	___aodiv@quotient^0,f,c
  2840   0015BA  3616               	rlcf	(___aodiv@quotient+1)^0,f,c
  2841   0015BC  3617               	rlcf	(___aodiv@quotient+2)^0,f,c
  2842   0015BE  3618               	rlcf	(___aodiv@quotient+3)^0,f,c
  2843   0015C0  3619               	rlcf	(___aodiv@quotient+4)^0,f,c
  2844   0015C2  361A               	rlcf	(___aodiv@quotient+5)^0,f,c
  2845   0015C4  361B               	rlcf	(___aodiv@quotient+6)^0,f,c
  2846   0015C6  361C               	rlcf	(___aodiv@quotient+7)^0,f,c
  2847   0015C8  500B               	movf	___aodiv@divisor^0,w,c
  2848   0015CA  5C03               	subwf	___aodiv@dividend^0,w,c
  2849   0015CC  500C               	movf	(___aodiv@divisor+1)^0,w,c
  2850   0015CE  5804               	subwfb	(___aodiv@dividend+1)^0,w,c
  2851   0015D0  500D               	movf	(___aodiv@divisor+2)^0,w,c
  2852   0015D2  5805               	subwfb	(___aodiv@dividend+2)^0,w,c
  2853   0015D4  500E               	movf	(___aodiv@divisor+3)^0,w,c
  2854   0015D6  5806               	subwfb	(___aodiv@dividend+3)^0,w,c
  2855   0015D8  500F               	movf	(___aodiv@divisor+4)^0,w,c
  2856   0015DA  5807               	subwfb	(___aodiv@dividend+4)^0,w,c
  2857   0015DC  5010               	movf	(___aodiv@divisor+5)^0,w,c
  2858   0015DE  5808               	subwfb	(___aodiv@dividend+5)^0,w,c
  2859   0015E0  5011               	movf	(___aodiv@divisor+6)^0,w,c
  2860   0015E2  5809               	subwfb	(___aodiv@dividend+6)^0,w,c
  2861   0015E4  5012               	movf	(___aodiv@divisor+7)^0,w,c
  2862   0015E6  580A               	subwfb	(___aodiv@dividend+7)^0,w,c
  2863   0015E8  A0D8               	btfss	status,0,c
  2864   0015EA  EFF9  F00A         	goto	u911
  2865   0015EE  EFFB  F00A         	goto	u910
  2866   0015F2                     u911:
  2867   0015F2  EF0C  F00B         	goto	l2053
  2868   0015F6                     u910:
  2869   0015F6  500B               	movf	___aodiv@divisor^0,w,c
  2870   0015F8  5E03               	subwf	___aodiv@dividend^0,f,c
  2871   0015FA  500C               	movf	(___aodiv@divisor+1)^0,w,c
  2872   0015FC  5A04               	subwfb	(___aodiv@dividend+1)^0,f,c
  2873   0015FE  500D               	movf	(___aodiv@divisor+2)^0,w,c
  2874   001600  5A05               	subwfb	(___aodiv@dividend+2)^0,f,c
  2875   001602  500E               	movf	(___aodiv@divisor+3)^0,w,c
  2876   001604  5A06               	subwfb	(___aodiv@dividend+3)^0,f,c
  2877   001606  500F               	movf	(___aodiv@divisor+4)^0,w,c
  2878   001608  5A07               	subwfb	(___aodiv@dividend+4)^0,f,c
  2879   00160A  5010               	movf	(___aodiv@divisor+5)^0,w,c
  2880   00160C  5A08               	subwfb	(___aodiv@dividend+5)^0,f,c
  2881   00160E  5011               	movf	(___aodiv@divisor+6)^0,w,c
  2882   001610  5A09               	subwfb	(___aodiv@dividend+6)^0,f,c
  2883   001612  5012               	movf	(___aodiv@divisor+7)^0,w,c
  2884   001614  5A0A               	subwfb	(___aodiv@dividend+7)^0,f,c
  2885   001616  8015               	bsf	___aodiv@quotient^0,0,c
  2886   001618                     l2053:
  2887   001618  90D8               	bcf	status,0,c
  2888   00161A  3212               	rrcf	(___aodiv@divisor+7)^0,f,c
  2889   00161C  3211               	rrcf	(___aodiv@divisor+6)^0,f,c
  2890   00161E  3210               	rrcf	(___aodiv@divisor+5)^0,f,c
  2891   001620  320F               	rrcf	(___aodiv@divisor+4)^0,f,c
  2892   001622  320E               	rrcf	(___aodiv@divisor+3)^0,f,c
  2893   001624  320D               	rrcf	(___aodiv@divisor+2)^0,f,c
  2894   001626  320C               	rrcf	(___aodiv@divisor+1)^0,f,c
  2895   001628  320B               	rrcf	___aodiv@divisor^0,f,c
  2896   00162A  2E13               	decfsz	___aodiv@counter^0,f,c
  2897   00162C  EFDB  F00A         	goto	l2045
  2898   001630                     l2057:
  2899   001630  5014               	movf	___aodiv@sign^0,w,c
  2900   001632  B4D8               	btfsc	status,2,c
  2901   001634  EF1E  F00B         	goto	u921
  2902   001638  EF20  F00B         	goto	u920
  2903   00163C                     u921:
  2904   00163C  EF30  F00B         	goto	l2061
  2905   001640                     u920:
  2906   001640  1E1C               	comf	(___aodiv@quotient+7)^0,f,c
  2907   001642  1E1B               	comf	(___aodiv@quotient+6)^0,f,c
  2908   001644  1E1A               	comf	(___aodiv@quotient+5)^0,f,c
  2909   001646  1E19               	comf	(___aodiv@quotient+4)^0,f,c
  2910   001648  1E18               	comf	(___aodiv@quotient+3)^0,f,c
  2911   00164A  1E17               	comf	(___aodiv@quotient+2)^0,f,c
  2912   00164C  1E16               	comf	(___aodiv@quotient+1)^0,f,c
  2913   00164E  6C15               	negf	___aodiv@quotient^0,c
  2914   001650  0E00               	movlw	0
  2915   001652  2216               	addwfc	(___aodiv@quotient+1)^0,f,c
  2916   001654  2217               	addwfc	(___aodiv@quotient+2)^0,f,c
  2917   001656  2218               	addwfc	(___aodiv@quotient+3)^0,f,c
  2918   001658  2219               	addwfc	(___aodiv@quotient+4)^0,f,c
  2919   00165A  221A               	addwfc	(___aodiv@quotient+5)^0,f,c
  2920   00165C  221B               	addwfc	(___aodiv@quotient+6)^0,f,c
  2921   00165E  221C               	addwfc	(___aodiv@quotient+7)^0,f,c
  2922   001660                     l2061:
  2923   001660  C015  F003         	movff	___aodiv@quotient,?___aodiv
  2924   001664  C016  F004         	movff	___aodiv@quotient+1,?___aodiv+1
  2925   001668  C017  F005         	movff	___aodiv@quotient+2,?___aodiv+2
  2926   00166C  C018  F006         	movff	___aodiv@quotient+3,?___aodiv+3
  2927   001670  C019  F007         	movff	___aodiv@quotient+4,?___aodiv+4
  2928   001674  C01A  F008         	movff	___aodiv@quotient+5,?___aodiv+5
  2929   001678  C01B  F009         	movff	___aodiv@quotient+6,?___aodiv+6
  2930   00167C  C01C  F00A         	movff	___aodiv@quotient+7,?___aodiv+7
  2931   001680  0012               	return		;funcret
  2932   001682                     __end_of___aodiv:
  2933                           	callstack 0
  2934                           
  2935 ;; *************** function _sendStringSerial4 *****************
  2936 ;; Defined at:
  2937 ;;		line 37 in file "../serial.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;  string          2    3[COMRAM] PTR unsigned char 
  2940 ;;		 -> main@readout(50), 
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;		None
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  1    wreg      void 
  2945 ;; Registers used:
  2946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2947 ;; Tracked objects:
  2948 ;;		On entry : 0/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2952 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2955 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2956 ;;Total ram usage:        2 bytes
  2957 ;; Hardware stack levels used: 1
  2958 ;; Hardware stack levels required when called: 3
  2959 ;; This function calls:
  2960 ;;		_sendCharSerial4
  2961 ;; This function is called by:
  2962 ;;		_main
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text13
  2967   00257E                     __ptext13:
  2968                           	callstack 0
  2969   00257E                     _sendStringSerial4:
  2970                           	callstack 27
  2971   00257E                     
  2972                           ;../serial.c: 40:     while (*string != 0)
  2973   00257E  EFCA  F012         	goto	l2621
  2974   002582                     l2617:
  2975                           
  2976                           ;../serial.c: 41:     {;../serial.c: 42:         sendCharSerial4(*string++);
  2977   002582  C004  FFD9         	movff	sendStringSerial4@string,fsr2l
  2978   002586  C005  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  2979   00258A  50DF               	movf	indf2,w,c
  2980   00258C  EC4F  F013         	call	_sendCharSerial4
  2981   002590  4A04               	infsnz	sendStringSerial4@string^0,f,c
  2982   002592  2A05               	incf	(sendStringSerial4@string+1)^0,f,c
  2983   002594                     l2621:
  2984                           
  2985                           ;../serial.c: 40:     while (*string != 0)
  2986   002594  C004  FFD9         	movff	sendStringSerial4@string,fsr2l
  2987   002598  C005  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  2988   00259C  50DF               	movf	indf2,w,c
  2989   00259E  A4D8               	btfss	status,2,c
  2990   0025A0  EFD4  F012         	goto	u1411
  2991   0025A4  EFD6  F012         	goto	u1410
  2992   0025A8                     u1411:
  2993   0025A8  EFC1  F012         	goto	l2617
  2994   0025AC                     u1410:
  2995   0025AC  0012               	return		;funcret
  2996   0025AE                     __end_of_sendStringSerial4:
  2997                           	callstack 0
  2998                           
  2999 ;; *************** function _sendCharSerial4 *****************
  3000 ;; Defined at:
  3001 ;;		line 30 in file "../serial.c"
  3002 ;; Parameters:    Size  Location     Type
  3003 ;;  charToSend      1    wreg     unsigned char 
  3004 ;; Auto vars:     Size  Location     Type
  3005 ;;  charToSend      1    2[COMRAM] unsigned char 
  3006 ;; Return value:  Size  Location     Type
  3007 ;;                  1    wreg      void 
  3008 ;; Registers used:
  3009 ;;		wreg
  3010 ;; Tracked objects:
  3011 ;;		On entry : 0/0
  3012 ;;		On exit  : 0/0
  3013 ;;		Unchanged: 0/0
  3014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3016 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3018 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3019 ;;Total ram usage:        1 bytes
  3020 ;; Hardware stack levels used: 1
  3021 ;; Hardware stack levels required when called: 2
  3022 ;; This function calls:
  3023 ;;		Nothing
  3024 ;; This function is called by:
  3025 ;;		_sendStringSerial4
  3026 ;; This function uses a non-reentrant model
  3027 ;;
  3028                           
  3029                           	psect	text14
  3030   00269E                     __ptext14:
  3031                           	callstack 0
  3032   00269E                     _sendCharSerial4:
  3033                           	callstack 27
  3034                           
  3035                           ;incstack = 0
  3036                           ;sendCharSerial4@charToSend stored from wreg
  3037   00269E  6E03               	movwf	sendCharSerial4@charToSend^0,c
  3038   0026A0                     l381:
  3039   0026A0  010E               	movlb	14	; () banked
  3040   0026A2  A537               	btfss	55,2,b	;volatile
  3041   0026A4  EF56  F013         	goto	u1351
  3042   0026A8  EF58  F013         	goto	u1350
  3043   0026AC                     u1351:
  3044   0026AC  EF50  F013         	goto	l381
  3045   0026B0                     u1350:
  3046   0026B0                     
  3047                           ; BSR set to: 14
  3048                           ;../serial.c: 32:     TX4REG = charToSend;
  3049   0026B0  C003  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3050   0026B4                     
  3051                           ; BSR set to: 14
  3052   0026B4  0012               	return		;funcret
  3053   0026B6                     __end_of_sendCharSerial4:
  3054                           	callstack 0
  3055                           
  3056 ;; *************** function _motor_action *****************
  3057 ;; Defined at:
  3058 ;;		line 181 in file "../dc_motor.c"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;  color           2   35[COMRAM] unsigned int 
  3061 ;;  l               2   37[COMRAM] PTR struct DC_motor
  3062 ;;		 -> main@motorL(9), 
  3063 ;;  r               2   39[COMRAM] PTR struct DC_motor
  3064 ;;		 -> main@motorR(9), 
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;		None
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  1    wreg      void 
  3069 ;; Registers used:
  3070 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3076 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3078 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3079 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3080 ;;Total ram usage:        8 bytes
  3081 ;; Hardware stack levels used: 1
  3082 ;; Hardware stack levels required when called: 5
  3083 ;; This function calls:
  3084 ;;		_left_135
  3085 ;;		_left_90
  3086 ;;		_reverse
  3087 ;;		_right_135
  3088 ;;		_right_90
  3089 ;;		_spin_180
  3090 ;; This function is called by:
  3091 ;;		_main
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           	psect	text15
  3096   001944                     __ptext15:
  3097                           	callstack 0
  3098   001944                     _motor_action:
  3099                           	callstack 25
  3100   001944                     
  3101                           ;../dc_motor.c: 181: void motor_action(unsigned int color, struct DC_motor *l, struct DC
      +                          _motor *r);../dc_motor.c: 182: {;../dc_motor.c: 183:     switch (color){
  3102   001944  EF0C  F00D         	goto	l2661
  3103   001948                     l2645:
  3104                           
  3105                           ;../dc_motor.c: 185:             right_90(l,r);
  3106   001948  C026  F01C         	movff	motor_action@l,right_90@mL
  3107   00194C  C027  F01D         	movff	motor_action@l+1,right_90@mL+1
  3108   001950  C028  F01E         	movff	motor_action@r,right_90@mR
  3109   001954  C029  F01F         	movff	motor_action@r+1,right_90@mR+1
  3110   001958  ECB0  F00E         	call	_right_90	;wreg free
  3111                           
  3112                           ;../dc_motor.c: 186:             break;
  3113   00195C  EF36  F00D         	goto	l295
  3114   001960                     l2647:
  3115                           
  3116                           ;../dc_motor.c: 188:             left_90(l,r);
  3117   001960  C026  F01C         	movff	motor_action@l,left_90@mL
  3118   001964  C027  F01D         	movff	motor_action@l+1,left_90@mL+1
  3119   001968  C028  F01E         	movff	motor_action@r,left_90@mR
  3120   00196C  C029  F01F         	movff	motor_action@r+1,left_90@mR+1
  3121   001970  EC02  F00F         	call	_left_90	;wreg free
  3122                           
  3123                           ;../dc_motor.c: 189:             break;
  3124   001974  EF36  F00D         	goto	l295
  3125   001978                     l2649:
  3126                           
  3127                           ;../dc_motor.c: 191:             spin_180(l,r);
  3128   001978  C026  F01C         	movff	motor_action@l,spin_180@mL
  3129   00197C  C027  F01D         	movff	motor_action@l+1,spin_180@mL+1
  3130   001980  C028  F01E         	movff	motor_action@r,spin_180@mR
  3131   001984  C029  F01F         	movff	motor_action@r+1,spin_180@mR+1
  3132   001988  EC54  F00F         	call	_spin_180	;wreg free
  3133                           
  3134                           ;../dc_motor.c: 192:             break;
  3135   00198C  EF36  F00D         	goto	l295
  3136   001990                     l2651:
  3137                           
  3138                           ;../dc_motor.c: 194:             reverse(l,r);
  3139   001990  C026  F01C         	movff	motor_action@l,reverse@mL
  3140   001994  C027  F01D         	movff	motor_action@l+1,reverse@mL+1
  3141   001998  C028  F01E         	movff	motor_action@r,reverse@mR
  3142   00199C  C029  F01F         	movff	motor_action@r+1,reverse@mR+1
  3143   0019A0  ECF6  F00F         	call	_reverse	;wreg free
  3144                           
  3145                           ;../dc_motor.c: 195:             right_90(l,r);
  3146   0019A4  C026  F01C         	movff	motor_action@l,right_90@mL
  3147   0019A8  C027  F01D         	movff	motor_action@l+1,right_90@mL+1
  3148   0019AC  C028  F01E         	movff	motor_action@r,right_90@mR
  3149   0019B0  C029  F01F         	movff	motor_action@r+1,right_90@mR+1
  3150   0019B4  ECB0  F00E         	call	_right_90	;wreg free
  3151                           
  3152                           ;../dc_motor.c: 196:             break;
  3153   0019B8  EF36  F00D         	goto	l295
  3154   0019BC                     l2653:
  3155                           
  3156                           ;../dc_motor.c: 198:             reverse(l,r);
  3157   0019BC  C026  F01C         	movff	motor_action@l,reverse@mL
  3158   0019C0  C027  F01D         	movff	motor_action@l+1,reverse@mL+1
  3159   0019C4  C028  F01E         	movff	motor_action@r,reverse@mR
  3160   0019C8  C029  F01F         	movff	motor_action@r+1,reverse@mR+1
  3161   0019CC  ECF6  F00F         	call	_reverse	;wreg free
  3162                           
  3163                           ;../dc_motor.c: 199:             left_90(l,r);
  3164   0019D0  C026  F01C         	movff	motor_action@l,left_90@mL
  3165   0019D4  C027  F01D         	movff	motor_action@l+1,left_90@mL+1
  3166   0019D8  C028  F01E         	movff	motor_action@r,left_90@mR
  3167   0019DC  C029  F01F         	movff	motor_action@r+1,left_90@mR+1
  3168   0019E0  EC02  F00F         	call	_left_90	;wreg free
  3169                           
  3170                           ;../dc_motor.c: 200:             break;
  3171   0019E4  EF36  F00D         	goto	l295
  3172   0019E8                     l2655:
  3173                           
  3174                           ;../dc_motor.c: 202:             right_135(l,r);
  3175   0019E8  C026  F01C         	movff	motor_action@l,right_135@mL
  3176   0019EC  C027  F01D         	movff	motor_action@l+1,right_135@mL+1
  3177   0019F0  C028  F01E         	movff	motor_action@r,right_135@mR
  3178   0019F4  C029  F01F         	movff	motor_action@r+1,right_135@mR+1
  3179   0019F8  ECA5  F00F         	call	_right_135	;wreg free
  3180                           
  3181                           ;../dc_motor.c: 203:             break;
  3182   0019FC  EF36  F00D         	goto	l295
  3183   001A00                     l2657:
  3184                           
  3185                           ;../dc_motor.c: 205:             left_135(l,r);
  3186   001A00  C026  F01C         	movff	motor_action@l,left_135@mL
  3187   001A04  C027  F01D         	movff	motor_action@l+1,left_135@mL+1
  3188   001A08  C028  F01E         	movff	motor_action@r,left_135@mR
  3189   001A0C  C029  F01F         	movff	motor_action@r+1,left_135@mR+1
  3190   001A10  EC47  F010         	call	_left_135	;wreg free
  3191                           
  3192                           ;../dc_motor.c: 206:             break;
  3193   001A14  EF36  F00D         	goto	l295
  3194   001A18                     l2661:
  3195   001A18  C024  F02A         	movff	motor_action@color,??_motor_action
  3196   001A1C  C025  F02B         	movff	motor_action@color+1,??_motor_action+1
  3197                           
  3198                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3199                           ; Switch size 1, requested type "simple"
  3200                           ; Number of cases is 1, Range of values is 0 to 0
  3201                           ; switch strategies available:
  3202                           ; Name         Instructions Cycles
  3203                           ; simple_byte            4     3 (average)
  3204                           ;	Chosen strategy is simple_byte
  3205   001A20  502B               	movf	(??_motor_action+1)^0,w,c
  3206   001A22  0A00               	xorlw	0	; case 0
  3207   001A24  B4D8               	btfsc	status,2,c
  3208   001A26  EF17  F00D         	goto	l2925
  3209   001A2A  EF36  F00D         	goto	l295
  3210   001A2E                     l2925:
  3211                           
  3212                           ; Switch size 1, requested type "simple"
  3213                           ; Number of cases is 7, Range of values is 1 to 7
  3214                           ; switch strategies available:
  3215                           ; Name         Instructions Cycles
  3216                           ; simple_byte           22    12 (average)
  3217                           ;	Chosen strategy is simple_byte
  3218   001A2E  502A               	movf	??_motor_action^0,w,c
  3219   001A30  0A01               	xorlw	1	; case 1
  3220   001A32  B4D8               	btfsc	status,2,c
  3221   001A34  EFA4  F00C         	goto	l2645
  3222   001A38  0A03               	xorlw	3	; case 2
  3223   001A3A  B4D8               	btfsc	status,2,c
  3224   001A3C  EFB0  F00C         	goto	l2647
  3225   001A40  0A01               	xorlw	1	; case 3
  3226   001A42  B4D8               	btfsc	status,2,c
  3227   001A44  EFBC  F00C         	goto	l2649
  3228   001A48  0A07               	xorlw	7	; case 4
  3229   001A4A  B4D8               	btfsc	status,2,c
  3230   001A4C  EFC8  F00C         	goto	l2651
  3231   001A50  0A01               	xorlw	1	; case 5
  3232   001A52  B4D8               	btfsc	status,2,c
  3233   001A54  EFDE  F00C         	goto	l2653
  3234   001A58  0A03               	xorlw	3	; case 6
  3235   001A5A  B4D8               	btfsc	status,2,c
  3236   001A5C  EFF4  F00C         	goto	l2655
  3237   001A60  0A01               	xorlw	1	; case 7
  3238   001A62  B4D8               	btfsc	status,2,c
  3239   001A64  EF00  F00D         	goto	l2657
  3240   001A68  EF36  F00D         	goto	l295
  3241   001A6C                     l295:
  3242   001A6C  0012               	return		;funcret
  3243   001A6E                     __end_of_motor_action:
  3244                           	callstack 0
  3245                           
  3246 ;; *************** function _spin_180 *****************
  3247 ;; Defined at:
  3248 ;;		line 136 in file "../dc_motor.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3251 ;;		 -> main@motorL(9), 
  3252 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3253 ;;		 -> main@motorR(9), 
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;  i               2   33[COMRAM] int 
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      void 
  3258 ;; Registers used:
  3259 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3265 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3266 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3267 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3268 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3269 ;;Total ram usage:        8 bytes
  3270 ;; Hardware stack levels used: 1
  3271 ;; Hardware stack levels required when called: 4
  3272 ;; This function calls:
  3273 ;;		_setMotorPWM
  3274 ;; This function is called by:
  3275 ;;		_motor_action
  3276 ;; This function uses a non-reentrant model
  3277 ;;
  3278                           
  3279                           	psect	text16
  3280   001EA8                     __ptext16:
  3281                           	callstack 0
  3282   001EA8                     _spin_180:
  3283                           	callstack 25
  3284   001EA8                     
  3285                           ;../dc_motor.c: 136: void spin_180(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 137: {;../dc_motor.c: 138:     mL->direction = 1;
  3286   001EA8  EE20 F001          	lfsr	2,1
  3287   001EAC  501C               	movf	spin_180@mL^0,w,c
  3288   001EAE  26D9               	addwf	fsr2l,f,c
  3289   001EB0  501D               	movf	(spin_180@mL+1)^0,w,c
  3290   001EB2  22DA               	addwfc	fsr2h,f,c
  3291   001EB4  0E01               	movlw	1
  3292   001EB6  6EDF               	movwf	indf2,c
  3293                           
  3294                           ;../dc_motor.c: 139:     mR->direction = 0;
  3295   001EB8  EE20 F001          	lfsr	2,1
  3296   001EBC  501E               	movf	spin_180@mR^0,w,c
  3297   001EBE  26D9               	addwf	fsr2l,f,c
  3298   001EC0  501F               	movf	(spin_180@mR+1)^0,w,c
  3299   001EC2  22DA               	addwfc	fsr2h,f,c
  3300   001EC4  0E00               	movlw	0
  3301   001EC6  6EDF               	movwf	indf2,c
  3302   001EC8                     
  3303                           ;../dc_motor.c: 140:     for (int i = 0;i<50;i = i + 2)
  3304   001EC8  0E00               	movlw	0
  3305   001ECA  6E23               	movwf	(spin_180@i+1)^0,c
  3306   001ECC  0E00               	movlw	0
  3307   001ECE  6E22               	movwf	spin_180@i^0,c
  3308   001ED0                     l2415:
  3309                           
  3310                           ;../dc_motor.c: 141:     {;../dc_motor.c: 142:         mL->power = i;
  3311   001ED0  C01C  FFD9         	movff	spin_180@mL,fsr2l
  3312   001ED4  C01D  FFDA         	movff	spin_180@mL+1,fsr2h
  3313   001ED8  C022  FFDF         	movff	spin_180@i,indf2
  3314   001EDC                     
  3315                           ;../dc_motor.c: 143:         mR->power = 50 + i;
  3316   001EDC  5022               	movf	spin_180@i^0,w,c
  3317   001EDE  0F32               	addlw	50
  3318   001EE0  C01E  FFD9         	movff	spin_180@mR,fsr2l
  3319   001EE4  C01F  FFDA         	movff	spin_180@mR+1,fsr2h
  3320   001EE8  6EDF               	movwf	indf2,c
  3321   001EEA                     
  3322                           ;../dc_motor.c: 144:         setMotorPWM(mL);
  3323   001EEA  C01C  F011         	movff	spin_180@mL,setMotorPWM@m
  3324   001EEE  C01D  F012         	movff	spin_180@mL+1,setMotorPWM@m+1
  3325   001EF2  EC93  F009         	call	_setMotorPWM	;wreg free
  3326   001EF6                     
  3327                           ;../dc_motor.c: 145:         setMotorPWM(mR);
  3328   001EF6  C01E  F011         	movff	spin_180@mR,setMotorPWM@m
  3329   001EFA  C01F  F012         	movff	spin_180@mR+1,setMotorPWM@m+1
  3330   001EFE  EC93  F009         	call	_setMotorPWM	;wreg free
  3331   001F02                     
  3332                           ;../dc_motor.c: 146:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3333   001F02  0E35               	movlw	53
  3334   001F04                     u1687:
  3335   001F04  2EE8               	decfsz	wreg,f,c
  3336   001F06  D7FE               	bra	u1687
  3337   001F08  F000               	nop	
  3338   001F0A                     
  3339                           ;../dc_motor.c: 147:     }
  3340   001F0A  0E02               	movlw	2
  3341   001F0C  2422               	addwf	spin_180@i^0,w,c
  3342   001F0E  6E22               	movwf	spin_180@i^0,c
  3343   001F10  0E00               	movlw	0
  3344   001F12  2023               	addwfc	(spin_180@i+1)^0,w,c
  3345   001F14  6E23               	movwf	(spin_180@i+1)^0,c
  3346   001F16  BE23               	btfsc	(spin_180@i+1)^0,7,c
  3347   001F18  EF97  F00F         	goto	u1321
  3348   001F1C  5023               	movf	(spin_180@i+1)^0,w,c
  3349   001F1E  E109               	bnz	u1320
  3350   001F20  0E32               	movlw	50
  3351   001F22  5C22               	subwf	spin_180@i^0,w,c
  3352   001F24  A0D8               	btfss	status,0,c
  3353   001F26  EF97  F00F         	goto	u1321
  3354   001F2A  EF99  F00F         	goto	u1320
  3355   001F2E                     u1321:
  3356   001F2E  EF68  F00F         	goto	l2415
  3357   001F32                     u1320:
  3358   001F32                     
  3359                           ;../dc_motor.c: 148:     _delay((unsigned long)((290)*(64000000/4000.0)));
  3360   001F32  0E18               	movlw	24
  3361   001F34  6E21               	movwf	(??_spin_180+1)^0,c
  3362   001F36  0E8A               	movlw	138
  3363   001F38  6E20               	movwf	??_spin_180^0,c
  3364   001F3A  0EE8               	movlw	232
  3365   001F3C                     u1697:
  3366   001F3C  2EE8               	decfsz	wreg,f,c
  3367   001F3E  D7FE               	bra	u1697
  3368   001F40  2E20               	decfsz	??_spin_180^0,f,c
  3369   001F42  D7FC               	bra	u1697
  3370   001F44  2E21               	decfsz	(??_spin_180+1)^0,f,c
  3371   001F46  D7FA               	bra	u1697
  3372   001F48  0012               	return		;funcret
  3373   001F4A                     __end_of_spin_180:
  3374                           	callstack 0
  3375                           
  3376 ;; *************** function _right_90 *****************
  3377 ;; Defined at:
  3378 ;;		line 106 in file "../dc_motor.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3381 ;;		 -> main@motorL(9), 
  3382 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3383 ;;		 -> main@motorR(9), 
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  i               2   33[COMRAM] int 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3395 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3396 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3397 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3398 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3399 ;;Total ram usage:        8 bytes
  3400 ;; Hardware stack levels used: 1
  3401 ;; Hardware stack levels required when called: 4
  3402 ;; This function calls:
  3403 ;;		_setMotorPWM
  3404 ;; This function is called by:
  3405 ;;		_motor_action
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text17
  3410   001D60                     __ptext17:
  3411                           	callstack 0
  3412   001D60                     _right_90:
  3413                           	callstack 25
  3414   001D60                     
  3415                           ;../dc_motor.c: 106: void right_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 107: {;../dc_motor.c: 108:     mL->direction = 1;
  3416   001D60  EE20 F001          	lfsr	2,1
  3417   001D64  501C               	movf	right_90@mL^0,w,c
  3418   001D66  26D9               	addwf	fsr2l,f,c
  3419   001D68  501D               	movf	(right_90@mL+1)^0,w,c
  3420   001D6A  22DA               	addwfc	fsr2h,f,c
  3421   001D6C  0E01               	movlw	1
  3422   001D6E  6EDF               	movwf	indf2,c
  3423                           
  3424                           ;../dc_motor.c: 109:     mR->direction = 0;
  3425   001D70  EE20 F001          	lfsr	2,1
  3426   001D74  501E               	movf	right_90@mR^0,w,c
  3427   001D76  26D9               	addwf	fsr2l,f,c
  3428   001D78  501F               	movf	(right_90@mR+1)^0,w,c
  3429   001D7A  22DA               	addwfc	fsr2h,f,c
  3430   001D7C  0E00               	movlw	0
  3431   001D7E  6EDF               	movwf	indf2,c
  3432   001D80                     
  3433                           ;../dc_motor.c: 110:     for (int i = 0;i<50;i = i + 2)
  3434   001D80  0E00               	movlw	0
  3435   001D82  6E23               	movwf	(right_90@i+1)^0,c
  3436   001D84  0E00               	movlw	0
  3437   001D86  6E22               	movwf	right_90@i^0,c
  3438   001D88                     l2367:
  3439                           
  3440                           ;../dc_motor.c: 111:     {;../dc_motor.c: 112:         mL->power = i;
  3441   001D88  C01C  FFD9         	movff	right_90@mL,fsr2l
  3442   001D8C  C01D  FFDA         	movff	right_90@mL+1,fsr2h
  3443   001D90  C022  FFDF         	movff	right_90@i,indf2
  3444   001D94                     
  3445                           ;../dc_motor.c: 113:         mR->power = 50 + i;
  3446   001D94  5022               	movf	right_90@i^0,w,c
  3447   001D96  0F32               	addlw	50
  3448   001D98  C01E  FFD9         	movff	right_90@mR,fsr2l
  3449   001D9C  C01F  FFDA         	movff	right_90@mR+1,fsr2h
  3450   001DA0  6EDF               	movwf	indf2,c
  3451   001DA2                     
  3452                           ;../dc_motor.c: 114:         setMotorPWM(mL);
  3453   001DA2  C01C  F011         	movff	right_90@mL,setMotorPWM@m
  3454   001DA6  C01D  F012         	movff	right_90@mL+1,setMotorPWM@m+1
  3455   001DAA  EC93  F009         	call	_setMotorPWM	;wreg free
  3456   001DAE                     
  3457                           ;../dc_motor.c: 115:         setMotorPWM(mR);
  3458   001DAE  C01E  F011         	movff	right_90@mR,setMotorPWM@m
  3459   001DB2  C01F  F012         	movff	right_90@mR+1,setMotorPWM@m+1
  3460   001DB6  EC93  F009         	call	_setMotorPWM	;wreg free
  3461   001DBA                     
  3462                           ;../dc_motor.c: 116:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3463   001DBA  0E35               	movlw	53
  3464   001DBC                     u1707:
  3465   001DBC  2EE8               	decfsz	wreg,f,c
  3466   001DBE  D7FE               	bra	u1707
  3467   001DC0  F000               	nop	
  3468   001DC2                     
  3469                           ;../dc_motor.c: 117:     }
  3470   001DC2  0E02               	movlw	2
  3471   001DC4  2422               	addwf	right_90@i^0,w,c
  3472   001DC6  6E22               	movwf	right_90@i^0,c
  3473   001DC8  0E00               	movlw	0
  3474   001DCA  2023               	addwfc	(right_90@i+1)^0,w,c
  3475   001DCC  6E23               	movwf	(right_90@i+1)^0,c
  3476   001DCE  BE23               	btfsc	(right_90@i+1)^0,7,c
  3477   001DD0  EFF3  F00E         	goto	u1301
  3478   001DD4  5023               	movf	(right_90@i+1)^0,w,c
  3479   001DD6  E109               	bnz	u1300
  3480   001DD8  0E32               	movlw	50
  3481   001DDA  5C22               	subwf	right_90@i^0,w,c
  3482   001DDC  A0D8               	btfss	status,0,c
  3483   001DDE  EFF3  F00E         	goto	u1301
  3484   001DE2  EFF5  F00E         	goto	u1300
  3485   001DE6                     u1301:
  3486   001DE6  EFC4  F00E         	goto	l2367
  3487   001DEA                     u1300:
  3488   001DEA                     
  3489                           ;../dc_motor.c: 118:     _delay((unsigned long)((165)*(64000000/4000.0)));
  3490   001DEA  0E0E               	movlw	14
  3491   001DEC  6E21               	movwf	(??_right_90+1)^0,c
  3492   001DEE  0E65               	movlw	101
  3493   001DF0  6E20               	movwf	??_right_90^0,c
  3494   001DF2  0E87               	movlw	135
  3495   001DF4                     u1717:
  3496   001DF4  2EE8               	decfsz	wreg,f,c
  3497   001DF6  D7FE               	bra	u1717
  3498   001DF8  2E20               	decfsz	??_right_90^0,f,c
  3499   001DFA  D7FC               	bra	u1717
  3500   001DFC  2E21               	decfsz	(??_right_90+1)^0,f,c
  3501   001DFE  D7FA               	bra	u1717
  3502   001E00  F000               	nop	
  3503   001E02  0012               	return		;funcret
  3504   001E04                     __end_of_right_90:
  3505                           	callstack 0
  3506                           
  3507 ;; *************** function _right_135 *****************
  3508 ;; Defined at:
  3509 ;;		line 151 in file "../dc_motor.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3512 ;;		 -> main@motorL(9), 
  3513 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3514 ;;		 -> main@motorR(9), 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  i               2   33[COMRAM] int 
  3517 ;; Return value:  Size  Location     Type
  3518 ;;                  1    wreg      void 
  3519 ;; Registers used:
  3520 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3526 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3527 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3528 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3529 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3530 ;;Total ram usage:        8 bytes
  3531 ;; Hardware stack levels used: 1
  3532 ;; Hardware stack levels required when called: 4
  3533 ;; This function calls:
  3534 ;;		_setMotorPWM
  3535 ;; This function is called by:
  3536 ;;		_motor_action
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text18
  3541   001F4A                     __ptext18:
  3542                           	callstack 0
  3543   001F4A                     _right_135:
  3544                           	callstack 25
  3545   001F4A                     
  3546                           ;../dc_motor.c: 151: void right_135(struct DC_motor *mL, struct DC_motor *mR);../dc_moto
      +                          r.c: 152: {;../dc_motor.c: 153:     mL->direction = 1;
  3547   001F4A  EE20 F001          	lfsr	2,1
  3548   001F4E  501C               	movf	right_135@mL^0,w,c
  3549   001F50  26D9               	addwf	fsr2l,f,c
  3550   001F52  501D               	movf	(right_135@mL+1)^0,w,c
  3551   001F54  22DA               	addwfc	fsr2h,f,c
  3552   001F56  0E01               	movlw	1
  3553   001F58  6EDF               	movwf	indf2,c
  3554                           
  3555                           ;../dc_motor.c: 154:     mR->direction = 0;
  3556   001F5A  EE20 F001          	lfsr	2,1
  3557   001F5E  501E               	movf	right_135@mR^0,w,c
  3558   001F60  26D9               	addwf	fsr2l,f,c
  3559   001F62  501F               	movf	(right_135@mR+1)^0,w,c
  3560   001F64  22DA               	addwfc	fsr2h,f,c
  3561   001F66  0E00               	movlw	0
  3562   001F68  6EDF               	movwf	indf2,c
  3563   001F6A                     
  3564                           ;../dc_motor.c: 155:     for (int i = 0;i<50;i = i + 2)
  3565   001F6A  0E00               	movlw	0
  3566   001F6C  6E23               	movwf	(right_135@i+1)^0,c
  3567   001F6E  0E00               	movlw	0
  3568   001F70  6E22               	movwf	right_135@i^0,c
  3569   001F72                     l2439:
  3570                           
  3571                           ;../dc_motor.c: 156:     {;../dc_motor.c: 157:         mL->power = i;
  3572   001F72  C01C  FFD9         	movff	right_135@mL,fsr2l
  3573   001F76  C01D  FFDA         	movff	right_135@mL+1,fsr2h
  3574   001F7A  C022  FFDF         	movff	right_135@i,indf2
  3575   001F7E                     
  3576                           ;../dc_motor.c: 158:         mR->power = 50 + i;
  3577   001F7E  5022               	movf	right_135@i^0,w,c
  3578   001F80  0F32               	addlw	50
  3579   001F82  C01E  FFD9         	movff	right_135@mR,fsr2l
  3580   001F86  C01F  FFDA         	movff	right_135@mR+1,fsr2h
  3581   001F8A  6EDF               	movwf	indf2,c
  3582   001F8C                     
  3583                           ;../dc_motor.c: 159:         setMotorPWM(mL);
  3584   001F8C  C01C  F011         	movff	right_135@mL,setMotorPWM@m
  3585   001F90  C01D  F012         	movff	right_135@mL+1,setMotorPWM@m+1
  3586   001F94  EC93  F009         	call	_setMotorPWM	;wreg free
  3587   001F98                     
  3588                           ;../dc_motor.c: 160:         setMotorPWM(mR);
  3589   001F98  C01E  F011         	movff	right_135@mR,setMotorPWM@m
  3590   001F9C  C01F  F012         	movff	right_135@mR+1,setMotorPWM@m+1
  3591   001FA0  EC93  F009         	call	_setMotorPWM	;wreg free
  3592   001FA4                     
  3593                           ;../dc_motor.c: 161:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3594   001FA4  0E35               	movlw	53
  3595   001FA6                     u1727:
  3596   001FA6  2EE8               	decfsz	wreg,f,c
  3597   001FA8  D7FE               	bra	u1727
  3598   001FAA  F000               	nop	
  3599   001FAC                     
  3600                           ;../dc_motor.c: 162:     }
  3601   001FAC  0E02               	movlw	2
  3602   001FAE  2422               	addwf	right_135@i^0,w,c
  3603   001FB0  6E22               	movwf	right_135@i^0,c
  3604   001FB2  0E00               	movlw	0
  3605   001FB4  2023               	addwfc	(right_135@i+1)^0,w,c
  3606   001FB6  6E23               	movwf	(right_135@i+1)^0,c
  3607   001FB8  BE23               	btfsc	(right_135@i+1)^0,7,c
  3608   001FBA  EFE8  F00F         	goto	u1331
  3609   001FBE  5023               	movf	(right_135@i+1)^0,w,c
  3610   001FC0  E109               	bnz	u1330
  3611   001FC2  0E32               	movlw	50
  3612   001FC4  5C22               	subwf	right_135@i^0,w,c
  3613   001FC6  A0D8               	btfss	status,0,c
  3614   001FC8  EFE8  F00F         	goto	u1331
  3615   001FCC  EFEA  F00F         	goto	u1330
  3616   001FD0                     u1331:
  3617   001FD0  EFB9  F00F         	goto	l2439
  3618   001FD4                     u1330:
  3619   001FD4                     
  3620                           ;../dc_motor.c: 163:     _delay((unsigned long)((230)*(64000000/4000.0)));
  3621   001FD4  0E13               	movlw	19
  3622   001FD6  6E21               	movwf	(??_right_135+1)^0,c
  3623   001FD8  0EAC               	movlw	172
  3624   001FDA  6E20               	movwf	??_right_135^0,c
  3625   001FDC  0E2A               	movlw	42
  3626   001FDE                     u1737:
  3627   001FDE  2EE8               	decfsz	wreg,f,c
  3628   001FE0  D7FE               	bra	u1737
  3629   001FE2  2E20               	decfsz	??_right_135^0,f,c
  3630   001FE4  D7FC               	bra	u1737
  3631   001FE6  2E21               	decfsz	(??_right_135+1)^0,f,c
  3632   001FE8  D7FA               	bra	u1737
  3633   001FEA  0012               	return		;funcret
  3634   001FEC                     __end_of_right_135:
  3635                           	callstack 0
  3636                           
  3637 ;; *************** function _reverse *****************
  3638 ;; Defined at:
  3639 ;;		line 91 in file "../dc_motor.c"
  3640 ;; Parameters:    Size  Location     Type
  3641 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3642 ;;		 -> main@motorL(9), 
  3643 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3644 ;;		 -> main@motorR(9), 
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;  i               2   33[COMRAM] int 
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3656 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3657 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3658 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3659 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3660 ;;Total ram usage:        8 bytes
  3661 ;; Hardware stack levels used: 1
  3662 ;; Hardware stack levels required when called: 4
  3663 ;; This function calls:
  3664 ;;		_setMotorPWM
  3665 ;; This function is called by:
  3666 ;;		_motor_action
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           	psect	text19
  3671   001FEC                     __ptext19:
  3672                           	callstack 0
  3673   001FEC                     _reverse:
  3674                           	callstack 25
  3675   001FEC                     
  3676                           ;../dc_motor.c: 91: void reverse (struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 92: {;../dc_motor.c: 93:     mL->direction = 0;
  3677   001FEC  EE20 F001          	lfsr	2,1
  3678   001FF0  501C               	movf	reverse@mL^0,w,c
  3679   001FF2  26D9               	addwf	fsr2l,f,c
  3680   001FF4  501D               	movf	(reverse@mL+1)^0,w,c
  3681   001FF6  22DA               	addwfc	fsr2h,f,c
  3682   001FF8  0E00               	movlw	0
  3683   001FFA  6EDF               	movwf	indf2,c
  3684                           
  3685                           ;../dc_motor.c: 94:     mR->direction = 0;
  3686   001FFC  EE20 F001          	lfsr	2,1
  3687   002000  501E               	movf	reverse@mR^0,w,c
  3688   002002  26D9               	addwf	fsr2l,f,c
  3689   002004  501F               	movf	(reverse@mR+1)^0,w,c
  3690   002006  22DA               	addwfc	fsr2h,f,c
  3691   002008  0E00               	movlw	0
  3692   00200A  6EDF               	movwf	indf2,c
  3693   00200C                     
  3694                           ;../dc_motor.c: 95:     for (int i=0;i<51;i=i + 2)
  3695   00200C  0E00               	movlw	0
  3696   00200E  6E23               	movwf	(reverse@i+1)^0,c
  3697   002010  0E00               	movlw	0
  3698   002012  6E22               	movwf	reverse@i^0,c
  3699   002014                     l2345:
  3700                           
  3701                           ;../dc_motor.c: 96:     {;../dc_motor.c: 97:         mL->power = i;
  3702   002014  C01C  FFD9         	movff	reverse@mL,fsr2l
  3703   002018  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  3704   00201C  C022  FFDF         	movff	reverse@i,indf2
  3705                           
  3706                           ;../dc_motor.c: 98:         mR->power = i;
  3707   002020  C01E  FFD9         	movff	reverse@mR,fsr2l
  3708   002024  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  3709   002028  C022  FFDF         	movff	reverse@i,indf2
  3710   00202C                     
  3711                           ;../dc_motor.c: 99:         setMotorPWM(mL);
  3712   00202C  C01C  F011         	movff	reverse@mL,setMotorPWM@m
  3713   002030  C01D  F012         	movff	reverse@mL+1,setMotorPWM@m+1
  3714   002034  EC93  F009         	call	_setMotorPWM	;wreg free
  3715   002038                     
  3716                           ;../dc_motor.c: 100:         setMotorPWM(mR);
  3717   002038  C01E  F011         	movff	reverse@mR,setMotorPWM@m
  3718   00203C  C01F  F012         	movff	reverse@mR+1,setMotorPWM@m+1
  3719   002040  EC93  F009         	call	_setMotorPWM	;wreg free
  3720   002044                     
  3721                           ;../dc_motor.c: 101:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3722   002044  0E35               	movlw	53
  3723   002046                     u1747:
  3724   002046  2EE8               	decfsz	wreg,f,c
  3725   002048  D7FE               	bra	u1747
  3726   00204A  F000               	nop	
  3727   00204C                     
  3728                           ;../dc_motor.c: 102:     }
  3729   00204C  0E02               	movlw	2
  3730   00204E  2422               	addwf	reverse@i^0,w,c
  3731   002050  6E22               	movwf	reverse@i^0,c
  3732   002052  0E00               	movlw	0
  3733   002054  2023               	addwfc	(reverse@i+1)^0,w,c
  3734   002056  6E23               	movwf	(reverse@i+1)^0,c
  3735   002058  BE23               	btfsc	(reverse@i+1)^0,7,c
  3736   00205A  EF38  F010         	goto	u1291
  3737   00205E  5023               	movf	(reverse@i+1)^0,w,c
  3738   002060  E109               	bnz	u1290
  3739   002062  0E33               	movlw	51
  3740   002064  5C22               	subwf	reverse@i^0,w,c
  3741   002066  A0D8               	btfss	status,0,c
  3742   002068  EF38  F010         	goto	u1291
  3743   00206C  EF3A  F010         	goto	u1290
  3744   002070                     u1291:
  3745   002070  EF0A  F010         	goto	l2345
  3746   002074                     u1290:
  3747   002074                     
  3748                           ;../dc_motor.c: 103:     _delay((unsigned long)((1100)*(64000000/4000.0)));
  3749   002074  0E5A               	movlw	90
  3750   002076  6E21               	movwf	(??_reverse+1)^0,c
  3751   002078  0E49               	movlw	73
  3752   00207A  6E20               	movwf	??_reverse^0,c
  3753   00207C  0EE7               	movlw	231
  3754   00207E                     u1757:
  3755   00207E  2EE8               	decfsz	wreg,f,c
  3756   002080  D7FE               	bra	u1757
  3757   002082  2E20               	decfsz	??_reverse^0,f,c
  3758   002084  D7FC               	bra	u1757
  3759   002086  2E21               	decfsz	(??_reverse+1)^0,f,c
  3760   002088  D7FA               	bra	u1757
  3761   00208A  F000               	nop	
  3762   00208C  0012               	return		;funcret
  3763   00208E                     __end_of_reverse:
  3764                           	callstack 0
  3765                           
  3766 ;; *************** function _left_90 *****************
  3767 ;; Defined at:
  3768 ;;		line 121 in file "../dc_motor.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3771 ;;		 -> main@motorL(9), 
  3772 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3773 ;;		 -> main@motorR(9), 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  i               2   33[COMRAM] int 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  1    wreg      void 
  3778 ;; Registers used:
  3779 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3785 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3786 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3787 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3788 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3789 ;;Total ram usage:        8 bytes
  3790 ;; Hardware stack levels used: 1
  3791 ;; Hardware stack levels required when called: 4
  3792 ;; This function calls:
  3793 ;;		_setMotorPWM
  3794 ;; This function is called by:
  3795 ;;		_motor_action
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           	psect	text20
  3800   001E04                     __ptext20:
  3801                           	callstack 0
  3802   001E04                     _left_90:
  3803                           	callstack 25
  3804   001E04                     
  3805                           ;../dc_motor.c: 121: void left_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 122: {;../dc_motor.c: 123:     mL->direction = 0;
  3806   001E04  EE20 F001          	lfsr	2,1
  3807   001E08  501C               	movf	left_90@mL^0,w,c
  3808   001E0A  26D9               	addwf	fsr2l,f,c
  3809   001E0C  501D               	movf	(left_90@mL+1)^0,w,c
  3810   001E0E  22DA               	addwfc	fsr2h,f,c
  3811   001E10  0E00               	movlw	0
  3812   001E12  6EDF               	movwf	indf2,c
  3813                           
  3814                           ;../dc_motor.c: 124:     mR->direction = 1;
  3815   001E14  EE20 F001          	lfsr	2,1
  3816   001E18  501E               	movf	left_90@mR^0,w,c
  3817   001E1A  26D9               	addwf	fsr2l,f,c
  3818   001E1C  501F               	movf	(left_90@mR+1)^0,w,c
  3819   001E1E  22DA               	addwfc	fsr2h,f,c
  3820   001E20  0E01               	movlw	1
  3821   001E22  6EDF               	movwf	indf2,c
  3822   001E24                     
  3823                           ;../dc_motor.c: 125:     for (int i = 0;i<50;i = i + 2)
  3824   001E24  0E00               	movlw	0
  3825   001E26  6E23               	movwf	(left_90@i+1)^0,c
  3826   001E28  0E00               	movlw	0
  3827   001E2A  6E22               	movwf	left_90@i^0,c
  3828   001E2C                     l2391:
  3829                           
  3830                           ;../dc_motor.c: 126:     {;../dc_motor.c: 127:         mL->power = 50 + i;
  3831   001E2C  5022               	movf	left_90@i^0,w,c
  3832   001E2E  0F32               	addlw	50
  3833   001E30  C01C  FFD9         	movff	left_90@mL,fsr2l
  3834   001E34  C01D  FFDA         	movff	left_90@mL+1,fsr2h
  3835   001E38  6EDF               	movwf	indf2,c
  3836   001E3A                     
  3837                           ;../dc_motor.c: 128:         mR->power = i;
  3838   001E3A  C01E  FFD9         	movff	left_90@mR,fsr2l
  3839   001E3E  C01F  FFDA         	movff	left_90@mR+1,fsr2h
  3840   001E42  C022  FFDF         	movff	left_90@i,indf2
  3841   001E46                     
  3842                           ;../dc_motor.c: 129:         setMotorPWM(mL);
  3843   001E46  C01C  F011         	movff	left_90@mL,setMotorPWM@m
  3844   001E4A  C01D  F012         	movff	left_90@mL+1,setMotorPWM@m+1
  3845   001E4E  EC93  F009         	call	_setMotorPWM	;wreg free
  3846   001E52                     
  3847                           ;../dc_motor.c: 130:         setMotorPWM(mR);
  3848   001E52  C01E  F011         	movff	left_90@mR,setMotorPWM@m
  3849   001E56  C01F  F012         	movff	left_90@mR+1,setMotorPWM@m+1
  3850   001E5A  EC93  F009         	call	_setMotorPWM	;wreg free
  3851   001E5E                     
  3852                           ;../dc_motor.c: 131:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3853   001E5E  0E35               	movlw	53
  3854   001E60                     u1767:
  3855   001E60  2EE8               	decfsz	wreg,f,c
  3856   001E62  D7FE               	bra	u1767
  3857   001E64  F000               	nop	
  3858   001E66                     
  3859                           ;../dc_motor.c: 132:     }
  3860   001E66  0E02               	movlw	2
  3861   001E68  2422               	addwf	left_90@i^0,w,c
  3862   001E6A  6E22               	movwf	left_90@i^0,c
  3863   001E6C  0E00               	movlw	0
  3864   001E6E  2023               	addwfc	(left_90@i+1)^0,w,c
  3865   001E70  6E23               	movwf	(left_90@i+1)^0,c
  3866   001E72  BE23               	btfsc	(left_90@i+1)^0,7,c
  3867   001E74  EF45  F00F         	goto	u1311
  3868   001E78  5023               	movf	(left_90@i+1)^0,w,c
  3869   001E7A  E109               	bnz	u1310
  3870   001E7C  0E32               	movlw	50
  3871   001E7E  5C22               	subwf	left_90@i^0,w,c
  3872   001E80  A0D8               	btfss	status,0,c
  3873   001E82  EF45  F00F         	goto	u1311
  3874   001E86  EF47  F00F         	goto	u1310
  3875   001E8A                     u1311:
  3876   001E8A  EF16  F00F         	goto	l2391
  3877   001E8E                     u1310:
  3878   001E8E                     
  3879                           ;../dc_motor.c: 133:     _delay((unsigned long)((165)*(64000000/4000.0)));
  3880   001E8E  0E0E               	movlw	14
  3881   001E90  6E21               	movwf	(??_left_90+1)^0,c
  3882   001E92  0E65               	movlw	101
  3883   001E94  6E20               	movwf	??_left_90^0,c
  3884   001E96  0E87               	movlw	135
  3885   001E98                     u1777:
  3886   001E98  2EE8               	decfsz	wreg,f,c
  3887   001E9A  D7FE               	bra	u1777
  3888   001E9C  2E20               	decfsz	??_left_90^0,f,c
  3889   001E9E  D7FC               	bra	u1777
  3890   001EA0  2E21               	decfsz	(??_left_90+1)^0,f,c
  3891   001EA2  D7FA               	bra	u1777
  3892   001EA4  F000               	nop	
  3893   001EA6  0012               	return		;funcret
  3894   001EA8                     __end_of_left_90:
  3895                           	callstack 0
  3896                           
  3897 ;; *************** function _left_135 *****************
  3898 ;; Defined at:
  3899 ;;		line 166 in file "../dc_motor.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3902 ;;		 -> main@motorL(9), 
  3903 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3904 ;;		 -> main@motorR(9), 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  i               2   33[COMRAM] int 
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      void 
  3909 ;; Registers used:
  3910 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3916 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3917 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3918 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3919 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3920 ;;Total ram usage:        8 bytes
  3921 ;; Hardware stack levels used: 1
  3922 ;; Hardware stack levels required when called: 4
  3923 ;; This function calls:
  3924 ;;		_setMotorPWM
  3925 ;; This function is called by:
  3926 ;;		_motor_action
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text21
  3931   00208E                     __ptext21:
  3932                           	callstack 0
  3933   00208E                     _left_135:
  3934                           	callstack 25
  3935   00208E                     
  3936                           ;../dc_motor.c: 166: void left_135(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 167: {;../dc_motor.c: 168:     mL->direction = 0;
  3937   00208E  EE20 F001          	lfsr	2,1
  3938   002092  501C               	movf	left_135@mL^0,w,c
  3939   002094  26D9               	addwf	fsr2l,f,c
  3940   002096  501D               	movf	(left_135@mL+1)^0,w,c
  3941   002098  22DA               	addwfc	fsr2h,f,c
  3942   00209A  0E00               	movlw	0
  3943   00209C  6EDF               	movwf	indf2,c
  3944                           
  3945                           ;../dc_motor.c: 169:     mR->direction = 1;
  3946   00209E  EE20 F001          	lfsr	2,1
  3947   0020A2  501E               	movf	left_135@mR^0,w,c
  3948   0020A4  26D9               	addwf	fsr2l,f,c
  3949   0020A6  501F               	movf	(left_135@mR+1)^0,w,c
  3950   0020A8  22DA               	addwfc	fsr2h,f,c
  3951   0020AA  0E01               	movlw	1
  3952   0020AC  6EDF               	movwf	indf2,c
  3953   0020AE                     
  3954                           ;../dc_motor.c: 170:     for (int i = 0;i<50;i = i + 2)
  3955   0020AE  0E00               	movlw	0
  3956   0020B0  6E23               	movwf	(left_135@i+1)^0,c
  3957   0020B2  0E00               	movlw	0
  3958   0020B4  6E22               	movwf	left_135@i^0,c
  3959   0020B6                     l2463:
  3960                           
  3961                           ;../dc_motor.c: 171:     {;../dc_motor.c: 172:         mL->power = 50 + i;
  3962   0020B6  5022               	movf	left_135@i^0,w,c
  3963   0020B8  0F32               	addlw	50
  3964   0020BA  C01C  FFD9         	movff	left_135@mL,fsr2l
  3965   0020BE  C01D  FFDA         	movff	left_135@mL+1,fsr2h
  3966   0020C2  6EDF               	movwf	indf2,c
  3967   0020C4                     
  3968                           ;../dc_motor.c: 173:         mR->power = i;
  3969   0020C4  C01E  FFD9         	movff	left_135@mR,fsr2l
  3970   0020C8  C01F  FFDA         	movff	left_135@mR+1,fsr2h
  3971   0020CC  C022  FFDF         	movff	left_135@i,indf2
  3972   0020D0                     
  3973                           ;../dc_motor.c: 174:         setMotorPWM(mL);
  3974   0020D0  C01C  F011         	movff	left_135@mL,setMotorPWM@m
  3975   0020D4  C01D  F012         	movff	left_135@mL+1,setMotorPWM@m+1
  3976   0020D8  EC93  F009         	call	_setMotorPWM	;wreg free
  3977   0020DC                     
  3978                           ;../dc_motor.c: 175:         setMotorPWM(mR);
  3979   0020DC  C01E  F011         	movff	left_135@mR,setMotorPWM@m
  3980   0020E0  C01F  F012         	movff	left_135@mR+1,setMotorPWM@m+1
  3981   0020E4  EC93  F009         	call	_setMotorPWM	;wreg free
  3982   0020E8                     
  3983                           ;../dc_motor.c: 176:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3984   0020E8  0E35               	movlw	53
  3985   0020EA                     u1787:
  3986   0020EA  2EE8               	decfsz	wreg,f,c
  3987   0020EC  D7FE               	bra	u1787
  3988   0020EE  F000               	nop	
  3989   0020F0                     
  3990                           ;../dc_motor.c: 177:     }
  3991   0020F0  0E02               	movlw	2
  3992   0020F2  2422               	addwf	left_135@i^0,w,c
  3993   0020F4  6E22               	movwf	left_135@i^0,c
  3994   0020F6  0E00               	movlw	0
  3995   0020F8  2023               	addwfc	(left_135@i+1)^0,w,c
  3996   0020FA  6E23               	movwf	(left_135@i+1)^0,c
  3997   0020FC  BE23               	btfsc	(left_135@i+1)^0,7,c
  3998   0020FE  EF8A  F010         	goto	u1341
  3999   002102  5023               	movf	(left_135@i+1)^0,w,c
  4000   002104  E109               	bnz	u1340
  4001   002106  0E32               	movlw	50
  4002   002108  5C22               	subwf	left_135@i^0,w,c
  4003   00210A  A0D8               	btfss	status,0,c
  4004   00210C  EF8A  F010         	goto	u1341
  4005   002110  EF8C  F010         	goto	u1340
  4006   002114                     u1341:
  4007   002114  EF5B  F010         	goto	l2463
  4008   002118                     u1340:
  4009   002118                     
  4010                           ;../dc_motor.c: 178:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4011   002118  0E13               	movlw	19
  4012   00211A  6E21               	movwf	(??_left_135+1)^0,c
  4013   00211C  0EAC               	movlw	172
  4014   00211E  6E20               	movwf	??_left_135^0,c
  4015   002120  0E2A               	movlw	42
  4016   002122                     u1797:
  4017   002122  2EE8               	decfsz	wreg,f,c
  4018   002124  D7FE               	bra	u1797
  4019   002126  2E20               	decfsz	??_left_135^0,f,c
  4020   002128  D7FC               	bra	u1797
  4021   00212A  2E21               	decfsz	(??_left_135+1)^0,f,c
  4022   00212C  D7FA               	bra	u1797
  4023   00212E  0012               	return		;funcret
  4024   002130                     __end_of_left_135:
  4025                           	callstack 0
  4026                           
  4027 ;; *************** function _setMotorPWM *****************
  4028 ;; Defined at:
  4029 ;;		line 38 in file "../dc_motor.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;  m               2   16[COMRAM] PTR struct DC_motor
  4032 ;;		 -> main@motorR(9), main@motorL(9), 
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;  PWMduty         2   25[COMRAM] int 
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  1    wreg      void 
  4037 ;; Registers used:
  4038 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4045 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4046 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4047 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4048 ;;Total ram usage:       11 bytes
  4049 ;; Hardware stack levels used: 1
  4050 ;; Hardware stack levels required when called: 3
  4051 ;; This function calls:
  4052 ;;		___awdiv
  4053 ;;		___wmul
  4054 ;; This function is called by:
  4055 ;;		_main
  4056 ;;		_stop
  4057 ;;		_reverse
  4058 ;;		_right_90
  4059 ;;		_left_90
  4060 ;;		_spin_180
  4061 ;;		_right_135
  4062 ;;		_left_135
  4063 ;;		_forward
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           	psect	text22
  4068   001326                     __ptext22:
  4069                           	callstack 0
  4070   001326                     _setMotorPWM:
  4071                           	callstack 26
  4072   001326                     
  4073                           ;../dc_motor.c: 38: void setMotorPWM(struct DC_motor *m);../dc_motor.c: 39: {;../dc_moto
      +                          r.c: 40:  int PWMduty;;../dc_motor.c: 42:  if (m->direction){
  4074   001326  EE20 F001          	lfsr	2,1
  4075   00132A  5011               	movf	setMotorPWM@m^0,w,c
  4076   00132C  26D9               	addwf	fsr2l,f,c
  4077   00132E  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4078   001330  22DA               	addwfc	fsr2h,f,c
  4079   001332  50DF               	movf	indf2,w,c
  4080   001334  B4D8               	btfsc	status,2,c
  4081   001336  EF9F  F009         	goto	u1221
  4082   00133A  EFA1  F009         	goto	u1220
  4083   00133E                     u1221:
  4084   00133E  EFD2  F009         	goto	l2259
  4085   001342                     u1220:
  4086   001342                     
  4087                           ;../dc_motor.c: 44:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  4088   001342  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  4089   001346  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4090   00134A  50DF               	movf	indf2,w,c
  4091   00134C  6E13               	movwf	??_setMotorPWM^0,c
  4092   00134E  5013               	movf	??_setMotorPWM^0,w,c
  4093   001350  6E03               	movwf	___wmul@multiplier^0,c
  4094   001352  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4095   001354  EE20 F007          	lfsr	2,7
  4096   001358  5011               	movf	setMotorPWM@m^0,w,c
  4097   00135A  26D9               	addwf	fsr2l,f,c
  4098   00135C  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4099   00135E  22DA               	addwfc	fsr2h,f,c
  4100   001360  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4101   001364  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4102   001368  EC00  F013         	call	___wmul	;wreg free
  4103   00136C  C003  F009         	movff	?___wmul,___awdiv@dividend
  4104   001370  C004  F00A         	movff	?___wmul+1,___awdiv@dividend+1
  4105   001374  0E00               	movlw	0
  4106   001376  6E0C               	movwf	(___awdiv@divisor+1)^0,c
  4107   001378  0E64               	movlw	100
  4108   00137A  6E0B               	movwf	___awdiv@divisor^0,c
  4109   00137C  EC9C  F00D         	call	___awdiv	;wreg free
  4110   001380  EE20 F007          	lfsr	2,7
  4111   001384  5011               	movf	setMotorPWM@m^0,w,c
  4112   001386  26D9               	addwf	fsr2l,f,c
  4113   001388  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4114   00138A  22DA               	addwfc	fsr2h,f,c
  4115   00138C  CFDE F014          	movff	postinc2,??_setMotorPWM+1
  4116   001390  CFDD F015          	movff	postdec2,??_setMotorPWM+2
  4117   001394  5009               	movf	?___awdiv^0,w,c
  4118   001396  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  4119   001398  6E1A               	movwf	setMotorPWM@PWMduty^0,c
  4120   00139A  500A               	movf	(?___awdiv+1)^0,w,c
  4121   00139C  5815               	subwfb	(??_setMotorPWM+2)^0,w,c
  4122   00139E  6E1B               	movwf	(setMotorPWM@PWMduty+1)^0,c
  4123                           
  4124                           ;../dc_motor.c: 45:  }
  4125   0013A0  EFF5  F009         	goto	l2261
  4126   0013A4                     l2259:
  4127                           
  4128                           ;../dc_motor.c: 48:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  4129   0013A4  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  4130   0013A8  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4131   0013AC  50DF               	movf	indf2,w,c
  4132   0013AE  6E13               	movwf	??_setMotorPWM^0,c
  4133   0013B0  5013               	movf	??_setMotorPWM^0,w,c
  4134   0013B2  6E03               	movwf	___wmul@multiplier^0,c
  4135   0013B4  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4136   0013B6  EE20 F007          	lfsr	2,7
  4137   0013BA  5011               	movf	setMotorPWM@m^0,w,c
  4138   0013BC  26D9               	addwf	fsr2l,f,c
  4139   0013BE  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4140   0013C0  22DA               	addwfc	fsr2h,f,c
  4141   0013C2  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4142   0013C6  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4143   0013CA  EC00  F013         	call	___wmul	;wreg free
  4144   0013CE  C003  F009         	movff	?___wmul,___awdiv@dividend
  4145   0013D2  C004  F00A         	movff	?___wmul+1,___awdiv@dividend+1
  4146   0013D6  0E00               	movlw	0
  4147   0013D8  6E0C               	movwf	(___awdiv@divisor+1)^0,c
  4148   0013DA  0E64               	movlw	100
  4149   0013DC  6E0B               	movwf	___awdiv@divisor^0,c
  4150   0013DE  EC9C  F00D         	call	___awdiv	;wreg free
  4151   0013E2  C009  F01A         	movff	?___awdiv,setMotorPWM@PWMduty
  4152   0013E6  C00A  F01B         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4153   0013EA                     l2261:
  4154                           
  4155                           ;../dc_motor.c: 51:  *(m->dutyHighByte) = PWMduty;
  4156   0013EA  EE20 F002          	lfsr	2,2
  4157   0013EE  5011               	movf	setMotorPWM@m^0,w,c
  4158   0013F0  26D9               	addwf	fsr2l,f,c
  4159   0013F2  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4160   0013F4  22DA               	addwfc	fsr2h,f,c
  4161   0013F6  CFDE F013          	movff	postinc2,??_setMotorPWM
  4162   0013FA  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4163   0013FE  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4164   001402  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4165   001406  C01A  FFDF         	movff	setMotorPWM@PWMduty,indf2
  4166   00140A                     
  4167                           ;../dc_motor.c: 53:  if (m->direction){
  4168   00140A  EE20 F001          	lfsr	2,1
  4169   00140E  5011               	movf	setMotorPWM@m^0,w,c
  4170   001410  26D9               	addwf	fsr2l,f,c
  4171   001412  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4172   001414  22DA               	addwfc	fsr2h,f,c
  4173   001416  50DF               	movf	indf2,w,c
  4174   001418  B4D8               	btfsc	status,2,c
  4175   00141A  EF11  F00A         	goto	u1231
  4176   00141E  EF13  F00A         	goto	u1230
  4177   001422                     u1231:
  4178   001422  EF48  F00A         	goto	l2267
  4179   001426                     u1230:
  4180   001426                     
  4181                           ;../dc_motor.c: 54:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  4182   001426  EE20 F004          	lfsr	2,4
  4183   00142A  5011               	movf	setMotorPWM@m^0,w,c
  4184   00142C  26D9               	addwf	fsr2l,f,c
  4185   00142E  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4186   001430  22DA               	addwfc	fsr2h,f,c
  4187   001432  CFDE F013          	movff	postinc2,??_setMotorPWM
  4188   001436  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4189   00143A  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4190   00143E  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4191   001442  EE10 F004          	lfsr	1,4
  4192   001446  5011               	movf	setMotorPWM@m^0,w,c
  4193   001448  26E1               	addwf	fsr1l,f,c
  4194   00144A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4195   00144C  22E2               	addwfc	fsr1h,f,c
  4196   00144E  CFE6 F015          	movff	postinc1,??_setMotorPWM+2
  4197   001452  CFE5 F016          	movff	postdec1,??_setMotorPWM+3
  4198   001456  C015  FFE1         	movff	??_setMotorPWM+2,fsr1l
  4199   00145A  C016  FFE2         	movff	??_setMotorPWM+3,fsr1h
  4200   00145E  50E7               	movf	indf1,w,c
  4201   001460  6E17               	movwf	(??_setMotorPWM+4)^0,c
  4202   001462  EE10 F006          	lfsr	1,6
  4203   001466  5011               	movf	setMotorPWM@m^0,w,c
  4204   001468  26E1               	addwf	fsr1l,f,c
  4205   00146A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4206   00146C  22E2               	addwfc	fsr1h,f,c
  4207   00146E  50E7               	movf	indf1,w,c
  4208   001470  6E18               	movwf	(??_setMotorPWM+5)^0,c
  4209   001472  0E01               	movlw	1
  4210   001474  6E19               	movwf	(??_setMotorPWM+6)^0,c
  4211   001476  2A18               	incf	(??_setMotorPWM+5)^0,f,c
  4212   001478  EF40  F00A         	goto	u1244
  4213   00147C                     u1245:
  4214   00147C  90D8               	bcf	status,0,c
  4215   00147E  3619               	rlcf	(??_setMotorPWM+6)^0,f,c
  4216   001480                     u1244:
  4217   001480  2E18               	decfsz	(??_setMotorPWM+5)^0,f,c
  4218   001482  EF3E  F00A         	goto	u1245
  4219   001486  5019               	movf	(??_setMotorPWM+6)^0,w,c
  4220   001488  1017               	iorwf	(??_setMotorPWM+4)^0,w,c
  4221   00148A  6EDF               	movwf	indf2,c
  4222                           
  4223                           ;../dc_motor.c: 55:  } else {
  4224   00148C  EF7C  F00A         	goto	l242
  4225   001490                     l2267:
  4226                           
  4227                           ;../dc_motor.c: 56:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  4228   001490  EE20 F004          	lfsr	2,4
  4229   001494  5011               	movf	setMotorPWM@m^0,w,c
  4230   001496  26D9               	addwf	fsr2l,f,c
  4231   001498  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4232   00149A  22DA               	addwfc	fsr2h,f,c
  4233   00149C  CFDE F013          	movff	postinc2,??_setMotorPWM
  4234   0014A0  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4235   0014A4  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4236   0014A8  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4237   0014AC  EE10 F004          	lfsr	1,4
  4238   0014B0  5011               	movf	setMotorPWM@m^0,w,c
  4239   0014B2  26E1               	addwf	fsr1l,f,c
  4240   0014B4  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4241   0014B6  22E2               	addwfc	fsr1h,f,c
  4242   0014B8  CFE6 F015          	movff	postinc1,??_setMotorPWM+2
  4243   0014BC  CFE5 F016          	movff	postdec1,??_setMotorPWM+3
  4244   0014C0  C015  FFE1         	movff	??_setMotorPWM+2,fsr1l
  4245   0014C4  C016  FFE2         	movff	??_setMotorPWM+3,fsr1h
  4246   0014C8  50E7               	movf	indf1,w,c
  4247   0014CA  6E17               	movwf	(??_setMotorPWM+4)^0,c
  4248   0014CC  EE10 F006          	lfsr	1,6
  4249   0014D0  5011               	movf	setMotorPWM@m^0,w,c
  4250   0014D2  26E1               	addwf	fsr1l,f,c
  4251   0014D4  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4252   0014D6  22E2               	addwfc	fsr1h,f,c
  4253   0014D8  50E7               	movf	indf1,w,c
  4254   0014DA  6E18               	movwf	(??_setMotorPWM+5)^0,c
  4255   0014DC  0E01               	movlw	1
  4256   0014DE  6E19               	movwf	(??_setMotorPWM+6)^0,c
  4257   0014E0  2A18               	incf	(??_setMotorPWM+5)^0,f,c
  4258   0014E2  EF75  F00A         	goto	u1254
  4259   0014E6                     u1255:
  4260   0014E6  90D8               	bcf	status,0,c
  4261   0014E8  3619               	rlcf	(??_setMotorPWM+6)^0,f,c
  4262   0014EA                     u1254:
  4263   0014EA  2E18               	decfsz	(??_setMotorPWM+5)^0,f,c
  4264   0014EC  EF73  F00A         	goto	u1255
  4265   0014F0  5019               	movf	(??_setMotorPWM+6)^0,w,c
  4266   0014F2  0AFF               	xorlw	255
  4267   0014F4  1417               	andwf	(??_setMotorPWM+4)^0,w,c
  4268   0014F6  6EDF               	movwf	indf2,c
  4269   0014F8                     l242:
  4270   0014F8  0012               	return		;funcret
  4271   0014FA                     __end_of_setMotorPWM:
  4272                           	callstack 0
  4273                           
  4274 ;; *************** function ___wmul *****************
  4275 ;; Defined at:
  4276 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  multiplier      2    2[COMRAM] unsigned int 
  4279 ;;  multiplicand    2    4[COMRAM] unsigned int 
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;  product         2    6[COMRAM] unsigned int 
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  2    2[COMRAM] unsigned int 
  4284 ;; Registers used:
  4285 ;;		wreg, status,2, status,0, prodl, prodh
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4291 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4292 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4294 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4295 ;;Total ram usage:        6 bytes
  4296 ;; Hardware stack levels used: 1
  4297 ;; Hardware stack levels required when called: 2
  4298 ;; This function calls:
  4299 ;;		Nothing
  4300 ;; This function is called by:
  4301 ;;		_setMotorPWM
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text23
  4306   002600                     __ptext23:
  4307                           	callstack 0
  4308   002600                     ___wmul:
  4309                           	callstack 26
  4310   002600  5003               	movf	___wmul@multiplier^0,w,c
  4311   002602  0205               	mulwf	___wmul@multiplicand^0,c
  4312   002604  CFF3 F007          	movff	prodl,___wmul@product
  4313   002608  CFF4 F008          	movff	prodh,___wmul@product+1
  4314   00260C  5003               	movf	___wmul@multiplier^0,w,c
  4315   00260E  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  4316   002610  50F3               	movf	243,w,c
  4317   002612  2608               	addwf	(___wmul@product+1)^0,f,c
  4318   002614  5004               	movf	(___wmul@multiplier+1)^0,w,c
  4319   002616  0205               	mulwf	___wmul@multiplicand^0,c
  4320   002618  50F3               	movf	243,w,c
  4321   00261A  2608               	addwf	(___wmul@product+1)^0,f,c
  4322   00261C  C007  F003         	movff	___wmul@product,?___wmul
  4323   002620  C008  F004         	movff	___wmul@product+1,?___wmul+1
  4324   002624  0012               	return		;funcret
  4325   002626                     __end_of___wmul:
  4326                           	callstack 0
  4327                           
  4328 ;; *************** function ___awdiv *****************
  4329 ;; Defined at:
  4330 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  dividend        2    8[COMRAM] int 
  4333 ;;  divisor         2   10[COMRAM] int 
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;  quotient        2   14[COMRAM] int 
  4336 ;;  sign            1   13[COMRAM] unsigned char 
  4337 ;;  counter         1   12[COMRAM] unsigned char 
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  2    8[COMRAM] int 
  4340 ;; Registers used:
  4341 ;;		wreg, status,2, status,0
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4347 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4348 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4350 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4351 ;;Total ram usage:        8 bytes
  4352 ;; Hardware stack levels used: 1
  4353 ;; Hardware stack levels required when called: 2
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_setMotorPWM
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text24
  4362   001B38                     __ptext24:
  4363                           	callstack 0
  4364   001B38                     ___awdiv:
  4365                           	callstack 26
  4366   001B38  0E00               	movlw	0
  4367   001B3A  6E0E               	movwf	___awdiv@sign^0,c
  4368   001B3C  BE0C               	btfsc	(___awdiv@divisor+1)^0,7,c
  4369   001B3E  EFA5  F00D         	goto	u1040
  4370   001B42  EFA3  F00D         	goto	u1041
  4371   001B46                     u1041:
  4372   001B46  EFAB  F00D         	goto	l2137
  4373   001B4A                     u1040:
  4374   001B4A  6C0B               	negf	___awdiv@divisor^0,c
  4375   001B4C  1E0C               	comf	(___awdiv@divisor+1)^0,f,c
  4376   001B4E  B0D8               	btfsc	status,0,c
  4377   001B50  2A0C               	incf	(___awdiv@divisor+1)^0,f,c
  4378   001B52  0E01               	movlw	1
  4379   001B54  6E0E               	movwf	___awdiv@sign^0,c
  4380   001B56                     l2137:
  4381   001B56  BE0A               	btfsc	(___awdiv@dividend+1)^0,7,c
  4382   001B58  EFB2  F00D         	goto	u1050
  4383   001B5C  EFB0  F00D         	goto	u1051
  4384   001B60                     u1051:
  4385   001B60  EFB8  F00D         	goto	l2143
  4386   001B64                     u1050:
  4387   001B64  6C09               	negf	___awdiv@dividend^0,c
  4388   001B66  1E0A               	comf	(___awdiv@dividend+1)^0,f,c
  4389   001B68  B0D8               	btfsc	status,0,c
  4390   001B6A  2A0A               	incf	(___awdiv@dividend+1)^0,f,c
  4391   001B6C  0E01               	movlw	1
  4392   001B6E  1A0E               	xorwf	___awdiv@sign^0,f,c
  4393   001B70                     l2143:
  4394   001B70  0E00               	movlw	0
  4395   001B72  6E10               	movwf	(___awdiv@quotient+1)^0,c
  4396   001B74  0E00               	movlw	0
  4397   001B76  6E0F               	movwf	___awdiv@quotient^0,c
  4398   001B78  500B               	movf	___awdiv@divisor^0,w,c
  4399   001B7A  100C               	iorwf	(___awdiv@divisor+1)^0,w,c
  4400   001B7C  B4D8               	btfsc	status,2,c
  4401   001B7E  EFC3  F00D         	goto	u1061
  4402   001B82  EFC5  F00D         	goto	u1060
  4403   001B86                     u1061:
  4404   001B86  EFED  F00D         	goto	l2165
  4405   001B8A                     u1060:
  4406   001B8A  0E01               	movlw	1
  4407   001B8C  6E0D               	movwf	___awdiv@counter^0,c
  4408   001B8E  EFCD  F00D         	goto	l2151
  4409   001B92                     l2149:
  4410   001B92  90D8               	bcf	status,0,c
  4411   001B94  360B               	rlcf	___awdiv@divisor^0,f,c
  4412   001B96  360C               	rlcf	(___awdiv@divisor+1)^0,f,c
  4413   001B98  2A0D               	incf	___awdiv@counter^0,f,c
  4414   001B9A                     l2151:
  4415   001B9A  AE0C               	btfss	(___awdiv@divisor+1)^0,7,c
  4416   001B9C  EFD2  F00D         	goto	u1071
  4417   001BA0  EFD4  F00D         	goto	u1070
  4418   001BA4                     u1071:
  4419   001BA4  EFC9  F00D         	goto	l2149
  4420   001BA8                     u1070:
  4421   001BA8                     l2153:
  4422   001BA8  90D8               	bcf	status,0,c
  4423   001BAA  360F               	rlcf	___awdiv@quotient^0,f,c
  4424   001BAC  3610               	rlcf	(___awdiv@quotient+1)^0,f,c
  4425   001BAE  500B               	movf	___awdiv@divisor^0,w,c
  4426   001BB0  5C09               	subwf	___awdiv@dividend^0,w,c
  4427   001BB2  500C               	movf	(___awdiv@divisor+1)^0,w,c
  4428   001BB4  580A               	subwfb	(___awdiv@dividend+1)^0,w,c
  4429   001BB6  A0D8               	btfss	status,0,c
  4430   001BB8  EFE0  F00D         	goto	u1081
  4431   001BBC  EFE2  F00D         	goto	u1080
  4432   001BC0                     u1081:
  4433   001BC0  EFE7  F00D         	goto	l2161
  4434   001BC4                     u1080:
  4435   001BC4  500B               	movf	___awdiv@divisor^0,w,c
  4436   001BC6  5E09               	subwf	___awdiv@dividend^0,f,c
  4437   001BC8  500C               	movf	(___awdiv@divisor+1)^0,w,c
  4438   001BCA  5A0A               	subwfb	(___awdiv@dividend+1)^0,f,c
  4439   001BCC  800F               	bsf	___awdiv@quotient^0,0,c
  4440   001BCE                     l2161:
  4441   001BCE  90D8               	bcf	status,0,c
  4442   001BD0  320C               	rrcf	(___awdiv@divisor+1)^0,f,c
  4443   001BD2  320B               	rrcf	___awdiv@divisor^0,f,c
  4444   001BD4  2E0D               	decfsz	___awdiv@counter^0,f,c
  4445   001BD6  EFD4  F00D         	goto	l2153
  4446   001BDA                     l2165:
  4447   001BDA  500E               	movf	___awdiv@sign^0,w,c
  4448   001BDC  B4D8               	btfsc	status,2,c
  4449   001BDE  EFF3  F00D         	goto	u1091
  4450   001BE2  EFF5  F00D         	goto	u1090
  4451   001BE6                     u1091:
  4452   001BE6  EFF9  F00D         	goto	l2169
  4453   001BEA                     u1090:
  4454   001BEA  6C0F               	negf	___awdiv@quotient^0,c
  4455   001BEC  1E10               	comf	(___awdiv@quotient+1)^0,f,c
  4456   001BEE  B0D8               	btfsc	status,0,c
  4457   001BF0  2A10               	incf	(___awdiv@quotient+1)^0,f,c
  4458   001BF2                     l2169:
  4459   001BF2  C00F  F009         	movff	___awdiv@quotient,?___awdiv
  4460   001BF6  C010  F00A         	movff	___awdiv@quotient+1,?___awdiv+1
  4461   001BFA  0012               	return		;funcret
  4462   001BFC                     __end_of___awdiv:
  4463                           	callstack 0
  4464                           
  4465 ;; *************** function _initUSART4 *****************
  4466 ;; Defined at:
  4467 ;;		line 5 in file "../serial.c"
  4468 ;; Parameters:    Size  Location     Type
  4469 ;;		None
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;		None
  4472 ;; Return value:  Size  Location     Type
  4473 ;;                  1    wreg      void 
  4474 ;; Registers used:
  4475 ;;		wreg, status,2
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4485 ;;Total ram usage:        0 bytes
  4486 ;; Hardware stack levels used: 1
  4487 ;; Hardware stack levels required when called: 2
  4488 ;; This function calls:
  4489 ;;		Nothing
  4490 ;; This function is called by:
  4491 ;;		_main
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           	psect	text25
  4496   002666                     __ptext25:
  4497                           	callstack 0
  4498   002666                     _initUSART4:
  4499                           	callstack 28
  4500   002666                     
  4501                           ;../serial.c: 9:     RC0PPS = 0x12;
  4502   002666  0E12               	movlw	18
  4503   002668  010E               	movlb	14	; () banked
  4504   00266A  6F62               	movwf	98,b	;volatile
  4505                           
  4506                           ;../serial.c: 10:     RX4PPS = 0x11;
  4507   00266C  0E11               	movlw	17
  4508   00266E  6F15               	movwf	21,b	;volatile
  4509   002670                     
  4510                           ; BSR set to: 14
  4511                           ;../serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  4512   002670  97E9               	bcf	233,3,b	;volatile
  4513   002672                     
  4514                           ; BSR set to: 14
  4515                           ;../serial.c: 13:     TX4STAbits.BRGH = 0;
  4516   002672  95E8               	bcf	232,2,b	;volatile
  4517                           
  4518                           ;../serial.c: 14:     SP4BRGL = 103;
  4519   002674  0E67               	movlw	103
  4520   002676  6FE5               	movwf	229,b	;volatile
  4521                           
  4522                           ;../serial.c: 15:     SP4BRGH = 0;
  4523   002678  0E00               	movlw	0
  4524   00267A  6FE6               	movwf	230,b	;volatile
  4525   00267C                     
  4526                           ; BSR set to: 14
  4527                           ;../serial.c: 17:     RC4STAbits.CREN = 1;
  4528   00267C  89E7               	bsf	231,4,b	;volatile
  4529   00267E                     
  4530                           ; BSR set to: 14
  4531                           ;../serial.c: 18:     TX4STAbits.TXEN = 1;
  4532   00267E  8BE8               	bsf	232,5,b	;volatile
  4533   002680                     
  4534                           ; BSR set to: 14
  4535                           ;../serial.c: 19:     RC4STAbits.SPEN = 1;
  4536   002680  8FE7               	bsf	231,7,b	;volatile
  4537   002682                     
  4538                           ; BSR set to: 14
  4539   002682  0012               	return		;funcret
  4540   002684                     __end_of_initUSART4:
  4541                           	callstack 0
  4542                           
  4543 ;; *************** function _initDCmotorsPWM *****************
  4544 ;; Defined at:
  4545 ;;		line 5 in file "../dc_motor.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;  PWMperiod       2    2[COMRAM] int 
  4548 ;; Auto vars:     Size  Location     Type
  4549 ;;		None
  4550 ;; Return value:  Size  Location     Type
  4551 ;;                  1    wreg      void 
  4552 ;; Registers used:
  4553 ;;		wreg, status,2
  4554 ;; Tracked objects:
  4555 ;;		On entry : 0/0
  4556 ;;		On exit  : 0/0
  4557 ;;		Unchanged: 0/0
  4558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4559 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4562 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4563 ;;Total ram usage:        2 bytes
  4564 ;; Hardware stack levels used: 1
  4565 ;; Hardware stack levels required when called: 2
  4566 ;; This function calls:
  4567 ;;		Nothing
  4568 ;; This function is called by:
  4569 ;;		_main
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573                           	psect	text26
  4574   0024BA                     __ptext26:
  4575                           	callstack 0
  4576   0024BA                     _initDCmotorsPWM:
  4577                           	callstack 28
  4578   0024BA                     
  4579                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  4580   0024BA  9485               	bcf	133,2,c	;volatile
  4581                           
  4582                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  4583   0024BC  9885               	bcf	133,4,c	;volatile
  4584                           
  4585                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  4586   0024BE  9E83               	bcf	131,7,c	;volatile
  4587                           
  4588                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  4589   0024C0  9C87               	bcf	135,6,c	;volatile
  4590                           
  4591                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  4592   0024C2  947D               	bcf	125,2,c	;volatile
  4593                           
  4594                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  4595   0024C4  987D               	bcf	125,4,c	;volatile
  4596                           
  4597                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  4598   0024C6  9E7B               	bcf	123,7,c	;volatile
  4599                           
  4600                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  4601   0024C8  9C7F               	bcf	127,6,c	;volatile
  4602   0024CA                     
  4603                           ;../dc_motor.c: 17:     T2CONbits.CKPS=0b0011;
  4604   0024CA  50BD               	movf	189,w,c	;volatile
  4605   0024CC  0B8F               	andlw	-113
  4606   0024CE  0930               	iorlw	48
  4607   0024D0  6EBD               	movwf	189,c	;volatile
  4608                           
  4609                           ;../dc_motor.c: 18:     T2HLTbits.MODE=0b00000;
  4610   0024D2  0EE0               	movlw	-32
  4611   0024D4  16BE               	andwf	190,f,c	;volatile
  4612                           
  4613                           ;../dc_motor.c: 19:     T2CLKCONbits.CS=0b0001;
  4614   0024D6  50BF               	movf	191,w,c	;volatile
  4615   0024D8  0BF0               	andlw	-16
  4616   0024DA  0901               	iorlw	1
  4617   0024DC  6EBF               	movwf	191,c	;volatile
  4618   0024DE                     
  4619                           ;../dc_motor.c: 23:     T2PR=PWMperiod;
  4620   0024DE  C003  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4621   0024E2                     
  4622                           ;../dc_motor.c: 24:     T2CONbits.ON=1;
  4623   0024E2  8EBD               	bsf	189,7,c	;volatile
  4624                           
  4625                           ;../dc_motor.c: 26:     RE2PPS=0x0A;
  4626   0024E4  0E0A               	movlw	10
  4627   0024E6  010E               	movlb	14	; () banked
  4628   0024E8  6F74               	movwf	116,b	;volatile
  4629                           
  4630                           ;../dc_motor.c: 27:     RC7PPS=0x0B;
  4631   0024EA  0E0B               	movlw	11
  4632   0024EC  6F69               	movwf	105,b	;volatile
  4633                           
  4634                           ;../dc_motor.c: 29:     PWM6DCH=0;
  4635   0024EE  0E00               	movlw	0
  4636   0024F0  6EA3               	movwf	163,c	;volatile
  4637                           
  4638                           ;../dc_motor.c: 30:     PWM7DCH=0;
  4639   0024F2  0E00               	movlw	0
  4640   0024F4  6EA0               	movwf	160,c	;volatile
  4641   0024F6                     
  4642                           ; BSR set to: 14
  4643                           ;../dc_motor.c: 32:     PWM6CONbits.EN = 1;
  4644   0024F6  8EA4               	bsf	164,7,c	;volatile
  4645   0024F8                     
  4646                           ; BSR set to: 14
  4647                           ;../dc_motor.c: 33:     PWM7CONbits.EN = 1;
  4648   0024F8  8EA1               	bsf	161,7,c	;volatile
  4649   0024FA                     
  4650                           ; BSR set to: 14
  4651   0024FA  0012               	return		;funcret
  4652   0024FC                     __end_of_initDCmotorsPWM:
  4653                           	callstack 0
  4654                           
  4655 ;; *************** function _color_read *****************
  4656 ;; Defined at:
  4657 ;;		line 110 in file "../color.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  rgb             2   13[COMRAM] PTR struct RGB_val
  4660 ;;		 -> main@RGB_recorded(8), main@RGB_calibrated(8), 
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;		None
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  1    wreg      void 
  4665 ;; Registers used:
  4666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 0/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4672 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4674 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4675 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4676 ;;Total ram usage:        4 bytes
  4677 ;; Hardware stack levels used: 1
  4678 ;; Hardware stack levels required when called: 5
  4679 ;; This function calls:
  4680 ;;		_color_read_Blue
  4681 ;;		_color_read_Green
  4682 ;;		_color_read_Luminosity
  4683 ;;		_color_read_Red
  4684 ;; This function is called by:
  4685 ;;		_main
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text27
  4690   001CBA                     __ptext27:
  4691                           	callstack 0
  4692   001CBA                     _color_read:
  4693                           	callstack 25
  4694   001CBA                     
  4695                           ;../color.c: 110: void color_read(struct RGB_val *rgb);../color.c: 111: {;../color.c: 11
      +                          2:     rgb->L = color_read_Luminosity();
  4696   001CBA  ECC3  F011         	call	_color_read_Luminosity	;wreg free
  4697   001CBE  C00E  FFD9         	movff	color_read@rgb,fsr2l
  4698   001CC2  C00F  FFDA         	movff	color_read@rgb+1,fsr2h
  4699   001CC6  C007  FFDE         	movff	?_color_read_Luminosity,postinc2
  4700   001CCA  C008  FFDD         	movff	?_color_read_Luminosity+1,postdec2
  4701   001CCE                     
  4702                           ;../color.c: 113:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4703   001CCE  0E09               	movlw	9
  4704   001CD0  6E11               	movwf	(??_color_read+1)^0,c
  4705   001CD2  0E1E               	movlw	30
  4706   001CD4  6E10               	movwf	??_color_read^0,c
  4707   001CD6  0EE4               	movlw	228
  4708   001CD8                     u1807:
  4709   001CD8  2EE8               	decfsz	wreg,f,c
  4710   001CDA  D7FE               	bra	u1807
  4711   001CDC  2E10               	decfsz	??_color_read^0,f,c
  4712   001CDE  D7FC               	bra	u1807
  4713   001CE0  2E11               	decfsz	(??_color_read+1)^0,f,c
  4714   001CE2  D7FA               	bra	u1807
  4715   001CE4  D000               	nop2	
  4716   001CE6                     
  4717                           ;../color.c: 114:     rgb->R = color_read_Red();
  4718   001CE6  EC9B  F011         	call	_color_read_Red	;wreg free
  4719   001CEA  EE20 F002          	lfsr	2,2
  4720   001CEE  500E               	movf	color_read@rgb^0,w,c
  4721   001CF0  26D9               	addwf	fsr2l,f,c
  4722   001CF2  500F               	movf	(color_read@rgb+1)^0,w,c
  4723   001CF4  22DA               	addwfc	fsr2h,f,c
  4724   001CF6  C007  FFDE         	movff	?_color_read_Red,postinc2
  4725   001CFA  C008  FFDD         	movff	?_color_read_Red+1,postdec2
  4726                           
  4727                           ;../color.c: 115:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4728   001CFE  0E09               	movlw	9
  4729   001D00  6E11               	movwf	(??_color_read+1)^0,c
  4730   001D02  0E1E               	movlw	30
  4731   001D04  6E10               	movwf	??_color_read^0,c
  4732   001D06  0EE4               	movlw	228
  4733   001D08                     u1817:
  4734   001D08  2EE8               	decfsz	wreg,f,c
  4735   001D0A  D7FE               	bra	u1817
  4736   001D0C  2E10               	decfsz	??_color_read^0,f,c
  4737   001D0E  D7FC               	bra	u1817
  4738   001D10  2E11               	decfsz	(??_color_read+1)^0,f,c
  4739   001D12  D7FA               	bra	u1817
  4740   001D14  D000               	nop2	
  4741   001D16                     
  4742                           ;../color.c: 116:     rgb->G = color_read_Green();
  4743   001D16  ECEB  F011         	call	_color_read_Green	;wreg free
  4744   001D1A  EE20 F004          	lfsr	2,4
  4745   001D1E  500E               	movf	color_read@rgb^0,w,c
  4746   001D20  26D9               	addwf	fsr2l,f,c
  4747   001D22  500F               	movf	(color_read@rgb+1)^0,w,c
  4748   001D24  22DA               	addwfc	fsr2h,f,c
  4749   001D26  C007  FFDE         	movff	?_color_read_Green,postinc2
  4750   001D2A  C008  FFDD         	movff	?_color_read_Green+1,postdec2
  4751   001D2E                     
  4752                           ;../color.c: 117:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4753   001D2E  0E09               	movlw	9
  4754   001D30  6E11               	movwf	(??_color_read+1)^0,c
  4755   001D32  0E1E               	movlw	30
  4756   001D34  6E10               	movwf	??_color_read^0,c
  4757   001D36  0EE4               	movlw	228
  4758   001D38                     u1827:
  4759   001D38  2EE8               	decfsz	wreg,f,c
  4760   001D3A  D7FE               	bra	u1827
  4761   001D3C  2E10               	decfsz	??_color_read^0,f,c
  4762   001D3E  D7FC               	bra	u1827
  4763   001D40  2E11               	decfsz	(??_color_read+1)^0,f,c
  4764   001D42  D7FA               	bra	u1827
  4765   001D44  D000               	nop2	
  4766                           
  4767                           ;../color.c: 118:     rgb->B = color_read_Blue();
  4768   001D46  EC13  F012         	call	_color_read_Blue	;wreg free
  4769   001D4A  EE20 F006          	lfsr	2,6
  4770   001D4E  500E               	movf	color_read@rgb^0,w,c
  4771   001D50  26D9               	addwf	fsr2l,f,c
  4772   001D52  500F               	movf	(color_read@rgb+1)^0,w,c
  4773   001D54  22DA               	addwfc	fsr2h,f,c
  4774   001D56  C007  FFDE         	movff	?_color_read_Blue,postinc2
  4775   001D5A  C008  FFDD         	movff	?_color_read_Blue+1,postdec2
  4776   001D5E  0012               	return		;funcret
  4777   001D60                     __end_of_color_read:
  4778                           	callstack 0
  4779                           
  4780 ;; *************** function _color_read_Red *****************
  4781 ;; Defined at:
  4782 ;;		line 68 in file "../color.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;		None
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;  tmp             2   11[COMRAM] unsigned int 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  2    6[COMRAM] unsigned int 
  4789 ;; Registers used:
  4790 ;;		wreg, status,2, status,0, cstack
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4797 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4798 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4799 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4800 ;;Total ram usage:        7 bytes
  4801 ;; Hardware stack levels used: 1
  4802 ;; Hardware stack levels required when called: 4
  4803 ;; This function calls:
  4804 ;;		_I2C_2_Master_Read
  4805 ;;		_I2C_2_Master_RepStart
  4806 ;;		_I2C_2_Master_Start
  4807 ;;		_I2C_2_Master_Stop
  4808 ;;		_I2C_2_Master_Write
  4809 ;; This function is called by:
  4810 ;;		_color_read
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814                           	psect	text28
  4815   002336                     __ptext28:
  4816                           	callstack 0
  4817   002336                     _color_read_Red:
  4818                           	callstack 25
  4819   002336                     
  4820                           ;../color.c: 70:  unsigned int tmp;;../color.c: 71:  I2C_2_Master_Start();
  4821   002336  EC71  F013         	call	_I2C_2_Master_Start	;wreg free
  4822                           
  4823                           ;../color.c: 72:  I2C_2_Master_Write(0x52 | 0x00);
  4824   00233A  0E52               	movlw	82
  4825   00233C  EC5B  F013         	call	_I2C_2_Master_Write
  4826                           
  4827                           ;../color.c: 73:  I2C_2_Master_Write(0xA0 | 0x16);
  4828   002340  0EB6               	movlw	182
  4829   002342  EC5B  F013         	call	_I2C_2_Master_Write
  4830                           
  4831                           ;../color.c: 74:  I2C_2_Master_RepStart();
  4832   002346  EC67  F013         	call	_I2C_2_Master_RepStart	;wreg free
  4833                           
  4834                           ;../color.c: 75:  I2C_2_Master_Write(0x52 | 0x01);
  4835   00234A  0E53               	movlw	83
  4836   00234C  EC5B  F013         	call	_I2C_2_Master_Write
  4837                           
  4838                           ;../color.c: 76:  tmp=I2C_2_Master_Read(1);
  4839   002350  0E01               	movlw	1
  4840   002352  EC7E  F012         	call	_I2C_2_Master_Read
  4841   002356  6E09               	movwf	??_color_read_Red^0,c
  4842   002358  5009               	movf	??_color_read_Red^0,w,c
  4843   00235A  6E0C               	movwf	color_read_Red@tmp^0,c
  4844   00235C  6A0D               	clrf	(color_read_Red@tmp+1)^0,c
  4845                           
  4846                           ;../color.c: 77:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4847   00235E  0E00               	movlw	0
  4848   002360  EC7E  F012         	call	_I2C_2_Master_Read
  4849   002364  6E09               	movwf	??_color_read_Red^0,c
  4850   002366  5009               	movf	??_color_read_Red^0,w,c
  4851   002368  6E0B               	movwf	(??_color_read_Red+2)^0,c
  4852   00236A  6A0A               	clrf	(??_color_read_Red+1)^0,c
  4853   00236C  500C               	movf	color_read_Red@tmp^0,w,c
  4854   00236E  100A               	iorwf	(??_color_read_Red+1)^0,w,c
  4855   002370  6E0C               	movwf	color_read_Red@tmp^0,c
  4856   002372  500D               	movf	(color_read_Red@tmp+1)^0,w,c
  4857   002374  100B               	iorwf	(??_color_read_Red+2)^0,w,c
  4858   002376  6E0D               	movwf	(color_read_Red@tmp+1)^0,c
  4859                           
  4860                           ;../color.c: 78:  I2C_2_Master_Stop();
  4861   002378  EC6C  F013         	call	_I2C_2_Master_Stop	;wreg free
  4862   00237C                     
  4863                           ;../color.c: 79:  return tmp;
  4864   00237C  C00C  F007         	movff	color_read_Red@tmp,?_color_read_Red
  4865   002380  C00D  F008         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  4866   002384  0012               	return		;funcret
  4867   002386                     __end_of_color_read_Red:
  4868                           	callstack 0
  4869                           
  4870 ;; *************** function _color_read_Luminosity *****************
  4871 ;; Defined at:
  4872 ;;		line 54 in file "../color.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;		None
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  tmp             2   11[COMRAM] unsigned int 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  2    6[COMRAM] unsigned int 
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0, cstack
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4886 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4888 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4889 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4890 ;;Total ram usage:        7 bytes
  4891 ;; Hardware stack levels used: 1
  4892 ;; Hardware stack levels required when called: 4
  4893 ;; This function calls:
  4894 ;;		_I2C_2_Master_Read
  4895 ;;		_I2C_2_Master_RepStart
  4896 ;;		_I2C_2_Master_Start
  4897 ;;		_I2C_2_Master_Stop
  4898 ;;		_I2C_2_Master_Write
  4899 ;; This function is called by:
  4900 ;;		_color_read
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           	psect	text29
  4905   002386                     __ptext29:
  4906                           	callstack 0
  4907   002386                     _color_read_Luminosity:
  4908                           	callstack 25
  4909   002386                     
  4910                           ;../color.c: 56:  unsigned int tmp;;../color.c: 57:  I2C_2_Master_Start();
  4911   002386  EC71  F013         	call	_I2C_2_Master_Start	;wreg free
  4912                           
  4913                           ;../color.c: 58:  I2C_2_Master_Write(0x52 | 0x00);
  4914   00238A  0E52               	movlw	82
  4915   00238C  EC5B  F013         	call	_I2C_2_Master_Write
  4916                           
  4917                           ;../color.c: 59:  I2C_2_Master_Write(0xA0 | 0x14);
  4918   002390  0EB4               	movlw	180
  4919   002392  EC5B  F013         	call	_I2C_2_Master_Write
  4920                           
  4921                           ;../color.c: 60:  I2C_2_Master_RepStart();
  4922   002396  EC67  F013         	call	_I2C_2_Master_RepStart	;wreg free
  4923                           
  4924                           ;../color.c: 61:  I2C_2_Master_Write(0x52 | 0x01);
  4925   00239A  0E53               	movlw	83
  4926   00239C  EC5B  F013         	call	_I2C_2_Master_Write
  4927                           
  4928                           ;../color.c: 62:  tmp=I2C_2_Master_Read(1);
  4929   0023A0  0E01               	movlw	1
  4930   0023A2  EC7E  F012         	call	_I2C_2_Master_Read
  4931   0023A6  6E09               	movwf	??_color_read_Luminosity^0,c
  4932   0023A8  5009               	movf	??_color_read_Luminosity^0,w,c
  4933   0023AA  6E0C               	movwf	color_read_Luminosity@tmp^0,c
  4934   0023AC  6A0D               	clrf	(color_read_Luminosity@tmp+1)^0,c
  4935                           
  4936                           ;../color.c: 63:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4937   0023AE  0E00               	movlw	0
  4938   0023B0  EC7E  F012         	call	_I2C_2_Master_Read
  4939   0023B4  6E09               	movwf	??_color_read_Luminosity^0,c
  4940   0023B6  5009               	movf	??_color_read_Luminosity^0,w,c
  4941   0023B8  6E0B               	movwf	(??_color_read_Luminosity+2)^0,c
  4942   0023BA  6A0A               	clrf	(??_color_read_Luminosity+1)^0,c
  4943   0023BC  500C               	movf	color_read_Luminosity@tmp^0,w,c
  4944   0023BE  100A               	iorwf	(??_color_read_Luminosity+1)^0,w,c
  4945   0023C0  6E0C               	movwf	color_read_Luminosity@tmp^0,c
  4946   0023C2  500D               	movf	(color_read_Luminosity@tmp+1)^0,w,c
  4947   0023C4  100B               	iorwf	(??_color_read_Luminosity+2)^0,w,c
  4948   0023C6  6E0D               	movwf	(color_read_Luminosity@tmp+1)^0,c
  4949                           
  4950                           ;../color.c: 64:  I2C_2_Master_Stop();
  4951   0023C8  EC6C  F013         	call	_I2C_2_Master_Stop	;wreg free
  4952   0023CC                     
  4953                           ;../color.c: 65:  return tmp;
  4954   0023CC  C00C  F007         	movff	color_read_Luminosity@tmp,?_color_read_Luminosity
  4955   0023D0  C00D  F008         	movff	color_read_Luminosity@tmp+1,?_color_read_Luminosity+1
  4956   0023D4  0012               	return		;funcret
  4957   0023D6                     __end_of_color_read_Luminosity:
  4958                           	callstack 0
  4959                           
  4960 ;; *************** function _color_read_Green *****************
  4961 ;; Defined at:
  4962 ;;		line 82 in file "../color.c"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;		None
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;  tmp             2   11[COMRAM] unsigned int 
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  2    6[COMRAM] unsigned int 
  4969 ;; Registers used:
  4970 ;;		wreg, status,2, status,0, cstack
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4976 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4977 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4978 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4979 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4980 ;;Total ram usage:        7 bytes
  4981 ;; Hardware stack levels used: 1
  4982 ;; Hardware stack levels required when called: 4
  4983 ;; This function calls:
  4984 ;;		_I2C_2_Master_Read
  4985 ;;		_I2C_2_Master_RepStart
  4986 ;;		_I2C_2_Master_Start
  4987 ;;		_I2C_2_Master_Stop
  4988 ;;		_I2C_2_Master_Write
  4989 ;; This function is called by:
  4990 ;;		_color_read
  4991 ;; This function uses a non-reentrant model
  4992 ;;
  4993                           
  4994                           	psect	text30
  4995   0023D6                     __ptext30:
  4996                           	callstack 0
  4997   0023D6                     _color_read_Green:
  4998                           	callstack 25
  4999   0023D6                     
  5000                           ;../color.c: 84:  unsigned int tmp;;../color.c: 85:  I2C_2_Master_Start();
  5001   0023D6  EC71  F013         	call	_I2C_2_Master_Start	;wreg free
  5002                           
  5003                           ;../color.c: 86:  I2C_2_Master_Write(0x52 | 0x00);
  5004   0023DA  0E52               	movlw	82
  5005   0023DC  EC5B  F013         	call	_I2C_2_Master_Write
  5006                           
  5007                           ;../color.c: 87:  I2C_2_Master_Write(0xA0 | 0x18);
  5008   0023E0  0EB8               	movlw	184
  5009   0023E2  EC5B  F013         	call	_I2C_2_Master_Write
  5010                           
  5011                           ;../color.c: 88:  I2C_2_Master_RepStart();
  5012   0023E6  EC67  F013         	call	_I2C_2_Master_RepStart	;wreg free
  5013                           
  5014                           ;../color.c: 89:  I2C_2_Master_Write(0x52 | 0x01);
  5015   0023EA  0E53               	movlw	83
  5016   0023EC  EC5B  F013         	call	_I2C_2_Master_Write
  5017                           
  5018                           ;../color.c: 90:  tmp=I2C_2_Master_Read(1);
  5019   0023F0  0E01               	movlw	1
  5020   0023F2  EC7E  F012         	call	_I2C_2_Master_Read
  5021   0023F6  6E09               	movwf	??_color_read_Green^0,c
  5022   0023F8  5009               	movf	??_color_read_Green^0,w,c
  5023   0023FA  6E0C               	movwf	color_read_Green@tmp^0,c
  5024   0023FC  6A0D               	clrf	(color_read_Green@tmp+1)^0,c
  5025                           
  5026                           ;../color.c: 91:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5027   0023FE  0E00               	movlw	0
  5028   002400  EC7E  F012         	call	_I2C_2_Master_Read
  5029   002404  6E09               	movwf	??_color_read_Green^0,c
  5030   002406  5009               	movf	??_color_read_Green^0,w,c
  5031   002408  6E0B               	movwf	(??_color_read_Green+2)^0,c
  5032   00240A  6A0A               	clrf	(??_color_read_Green+1)^0,c
  5033   00240C  500C               	movf	color_read_Green@tmp^0,w,c
  5034   00240E  100A               	iorwf	(??_color_read_Green+1)^0,w,c
  5035   002410  6E0C               	movwf	color_read_Green@tmp^0,c
  5036   002412  500D               	movf	(color_read_Green@tmp+1)^0,w,c
  5037   002414  100B               	iorwf	(??_color_read_Green+2)^0,w,c
  5038   002416  6E0D               	movwf	(color_read_Green@tmp+1)^0,c
  5039                           
  5040                           ;../color.c: 92:  I2C_2_Master_Stop();
  5041   002418  EC6C  F013         	call	_I2C_2_Master_Stop	;wreg free
  5042   00241C                     
  5043                           ;../color.c: 93:  return tmp;
  5044   00241C  C00C  F007         	movff	color_read_Green@tmp,?_color_read_Green
  5045   002420  C00D  F008         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5046   002424  0012               	return		;funcret
  5047   002426                     __end_of_color_read_Green:
  5048                           	callstack 0
  5049                           
  5050 ;; *************** function _color_read_Blue *****************
  5051 ;; Defined at:
  5052 ;;		line 96 in file "../color.c"
  5053 ;; Parameters:    Size  Location     Type
  5054 ;;		None
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;  tmp             2   11[COMRAM] unsigned int 
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  2    6[COMRAM] unsigned int 
  5059 ;; Registers used:
  5060 ;;		wreg, status,2, status,0, cstack
  5061 ;; Tracked objects:
  5062 ;;		On entry : 0/0
  5063 ;;		On exit  : 0/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5066 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5067 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5068 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5069 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5070 ;;Total ram usage:        7 bytes
  5071 ;; Hardware stack levels used: 1
  5072 ;; Hardware stack levels required when called: 4
  5073 ;; This function calls:
  5074 ;;		_I2C_2_Master_Read
  5075 ;;		_I2C_2_Master_RepStart
  5076 ;;		_I2C_2_Master_Start
  5077 ;;		_I2C_2_Master_Stop
  5078 ;;		_I2C_2_Master_Write
  5079 ;; This function is called by:
  5080 ;;		_color_read
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           	psect	text31
  5085   002426                     __ptext31:
  5086                           	callstack 0
  5087   002426                     _color_read_Blue:
  5088                           	callstack 25
  5089   002426                     
  5090                           ;../color.c: 98:  unsigned int tmp;;../color.c: 99:  I2C_2_Master_Start();
  5091   002426  EC71  F013         	call	_I2C_2_Master_Start	;wreg free
  5092                           
  5093                           ;../color.c: 100:  I2C_2_Master_Write(0x52 | 0x00);
  5094   00242A  0E52               	movlw	82
  5095   00242C  EC5B  F013         	call	_I2C_2_Master_Write
  5096                           
  5097                           ;../color.c: 101:  I2C_2_Master_Write(0xA0 | 0x1A);
  5098   002430  0EBA               	movlw	186
  5099   002432  EC5B  F013         	call	_I2C_2_Master_Write
  5100                           
  5101                           ;../color.c: 102:  I2C_2_Master_RepStart();
  5102   002436  EC67  F013         	call	_I2C_2_Master_RepStart	;wreg free
  5103                           
  5104                           ;../color.c: 103:  I2C_2_Master_Write(0x52 | 0x01);
  5105   00243A  0E53               	movlw	83
  5106   00243C  EC5B  F013         	call	_I2C_2_Master_Write
  5107                           
  5108                           ;../color.c: 104:  tmp=I2C_2_Master_Read(1);
  5109   002440  0E01               	movlw	1
  5110   002442  EC7E  F012         	call	_I2C_2_Master_Read
  5111   002446  6E09               	movwf	??_color_read_Blue^0,c
  5112   002448  5009               	movf	??_color_read_Blue^0,w,c
  5113   00244A  6E0C               	movwf	color_read_Blue@tmp^0,c
  5114   00244C  6A0D               	clrf	(color_read_Blue@tmp+1)^0,c
  5115                           
  5116                           ;../color.c: 105:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5117   00244E  0E00               	movlw	0
  5118   002450  EC7E  F012         	call	_I2C_2_Master_Read
  5119   002454  6E09               	movwf	??_color_read_Blue^0,c
  5120   002456  5009               	movf	??_color_read_Blue^0,w,c
  5121   002458  6E0B               	movwf	(??_color_read_Blue+2)^0,c
  5122   00245A  6A0A               	clrf	(??_color_read_Blue+1)^0,c
  5123   00245C  500C               	movf	color_read_Blue@tmp^0,w,c
  5124   00245E  100A               	iorwf	(??_color_read_Blue+1)^0,w,c
  5125   002460  6E0C               	movwf	color_read_Blue@tmp^0,c
  5126   002462  500D               	movf	(color_read_Blue@tmp+1)^0,w,c
  5127   002464  100B               	iorwf	(??_color_read_Blue+2)^0,w,c
  5128   002466  6E0D               	movwf	(color_read_Blue@tmp+1)^0,c
  5129                           
  5130                           ;../color.c: 106:  I2C_2_Master_Stop();
  5131   002468  EC6C  F013         	call	_I2C_2_Master_Stop	;wreg free
  5132   00246C                     
  5133                           ;../color.c: 107:  return tmp;
  5134   00246C  C00C  F007         	movff	color_read_Blue@tmp,?_color_read_Blue
  5135   002470  C00D  F008         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5136   002474  0012               	return		;funcret
  5137   002476                     __end_of_color_read_Blue:
  5138                           	callstack 0
  5139                           
  5140 ;; *************** function _I2C_2_Master_RepStart *****************
  5141 ;; Defined at:
  5142 ;;		line 33 in file "../i2c.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;		None
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;		None
  5147 ;; Return value:  Size  Location     Type
  5148 ;;                  1    wreg      void 
  5149 ;; Registers used:
  5150 ;;		wreg, status,2, status,0, cstack
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5160 ;;Total ram usage:        0 bytes
  5161 ;; Hardware stack levels used: 1
  5162 ;; Hardware stack levels required when called: 3
  5163 ;; This function calls:
  5164 ;;		_I2C_2_Master_Idle
  5165 ;; This function is called by:
  5166 ;;		_color_read_Luminosity
  5167 ;;		_color_read_Red
  5168 ;;		_color_read_Green
  5169 ;;		_color_read_Blue
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           	psect	text32
  5174   0026CE                     __ptext32:
  5175                           	callstack 0
  5176   0026CE                     _I2C_2_Master_RepStart:
  5177                           	callstack 25
  5178   0026CE                     
  5179                           ;../i2c.c: 35:   I2C_2_Master_Idle();
  5180   0026CE  ECEC  F012         	call	_I2C_2_Master_Idle	;wreg free
  5181   0026D2                     
  5182                           ;../i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5183   0026D2  010E               	movlb	14	; () banked
  5184   0026D4  83DA               	bsf	218,1,b	;volatile
  5185   0026D6                     
  5186                           ; BSR set to: 14
  5187   0026D6  0012               	return		;funcret
  5188   0026D8                     __end_of_I2C_2_Master_RepStart:
  5189                           	callstack 0
  5190                           
  5191 ;; *************** function _I2C_2_Master_Read *****************
  5192 ;; Defined at:
  5193 ;;		line 51 in file "../i2c.c"
  5194 ;; Parameters:    Size  Location     Type
  5195 ;;  ack             1    wreg     unsigned char 
  5196 ;; Auto vars:     Size  Location     Type
  5197 ;;  ack             1    4[COMRAM] unsigned char 
  5198 ;;  tmp             1    5[COMRAM] unsigned char 
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  1    wreg      unsigned char 
  5201 ;; Registers used:
  5202 ;;		wreg, status,2, status,0, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5209 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5210 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5211 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5212 ;;Total ram usage:        3 bytes
  5213 ;; Hardware stack levels used: 1
  5214 ;; Hardware stack levels required when called: 3
  5215 ;; This function calls:
  5216 ;;		_I2C_2_Master_Idle
  5217 ;; This function is called by:
  5218 ;;		_color_read_Luminosity
  5219 ;;		_color_read_Red
  5220 ;;		_color_read_Green
  5221 ;;		_color_read_Blue
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           	psect	text33
  5226   0024FC                     __ptext33:
  5227                           	callstack 0
  5228   0024FC                     _I2C_2_Master_Read:
  5229                           	callstack 25
  5230                           
  5231                           ; BSR set to: 14
  5232                           ;incstack = 0
  5233                           ;I2C_2_Master_Read@ack stored from wreg
  5234   0024FC  6E05               	movwf	I2C_2_Master_Read@ack^0,c
  5235   0024FE                     
  5236                           ;../i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);../i2c.c: 52: {;../i2c
      +                          .c: 53:   unsigned char tmp;;../i2c.c: 54:   I2C_2_Master_Idle();
  5237   0024FE  ECEC  F012         	call	_I2C_2_Master_Idle	;wreg free
  5238   002502                     
  5239                           ;../i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5240   002502  010E               	movlb	14	; () banked
  5241   002504  87DA               	bsf	218,3,b	;volatile
  5242                           
  5243                           ;../i2c.c: 56:   I2C_2_Master_Idle();
  5244   002506  ECEC  F012         	call	_I2C_2_Master_Idle	;wreg free
  5245   00250A                     
  5246                           ;../i2c.c: 57:   tmp = SSP2BUF;
  5247   00250A  CED5 F006          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5248                           
  5249                           ;../i2c.c: 58:   I2C_2_Master_Idle();
  5250   00250E  ECEC  F012         	call	_I2C_2_Master_Idle	;wreg free
  5251   002512                     
  5252                           ;../i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5253   002512  5005               	movf	I2C_2_Master_Read@ack^0,w,c
  5254   002514  B4D8               	btfsc	status,2,c
  5255   002516  EF8F  F012         	goto	u1201
  5256   00251A  EF93  F012         	goto	u1200
  5257   00251E                     u1201:
  5258   00251E  6A04               	clrf	??_I2C_2_Master_Read^0,c
  5259   002520  2A04               	incf	??_I2C_2_Master_Read^0,f,c
  5260   002522  EF94  F012         	goto	u1218
  5261   002526                     u1200:
  5262   002526  6A04               	clrf	??_I2C_2_Master_Read^0,c
  5263   002528                     u1218:
  5264   002528  3A04               	swapf	??_I2C_2_Master_Read^0,f,c
  5265   00252A  4604               	rlncf	??_I2C_2_Master_Read^0,f,c
  5266   00252C  010E               	movlb	14	; () banked
  5267   00252E  51DA               	movf	218,w,b	;volatile
  5268   002530  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  5269   002532  0BDF               	andlw	-33
  5270   002534  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  5271   002536  6FDA               	movwf	218,b	;volatile
  5272   002538                     
  5273                           ; BSR set to: 14
  5274                           ;../i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5275   002538  89DA               	bsf	218,4,b	;volatile
  5276   00253A                     
  5277                           ; BSR set to: 14
  5278                           ;../i2c.c: 61:   return tmp;
  5279   00253A  5006               	movf	I2C_2_Master_Read@tmp^0,w,c
  5280   00253C                     
  5281                           ; BSR set to: 14
  5282   00253C  0012               	return		;funcret
  5283   00253E                     __end_of_I2C_2_Master_Read:
  5284                           	callstack 0
  5285                           
  5286 ;; *************** function _color_processor_easy *****************
  5287 ;; Defined at:
  5288 ;;		line 133 in file "../color.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;  rgb             2    2[COMRAM] PTR struct RGB_val
  5291 ;;		 -> main@RGB_recorded(8), 
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;  b               2   10[COMRAM] unsigned int 
  5294 ;;  a               2    8[COMRAM] unsigned int 
  5295 ;;  c               2    6[COMRAM] unsigned int 
  5296 ;;  color           2    4[COMRAM] unsigned int 
  5297 ;; Return value:  Size  Location     Type
  5298 ;;                  2    2[COMRAM] unsigned int 
  5299 ;; Registers used:
  5300 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5306 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5307 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5309 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5310 ;;Total ram usage:       10 bytes
  5311 ;; Hardware stack levels used: 1
  5312 ;; Hardware stack levels required when called: 2
  5313 ;; This function calls:
  5314 ;;		Nothing
  5315 ;; This function is called by:
  5316 ;;		_main
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text34
  5321   001BFC                     __ptext34:
  5322                           	callstack 0
  5323   001BFC                     _color_processor_easy:
  5324                           	callstack 28
  5325   001BFC                     
  5326                           ;../color.c: 133: unsigned int color_processor_easy(struct RGB_val *rgb);../color.c: 134
      +                          : {;../color.c: 135:     unsigned int a = rgb->R;
  5327   001BFC  EE20 F002          	lfsr	2,2
  5328   001C00  5003               	movf	color_processor_easy@rgb^0,w,c
  5329   001C02  26D9               	addwf	fsr2l,f,c
  5330   001C04  5004               	movf	(color_processor_easy@rgb+1)^0,w,c
  5331   001C06  22DA               	addwfc	fsr2h,f,c
  5332   001C08  CFDE F009          	movff	postinc2,color_processor_easy@a
  5333   001C0C  CFDD F00A          	movff	postdec2,color_processor_easy@a+1
  5334                           
  5335                           ;../color.c: 136:     unsigned int b = rgb->G;
  5336   001C10  EE20 F004          	lfsr	2,4
  5337   001C14  5003               	movf	color_processor_easy@rgb^0,w,c
  5338   001C16  26D9               	addwf	fsr2l,f,c
  5339   001C18  5004               	movf	(color_processor_easy@rgb+1)^0,w,c
  5340   001C1A  22DA               	addwfc	fsr2h,f,c
  5341   001C1C  CFDE F00B          	movff	postinc2,color_processor_easy@b
  5342   001C20  CFDD F00C          	movff	postdec2,color_processor_easy@b+1
  5343                           
  5344                           ;../color.c: 137:     unsigned int c = rgb->B;
  5345   001C24  EE20 F006          	lfsr	2,6
  5346   001C28  5003               	movf	color_processor_easy@rgb^0,w,c
  5347   001C2A  26D9               	addwf	fsr2l,f,c
  5348   001C2C  5004               	movf	(color_processor_easy@rgb+1)^0,w,c
  5349   001C2E  22DA               	addwfc	fsr2h,f,c
  5350   001C30  CFDE F007          	movff	postinc2,color_processor_easy@c
  5351   001C34  CFDD F008          	movff	postdec2,color_processor_easy@c+1
  5352   001C38                     
  5353                           ;../color.c: 138:     unsigned int color;;../color.c: 139:     if (a>=b & a>=c){color=1;
      +                          }
  5354   001C38  500B               	movf	color_processor_easy@b^0,w,c
  5355   001C3A  5C09               	subwf	color_processor_easy@a^0,w,c
  5356   001C3C  500C               	movf	(color_processor_easy@b+1)^0,w,c
  5357   001C3E  580A               	subwfb	(color_processor_easy@a+1)^0,w,c
  5358   001C40  A0D8               	btfss	status,0,c
  5359   001C42  EF25  F00E         	goto	u1371
  5360   001C46  EF27  F00E         	goto	u1370
  5361   001C4A                     u1371:
  5362   001C4A  EF38  F00E         	goto	l2557
  5363   001C4E                     u1370:
  5364   001C4E  5007               	movf	color_processor_easy@c^0,w,c
  5365   001C50  5C09               	subwf	color_processor_easy@a^0,w,c
  5366   001C52  5008               	movf	(color_processor_easy@c+1)^0,w,c
  5367   001C54  580A               	subwfb	(color_processor_easy@a+1)^0,w,c
  5368   001C56  A0D8               	btfss	status,0,c
  5369   001C58  EF30  F00E         	goto	u1381
  5370   001C5C  EF32  F00E         	goto	u1380
  5371   001C60                     u1381:
  5372   001C60  EF38  F00E         	goto	l2557
  5373   001C64                     u1380:
  5374   001C64  0E00               	movlw	0
  5375   001C66  6E06               	movwf	(color_processor_easy@color+1)^0,c
  5376   001C68  0E01               	movlw	1
  5377   001C6A  6E05               	movwf	color_processor_easy@color^0,c
  5378   001C6C  EF58  F00E         	goto	l2565
  5379   001C70                     l2557:
  5380   001C70  5009               	movf	color_processor_easy@a^0,w,c
  5381   001C72  5C0B               	subwf	color_processor_easy@b^0,w,c
  5382   001C74  500A               	movf	(color_processor_easy@a+1)^0,w,c
  5383   001C76  580C               	subwfb	(color_processor_easy@b+1)^0,w,c
  5384   001C78  A0D8               	btfss	status,0,c
  5385   001C7A  EF41  F00E         	goto	u1391
  5386   001C7E  EF43  F00E         	goto	u1390
  5387   001C82                     u1391:
  5388   001C82  EF54  F00E         	goto	l2563
  5389   001C86                     u1390:
  5390   001C86  5007               	movf	color_processor_easy@c^0,w,c
  5391   001C88  5C0B               	subwf	color_processor_easy@b^0,w,c
  5392   001C8A  5008               	movf	(color_processor_easy@c+1)^0,w,c
  5393   001C8C  580C               	subwfb	(color_processor_easy@b+1)^0,w,c
  5394   001C8E  A0D8               	btfss	status,0,c
  5395   001C90  EF4C  F00E         	goto	u1401
  5396   001C94  EF4E  F00E         	goto	u1400
  5397   001C98                     u1401:
  5398   001C98  EF54  F00E         	goto	l2563
  5399   001C9C                     u1400:
  5400   001C9C  0E00               	movlw	0
  5401   001C9E  6E06               	movwf	(color_processor_easy@color+1)^0,c
  5402   001CA0  0E02               	movlw	2
  5403   001CA2  6E05               	movwf	color_processor_easy@color^0,c
  5404   001CA4  EF58  F00E         	goto	l2565
  5405   001CA8                     l2563:
  5406   001CA8  0E00               	movlw	0
  5407   001CAA  6E06               	movwf	(color_processor_easy@color+1)^0,c
  5408   001CAC  0E03               	movlw	3
  5409   001CAE  6E05               	movwf	color_processor_easy@color^0,c
  5410   001CB0                     l2565:
  5411                           
  5412                           ;../color.c: 142:     return color;
  5413   001CB0  C005  F003         	movff	color_processor_easy@color,?_color_processor_easy
  5414   001CB4  C006  F004         	movff	color_processor_easy@color+1,?_color_processor_easy+1
  5415   001CB8  0012               	return		;funcret
  5416   001CBA                     __end_of_color_processor_easy:
  5417                           	callstack 0
  5418                           
  5419 ;; *************** function _color_click_init *****************
  5420 ;; Defined at:
  5421 ;;		line 5 in file "../color.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;		None
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;		None
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  1    wreg      void 
  5428 ;; Registers used:
  5429 ;;		wreg, status,2, status,0, cstack
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5437 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5438 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5439 ;;Total ram usage:        1 bytes
  5440 ;; Hardware stack levels used: 1
  5441 ;; Hardware stack levels required when called: 5
  5442 ;; This function calls:
  5443 ;;		_I2C_2_Master_Init
  5444 ;;		_color_writetoaddr
  5445 ;; This function is called by:
  5446 ;;		_main
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           	psect	text35
  5451   002238                     __ptext35:
  5452                           	callstack 0
  5453   002238                     _color_click_init:
  5454                           	callstack 25
  5455   002238                     
  5456                           ;../color.c: 8:     I2C_2_Master_Init();
  5457   002238  ECD7  F012         	call	_I2C_2_Master_Init	;wreg free
  5458   00223C                     
  5459                           ;../color.c: 11:   color_writetoaddr(0x00, 0x01);
  5460   00223C  0E01               	movlw	1
  5461   00223E  6E05               	movwf	color_writetoaddr@value^0,c
  5462   002240  0E00               	movlw	0
  5463   002242  EC13  F013         	call	_color_writetoaddr
  5464   002246                     
  5465                           ;../color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  5466   002246  0E3F               	movlw	63
  5467   002248  6E07               	movwf	??_color_click_init^0,c
  5468   00224A  0E55               	movlw	85
  5469   00224C                     u1837:
  5470   00224C  2EE8               	decfsz	wreg,f,c
  5471   00224E  D7FE               	bra	u1837
  5472   002250  2E07               	decfsz	??_color_click_init^0,f,c
  5473   002252  D7FC               	bra	u1837
  5474   002254  F000               	nop	
  5475   002256                     
  5476                           ;../color.c: 15:  color_writetoaddr(0x00, 0x03);
  5477   002256  0E03               	movlw	3
  5478   002258  6E05               	movwf	color_writetoaddr@value^0,c
  5479   00225A  0E00               	movlw	0
  5480   00225C  EC13  F013         	call	_color_writetoaddr
  5481   002260                     
  5482                           ;../color.c: 18:  color_writetoaddr(0x01, 0xD5);
  5483   002260  0ED5               	movlw	213
  5484   002262  6E05               	movwf	color_writetoaddr@value^0,c
  5485   002264  0E01               	movlw	1
  5486   002266  EC13  F013         	call	_color_writetoaddr
  5487   00226A                     
  5488                           ;../color.c: 21:     TRISHbits.TRISH1 = 0;
  5489   00226A  9288               	bcf	136,1,c	;volatile
  5490   00226C                     
  5491                           ;../color.c: 22:     TRISDbits.TRISD3 = 0;
  5492   00226C  9684               	bcf	132,3,c	;volatile
  5493   00226E                     
  5494                           ;../color.c: 23:     TRISDbits.TRISD4 = 0;
  5495   00226E  9884               	bcf	132,4,c	;volatile
  5496   002270                     
  5497                           ;../color.c: 24:     TRISHbits.TRISH0 = 0;
  5498   002270  9088               	bcf	136,0,c	;volatile
  5499   002272                     
  5500                           ;../color.c: 25:     TRISFbits.TRISF0 = 0;
  5501   002272  9086               	bcf	134,0,c	;volatile
  5502   002274                     
  5503                           ;../color.c: 27:     LATHbits.LATH1 = 1;
  5504   002274  8280               	bsf	128,1,c	;volatile
  5505   002276                     
  5506                           ;../color.c: 28:     LATDbits.LATD3 = 1;
  5507   002276  867C               	bsf	124,3,c	;volatile
  5508   002278                     
  5509                           ;../color.c: 29:     LATDbits.LATD4 = 1;
  5510   002278  887C               	bsf	124,4,c	;volatile
  5511   00227A                     
  5512                           ;../color.c: 30:     LATHbits.LATH0 = 1;
  5513   00227A  8080               	bsf	128,0,c	;volatile
  5514   00227C                     
  5515                           ;../color.c: 31:     LATFbits.LATF0 = 1;
  5516   00227C  807E               	bsf	126,0,c	;volatile
  5517   00227E                     
  5518                           ;../color.c: 34:     LATDbits.LATD7=0;
  5519   00227E  9E7C               	bcf	124,7,c	;volatile
  5520   002280                     
  5521                           ;../color.c: 35:     LATHbits.LATH3=0;
  5522   002280  9680               	bcf	128,3,c	;volatile
  5523   002282                     
  5524                           ;../color.c: 36:     TRISDbits.TRISD7=0;
  5525   002282  9E84               	bcf	132,7,c	;volatile
  5526   002284                     
  5527                           ;../color.c: 37:     TRISHbits.TRISH3=0;
  5528   002284  9688               	bcf	136,3,c	;volatile
  5529   002286                     
  5530                           ;../color.c: 39:     TRISFbits.TRISF2=1;
  5531   002286  8486               	bsf	134,2,c	;volatile
  5532   002288                     
  5533                           ;../color.c: 40:     ANSELFbits.ANSELF2=0;
  5534   002288  010E               	movlb	14	; () banked
  5535   00228A  95B4               	bcf	180,2,b	;volatile
  5536   00228C                     
  5537                           ; BSR set to: 14
  5538                           ;../color.c: 41:     TRISFbits.TRISF3=1;
  5539   00228C  8686               	bsf	134,3,c	;volatile
  5540   00228E                     
  5541                           ; BSR set to: 14
  5542                           ;../color.c: 42:     ANSELFbits.ANSELF3=0;
  5543   00228E  97B4               	bcf	180,3,b	;volatile
  5544   002290                     
  5545                           ; BSR set to: 14
  5546   002290  0012               	return		;funcret
  5547   002292                     __end_of_color_click_init:
  5548                           	callstack 0
  5549                           
  5550 ;; *************** function _color_writetoaddr *****************
  5551 ;; Defined at:
  5552 ;;		line 45 in file "../color.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;  address         1    wreg     unsigned char 
  5555 ;;  value           1    4[COMRAM] unsigned char 
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;  address         1    5[COMRAM] unsigned char 
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  1    wreg      void 
  5560 ;; Registers used:
  5561 ;;		wreg, status,2, status,0, cstack
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5567 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5568 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5570 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5571 ;;Total ram usage:        2 bytes
  5572 ;; Hardware stack levels used: 1
  5573 ;; Hardware stack levels required when called: 4
  5574 ;; This function calls:
  5575 ;;		_I2C_2_Master_Start
  5576 ;;		_I2C_2_Master_Stop
  5577 ;;		_I2C_2_Master_Write
  5578 ;; This function is called by:
  5579 ;;		_color_click_init
  5580 ;; This function uses a non-reentrant model
  5581 ;;
  5582                           
  5583                           	psect	text36
  5584   002626                     __ptext36:
  5585                           	callstack 0
  5586   002626                     _color_writetoaddr:
  5587                           	callstack 25
  5588                           
  5589                           ; BSR set to: 14
  5590                           ;incstack = 0
  5591                           ;color_writetoaddr@address stored from wreg
  5592   002626  6E06               	movwf	color_writetoaddr@address^0,c
  5593   002628                     
  5594                           ;../color.c: 45: void color_writetoaddr(char address, char value);../color.c: 46: {;../c
      +                          olor.c: 47:     I2C_2_Master_Start();
  5595   002628  EC71  F013         	call	_I2C_2_Master_Start	;wreg free
  5596                           
  5597                           ;../color.c: 48:     I2C_2_Master_Write(0x52 | 0x00);
  5598   00262C  0E52               	movlw	82
  5599   00262E  EC5B  F013         	call	_I2C_2_Master_Write
  5600                           
  5601                           ;../color.c: 49:     I2C_2_Master_Write(0x80 | address);
  5602   002632  5006               	movf	color_writetoaddr@address^0,w,c
  5603   002634  0980               	iorlw	128
  5604   002636  EC5B  F013         	call	_I2C_2_Master_Write
  5605                           
  5606                           ;../color.c: 50:     I2C_2_Master_Write(value);
  5607   00263A  5005               	movf	color_writetoaddr@value^0,w,c
  5608   00263C  EC5B  F013         	call	_I2C_2_Master_Write
  5609                           
  5610                           ;../color.c: 51:     I2C_2_Master_Stop();
  5611   002640  EC6C  F013         	call	_I2C_2_Master_Stop	;wreg free
  5612   002644  0012               	return		;funcret
  5613   002646                     __end_of_color_writetoaddr:
  5614                           	callstack 0
  5615                           
  5616 ;; *************** function _I2C_2_Master_Write *****************
  5617 ;; Defined at:
  5618 ;;		line 45 in file "../i2c.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;  data_byte       1    wreg     unsigned char 
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;  data_byte       1    3[COMRAM] unsigned char 
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  1    wreg      void 
  5625 ;; Registers used:
  5626 ;;		wreg, status,2, status,0, cstack
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5633 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5635 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5636 ;;Total ram usage:        1 bytes
  5637 ;; Hardware stack levels used: 1
  5638 ;; Hardware stack levels required when called: 3
  5639 ;; This function calls:
  5640 ;;		_I2C_2_Master_Idle
  5641 ;; This function is called by:
  5642 ;;		_color_writetoaddr
  5643 ;;		_color_read_Luminosity
  5644 ;;		_color_read_Red
  5645 ;;		_color_read_Green
  5646 ;;		_color_read_Blue
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           	psect	text37
  5651   0026B6                     __ptext37:
  5652                           	callstack 0
  5653   0026B6                     _I2C_2_Master_Write:
  5654                           	callstack 25
  5655                           
  5656                           ;incstack = 0
  5657                           ;I2C_2_Master_Write@data_byte stored from wreg
  5658   0026B6  6E04               	movwf	I2C_2_Master_Write@data_byte^0,c
  5659   0026B8                     
  5660                           ;../i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);../i2c.c: 46: {;../i2c.c
      +                          : 47:   I2C_2_Master_Idle();
  5661   0026B8  ECEC  F012         	call	_I2C_2_Master_Idle	;wreg free
  5662   0026BC                     
  5663                           ;../i2c.c: 48:   SSP2BUF = data_byte;
  5664   0026BC  C004  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5665   0026C0  0012               	return		;funcret
  5666   0026C2                     __end_of_I2C_2_Master_Write:
  5667                           	callstack 0
  5668                           
  5669 ;; *************** function _I2C_2_Master_Stop *****************
  5670 ;; Defined at:
  5671 ;;		line 39 in file "../i2c.c"
  5672 ;; Parameters:    Size  Location     Type
  5673 ;;		None
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;		None
  5676 ;; Return value:  Size  Location     Type
  5677 ;;                  1    wreg      void 
  5678 ;; Registers used:
  5679 ;;		wreg, status,2, status,0, cstack
  5680 ;; Tracked objects:
  5681 ;;		On entry : 0/0
  5682 ;;		On exit  : 0/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5689 ;;Total ram usage:        0 bytes
  5690 ;; Hardware stack levels used: 1
  5691 ;; Hardware stack levels required when called: 3
  5692 ;; This function calls:
  5693 ;;		_I2C_2_Master_Idle
  5694 ;; This function is called by:
  5695 ;;		_color_writetoaddr
  5696 ;;		_color_read_Luminosity
  5697 ;;		_color_read_Red
  5698 ;;		_color_read_Green
  5699 ;;		_color_read_Blue
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           	psect	text38
  5704   0026D8                     __ptext38:
  5705                           	callstack 0
  5706   0026D8                     _I2C_2_Master_Stop:
  5707                           	callstack 25
  5708   0026D8                     
  5709                           ;../i2c.c: 41:   I2C_2_Master_Idle();
  5710   0026D8  ECEC  F012         	call	_I2C_2_Master_Idle	;wreg free
  5711   0026DC                     
  5712                           ;../i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5713   0026DC  010E               	movlb	14	; () banked
  5714   0026DE  85DA               	bsf	218,2,b	;volatile
  5715   0026E0                     
  5716                           ; BSR set to: 14
  5717   0026E0  0012               	return		;funcret
  5718   0026E2                     __end_of_I2C_2_Master_Stop:
  5719                           	callstack 0
  5720                           
  5721 ;; *************** function _I2C_2_Master_Start *****************
  5722 ;; Defined at:
  5723 ;;		line 27 in file "../i2c.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;		None
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;		None
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  1    wreg      void 
  5730 ;; Registers used:
  5731 ;;		wreg, status,2, status,0, cstack
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5741 ;;Total ram usage:        0 bytes
  5742 ;; Hardware stack levels used: 1
  5743 ;; Hardware stack levels required when called: 3
  5744 ;; This function calls:
  5745 ;;		_I2C_2_Master_Idle
  5746 ;; This function is called by:
  5747 ;;		_color_writetoaddr
  5748 ;;		_color_read_Luminosity
  5749 ;;		_color_read_Red
  5750 ;;		_color_read_Green
  5751 ;;		_color_read_Blue
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           	psect	text39
  5756   0026E2                     __ptext39:
  5757                           	callstack 0
  5758   0026E2                     _I2C_2_Master_Start:
  5759                           	callstack 25
  5760   0026E2                     
  5761                           ;../i2c.c: 29:   I2C_2_Master_Idle();
  5762   0026E2  ECEC  F012         	call	_I2C_2_Master_Idle	;wreg free
  5763   0026E6                     
  5764                           ;../i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5765   0026E6  010E               	movlb	14	; () banked
  5766   0026E8  81DA               	bsf	218,0,b	;volatile
  5767   0026EA                     
  5768                           ; BSR set to: 14
  5769   0026EA  0012               	return		;funcret
  5770   0026EC                     __end_of_I2C_2_Master_Start:
  5771                           	callstack 0
  5772                           
  5773 ;; *************** function _I2C_2_Master_Idle *****************
  5774 ;; Defined at:
  5775 ;;		line 22 in file "../i2c.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;		None
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;		None
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      void 
  5782 ;; Registers used:
  5783 ;;		wreg, status,2, status,0
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5791 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5792 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5793 ;;Total ram usage:        1 bytes
  5794 ;; Hardware stack levels used: 1
  5795 ;; Hardware stack levels required when called: 2
  5796 ;; This function calls:
  5797 ;;		Nothing
  5798 ;; This function is called by:
  5799 ;;		_I2C_2_Master_Start
  5800 ;;		_I2C_2_Master_RepStart
  5801 ;;		_I2C_2_Master_Stop
  5802 ;;		_I2C_2_Master_Write
  5803 ;;		_I2C_2_Master_Read
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           	psect	text40
  5808   0025D8                     __ptext40:
  5809                           	callstack 0
  5810   0025D8                     _I2C_2_Master_Idle:
  5811                           	callstack 25
  5812   0025D8                     l95:
  5813   0025D8  010E               	movlb	14	; () banked
  5814   0025DA  B5D8               	btfsc	216,2,b	;volatile
  5815   0025DC  EFF2  F012         	goto	u1021
  5816   0025E0  EFF4  F012         	goto	u1020
  5817   0025E4                     u1021:
  5818   0025E4  EFEC  F012         	goto	l95
  5819   0025E8                     u1020:
  5820   0025E8                     
  5821                           ; BSR set to: 14
  5822   0025E8  CEDA F003          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5823   0025EC  0E1F               	movlw	31
  5824   0025EE  1603               	andwf	??_I2C_2_Master_Idle^0,f,c
  5825   0025F0  A4D8               	btfss	status,2,c
  5826   0025F2  EFFD  F012         	goto	u1031
  5827   0025F6  EFFF  F012         	goto	u1030
  5828   0025FA                     u1031:
  5829   0025FA  EFEC  F012         	goto	l95
  5830   0025FE                     u1030:
  5831   0025FE                     
  5832                           ; BSR set to: 14
  5833   0025FE  0012               	return		;funcret
  5834   002600                     __end_of_I2C_2_Master_Idle:
  5835                           	callstack 0
  5836                           
  5837 ;; *************** function _I2C_2_Master_Init *****************
  5838 ;; Defined at:
  5839 ;;		line 4 in file "../i2c.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;		None
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;		None
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  1    wreg      void 
  5846 ;; Registers used:
  5847 ;;		wreg, status,2
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5857 ;;Total ram usage:        0 bytes
  5858 ;; Hardware stack levels used: 1
  5859 ;; Hardware stack levels required when called: 2
  5860 ;; This function calls:
  5861 ;;		Nothing
  5862 ;; This function is called by:
  5863 ;;		_color_click_init
  5864 ;;		_main
  5865 ;; This function uses a non-reentrant model
  5866 ;;
  5867                           
  5868                           	psect	text41
  5869   0025AE                     __ptext41:
  5870                           	callstack 0
  5871   0025AE                     _I2C_2_Master_Init:
  5872                           	callstack 27
  5873   0025AE                     
  5874                           ;../i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  5875   0025AE  010E               	movlb	14	; () banked
  5876   0025B0  51D9               	movf	217,w,b	;volatile
  5877   0025B2  0BF0               	andlw	-16
  5878   0025B4  0908               	iorlw	8
  5879   0025B6  6FD9               	movwf	217,b	;volatile
  5880   0025B8                     
  5881                           ; BSR set to: 14
  5882                           ;../i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  5883   0025B8  8BD9               	bsf	217,5,b	;volatile
  5884                           
  5885                           ;../i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  5886   0025BA  0E9F               	movlw	159
  5887   0025BC  6FD6               	movwf	214,b	;volatile
  5888   0025BE                     
  5889                           ; BSR set to: 14
  5890                           ;../i2c.c: 12:   TRISDbits.TRISD5 = 1;
  5891   0025BE  8A84               	bsf	132,5,c	;volatile
  5892   0025C0                     
  5893                           ; BSR set to: 14
  5894                           ;../i2c.c: 13:   TRISDbits.TRISD6 = 1;
  5895   0025C0  8C84               	bsf	132,6,c	;volatile
  5896   0025C2                     
  5897                           ; BSR set to: 14
  5898                           ;../i2c.c: 14:   ANSELDbits.ANSELD5=0;
  5899   0025C2  9BA7               	bcf	167,5,b	;volatile
  5900   0025C4                     
  5901                           ; BSR set to: 14
  5902                           ;../i2c.c: 15:   ANSELDbits.ANSELD6=0;
  5903   0025C4  9DA7               	bcf	167,6,b	;volatile
  5904                           
  5905                           ;../i2c.c: 16:   SSP2DATPPS=0x1D;
  5906   0025C6  0E1D               	movlw	29
  5907   0025C8  6F1D               	movwf	29,b	;volatile
  5908                           
  5909                           ;../i2c.c: 17:   SSP2CLKPPS=0x1E;
  5910   0025CA  0E1E               	movlw	30
  5911   0025CC  6F1C               	movwf	28,b	;volatile
  5912                           
  5913                           ;../i2c.c: 18:   RD5PPS=0x1C;
  5914   0025CE  0E1C               	movlw	28
  5915   0025D0  6F6F               	movwf	111,b	;volatile
  5916                           
  5917                           ;../i2c.c: 19:   RD6PPS=0x1B;
  5918   0025D2  0E1B               	movlw	27
  5919   0025D4  6F70               	movwf	112,b	;volatile
  5920   0025D6                     
  5921                           ; BSR set to: 14
  5922   0025D6  0012               	return		;funcret
  5923   0025D8                     __end_of_I2C_2_Master_Init:
  5924                           	callstack 0
  5925                           
  5926 ;; *************** function _Timer0_init *****************
  5927 ;; Defined at:
  5928 ;;		line 40 in file "../rc_servo.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;		None
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;		None
  5933 ;; Return value:  Size  Location     Type
  5934 ;;                  1    wreg      void 
  5935 ;; Registers used:
  5936 ;;		wreg, status,2
  5937 ;; Tracked objects:
  5938 ;;		On entry : 0/0
  5939 ;;		On exit  : 0/0
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5946 ;;Total ram usage:        0 bytes
  5947 ;; Hardware stack levels used: 1
  5948 ;; Hardware stack levels required when called: 2
  5949 ;; This function calls:
  5950 ;;		Nothing
  5951 ;; This function is called by:
  5952 ;;		_main
  5953 ;; This function uses a non-reentrant model
  5954 ;;
  5955                           
  5956                           	psect	text42
  5957   002646                     __ptext42:
  5958                           	callstack 0
  5959   002646                     _Timer0_init:
  5960                           	callstack 28
  5961   002646                     
  5962                           ;../rc_servo.c: 42:     T0CON1bits.T0CS=0b010;
  5963   002646  50D6               	movf	214,w,c	;volatile
  5964   002648  0B1F               	andlw	-225
  5965   00264A  0940               	iorlw	64
  5966   00264C  6ED6               	movwf	214,c	;volatile
  5967   00264E                     
  5968                           ;../rc_servo.c: 43:     T0CON1bits.T0ASYNC=1;
  5969   00264E  88D6               	bsf	214,4,c	;volatile
  5970                           
  5971                           ;../rc_servo.c: 44:     T0CON1bits.T0CKPS=0b0111;
  5972   002650  50D6               	movf	214,w,c	;volatile
  5973   002652  0BF0               	andlw	-16
  5974   002654  0907               	iorlw	7
  5975   002656  6ED6               	movwf	214,c	;volatile
  5976   002658                     
  5977                           ;../rc_servo.c: 46:     T0CON0bits.T016BIT=1;
  5978   002658  88D5               	bsf	213,4,c	;volatile
  5979                           
  5980                           ;../rc_servo.c: 49:     TMR0H=(65535-2500)>>8;
  5981   00265A  0EF6               	movlw	246
  5982   00265C  6ED4               	movwf	212,c	;volatile
  5983                           
  5984                           ;../rc_servo.c: 50:     TMR0L=(unsigned char)(65535-2500);
  5985   00265E  0E3B               	movlw	59
  5986   002660  6ED3               	movwf	211,c	;volatile
  5987   002662                     
  5988                           ;../rc_servo.c: 51:     T0CON0bits.T0EN=1;
  5989   002662  8ED5               	bsf	213,7,c	;volatile
  5990   002664  0012               	return		;funcret
  5991   002666                     __end_of_Timer0_init:
  5992                           	callstack 0
  5993                           
  5994 ;; *************** function _Interrupts_init *****************
  5995 ;; Defined at:
  5996 ;;		line 8 in file "../rc_servo.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;		None
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;		None
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  1    wreg      void 
  6003 ;; Registers used:
  6004 ;;		None
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6014 ;;Total ram usage:        0 bytes
  6015 ;; Hardware stack levels used: 1
  6016 ;; Hardware stack levels required when called: 2
  6017 ;; This function calls:
  6018 ;;		Nothing
  6019 ;; This function is called by:
  6020 ;;		_main
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           	psect	text43
  6025   0026C2                     __ptext43:
  6026                           	callstack 0
  6027   0026C2                     _Interrupts_init:
  6028                           	callstack 28
  6029   0026C2                     
  6030                           ;../rc_servo.c: 10:     PIE0bits.TMR0IE=1;
  6031   0026C2  010E               	movlb	14	; () banked
  6032   0026C4  8B29               	bsf	41,5,b	;volatile
  6033                           
  6034                           ;../rc_servo.c: 11:     INTCONbits.PEIE=1;
  6035   0026C6  8CF2               	bsf	242,6,c	;volatile
  6036                           
  6037                           ;../rc_servo.c: 12:     INTCONbits.IPEN=0;
  6038   0026C8  9AF2               	bcf	242,5,c	;volatile
  6039                           
  6040                           ;../rc_servo.c: 13:     INTCONbits.GIE=1;
  6041   0026CA  8EF2               	bsf	242,7,c	;volatile
  6042   0026CC                     
  6043                           ; BSR set to: 14
  6044   0026CC  0012               	return		;funcret
  6045   0026CE                     __end_of_Interrupts_init:
  6046                           	callstack 0
  6047                           
  6048 ;; *************** function _HighISR *****************
  6049 ;; Defined at:
  6050 ;;		line 20 in file "../rc_servo.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;		None
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;		None
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  1    wreg      void 
  6057 ;; Registers used:
  6058 ;;		wreg, status,2, status,0, cstack
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6068 ;;Total ram usage:        0 bytes
  6069 ;; Hardware stack levels used: 1
  6070 ;; Hardware stack levels required when called: 1
  6071 ;; This function calls:
  6072 ;;		_write16bitTMR0val
  6073 ;; This function is called by:
  6074 ;;		Interrupt level 2
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           	psect	intcode
  6079   000008                     __pintcode:
  6080                           	callstack 0
  6081   000008                     _HighISR:
  6082                           	callstack 21
  6083                           
  6084                           ; BSR set to: 14
  6085                           ;incstack = 0
  6086   000008  825D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6087   00000A                     
  6088                           ;../rc_servo.c: 22:     if (PIR0bits.TMR0IF)
  6089   00000A  010E               	movlb	14	; () banked
  6090   00000C  AB33               	btfss	51,5,b	;volatile
  6091   00000E  EF0B  F000         	goto	i2u154_41
  6092   000012  EF0D  F000         	goto	i2u154_40
  6093   000016                     i2u154_41:
  6094   000016  EF26  F000         	goto	i2l2789
  6095   00001A                     i2u154_40:
  6096   00001A                     
  6097                           ; BSR set to: 14
  6098                           ;../rc_servo.c: 23:     {;../rc_servo.c: 24:         if(LATEbits.LATE2){
  6099   00001A  A47D               	btfss	125,2,c	;volatile
  6100   00001C  EF12  F000         	goto	i2u155_41
  6101   000020  EF14  F000         	goto	i2u155_40
  6102   000024                     i2u155_41:
  6103   000024  EF1E  F000         	goto	i2l2785
  6104   000028                     i2u155_40:
  6105   000028                     
  6106                           ; BSR set to: 14
  6107                           ;../rc_servo.c: 25:             write16bitTMR0val(65535-off_period);
  6108   000028  0100               	movlb	0	; () banked
  6109   00002A  1DB4               	comf	_off_period& (0+255),w,b
  6110   00002C  6E01               	movwf	write16bitTMR0val@tmp^0,c
  6111   00002E  1DB5               	comf	(_off_period+1)& (0+255),w,b
  6112   000030  6E02               	movwf	(write16bitTMR0val@tmp+1)^0,c
  6113   000032  EC76  F013         	call	_write16bitTMR0val	;wreg free
  6114   000036                     
  6115                           ;../rc_servo.c: 26:             LATEbits.LATE2=0;
  6116   000036  947D               	bcf	125,2,c	;volatile
  6117                           
  6118                           ;../rc_servo.c: 28:         } else {
  6119   000038  EF26  F000         	goto	i2l2789
  6120   00003C                     i2l2785:
  6121                           
  6122                           ; BSR set to: 14
  6123                           ;../rc_servo.c: 29:             write16bitTMR0val(65535-on_period);
  6124   00003C  0100               	movlb	0	; () banked
  6125   00003E  1DB6               	comf	_on_period& (0+255),w,b
  6126   000040  6E01               	movwf	write16bitTMR0val@tmp^0,c
  6127   000042  1DB7               	comf	(_on_period+1)& (0+255),w,b
  6128   000044  6E02               	movwf	(write16bitTMR0val@tmp+1)^0,c
  6129   000046  EC76  F013         	call	_write16bitTMR0val	;wreg free
  6130   00004A                     
  6131                           ;../rc_servo.c: 30:             LATEbits.LATE2=1;
  6132   00004A  847D               	bsf	125,2,c	;volatile
  6133   00004C                     i2l2789:
  6134                           
  6135                           ;../rc_servo.c: 34:     PIR0bits.TMR0IF=0;
  6136   00004C  010E               	movlb	14	; () banked
  6137   00004E  9B33               	bcf	51,5,b	;volatile
  6138   000050                     
  6139                           ; BSR set to: 14
  6140   000050  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6141   000052  0011               	retfie		f
  6142   000054                     __end_of_HighISR:
  6143                           	callstack 0
  6144                           
  6145 ;; *************** function _write16bitTMR0val *****************
  6146 ;; Defined at:
  6147 ;;		line 58 in file "../rc_servo.c"
  6148 ;; Parameters:    Size  Location     Type
  6149 ;;  tmp             2    0[COMRAM] unsigned int 
  6150 ;; Auto vars:     Size  Location     Type
  6151 ;;		None
  6152 ;; Return value:  Size  Location     Type
  6153 ;;                  1    wreg      void 
  6154 ;; Registers used:
  6155 ;;		wreg, status,2
  6156 ;; Tracked objects:
  6157 ;;		On entry : 0/0
  6158 ;;		On exit  : 0/0
  6159 ;;		Unchanged: 0/0
  6160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6161 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6164 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6165 ;;Total ram usage:        2 bytes
  6166 ;; Hardware stack levels used: 1
  6167 ;; This function calls:
  6168 ;;		Nothing
  6169 ;; This function is called by:
  6170 ;;		_HighISR
  6171 ;; This function uses a non-reentrant model
  6172 ;;
  6173                           
  6174                           	psect	text45
  6175   0026EC                     __ptext45:
  6176                           	callstack 0
  6177   0026EC                     _write16bitTMR0val:
  6178                           	callstack 21
  6179   0026EC                     
  6180                           ;../rc_servo.c: 58: void write16bitTMR0val(unsigned int tmp);../rc_servo.c: 59: {;../rc_
      +                          servo.c: 60:     TMR0H=tmp>>8;
  6181   0026EC  5002               	movf	(write16bitTMR0val@tmp+1)^0,w,c
  6182   0026EE  6ED4               	movwf	212,c	;volatile
  6183   0026F0                     
  6184                           ;../rc_servo.c: 61:     TMR0L=tmp;
  6185   0026F0  C001  FFD3         	movff	write16bitTMR0val@tmp,4051	;volatile
  6186   0026F4  0012               	return		;funcret
  6187   0026F6                     __end_of_write16bitTMR0val:
  6188                           	callstack 0
  6189                           
  6190                           	psect	rparam
  6191   000000                     
  6192                           	psect	temp
  6193   00005D                     btemp:
  6194                           	callstack 0
  6195   00005D                     	ds	1
  6196   000000                     int$flags	set	btemp
  6197   000000                     wtemp8	set	btemp+1
  6198   000000                     ttemp5	set	btemp+1
  6199   000000                     ttemp6	set	btemp+4
  6200   000000                     ttemp7	set	btemp+8
  6201                           
  6202                           	psect	idloc
  6203                           
  6204                           ;Config register IDLOC0 @ 0x200000
  6205                           ;	unspecified, using default values
  6206   200000                     	org	2097152
  6207   200000  0FFF               	dw	4095
  6208                           
  6209                           ;Config register IDLOC1 @ 0x200002
  6210                           ;	unspecified, using default values
  6211   200002                     	org	2097154
  6212   200002  0FFF               	dw	4095
  6213                           
  6214                           ;Config register IDLOC2 @ 0x200004
  6215                           ;	unspecified, using default values
  6216   200004                     	org	2097156
  6217   200004  0FFF               	dw	4095
  6218                           
  6219                           ;Config register IDLOC3 @ 0x200006
  6220                           ;	unspecified, using default values
  6221   200006                     	org	2097158
  6222   200006  0FFF               	dw	4095
  6223                           
  6224                           ;Config register IDLOC4 @ 0x200008
  6225                           ;	unspecified, using default values
  6226   200008                     	org	2097160
  6227   200008  0FFF               	dw	4095
  6228                           
  6229                           ;Config register IDLOC5 @ 0x20000A
  6230                           ;	unspecified, using default values
  6231   20000A                     	org	2097162
  6232   20000A  0FFF               	dw	4095
  6233                           
  6234                           ;Config register IDLOC6 @ 0x20000C
  6235                           ;	unspecified, using default values
  6236   20000C                     	org	2097164
  6237   20000C  0FFF               	dw	4095
  6238                           
  6239                           ;Config register IDLOC7 @ 0x20000E
  6240                           ;	unspecified, using default values
  6241   20000E                     	org	2097166
  6242   20000E  0FFF               	dw	4095
  6243                           
  6244                           	psect	config
  6245                           
  6246                           ;Config register CONFIG1L @ 0x300000
  6247                           ;	External Oscillator mode Selection bits
  6248                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6249                           ;	Power-up default value for COSC bits
  6250                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6251   300000                     	org	3145728
  6252   300000  AA                 	db	170
  6253                           
  6254                           ;Config register CONFIG1H @ 0x300001
  6255                           ;	unspecified, using default values
  6256                           ;	Clock Out Enable bit
  6257                           ;	CLKOUTEN = 0x1, unprogrammed default
  6258                           ;	Clock Switch Enable bit
  6259                           ;	CSWEN = 0x1, unprogrammed default
  6260                           ;	Fail-Safe Clock Monitor Enable bit
  6261                           ;	FCMEN = 0x1, unprogrammed default
  6262   300001                     	org	3145729
  6263   300001  FF                 	db	255
  6264                           
  6265                           ;Config register CONFIG2L @ 0x300002
  6266                           ;	unspecified, using default values
  6267                           ;	Master Clear Enable bit
  6268                           ;	MCLRE = 0x1, unprogrammed default
  6269                           ;	Power-up Timer Enable bit
  6270                           ;	PWRTE = 0x1, unprogrammed default
  6271                           ;	Low-power BOR enable bit
  6272                           ;	LPBOREN = 0x1, unprogrammed default
  6273                           ;	Brown-out Reset Enable bits
  6274                           ;	BOREN = 0x3, unprogrammed default
  6275   300002                     	org	3145730
  6276   300002  FF                 	db	255
  6277                           
  6278                           ;Config register CONFIG2H @ 0x300003
  6279                           ;	unspecified, using default values
  6280                           ;	Brown Out Reset Voltage selection bits
  6281                           ;	BORV = 0x3, unprogrammed default
  6282                           ;	ZCD Disable bit
  6283                           ;	ZCD = 0x1, unprogrammed default
  6284                           ;	PPSLOCK bit One-Way Set Enable bit
  6285                           ;	PPS1WAY = 0x1, unprogrammed default
  6286                           ;	Stack Full/Underflow Reset Enable bit
  6287                           ;	STVREN = 0x1, unprogrammed default
  6288                           ;	Debugger Enable bit
  6289                           ;	DEBUG = 0x1, unprogrammed default
  6290                           ;	Extended Instruction Set Enable bit
  6291                           ;	XINST = 0x1, unprogrammed default
  6292   300003                     	org	3145731
  6293   300003  FF                 	db	255
  6294                           
  6295                           ;Config register CONFIG3L @ 0x300004
  6296                           ;	WDT Period Select bits
  6297                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6298                           ;	WDT operating mode
  6299                           ;	WDTE = OFF, WDT Disabled
  6300   300004                     	org	3145732
  6301   300004  9F                 	db	159
  6302                           
  6303                           ;Config register CONFIG3H @ 0x300005
  6304                           ;	unspecified, using default values
  6305                           ;	WDT Window Select bits
  6306                           ;	WDTCWS = 0x7, unprogrammed default
  6307                           ;	WDT input clock selector
  6308                           ;	WDTCCS = 0x7, unprogrammed default
  6309   300005                     	org	3145733
  6310   300005  FF                 	db	255
  6311                           
  6312                           ;Config register CONFIG4L @ 0x300006
  6313                           ;	unspecified, using default values
  6314                           ;	Write Protection Block 0
  6315                           ;	WRT0 = 0x1, unprogrammed default
  6316                           ;	Write Protection Block 1
  6317                           ;	WRT1 = 0x1, unprogrammed default
  6318                           ;	Write Protection Block 2
  6319                           ;	WRT2 = 0x1, unprogrammed default
  6320                           ;	Write Protection Block 3
  6321                           ;	WRT3 = 0x1, unprogrammed default
  6322                           ;	Write Protection Block 3
  6323                           ;	WRT4 = 0x1, unprogrammed default
  6324                           ;	Write Protection Block 3
  6325                           ;	WRT5 = 0x1, unprogrammed default
  6326                           ;	Write Protection Block 3
  6327                           ;	WRT6 = 0x1, unprogrammed default
  6328                           ;	Write Protection Block 3
  6329                           ;	WRT7 = 0x1, unprogrammed default
  6330   300006                     	org	3145734
  6331   300006  FF                 	db	255
  6332                           
  6333                           ;Config register CONFIG4H @ 0x300007
  6334                           ;	unspecified, using default values
  6335                           ;	Configuration Register Write Protection bit
  6336                           ;	WRTC = 0x1, unprogrammed default
  6337                           ;	Boot Block Write Protection bit
  6338                           ;	WRTB = 0x1, unprogrammed default
  6339                           ;	Data EEPROM Write Protection bit
  6340                           ;	WRTD = 0x1, unprogrammed default
  6341                           ;	Scanner Enable bit
  6342                           ;	SCANE = 0x1, unprogrammed default
  6343                           ;	Low Voltage Programming Enable bit
  6344                           ;	LVP = 0x1, unprogrammed default
  6345   300007                     	org	3145735
  6346   300007  FF                 	db	255
  6347                           
  6348                           ;Config register CONFIG5L @ 0x300008
  6349                           ;	unspecified, using default values
  6350                           ;	UserNVM Program Memory Code Protection bit
  6351                           ;	CP = 0x1, unprogrammed default
  6352                           ;	DataNVM Memory Code Protection bit
  6353                           ;	CPD = 0x1, unprogrammed default
  6354   300008                     	org	3145736
  6355   300008  FF                 	db	255
  6356                           
  6357                           ;Config register CONFIG5H @ 0x300009
  6358                           ;	unspecified, using default values
  6359   300009                     	org	3145737
  6360   300009  FF                 	db	255
  6361                           
  6362                           ;Config register CONFIG6L @ 0x30000A
  6363                           ;	unspecified, using default values
  6364                           ;	Table Read Protection Block 0
  6365                           ;	EBTR0 = 0x1, unprogrammed default
  6366                           ;	Table Read Protection Block 1
  6367                           ;	EBTR1 = 0x1, unprogrammed default
  6368                           ;	Table Read Protection Block 2
  6369                           ;	EBTR2 = 0x1, unprogrammed default
  6370                           ;	Table Read Protection Block 3
  6371                           ;	EBTR3 = 0x1, unprogrammed default
  6372                           ;	Table Read Protection Block 4
  6373                           ;	EBTR4 = 0x1, unprogrammed default
  6374                           ;	Table Read Protection Block 5
  6375                           ;	EBTR5 = 0x1, unprogrammed default
  6376                           ;	Table Read Protection Block 6
  6377                           ;	EBTR6 = 0x1, unprogrammed default
  6378                           ;	Table Read Protection Block 7
  6379                           ;	EBTR7 = 0x1, unprogrammed default
  6380   30000A                     	org	3145738
  6381   30000A  FF                 	db	255
  6382                           
  6383                           ;Config register CONFIG6H @ 0x30000B
  6384                           ;	unspecified, using default values
  6385                           ;	Boot Block Table Read Protection bit
  6386                           ;	EBTRB = 0x1, unprogrammed default
  6387   30000B                     	org	3145739
  6388   30000B  FF                 	db	255
  6389                           tosu	equ	0xFFF
  6390                           tosh	equ	0xFFE
  6391                           tosl	equ	0xFFD
  6392                           stkptr	equ	0xFFC
  6393                           pclatu	equ	0xFFB
  6394                           pclath	equ	0xFFA
  6395                           pcl	equ	0xFF9
  6396                           tblptru	equ	0xFF8
  6397                           tblptrh	equ	0xFF7
  6398                           tblptrl	equ	0xFF6
  6399                           tablat	equ	0xFF5
  6400                           prodh	equ	0xFF4
  6401                           prodl	equ	0xFF3
  6402                           indf0	equ	0xFEF
  6403                           postinc0	equ	0xFEE
  6404                           postdec0	equ	0xFED
  6405                           preinc0	equ	0xFEC
  6406                           plusw0	equ	0xFEB
  6407                           fsr0h	equ	0xFEA
  6408                           fsr0l	equ	0xFE9
  6409                           wreg	equ	0xFE8
  6410                           indf1	equ	0xFE7
  6411                           postinc1	equ	0xFE6
  6412                           postdec1	equ	0xFE5
  6413                           preinc1	equ	0xFE4
  6414                           plusw1	equ	0xFE3
  6415                           fsr1h	equ	0xFE2
  6416                           fsr1l	equ	0xFE1
  6417                           bsr	equ	0xFE0
  6418                           indf2	equ	0xFDF
  6419                           postinc2	equ	0xFDE
  6420                           postdec2	equ	0xFDD
  6421                           preinc2	equ	0xFDC
  6422                           plusw2	equ	0xFDB
  6423                           fsr2h	equ	0xFDA
  6424                           fsr2l	equ	0xFD9
  6425                           status	equ	0xFD8

Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     90      92
    BANK0           160     27     150
    BANK1           256    158     158
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2210$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 50
		 -> main@readout(BANK1[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2157$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2157$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 50
		 -> main@readout(BANK1[50]), 

    motor_action@r	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_action@l	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    spin_180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    spin_180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    S579DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    S579DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    color_processor_easy@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_read@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), main@RGB_calibrated(BANK1[8]), 


Critical Paths under _main in COMRAM

    _stop->_setMotorPWM
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _motor_action->_left_135
    _motor_action->_left_90
    _motor_action->_reverse
    _motor_action->_right_135
    _motor_action->_right_90
    _motor_action->_spin_180
    _spin_180->_setMotorPWM
    _right_90->_setMotorPWM
    _right_135->_setMotorPWM
    _reverse->_setMotorPWM
    _left_90->_setMotorPWM
    _left_135->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _color_read->_color_read_Blue
    _color_read->_color_read_Green
    _color_read->_color_read_Luminosity
    _color_read->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Luminosity->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_write16bitTMR0val

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               209   209      0   33219
                                             25 BANK0      2     2      0
                                              0 BANK1    158   158      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
               _color_processor_easy
                         _color_read
                    _initDCmotorsPWM
                         _initUSART4
                       _motor_action
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 7     3      4    2947
                                             27 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    15     12    5570
                                              0 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5219
                                             82 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    4869
                                             64 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3649
                                             29 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             18 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                             11 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              2 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             20 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              2 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              2 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     143
                                              3 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _motor_action                                         8     2      6   18784
                                             35 COMRAM     8     2      6
                           _left_135
                            _left_90
                            _reverse
                          _right_135
                           _right_90
                           _spin_180
 ---------------------------------------------------------------------------------
 (2) _spin_180                                             8     4      4    2947
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_90                                             8     4      4    3099
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_135                                            8     4      4    2947
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse                                              8     4      4    3099
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_90                                              8     4      4    3099
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_135                                             8     4      4    2947
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    2551
                                             16 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                              8 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read                                           4     2      2     768
                                             13 COMRAM     4     2      2
                    _color_read_Blue
                   _color_read_Green
              _color_read_Luminosity
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Luminosity                                7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              3 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_processor_easy                                10     8      2     346
                                              2 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              4 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              3 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0     196
                  _write16bitTMR0val
 ---------------------------------------------------------------------------------
 (10) _write16bitTMR0val                                   2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_processor_easy
   _color_read
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Luminosity
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _motor_action
     _left_135
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _left_90
       _setMotorPWM
     _reverse
       _setMotorPWM
     _right_135
       _setMotorPWM
     _right_90
       _setMotorPWM
     _spin_180
       _setMotorPWM
   _sendStringSerial4
     _sendCharSerial4
   _setMotorPWM
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
   _stop
     _setMotorPWM

 _HighISR (ROOT)
   _write16bitTMR0val

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      56        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     9E      9E       7       61.7%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1B      96       5       93.8%
BITBIGSFRllllhh     91      0       0      40        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5A      5C       1       97.9%
BITBIGSFRllllll     32      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      49        0.0%
BITBIGSFRllllll     26      0       0      54        0.0%
BITBIGSFRllllhl     20      0       0      43        0.0%
BITBIGSFRhhhlh      1B      0       0      33        0.0%
BITBIGSFRhhl        17      0       0      35        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRhllh       11      0       0      37        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      44        0.0%
BITBIGSFRllllll      B      0       0      52        0.0%
BITBIGSFRllllll      9      0       0      51        0.0%
BITBIGSFRllllhh      8      0       0      41        0.0%
BITBIGSFRllllll      6      0       0      53        0.0%
BITBIGSFRllllll      6      0       0      48        0.0%
BITBIGSFRllllll      5      0       0      47        0.0%
BITBIGSFRhlll        5      0       0      38        0.0%
BITBIGSFRllllll      3      0       0      50        0.0%
BITBIGSFRllllll      3      0       0      46        0.0%
BITBIGSFRllh         2      0       0      39        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRllllhl      1      0       0      42        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     190      55        0.0%
DATA                 0      0     190       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Dec 10 02:39:19 2022

               _color_read_Red 2336                _color_read_Blue 2426                             l33 2290  
                           l42 2384                             l51 1D5E                             l36 2644  
                           l45 2424                             l39 23D4                             l48 2474  
                           l58 1CB8                             l92 25D6                             l95 25D8  
                           l98 25FE                   ___awdiv@sign 000E            ___wmul@multiplicand 0005  
             _color_read_Green 23D6              ??_Interrupts_init 0003                            l101 26EA  
                          l110 26C0                            l104 26D6                            l113 253C  
                          l107 26E0                            l320 26CC                            l242 14F8  
                          l331 2664                            l235 24FA                            l180 0F3E  
                          l181 0F52                            l262 1E02                            l247 21BC  
                          l272 1F48                            l520 17E4                            l184 0F58  
                          l257 208C                            l185 1034                            l282 212E  
                          l267 1EA6                            l507 1680                            l372 2682  
                          l277 1FEA                            l381 26A0                            l390 25AC  
                          l295 1A6C                            l624 1BFA                            l384 26B4  
                          l393 2624              motor_action@color 0024                            u810 1A80  
                          u811 1A7C                            u900 15B6                            u820 1A92  
                          u901 15B2                            u821 1A8E                            u910 15F6  
                          u830 1ABA                            u911 15F2                            u831 1AB6  
                          u920 1640                            u840 1AF0                            u921 163C  
                          u841 1AEC                            u930 1694                            u850 24B8  
                          u931 1690                            u851 24B4                            u860 150C  
                          u940 16C6                            u861 1508                            u941 16C2  
                          u870 153E                            u950 1704                            u871 153A  
                          u951 1700                            u960 172E                            u881 1568  
                          u961 172A                            u890 158C                            u970 175C  
                          u891 1588                            u971 1758                            u980 17A4  
                          u981 17A0                            u990 21CC                            u991 21C8  
                          _abs 253E                            _pad 21BE                            wreg 000FE8  
                         l1102 1136                           l1104 113E                           l2001 1A80  
                         l1105 1184                           l2003 1A92                           l1123 1942  
                         ?_abs 0015                           l1116 1324                           l2021 14FA  
                         l1133 2574                           l2005 1A9C                           l2013 2476  
                         l2101 21BE                           l2031 153E                           l2023 14FE  
                         l2007 1ABA                           l2015 2482                           l2111 2204  
                         l2103 21CC                           l1071 22E2                           l1136 257C  
                         l2121 25E8                           l2041 1594                           l2033 155E  
                         l2025 150C                           l2009 1AF0                           l2017 2494  
                         l2113 2222                           l2105 21D8                           l2201 119A  
                         l1129 2334                           l2131 1B3C                           l2123 2600  
                         l2051 1616                           l2043 15A8                           l2035 1562  
                         l2027 152C                           l2115 253E                           l2019 2498  
                         l2107 21EC                           l2211 12A6                           l2203 121C  
                         l1148 1B36                           l1156 24B8                           l2301 25B8  
                         l2141 1B6C                           l2133 1B4A                           l2125 261C  
                         l2061 1660                           l2053 1618                           l2045 15B6  
                         l2037 156E                           l2029 1530                           l2117 2558  
                         l2109 2200                           l1093 21E0                           l2221 1304  
                         l2213 12C4                           l2205 1222                           l2303 25BE  
                         l2119 25D8                           l2231 26BC                           l2311 2628  
                         l2151 1B9A                           l2143 1B70                           l2135 1B52  
                         l2055 162A                           l2047 15C8                           l2039 158C  
                         l2071 16B4                           l1159 26F6                           l2215 12DE  
                         l2207 1228                           l2305 25C0                           l2225 26E2  
                         l2233 26D8                           l2241 24FE                           l2313 2386  
                         l2321 237C                           l2161 1BCE                           l2153 1BA8  
                         l2145 1B78                           l2137 1B56                           l2129 1B38  
                         l2401 1E66                           l2049 15F6                           l2057 1630  
                         l2081 170C                           l2073 16B8                           l2065 1682  
                         l1097 2236                           l2217 12EE                           l2209 128C  
                         l2307 25C2                           l2227 26E6                           l2235 26DC  
                         l2251 253A                           l2243 2502                           l2331 2426  
                         l2315 23CC                           l2163 1BD4                           l2155 1BAE  
                         l2147 1B8A                           l2139 1B64                           l2403 1E72  
                         l2059 1640                           l2091 178E                           l2083 1720  
                         l2075 16C6                           l2067 1686                           l2219 12F4  
                         l2309 25C4                           l2229 26B8                           l2501 2260  
                         l2245 250A                           l2237 26CE                           l2333 246C  
                         l2325 23D6                           l2157 1BC4                           l2149 1B92  
                         l2165 1BDA                           l2261 13EA                           l2405 1E8E  
                         l2421 1EF6                           l2085 172E                           l2093 1794  
                         l2077 16E6                           l2069 1694                           l2181 110E  
                         l2173 10AA                           l2511 2272                           l2503 226A  
                         l2247 2512                           l2239 26D2                           l2327 241C  
                         l2319 2336                           l2167 1BEA                           l2159 1BCC  
                         l2263 140A                           l2255 1326                           l2351 2044  
                         l2431 1F4A                           l2423 1F02                           l2415 1ED0  
                         l2407 1EA8                           l2095 17A4                           l2087 175C  
                         l2079 1704                           l2191 116C                           l2183 112A  
                         l2175 10CA                           l2271 180E                           l2521 227C  
                         l2513 2274                           l2505 226C                           l2249 2538  
                         l2601 2680                           l2169 1BF2                           l2265 1426  
                         l2257 1342                           l2353 204C                           l2345 2014  
                         l2337 1FEC                           l2441 1F7E                           l2433 1F6A  
                         l2361 1D80                           l2425 1F0A                           l2417 1EDC  
                         l2409 1EC8                           l2097 17C4                           l2089 177C  
                         l2193 1178                           l2185 1146                           l2177 10DE  
                         l2281 185E                           l2273 181C                           l2531 2286  
                         l2523 227E                           l2515 2276                           l2507 226E  
                         l2267 1490                           l2259 13A4                           l2355 2058  
                         l2347 202C                           l2339 200C                           l2451 1FB8  
                         l2443 1F8C                           l2371 1DA2                           l2427 1F16  
                         l2419 1EEA                           l2195 1180                           l2187 1156  
                         l2179 10EE                           l2283 187E                           l2275 182A  
                         l2611 22D0                           l2603 2292                           l2533 2288  
                         l2525 2280                           l2517 2278                           l2509 2270  
                         l2541 1CCE                           l2357 2074                           l2349 2038  
                         l2453 1FD4                           l2445 1F98                           l2381 1DEA  
                         l2373 1DAE                           l2429 1F32                           l2621 2594  
                         l2197 118C                           l2189 115C                           l2285 18D4  
                         l2277 182E                           l2293 1916                           l2269 17E6  
                         l2605 22A4                           l2535 228C                           l2527 2282  
                         l2519 227A                           l2551 1C38                           l2543 1CE6  
                         l2471 20E8                           l2463 20B6                           l2455 208E  
                         l2391 1E2C                           l2383 1E04                           l2447 1FA4  
                         l2439 1F72                           l2375 1DBA                           l2367 1D88  
                         l2359 1D60                           l2615 257E                           l2199 1194  
                         l2279 183E                           l2607 22AC                           l2631 2158  
                         l2623 2130                           l2537 228E                           l2529 2284  
                         l2561 1C9C                           l2553 1C4E                           l2545 1D16  
                         l2473 20F0                           l2465 20C4                           l2457 20AE  
                         l2393 1E3A                           l2385 1E24                           l2449 1FAC  
                         l2377 1DC2                           l2369 1D94                           l2481 26B0  
                         l2617 2582                           l2289 1904                           l2609 22B4  
                         l2641 21A2                           l2633 2170                           l2625 2150  
                         l2299 25AE                           l2563 1CA8                           l2555 1C64  
                         l2547 1D2E                           l2539 1CBA                           l2571 24CA  
                         l2475 20FC                           l2467 20D0                           l2395 1E46  
                         l2379 1DCE                           l2651 1990                           l2643 1944  
                         l2619 2590                           l2483 22E4                           l2635 217C  
                         l2581 26C2                           l2493 2238                           l2565 1CB0  
                         l2557 1C70                           l2549 1BFC                           l2573 24DE  
                         l2477 2118                           l2469 20DC                           l2397 1E52  
                         l2653 19BC                           l2645 1948                           l2661 1A18  
                         l2485 22F0                           l2637 2188                           l2901 1082  
                         l2821 0E2A                           l2813 0E12                           l2583 2646  
                         l2495 223C                           l2559 1C86                           l2575 24E2  
                         l2591 2666                           l2399 1E5E                           l2655 19E8  
                         l2647 1960                           l2479 26A0                           l2487 230C  
                         l2639 2196                           l2903 1086                           l2831 0E3C  
                         l2823 0E2E                           l2815 0E16                           l2585 264E  
                         l2497 2246                           l2577 24F6                           l2569 24BA  
                         l2593 2670                           l2657 1A00                           l2649 1978  
                         l2489 232C                           l2841 0E5C                           l2833 0E44  
                         l2825 0E32                           l2817 0E22                           l2587 2658  
                         l2499 2256                           l2579 24F8                           l2595 2672  
                         l2851 0E94                           l2843 0E70                           l2835 0E4C  
                         l2827 0E32                           l2819 0E26                           l2589 2662  
                         l2597 267C                           l2925 1A2E                           l2861 0F00  
                         l2853 0E9E                           l2845 0E74                           l2837 0E50  
                         l2829 0E38                           ?_pad 0013                           l2599 267E  
                         l2871 0F78                           l2863 0F04                           l2855 0EAA  
                         l2847 0E7C                           l2839 0E58                           l2881 0FFE  
                         l2873 0F8C                           l2865 0F0C                           l2857 0EE0  
                         l2849 0E88                           l2883 1004                           l2875 0F98  
                         l2891 104E                           l2867 0F4C                           l2859 0EEC  
                         l2885 100C                           l2877 0FAC                           l2869 0F66  
                         l2893 1066                           l1999 1A6E                           l2895 107A  
                         l2887 1020                           l2879 0FC8                           l2889 1042  
                         STR_1 0E01                           u1000 2222                           u1001 221E  
                         u1010 2558                           u1011 2554                           u1020 25E8  
                         u1100 10DA                           u1021 25E4                           u1101 10D4  
                         u1030 25FE                           u1110 10DC                           u1031 25FA  
                         u1200 2526                           u1040 1B4A                           u1120 10EE  
                         u1201 251E                           u1041 1B46                           u1121 10EA  
                         u1050 1B64                           u1130 112A                           u1051 1B60  
                         u1131 1126                           u1060 1B8A                           u1220 1342  
                         u1300 1DEA                           u1140 1156                           u1061 1B86  
                         u1221 133E                           u1301 1DE6                           u1141 1152  
                         u1070 1BA8                           u1230 1426                           u1310 1E8E  
                         u1150 116C                           u1071 1BA4                           u1231 1422  
                         u1311 1E8A                           u1151 1168                           u1400 1C9C  
                         u1080 1BC4                           u1320 1F32                           u1160 12A6  
                         u1401 1C98                           u1081 1BC0                           u1321 1F2E  
                         u1161 12A2                           u1218 2528                           u1090 1BEA  
                         u1330 1FD4                           u1410 25AC                           u1170 12C4  
                         u1091 1BE6                           u1331 1FD0                           u1411 25A8  
                         u1171 12C0                           u1244 1480                           u1340 2118  
                         u1180 12DE                           u1260 180E                           u1420 21BC  
                         u1245 147C                           u1341 2114                           u1181 12DA  
                         u1261 180A                           u1421 21B8                           u1254 14EA  
                         u1350 26B0                           u1190 12EE                           u1270 185E  
                         u1255 14E6                           u1351 26AC                           u1191 12EA  
                         u1271 185A                           u1280 187E                           u1360 232C  
                         u1600 0F66                   _BAUD4CONbits 000EE9                           u1281 187A  
                         u1361 2328                           u1601 0F62                           _LATE 000F7D  
                         u1370 1C4E                           u1290 2074                           u1610 0F78  
                         u1371 1C4A                           u1291 2070                           u1611 0F74  
                         _LATG 000F7F                           u1380 1C64                           u1620 1020  
                         u1381 1C60                           u1621 101C                           u1390 1C86  
                         u1630 1042                           u1391 1C82                           u1631 103E  
                         u1640 107A                           u1560 0F00                           u1641 1076  
                         u1561 0EFC                           u1650 10A2                           u1570 0F2A  
                         _T2PR 000FBC                           u1707 1DBC                           u1651 109E  
                         u1571 0F20                           u1580 0F3E                           u1717 1DF4  
                         u1581 0F3A                           u1590 0F4C                           u1807 1CD8  
                         u1727 1FA6                           u1591 0F48                           u1817 1D08  
                         u1737 1FDE                           u1578 0F2E                           u1827 1D38  
                         u1747 2046                           u1667 105A                           u1837 224C  
                         u1757 207E                           u1677 218E                           u1767 1E60  
                         u1687 1F04                           u1777 1E98                           u1697 1F3C  
                         u1787 20EA                           u1797 2122                    main@readout 0100  
                         abs@a 0015                           _dbuf 00BB                           _main 0E12  
                         _dtoa 10AA                           _prec 00B2                           pad@i 001A  
                         pad@p 0017                           fsr1h 000FE2                           fsr2h 000FDA  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         pad@w 001C                           fsr2l 000FD9                           btemp 005D  
                         _stop 2130                           prodh 000FF4                           prodl 000FF3  
                         start 0054         __end_of_color_read_Red 2386                __end_of_HighISR 0054  
                 ___param_bank 000000                          ??_abs 0017                          ??_pad 0019  
              __end_of___aodiv 1682                          ?_main 0001                          ?_dtoa 001E  
              __end_of___aomod 17E6                __end_of___awdiv 1BFC        ??_color_read_Luminosity 0009  
                        ?_stop 001C                ___awdiv@divisor 000B                          i2l334 26F4  
                        i2l328 0050                ___awdiv@counter 000D                   vfpfcnvrt@fmt 0043  
                        _TMR0H 000FD4                          _TMR0L 000FD3        __end_of_sendCharSerial4 26B6  
   __end_of_I2C_2_Master_Start 26EC     __end_of_I2C_2_Master_Write 26C2                __end_of_left_90 1EA8  
                        _flags 00B8                          _fputc 1A6E                          _fputs 2476  
                        pad@fp 0013                          _width 00B0                          _putch 26F6  
                        main@j 0178                          main@k 017A                          dtoa@d 0020  
                        dtoa@i 003E                          dtoa@n 0036                          dtoa@p 0032  
                        dtoa@s 0040                          dtoa@w 0034                          tablat 000FF5  
              __end_of_reverse 208E                          ttemp5 005E                          ttemp6 0061  
                        ttemp7 0065                          stop@i 0021                          status 000FD8  
                        wtemp8 005E                __end_of_sprintf 22E4        __end_of_color_read_Blue 2476  
        _I2C_2_Master_RepStart 26CE                ?_color_read_Red 0007                __initialization 2684  
                 __end_of_main 10AA                   __end_of_dtoa 1326                   __end_of_stop 21BE  
                       ??_main 00F4                         ??_dtoa 0028                         ??_stop 0020  
                __activetblptr 000003                   ?_setMotorPWM 0011                         ?_fputc 0003  
                       ?_fputs 000C               ___awdiv@dividend 0009                         ?_putch 0001  
                       _RC0PPS 000E62                         _RC4REG 000EE3                         _RE2PPS 000E74  
                       _RD5PPS 000E6F                         _RC7PPS 000E69                         _RD6PPS 000E70  
                       i2l2667 26EC                         i2l2669 26F0                         i2l2781 0028  
                       i2l2783 0036                         i2l2785 003C                         i2l2777 000A  
                       i2l2787 004A                         i2l2779 001A                         i2l2789 004C  
                    ??_HighISR 0003       __end_of_color_click_init 2292                         _RX4PPS 000E15  
                       _TX4REG 000EE4                  ??_Timer0_init 0003      color_processor_easy@color 0005  
                 vfprintf@cfmt 0059               __end_of_left_135 2130                      ??___aodiv 0013  
                    ??___aomod 0013                         ___wmul 2600                      ??___awdiv 000D  
                       clear_0 268A               ___awdiv@quotient 000F                         isa$std 000001  
                       pad@buf 0015                         dtoa@fp 001E                  main@time_flag 016E  
                    ??_left_90 0020               __end_of_right_90 1E04                         fputc@c 0003  
                       fputs@c 0010                         fputs@i 0011                         fputs@s 000C  
             __end_of_spin_180 1F4A                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8               ?_sendCharSerial4 0001  
                    ??_reverse 0020                         putch@c 0001               __end_of_vfprintf 2336  
                       stop@mL 001C                         stop@mR 001E              ??_initDCmotorsPWM 0005  
                    ??_sprintf 005B                     __accesstop 0060        __end_of__initialization 2694  
     __end_of_color_read_Green 2426         ?_I2C_2_Master_RepStart 0001                  ___rparam_used 000001  
             ?_color_read_Blue 0007                _Interrupts_init 26C2                 __pcstackCOMRAM 0001  
                color_read@rgb 000E                  __end_of_fputc 1B38                  __end_of_fputs 24BA  
                __end_of_putch 26F8            __end_of_Timer0_init 2666                        ??_fputc 0007  
                      ??_fputs 0010                        ??_putch 0003                     __pbssBANK0 0060  
            _color_writetoaddr 2626                   _T2CLKCONbits 000FBF             ?_color_writetoaddr 0005  
                      ?___wmul 0003                 main@color_flag 0174                 main@color_name 0176  
                  right_135@mL 001C                    right_135@mR 001E            ??_color_writetoaddr 0006  
__end_of_color_read_Luminosity 23D6                        _SP4BRGH 000EE6                        _SP4BRGL 000EE5  
                      _PWM6DCH 000FA3                        _PWM7DCH 000FA0                        _SSP2ADD 000ED6  
                      _SSP2BUF 000ED5                      ?_left_135 001C                     _color_read 1CBA  
      __end_of_Interrupts_init 26CE         color_writetoaddr@value 0005               ??_color_read_Red 0009  
                      _HighISR 0008      __end_of_color_writetoaddr 2646       color_read_Luminosity@tmp 000C  
           _I2C_2_Master_Start 26E2                     _initUSART4 2666             _I2C_2_Master_Write 26B6  
                    ?_right_90 001C                        __Hparam 0000                        __Lparam 0000  
            color_read_Red@tmp 000C                    _Timer0_init 2646                      ?_spin_180 001C  
      sendStringSerial4@string 0004                        ___aodiv 14FA                        ___aomod 1682  
                      ___awdiv 1B38            ?_I2C_2_Master_Start 0001            ?_I2C_2_Master_Write 0001  
                   _off_period 00B4                      ?_vfprintf 0053                   __psmallconst 0E00  
                      __pcinit 2684                        __ramtop 0E00                        __ptext0 0E12  
                      __ptext1 2130                        __ptext2 2292                        __ptext3 22E4  
                      __ptext4 17E6                        __ptext5 10AA                        __ptext6 21BE  
                      __ptext7 2476                        __ptext8 1A6E                        __ptext9 26F6  
                      _left_90 1E04                      _T2CONbits 000FBD                      _T2HLTbits 000FBE  
                ?_motor_action 0024                        _reverse 1FEC                  _RxBufWriteCnt 005C  
                      _sprintf 2292           ??_I2C_2_Master_Start 0004                     ??_left_135 0020  
         ??_I2C_2_Master_Write 0004           end_of_initialization 2694              __end_of_right_135 1FEC  
           setMotorPWM@PWMduty 001A                        fputc@fp 0005                        fputs@fp 000E  
            ?_color_click_init 0001   __end_of_color_processor_easy 1CBA                     ??_right_90 0020  
           ??_color_click_init 0007              __end_of_vfpfcnvrt 1944                     ??_spin_180 0020  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE               vfpfcnvrt@convarg 0049  
                   ??_vfprintf 0059                _initDCmotorsPWM 24BA                      _PORTFbits 000F8E  
               ??_motor_action 002A                      _TRISCbits 000F83                      _TRISDbits 000F84  
                    _TRISEbits 000F85                      _TRISFbits 000F86                      _TRISGbits 000F87  
                    _TRISHbits 000F88                    ?_color_read 000E       color_writetoaddr@address 0006  
      ??_I2C_2_Master_RepStart 0004               ?_Interrupts_init 0001                     left_135@mL 001C  
                   left_135@mR 001E                   _EUSART4RXbuf 009C                   _EUSART4TXbuf 0060  
            ?_color_read_Green 0007                    ?_initUSART4 0001      sendCharSerial4@charToSend 0003  
                   main@motorL 018C                     main@motorR 0195             ??_color_read_Green 0009  
                  vfpfcnvrt@ap 0045                    vfpfcnvrt@cp 0051                    vfpfcnvrt@fp 0041  
               __end_of___wmul 2626            start_initialization 2684                    __end_of_abs 257E  
                  __end_of_pad 2238                  _TxBufWriteCnt 00BA            color_read_Green@tmp 000C  
      __end_of_initDCmotorsPWM 24FC                    vfprintf@fmt 0055                       ??___wmul 0007  
                  __pbssCOMRAM 005B           _color_processor_easy 1BFC                  __pcstackBANK0 00DB  
                __pcstackBANK1 0100               ___aodiv@dividend 0003             main@RGB_calibrated 0184  
                     ?_HighISR 0001        color_processor_easy@rgb 0003          color_processor_easy@a 0009  
        color_processor_easy@b 000B          color_processor_easy@c 0007                      _dtoa$2238 0030  
         __end_of_motor_action 1A6E                   ?_Timer0_init 0001                      __pintcode 0008  
                     ?___aodiv 0003                       ?___aomod 0003                       ?___awdiv 0009  
             ___aodiv@quotient 0015                     right_135@i 0022                     right_90@mL 001C  
                   right_90@mR 001E           I2C_2_Master_Read@ack 0005           I2C_2_Master_Read@tmp 0006  
                     ?_left_90 001C                    __smallconst 0E00              _I2C_2_Master_Idle 25D8  
        ?_color_processor_easy 0003               main@RGB_recorded 017C              _I2C_2_Master_Init 25AE  
            _I2C_2_Master_Read 24FC              _I2C_2_Master_Stop 26D8                   _RxBufReadCnt 005B  
                     ?_reverse 001C             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0013          _color_read_Luminosity 2386  
           ?_I2C_2_Master_Stop 0001       initDCmotorsPWM@PWMperiod 0003                       ?_sprintf 00DB  
            _sendStringSerial4 257E            ??_I2C_2_Master_Idle 0003            ??_I2C_2_Master_Init 0003  
          ??_I2C_2_Master_Read 0004                 ___wmul@product 0007            ??_I2C_2_Master_Stop 0004  
                     _LATCbits 000F7B                       _LATDbits 000F7C                       _LATEbits 000F7D  
                     _LATFbits 000F7E                      _on_period 00B6                       _LATGbits 000F7F  
                     _LATHbits 000F80                      _right_135 1F4A                       _PIE0bits 000E29  
           ?_sendStringSerial4 0004                     spin_180@mL 001C                     spin_180@mR 001E  
                     i2u154_40 001A                       i2u154_41 0016                       i2u155_40 0028  
                     i2u155_41 0024                       _PIR0bits 000E33                       _PIR4bits 000E37  
             ?_initDCmotorsPWM 0003              ??_sendCharSerial4 0003                       _SSP2CON2 000EDA  
          ??_sendStringSerial4 0006                       _SSP2STAT 000ED8                      _vfpfcnvrt 17E6  
            main@color_storage 0132      __end_of_I2C_2_Master_Idle 2600      __end_of_I2C_2_Master_Init 25D8  
    __end_of_I2C_2_Master_Read 253E              ___wmul@multiplier 0003      __end_of_I2C_2_Master_Stop 26E2  
         write16bitTMR0val@tmp 0001                   setMotorPWM@m 0011    I2C_2_Master_Write@data_byte 0004  
                    left_135@i 0022              _write16bitTMR0val 26EC                      left_90@mL 001C  
                    left_90@mR 001E              ??_color_read_Blue 0009                   _TxBufReadCnt 00B9  
           ?_write16bitTMR0val 0001                   ??_color_read 0010      __end_of_sendStringSerial4 25AE  
__end_of_I2C_2_Master_RepStart 26D8             color_read_Blue@tmp 000C            ??_write16bitTMR0val 0003  
          __end_of_setMotorPWM 14FA                     ?_right_135 001C                   ??_initUSART4 0003  
             main@time_storage 0150                       __Hrparam 0000                     vfprintf@ap 0057  
                     __Lrparam 0000                     vfprintf@fp 0053                     ?_vfpfcnvrt 0041  
           __end_of_color_read 1D60                ___aodiv@divisor 000B                ___aodiv@counter 0013  
    __end_of_write16bitTMR0val 26F6                     _ANSELDbits 000EA7         ??_color_processor_easy 0005  
                   _ANSELFbits 000EB4                     sprintf@fmt 00DD                     _T0CON0bits 000FD5  
                   _T0CON1bits 000FD6         ?_color_read_Luminosity 0007             __end_of_initUSART4 2684  
                     __ptext10 253E                       __ptext11 1682                       __ptext20 1E04  
                     __ptext12 14FA                       __ptext21 208E                       __ptext13 257E  
                     __ptext30 23D6                       __ptext22 1326                       __ptext14 269E  
                     __ptext31 2426                       __ptext23 2600                       __ptext15 1944  
                     __ptext40 25D8                       __ptext32 26CE                       __ptext24 1B38  
                     __ptext16 1EA8                       __ptext41 25AE                       __ptext33 24FC  
                     __ptext25 2666                       __ptext17 1D60                       __ptext42 2646  
                     __ptext34 1BFC                       __ptext26 24BA                       __ptext18 1F4A  
                     __ptext43 26C2                       __ptext35 2238                       __ptext27 1CBA  
                     __ptext19 1FEC                       __ptext36 2626                       __ptext28 2336  
                     __ptext45 26EC                       __ptext37 26B6                       __ptext29 2386  
                     __ptext38 26D8                       __ptext39 26E2                      right_90@i 0022  
                     _left_135 208E                   _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA  
                     _right_90 1D60                      reverse@mL 001C                      reverse@mR 001E  
                    spin_180@i 0022                       _spin_180 1EA8                       isa$xinst 000000  
                   _RC4STAbits 000EE7                       int$flags 005D                  motor_action@l 0026  
                motor_action@r 0028                       _vfprintf 22E4                       main@home 0172  
                     left_90@i 0022                       main@time 0170               ___aomod@dividend 0003  
                   _INTCONbits 000FF2                   _motor_action 1944                    _setMotorPWM 1326  
                  _PWM6CONbits 000FA4                    _PWM7CONbits 000FA1                       intlevel2 0000  
                    sprintf@ap 00E7                    ??_right_135 0020                       reverse@i 0022  
              ___aomod@divisor 000B                    ??_vfpfcnvrt 0047                ___aomod@counter 0013  
             _color_click_init 2238                       sprintf@f 00E9                       sprintf@s 00DB  
                   _SSP2DATPPS 000E1D                     _SSP2CLKPPS 000E1C                     _TX4STAbits 000EE8  
                 ___aodiv@sign 0014                _sendCharSerial4 269E                   ___aomod@sign 0014  
