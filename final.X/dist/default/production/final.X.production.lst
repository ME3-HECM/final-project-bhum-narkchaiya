

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Dec 10 22:45:13 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    67   000000                     
    68                           ; Version 2.35
    69                           ; Generated 05/05/2021 GMT
    70                           ; 
    71                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution. Publication is not required when
    85                           ;        this file is used in an embedded application.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F67K40 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103   000000                     _TX4REG	set	3812
   104   000000                     _RC4STAbits	set	3815
   105   000000                     _SP4BRGH	set	3814
   106   000000                     _T0CON0bits	set	4053
   107   000000                     _T0CON1bits	set	4054
   108   000000                     _TMR0H	set	4052
   109   000000                     _TRISGbits	set	3975
   110   000000                     _TRISEbits	set	3973
   111   000000                     _LATFbits	set	3966
   112   000000                     _TRISFbits	set	3974
   113   000000                     _LATG	set	3967
   114   000000                     _LATE	set	3965
   115   000000                     _SSP2CON2bits	set	3802
   116   000000                     _LATGbits	set	3967
   117   000000                     _LATEbits	set	3965
   118   000000                     _RX4PPS	set	3605
   119   000000                     _SSP2CLKPPS	set	3612
   120   000000                     _SSP2DATPPS	set	3613
   121   000000                     _ANSELDbits	set	3751
   122   000000                     _ANSELFbits	set	3764
   123   000000                     _LATDbits	set	3964
   124   000000                     _LATHbits	set	3968
   125   000000                     _TRISDbits	set	3972
   126   000000                     _TRISHbits	set	3976
   127   000000                     _PORTFbits	set	3982
   128   000000                     _PWM7DCH	set	4000
   129   000000                     _PWM6DCH	set	4003
   130   000000                     _TRISCbits	set	3971
   131   000000                     _SSP2BUF	set	3797
   132   000000                     _SSP2ADD	set	3798
   133   000000                     _SSP2CON1bits	set	3801
   134   000000                     _RC4REG	set	3811
   135   000000                     _SP4BRGL	set	3813
   136   000000                     _TX4STAbits	set	3816
   137   000000                     _BAUD4CONbits	set	3817
   138   000000                     _LATCbits	set	3963
   139   000000                     _SSP2CON2	set	3802
   140   000000                     _SSP2STAT	set	3800
   141   000000                     _IPR0bits	set	3615
   142   000000                     _PIE0bits	set	3625
   143   000000                     _RC7PPS	set	3689
   144   000000                     _RD5PPS	set	3695
   145   000000                     _RE2PPS	set	3700
   146   000000                     _RD6PPS	set	3696
   147   000000                     _PWM6CONbits	set	4004
   148   000000                     _T2PR	set	4028
   149   000000                     _T2CONbits	set	4029
   150   000000                     _INTCONbits	set	4082
   151   000000                     _PWM7CONbits	set	4001
   152   000000                     _TMR0L	set	4051
   153   000000                     _T2CLKCONbits	set	4031
   154   000000                     _T2HLTbits	set	4030
   155   000000                     _PIE2bits	set	3627
   156   000000                     _PIR0bits	set	3635
   157   000000                     _IPR2bits	set	3617
   158   000000                     _PIR2bits	set	3637
   159   000000                     _PIR4bits	set	3639
   160   000000                     _RC0PPS	set	3682
   161                           
   162                           	psect	smallconst
   163   000E00                     __psmallconst:
   164                           	callstack 0
   165   000E00  00                 	db	0
   166   000E01                     STR_2:
   167                           
   168                           ; BSR set to: 14
   169   000E01  25                 	db	37
   170   000E02  64                 	db	100	;'d'
   171   000E03  20                 	db	32
   172   000E04  25                 	db	37
   173   000E05  64                 	db	100	;'d'
   174   000E06  20                 	db	32
   175   000E07  25                 	db	37
   176   000E08  64                 	db	100	;'d'
   177   000E09  20                 	db	32
   178   000E0A  25                 	db	37
   179   000E0B  64                 	db	100	;'d'
   180   000E0C  20                 	db	32
   181   000E0D  25                 	db	37
   182   000E0E  64                 	db	100	;'d'
   183   000E0F  20                 	db	32
   184   000E10  0D                 	db	13
   185   000E11  0A                 	db	10
   186   000E12  00                 	db	0
   187   000E13  00                 	db	0	; dummy byte at the end
   188   000000                     
   189                           ; #config settings
   190                           
   191                           	psect	cinit
   192   002BE6                     __pcinit:
   193                           	callstack 0
   194   002BE6                     start_initialization:
   195                           	callstack 0
   196   002BE6                     __initialization:
   197                           	callstack 0
   198                           
   199                           ; Clear objects allocated to BANK2 (112 bytes)
   200   002BE6  EE02  F000         	lfsr	0,__pbssBANK2
   201   002BEA  0E70               	movlw	112
   202   002BEC                     clear_0:
   203   002BEC  6AEE               	clrf	postinc0,c
   204   002BEE  06E8               	decf	wreg,f,c
   205   002BF0  E1FD               	bnz	clear_0
   206                           
   207                           ; Clear objects allocated to BANK1 (12 bytes)
   208   002BF2  EE01  F0F0         	lfsr	0,__pbssBANK1
   209   002BF6  0E0C               	movlw	12
   210   002BF8                     clear_1:
   211   002BF8  6AEE               	clrf	postinc0,c
   212   002BFA  06E8               	decf	wreg,f,c
   213   002BFC  E1FD               	bnz	clear_1
   214                           
   215                           ; Clear objects allocated to BANK0 (1 bytes)
   216   002BFE  0100               	movlb	0
   217   002C00  6BFF               	clrf	__pbssBANK0& (0+255),b
   218                           
   219                           ; Clear objects allocated to COMRAM (2 bytes)
   220   002C02  6A5E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   221   002C04  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   222   002C06                     end_of_initialization:
   223                           	callstack 0
   224   002C06                     __end_of__initialization:
   225                           	callstack 0
   226   002C06  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   227   002C08  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   228   002C0A  0100               	movlb	0
   229   002C0C  EF0A  F007         	goto	_main	;jump to C main() function
   230                           
   231                           	psect	bssCOMRAM
   232   00005D                     __pbssCOMRAM:
   233                           	callstack 0
   234   00005D                     _RxBufReadCnt:
   235                           	callstack 0
   236   00005D                     	ds	1
   237   00005E                     _RxBufWriteCnt:
   238                           	callstack 0
   239   00005E                     	ds	1
   240                           
   241                           	psect	bssBANK0
   242   0000FF                     __pbssBANK0:
   243                           	callstack 0
   244   0000FF                     _TxBufWriteCnt:
   245                           	callstack 0
   246   0000FF                     	ds	1
   247                           
   248                           	psect	bssBANK1
   249   0001F0                     __pbssBANK1:
   250                           	callstack 0
   251   0001F0                     _width:
   252                           	callstack 0
   253   0001F0                     	ds	2
   254   0001F2                     _prec:
   255                           	callstack 0
   256   0001F2                     	ds	2
   257   0001F4                     _time:
   258                           	callstack 0
   259   0001F4                     	ds	2
   260   0001F6                     _off_period:
   261                           	callstack 0
   262   0001F6                     	ds	2
   263   0001F8                     _on_period:
   264                           	callstack 0
   265   0001F8                     	ds	2
   266   0001FA                     _flags:
   267                           	callstack 0
   268   0001FA                     	ds	1
   269   0001FB                     _TxBufReadCnt:
   270                           	callstack 0
   271   0001FB                     	ds	1
   272                           
   273                           	psect	bssBANK2
   274   000200                     __pbssBANK2:
   275                           	callstack 0
   276   000200                     _EUSART4TXbuf:
   277                           	callstack 0
   278   000200                     	ds	60
   279   00023C                     _EUSART4RXbuf:
   280                           	callstack 0
   281   00023C                     	ds	20
   282   000250                     _dbuf:
   283                           	callstack 0
   284   000250                     	ds	32
   285                           
   286                           	psect	cstackBANK1
   287   000100                     __pcstackBANK1:
   288                           	callstack 0
   289   000100                     main@readout3:
   290                           	callstack 0
   291                           
   292                           ; 100 bytes @ 0x0
   293   000100                     	ds	100
   294   000164                     main@time_path:
   295                           	callstack 0
   296                           
   297                           ; 30 bytes @ 0x64
   298   000164                     	ds	30
   299   000182                     main@color_calibrated:
   300                           	callstack 0
   301                           
   302                           ; 64 bytes @ 0x82
   303   000182                     	ds	64
   304   0001C2                     main@upperbound_calibrated:
   305                           	callstack 0
   306                           
   307                           ; 2 bytes @ 0xC2
   308   0001C2                     	ds	2
   309   0001C4                     main@time_return:
   310                           	callstack 0
   311                           
   312                           ; 2 bytes @ 0xC4
   313   0001C4                     	ds	2
   314   0001C6                     main@j:
   315                           	callstack 0
   316                           
   317                           ; 2 bytes @ 0xC6
   318   0001C6                     	ds	2
   319   0001C8                     main@color_name:
   320                           	callstack 0
   321                           
   322                           ; 2 bytes @ 0xC8
   323   0001C8                     	ds	2
   324   0001CA                     main@k:
   325                           	callstack 0
   326                           
   327                           ; 2 bytes @ 0xCA
   328   0001CA                     	ds	2
   329   0001CC                     main@i:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0xCC
   333   0001CC                     	ds	2
   334   0001CE                     main@RGB_calibrated:
   335                           	callstack 0
   336                           
   337                           ; 8 bytes @ 0xCE
   338   0001CE                     	ds	8
   339   0001D6                     main@RGB_recorded:
   340                           	callstack 0
   341                           
   342                           ; 8 bytes @ 0xD6
   343   0001D6                     	ds	8
   344   0001DE                     main@motorR:
   345                           	callstack 0
   346                           
   347                           ; 9 bytes @ 0xDE
   348   0001DE                     	ds	9
   349   0001E7                     main@motorL:
   350                           	callstack 0
   351                           
   352                           ; 9 bytes @ 0xE7
   353   0001E7                     	ds	9
   354                           
   355                           	psect	cstackBANK0
   356   000060                     __pcstackBANK0:
   357                           	callstack 0
   358   000060                     ?_sprintf:
   359                           	callstack 0
   360   000060                     sprintf@s:
   361                           	callstack 0
   362                           
   363                           ; 2 bytes @ 0x0
   364   000060                     	ds	2
   365   000062                     sprintf@fmt:
   366                           	callstack 0
   367                           
   368                           ; 2 bytes @ 0x2
   369   000062                     	ds	12
   370   00006E                     sprintf@ap:
   371                           	callstack 0
   372                           
   373                           ; 2 bytes @ 0xE
   374   00006E                     	ds	2
   375   000070                     sprintf@f:
   376                           	callstack 0
   377                           
   378                           ; 11 bytes @ 0x10
   379   000070                     	ds	11
   380   00007B                     main@readout2:
   381                           	callstack 0
   382                           
   383                           ; 100 bytes @ 0x1B
   384   00007B                     	ds	100
   385   0000DF                     main@color_path:
   386                           	callstack 0
   387                           
   388                           ; 30 bytes @ 0x7F
   389   0000DF                     	ds	30
   390   0000FD                     main@lowerbound_calibrated:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x9D
   394   0000FD                     	ds	2
   395                           
   396                           	psect	cstackCOMRAM
   397   000001                     __pcstackCOMRAM:
   398                           	callstack 0
   399   000001                     ??_I2C_2_Master_Idle:
   400   000001                     ?_color_processor_easy:
   401                           	callstack 0
   402   000001                     ?_color_processor_hard:
   403                           	callstack 0
   404   000001                     ?___wmul:
   405                           	callstack 0
   406   000001                     ?___aodiv:
   407                           	callstack 0
   408   000001                     ?___aomod:
   409                           	callstack 0
   410   000001                     sendCharSerial4@charToSend:
   411                           	callstack 0
   412   000001                     color_processor_easy@rgb:
   413                           	callstack 0
   414   000001                     color_processor_hard@rgb:
   415                           	callstack 0
   416   000001                     initDCmotorsPWM@PWMperiod:
   417                           	callstack 0
   418   000001                     ___wmul@multiplier:
   419                           	callstack 0
   420   000001                     fputc@c:
   421                           	callstack 0
   422   000001                     ___aodiv@dividend:
   423                           	callstack 0
   424   000001                     ___aomod@dividend:
   425                           	callstack 0
   426                           
   427                           ; 8 bytes @ 0x0
   428   000001                     	ds	1
   429   000002                     ??_I2C_2_Master_Read:
   430   000002                     I2C_2_Master_Write@data_byte:
   431                           	callstack 0
   432   000002                     sendStringSerial4@string:
   433                           	callstack 0
   434                           
   435                           ; 2 bytes @ 0x1
   436   000002                     	ds	1
   437   000003                     color_writetoaddr@value:
   438                           	callstack 0
   439   000003                     I2C_2_Master_Read@ack:
   440                           	callstack 0
   441   000003                     color_processor_easy@color:
   442                           	callstack 0
   443   000003                     color_processor_hard@calibrated:
   444                           	callstack 0
   445   000003                     ___wmul@multiplicand:
   446                           	callstack 0
   447   000003                     fputc@fp:
   448                           	callstack 0
   449                           
   450                           ; 2 bytes @ 0x2
   451   000003                     	ds	1
   452   000004                     color_writetoaddr@address:
   453                           	callstack 0
   454   000004                     I2C_2_Master_Read@tmp:
   455                           	callstack 0
   456                           
   457                           ; 1 bytes @ 0x3
   458   000004                     	ds	1
   459   000005                     ??_fputc:
   460   000005                     ??_color_click_init:
   461   000005                     ??_color_processor_hard:
   462   000005                     ?_color_read_Luminosity:
   463                           	callstack 0
   464   000005                     ?_color_read_Red:
   465                           	callstack 0
   466   000005                     ?_color_read_Green:
   467                           	callstack 0
   468   000005                     ?_color_read_Blue:
   469                           	callstack 0
   470   000005                     color_processor_easy@c:
   471                           	callstack 0
   472   000005                     ___wmul@product:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x4
   476   000005                     	ds	2
   477   000007                     ??_color_read_Luminosity:
   478   000007                     ??_color_read_Red:
   479   000007                     ??_color_read_Green:
   480   000007                     ??_color_read_Blue:
   481   000007                     ?___awdiv:
   482                           	callstack 0
   483   000007                     _color_processor_hard$370:
   484                           	callstack 0
   485   000007                     color_processor_easy@a:
   486                           	callstack 0
   487   000007                     ___awdiv@dividend:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x6
   491   000007                     	ds	1
   492   000008                     _color_processor_hard$372:
   493                           	callstack 0
   494                           
   495                           ; 1 bytes @ 0x7
   496   000008                     	ds	1
   497   000009                     _color_processor_hard$374:
   498                           	callstack 0
   499   000009                     color_processor_easy@b:
   500                           	callstack 0
   501   000009                     ___awdiv@divisor:
   502                           	callstack 0
   503   000009                     ___aodiv@divisor:
   504                           	callstack 0
   505   000009                     ___aomod@divisor:
   506                           	callstack 0
   507                           
   508                           ; 8 bytes @ 0x8
   509   000009                     	ds	1
   510   00000A                     color_read_Luminosity@tmp:
   511                           	callstack 0
   512   00000A                     color_read_Red@tmp:
   513                           	callstack 0
   514   00000A                     color_read_Green@tmp:
   515                           	callstack 0
   516   00000A                     color_read_Blue@tmp:
   517                           	callstack 0
   518   00000A                     color_processor_hard@r:
   519                           	callstack 0
   520   00000A                     fputs@s:
   521                           	callstack 0
   522                           
   523                           ; 2 bytes @ 0x9
   524   00000A                     	ds	1
   525   00000B                     ___awdiv@counter:
   526                           	callstack 0
   527                           
   528                           ; 1 bytes @ 0xA
   529   00000B                     	ds	1
   530   00000C                     ___awdiv@sign:
   531                           	callstack 0
   532   00000C                     color_read@rgb:
   533                           	callstack 0
   534   00000C                     color_processor_hard@g:
   535                           	callstack 0
   536   00000C                     fputs@fp:
   537                           	callstack 0
   538                           
   539                           ; 2 bytes @ 0xB
   540   00000C                     	ds	1
   541   00000D                     ___awdiv@quotient:
   542                           	callstack 0
   543                           
   544                           ; 2 bytes @ 0xC
   545   00000D                     	ds	1
   546   00000E                     ??_color_read:
   547   00000E                     fputs@c:
   548                           	callstack 0
   549   00000E                     color_processor_hard@b:
   550                           	callstack 0
   551                           
   552                           ; 2 bytes @ 0xD
   553   00000E                     	ds	1
   554   00000F                     setMotorPWM@m:
   555                           	callstack 0
   556   00000F                     fputs@i:
   557                           	callstack 0
   558                           
   559                           ; 2 bytes @ 0xE
   560   00000F                     	ds	1
   561   000010                     color_processor_hard@cr:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0xF
   565   000010                     	ds	1
   566   000011                     ??_setMotorPWM:
   567   000011                     ___aodiv@counter:
   568                           	callstack 0
   569   000011                     ___aomod@counter:
   570                           	callstack 0
   571   000011                     pad@fp:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0x10
   575   000011                     	ds	1
   576   000012                     ___aodiv@sign:
   577                           	callstack 0
   578   000012                     ___aomod@sign:
   579                           	callstack 0
   580   000012                     color_processor_hard@cg:
   581                           	callstack 0
   582                           
   583                           ; 2 bytes @ 0x11
   584   000012                     	ds	1
   585   000013                     ?_abs:
   586                           	callstack 0
   587   000013                     pad@buf:
   588                           	callstack 0
   589   000013                     abs@a:
   590                           	callstack 0
   591   000013                     ___aodiv@quotient:
   592                           	callstack 0
   593                           
   594                           ; 8 bytes @ 0x12
   595   000013                     	ds	1
   596   000014                     color_processor_hard@cb:
   597                           	callstack 0
   598                           
   599                           ; 2 bytes @ 0x13
   600   000014                     	ds	1
   601   000015                     ??_abs:
   602   000015                     pad@p:
   603                           	callstack 0
   604                           
   605                           ; 2 bytes @ 0x14
   606   000015                     	ds	2
   607   000017                     ??_pad:
   608                           
   609                           ; 1 bytes @ 0x16
   610   000017                     	ds	1
   611   000018                     setMotorPWM@PWMduty:
   612                           	callstack 0
   613   000018                     pad@i:
   614                           	callstack 0
   615                           
   616                           ; 2 bytes @ 0x17
   617   000018                     	ds	2
   618   00001A                     stop@mL:
   619                           	callstack 0
   620   00001A                     forward@mL:
   621                           	callstack 0
   622   00001A                     reverse_fromcard@mL:
   623                           	callstack 0
   624   00001A                     reverse_onesquare@mL:
   625                           	callstack 0
   626   00001A                     right_90@mL:
   627                           	callstack 0
   628   00001A                     left_90@mL:
   629                           	callstack 0
   630   00001A                     spin_180@mL:
   631                           	callstack 0
   632   00001A                     right_135@mL:
   633                           	callstack 0
   634   00001A                     left_135@mL:
   635                           	callstack 0
   636   00001A                     pad@w:
   637                           	callstack 0
   638                           
   639                           ; 2 bytes @ 0x19
   640   00001A                     	ds	2
   641   00001C                     stop@mR:
   642                           	callstack 0
   643   00001C                     forward@mR:
   644                           	callstack 0
   645   00001C                     reverse_fromcard@mR:
   646                           	callstack 0
   647   00001C                     reverse_onesquare@mR:
   648                           	callstack 0
   649   00001C                     right_90@mR:
   650                           	callstack 0
   651   00001C                     left_90@mR:
   652                           	callstack 0
   653   00001C                     spin_180@mR:
   654                           	callstack 0
   655   00001C                     right_135@mR:
   656                           	callstack 0
   657   00001C                     left_135@mR:
   658                           	callstack 0
   659   00001C                     dtoa@fp:
   660                           	callstack 0
   661                           
   662                           ; 2 bytes @ 0x1B
   663   00001C                     	ds	2
   664   00001E                     ??_stop:
   665   00001E                     ??_spin_180:
   666   00001E                     ??_reverse_fromcard:
   667   00001E                     ??_reverse_onesquare:
   668   00001E                     ??_right_90:
   669   00001E                     ??_left_90:
   670   00001E                     ??_right_135:
   671   00001E                     ??_left_135:
   672   00001E                     forward@i:
   673                           	callstack 0
   674   00001E                     dtoa@d:
   675                           	callstack 0
   676                           
   677                           ; 8 bytes @ 0x1D
   678   00001E                     	ds	1
   679   00001F                     stop@i:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0x1E
   683   00001F                     	ds	1
   684   000020                     reverse_fromcard@i:
   685                           	callstack 0
   686   000020                     reverse_onesquare@i:
   687                           	callstack 0
   688   000020                     right_90@i:
   689                           	callstack 0
   690   000020                     left_90@i:
   691                           	callstack 0
   692   000020                     spin_180@i:
   693                           	callstack 0
   694   000020                     right_135@i:
   695                           	callstack 0
   696   000020                     left_135@i:
   697                           	callstack 0
   698                           
   699                           ; 2 bytes @ 0x1F
   700   000020                     	ds	2
   701   000022                     motor_action@color:
   702                           	callstack 0
   703                           
   704                           ; 2 bytes @ 0x21
   705   000022                     	ds	2
   706   000024                     motor_action@l:
   707                           	callstack 0
   708                           
   709                           ; 2 bytes @ 0x23
   710   000024                     	ds	2
   711   000026                     ??_dtoa:
   712   000026                     motor_action@r:
   713                           	callstack 0
   714                           
   715                           ; 2 bytes @ 0x25
   716   000026                     	ds	2
   717   000028                     ??_motor_action:
   718                           
   719                           ; 1 bytes @ 0x27
   720   000028                     	ds	6
   721   00002E                     _dtoa$2417:
   722                           	callstack 0
   723                           
   724                           ; 2 bytes @ 0x2D
   725   00002E                     	ds	2
   726   000030                     dtoa@p:
   727                           	callstack 0
   728                           
   729                           ; 2 bytes @ 0x2F
   730   000030                     	ds	2
   731   000032                     dtoa@w:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x31
   735   000032                     	ds	2
   736   000034                     dtoa@n:
   737                           	callstack 0
   738                           
   739                           ; 8 bytes @ 0x33
   740   000034                     	ds	8
   741   00003C                     dtoa@i:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x3B
   745   00003C                     	ds	2
   746   00003E                     dtoa@s:
   747                           	callstack 0
   748                           
   749                           ; 1 bytes @ 0x3D
   750   00003E                     	ds	1
   751   00003F                     vfpfcnvrt@fp:
   752                           	callstack 0
   753                           
   754                           ; 2 bytes @ 0x3E
   755   00003F                     	ds	2
   756   000041                     vfpfcnvrt@fmt:
   757                           	callstack 0
   758                           
   759                           ; 2 bytes @ 0x40
   760   000041                     	ds	2
   761   000043                     vfpfcnvrt@ap:
   762                           	callstack 0
   763                           
   764                           ; 2 bytes @ 0x42
   765   000043                     	ds	2
   766   000045                     ??_vfpfcnvrt:
   767                           
   768                           ; 1 bytes @ 0x44
   769   000045                     	ds	2
   770   000047                     vfpfcnvrt@convarg:
   771                           	callstack 0
   772                           
   773                           ; 8 bytes @ 0x46
   774   000047                     	ds	8
   775   00004F                     vfpfcnvrt@cp:
   776                           	callstack 0
   777                           
   778                           ; 2 bytes @ 0x4E
   779   00004F                     	ds	2
   780   000051                     ?_vfprintf:
   781                           	callstack 0
   782   000051                     vfprintf@fp:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x50
   786   000051                     	ds	2
   787   000053                     vfprintf@fmt:
   788                           	callstack 0
   789                           
   790                           ; 2 bytes @ 0x52
   791   000053                     	ds	2
   792   000055                     vfprintf@ap:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x54
   796   000055                     	ds	2
   797   000057                     vfprintf@cfmt:
   798                           	callstack 0
   799                           
   800                           ; 2 bytes @ 0x56
   801   000057                     	ds	2
   802   000059                     ??_main:
   803                           
   804                           ; 1 bytes @ 0x58
   805   000059                     	ds	2
   806   00005B                     main@color_flag:
   807                           	callstack 0
   808                           
   809                           ; 2 bytes @ 0x5A
   810   00005B                     	ds	2
   811                           
   812 ;;
   813 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   814 ;;
   815 ;; *************** function _main *****************
   816 ;; Defined at:
   817 ;;		line 20 in file "../main.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;  readout3      100    0[BANK1 ] unsigned char [100]
   822 ;;  readout2      100   27[BANK0 ] unsigned char [100]
   823 ;;  k               2  202[BANK1 ] int 
   824 ;;  i               2  204[BANK1 ] int 
   825 ;;  color_calibr   64  130[BANK1 ] int [32]
   826 ;;  time_path      30  100[BANK1 ] unsigned int [15]
   827 ;;  color_path     30  127[BANK0 ] unsigned int [15]
   828 ;;  motorL          9  231[BANK1 ] struct DC_motor
   829 ;;  motorR          9  222[BANK1 ] struct DC_motor
   830 ;;  RGB_recorded    8  214[BANK1 ] struct RGB_val
   831 ;;  RGB_calibrat    8  206[BANK1 ] struct RGB_val
   832 ;;  L_calibrated    8    0        struct RGB_val
   833 ;;  color_name      2  200[BANK1 ] unsigned int 
   834 ;;  j               2  198[BANK1 ] int 
   835 ;;  time_return     2  196[BANK1 ] unsigned int 
   836 ;;  color_flag      2   90[COMRAM] unsigned int 
   837 ;;  upperbound_c    2  194[BANK1 ] unsigned int 
   838 ;;  lowerbound_c    2  157[BANK0 ] unsigned int 
   839 ;;  PWMcycle        1    0        unsigned char 
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   850 ;;      Locals:         2     132     240       0       0       0       0       0       0       0       0       0       
      +0       0       0
   851 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   852 ;;      Totals:         4     132     240       0       0       0       0       0       0       0       0       0       
      +0       0       0
   853 ;;Total ram usage:      376 bytes
   854 ;; Hardware stack levels required when called: 9
   855 ;; This function calls:
   856 ;;		_I2C_2_Master_Init
   857 ;;		_Interrupts_init
   858 ;;		_Timer0_init
   859 ;;		_color_click_init
   860 ;;		_color_processor_easy
   861 ;;		_color_processor_hard
   862 ;;		_color_read
   863 ;;		_forward
   864 ;;		_initDCmotorsPWM
   865 ;;		_initUSART4
   866 ;;		_motor_action
   867 ;;		_sendStringSerial4
   868 ;;		_setMotorPWM
   869 ;;		_spin_180
   870 ;;		_sprintf
   871 ;;		_stop
   872 ;; This function is called by:
   873 ;;		Startup code after reset
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           	psect	text0
   878   000E14                     __ptext0:
   879                           	callstack 0
   880   000E14                     _main:
   881                           	callstack 22
   882   000E14                     
   883                           ;../main.c: 22:     color_click_init();
   884   000E14  EC38  F014         	call	_color_click_init	;wreg free
   885   000E18                     
   886                           ;../main.c: 23:     initDCmotorsPWM(20);
   887   000E18  0E00               	movlw	0
   888   000E1A  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   889   000E1C  0E14               	movlw	20
   890   000E1E  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   891   000E20  EC79  F015         	call	_initDCmotorsPWM	;wreg free
   892   000E24                     
   893                           ;../main.c: 24:     Interrupts_init();
   894   000E24  EC7F  F016         	call	_Interrupts_init	;wreg free
   895   000E28                     
   896                           ;../main.c: 25:     Timer0_init();
   897   000E28  EC54  F016         	call	_Timer0_init	;wreg free
   898   000E2C                     
   899                           ;../main.c: 26:     I2C_2_Master_Init();
   900   000E2C  EC08  F016         	call	_I2C_2_Master_Init	;wreg free
   901   000E30                     
   902                           ;../main.c: 27:     initUSART4();
   903   000E30  EC64  F016         	call	_initUSART4	;wreg free
   904   000E34                     
   905                           ;../main.c: 32:     motorL.power = 0;
   906   000E34  0E00               	movlw	0
   907   000E36  0101               	movlb	1	; () banked
   908   000E38  6FE7               	movwf	main@motorL& (0+255),b
   909   000E3A                     
   910                           ; BSR set to: 1
   911                           ;../main.c: 33:     motorL.direction = 0;
   912   000E3A  0E00               	movlw	0
   913   000E3C  6FE8               	movwf	(main@motorL+1)& (0+255),b
   914   000E3E                     
   915                           ; BSR set to: 1
   916                           ;../main.c: 34:     motorL.dutyHighByte = (unsigned char *)(&PWM6DCH);
   917   000E3E  0EA3               	movlw	163
   918   000E40  6FE9               	movwf	(main@motorL+2)& (0+255),b
   919   000E42  0E0F               	movlw	15
   920   000E44  6FEA               	movwf	(main@motorL+3)& (0+255),b
   921   000E46                     
   922                           ; BSR set to: 1
   923                           ;../main.c: 35:     motorL.dir_LAT = (unsigned char *)(&LATE);
   924   000E46  0E7D               	movlw	125
   925   000E48  6FEB               	movwf	(main@motorL+4)& (0+255),b
   926   000E4A  0E0F               	movlw	15
   927   000E4C  6FEC               	movwf	(main@motorL+5)& (0+255),b
   928   000E4E                     
   929                           ; BSR set to: 1
   930                           ;../main.c: 36:     motorL.dir_pin = 4;
   931   000E4E  0E04               	movlw	4
   932   000E50  6FED               	movwf	(main@motorL+6)& (0+255),b
   933   000E52                     
   934                           ; BSR set to: 1
   935                           ;../main.c: 37:     motorL.PWMperiod = PWMcycle;
   936   000E52  0E00               	movlw	0
   937   000E54  6FEF               	movwf	(main@motorL+8)& (0+255),b
   938   000E56  0EC8               	movlw	200
   939   000E58  6FEE               	movwf	(main@motorL+7)& (0+255),b
   940   000E5A                     
   941                           ; BSR set to: 1
   942                           ;../main.c: 38:     motorR.power = 0;
   943   000E5A  0E00               	movlw	0
   944   000E5C  6FDE               	movwf	main@motorR& (0+255),b
   945   000E5E                     
   946                           ; BSR set to: 1
   947                           ;../main.c: 39:     motorR.direction = 0;
   948   000E5E  0E00               	movlw	0
   949   000E60  6FDF               	movwf	(main@motorR+1)& (0+255),b
   950                           
   951                           ;../main.c: 40:     motorR.dutyHighByte = (unsigned char *)(&PWM7DCH);
   952   000E62  0EA0               	movlw	160
   953   000E64  6FE0               	movwf	(main@motorR+2)& (0+255),b
   954   000E66  0E0F               	movlw	15
   955   000E68  6FE1               	movwf	(main@motorR+3)& (0+255),b
   956                           
   957                           ;../main.c: 41:     motorR.dir_LAT = (unsigned char *)(&LATG);
   958   000E6A  0E7F               	movlw	127
   959   000E6C  6FE2               	movwf	(main@motorR+4)& (0+255),b
   960   000E6E  0E0F               	movlw	15
   961   000E70  6FE3               	movwf	(main@motorR+5)& (0+255),b
   962   000E72                     
   963                           ; BSR set to: 1
   964                           ;../main.c: 42:     motorR.dir_pin = 6;
   965   000E72  0E06               	movlw	6
   966   000E74  6FE4               	movwf	(main@motorR+6)& (0+255),b
   967   000E76                     
   968                           ; BSR set to: 1
   969                           ;../main.c: 43:     motorR.PWMperiod = PWMcycle;
   970   000E76  0E00               	movlw	0
   971   000E78  6FE6               	movwf	(main@motorR+8)& (0+255),b
   972   000E7A  0EC8               	movlw	200
   973   000E7C  6FE5               	movwf	(main@motorR+7)& (0+255),b
   974   000E7E                     
   975                           ; BSR set to: 1
   976                           ;../main.c: 44:     setMotorPWM(&motorL);
   977   000E7E  0EE7               	movlw	low main@motorL
   978   000E80  6E0F               	movwf	setMotorPWM@m^0,c
   979   000E82  0E01               	movlw	high main@motorL
   980   000E84  6E10               	movwf	(setMotorPWM@m+1)^0,c
   981   000E86  ECFB  F00B         	call	_setMotorPWM	;wreg free
   982   000E8A                     
   983                           ;../main.c: 45:     setMotorPWM(&motorR);
   984   000E8A  0EDE               	movlw	low main@motorR
   985   000E8C  6E0F               	movwf	setMotorPWM@m^0,c
   986   000E8E  0E01               	movlw	high main@motorR
   987   000E90  6E10               	movwf	(setMotorPWM@m+1)^0,c
   988   000E92  ECFB  F00B         	call	_setMotorPWM	;wreg free
   989   000E96                     l193:
   990   000E96  B68E               	btfsc	142,3,c	;volatile
   991   000E98  EF50  F007         	goto	u1561
   992   000E9C  EF52  F007         	goto	u1560
   993   000EA0                     u1561:
   994   000EA0  EF4B  F007         	goto	l193
   995   000EA4                     u1560:
   996   000EA4                     
   997                           ;../main.c: 64:         for (int i=0;i<8;i++){
   998   000EA4  0E00               	movlw	0
   999   000EA6  0101               	movlb	1	; () banked
  1000   000EA8  6FCD               	movwf	(main@i+1)& (0+255),b
  1001   000EAA  0E00               	movlw	0
  1002   000EAC  6FCC               	movwf	main@i& (0+255),b
  1003   000EAE                     l3031:
  1004                           
  1005                           ; BSR set to: 1
  1006                           ;../main.c: 65:             color_read(&RGB_calibrated);
  1007   000EAE  0ECE               	movlw	low main@RGB_calibrated
  1008   000EB0  6E0C               	movwf	color_read@rgb^0,c
  1009   000EB2  0E01               	movlw	high main@RGB_calibrated
  1010   000EB4  6E0D               	movwf	(color_read@rgb+1)^0,c
  1011   000EB6  ECE3  F010         	call	_color_read	;wreg free
  1012   000EBA                     
  1013                           ;../main.c: 66:             color_calibrated[4*i] = RGB_calibrated.L;
  1014   000EBA  C1CC  F059         	movff	main@i,??_main
  1015   000EBE  C1CD  F05A         	movff	main@i+1,??_main+1
  1016   000EC2  90D8               	bcf	status,0,c
  1017   000EC4  3659               	rlcf	??_main^0,f,c
  1018   000EC6  365A               	rlcf	(??_main+1)^0,f,c
  1019   000EC8  90D8               	bcf	status,0,c
  1020   000ECA  3659               	rlcf	??_main^0,f,c
  1021   000ECC  365A               	rlcf	(??_main+1)^0,f,c
  1022   000ECE  90D8               	bcf	status,0,c
  1023   000ED0  3659               	rlcf	??_main^0,f,c
  1024   000ED2  365A               	rlcf	(??_main+1)^0,f,c
  1025   000ED4  0E82               	movlw	low main@color_calibrated
  1026   000ED6  2459               	addwf	??_main^0,w,c
  1027   000ED8  6ED9               	movwf	fsr2l,c
  1028   000EDA  0E01               	movlw	high main@color_calibrated
  1029   000EDC  205A               	addwfc	(??_main+1)^0,w,c
  1030   000EDE  6EDA               	movwf	fsr2h,c
  1031   000EE0  C1CE  FFDE         	movff	main@RGB_calibrated,postinc2
  1032   000EE4  C1CF  FFDD         	movff	main@RGB_calibrated+1,postdec2
  1033   000EE8                     
  1034                           ;../main.c: 67:             color_calibrated[4*i+1] = RGB_calibrated.R;
  1035   000EE8  C1CC  F059         	movff	main@i,??_main
  1036   000EEC  C1CD  F05A         	movff	main@i+1,??_main+1
  1037   000EF0  90D8               	bcf	status,0,c
  1038   000EF2  3659               	rlcf	??_main^0,f,c
  1039   000EF4  365A               	rlcf	(??_main+1)^0,f,c
  1040   000EF6  90D8               	bcf	status,0,c
  1041   000EF8  3659               	rlcf	??_main^0,f,c
  1042   000EFA  365A               	rlcf	(??_main+1)^0,f,c
  1043   000EFC  90D8               	bcf	status,0,c
  1044   000EFE  3659               	rlcf	??_main^0,f,c
  1045   000F00  365A               	rlcf	(??_main+1)^0,f,c
  1046   000F02  0E02               	movlw	2
  1047   000F04  2659               	addwf	??_main^0,f,c
  1048   000F06  0E00               	movlw	0
  1049   000F08  225A               	addwfc	(??_main+1)^0,f,c
  1050   000F0A  0E82               	movlw	low main@color_calibrated
  1051   000F0C  2459               	addwf	??_main^0,w,c
  1052   000F0E  6ED9               	movwf	fsr2l,c
  1053   000F10  0E01               	movlw	high main@color_calibrated
  1054   000F12  205A               	addwfc	(??_main+1)^0,w,c
  1055   000F14  6EDA               	movwf	fsr2h,c
  1056   000F16  C1D0  FFDE         	movff	main@RGB_calibrated+2,postinc2
  1057   000F1A  C1D1  FFDD         	movff	main@RGB_calibrated+3,postdec2
  1058   000F1E                     
  1059                           ;../main.c: 68:             color_calibrated[4*i+2] = RGB_calibrated.G;
  1060   000F1E  C1CC  F059         	movff	main@i,??_main
  1061   000F22  C1CD  F05A         	movff	main@i+1,??_main+1
  1062   000F26  90D8               	bcf	status,0,c
  1063   000F28  3659               	rlcf	??_main^0,f,c
  1064   000F2A  365A               	rlcf	(??_main+1)^0,f,c
  1065   000F2C  90D8               	bcf	status,0,c
  1066   000F2E  3659               	rlcf	??_main^0,f,c
  1067   000F30  365A               	rlcf	(??_main+1)^0,f,c
  1068   000F32  90D8               	bcf	status,0,c
  1069   000F34  3659               	rlcf	??_main^0,f,c
  1070   000F36  365A               	rlcf	(??_main+1)^0,f,c
  1071   000F38  0E04               	movlw	4
  1072   000F3A  2659               	addwf	??_main^0,f,c
  1073   000F3C  0E00               	movlw	0
  1074   000F3E  225A               	addwfc	(??_main+1)^0,f,c
  1075   000F40  0E82               	movlw	low main@color_calibrated
  1076   000F42  2459               	addwf	??_main^0,w,c
  1077   000F44  6ED9               	movwf	fsr2l,c
  1078   000F46  0E01               	movlw	high main@color_calibrated
  1079   000F48  205A               	addwfc	(??_main+1)^0,w,c
  1080   000F4A  6EDA               	movwf	fsr2h,c
  1081   000F4C  C1D2  FFDE         	movff	main@RGB_calibrated+4,postinc2
  1082   000F50  C1D3  FFDD         	movff	main@RGB_calibrated+5,postdec2
  1083   000F54                     
  1084                           ;../main.c: 69:             color_calibrated[4*i+3] = RGB_calibrated.B;
  1085   000F54  C1CC  F059         	movff	main@i,??_main
  1086   000F58  C1CD  F05A         	movff	main@i+1,??_main+1
  1087   000F5C  90D8               	bcf	status,0,c
  1088   000F5E  3659               	rlcf	??_main^0,f,c
  1089   000F60  365A               	rlcf	(??_main+1)^0,f,c
  1090   000F62  90D8               	bcf	status,0,c
  1091   000F64  3659               	rlcf	??_main^0,f,c
  1092   000F66  365A               	rlcf	(??_main+1)^0,f,c
  1093   000F68  90D8               	bcf	status,0,c
  1094   000F6A  3659               	rlcf	??_main^0,f,c
  1095   000F6C  365A               	rlcf	(??_main+1)^0,f,c
  1096   000F6E  0E06               	movlw	6
  1097   000F70  2659               	addwf	??_main^0,f,c
  1098   000F72  0E00               	movlw	0
  1099   000F74  225A               	addwfc	(??_main+1)^0,f,c
  1100   000F76  0E82               	movlw	low main@color_calibrated
  1101   000F78  2459               	addwf	??_main^0,w,c
  1102   000F7A  6ED9               	movwf	fsr2l,c
  1103   000F7C  0E01               	movlw	high main@color_calibrated
  1104   000F7E  205A               	addwfc	(??_main+1)^0,w,c
  1105   000F80  6EDA               	movwf	fsr2h,c
  1106   000F82  C1D4  FFDE         	movff	main@RGB_calibrated+6,postinc2
  1107   000F86  C1D5  FFDD         	movff	main@RGB_calibrated+7,postdec2
  1108   000F8A                     
  1109                           ;../main.c: 70:             LATHbits.LATH3 = 1;
  1110   000F8A  8680               	bsf	128,3,c	;volatile
  1111   000F8C                     
  1112                           ;../main.c: 72:             char readout2[100];;../main.c: 73:             sprintf(reado
      +                          ut2,"%d %d %d %d \r\n", RGB_calibrated.L,RGB_calibrated.R,RGB_calibrated.G,RGB_calibrate
      +                          d.B);
  1113   000F8C  0E7B               	movlw	low main@readout2
  1114   000F8E  0100               	movlb	0	; () banked
  1115   000F90  6F60               	movwf	sprintf@s& (0+255),b
  1116   000F92  0E00               	movlw	high main@readout2
  1117   000F94  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1118   000F96  0E04               	movlw	low (STR_2+3)
  1119   000F98  6F62               	movwf	sprintf@fmt& (0+255),b
  1120   000F9A  0E0E               	movlw	high (STR_2+3)
  1121   000F9C  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1122   000F9E  C1CE  F064         	movff	main@RGB_calibrated,?_sprintf+4
  1123   000FA2  C1CF  F065         	movff	main@RGB_calibrated+1,?_sprintf+5
  1124   000FA6  C1D0  F066         	movff	main@RGB_calibrated+2,?_sprintf+6
  1125   000FAA  C1D1  F067         	movff	main@RGB_calibrated+3,?_sprintf+7
  1126   000FAE  C1D2  F068         	movff	main@RGB_calibrated+4,?_sprintf+8
  1127   000FB2  C1D3  F069         	movff	main@RGB_calibrated+5,?_sprintf+9
  1128   000FB6  C1D4  F06A         	movff	main@RGB_calibrated+6,?_sprintf+10
  1129   000FBA  C1D5  F06B         	movff	main@RGB_calibrated+7,?_sprintf+11
  1130   000FBE  EC65  F014         	call	_sprintf	;wreg free
  1131   000FC2                     
  1132                           ;../main.c: 74:             sendStringSerial4(readout2);
  1133   000FC2  0E7B               	movlw	low main@readout2
  1134   000FC4  6E02               	movwf	sendStringSerial4@string^0,c
  1135   000FC6  0E00               	movlw	high main@readout2
  1136   000FC8  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1137   000FCA  ECDB  F015         	call	_sendStringSerial4	;wreg free
  1138   000FCE                     
  1139                           ;../main.c: 75:             _delay((unsigned long)((2000)*(64000000/4000.0)));
  1140   000FCE  0EA3               	movlw	163
  1141   000FD0  6E5A               	movwf	(??_main+1)^0,c
  1142   000FD2  0E57               	movlw	87
  1143   000FD4  6E59               	movwf	??_main^0,c
  1144   000FD6  0E02               	movlw	2
  1145   000FD8                     u1707:
  1146   000FD8  2EE8               	decfsz	wreg,f,c
  1147   000FDA  D7FE               	bra	u1707
  1148   000FDC  2E59               	decfsz	??_main^0,f,c
  1149   000FDE  D7FC               	bra	u1707
  1150   000FE0  2E5A               	decfsz	(??_main+1)^0,f,c
  1151   000FE2  D7FA               	bra	u1707
  1152   000FE4  D000               	nop2	
  1153   000FE6                     
  1154                           ;../main.c: 76:             LATHbits.LATH3 = 0;
  1155   000FE6  9680               	bcf	128,3,c	;volatile
  1156   000FE8                     
  1157                           ;../main.c: 77:             _delay((unsigned long)((2000)*(64000000/4000.0)));
  1158   000FE8  0EA3               	movlw	163
  1159   000FEA  6E5A               	movwf	(??_main+1)^0,c
  1160   000FEC  0E57               	movlw	87
  1161   000FEE  6E59               	movwf	??_main^0,c
  1162   000FF0  0E02               	movlw	2
  1163   000FF2                     u1717:
  1164   000FF2  2EE8               	decfsz	wreg,f,c
  1165   000FF4  D7FE               	bra	u1717
  1166   000FF6  2E59               	decfsz	??_main^0,f,c
  1167   000FF8  D7FC               	bra	u1717
  1168   000FFA  2E5A               	decfsz	(??_main+1)^0,f,c
  1169   000FFC  D7FA               	bra	u1717
  1170   000FFE  D000               	nop2	
  1171   001000                     
  1172                           ;../main.c: 78:         }
  1173   001000  0101               	movlb	1	; () banked
  1174   001002  4BCC               	infsnz	main@i& (0+255),f,b
  1175   001004  2BCD               	incf	(main@i+1)& (0+255),f,b
  1176   001006                     
  1177                           ; BSR set to: 1
  1178   001006  BFCD               	btfsc	(main@i+1)& (0+255),7,b
  1179   001008  EF0F  F008         	goto	u1571
  1180   00100C  51CD               	movf	(main@i+1)& (0+255),w,b
  1181   00100E  E109               	bnz	u1570
  1182   001010  0E08               	movlw	8
  1183   001012  5DCC               	subwf	main@i& (0+255),w,b
  1184   001014  A0D8               	btfss	status,0,c
  1185   001016  EF0F  F008         	goto	u1571
  1186   00101A  EF11  F008         	goto	u1570
  1187   00101E                     u1571:
  1188   00101E  EF57  F007         	goto	l3031
  1189   001022                     u1570:
  1190   001022                     
  1191                           ; BSR set to: 1
  1192                           ;../main.c: 81:         lowerbound_calibrated = color_calibrated[8];
  1193   001022  C192  F0FD         	movff	main@color_calibrated+16,main@lowerbound_calibrated
  1194   001026  C193  F0FE         	movff	main@color_calibrated+17,main@lowerbound_calibrated+1
  1195                           
  1196                           ;../main.c: 82:         upperbound_calibrated = color_calibrated[28];
  1197   00102A  C1BA  F1C2         	movff	main@color_calibrated+56,main@upperbound_calibrated
  1198   00102E  C1BB  F1C3         	movff	main@color_calibrated+57,main@upperbound_calibrated+1
  1199   001032                     l3057:
  1200   001032  0E01               	movlw	1
  1201   001034  A68E               	btfss	142,3,c	;volatile
  1202   001036  0E00               	movlw	0
  1203   001038  A48E               	btfss	142,2,c	;volatile
  1204   00103A  0E00               	movlw	0
  1205   00103C  B0E8               	btfsc	wreg,0,c
  1206   00103E  EF23  F008         	goto	u1581
  1207   001042  EF27  F008         	goto	u1580
  1208   001046                     u1581:
  1209   001046  6A59               	clrf	??_main^0,c
  1210   001048  2A59               	incf	??_main^0,f,c
  1211   00104A  EF28  F008         	goto	u1588
  1212   00104E                     u1580:
  1213   00104E  6A59               	clrf	??_main^0,c
  1214   001050                     u1588:
  1215   001050  5059               	movf	??_main^0,w,c
  1216   001052  A4D8               	btfss	status,2,c
  1217   001054  EF2E  F008         	goto	u1591
  1218   001058  EF30  F008         	goto	u1590
  1219   00105C                     u1591:
  1220   00105C  EF19  F008         	goto	l3057
  1221   001060                     u1590:
  1222   001060                     
  1223                           ;../main.c: 86:         if (!PORTFbits.RF2){LATDbits.LATD7 = 1;}
  1224   001060  B48E               	btfsc	142,2,c	;volatile
  1225   001062  EF35  F008         	goto	u1601
  1226   001066  EF37  F008         	goto	u1600
  1227   00106A                     u1601:
  1228   00106A  EF3A  F008         	goto	l201
  1229   00106E                     u1600:
  1230   00106E  8E7C               	bsf	124,7,c	;volatile
  1231   001070  EF0E  F009         	goto	l3103
  1232   001074                     l201:
  1233   001074  8680               	bsf	128,3,c	;volatile
  1234   001076  EF0E  F009         	goto	l3103
  1235   00107A                     l3061:
  1236                           
  1237                           ; BSR set to: 1
  1238                           ;../main.c: 91:             time = 0;
  1239   00107A  0E00               	movlw	0
  1240   00107C  6FF5               	movwf	(_time+1)& (0+255),b
  1241   00107E  0E00               	movlw	0
  1242   001080  6FF4               	movwf	_time& (0+255),b
  1243   001082                     
  1244                           ; BSR set to: 1
  1245                           ;../main.c: 92:             forward(&motorL,&motorR);
  1246   001082  0EE7               	movlw	low main@motorL
  1247   001084  6E1A               	movwf	forward@mL^0,c
  1248   001086  0E01               	movlw	high main@motorL
  1249   001088  6E1B               	movwf	(forward@mL+1)^0,c
  1250   00108A  0EDE               	movlw	low main@motorR
  1251   00108C  6E1C               	movwf	forward@mR^0,c
  1252   00108E  0E01               	movlw	high main@motorR
  1253   001090  6E1D               	movwf	(forward@mR+1)^0,c
  1254   001092  ECB6  F013         	call	_forward	;wreg free
  1255   001096                     
  1256                           ;../main.c: 93:             color_read(&RGB_recorded);
  1257   001096  0ED6               	movlw	low main@RGB_recorded
  1258   001098  6E0C               	movwf	color_read@rgb^0,c
  1259   00109A  0E01               	movlw	high main@RGB_recorded
  1260   00109C  6E0D               	movwf	(color_read@rgb+1)^0,c
  1261   00109E  ECE3  F010         	call	_color_read	;wreg free
  1262   0010A2                     
  1263                           ;../main.c: 94:             if (RGB_recorded.L<upperbound_calibrated && RGB_recorded.L>l
      +                          owerbound_calibrated){color_flag=1;}
  1264   0010A2  0101               	movlb	1	; () banked
  1265   0010A4  51C2               	movf	main@upperbound_calibrated& (0+255),w,b
  1266   0010A6  5DD6               	subwf	main@RGB_recorded& (0+255),w,b
  1267   0010A8  51C3               	movf	(main@upperbound_calibrated+1)& (0+255),w,b
  1268   0010AA  59D7               	subwfb	(main@RGB_recorded+1)& (0+255),w,b
  1269   0010AC  B0D8               	btfsc	status,0,c
  1270   0010AE  EF5B  F008         	goto	u1611
  1271   0010B2  EF5D  F008         	goto	u1610
  1272   0010B6                     u1611:
  1273   0010B6  EF6F  F008         	goto	l3073
  1274   0010BA                     u1610:
  1275   0010BA                     
  1276                           ; BSR set to: 1
  1277   0010BA  51D6               	movf	main@RGB_recorded& (0+255),w,b
  1278   0010BC  0100               	movlb	0	; () banked
  1279   0010BE  5DFD               	subwf	main@lowerbound_calibrated& (0+255),w,b
  1280   0010C0  0101               	movlb	1	; () banked
  1281   0010C2  51D7               	movf	(main@RGB_recorded+1)& (0+255),w,b
  1282   0010C4  0100               	movlb	0	; () banked
  1283   0010C6  59FE               	subwfb	(main@lowerbound_calibrated+1)& (0+255),w,b
  1284   0010C8  B0D8               	btfsc	status,0,c
  1285   0010CA  EF69  F008         	goto	u1621
  1286   0010CE  EF6B  F008         	goto	u1620
  1287   0010D2                     u1621:
  1288   0010D2  EF6F  F008         	goto	l3073
  1289   0010D6                     u1620:
  1290   0010D6                     
  1291                           ; BSR set to: 0
  1292   0010D6  0E00               	movlw	0
  1293   0010D8  6E5C               	movwf	(main@color_flag+1)^0,c
  1294   0010DA  0E01               	movlw	1
  1295   0010DC  6E5B               	movwf	main@color_flag^0,c
  1296   0010DE                     l3073:
  1297                           
  1298                           ;../main.c: 95:             if (color_flag){
  1299   0010DE  505B               	movf	main@color_flag^0,w,c
  1300   0010E0  105C               	iorwf	(main@color_flag+1)^0,w,c
  1301   0010E2  B4D8               	btfsc	status,2,c
  1302   0010E4  EF76  F008         	goto	u1631
  1303   0010E8  EF78  F008         	goto	u1630
  1304   0010EC                     u1631:
  1305   0010EC  EF02  F009         	goto	l3101
  1306   0010F0                     u1630:
  1307   0010F0                     
  1308                           ;../main.c: 96:                 stop(&motorL,&motorR);
  1309   0010F0  0EE7               	movlw	low main@motorL
  1310   0010F2  6E1A               	movwf	stop@mL^0,c
  1311   0010F4  0E01               	movlw	high main@motorL
  1312   0010F6  6E1B               	movwf	(stop@mL+1)^0,c
  1313   0010F8  0EDE               	movlw	low main@motorR
  1314   0010FA  6E1C               	movwf	stop@mR^0,c
  1315   0010FC  0E01               	movlw	high main@motorR
  1316   0010FE  6E1D               	movwf	(stop@mR+1)^0,c
  1317   001100  EC6F  F013         	call	_stop	;wreg free
  1318   001104                     
  1319                           ;../main.c: 97:                 color_read(&RGB_recorded);
  1320   001104  0ED6               	movlw	low main@RGB_recorded
  1321   001106  6E0C               	movwf	color_read@rgb^0,c
  1322   001108  0E01               	movlw	high main@RGB_recorded
  1323   00110A  6E0D               	movwf	(color_read@rgb+1)^0,c
  1324   00110C  ECE3  F010         	call	_color_read	;wreg free
  1325   001110                     
  1326                           ;../main.c: 98:                 if (LATDbits.LATD7){color_name = color_processor_easy(&R
      +                          GB_recorded);}
  1327   001110  AE7C               	btfss	124,7,c	;volatile
  1328   001112  EF8D  F008         	goto	u1641
  1329   001116  EF8F  F008         	goto	u1640
  1330   00111A                     u1641:
  1331   00111A  EF9B  F008         	goto	l3083
  1332   00111E                     u1640:
  1333   00111E  0ED6               	movlw	low main@RGB_recorded
  1334   001120  6E01               	movwf	color_processor_easy@rgb^0,c
  1335   001122  0E01               	movlw	high main@RGB_recorded
  1336   001124  6E02               	movwf	(color_processor_easy@rgb+1)^0,c
  1337   001126  EC84  F010         	call	_color_processor_easy	;wreg free
  1338   00112A  C001  F1C8         	movff	?_color_processor_easy,main@color_name
  1339   00112E  C002  F1C9         	movff	?_color_processor_easy+1,main@color_name+1
  1340   001132  EFA9  F008         	goto	l3085
  1341   001136                     l3083:
  1342   001136  0ED6               	movlw	low main@RGB_recorded
  1343   001138  6E01               	movwf	color_processor_hard@rgb^0,c
  1344   00113A  0E01               	movlw	high main@RGB_recorded
  1345   00113C  6E02               	movwf	(color_processor_hard@rgb+1)^0,c
  1346   00113E  0E82               	movlw	low main@color_calibrated
  1347   001140  6E03               	movwf	color_processor_hard@calibrated^0,c
  1348   001142  0E01               	movlw	high main@color_calibrated
  1349   001144  6E04               	movwf	(color_processor_hard@calibrated+1)^0,c
  1350   001146  ECA9  F00D         	call	_color_processor_hard	;wreg free
  1351   00114A  C001  F1C8         	movff	?_color_processor_hard,main@color_name
  1352   00114E  C002  F1C9         	movff	?_color_processor_hard+1,main@color_name+1
  1353   001152                     l3085:
  1354                           
  1355                           ;../main.c: 100:                 color_path[j] = color_name;
  1356   001152  90D8               	bcf	status,0,c
  1357   001154  0101               	movlb	1	; () banked
  1358   001156  35C6               	rlcf	main@j& (0+255),w,b
  1359   001158  6ED9               	movwf	fsr2l,c
  1360   00115A  35C7               	rlcf	(main@j+1)& (0+255),w,b
  1361   00115C  6EDA               	movwf	fsr2h,c
  1362   00115E  0EDF               	movlw	low main@color_path
  1363   001160  26D9               	addwf	fsr2l,f,c
  1364   001162  0E00               	movlw	high main@color_path
  1365   001164  22DA               	addwfc	fsr2h,f,c
  1366   001166  C1C8  FFDE         	movff	main@color_name,postinc2
  1367   00116A  C1C9  FFDD         	movff	main@color_name+1,postdec2
  1368   00116E                     
  1369                           ; BSR set to: 1
  1370                           ;../main.c: 101:                 time_path[j] = time;
  1371   00116E  90D8               	bcf	status,0,c
  1372   001170  35C6               	rlcf	main@j& (0+255),w,b
  1373   001172  6ED9               	movwf	fsr2l,c
  1374   001174  35C7               	rlcf	(main@j+1)& (0+255),w,b
  1375   001176  6EDA               	movwf	fsr2h,c
  1376   001178  0E64               	movlw	low main@time_path
  1377   00117A  26D9               	addwf	fsr2l,f,c
  1378   00117C  0E01               	movlw	high main@time_path
  1379   00117E  22DA               	addwfc	fsr2h,f,c
  1380   001180  C1F4  FFDE         	movff	_time,postinc2
  1381   001184  C1F5  FFDD         	movff	_time+1,postdec2
  1382   001188                     
  1383                           ; BSR set to: 1
  1384                           ;../main.c: 104:                 char readout3[100];;../main.c: 105:                 spr
      +                          intf(readout3,"%d %d %d %d %d \r\n", color_name,RGB_recorded.L,RGB_recorded.R,RGB_record
      +                          ed.G,RGB_recorded.B);
  1385   001188  0E00               	movlw	low main@readout3
  1386   00118A  0100               	movlb	0	; () banked
  1387   00118C  6F60               	movwf	sprintf@s& (0+255),b
  1388   00118E  0E01               	movlw	high main@readout3
  1389   001190  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1390   001192  0E01               	movlw	low STR_2
  1391   001194  6F62               	movwf	sprintf@fmt& (0+255),b
  1392   001196  0E0E               	movlw	high STR_2
  1393   001198  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1394   00119A  C1C8  F064         	movff	main@color_name,?_sprintf+4
  1395   00119E  C1C9  F065         	movff	main@color_name+1,?_sprintf+5
  1396   0011A2  C1D6  F066         	movff	main@RGB_recorded,?_sprintf+6
  1397   0011A6  C1D7  F067         	movff	main@RGB_recorded+1,?_sprintf+7
  1398   0011AA  C1D8  F068         	movff	main@RGB_recorded+2,?_sprintf+8
  1399   0011AE  C1D9  F069         	movff	main@RGB_recorded+3,?_sprintf+9
  1400   0011B2  C1DA  F06A         	movff	main@RGB_recorded+4,?_sprintf+10
  1401   0011B6  C1DB  F06B         	movff	main@RGB_recorded+5,?_sprintf+11
  1402   0011BA  C1DC  F06C         	movff	main@RGB_recorded+6,?_sprintf+12
  1403   0011BE  C1DD  F06D         	movff	main@RGB_recorded+7,?_sprintf+13
  1404   0011C2  EC65  F014         	call	_sprintf	;wreg free
  1405   0011C6                     
  1406                           ;../main.c: 106:                 sendStringSerial4(readout3);
  1407   0011C6  0E00               	movlw	low main@readout3
  1408   0011C8  6E02               	movwf	sendStringSerial4@string^0,c
  1409   0011CA  0E01               	movlw	high main@readout3
  1410   0011CC  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1411   0011CE  ECDB  F015         	call	_sendStringSerial4	;wreg free
  1412   0011D2                     
  1413                           ;../main.c: 108:                 motor_action(color_name,&motorL,&motorR);
  1414   0011D2  C1C8  F022         	movff	main@color_name,motor_action@color
  1415   0011D6  C1C9  F023         	movff	main@color_name+1,motor_action@color+1
  1416   0011DA  0EE7               	movlw	low main@motorL
  1417   0011DC  6E24               	movwf	motor_action@l^0,c
  1418   0011DE  0E01               	movlw	high main@motorL
  1419   0011E0  6E25               	movwf	(motor_action@l+1)^0,c
  1420   0011E2  0EDE               	movlw	low main@motorR
  1421   0011E4  6E26               	movwf	motor_action@r^0,c
  1422   0011E6  0E01               	movlw	high main@motorR
  1423   0011E8  6E27               	movwf	(motor_action@r+1)^0,c
  1424   0011EA  ECD4  F00A         	call	_motor_action	;wreg free
  1425   0011EE                     
  1426                           ;../main.c: 110:                 j++;
  1427   0011EE  0101               	movlb	1	; () banked
  1428   0011F0  4BC6               	infsnz	main@j& (0+255),f,b
  1429   0011F2  2BC7               	incf	(main@j+1)& (0+255),f,b
  1430   0011F4                     
  1431                           ; BSR set to: 1
  1432                           ;../main.c: 111:                 time = 0;
  1433   0011F4  0E00               	movlw	0
  1434   0011F6  6FF5               	movwf	(_time+1)& (0+255),b
  1435   0011F8  0E00               	movlw	0
  1436   0011FA  6FF4               	movwf	_time& (0+255),b
  1437   0011FC                     
  1438                           ; BSR set to: 1
  1439                           ;../main.c: 112:                 color_flag = 0;
  1440   0011FC  0E00               	movlw	0
  1441   0011FE  6E5C               	movwf	(main@color_flag+1)^0,c
  1442   001200  0E00               	movlw	0
  1443   001202  6E5B               	movwf	main@color_flag^0,c
  1444   001204                     l3101:
  1445                           
  1446                           ;../main.c: 114:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1447   001204  0E11               	movlw	17
  1448   001206  6E5A               	movwf	(??_main+1)^0,c
  1449   001208  0E3C               	movlw	60
  1450   00120A  6E59               	movwf	??_main^0,c
  1451   00120C  0ECB               	movlw	203
  1452   00120E                     u1727:
  1453   00120E  2EE8               	decfsz	wreg,f,c
  1454   001210  D7FE               	bra	u1727
  1455   001212  2E59               	decfsz	??_main^0,f,c
  1456   001214  D7FC               	bra	u1727
  1457   001216  2E5A               	decfsz	(??_main+1)^0,f,c
  1458   001218  D7FA               	bra	u1727
  1459   00121A  F000               	nop	
  1460   00121C                     l3103:
  1461                           
  1462                           ;../main.c: 90:         while (color_name != 8){
  1463   00121C  0E08               	movlw	8
  1464   00121E  0101               	movlb	1	; () banked
  1465   001220  19C8               	xorwf	main@color_name& (0+255),w,b
  1466   001222  11C9               	iorwf	(main@color_name+1)& (0+255),w,b
  1467   001224  A4D8               	btfss	status,2,c
  1468   001226  EF17  F009         	goto	u1651
  1469   00122A  EF19  F009         	goto	u1650
  1470   00122E                     u1651:
  1471   00122E  EF3D  F008         	goto	l3061
  1472   001232                     u1650:
  1473   001232                     
  1474                           ; BSR set to: 1
  1475                           ;../main.c: 118:         spin_180(&motorL,&motorR);
  1476   001232  0EE7               	movlw	low main@motorL
  1477   001234  6E1A               	movwf	spin_180@mL^0,c
  1478   001236  0E01               	movlw	high main@motorL
  1479   001238  6E1B               	movwf	(spin_180@mL+1)^0,c
  1480   00123A  0EDE               	movlw	low main@motorR
  1481   00123C  6E1C               	movwf	spin_180@mR^0,c
  1482   00123E  0E01               	movlw	high main@motorR
  1483   001240  6E1D               	movwf	(spin_180@mR+1)^0,c
  1484   001242  ECDA  F011         	call	_spin_180	;wreg free
  1485   001246                     
  1486                           ;../main.c: 119:         for (int k=0;k<15;k++){
  1487   001246  0E00               	movlw	0
  1488   001248  0101               	movlb	1	; () banked
  1489   00124A  6FCB               	movwf	(main@k+1)& (0+255),b
  1490   00124C  0E00               	movlw	0
  1491   00124E  6FCA               	movwf	main@k& (0+255),b
  1492   001250                     l3109:
  1493                           
  1494                           ; BSR set to: 1
  1495   001250  BFCB               	btfsc	(main@k+1)& (0+255),7,b
  1496   001252  EF34  F009         	goto	u1661
  1497   001256  51CB               	movf	(main@k+1)& (0+255),w,b
  1498   001258  E109               	bnz	u1660
  1499   00125A  0E0F               	movlw	15
  1500   00125C  5DCA               	subwf	main@k& (0+255),w,b
  1501   00125E  A0D8               	btfss	status,0,c
  1502   001260  EF34  F009         	goto	u1661
  1503   001264  EF36  F009         	goto	u1660
  1504   001268                     u1661:
  1505   001268  EF38  F009         	goto	l210
  1506   00126C                     u1660:
  1507   00126C  EF4B  F007         	goto	l193
  1508   001270                     l210:
  1509                           
  1510                           ; BSR set to: 1
  1511                           ;../main.c: 120:             INTCONbits.GIE = 0;
  1512   001270  9EF2               	bcf	242,7,c	;volatile
  1513   001272                     
  1514                           ; BSR set to: 1
  1515                           ;../main.c: 121:             time_return = 0;
  1516   001272  0E00               	movlw	0
  1517   001274  6FC5               	movwf	(main@time_return+1)& (0+255),b
  1518   001276  0E00               	movlw	0
  1519   001278  6FC4               	movwf	main@time_return& (0+255),b
  1520   00127A                     
  1521                           ; BSR set to: 1
  1522                           ;../main.c: 122:             motor_action(color_path[k],&motorL,&motorR);
  1523   00127A  90D8               	bcf	status,0,c
  1524   00127C  35CA               	rlcf	main@k& (0+255),w,b
  1525   00127E  6ED9               	movwf	fsr2l,c
  1526   001280  35CB               	rlcf	(main@k+1)& (0+255),w,b
  1527   001282  6EDA               	movwf	fsr2h,c
  1528   001284  0EDF               	movlw	low main@color_path
  1529   001286  26D9               	addwf	fsr2l,f,c
  1530   001288  0E00               	movlw	high main@color_path
  1531   00128A  22DA               	addwfc	fsr2h,f,c
  1532   00128C  CFDE F022          	movff	postinc2,motor_action@color
  1533   001290  CFDD F023          	movff	postdec2,motor_action@color+1
  1534   001294  0EE7               	movlw	low main@motorL
  1535   001296  6E24               	movwf	motor_action@l^0,c
  1536   001298  0E01               	movlw	high main@motorL
  1537   00129A  6E25               	movwf	(motor_action@l+1)^0,c
  1538   00129C  0EDE               	movlw	low main@motorR
  1539   00129E  6E26               	movwf	motor_action@r^0,c
  1540   0012A0  0E01               	movlw	high main@motorR
  1541   0012A2  6E27               	movwf	(motor_action@r+1)^0,c
  1542   0012A4  ECD4  F00A         	call	_motor_action	;wreg free
  1543   0012A8                     
  1544                           ;../main.c: 123:             forward(&motorL,&motorR);
  1545   0012A8  0EE7               	movlw	low main@motorL
  1546   0012AA  6E1A               	movwf	forward@mL^0,c
  1547   0012AC  0E01               	movlw	high main@motorL
  1548   0012AE  6E1B               	movwf	(forward@mL+1)^0,c
  1549   0012B0  0EDE               	movlw	low main@motorR
  1550   0012B2  6E1C               	movwf	forward@mR^0,c
  1551   0012B4  0E01               	movlw	high main@motorR
  1552   0012B6  6E1D               	movwf	(forward@mR+1)^0,c
  1553   0012B8  ECB6  F013         	call	_forward	;wreg free
  1554                           
  1555                           ;../main.c: 124:             while (time_return < time_path[k]) {
  1556   0012BC  EF6F  F009         	goto	l3123
  1557   0012C0                     l3119:
  1558                           
  1559                           ; BSR set to: 1
  1560                           ;../main.c: 125:                 _delay((unsigned long)((50)*(64000000/4000.0)));
  1561   0012C0  0E05               	movlw	5
  1562   0012C2  6E5A               	movwf	(??_main+1)^0,c
  1563   0012C4  0E0F               	movlw	15
  1564   0012C6  6E59               	movwf	??_main^0,c
  1565   0012C8  0EF1               	movlw	241
  1566   0012CA                     u1737:
  1567   0012CA  2EE8               	decfsz	wreg,f,c
  1568   0012CC  D7FE               	bra	u1737
  1569   0012CE  2E59               	decfsz	??_main^0,f,c
  1570   0012D0  D7FC               	bra	u1737
  1571   0012D2  2E5A               	decfsz	(??_main+1)^0,f,c
  1572   0012D4  D7FA               	bra	u1737
  1573   0012D6  F000               	nop	
  1574   0012D8                     
  1575                           ;../main.c: 126:                 time_return++;
  1576   0012D8  0101               	movlb	1	; () banked
  1577   0012DA  4BC4               	infsnz	main@time_return& (0+255),f,b
  1578   0012DC  2BC5               	incf	(main@time_return+1)& (0+255),f,b
  1579   0012DE                     l3123:
  1580                           
  1581                           ;../main.c: 124:             while (time_return < time_path[k]) {
  1582   0012DE  90D8               	bcf	status,0,c
  1583   0012E0  0101               	movlb	1	; () banked
  1584   0012E2  35CA               	rlcf	main@k& (0+255),w,b
  1585   0012E4  6ED9               	movwf	fsr2l,c
  1586   0012E6  35CB               	rlcf	(main@k+1)& (0+255),w,b
  1587   0012E8  6EDA               	movwf	fsr2h,c
  1588   0012EA  0E64               	movlw	low main@time_path
  1589   0012EC  26D9               	addwf	fsr2l,f,c
  1590   0012EE  0E01               	movlw	high main@time_path
  1591   0012F0  22DA               	addwfc	fsr2h,f,c
  1592   0012F2  50DE               	movf	postinc2,w,c
  1593   0012F4  5DC4               	subwf	main@time_return& (0+255),w,b
  1594   0012F6  50DE               	movf	postinc2,w,c
  1595   0012F8  59C5               	subwfb	(main@time_return+1)& (0+255),w,b
  1596   0012FA  A0D8               	btfss	status,0,c
  1597   0012FC  EF82  F009         	goto	u1671
  1598   001300  EF84  F009         	goto	u1670
  1599   001304                     u1671:
  1600   001304  EF60  F009         	goto	l3119
  1601   001308                     u1670:
  1602   001308                     
  1603                           ; BSR set to: 1
  1604                           ;../main.c: 128:             stop(&motorL,&motorR);
  1605   001308  0EE7               	movlw	low main@motorL
  1606   00130A  6E1A               	movwf	stop@mL^0,c
  1607   00130C  0E01               	movlw	high main@motorL
  1608   00130E  6E1B               	movwf	(stop@mL+1)^0,c
  1609   001310  0EDE               	movlw	low main@motorR
  1610   001312  6E1C               	movwf	stop@mR^0,c
  1611   001314  0E01               	movlw	high main@motorR
  1612   001316  6E1D               	movwf	(stop@mR+1)^0,c
  1613   001318  EC6F  F013         	call	_stop	;wreg free
  1614   00131C                     
  1615                           ;../main.c: 129:         }
  1616   00131C  0101               	movlb	1	; () banked
  1617   00131E  4BCA               	infsnz	main@k& (0+255),f,b
  1618   001320  2BCB               	incf	(main@k+1)& (0+255),f,b
  1619   001322  EF28  F009         	goto	l3109
  1620   001326  EF1F  F000         	goto	start
  1621   00132A                     __end_of_main:
  1622                           	callstack 0
  1623                           
  1624 ;; *************** function _sprintf *****************
  1625 ;; Defined at:
  1626 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;  s               2    0[BANK0 ] PTR unsigned char 
  1629 ;;		 -> main@readout3(100), main@readout2(100), 
  1630 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1631 ;;		 -> STR_2(18), STR_1(15), 
  1632 ;; Auto vars:     Size  Location     Type
  1633 ;;  f              11   16[BANK0 ] struct _IO_FILE
  1634 ;;  ap              2   14[BANK0 ] PTR void [1]
  1635 ;;		 -> ?_sprintf(2), 
  1636 ;;  ret             2    0        int 
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  2    0[BANK0 ] int 
  1639 ;; Registers used:
  1640 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1646 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1647 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1649 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1650 ;;Total ram usage:       27 bytes
  1651 ;; Hardware stack levels used: 1
  1652 ;; Hardware stack levels required when called: 8
  1653 ;; This function calls:
  1654 ;;		_vfprintf
  1655 ;; This function is called by:
  1656 ;;		_main
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660                           	psect	text1
  1661   0028CA                     __ptext1:
  1662                           	callstack 0
  1663   0028CA                     _sprintf:
  1664                           	callstack 22
  1665   0028CA  0E64               	movlw	low (?_sprintf+4)
  1666   0028CC  0100               	movlb	0	; () banked
  1667   0028CE  6F6E               	movwf	sprintf@ap& (0+255),b
  1668   0028D0  0E00               	movlw	high (?_sprintf+4)
  1669   0028D2  6F6F               	movwf	(sprintf@ap+1)& (0+255),b
  1670   0028D4  C060  F070         	movff	sprintf@s,sprintf@f
  1671   0028D8  C061  F071         	movff	sprintf@s+1,sprintf@f+1
  1672   0028DC                     
  1673                           ; BSR set to: 0
  1674   0028DC  0E00               	movlw	0
  1675   0028DE  6F74               	movwf	(sprintf@f+4)& (0+255),b
  1676   0028E0  0E00               	movlw	0
  1677   0028E2  6F73               	movwf	(sprintf@f+3)& (0+255),b
  1678   0028E4                     
  1679                           ; BSR set to: 0
  1680   0028E4  0E00               	movlw	0
  1681   0028E6  6F7A               	movwf	(sprintf@f+10)& (0+255),b
  1682   0028E8  0E00               	movlw	0
  1683   0028EA  6F79               	movwf	(sprintf@f+9)& (0+255),b
  1684   0028EC                     
  1685                           ; BSR set to: 0
  1686   0028EC  0E70               	movlw	low sprintf@f
  1687   0028EE  6E51               	movwf	vfprintf@fp^0,c
  1688   0028F0  0E00               	movlw	high sprintf@f
  1689   0028F2  6E52               	movwf	(vfprintf@fp+1)^0,c
  1690   0028F4  C062  F053         	movff	sprintf@fmt,vfprintf@fmt
  1691   0028F8  C063  F054         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1692   0028FC  0E6E               	movlw	low sprintf@ap
  1693   0028FE  6E55               	movwf	vfprintf@ap^0,c
  1694   002900  0E00               	movlw	high sprintf@ap
  1695   002902  6E56               	movwf	(vfprintf@ap+1)^0,c
  1696   002904  EC8E  F014         	call	_vfprintf	;wreg free
  1697   002908  0100               	movlb	0	; () banked
  1698   00290A  5173               	movf	(sprintf@f+3)& (0+255),w,b
  1699   00290C  2560               	addwf	sprintf@s& (0+255),w,b
  1700   00290E  6ED9               	movwf	fsr2l,c
  1701   002910  5174               	movf	(sprintf@f+4)& (0+255),w,b
  1702   002912  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  1703   002914  6EDA               	movwf	fsr2h,c
  1704   002916  0E00               	movlw	0
  1705   002918  6EDF               	movwf	indf2,c
  1706   00291A                     
  1707                           ; BSR set to: 0
  1708   00291A  0012               	return		;funcret
  1709   00291C                     __end_of_sprintf:
  1710                           	callstack 0
  1711                           
  1712 ;; *************** function _vfprintf *****************
  1713 ;; Defined at:
  1714 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1715 ;; Parameters:    Size  Location     Type
  1716 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
  1717 ;;		 -> sprintf@f(11), 
  1718 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
  1719 ;;		 -> STR_2(18), STR_1(15), 
  1720 ;;  ap              2   84[COMRAM] PTR PTR void 
  1721 ;;		 -> sprintf@ap(2), 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  cfmt            2   86[COMRAM] PTR unsigned char 
  1724 ;;		 -> STR_2(18), STR_1(15), 
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  2   80[COMRAM] int 
  1727 ;; Registers used:
  1728 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1734 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1735 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1737 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1738 ;;Total ram usage:        8 bytes
  1739 ;; Hardware stack levels used: 1
  1740 ;; Hardware stack levels required when called: 7
  1741 ;; This function calls:
  1742 ;;		_vfpfcnvrt
  1743 ;; This function is called by:
  1744 ;;		_sprintf
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           	psect	text2
  1749   00291C                     __ptext2:
  1750                           	callstack 0
  1751   00291C                     _vfprintf:
  1752                           	callstack 22
  1753   00291C                     
  1754                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  1755   00291C  C053  F057         	movff	vfprintf@fmt,vfprintf@cfmt
  1756   002920  C054  F058         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1757                           
  1758                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1759   002924  EFA2  F014         	goto	l2743
  1760   002928                     l2741:
  1761                           
  1762                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1763   002928  C051  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1764   00292C  C052  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1765   002930  0E57               	movlw	low vfprintf@cfmt
  1766   002932  6E41               	movwf	vfpfcnvrt@fmt^0,c
  1767   002934  0E00               	movlw	high vfprintf@cfmt
  1768   002936  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1769   002938  C055  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
  1770   00293C  C056  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1771   002940  EC0E  F00F         	call	_vfpfcnvrt	;wreg free
  1772   002944                     l2743:
  1773                           
  1774                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1775   002944  C057  FFF6         	movff	vfprintf@cfmt,tblptrl
  1776   002948  C058  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1777   00294C                     	if	0	;tblptru may be non-zero
  1778   00294C                     	endif
  1779   00294C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1780   00294C  0E00               	movlw	low (__mediumconst shr (0+16))
  1781   00294E  6EF8               	movwf	tblptru,c
  1782   002950                     	endif
  1783   002950  0008               	tblrd		*
  1784   002952  50F5               	movf	tablat,w,c
  1785   002954  0900               	iorlw	0
  1786   002956  A4D8               	btfss	status,2,c
  1787   002958  EFB0  F014         	goto	u1431
  1788   00295C  EFB2  F014         	goto	u1430
  1789   002960                     u1431:
  1790   002960  EF94  F014         	goto	l2741
  1791   002964                     u1430:
  1792   002964                     
  1793                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  1794   002964  0E00               	movlw	0
  1795   002966  6E52               	movwf	(?_vfprintf+1)^0,c
  1796   002968  0E00               	movlw	0
  1797   00296A  6E51               	movwf	?_vfprintf^0,c
  1798   00296C  0012               	return		;funcret
  1799   00296E                     __end_of_vfprintf:
  1800                           	callstack 0
  1801                           
  1802 ;; *************** function _vfpfcnvrt *****************
  1803 ;; Defined at:
  1804 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
  1807 ;;		 -> sprintf@f(11), 
  1808 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
  1809 ;;		 -> vfprintf@cfmt(2), 
  1810 ;;  ap              2   66[COMRAM] PTR PTR void 
  1811 ;;		 -> sprintf@ap(2), 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;  convarg         8   70[COMRAM] struct .
  1814 ;;  cp              2   78[COMRAM] PTR unsigned char 
  1815 ;;		 -> STR_2(18), STR_1(15), 
  1816 ;;  i               2    0        int 
  1817 ;;  done            2    0        int 
  1818 ;;  c               1    0        unsigned char 
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      void 
  1821 ;; Registers used:
  1822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1828 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1829 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1830 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1831 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1832 ;;Total ram usage:       18 bytes
  1833 ;; Hardware stack levels used: 1
  1834 ;; Hardware stack levels required when called: 6
  1835 ;; This function calls:
  1836 ;;		_dtoa
  1837 ;;		_fputc
  1838 ;; This function is called by:
  1839 ;;		_vfprintf
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text3
  1844   001E1C                     __ptext3:
  1845                           	callstack 0
  1846   001E1C                     _vfpfcnvrt:
  1847                           	callstack 22
  1848   001E1C                     
  1849                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  1850   001E1C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1851   001E20  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1852   001E24  CFDE FFF6          	movff	postinc2,tblptrl
  1853   001E28  CFDD FFF7          	movff	postdec2,tblptrh
  1854   001E2C                     	if	0	;tblptru may be non-zero
  1855   001E2C                     	endif
  1856   001E2C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1857   001E2C  0E00               	movlw	low (__mediumconst shr (0+16))
  1858   001E2E  6EF8               	movwf	tblptru,c
  1859   001E30                     	endif
  1860   001E30  0008               	tblrd		*
  1861   001E32  50F5               	movf	tablat,w,c
  1862   001E34  0A25               	xorlw	37
  1863   001E36  A4D8               	btfss	status,2,c
  1864   001E38  EF20  F00F         	goto	u1311
  1865   001E3C  EF22  F00F         	goto	u1310
  1866   001E40                     u1311:
  1867   001E40  EFA6  F00F         	goto	l2507
  1868   001E44                     u1310:
  1869   001E44                     
  1870                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  1871   001E44  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1872   001E48  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1873   001E4C  2ADE               	incf	postinc2,f,c
  1874   001E4E  0E00               	movlw	0
  1875   001E50  22DD               	addwfc	postdec2,f,c
  1876   001E52                     
  1877                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  1878   001E52  0E00               	movlw	0
  1879   001E54  0101               	movlb	1	; () banked
  1880   001E56  6FF1               	movwf	(_width+1)& (0+255),b
  1881   001E58  0E00               	movlw	0
  1882   001E5A  6FF0               	movwf	_width& (0+255),b
  1883   001E5C  C1F0  F1FA         	movff	_width,_flags
  1884   001E60                     
  1885                           ; BSR set to: 1
  1886                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  1887   001E60  69F2               	setf	_prec& (0+255),b
  1888   001E62  69F3               	setf	(_prec+1)& (0+255),b
  1889   001E64                     
  1890                           ; BSR set to: 1
  1891                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1892   001E64  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1893   001E68  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1894   001E6C  CFDE F04F          	movff	postinc2,vfpfcnvrt@cp
  1895   001E70  CFDD F050          	movff	postdec2,vfpfcnvrt@cp+1
  1896   001E74                     
  1897                           ; BSR set to: 1
  1898                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1899   001E74  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1900   001E78  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1901   001E7C                     	if	0	;tblptru may be non-zero
  1902   001E7C                     	endif
  1903   001E7C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1904   001E7C  0E00               	movlw	low (__mediumconst shr (0+16))
  1905   001E7E  6EF8               	movwf	tblptru,c
  1906   001E80                     	endif
  1907   001E80  0008               	tblrd		*
  1908   001E82  50F5               	movf	tablat,w,c
  1909   001E84  0A64               	xorlw	100
  1910   001E86  B4D8               	btfsc	status,2,c
  1911   001E88  EF48  F00F         	goto	u1321
  1912   001E8C  EF4A  F00F         	goto	u1320
  1913   001E90                     u1321:
  1914   001E90  EF5A  F00F         	goto	l2497
  1915   001E94                     u1320:
  1916   001E94                     
  1917                           ; BSR set to: 1
  1918   001E94  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1919   001E98  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1920   001E9C                     	if	0	;tblptru may be non-zero
  1921   001E9C                     	endif
  1922   001E9C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1923   001E9C  0E00               	movlw	low (__mediumconst shr (0+16))
  1924   001E9E  6EF8               	movwf	tblptru,c
  1925   001EA0                     	endif
  1926   001EA0  0008               	tblrd		*
  1927   001EA2  50F5               	movf	tablat,w,c
  1928   001EA4  0A69               	xorlw	105
  1929   001EA6  A4D8               	btfss	status,2,c
  1930   001EA8  EF58  F00F         	goto	u1331
  1931   001EAC  EF5A  F00F         	goto	u1330
  1932   001EB0                     u1331:
  1933   001EB0  EF9D  F00F         	goto	l2503
  1934   001EB4                     u1330:
  1935   001EB4                     l2497:
  1936                           
  1937                           ; BSR set to: 1
  1938                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1939   001EB4  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1940   001EB8  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1941   001EBC  CFDF F045          	movff	indf2,??_vfpfcnvrt
  1942   001EC0  0E02               	movlw	2
  1943   001EC2  26DE               	addwf	postinc2,f,c
  1944   001EC4  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  1945   001EC8  0E00               	movlw	0
  1946   001ECA  22DD               	addwfc	postdec2,f,c
  1947   001ECC  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1948   001ED0  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1949   001ED4  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg
  1950   001ED8  CFDD F048          	movff	postdec2,vfpfcnvrt@convarg+1
  1951   001EDC  0E00               	movlw	0
  1952   001EDE  BE48               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1953   001EE0  0EFF               	movlw	-1
  1954   001EE2  6E49               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1955   001EE4  6E4A               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1956   001EE6  6E4B               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1957   001EE8  6E4C               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1958   001EEA  6E4D               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1959   001EEC  6E4E               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1960                           
  1961                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1962   001EEE  0E01               	movlw	1
  1963   001EF0  244F               	addwf	vfpfcnvrt@cp^0,w,c
  1964   001EF2  6E45               	movwf	??_vfpfcnvrt^0,c
  1965   001EF4  0E00               	movlw	0
  1966   001EF6  2050               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1967   001EF8  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  1968   001EFA  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1969   001EFE  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1970   001F02  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  1971   001F06  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1972   001F0A                     
  1973                           ; BSR set to: 1
  1974                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1975   001F0A  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1976   001F0E  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1977   001F12  C047  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  1978   001F16  C048  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1979   001F1A  C049  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1980   001F1E  C04A  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1981   001F22  C04B  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1982   001F26  C04C  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1983   001F2A  C04D  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1984   001F2E  C04E  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1985   001F32  EC95  F009         	call	_dtoa	;wreg free
  1986   001F36  EFBC  F00F         	goto	l1171
  1987   001F3A                     l2503:
  1988                           
  1989                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1990   001F3A  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1991   001F3E  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1992   001F42  2ADE               	incf	postinc2,f,c
  1993   001F44  0E00               	movlw	0
  1994   001F46  22DD               	addwfc	postdec2,f,c
  1995   001F48  EFBC  F00F         	goto	l1171
  1996   001F4C                     l2507:
  1997                           
  1998                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1999   001F4C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2000   001F50  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2001   001F54  CFDE FFF6          	movff	postinc2,tblptrl
  2002   001F58  CFDD FFF7          	movff	postdec2,tblptrh
  2003   001F5C                     	if	0	;tblptru may be non-zero
  2004   001F5C                     	endif
  2005   001F5C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2006   001F5C  0E00               	movlw	low (__mediumconst shr (0+16))
  2007   001F5E  6EF8               	movwf	tblptru,c
  2008   001F60                     	endif
  2009   001F60  0008               	tblrd		*
  2010   001F62  50F5               	movf	tablat,w,c
  2011   001F64  6E01               	movwf	fputc@c^0,c
  2012   001F66  6A02               	clrf	(fputc@c+1)^0,c
  2013   001F68  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2014   001F6C  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2015   001F70  ECBD  F00F         	call	_fputc	;wreg free
  2016   001F74  EF9D  F00F         	goto	l2503
  2017   001F78                     l1171:
  2018   001F78  0012               	return		;funcret
  2019   001F7A                     __end_of_vfpfcnvrt:
  2020                           	callstack 0
  2021                           
  2022 ;; *************** function _dtoa *****************
  2023 ;; Defined at:
  2024 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2027 ;;		 -> sprintf@f(11), 
  2028 ;;  d               8   29[COMRAM] long long 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  n               8   51[COMRAM] long long 
  2031 ;;  i               2   59[COMRAM] int 
  2032 ;;  w               2   49[COMRAM] int 
  2033 ;;  p               2   47[COMRAM] int 
  2034 ;;  s               1   61[COMRAM] unsigned char 
  2035 ;; Return value:  Size  Location     Type
  2036 ;;                  1    wreg      void 
  2037 ;; Registers used:
  2038 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2039 ;; Tracked objects:
  2040 ;;		On entry : 0/0
  2041 ;;		On exit  : 0/0
  2042 ;;		Unchanged: 0/0
  2043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2044 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2045 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2046 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2047 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2048 ;;Total ram usage:       35 bytes
  2049 ;; Hardware stack levels used: 1
  2050 ;; Hardware stack levels required when called: 5
  2051 ;; This function calls:
  2052 ;;		___aodiv
  2053 ;;		___aomod
  2054 ;;		_abs
  2055 ;;		_pad
  2056 ;; This function is called by:
  2057 ;;		_vfpfcnvrt
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           	psect	text4
  2062   00132A                     __ptext4:
  2063                           	callstack 0
  2064   00132A                     _dtoa:
  2065                           	callstack 22
  2066   00132A                     
  2067                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2068   00132A  C01E  F034         	movff	dtoa@d,dtoa@n
  2069   00132E  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  2070   001332  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  2071   001336  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  2072   00133A  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  2073   00133E  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  2074   001342  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  2075   001346  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  2076   00134A                     
  2077                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2078   00134A  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  2079   00134C  EFAA  F009         	goto	u1151
  2080   001350  EFAD  F009         	goto	u1150
  2081   001354                     u1151:
  2082   001354  0E01               	movlw	1
  2083   001356  EFAE  F009         	goto	u1160
  2084   00135A                     u1150:
  2085   00135A  0E00               	movlw	0
  2086   00135C                     u1160:
  2087   00135C  6E3E               	movwf	dtoa@s^0,c
  2088   00135E                     
  2089                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2090   00135E  503E               	movf	dtoa@s^0,w,c
  2091   001360  B4D8               	btfsc	status,2,c
  2092   001362  EFB5  F009         	goto	u1171
  2093   001366  EFB7  F009         	goto	u1170
  2094   00136A                     u1171:
  2095   00136A  EFC7  F009         	goto	l2395
  2096   00136E                     u1170:
  2097   00136E                     
  2098                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2099   00136E  1E3B               	comf	(dtoa@n+7)^0,f,c
  2100   001370  1E3A               	comf	(dtoa@n+6)^0,f,c
  2101   001372  1E39               	comf	(dtoa@n+5)^0,f,c
  2102   001374  1E38               	comf	(dtoa@n+4)^0,f,c
  2103   001376  1E37               	comf	(dtoa@n+3)^0,f,c
  2104   001378  1E36               	comf	(dtoa@n+2)^0,f,c
  2105   00137A  1E35               	comf	(dtoa@n+1)^0,f,c
  2106   00137C  6C34               	negf	dtoa@n^0,c
  2107   00137E  0E00               	movlw	0
  2108   001380  2235               	addwfc	(dtoa@n+1)^0,f,c
  2109   001382  2236               	addwfc	(dtoa@n+2)^0,f,c
  2110   001384  2237               	addwfc	(dtoa@n+3)^0,f,c
  2111   001386  2238               	addwfc	(dtoa@n+4)^0,f,c
  2112   001388  2239               	addwfc	(dtoa@n+5)^0,f,c
  2113   00138A  223A               	addwfc	(dtoa@n+6)^0,f,c
  2114   00138C  223B               	addwfc	(dtoa@n+7)^0,f,c
  2115   00138E                     l2395:
  2116                           
  2117                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2118   00138E  0101               	movlb	1	; () banked
  2119   001390  BFF3               	btfsc	(_prec+1)& (0+255),7,b
  2120   001392  EFD5  F009         	goto	u1180
  2121   001396  51F3               	movf	(_prec+1)& (0+255),w,b
  2122   001398  E106               	bnz	u1181
  2123   00139A  05F2               	decf	_prec& (0+255),w,b
  2124   00139C  B0D8               	btfsc	status,0,c
  2125   00139E  EFD3  F009         	goto	u1181
  2126   0013A2  EFD5  F009         	goto	u1180
  2127   0013A6                     u1181:
  2128   0013A6  EFDB  F009         	goto	l1150
  2129   0013AA                     u1180:
  2130   0013AA                     
  2131                           ; BSR set to: 1
  2132   0013AA  0E00               	movlw	0
  2133   0013AC  6E31               	movwf	(dtoa@p+1)^0,c
  2134   0013AE  0E01               	movlw	1
  2135   0013B0  6E30               	movwf	dtoa@p^0,c
  2136   0013B2  EFDF  F009         	goto	l1152
  2137   0013B6                     l1150:
  2138                           
  2139                           ; BSR set to: 1
  2140   0013B6  C1F2  F030         	movff	_prec,dtoa@p
  2141   0013BA  C1F3  F031         	movff	_prec+1,dtoa@p+1
  2142   0013BE                     l1152:
  2143                           
  2144                           ; BSR set to: 1
  2145                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2146   0013BE  C1F0  F032         	movff	_width,dtoa@w
  2147   0013C2  C1F1  F033         	movff	_width+1,dtoa@w+1
  2148   0013C6                     
  2149                           ; BSR set to: 1
  2150                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2151   0013C6  503E               	movf	dtoa@s^0,w,c
  2152   0013C8  B4D8               	btfsc	status,2,c
  2153   0013CA  EFE9  F009         	goto	u1191
  2154   0013CE  EFEB  F009         	goto	u1190
  2155   0013D2                     u1191:
  2156   0013D2  EF02  F00A         	goto	l1153
  2157   0013D6                     u1190:
  2158   0013D6                     
  2159                           ; BSR set to: 1
  2160                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2161   0013D6  0632               	decf	dtoa@w^0,f,c
  2162   0013D8  A0D8               	btfss	status,0,c
  2163   0013DA  0633               	decf	(dtoa@w+1)^0,f,c
  2164   0013DC                     
  2165                           ; BSR set to: 1
  2166                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2167   0013DC  503E               	movf	dtoa@s^0,w,c
  2168   0013DE  A4D8               	btfss	status,2,c
  2169   0013E0  EFF4  F009         	goto	u1201
  2170   0013E4  EFF6  F009         	goto	u1200
  2171   0013E8                     u1201:
  2172   0013E8  EFFC  F009         	goto	l2407
  2173   0013EC                     u1200:
  2174   0013EC                     
  2175                           ; BSR set to: 1
  2176   0013EC  0E00               	movlw	0
  2177   0013EE  6E2F               	movwf	(_dtoa$2417+1)^0,c
  2178   0013F0  0E2B               	movlw	43
  2179   0013F2  6E2E               	movwf	_dtoa$2417^0,c
  2180   0013F4  EF00  F00A         	goto	l2409
  2181   0013F8                     l2407:
  2182                           
  2183                           ; BSR set to: 1
  2184   0013F8  0E00               	movlw	0
  2185   0013FA  6E2F               	movwf	(_dtoa$2417+1)^0,c
  2186   0013FC  0E2D               	movlw	45
  2187   0013FE  6E2E               	movwf	_dtoa$2417^0,c
  2188   001400                     l2409:
  2189                           
  2190                           ; BSR set to: 1
  2191   001400  C02E  F03E         	movff	_dtoa$2417,dtoa@s
  2192   001404                     l1153:
  2193                           
  2194                           ; BSR set to: 1
  2195                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2196   001404  0E00               	movlw	0
  2197   001406  6E3D               	movwf	(dtoa@i+1)^0,c
  2198   001408  0E1F               	movlw	31
  2199   00140A  6E3C               	movwf	dtoa@i^0,c
  2200   00140C                     
  2201                           ; BSR set to: 1
  2202                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2203   00140C  0E00               	movlw	0
  2204   00140E  0102               	movlb	2	; () banked
  2205   001410  6F6F               	movwf	(_dbuf+31)& (0+255),b
  2206                           
  2207                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2208   001412  EF87  F00A         	goto	l2423
  2209   001416                     l2413:
  2210                           
  2211                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2212   001416  063C               	decf	dtoa@i^0,f,c
  2213   001418  A0D8               	btfss	status,0,c
  2214   00141A  063D               	decf	(dtoa@i+1)^0,f,c
  2215   00141C                     
  2216                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2217   00141C  0E50               	movlw	low _dbuf
  2218   00141E  243C               	addwf	dtoa@i^0,w,c
  2219   001420  6ED9               	movwf	fsr2l,c
  2220   001422  0E02               	movlw	high _dbuf
  2221   001424  203D               	addwfc	(dtoa@i+1)^0,w,c
  2222   001426  6EDA               	movwf	fsr2h,c
  2223   001428  C034  F001         	movff	dtoa@n,___aomod@dividend
  2224   00142C  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  2225   001430  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  2226   001434  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  2227   001438  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  2228   00143C  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  2229   001440  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  2230   001444  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  2231   001448  0E0A               	movlw	10
  2232   00144A  6E09               	movwf	___aomod@divisor^0,c
  2233   00144C  0E00               	movlw	0
  2234   00144E  6E0A               	movwf	(___aomod@divisor+1)^0,c
  2235   001450  0E00               	movlw	0
  2236   001452  6E0B               	movwf	(___aomod@divisor+2)^0,c
  2237   001454  0E00               	movlw	0
  2238   001456  6E0C               	movwf	(___aomod@divisor+3)^0,c
  2239   001458  0E00               	movlw	0
  2240   00145A  6E0D               	movwf	(___aomod@divisor+4)^0,c
  2241   00145C  0E00               	movlw	0
  2242   00145E  6E0E               	movwf	(___aomod@divisor+5)^0,c
  2243   001460  0E00               	movlw	0
  2244   001462  6E0F               	movwf	(___aomod@divisor+6)^0,c
  2245   001464  0E00               	movlw	0
  2246   001466  6E10               	movwf	(___aomod@divisor+7)^0,c
  2247   001468  EC5C  F00E         	call	___aomod	;wreg free
  2248   00146C  C001  F026         	movff	?___aomod,??_dtoa
  2249   001470  C002  F027         	movff	?___aomod+1,??_dtoa+1
  2250   001474  C003  F028         	movff	?___aomod+2,??_dtoa+2
  2251   001478  C004  F029         	movff	?___aomod+3,??_dtoa+3
  2252   00147C  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  2253   001480  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  2254   001484  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  2255   001488  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  2256   00148C  C026  F013         	movff	??_dtoa,abs@a
  2257   001490  C027  F014         	movff	??_dtoa+1,abs@a+1
  2258   001494  ECBB  F015         	call	_abs	;wreg free
  2259   001498  5013               	movf	?_abs^0,w,c
  2260   00149A  0F30               	addlw	48
  2261   00149C  6EDF               	movwf	indf2,c
  2262   00149E                     
  2263                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2264   00149E  0630               	decf	dtoa@p^0,f,c
  2265   0014A0  A0D8               	btfss	status,0,c
  2266   0014A2  0631               	decf	(dtoa@p+1)^0,f,c
  2267   0014A4                     
  2268                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2269   0014A4  0632               	decf	dtoa@w^0,f,c
  2270   0014A6  A0D8               	btfss	status,0,c
  2271   0014A8  0633               	decf	(dtoa@w+1)^0,f,c
  2272   0014AA                     
  2273                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2274   0014AA  C034  F001         	movff	dtoa@n,___aodiv@dividend
  2275   0014AE  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  2276   0014B2  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  2277   0014B6  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  2278   0014BA  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  2279   0014BE  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  2280   0014C2  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  2281   0014C6  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  2282   0014CA  0E0A               	movlw	10
  2283   0014CC  6E09               	movwf	___aodiv@divisor^0,c
  2284   0014CE  0E00               	movlw	0
  2285   0014D0  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  2286   0014D2  0E00               	movlw	0
  2287   0014D4  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  2288   0014D6  0E00               	movlw	0
  2289   0014D8  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  2290   0014DA  0E00               	movlw	0
  2291   0014DC  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  2292   0014DE  0E00               	movlw	0
  2293   0014E0  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  2294   0014E2  0E00               	movlw	0
  2295   0014E4  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  2296   0014E6  0E00               	movlw	0
  2297   0014E8  6E10               	movwf	(___aodiv@divisor+7)^0,c
  2298   0014EA  ECE5  F00C         	call	___aodiv	;wreg free
  2299   0014EE  C001  F034         	movff	?___aodiv,dtoa@n
  2300   0014F2  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  2301   0014F6  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  2302   0014FA  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  2303   0014FE  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  2304   001502  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  2305   001506  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  2306   00150A  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  2307   00150E                     l2423:
  2308                           
  2309                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2310   00150E  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  2311   001510  EF92  F00A         	goto	u1211
  2312   001514  503D               	movf	(dtoa@i+1)^0,w,c
  2313   001516  E108               	bnz	u1210
  2314   001518  043C               	decf	dtoa@i^0,w,c
  2315   00151A  A0D8               	btfss	status,0,c
  2316   00151C  EF92  F00A         	goto	u1211
  2317   001520  EF94  F00A         	goto	u1210
  2318   001524                     u1211:
  2319   001524  EFB0  F00A         	goto	l2429
  2320   001528                     u1210:
  2321   001528  5034               	movf	dtoa@n^0,w,c
  2322   00152A  1035               	iorwf	(dtoa@n+1)^0,w,c
  2323   00152C  1036               	iorwf	(dtoa@n+2)^0,w,c
  2324   00152E  1037               	iorwf	(dtoa@n+3)^0,w,c
  2325   001530  1038               	iorwf	(dtoa@n+4)^0,w,c
  2326   001532  1039               	iorwf	(dtoa@n+5)^0,w,c
  2327   001534  103A               	iorwf	(dtoa@n+6)^0,w,c
  2328   001536  103B               	iorwf	(dtoa@n+7)^0,w,c
  2329   001538  A4D8               	btfss	status,2,c
  2330   00153A  EFA1  F00A         	goto	u1221
  2331   00153E  EFA3  F00A         	goto	u1220
  2332   001542                     u1221:
  2333   001542  EF0B  F00A         	goto	l2413
  2334   001546                     u1220:
  2335   001546  BE31               	btfsc	(dtoa@p+1)^0,7,c
  2336   001548  EFB0  F00A         	goto	u1230
  2337   00154C  5031               	movf	(dtoa@p+1)^0,w,c
  2338   00154E  E106               	bnz	u1231
  2339   001550  0430               	decf	dtoa@p^0,w,c
  2340   001552  B0D8               	btfsc	status,0,c
  2341   001554  EFAE  F00A         	goto	u1231
  2342   001558  EFB0  F00A         	goto	u1230
  2343   00155C                     u1231:
  2344   00155C  EF0B  F00A         	goto	l2413
  2345   001560                     u1230:
  2346   001560                     l2429:
  2347                           
  2348                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2349   001560  503E               	movf	dtoa@s^0,w,c
  2350   001562  B4D8               	btfsc	status,2,c
  2351   001564  EFB6  F00A         	goto	u1241
  2352   001568  EFB8  F00A         	goto	u1240
  2353   00156C                     u1241:
  2354   00156C  EFC3  F00A         	goto	l2435
  2355   001570                     u1240:
  2356   001570                     
  2357                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2358   001570  063C               	decf	dtoa@i^0,f,c
  2359   001572  A0D8               	btfss	status,0,c
  2360   001574  063D               	decf	(dtoa@i+1)^0,f,c
  2361   001576                     
  2362                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2363   001576  0E50               	movlw	low _dbuf
  2364   001578  243C               	addwf	dtoa@i^0,w,c
  2365   00157A  6ED9               	movwf	fsr2l,c
  2366   00157C  0E02               	movlw	high _dbuf
  2367   00157E  203D               	addwfc	(dtoa@i+1)^0,w,c
  2368   001580  6EDA               	movwf	fsr2h,c
  2369   001582  C03E  FFDF         	movff	dtoa@s,indf2
  2370   001586                     l2435:
  2371                           
  2372                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2373   001586  C01C  F011         	movff	dtoa@fp,pad@fp
  2374   00158A  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  2375   00158E  0E50               	movlw	low _dbuf
  2376   001590  243C               	addwf	dtoa@i^0,w,c
  2377   001592  6E13               	movwf	pad@buf^0,c
  2378   001594  0E02               	movlw	high _dbuf
  2379   001596  203D               	addwfc	(dtoa@i+1)^0,w,c
  2380   001598  6E14               	movwf	(pad@buf+1)^0,c
  2381   00159A  C032  F015         	movff	dtoa@w,pad@p
  2382   00159E  C033  F016         	movff	dtoa@w+1,pad@p+1
  2383   0015A2  ECFB  F013         	call	_pad	;wreg free
  2384   0015A6  0012               	return		;funcret
  2385   0015A8                     __end_of_dtoa:
  2386                           	callstack 0
  2387                           
  2388 ;; *************** function _pad *****************
  2389 ;; Defined at:
  2390 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  2393 ;;		 -> sprintf@f(11), 
  2394 ;;  buf             2   18[COMRAM] PTR unsigned char 
  2395 ;;		 -> dbuf(32), 
  2396 ;;  p               2   20[COMRAM] int 
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;  w               2   25[COMRAM] int 
  2399 ;;  i               2   23[COMRAM] int 
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      void 
  2402 ;; Registers used:
  2403 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2409 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2410 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2411 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2412 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2413 ;;Total ram usage:       11 bytes
  2414 ;; Hardware stack levels used: 1
  2415 ;; Hardware stack levels required when called: 4
  2416 ;; This function calls:
  2417 ;;		_fputc
  2418 ;;		_fputs
  2419 ;; This function is called by:
  2420 ;;		_dtoa
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text5
  2425   0027F6                     __ptext5:
  2426                           	callstack 0
  2427   0027F6                     _pad:
  2428                           	callstack 22
  2429   0027F6                     
  2430                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  2431   0027F6  BE16               	btfsc	(pad@p+1)^0,7,c
  2432   0027F8  EF00  F014         	goto	u1041
  2433   0027FC  EF02  F014         	goto	u1040
  2434   002800                     u1041:
  2435   002800  EF08  F014         	goto	l2319
  2436   002804                     u1040:
  2437   002804  C015  F01A         	movff	pad@p,pad@w
  2438   002808  C016  F01B         	movff	pad@p+1,pad@w+1
  2439   00280C  EF0C  F014         	goto	l1141
  2440   002810                     l2319:
  2441   002810  0E00               	movlw	0
  2442   002812  6E1B               	movwf	(pad@w+1)^0,c
  2443   002814  0E00               	movlw	0
  2444   002816  6E1A               	movwf	pad@w^0,c
  2445   002818                     l1141:
  2446                           
  2447                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  2448   002818  0E00               	movlw	0
  2449   00281A  6E19               	movwf	(pad@i+1)^0,c
  2450   00281C  0E00               	movlw	0
  2451   00281E  6E18               	movwf	pad@i^0,c
  2452                           
  2453                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2454   002820  EF1E  F014         	goto	l2325
  2455   002824                     l2321:
  2456                           
  2457                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  2458   002824  0E00               	movlw	0
  2459   002826  6E02               	movwf	(fputc@c+1)^0,c
  2460   002828  0E20               	movlw	32
  2461   00282A  6E01               	movwf	fputc@c^0,c
  2462   00282C  C011  F003         	movff	pad@fp,fputc@fp
  2463   002830  C012  F004         	movff	pad@fp+1,fputc@fp+1
  2464   002834  ECBD  F00F         	call	_fputc	;wreg free
  2465   002838                     
  2466                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  2467   002838  4A18               	infsnz	pad@i^0,f,c
  2468   00283A  2A19               	incf	(pad@i+1)^0,f,c
  2469   00283C                     l2325:
  2470                           
  2471                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2472   00283C  501A               	movf	pad@w^0,w,c
  2473   00283E  5C18               	subwf	pad@i^0,w,c
  2474   002840  5019               	movf	(pad@i+1)^0,w,c
  2475   002842  0A80               	xorlw	128
  2476   002844  6E17               	movwf	??_pad^0,c
  2477   002846  501B               	movf	(pad@w+1)^0,w,c
  2478   002848  0A80               	xorlw	128
  2479   00284A  5817               	subwfb	??_pad^0,w,c
  2480   00284C  A0D8               	btfss	status,0,c
  2481   00284E  EF2B  F014         	goto	u1051
  2482   002852  EF2D  F014         	goto	u1050
  2483   002856                     u1051:
  2484   002856  EF12  F014         	goto	l2321
  2485   00285A                     u1050:
  2486   00285A                     
  2487                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  2488   00285A  C013  F00A         	movff	pad@buf,fputs@s
  2489   00285E  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2490   002862  C011  F00C         	movff	pad@fp,fputs@fp
  2491   002866  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2492   00286A  EC57  F015         	call	_fputs	;wreg free
  2493   00286E  0012               	return		;funcret
  2494   002870                     __end_of_pad:
  2495                           	callstack 0
  2496                           
  2497 ;; *************** function _fputs *****************
  2498 ;; Defined at:
  2499 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2502 ;;		 -> dbuf(32), 
  2503 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  2504 ;;		 -> sprintf@f(11), 
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;  i               2   14[COMRAM] int 
  2507 ;;  c               1   13[COMRAM] unsigned char 
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  2    9[COMRAM] int 
  2510 ;; Registers used:
  2511 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2517 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2518 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2520 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2521 ;;Total ram usage:        7 bytes
  2522 ;; Hardware stack levels used: 1
  2523 ;; Hardware stack levels required when called: 3
  2524 ;; This function calls:
  2525 ;;		_fputc
  2526 ;; This function is called by:
  2527 ;;		_pad
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           	psect	text6
  2532   002AAE                     __ptext6:
  2533                           	callstack 0
  2534   002AAE                     _fputs:
  2535                           	callstack 22
  2536   002AAE  0E00               	movlw	0
  2537   002AB0  6E10               	movwf	(fputs@i+1)^0,c
  2538   002AB2  0E00               	movlw	0
  2539   002AB4  6E0F               	movwf	fputs@i^0,c
  2540   002AB6  EF68  F015         	goto	l2233
  2541   002ABA                     l2229:
  2542   002ABA  C00E  F001         	movff	fputs@c,fputc@c
  2543   002ABE  6A02               	clrf	(fputc@c+1)^0,c
  2544   002AC0  C00C  F003         	movff	fputs@fp,fputc@fp
  2545   002AC4  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  2546   002AC8  ECBD  F00F         	call	_fputc	;wreg free
  2547   002ACC  4A0F               	infsnz	fputs@i^0,f,c
  2548   002ACE  2A10               	incf	(fputs@i+1)^0,f,c
  2549   002AD0                     l2233:
  2550   002AD0  500F               	movf	fputs@i^0,w,c
  2551   002AD2  240A               	addwf	fputs@s^0,w,c
  2552   002AD4  6ED9               	movwf	fsr2l,c
  2553   002AD6  5010               	movf	(fputs@i+1)^0,w,c
  2554   002AD8  200B               	addwfc	(fputs@s+1)^0,w,c
  2555   002ADA  6EDA               	movwf	fsr2h,c
  2556   002ADC  50DF               	movf	indf2,w,c
  2557   002ADE  6E0E               	movwf	fputs@c^0,c
  2558   002AE0  500E               	movf	fputs@c^0,w,c
  2559   002AE2  A4D8               	btfss	status,2,c
  2560   002AE4  EF76  F015         	goto	u901
  2561   002AE8  EF78  F015         	goto	u900
  2562   002AEC                     u901:
  2563   002AEC  EF5D  F015         	goto	l2229
  2564   002AF0                     u900:
  2565   002AF0  0012               	return		;funcret
  2566   002AF2                     __end_of_fputs:
  2567                           	callstack 0
  2568                           
  2569 ;; *************** function _fputc *****************
  2570 ;; Defined at:
  2571 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;  c               2    0[COMRAM] int 
  2574 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  2575 ;;		 -> sprintf@f(11), 
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;		None
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  2    0[COMRAM] int 
  2580 ;; Registers used:
  2581 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2587 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2589 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2590 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2591 ;;Total ram usage:        9 bytes
  2592 ;; Hardware stack levels used: 1
  2593 ;; Hardware stack levels required when called: 2
  2594 ;; This function calls:
  2595 ;;		_putch
  2596 ;; This function is called by:
  2597 ;;		_pad
  2598 ;;		_vfpfcnvrt
  2599 ;;		_fputs
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text7
  2604   001F7A                     __ptext7:
  2605                           	callstack 0
  2606   001F7A                     _fputc:
  2607                           	callstack 25
  2608   001F7A  5003               	movf	fputc@fp^0,w,c
  2609   001F7C  1004               	iorwf	(fputc@fp+1)^0,w,c
  2610   001F7E  B4D8               	btfsc	status,2,c
  2611   001F80  EFC4  F00F         	goto	u861
  2612   001F84  EFC6  F00F         	goto	u860
  2613   001F88                     u861:
  2614   001F88  EFCF  F00F         	goto	l2217
  2615   001F8C                     u860:
  2616   001F8C  5003               	movf	fputc@fp^0,w,c
  2617   001F8E  1004               	iorwf	(fputc@fp+1)^0,w,c
  2618   001F90  A4D8               	btfss	status,2,c
  2619   001F92  EFCD  F00F         	goto	u871
  2620   001F96  EFCF  F00F         	goto	u870
  2621   001F9A                     u871:
  2622   001F9A  EFD4  F00F         	goto	l2219
  2623   001F9E                     u870:
  2624   001F9E                     l2217:
  2625   001F9E  5001               	movf	fputc@c^0,w,c
  2626   001FA0  EC9F  F016         	call	_putch
  2627   001FA4  EF21  F010         	goto	l1196
  2628   001FA8                     l2219:
  2629   001FA8  EE20 F009          	lfsr	2,9
  2630   001FAC  5003               	movf	fputc@fp^0,w,c
  2631   001FAE  26D9               	addwf	fsr2l,f,c
  2632   001FB0  5004               	movf	(fputc@fp+1)^0,w,c
  2633   001FB2  22DA               	addwfc	fsr2h,f,c
  2634   001FB4  50DE               	movf	postinc2,w,c
  2635   001FB6  10DE               	iorwf	postinc2,w,c
  2636   001FB8  B4D8               	btfsc	status,2,c
  2637   001FBA  EFE1  F00F         	goto	u881
  2638   001FBE  EFE3  F00F         	goto	u880
  2639   001FC2                     u881:
  2640   001FC2  EFFE  F00F         	goto	l2223
  2641   001FC6                     u880:
  2642   001FC6  EE20 F009          	lfsr	2,9
  2643   001FCA  5003               	movf	fputc@fp^0,w,c
  2644   001FCC  26D9               	addwf	fsr2l,f,c
  2645   001FCE  5004               	movf	(fputc@fp+1)^0,w,c
  2646   001FD0  22DA               	addwfc	fsr2h,f,c
  2647   001FD2  EE10 F003          	lfsr	1,3
  2648   001FD6  5003               	movf	fputc@fp^0,w,c
  2649   001FD8  26E1               	addwf	fsr1l,f,c
  2650   001FDA  5004               	movf	(fputc@fp+1)^0,w,c
  2651   001FDC  22E2               	addwfc	fsr1h,f,c
  2652   001FDE  50DE               	movf	postinc2,w,c
  2653   001FE0  5CE6               	subwf	postinc1,w,c
  2654   001FE2  50E6               	movf	postinc1,w,c
  2655   001FE4  0A80               	xorlw	128
  2656   001FE6  6E09               	movwf	(??_fputc+4)^0,c
  2657   001FE8  50DE               	movf	postinc2,w,c
  2658   001FEA  0A80               	xorlw	128
  2659   001FEC  5809               	subwfb	(??_fputc+4)^0,w,c
  2660   001FEE  B0D8               	btfsc	status,0,c
  2661   001FF0  EFFC  F00F         	goto	u891
  2662   001FF4  EFFE  F00F         	goto	u890
  2663   001FF8                     u891:
  2664   001FF8  EF21  F010         	goto	l1196
  2665   001FFC                     u890:
  2666   001FFC                     l2223:
  2667   001FFC  EE20 F003          	lfsr	2,3
  2668   002000  5003               	movf	fputc@fp^0,w,c
  2669   002002  26D9               	addwf	fsr2l,f,c
  2670   002004  5004               	movf	(fputc@fp+1)^0,w,c
  2671   002006  22DA               	addwfc	fsr2h,f,c
  2672   002008  CFDE F005          	movff	postinc2,??_fputc
  2673   00200C  CFDD F006          	movff	postdec2,??_fputc+1
  2674   002010  C003  FFD9         	movff	fputc@fp,fsr2l
  2675   002014  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2676   002018  CFDE F007          	movff	postinc2,??_fputc+2
  2677   00201C  CFDD F008          	movff	postdec2,??_fputc+3
  2678   002020  5005               	movf	??_fputc^0,w,c
  2679   002022  2407               	addwf	(??_fputc+2)^0,w,c
  2680   002024  6ED9               	movwf	fsr2l,c
  2681   002026  5006               	movf	(??_fputc+1)^0,w,c
  2682   002028  2008               	addwfc	(??_fputc+3)^0,w,c
  2683   00202A  6EDA               	movwf	fsr2h,c
  2684   00202C  C001  FFDF         	movff	fputc@c,indf2
  2685   002030  EE20 F003          	lfsr	2,3
  2686   002034  5003               	movf	fputc@fp^0,w,c
  2687   002036  26D9               	addwf	fsr2l,f,c
  2688   002038  5004               	movf	(fputc@fp+1)^0,w,c
  2689   00203A  22DA               	addwfc	fsr2h,f,c
  2690   00203C  2ADE               	incf	postinc2,f,c
  2691   00203E  0E00               	movlw	0
  2692   002040  22DD               	addwfc	postdec2,f,c
  2693   002042                     l1196:
  2694   002042  0012               	return		;funcret
  2695   002044                     __end_of_fputc:
  2696                           	callstack 0
  2697                           
  2698 ;; *************** function _putch *****************
  2699 ;; Defined at:
  2700 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;  c               1    wreg     unsigned char 
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;  c               1    0[COMRAM] unsigned char 
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  1    wreg      void 
  2707 ;; Registers used:
  2708 ;;		wreg
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2718 ;;Total ram usage:        0 bytes
  2719 ;; Hardware stack levels used: 1
  2720 ;; Hardware stack levels required when called: 1
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_fputc
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text8
  2729   002D3E                     __ptext8:
  2730                           	callstack 0
  2731   002D3E                     _putch:
  2732                           	callstack 25
  2733   002D3E  0012               	return		;funcret
  2734   002D40                     __end_of_putch:
  2735                           	callstack 0
  2736                           
  2737 ;; *************** function _abs *****************
  2738 ;; Defined at:
  2739 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;  a               2   18[COMRAM] int 
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;		None
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  2   18[COMRAM] int 
  2746 ;; Registers used:
  2747 ;;		wreg, status,2, status,0
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2755 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2756 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2757 ;;Total ram usage:        4 bytes
  2758 ;; Hardware stack levels used: 1
  2759 ;; Hardware stack levels required when called: 1
  2760 ;; This function calls:
  2761 ;;		Nothing
  2762 ;; This function is called by:
  2763 ;;		_dtoa
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text9
  2768   002B76                     __ptext9:
  2769                           	callstack 0
  2770   002B76                     _abs:
  2771                           	callstack 25
  2772   002B76  BE14               	btfsc	(abs@a+1)^0,7,c
  2773   002B78  EFC8  F015         	goto	u1060
  2774   002B7C  5014               	movf	(abs@a+1)^0,w,c
  2775   002B7E  E106               	bnz	u1061
  2776   002B80  0413               	decf	abs@a^0,w,c
  2777   002B82  B0D8               	btfsc	status,0,c
  2778   002B84  EFC6  F015         	goto	u1061
  2779   002B88  EFC8  F015         	goto	u1060
  2780   002B8C                     u1061:
  2781   002B8C  EFD6  F015         	goto	l1181
  2782   002B90                     u1060:
  2783   002B90  C013  F015         	movff	abs@a,??_abs
  2784   002B94  C014  F016         	movff	abs@a+1,??_abs+1
  2785   002B98  1E15               	comf	??_abs^0,f,c
  2786   002B9A  1E16               	comf	(??_abs+1)^0,f,c
  2787   002B9C  4A15               	infsnz	??_abs^0,f,c
  2788   002B9E  2A16               	incf	(??_abs+1)^0,f,c
  2789   002BA0  C015  F013         	movff	??_abs,?_abs
  2790   002BA4  C016  F014         	movff	??_abs+1,?_abs+1
  2791   002BA8  EFDA  F015         	goto	l1184
  2792   002BAC                     l1181:
  2793   002BAC  C013  F013         	movff	abs@a,?_abs
  2794   002BB0  C014  F014         	movff	abs@a+1,?_abs+1
  2795   002BB4                     l1184:
  2796   002BB4  0012               	return		;funcret
  2797   002BB6                     __end_of_abs:
  2798                           	callstack 0
  2799                           
  2800 ;; *************** function ___aomod *****************
  2801 ;; Defined at:
  2802 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;  dividend        8    0[COMRAM] long long 
  2805 ;;  divisor         8    8[COMRAM] long long 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;  sign            1   17[COMRAM] unsigned char 
  2808 ;;  counter         1   16[COMRAM] unsigned char 
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  8    0[COMRAM] long long 
  2811 ;; Registers used:
  2812 ;;		wreg, status,2, status,0
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2818 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2819 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2821 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2822 ;;Total ram usage:       18 bytes
  2823 ;; Hardware stack levels used: 1
  2824 ;; Hardware stack levels required when called: 1
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_dtoa
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           	psect	text10
  2833   001CB8                     __ptext10:
  2834                           	callstack 0
  2835   001CB8                     ___aomod:
  2836                           	callstack 25
  2837   001CB8  0E00               	movlw	0
  2838   001CBA  6E12               	movwf	___aomod@sign^0,c
  2839   001CBC  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2840   001CBE  EF65  F00E         	goto	u980
  2841   001CC2  EF63  F00E         	goto	u981
  2842   001CC6                     u981:
  2843   001CC6  EF77  F00E         	goto	l2287
  2844   001CCA                     u980:
  2845   001CCA  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2846   001CCC  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2847   001CCE  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2848   001CD0  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2849   001CD2  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2850   001CD4  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2851   001CD6  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2852   001CD8  6C01               	negf	___aomod@dividend^0,c
  2853   001CDA  0E00               	movlw	0
  2854   001CDC  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2855   001CDE  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2856   001CE0  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2857   001CE2  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2858   001CE4  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2859   001CE6  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2860   001CE8  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2861   001CEA  0E01               	movlw	1
  2862   001CEC  6E12               	movwf	___aomod@sign^0,c
  2863   001CEE                     l2287:
  2864   001CEE  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2865   001CF0  EF7E  F00E         	goto	u990
  2866   001CF4  EF7C  F00E         	goto	u991
  2867   001CF8                     u991:
  2868   001CF8  EF8E  F00E         	goto	l2291
  2869   001CFC                     u990:
  2870   001CFC  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2871   001CFE  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2872   001D00  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2873   001D02  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2874   001D04  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2875   001D06  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2876   001D08  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2877   001D0A  6C09               	negf	___aomod@divisor^0,c
  2878   001D0C  0E00               	movlw	0
  2879   001D0E  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2880   001D10  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2881   001D12  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2882   001D14  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2883   001D16  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2884   001D18  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2885   001D1A  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2886   001D1C                     l2291:
  2887   001D1C  5009               	movf	___aomod@divisor^0,w,c
  2888   001D1E  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2889   001D20  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2890   001D22  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2891   001D24  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2892   001D26  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2893   001D28  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2894   001D2A  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2895   001D2C  B4D8               	btfsc	status,2,c
  2896   001D2E  EF9B  F00E         	goto	u1001
  2897   001D32  EF9D  F00E         	goto	u1000
  2898   001D36                     u1001:
  2899   001D36  EFE5  F00E         	goto	l2307
  2900   001D3A                     u1000:
  2901   001D3A  0E01               	movlw	1
  2902   001D3C  6E11               	movwf	___aomod@counter^0,c
  2903   001D3E  EFAB  F00E         	goto	l2297
  2904   001D42                     l2295:
  2905   001D42  90D8               	bcf	status,0,c
  2906   001D44  3609               	rlcf	___aomod@divisor^0,f,c
  2907   001D46  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2908   001D48  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2909   001D4A  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2910   001D4C  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2911   001D4E  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2912   001D50  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2913   001D52  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2914   001D54  2A11               	incf	___aomod@counter^0,f,c
  2915   001D56                     l2297:
  2916   001D56  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2917   001D58  EFB0  F00E         	goto	u1011
  2918   001D5C  EFB2  F00E         	goto	u1010
  2919   001D60                     u1011:
  2920   001D60  EFA1  F00E         	goto	l2295
  2921   001D64                     u1010:
  2922   001D64                     l2299:
  2923   001D64  5009               	movf	___aomod@divisor^0,w,c
  2924   001D66  5C01               	subwf	___aomod@dividend^0,w,c
  2925   001D68  500A               	movf	(___aomod@divisor+1)^0,w,c
  2926   001D6A  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2927   001D6C  500B               	movf	(___aomod@divisor+2)^0,w,c
  2928   001D6E  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2929   001D70  500C               	movf	(___aomod@divisor+3)^0,w,c
  2930   001D72  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2931   001D74  500D               	movf	(___aomod@divisor+4)^0,w,c
  2932   001D76  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2933   001D78  500E               	movf	(___aomod@divisor+5)^0,w,c
  2934   001D7A  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2935   001D7C  500F               	movf	(___aomod@divisor+6)^0,w,c
  2936   001D7E  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2937   001D80  5010               	movf	(___aomod@divisor+7)^0,w,c
  2938   001D82  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2939   001D84  A0D8               	btfss	status,0,c
  2940   001D86  EFC7  F00E         	goto	u1021
  2941   001D8A  EFC9  F00E         	goto	u1020
  2942   001D8E                     u1021:
  2943   001D8E  EFD9  F00E         	goto	l2303
  2944   001D92                     u1020:
  2945   001D92  5009               	movf	___aomod@divisor^0,w,c
  2946   001D94  5E01               	subwf	___aomod@dividend^0,f,c
  2947   001D96  500A               	movf	(___aomod@divisor+1)^0,w,c
  2948   001D98  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2949   001D9A  500B               	movf	(___aomod@divisor+2)^0,w,c
  2950   001D9C  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2951   001D9E  500C               	movf	(___aomod@divisor+3)^0,w,c
  2952   001DA0  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2953   001DA2  500D               	movf	(___aomod@divisor+4)^0,w,c
  2954   001DA4  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2955   001DA6  500E               	movf	(___aomod@divisor+5)^0,w,c
  2956   001DA8  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2957   001DAA  500F               	movf	(___aomod@divisor+6)^0,w,c
  2958   001DAC  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2959   001DAE  5010               	movf	(___aomod@divisor+7)^0,w,c
  2960   001DB0  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2961   001DB2                     l2303:
  2962   001DB2  90D8               	bcf	status,0,c
  2963   001DB4  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2964   001DB6  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2965   001DB8  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2966   001DBA  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2967   001DBC  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2968   001DBE  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2969   001DC0  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2970   001DC2  3209               	rrcf	___aomod@divisor^0,f,c
  2971   001DC4  2E11               	decfsz	___aomod@counter^0,f,c
  2972   001DC6  EFB2  F00E         	goto	l2299
  2973   001DCA                     l2307:
  2974   001DCA  5012               	movf	___aomod@sign^0,w,c
  2975   001DCC  B4D8               	btfsc	status,2,c
  2976   001DCE  EFEB  F00E         	goto	u1031
  2977   001DD2  EFED  F00E         	goto	u1030
  2978   001DD6                     u1031:
  2979   001DD6  EFFD  F00E         	goto	l2311
  2980   001DDA                     u1030:
  2981   001DDA  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2982   001DDC  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2983   001DDE  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2984   001DE0  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2985   001DE2  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2986   001DE4  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2987   001DE6  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2988   001DE8  6C01               	negf	___aomod@dividend^0,c
  2989   001DEA  0E00               	movlw	0
  2990   001DEC  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2991   001DEE  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2992   001DF0  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2993   001DF2  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2994   001DF4  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2995   001DF6  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2996   001DF8  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2997   001DFA                     l2311:
  2998   001DFA  C001  F001         	movff	___aomod@dividend,?___aomod
  2999   001DFE  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  3000   001E02  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  3001   001E06  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  3002   001E0A  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  3003   001E0E  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  3004   001E12  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  3005   001E16  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  3006   001E1A  0012               	return		;funcret
  3007   001E1C                     __end_of___aomod:
  3008                           	callstack 0
  3009                           
  3010 ;; *************** function ___aodiv *****************
  3011 ;; Defined at:
  3012 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  dividend        8    0[COMRAM] long long 
  3015 ;;  divisor         8    8[COMRAM] long long 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;  quotient        8   18[COMRAM] long long 
  3018 ;;  sign            1   17[COMRAM] unsigned char 
  3019 ;;  counter         1   16[COMRAM] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  8    0[COMRAM] long long 
  3022 ;; Registers used:
  3023 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3029 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3030 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3032 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3033 ;;Total ram usage:       26 bytes
  3034 ;; Hardware stack levels used: 1
  3035 ;; Hardware stack levels required when called: 1
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_dtoa
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           	psect	text11
  3044   0019CA                     __ptext11:
  3045                           	callstack 0
  3046   0019CA                     ___aodiv:
  3047                           	callstack 25
  3048   0019CA  0E00               	movlw	0
  3049   0019CC  6E12               	movwf	___aodiv@sign^0,c
  3050   0019CE  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  3051   0019D0  EFEE  F00C         	goto	u910
  3052   0019D4  EFEC  F00C         	goto	u911
  3053   0019D8                     u911:
  3054   0019D8  EF00  F00D         	goto	l2243
  3055   0019DC                     u910:
  3056   0019DC  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  3057   0019DE  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  3058   0019E0  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  3059   0019E2  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  3060   0019E4  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  3061   0019E6  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  3062   0019E8  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  3063   0019EA  6C09               	negf	___aodiv@divisor^0,c
  3064   0019EC  0E00               	movlw	0
  3065   0019EE  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  3066   0019F0  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  3067   0019F2  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  3068   0019F4  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  3069   0019F6  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  3070   0019F8  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  3071   0019FA  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  3072   0019FC  0E01               	movlw	1
  3073   0019FE  6E12               	movwf	___aodiv@sign^0,c
  3074   001A00                     l2243:
  3075   001A00  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  3076   001A02  EF07  F00D         	goto	u920
  3077   001A06  EF05  F00D         	goto	u921
  3078   001A0A                     u921:
  3079   001A0A  EF19  F00D         	goto	l2249
  3080   001A0E                     u920:
  3081   001A0E  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  3082   001A10  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  3083   001A12  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  3084   001A14  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  3085   001A16  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  3086   001A18  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  3087   001A1A  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  3088   001A1C  6C01               	negf	___aodiv@dividend^0,c
  3089   001A1E  0E00               	movlw	0
  3090   001A20  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  3091   001A22  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  3092   001A24  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  3093   001A26  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  3094   001A28  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  3095   001A2A  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  3096   001A2C  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  3097   001A2E  0E01               	movlw	1
  3098   001A30  1A12               	xorwf	___aodiv@sign^0,f,c
  3099   001A32                     l2249:
  3100   001A32  EE20  F013         	lfsr	2,___aodiv@quotient
  3101   001A36  0E07               	movlw	7
  3102   001A38                     u931:
  3103   001A38  6ADE               	clrf	postinc2,c
  3104   001A3A  06E8               	decf	wreg,f,c
  3105   001A3C  E2FD               	bc	u931
  3106   001A3E  5009               	movf	___aodiv@divisor^0,w,c
  3107   001A40  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  3108   001A42  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  3109   001A44  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  3110   001A46  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  3111   001A48  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  3112   001A4A  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  3113   001A4C  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  3114   001A4E  B4D8               	btfsc	status,2,c
  3115   001A50  EF2C  F00D         	goto	u941
  3116   001A54  EF2E  F00D         	goto	u940
  3117   001A58                     u941:
  3118   001A58  EF80  F00D         	goto	l2271
  3119   001A5C                     u940:
  3120   001A5C  0E01               	movlw	1
  3121   001A5E  6E11               	movwf	___aodiv@counter^0,c
  3122   001A60  EF3C  F00D         	goto	l2257
  3123   001A64                     l2255:
  3124   001A64  90D8               	bcf	status,0,c
  3125   001A66  3609               	rlcf	___aodiv@divisor^0,f,c
  3126   001A68  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  3127   001A6A  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  3128   001A6C  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  3129   001A6E  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  3130   001A70  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  3131   001A72  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  3132   001A74  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  3133   001A76  2A11               	incf	___aodiv@counter^0,f,c
  3134   001A78                     l2257:
  3135   001A78  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  3136   001A7A  EF41  F00D         	goto	u951
  3137   001A7E  EF43  F00D         	goto	u950
  3138   001A82                     u951:
  3139   001A82  EF32  F00D         	goto	l2255
  3140   001A86                     u950:
  3141   001A86                     l2259:
  3142   001A86  90D8               	bcf	status,0,c
  3143   001A88  3613               	rlcf	___aodiv@quotient^0,f,c
  3144   001A8A  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  3145   001A8C  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  3146   001A8E  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  3147   001A90  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  3148   001A92  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  3149   001A94  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  3150   001A96  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  3151   001A98  5009               	movf	___aodiv@divisor^0,w,c
  3152   001A9A  5C01               	subwf	___aodiv@dividend^0,w,c
  3153   001A9C  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3154   001A9E  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  3155   001AA0  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3156   001AA2  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  3157   001AA4  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3158   001AA6  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  3159   001AA8  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3160   001AAA  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  3161   001AAC  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3162   001AAE  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  3163   001AB0  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3164   001AB2  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  3165   001AB4  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3166   001AB6  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  3167   001AB8  A0D8               	btfss	status,0,c
  3168   001ABA  EF61  F00D         	goto	u961
  3169   001ABE  EF63  F00D         	goto	u960
  3170   001AC2                     u961:
  3171   001AC2  EF74  F00D         	goto	l2267
  3172   001AC6                     u960:
  3173   001AC6  5009               	movf	___aodiv@divisor^0,w,c
  3174   001AC8  5E01               	subwf	___aodiv@dividend^0,f,c
  3175   001ACA  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3176   001ACC  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  3177   001ACE  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3178   001AD0  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  3179   001AD2  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3180   001AD4  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  3181   001AD6  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3182   001AD8  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  3183   001ADA  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3184   001ADC  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  3185   001ADE  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3186   001AE0  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  3187   001AE2  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3188   001AE4  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  3189   001AE6  8013               	bsf	___aodiv@quotient^0,0,c
  3190   001AE8                     l2267:
  3191   001AE8  90D8               	bcf	status,0,c
  3192   001AEA  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  3193   001AEC  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  3194   001AEE  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  3195   001AF0  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  3196   001AF2  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  3197   001AF4  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  3198   001AF6  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  3199   001AF8  3209               	rrcf	___aodiv@divisor^0,f,c
  3200   001AFA  2E11               	decfsz	___aodiv@counter^0,f,c
  3201   001AFC  EF43  F00D         	goto	l2259
  3202   001B00                     l2271:
  3203   001B00  5012               	movf	___aodiv@sign^0,w,c
  3204   001B02  B4D8               	btfsc	status,2,c
  3205   001B04  EF86  F00D         	goto	u971
  3206   001B08  EF88  F00D         	goto	u970
  3207   001B0C                     u971:
  3208   001B0C  EF98  F00D         	goto	l2275
  3209   001B10                     u970:
  3210   001B10  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  3211   001B12  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  3212   001B14  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  3213   001B16  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  3214   001B18  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  3215   001B1A  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  3216   001B1C  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  3217   001B1E  6C13               	negf	___aodiv@quotient^0,c
  3218   001B20  0E00               	movlw	0
  3219   001B22  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  3220   001B24  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  3221   001B26  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  3222   001B28  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  3223   001B2A  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  3224   001B2C  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  3225   001B2E  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  3226   001B30                     l2275:
  3227   001B30  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3228   001B34  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3229   001B38  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3230   001B3C  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3231   001B40  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3232   001B44  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3233   001B48  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3234   001B4C  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3235   001B50  0012               	return		;funcret
  3236   001B52                     __end_of___aodiv:
  3237                           	callstack 0
  3238                           
  3239 ;; *************** function _sendStringSerial4 *****************
  3240 ;; Defined at:
  3241 ;;		line 37 in file "../serial.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  string          2    1[COMRAM] PTR unsigned char 
  3244 ;;		 -> main@readout3(100), main@readout2(100), 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;		None
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3256 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3259 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3260 ;;Total ram usage:        2 bytes
  3261 ;; Hardware stack levels used: 1
  3262 ;; Hardware stack levels required when called: 2
  3263 ;; This function calls:
  3264 ;;		_sendCharSerial4
  3265 ;; This function is called by:
  3266 ;;		_main
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text12
  3271   002BB6                     __ptext12:
  3272                           	callstack 0
  3273   002BB6                     _sendStringSerial4:
  3274                           	callstack 28
  3275   002BB6                     
  3276                           ;../serial.c: 40:     while (*string != 0)
  3277   002BB6  EFE6  F015         	goto	l2923
  3278   002BBA                     l2919:
  3279                           
  3280                           ;../serial.c: 41:     {;../serial.c: 42:         sendCharSerial4(*string++);
  3281   002BBA  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3282   002BBE  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3283   002BC2  50DF               	movf	indf2,w,c
  3284   002BC4  EC73  F016         	call	_sendCharSerial4
  3285   002BC8  4A02               	infsnz	sendStringSerial4@string^0,f,c
  3286   002BCA  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  3287   002BCC                     l2923:
  3288                           
  3289                           ;../serial.c: 40:     while (*string != 0)
  3290   002BCC  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3291   002BD0  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3292   002BD4  50DF               	movf	indf2,w,c
  3293   002BD6  A4D8               	btfss	status,2,c
  3294   002BD8  EFF0  F015         	goto	u1541
  3295   002BDC  EFF2  F015         	goto	u1540
  3296   002BE0                     u1541:
  3297   002BE0  EFDD  F015         	goto	l2919
  3298   002BE4                     u1540:
  3299   002BE4  0012               	return		;funcret
  3300   002BE6                     __end_of_sendStringSerial4:
  3301                           	callstack 0
  3302                           
  3303 ;; *************** function _sendCharSerial4 *****************
  3304 ;; Defined at:
  3305 ;;		line 30 in file "../serial.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;  charToSend      1    wreg     unsigned char 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;  charToSend      1    0[COMRAM] unsigned char 
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      void 
  3312 ;; Registers used:
  3313 ;;		wreg
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3322 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3323 ;;Total ram usage:        1 bytes
  3324 ;; Hardware stack levels used: 1
  3325 ;; Hardware stack levels required when called: 1
  3326 ;; This function calls:
  3327 ;;		Nothing
  3328 ;; This function is called by:
  3329 ;;		_sendStringSerial4
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           	psect	text13
  3334   002CE6                     __ptext13:
  3335                           	callstack 0
  3336   002CE6                     _sendCharSerial4:
  3337                           	callstack 28
  3338                           
  3339                           ;incstack = 0
  3340                           ;sendCharSerial4@charToSend stored from wreg
  3341   002CE6  6E01               	movwf	sendCharSerial4@charToSend^0,c
  3342   002CE8                     l429:
  3343   002CE8  010E               	movlb	14	; () banked
  3344   002CEA  A537               	btfss	55,2,b	;volatile
  3345   002CEC  EF7A  F016         	goto	u1421
  3346   002CF0  EF7C  F016         	goto	u1420
  3347   002CF4                     u1421:
  3348   002CF4  EF74  F016         	goto	l429
  3349   002CF8                     u1420:
  3350   002CF8                     
  3351                           ; BSR set to: 14
  3352                           ;../serial.c: 32:     TX4REG = charToSend;
  3353   002CF8  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3354   002CFC                     
  3355                           ; BSR set to: 14
  3356   002CFC  0012               	return		;funcret
  3357   002CFE                     __end_of_sendCharSerial4:
  3358                           	callstack 0
  3359                           
  3360 ;; *************** function _motor_action *****************
  3361 ;; Defined at:
  3362 ;;		line 196 in file "../dc_motor.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;  color           2   33[COMRAM] unsigned int 
  3365 ;;  l               2   35[COMRAM] PTR struct DC_motor
  3366 ;;		 -> main@motorL(9), 
  3367 ;;  r               2   37[COMRAM] PTR struct DC_motor
  3368 ;;		 -> main@motorR(9), 
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;		None
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  1    wreg      void 
  3373 ;; Registers used:
  3374 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3380 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3382 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3383 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3384 ;;Total ram usage:        8 bytes
  3385 ;; Hardware stack levels used: 1
  3386 ;; Hardware stack levels required when called: 4
  3387 ;; This function calls:
  3388 ;;		_left_135
  3389 ;;		_left_90
  3390 ;;		_reverse_fromcard
  3391 ;;		_reverse_onesquare
  3392 ;;		_right_135
  3393 ;;		_right_90
  3394 ;;		_spin_180
  3395 ;;		_stop
  3396 ;; This function is called by:
  3397 ;;		_main
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text14
  3402   0015A8                     __ptext14:
  3403                           	callstack 0
  3404   0015A8                     _motor_action:
  3405                           	callstack 26
  3406   0015A8                     
  3407                           ;../dc_motor.c: 196: void motor_action(unsigned int color, struct DC_motor *l, struct DC
      +                          _motor *r);../dc_motor.c: 197: {;../dc_motor.c: 198:     switch (color){
  3408   0015A8  EFD0  F00B         	goto	l2981
  3409   0015AC                     l2947:
  3410                           
  3411                           ;../dc_motor.c: 200:             reverse_fromcard(l,r);
  3412   0015AC  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3413   0015B0  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3414   0015B4  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3415   0015B8  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3416   0015BC  ECCD  F012         	call	_reverse_fromcard	;wreg free
  3417                           
  3418                           ;../dc_motor.c: 201:             stop(l,r);
  3419   0015C0  C024  F01A         	movff	motor_action@l,stop@mL
  3420   0015C4  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3421   0015C8  C026  F01C         	movff	motor_action@r,stop@mR
  3422   0015CC  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3423   0015D0  EC6F  F013         	call	_stop	;wreg free
  3424   0015D4                     
  3425                           ;../dc_motor.c: 202:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3426   0015D4  0E29               	movlw	41
  3427   0015D6  6E29               	movwf	(??_motor_action+1)^0,c
  3428   0015D8  0E96               	movlw	150
  3429   0015DA  6E28               	movwf	??_motor_action^0,c
  3430   0015DC  0E7F               	movlw	127
  3431   0015DE                     u1747:
  3432   0015DE  2EE8               	decfsz	wreg,f,c
  3433   0015E0  D7FE               	bra	u1747
  3434   0015E2  2E28               	decfsz	??_motor_action^0,f,c
  3435   0015E4  D7FC               	bra	u1747
  3436   0015E6  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3437   0015E8  D7FA               	bra	u1747
  3438   0015EA  F000               	nop	
  3439   0015EC                     
  3440                           ;../dc_motor.c: 203:             stop(l,r);
  3441   0015EC  C024  F01A         	movff	motor_action@l,stop@mL
  3442   0015F0  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3443   0015F4  C026  F01C         	movff	motor_action@r,stop@mR
  3444   0015F8  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3445   0015FC  EC6F  F013         	call	_stop	;wreg free
  3446   001600                     
  3447                           ;../dc_motor.c: 204:             right_90(l,r);
  3448   001600  C024  F01A         	movff	motor_action@l,right_90@mL
  3449   001604  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3450   001608  C026  F01C         	movff	motor_action@r,right_90@mR
  3451   00160C  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3452   001610  EC36  F011         	call	_right_90	;wreg free
  3453                           
  3454                           ;../dc_motor.c: 205:             break;
  3455   001614  EFFA  F00B         	goto	l322
  3456   001618                     l2955:
  3457                           
  3458                           ;../dc_motor.c: 207:             reverse_fromcard(l,r);
  3459   001618  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3460   00161C  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3461   001620  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3462   001624  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3463   001628  ECCD  F012         	call	_reverse_fromcard	;wreg free
  3464                           
  3465                           ;../dc_motor.c: 208:             stop(l,r);
  3466   00162C  C024  F01A         	movff	motor_action@l,stop@mL
  3467   001630  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3468   001634  C026  F01C         	movff	motor_action@r,stop@mR
  3469   001638  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3470   00163C  EC6F  F013         	call	_stop	;wreg free
  3471   001640                     
  3472                           ;../dc_motor.c: 209:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3473   001640  0E29               	movlw	41
  3474   001642  6E29               	movwf	(??_motor_action+1)^0,c
  3475   001644  0E96               	movlw	150
  3476   001646  6E28               	movwf	??_motor_action^0,c
  3477   001648  0E7F               	movlw	127
  3478   00164A                     u1757:
  3479   00164A  2EE8               	decfsz	wreg,f,c
  3480   00164C  D7FE               	bra	u1757
  3481   00164E  2E28               	decfsz	??_motor_action^0,f,c
  3482   001650  D7FC               	bra	u1757
  3483   001652  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3484   001654  D7FA               	bra	u1757
  3485   001656  F000               	nop	
  3486   001658                     
  3487                           ;../dc_motor.c: 210:             stop(l,r);
  3488   001658  C024  F01A         	movff	motor_action@l,stop@mL
  3489   00165C  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3490   001660  C026  F01C         	movff	motor_action@r,stop@mR
  3491   001664  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3492   001668  EC6F  F013         	call	_stop	;wreg free
  3493   00166C                     
  3494                           ;../dc_motor.c: 211:             left_90(l,r);
  3495   00166C  C024  F01A         	movff	motor_action@l,left_90@mL
  3496   001670  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3497   001674  C026  F01C         	movff	motor_action@r,left_90@mR
  3498   001678  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3499   00167C  EC88  F011         	call	_left_90	;wreg free
  3500                           
  3501                           ;../dc_motor.c: 212:             break;
  3502   001680  EFFA  F00B         	goto	l322
  3503   001684                     l2963:
  3504                           
  3505                           ;../dc_motor.c: 214:             reverse_fromcard(l,r);
  3506   001684  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3507   001688  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3508   00168C  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3509   001690  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3510   001694  ECCD  F012         	call	_reverse_fromcard	;wreg free
  3511                           
  3512                           ;../dc_motor.c: 215:             stop(l,r);
  3513   001698  C024  F01A         	movff	motor_action@l,stop@mL
  3514   00169C  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3515   0016A0  C026  F01C         	movff	motor_action@r,stop@mR
  3516   0016A4  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3517   0016A8  EC6F  F013         	call	_stop	;wreg free
  3518   0016AC                     
  3519                           ;../dc_motor.c: 216:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3520   0016AC  0E29               	movlw	41
  3521   0016AE  6E29               	movwf	(??_motor_action+1)^0,c
  3522   0016B0  0E96               	movlw	150
  3523   0016B2  6E28               	movwf	??_motor_action^0,c
  3524   0016B4  0E7F               	movlw	127
  3525   0016B6                     u1767:
  3526   0016B6  2EE8               	decfsz	wreg,f,c
  3527   0016B8  D7FE               	bra	u1767
  3528   0016BA  2E28               	decfsz	??_motor_action^0,f,c
  3529   0016BC  D7FC               	bra	u1767
  3530   0016BE  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3531   0016C0  D7FA               	bra	u1767
  3532   0016C2  F000               	nop	
  3533   0016C4                     
  3534                           ;../dc_motor.c: 217:             spin_180(l,r);
  3535   0016C4  C024  F01A         	movff	motor_action@l,spin_180@mL
  3536   0016C8  C025  F01B         	movff	motor_action@l+1,spin_180@mL+1
  3537   0016CC  C026  F01C         	movff	motor_action@r,spin_180@mR
  3538   0016D0  C027  F01D         	movff	motor_action@r+1,spin_180@mR+1
  3539   0016D4  ECDA  F011         	call	_spin_180	;wreg free
  3540   0016D8                     
  3541                           ;../dc_motor.c: 218:             stop(l,r);
  3542   0016D8  C024  F01A         	movff	motor_action@l,stop@mL
  3543   0016DC  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3544   0016E0  C026  F01C         	movff	motor_action@r,stop@mR
  3545   0016E4  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3546   0016E8  EC6F  F013         	call	_stop	;wreg free
  3547                           
  3548                           ;../dc_motor.c: 219:             break;
  3549   0016EC  EFFA  F00B         	goto	l322
  3550   0016F0                     l2971:
  3551                           
  3552                           ;../dc_motor.c: 221:             reverse_onesquare(l,r);
  3553   0016F0  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3554   0016F4  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3555   0016F8  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3556   0016FC  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3557   001700  EC7C  F012         	call	_reverse_onesquare	;wreg free
  3558                           
  3559                           ;../dc_motor.c: 222:             right_90(l,r);
  3560   001704  C024  F01A         	movff	motor_action@l,right_90@mL
  3561   001708  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3562   00170C  C026  F01C         	movff	motor_action@r,right_90@mR
  3563   001710  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3564   001714  EC36  F011         	call	_right_90	;wreg free
  3565                           
  3566                           ;../dc_motor.c: 223:             break;
  3567   001718  EFFA  F00B         	goto	l322
  3568   00171C                     l2973:
  3569                           
  3570                           ;../dc_motor.c: 225:             reverse_onesquare(l,r);
  3571   00171C  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3572   001720  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3573   001724  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3574   001728  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3575   00172C  EC7C  F012         	call	_reverse_onesquare	;wreg free
  3576                           
  3577                           ;../dc_motor.c: 226:             left_90(l,r);
  3578   001730  C024  F01A         	movff	motor_action@l,left_90@mL
  3579   001734  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3580   001738  C026  F01C         	movff	motor_action@r,left_90@mR
  3581   00173C  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3582   001740  EC88  F011         	call	_left_90	;wreg free
  3583                           
  3584                           ;../dc_motor.c: 227:             break;
  3585   001744  EFFA  F00B         	goto	l322
  3586   001748                     l2975:
  3587                           
  3588                           ;../dc_motor.c: 229:             reverse_fromcard(l,r);
  3589   001748  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3590   00174C  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3591   001750  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3592   001754  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3593   001758  ECCD  F012         	call	_reverse_fromcard	;wreg free
  3594                           
  3595                           ;../dc_motor.c: 230:             right_135(l,r);
  3596   00175C  C024  F01A         	movff	motor_action@l,right_135@mL
  3597   001760  C025  F01B         	movff	motor_action@l+1,right_135@mL+1
  3598   001764  C026  F01C         	movff	motor_action@r,right_135@mR
  3599   001768  C027  F01D         	movff	motor_action@r+1,right_135@mR+1
  3600   00176C  EC2B  F012         	call	_right_135	;wreg free
  3601                           
  3602                           ;../dc_motor.c: 231:             break;
  3603   001770  EFFA  F00B         	goto	l322
  3604   001774                     l2977:
  3605                           
  3606                           ;../dc_motor.c: 233:             reverse_fromcard(l,r);
  3607   001774  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3608   001778  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3609   00177C  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3610   001780  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3611   001784  ECCD  F012         	call	_reverse_fromcard	;wreg free
  3612                           
  3613                           ;../dc_motor.c: 234:             left_135(l,r);
  3614   001788  C024  F01A         	movff	motor_action@l,left_135@mL
  3615   00178C  C025  F01B         	movff	motor_action@l+1,left_135@mL+1
  3616   001790  C026  F01C         	movff	motor_action@r,left_135@mR
  3617   001794  C027  F01D         	movff	motor_action@r+1,left_135@mR+1
  3618   001798  EC1E  F013         	call	_left_135	;wreg free
  3619                           
  3620                           ;../dc_motor.c: 235:             break;
  3621   00179C  EFFA  F00B         	goto	l322
  3622   0017A0                     l2981:
  3623   0017A0  C022  F028         	movff	motor_action@color,??_motor_action
  3624   0017A4  C023  F029         	movff	motor_action@color+1,??_motor_action+1
  3625                           
  3626                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3627                           ; Switch size 1, requested type "simple"
  3628                           ; Number of cases is 1, Range of values is 0 to 0
  3629                           ; switch strategies available:
  3630                           ; Name         Instructions Cycles
  3631                           ; simple_byte            4     3 (average)
  3632                           ;	Chosen strategy is simple_byte
  3633   0017A8  5029               	movf	(??_motor_action+1)^0,w,c
  3634   0017AA  0A00               	xorlw	0	; case 0
  3635   0017AC  B4D8               	btfsc	status,2,c
  3636   0017AE  EFDB  F00B         	goto	l3207
  3637   0017B2  EFFA  F00B         	goto	l322
  3638   0017B6                     l3207:
  3639                           
  3640                           ; Switch size 1, requested type "simple"
  3641                           ; Number of cases is 7, Range of values is 1 to 7
  3642                           ; switch strategies available:
  3643                           ; Name         Instructions Cycles
  3644                           ; simple_byte           22    12 (average)
  3645                           ;	Chosen strategy is simple_byte
  3646   0017B6  5028               	movf	??_motor_action^0,w,c
  3647   0017B8  0A01               	xorlw	1	; case 1
  3648   0017BA  B4D8               	btfsc	status,2,c
  3649   0017BC  EFD6  F00A         	goto	l2947
  3650   0017C0  0A03               	xorlw	3	; case 2
  3651   0017C2  B4D8               	btfsc	status,2,c
  3652   0017C4  EF0C  F00B         	goto	l2955
  3653   0017C8  0A01               	xorlw	1	; case 3
  3654   0017CA  B4D8               	btfsc	status,2,c
  3655   0017CC  EF42  F00B         	goto	l2963
  3656   0017D0  0A07               	xorlw	7	; case 4
  3657   0017D2  B4D8               	btfsc	status,2,c
  3658   0017D4  EF78  F00B         	goto	l2971
  3659   0017D8  0A01               	xorlw	1	; case 5
  3660   0017DA  B4D8               	btfsc	status,2,c
  3661   0017DC  EF8E  F00B         	goto	l2973
  3662   0017E0  0A03               	xorlw	3	; case 6
  3663   0017E2  B4D8               	btfsc	status,2,c
  3664   0017E4  EFA4  F00B         	goto	l2975
  3665   0017E8  0A01               	xorlw	1	; case 7
  3666   0017EA  B4D8               	btfsc	status,2,c
  3667   0017EC  EFBA  F00B         	goto	l2977
  3668   0017F0  EFFA  F00B         	goto	l322
  3669   0017F4                     l322:
  3670   0017F4  0012               	return		;funcret
  3671   0017F6                     __end_of_motor_action:
  3672                           	callstack 0
  3673                           
  3674 ;; *************** function _stop *****************
  3675 ;; Defined at:
  3676 ;;		line 61 in file "../dc_motor.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3679 ;;		 -> main@motorL(9), 
  3680 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3681 ;;		 -> main@motorR(9), 
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;  i               2   30[COMRAM] int 
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  1    wreg      void 
  3686 ;; Registers used:
  3687 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3693 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3694 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3695 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3696 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3697 ;;Total ram usage:        7 bytes
  3698 ;; Hardware stack levels used: 1
  3699 ;; Hardware stack levels required when called: 3
  3700 ;; This function calls:
  3701 ;;		_setMotorPWM
  3702 ;; This function is called by:
  3703 ;;		_main
  3704 ;;		_motor_action
  3705 ;;		_motor_action_return
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text15
  3710   0026DE                     __ptext15:
  3711                           	callstack 0
  3712   0026DE                     _stop:
  3713                           	callstack 27
  3714   0026DE                     
  3715                           ;../dc_motor.c: 61: void stop(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c: 6
      +                          2: {;../dc_motor.c: 63:     mL->direction = 0;
  3716   0026DE  EE20 F001          	lfsr	2,1
  3717   0026E2  501A               	movf	stop@mL^0,w,c
  3718   0026E4  26D9               	addwf	fsr2l,f,c
  3719   0026E6  501B               	movf	(stop@mL+1)^0,w,c
  3720   0026E8  22DA               	addwfc	fsr2h,f,c
  3721   0026EA  0E00               	movlw	0
  3722   0026EC  6EDF               	movwf	indf2,c
  3723                           
  3724                           ;../dc_motor.c: 64:     mR->direction = 0;
  3725   0026EE  EE20 F001          	lfsr	2,1
  3726   0026F2  501C               	movf	stop@mR^0,w,c
  3727   0026F4  26D9               	addwf	fsr2l,f,c
  3728   0026F6  501D               	movf	(stop@mR+1)^0,w,c
  3729   0026F8  22DA               	addwfc	fsr2h,f,c
  3730   0026FA  0E00               	movlw	0
  3731   0026FC  6EDF               	movwf	indf2,c
  3732   0026FE                     
  3733                           ;../dc_motor.c: 65:     for (int i = 5;i>0;i = i - 1)
  3734   0026FE  0E00               	movlw	0
  3735   002700  6E20               	movwf	(stop@i+1)^0,c
  3736   002702  0E05               	movlw	5
  3737   002704  6E1F               	movwf	stop@i^0,c
  3738   002706                     l2559:
  3739                           
  3740                           ;../dc_motor.c: 66:     {;../dc_motor.c: 67:         mL->power = i;
  3741   002706  C01A  FFD9         	movff	stop@mL,fsr2l
  3742   00270A  C01B  FFDA         	movff	stop@mL+1,fsr2h
  3743   00270E  C01F  FFDF         	movff	stop@i,indf2
  3744                           
  3745                           ;../dc_motor.c: 68:         mR->power = i;
  3746   002712  C01C  FFD9         	movff	stop@mR,fsr2l
  3747   002716  C01D  FFDA         	movff	stop@mR+1,fsr2h
  3748   00271A  C01F  FFDF         	movff	stop@i,indf2
  3749   00271E                     
  3750                           ;../dc_motor.c: 69:         setMotorPWM(mL);
  3751   00271E  C01A  F00F         	movff	stop@mL,setMotorPWM@m
  3752   002722  C01B  F010         	movff	stop@mL+1,setMotorPWM@m+1
  3753   002726  ECFB  F00B         	call	_setMotorPWM	;wreg free
  3754   00272A                     
  3755                           ;../dc_motor.c: 70:         setMotorPWM(mR);
  3756   00272A  C01C  F00F         	movff	stop@mR,setMotorPWM@m
  3757   00272E  C01D  F010         	movff	stop@mR+1,setMotorPWM@m+1
  3758   002732  ECFB  F00B         	call	_setMotorPWM	;wreg free
  3759   002736                     
  3760                           ;../dc_motor.c: 71:         _delay((unsigned long)((10)*(64000000/4000.0)));
  3761   002736  0ED0               	movlw	208
  3762   002738  6E1E               	movwf	??_stop^0,c
  3763   00273A  0ECA               	movlw	202
  3764   00273C                     u1777:
  3765   00273C  2EE8               	decfsz	wreg,f,c
  3766   00273E  D7FE               	bra	u1777
  3767   002740  2E1E               	decfsz	??_stop^0,f,c
  3768   002742  D7FC               	bra	u1777
  3769   002744                     
  3770                           ;../dc_motor.c: 72:     }
  3771   002744  0EFF               	movlw	255
  3772   002746  241F               	addwf	stop@i^0,w,c
  3773   002748  6E1F               	movwf	stop@i^0,c
  3774   00274A  0EFF               	movlw	255
  3775   00274C  2020               	addwfc	(stop@i+1)^0,w,c
  3776   00274E  6E20               	movwf	(stop@i+1)^0,c
  3777   002750  BE20               	btfsc	(stop@i+1)^0,7,c
  3778   002752  EFB5  F013         	goto	u1340
  3779   002756  5020               	movf	(stop@i+1)^0,w,c
  3780   002758  E106               	bnz	u1341
  3781   00275A  041F               	decf	stop@i^0,w,c
  3782   00275C  B0D8               	btfsc	status,0,c
  3783   00275E  EFB3  F013         	goto	u1341
  3784   002762  EFB5  F013         	goto	u1340
  3785   002766                     u1341:
  3786   002766  EF83  F013         	goto	l2559
  3787   00276A                     u1340:
  3788   00276A  0012               	return		;funcret
  3789   00276C                     __end_of_stop:
  3790                           	callstack 0
  3791                           
  3792 ;; *************** function _spin_180 *****************
  3793 ;; Defined at:
  3794 ;;		line 151 in file "../dc_motor.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3797 ;;		 -> main@motorL(9), 
  3798 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3799 ;;		 -> main@motorR(9), 
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;  i               2   31[COMRAM] int 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      void 
  3804 ;; Registers used:
  3805 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3811 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3812 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3813 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3814 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3815 ;;Total ram usage:        8 bytes
  3816 ;; Hardware stack levels used: 1
  3817 ;; Hardware stack levels required when called: 3
  3818 ;; This function calls:
  3819 ;;		_setMotorPWM
  3820 ;; This function is called by:
  3821 ;;		_main
  3822 ;;		_motor_action
  3823 ;;		_motor_action_return
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           	psect	text16
  3828   0023B4                     __ptext16:
  3829                           	callstack 0
  3830   0023B4                     _spin_180:
  3831                           	callstack 27
  3832   0023B4                     
  3833                           ;../dc_motor.c: 151: void spin_180(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 152: {;../dc_motor.c: 153:     mL->direction = 1;
  3834   0023B4  EE20 F001          	lfsr	2,1
  3835   0023B8  501A               	movf	spin_180@mL^0,w,c
  3836   0023BA  26D9               	addwf	fsr2l,f,c
  3837   0023BC  501B               	movf	(spin_180@mL+1)^0,w,c
  3838   0023BE  22DA               	addwfc	fsr2h,f,c
  3839   0023C0  0E01               	movlw	1
  3840   0023C2  6EDF               	movwf	indf2,c
  3841                           
  3842                           ;../dc_motor.c: 154:     mR->direction = 0;
  3843   0023C4  EE20 F001          	lfsr	2,1
  3844   0023C8  501C               	movf	spin_180@mR^0,w,c
  3845   0023CA  26D9               	addwf	fsr2l,f,c
  3846   0023CC  501D               	movf	(spin_180@mR+1)^0,w,c
  3847   0023CE  22DA               	addwfc	fsr2h,f,c
  3848   0023D0  0E00               	movlw	0
  3849   0023D2  6EDF               	movwf	indf2,c
  3850   0023D4                     
  3851                           ;../dc_motor.c: 155:     for (int i = 0;i<50;i = i + 2)
  3852   0023D4  0E00               	movlw	0
  3853   0023D6  6E21               	movwf	(spin_180@i+1)^0,c
  3854   0023D8  0E00               	movlw	0
  3855   0023DA  6E20               	movwf	spin_180@i^0,c
  3856   0023DC                     l2579:
  3857                           
  3858                           ;../dc_motor.c: 156:     {;../dc_motor.c: 157:         mL->power = i;
  3859   0023DC  C01A  FFD9         	movff	spin_180@mL,fsr2l
  3860   0023E0  C01B  FFDA         	movff	spin_180@mL+1,fsr2h
  3861   0023E4  C020  FFDF         	movff	spin_180@i,indf2
  3862   0023E8                     
  3863                           ;../dc_motor.c: 158:         mR->power = 50 + i;
  3864   0023E8  5020               	movf	spin_180@i^0,w,c
  3865   0023EA  0F32               	addlw	50
  3866   0023EC  C01C  FFD9         	movff	spin_180@mR,fsr2l
  3867   0023F0  C01D  FFDA         	movff	spin_180@mR+1,fsr2h
  3868   0023F4  6EDF               	movwf	indf2,c
  3869   0023F6                     
  3870                           ;../dc_motor.c: 159:         setMotorPWM(mL);
  3871   0023F6  C01A  F00F         	movff	spin_180@mL,setMotorPWM@m
  3872   0023FA  C01B  F010         	movff	spin_180@mL+1,setMotorPWM@m+1
  3873   0023FE  ECFB  F00B         	call	_setMotorPWM	;wreg free
  3874   002402                     
  3875                           ;../dc_motor.c: 160:         setMotorPWM(mR);
  3876   002402  C01C  F00F         	movff	spin_180@mR,setMotorPWM@m
  3877   002406  C01D  F010         	movff	spin_180@mR+1,setMotorPWM@m+1
  3878   00240A  ECFB  F00B         	call	_setMotorPWM	;wreg free
  3879   00240E                     
  3880                           ;../dc_motor.c: 161:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3881   00240E  0E35               	movlw	53
  3882   002410                     u1787:
  3883   002410  2EE8               	decfsz	wreg,f,c
  3884   002412  D7FE               	bra	u1787
  3885   002414  F000               	nop	
  3886   002416                     
  3887                           ;../dc_motor.c: 162:     }
  3888   002416  0E02               	movlw	2
  3889   002418  2420               	addwf	spin_180@i^0,w,c
  3890   00241A  6E20               	movwf	spin_180@i^0,c
  3891   00241C  0E00               	movlw	0
  3892   00241E  2021               	addwfc	(spin_180@i+1)^0,w,c
  3893   002420  6E21               	movwf	(spin_180@i+1)^0,c
  3894   002422  BE21               	btfsc	(spin_180@i+1)^0,7,c
  3895   002424  EF1D  F012         	goto	u1351
  3896   002428  5021               	movf	(spin_180@i+1)^0,w,c
  3897   00242A  E109               	bnz	u1350
  3898   00242C  0E32               	movlw	50
  3899   00242E  5C20               	subwf	spin_180@i^0,w,c
  3900   002430  A0D8               	btfss	status,0,c
  3901   002432  EF1D  F012         	goto	u1351
  3902   002436  EF1F  F012         	goto	u1350
  3903   00243A                     u1351:
  3904   00243A  EFEE  F011         	goto	l2579
  3905   00243E                     u1350:
  3906   00243E                     
  3907                           ;../dc_motor.c: 163:     _delay((unsigned long)((290)*(64000000/4000.0)));
  3908   00243E  0E18               	movlw	24
  3909   002440  6E1F               	movwf	(??_spin_180+1)^0,c
  3910   002442  0E8A               	movlw	138
  3911   002444  6E1E               	movwf	??_spin_180^0,c
  3912   002446  0EE8               	movlw	232
  3913   002448                     u1797:
  3914   002448  2EE8               	decfsz	wreg,f,c
  3915   00244A  D7FE               	bra	u1797
  3916   00244C  2E1E               	decfsz	??_spin_180^0,f,c
  3917   00244E  D7FC               	bra	u1797
  3918   002450  2E1F               	decfsz	(??_spin_180+1)^0,f,c
  3919   002452  D7FA               	bra	u1797
  3920   002454  0012               	return		;funcret
  3921   002456                     __end_of_spin_180:
  3922                           	callstack 0
  3923                           
  3924 ;; *************** function _right_90 *****************
  3925 ;; Defined at:
  3926 ;;		line 121 in file "../dc_motor.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3929 ;;		 -> main@motorL(9), 
  3930 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3931 ;;		 -> main@motorR(9), 
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;  i               2   31[COMRAM] int 
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  1    wreg      void 
  3936 ;; Registers used:
  3937 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3943 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3944 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3945 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3946 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3947 ;;Total ram usage:        8 bytes
  3948 ;; Hardware stack levels used: 1
  3949 ;; Hardware stack levels required when called: 3
  3950 ;; This function calls:
  3951 ;;		_setMotorPWM
  3952 ;; This function is called by:
  3953 ;;		_motor_action
  3954 ;;		_motor_action_return
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           	psect	text17
  3959   00226C                     __ptext17:
  3960                           	callstack 0
  3961   00226C                     _right_90:
  3962                           	callstack 26
  3963   00226C                     
  3964                           ;../dc_motor.c: 121: void right_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 122: {;../dc_motor.c: 123:     mL->direction = 1;
  3965   00226C  EE20 F001          	lfsr	2,1
  3966   002270  501A               	movf	right_90@mL^0,w,c
  3967   002272  26D9               	addwf	fsr2l,f,c
  3968   002274  501B               	movf	(right_90@mL+1)^0,w,c
  3969   002276  22DA               	addwfc	fsr2h,f,c
  3970   002278  0E01               	movlw	1
  3971   00227A  6EDF               	movwf	indf2,c
  3972                           
  3973                           ;../dc_motor.c: 124:     mR->direction = 0;
  3974   00227C  EE20 F001          	lfsr	2,1
  3975   002280  501C               	movf	right_90@mR^0,w,c
  3976   002282  26D9               	addwf	fsr2l,f,c
  3977   002284  501D               	movf	(right_90@mR+1)^0,w,c
  3978   002286  22DA               	addwfc	fsr2h,f,c
  3979   002288  0E00               	movlw	0
  3980   00228A  6EDF               	movwf	indf2,c
  3981   00228C                     
  3982                           ;../dc_motor.c: 125:     for (int i = 0;i<50;i = i + 2)
  3983   00228C  0E00               	movlw	0
  3984   00228E  6E21               	movwf	(right_90@i+1)^0,c
  3985   002290  0E00               	movlw	0
  3986   002292  6E20               	movwf	right_90@i^0,c
  3987   002294                     l2647:
  3988                           
  3989                           ;../dc_motor.c: 126:     {;../dc_motor.c: 127:         mL->power = i;
  3990   002294  C01A  FFD9         	movff	right_90@mL,fsr2l
  3991   002298  C01B  FFDA         	movff	right_90@mL+1,fsr2h
  3992   00229C  C020  FFDF         	movff	right_90@i,indf2
  3993   0022A0                     
  3994                           ;../dc_motor.c: 128:         mR->power = 50 + i;
  3995   0022A0  5020               	movf	right_90@i^0,w,c
  3996   0022A2  0F32               	addlw	50
  3997   0022A4  C01C  FFD9         	movff	right_90@mR,fsr2l
  3998   0022A8  C01D  FFDA         	movff	right_90@mR+1,fsr2h
  3999   0022AC  6EDF               	movwf	indf2,c
  4000   0022AE                     
  4001                           ;../dc_motor.c: 129:         setMotorPWM(mL);
  4002   0022AE  C01A  F00F         	movff	right_90@mL,setMotorPWM@m
  4003   0022B2  C01B  F010         	movff	right_90@mL+1,setMotorPWM@m+1
  4004   0022B6  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4005   0022BA                     
  4006                           ;../dc_motor.c: 130:         setMotorPWM(mR);
  4007   0022BA  C01C  F00F         	movff	right_90@mR,setMotorPWM@m
  4008   0022BE  C01D  F010         	movff	right_90@mR+1,setMotorPWM@m+1
  4009   0022C2  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4010   0022C6                     
  4011                           ;../dc_motor.c: 131:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4012   0022C6  0E35               	movlw	53
  4013   0022C8                     u1807:
  4014   0022C8  2EE8               	decfsz	wreg,f,c
  4015   0022CA  D7FE               	bra	u1807
  4016   0022CC  F000               	nop	
  4017   0022CE                     
  4018                           ;../dc_motor.c: 132:     }
  4019   0022CE  0E02               	movlw	2
  4020   0022D0  2420               	addwf	right_90@i^0,w,c
  4021   0022D2  6E20               	movwf	right_90@i^0,c
  4022   0022D4  0E00               	movlw	0
  4023   0022D6  2021               	addwfc	(right_90@i+1)^0,w,c
  4024   0022D8  6E21               	movwf	(right_90@i+1)^0,c
  4025   0022DA  BE21               	btfsc	(right_90@i+1)^0,7,c
  4026   0022DC  EF79  F011         	goto	u1381
  4027   0022E0  5021               	movf	(right_90@i+1)^0,w,c
  4028   0022E2  E109               	bnz	u1380
  4029   0022E4  0E32               	movlw	50
  4030   0022E6  5C20               	subwf	right_90@i^0,w,c
  4031   0022E8  A0D8               	btfss	status,0,c
  4032   0022EA  EF79  F011         	goto	u1381
  4033   0022EE  EF7B  F011         	goto	u1380
  4034   0022F2                     u1381:
  4035   0022F2  EF4A  F011         	goto	l2647
  4036   0022F6                     u1380:
  4037   0022F6                     
  4038                           ;../dc_motor.c: 133:     _delay((unsigned long)((165)*(64000000/4000.0)));
  4039   0022F6  0E0E               	movlw	14
  4040   0022F8  6E1F               	movwf	(??_right_90+1)^0,c
  4041   0022FA  0E65               	movlw	101
  4042   0022FC  6E1E               	movwf	??_right_90^0,c
  4043   0022FE  0E87               	movlw	135
  4044   002300                     u1817:
  4045   002300  2EE8               	decfsz	wreg,f,c
  4046   002302  D7FE               	bra	u1817
  4047   002304  2E1E               	decfsz	??_right_90^0,f,c
  4048   002306  D7FC               	bra	u1817
  4049   002308  2E1F               	decfsz	(??_right_90+1)^0,f,c
  4050   00230A  D7FA               	bra	u1817
  4051   00230C  F000               	nop	
  4052   00230E  0012               	return		;funcret
  4053   002310                     __end_of_right_90:
  4054                           	callstack 0
  4055                           
  4056 ;; *************** function _right_135 *****************
  4057 ;; Defined at:
  4058 ;;		line 166 in file "../dc_motor.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4061 ;;		 -> main@motorL(9), 
  4062 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4063 ;;		 -> main@motorR(9), 
  4064 ;; Auto vars:     Size  Location     Type
  4065 ;;  i               2   31[COMRAM] int 
  4066 ;; Return value:  Size  Location     Type
  4067 ;;                  1    wreg      void 
  4068 ;; Registers used:
  4069 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4070 ;; Tracked objects:
  4071 ;;		On entry : 0/0
  4072 ;;		On exit  : 0/0
  4073 ;;		Unchanged: 0/0
  4074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4075 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4076 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4077 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4078 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4079 ;;Total ram usage:        8 bytes
  4080 ;; Hardware stack levels used: 1
  4081 ;; Hardware stack levels required when called: 3
  4082 ;; This function calls:
  4083 ;;		_setMotorPWM
  4084 ;; This function is called by:
  4085 ;;		_motor_action
  4086 ;;		_motor_action_return
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           	psect	text18
  4091   002456                     __ptext18:
  4092                           	callstack 0
  4093   002456                     _right_135:
  4094                           	callstack 26
  4095   002456                     
  4096                           ;../dc_motor.c: 166: void right_135(struct DC_motor *mL, struct DC_motor *mR);../dc_moto
      +                          r.c: 167: {;../dc_motor.c: 168:     mL->direction = 1;
  4097   002456  EE20 F001          	lfsr	2,1
  4098   00245A  501A               	movf	right_135@mL^0,w,c
  4099   00245C  26D9               	addwf	fsr2l,f,c
  4100   00245E  501B               	movf	(right_135@mL+1)^0,w,c
  4101   002460  22DA               	addwfc	fsr2h,f,c
  4102   002462  0E01               	movlw	1
  4103   002464  6EDF               	movwf	indf2,c
  4104                           
  4105                           ;../dc_motor.c: 169:     mR->direction = 0;
  4106   002466  EE20 F001          	lfsr	2,1
  4107   00246A  501C               	movf	right_135@mR^0,w,c
  4108   00246C  26D9               	addwf	fsr2l,f,c
  4109   00246E  501D               	movf	(right_135@mR+1)^0,w,c
  4110   002470  22DA               	addwfc	fsr2h,f,c
  4111   002472  0E00               	movlw	0
  4112   002474  6EDF               	movwf	indf2,c
  4113   002476                     
  4114                           ;../dc_motor.c: 170:     for (int i = 0;i<50;i = i + 2)
  4115   002476  0E00               	movlw	0
  4116   002478  6E21               	movwf	(right_135@i+1)^0,c
  4117   00247A  0E00               	movlw	0
  4118   00247C  6E20               	movwf	right_135@i^0,c
  4119   00247E                     l2695:
  4120                           
  4121                           ;../dc_motor.c: 171:     {;../dc_motor.c: 172:         mL->power = i;
  4122   00247E  C01A  FFD9         	movff	right_135@mL,fsr2l
  4123   002482  C01B  FFDA         	movff	right_135@mL+1,fsr2h
  4124   002486  C020  FFDF         	movff	right_135@i,indf2
  4125   00248A                     
  4126                           ;../dc_motor.c: 173:         mR->power = 50 + i;
  4127   00248A  5020               	movf	right_135@i^0,w,c
  4128   00248C  0F32               	addlw	50
  4129   00248E  C01C  FFD9         	movff	right_135@mR,fsr2l
  4130   002492  C01D  FFDA         	movff	right_135@mR+1,fsr2h
  4131   002496  6EDF               	movwf	indf2,c
  4132   002498                     
  4133                           ;../dc_motor.c: 174:         setMotorPWM(mL);
  4134   002498  C01A  F00F         	movff	right_135@mL,setMotorPWM@m
  4135   00249C  C01B  F010         	movff	right_135@mL+1,setMotorPWM@m+1
  4136   0024A0  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4137   0024A4                     
  4138                           ;../dc_motor.c: 175:         setMotorPWM(mR);
  4139   0024A4  C01C  F00F         	movff	right_135@mR,setMotorPWM@m
  4140   0024A8  C01D  F010         	movff	right_135@mR+1,setMotorPWM@m+1
  4141   0024AC  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4142   0024B0                     
  4143                           ;../dc_motor.c: 176:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4144   0024B0  0E35               	movlw	53
  4145   0024B2                     u1827:
  4146   0024B2  2EE8               	decfsz	wreg,f,c
  4147   0024B4  D7FE               	bra	u1827
  4148   0024B6  F000               	nop	
  4149   0024B8                     
  4150                           ;../dc_motor.c: 177:     }
  4151   0024B8  0E02               	movlw	2
  4152   0024BA  2420               	addwf	right_135@i^0,w,c
  4153   0024BC  6E20               	movwf	right_135@i^0,c
  4154   0024BE  0E00               	movlw	0
  4155   0024C0  2021               	addwfc	(right_135@i+1)^0,w,c
  4156   0024C2  6E21               	movwf	(right_135@i+1)^0,c
  4157   0024C4  BE21               	btfsc	(right_135@i+1)^0,7,c
  4158   0024C6  EF6E  F012         	goto	u1401
  4159   0024CA  5021               	movf	(right_135@i+1)^0,w,c
  4160   0024CC  E109               	bnz	u1400
  4161   0024CE  0E32               	movlw	50
  4162   0024D0  5C20               	subwf	right_135@i^0,w,c
  4163   0024D2  A0D8               	btfss	status,0,c
  4164   0024D4  EF6E  F012         	goto	u1401
  4165   0024D8  EF70  F012         	goto	u1400
  4166   0024DC                     u1401:
  4167   0024DC  EF3F  F012         	goto	l2695
  4168   0024E0                     u1400:
  4169   0024E0                     
  4170                           ;../dc_motor.c: 178:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4171   0024E0  0E13               	movlw	19
  4172   0024E2  6E1F               	movwf	(??_right_135+1)^0,c
  4173   0024E4  0EAC               	movlw	172
  4174   0024E6  6E1E               	movwf	??_right_135^0,c
  4175   0024E8  0E2A               	movlw	42
  4176   0024EA                     u1837:
  4177   0024EA  2EE8               	decfsz	wreg,f,c
  4178   0024EC  D7FE               	bra	u1837
  4179   0024EE  2E1E               	decfsz	??_right_135^0,f,c
  4180   0024F0  D7FC               	bra	u1837
  4181   0024F2  2E1F               	decfsz	(??_right_135+1)^0,f,c
  4182   0024F4  D7FA               	bra	u1837
  4183   0024F6  0012               	return		;funcret
  4184   0024F8                     __end_of_right_135:
  4185                           	callstack 0
  4186                           
  4187 ;; *************** function _reverse_onesquare *****************
  4188 ;; Defined at:
  4189 ;;		line 106 in file "../dc_motor.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4192 ;;		 -> main@motorL(9), 
  4193 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4194 ;;		 -> main@motorR(9), 
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;  i               2   31[COMRAM] int 
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  1    wreg      void 
  4199 ;; Registers used:
  4200 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4206 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4208 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4209 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4210 ;;Total ram usage:        8 bytes
  4211 ;; Hardware stack levels used: 1
  4212 ;; Hardware stack levels required when called: 3
  4213 ;; This function calls:
  4214 ;;		_setMotorPWM
  4215 ;; This function is called by:
  4216 ;;		_motor_action
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           	psect	text19
  4221   0024F8                     __ptext19:
  4222                           	callstack 0
  4223   0024F8                     _reverse_onesquare:
  4224                           	callstack 26
  4225   0024F8                     
  4226                           ;../dc_motor.c: 106: void reverse_onesquare (struct DC_motor *mL, struct DC_motor *mR);.
      +                          ./dc_motor.c: 107: {;../dc_motor.c: 108:     mL->direction = 0;
  4227   0024F8  EE20 F001          	lfsr	2,1
  4228   0024FC  501A               	movf	reverse_onesquare@mL^0,w,c
  4229   0024FE  26D9               	addwf	fsr2l,f,c
  4230   002500  501B               	movf	(reverse_onesquare@mL+1)^0,w,c
  4231   002502  22DA               	addwfc	fsr2h,f,c
  4232   002504  0E00               	movlw	0
  4233   002506  6EDF               	movwf	indf2,c
  4234                           
  4235                           ;../dc_motor.c: 109:     mR->direction = 0;
  4236   002508  EE20 F001          	lfsr	2,1
  4237   00250C  501C               	movf	reverse_onesquare@mR^0,w,c
  4238   00250E  26D9               	addwf	fsr2l,f,c
  4239   002510  501D               	movf	(reverse_onesquare@mR+1)^0,w,c
  4240   002512  22DA               	addwfc	fsr2h,f,c
  4241   002514  0E00               	movlw	0
  4242   002516  6EDF               	movwf	indf2,c
  4243   002518                     
  4244                           ;../dc_motor.c: 110:     for (int i=0;i<51;i=i + 2)
  4245   002518  0E00               	movlw	0
  4246   00251A  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  4247   00251C  0E00               	movlw	0
  4248   00251E  6E20               	movwf	reverse_onesquare@i^0,c
  4249   002520                     l2625:
  4250                           
  4251                           ;../dc_motor.c: 111:     {;../dc_motor.c: 112:         mL->power = i;
  4252   002520  C01A  FFD9         	movff	reverse_onesquare@mL,fsr2l
  4253   002524  C01B  FFDA         	movff	reverse_onesquare@mL+1,fsr2h
  4254   002528  C020  FFDF         	movff	reverse_onesquare@i,indf2
  4255                           
  4256                           ;../dc_motor.c: 113:         mR->power = i;
  4257   00252C  C01C  FFD9         	movff	reverse_onesquare@mR,fsr2l
  4258   002530  C01D  FFDA         	movff	reverse_onesquare@mR+1,fsr2h
  4259   002534  C020  FFDF         	movff	reverse_onesquare@i,indf2
  4260   002538                     
  4261                           ;../dc_motor.c: 114:         setMotorPWM(mL);
  4262   002538  C01A  F00F         	movff	reverse_onesquare@mL,setMotorPWM@m
  4263   00253C  C01B  F010         	movff	reverse_onesquare@mL+1,setMotorPWM@m+1
  4264   002540  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4265   002544                     
  4266                           ;../dc_motor.c: 115:         setMotorPWM(mR);
  4267   002544  C01C  F00F         	movff	reverse_onesquare@mR,setMotorPWM@m
  4268   002548  C01D  F010         	movff	reverse_onesquare@mR+1,setMotorPWM@m+1
  4269   00254C  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4270   002550                     
  4271                           ;../dc_motor.c: 116:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4272   002550  0E35               	movlw	53
  4273   002552                     u1847:
  4274   002552  2EE8               	decfsz	wreg,f,c
  4275   002554  D7FE               	bra	u1847
  4276   002556  F000               	nop	
  4277   002558                     
  4278                           ;../dc_motor.c: 117:     }
  4279   002558  0E02               	movlw	2
  4280   00255A  2420               	addwf	reverse_onesquare@i^0,w,c
  4281   00255C  6E20               	movwf	reverse_onesquare@i^0,c
  4282   00255E  0E00               	movlw	0
  4283   002560  2021               	addwfc	(reverse_onesquare@i+1)^0,w,c
  4284   002562  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  4285   002564  BE21               	btfsc	(reverse_onesquare@i+1)^0,7,c
  4286   002566  EFBE  F012         	goto	u1371
  4287   00256A  5021               	movf	(reverse_onesquare@i+1)^0,w,c
  4288   00256C  E109               	bnz	u1370
  4289   00256E  0E33               	movlw	51
  4290   002570  5C20               	subwf	reverse_onesquare@i^0,w,c
  4291   002572  A0D8               	btfss	status,0,c
  4292   002574  EFBE  F012         	goto	u1371
  4293   002578  EFC0  F012         	goto	u1370
  4294   00257C                     u1371:
  4295   00257C  EF90  F012         	goto	l2625
  4296   002580                     u1370:
  4297   002580                     
  4298                           ;../dc_motor.c: 118:     _delay((unsigned long)((1100)*(64000000/4000.0)));
  4299   002580  0E5A               	movlw	90
  4300   002582  6E1F               	movwf	(??_reverse_onesquare+1)^0,c
  4301   002584  0E49               	movlw	73
  4302   002586  6E1E               	movwf	??_reverse_onesquare^0,c
  4303   002588  0EE7               	movlw	231
  4304   00258A                     u1857:
  4305   00258A  2EE8               	decfsz	wreg,f,c
  4306   00258C  D7FE               	bra	u1857
  4307   00258E  2E1E               	decfsz	??_reverse_onesquare^0,f,c
  4308   002590  D7FC               	bra	u1857
  4309   002592  2E1F               	decfsz	(??_reverse_onesquare+1)^0,f,c
  4310   002594  D7FA               	bra	u1857
  4311   002596  F000               	nop	
  4312   002598  0012               	return		;funcret
  4313   00259A                     __end_of_reverse_onesquare:
  4314                           	callstack 0
  4315                           
  4316 ;; *************** function _reverse_fromcard *****************
  4317 ;; Defined at:
  4318 ;;		line 91 in file "../dc_motor.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4321 ;;		 -> main@motorL(9), 
  4322 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4323 ;;		 -> main@motorR(9), 
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  i               2   31[COMRAM] int 
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  1    wreg      void 
  4328 ;; Registers used:
  4329 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4335 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4336 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4337 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4338 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4339 ;;Total ram usage:        8 bytes
  4340 ;; Hardware stack levels used: 1
  4341 ;; Hardware stack levels required when called: 3
  4342 ;; This function calls:
  4343 ;;		_setMotorPWM
  4344 ;; This function is called by:
  4345 ;;		_motor_action
  4346 ;;		_motor_action_return
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350                           	psect	text20
  4351   00259A                     __ptext20:
  4352                           	callstack 0
  4353   00259A                     _reverse_fromcard:
  4354                           	callstack 26
  4355   00259A                     
  4356                           ;../dc_motor.c: 91: void reverse_fromcard (struct DC_motor *mL, struct DC_motor *mR);../
      +                          dc_motor.c: 92: {;../dc_motor.c: 93:     mL->direction = 0;
  4357   00259A  EE20 F001          	lfsr	2,1
  4358   00259E  501A               	movf	reverse_fromcard@mL^0,w,c
  4359   0025A0  26D9               	addwf	fsr2l,f,c
  4360   0025A2  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  4361   0025A4  22DA               	addwfc	fsr2h,f,c
  4362   0025A6  0E00               	movlw	0
  4363   0025A8  6EDF               	movwf	indf2,c
  4364                           
  4365                           ;../dc_motor.c: 94:     mL->direction = 0;
  4366   0025AA  EE20 F001          	lfsr	2,1
  4367   0025AE  501A               	movf	reverse_fromcard@mL^0,w,c
  4368   0025B0  26D9               	addwf	fsr2l,f,c
  4369   0025B2  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  4370   0025B4  22DA               	addwfc	fsr2h,f,c
  4371   0025B6  0E00               	movlw	0
  4372   0025B8  6EDF               	movwf	indf2,c
  4373   0025BA                     
  4374                           ;../dc_motor.c: 95:     for (int i = 0;i < 41;i = i + 2)
  4375   0025BA  0E00               	movlw	0
  4376   0025BC  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  4377   0025BE  0E00               	movlw	0
  4378   0025C0  6E20               	movwf	reverse_fromcard@i^0,c
  4379   0025C2                     l2603:
  4380                           
  4381                           ;../dc_motor.c: 96:     {;../dc_motor.c: 97:         mL->power = i;
  4382   0025C2  C01A  FFD9         	movff	reverse_fromcard@mL,fsr2l
  4383   0025C6  C01B  FFDA         	movff	reverse_fromcard@mL+1,fsr2h
  4384   0025CA  C020  FFDF         	movff	reverse_fromcard@i,indf2
  4385                           
  4386                           ;../dc_motor.c: 98:         mR->power = i;
  4387   0025CE  C01C  FFD9         	movff	reverse_fromcard@mR,fsr2l
  4388   0025D2  C01D  FFDA         	movff	reverse_fromcard@mR+1,fsr2h
  4389   0025D6  C020  FFDF         	movff	reverse_fromcard@i,indf2
  4390   0025DA                     
  4391                           ;../dc_motor.c: 99:         setMotorPWM(mL);
  4392   0025DA  C01A  F00F         	movff	reverse_fromcard@mL,setMotorPWM@m
  4393   0025DE  C01B  F010         	movff	reverse_fromcard@mL+1,setMotorPWM@m+1
  4394   0025E2  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4395   0025E6                     
  4396                           ;../dc_motor.c: 100:         setMotorPWM(mR);
  4397   0025E6  C01C  F00F         	movff	reverse_fromcard@mR,setMotorPWM@m
  4398   0025EA  C01D  F010         	movff	reverse_fromcard@mR+1,setMotorPWM@m+1
  4399   0025EE  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4400   0025F2                     
  4401                           ;../dc_motor.c: 101:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4402   0025F2  0E35               	movlw	53
  4403   0025F4                     u1867:
  4404   0025F4  2EE8               	decfsz	wreg,f,c
  4405   0025F6  D7FE               	bra	u1867
  4406   0025F8  F000               	nop	
  4407   0025FA                     
  4408                           ;../dc_motor.c: 102:     }
  4409   0025FA  0E02               	movlw	2
  4410   0025FC  2420               	addwf	reverse_fromcard@i^0,w,c
  4411   0025FE  6E20               	movwf	reverse_fromcard@i^0,c
  4412   002600  0E00               	movlw	0
  4413   002602  2021               	addwfc	(reverse_fromcard@i+1)^0,w,c
  4414   002604  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  4415   002606  BE21               	btfsc	(reverse_fromcard@i+1)^0,7,c
  4416   002608  EF0F  F013         	goto	u1361
  4417   00260C  5021               	movf	(reverse_fromcard@i+1)^0,w,c
  4418   00260E  E109               	bnz	u1360
  4419   002610  0E29               	movlw	41
  4420   002612  5C20               	subwf	reverse_fromcard@i^0,w,c
  4421   002614  A0D8               	btfss	status,0,c
  4422   002616  EF0F  F013         	goto	u1361
  4423   00261A  EF11  F013         	goto	u1360
  4424   00261E                     u1361:
  4425   00261E  EFE1  F012         	goto	l2603
  4426   002622                     u1360:
  4427   002622                     
  4428                           ;../dc_motor.c: 103:     _delay((unsigned long)((500)*(64000000/4000.0)));
  4429   002622  0E29               	movlw	41
  4430   002624  6E1F               	movwf	(??_reverse_fromcard+1)^0,c
  4431   002626  0E96               	movlw	150
  4432   002628  6E1E               	movwf	??_reverse_fromcard^0,c
  4433   00262A  0E7F               	movlw	127
  4434   00262C                     u1877:
  4435   00262C  2EE8               	decfsz	wreg,f,c
  4436   00262E  D7FE               	bra	u1877
  4437   002630  2E1E               	decfsz	??_reverse_fromcard^0,f,c
  4438   002632  D7FC               	bra	u1877
  4439   002634  2E1F               	decfsz	(??_reverse_fromcard+1)^0,f,c
  4440   002636  D7FA               	bra	u1877
  4441   002638  F000               	nop	
  4442   00263A  0012               	return		;funcret
  4443   00263C                     __end_of_reverse_fromcard:
  4444                           	callstack 0
  4445                           
  4446 ;; *************** function _left_90 *****************
  4447 ;; Defined at:
  4448 ;;		line 136 in file "../dc_motor.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4451 ;;		 -> main@motorL(9), 
  4452 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4453 ;;		 -> main@motorR(9), 
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  i               2   31[COMRAM] int 
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      void 
  4458 ;; Registers used:
  4459 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4465 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4466 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4467 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4468 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4469 ;;Total ram usage:        8 bytes
  4470 ;; Hardware stack levels used: 1
  4471 ;; Hardware stack levels required when called: 3
  4472 ;; This function calls:
  4473 ;;		_setMotorPWM
  4474 ;; This function is called by:
  4475 ;;		_motor_action
  4476 ;;		_motor_action_return
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text21
  4481   002310                     __ptext21:
  4482                           	callstack 0
  4483   002310                     _left_90:
  4484                           	callstack 26
  4485   002310                     
  4486                           ;../dc_motor.c: 136: void left_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 137: {;../dc_motor.c: 138:     mL->direction = 0;
  4487   002310  EE20 F001          	lfsr	2,1
  4488   002314  501A               	movf	left_90@mL^0,w,c
  4489   002316  26D9               	addwf	fsr2l,f,c
  4490   002318  501B               	movf	(left_90@mL+1)^0,w,c
  4491   00231A  22DA               	addwfc	fsr2h,f,c
  4492   00231C  0E00               	movlw	0
  4493   00231E  6EDF               	movwf	indf2,c
  4494                           
  4495                           ;../dc_motor.c: 139:     mR->direction = 1;
  4496   002320  EE20 F001          	lfsr	2,1
  4497   002324  501C               	movf	left_90@mR^0,w,c
  4498   002326  26D9               	addwf	fsr2l,f,c
  4499   002328  501D               	movf	(left_90@mR+1)^0,w,c
  4500   00232A  22DA               	addwfc	fsr2h,f,c
  4501   00232C  0E01               	movlw	1
  4502   00232E  6EDF               	movwf	indf2,c
  4503   002330                     
  4504                           ;../dc_motor.c: 140:     for (int i = 0;i<50;i = i + 2)
  4505   002330  0E00               	movlw	0
  4506   002332  6E21               	movwf	(left_90@i+1)^0,c
  4507   002334  0E00               	movlw	0
  4508   002336  6E20               	movwf	left_90@i^0,c
  4509   002338                     l2671:
  4510                           
  4511                           ;../dc_motor.c: 141:     {;../dc_motor.c: 142:         mL->power = 50 + i;
  4512   002338  5020               	movf	left_90@i^0,w,c
  4513   00233A  0F32               	addlw	50
  4514   00233C  C01A  FFD9         	movff	left_90@mL,fsr2l
  4515   002340  C01B  FFDA         	movff	left_90@mL+1,fsr2h
  4516   002344  6EDF               	movwf	indf2,c
  4517   002346                     
  4518                           ;../dc_motor.c: 143:         mR->power = i;
  4519   002346  C01C  FFD9         	movff	left_90@mR,fsr2l
  4520   00234A  C01D  FFDA         	movff	left_90@mR+1,fsr2h
  4521   00234E  C020  FFDF         	movff	left_90@i,indf2
  4522   002352                     
  4523                           ;../dc_motor.c: 144:         setMotorPWM(mL);
  4524   002352  C01A  F00F         	movff	left_90@mL,setMotorPWM@m
  4525   002356  C01B  F010         	movff	left_90@mL+1,setMotorPWM@m+1
  4526   00235A  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4527   00235E                     
  4528                           ;../dc_motor.c: 145:         setMotorPWM(mR);
  4529   00235E  C01C  F00F         	movff	left_90@mR,setMotorPWM@m
  4530   002362  C01D  F010         	movff	left_90@mR+1,setMotorPWM@m+1
  4531   002366  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4532   00236A                     
  4533                           ;../dc_motor.c: 146:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4534   00236A  0E35               	movlw	53
  4535   00236C                     u1887:
  4536   00236C  2EE8               	decfsz	wreg,f,c
  4537   00236E  D7FE               	bra	u1887
  4538   002370  F000               	nop	
  4539   002372                     
  4540                           ;../dc_motor.c: 147:     }
  4541   002372  0E02               	movlw	2
  4542   002374  2420               	addwf	left_90@i^0,w,c
  4543   002376  6E20               	movwf	left_90@i^0,c
  4544   002378  0E00               	movlw	0
  4545   00237A  2021               	addwfc	(left_90@i+1)^0,w,c
  4546   00237C  6E21               	movwf	(left_90@i+1)^0,c
  4547   00237E  BE21               	btfsc	(left_90@i+1)^0,7,c
  4548   002380  EFCB  F011         	goto	u1391
  4549   002384  5021               	movf	(left_90@i+1)^0,w,c
  4550   002386  E109               	bnz	u1390
  4551   002388  0E32               	movlw	50
  4552   00238A  5C20               	subwf	left_90@i^0,w,c
  4553   00238C  A0D8               	btfss	status,0,c
  4554   00238E  EFCB  F011         	goto	u1391
  4555   002392  EFCD  F011         	goto	u1390
  4556   002396                     u1391:
  4557   002396  EF9C  F011         	goto	l2671
  4558   00239A                     u1390:
  4559   00239A                     
  4560                           ;../dc_motor.c: 148:     _delay((unsigned long)((165)*(64000000/4000.0)));
  4561   00239A  0E0E               	movlw	14
  4562   00239C  6E1F               	movwf	(??_left_90+1)^0,c
  4563   00239E  0E65               	movlw	101
  4564   0023A0  6E1E               	movwf	??_left_90^0,c
  4565   0023A2  0E87               	movlw	135
  4566   0023A4                     u1897:
  4567   0023A4  2EE8               	decfsz	wreg,f,c
  4568   0023A6  D7FE               	bra	u1897
  4569   0023A8  2E1E               	decfsz	??_left_90^0,f,c
  4570   0023AA  D7FC               	bra	u1897
  4571   0023AC  2E1F               	decfsz	(??_left_90+1)^0,f,c
  4572   0023AE  D7FA               	bra	u1897
  4573   0023B0  F000               	nop	
  4574   0023B2  0012               	return		;funcret
  4575   0023B4                     __end_of_left_90:
  4576                           	callstack 0
  4577                           
  4578 ;; *************** function _left_135 *****************
  4579 ;; Defined at:
  4580 ;;		line 181 in file "../dc_motor.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4583 ;;		 -> main@motorL(9), 
  4584 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4585 ;;		 -> main@motorR(9), 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  i               2   31[COMRAM] int 
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1    wreg      void 
  4590 ;; Registers used:
  4591 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4597 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4598 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4599 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4600 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4601 ;;Total ram usage:        8 bytes
  4602 ;; Hardware stack levels used: 1
  4603 ;; Hardware stack levels required when called: 3
  4604 ;; This function calls:
  4605 ;;		_setMotorPWM
  4606 ;; This function is called by:
  4607 ;;		_motor_action
  4608 ;;		_motor_action_return
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           	psect	text22
  4613   00263C                     __ptext22:
  4614                           	callstack 0
  4615   00263C                     _left_135:
  4616                           	callstack 26
  4617   00263C                     
  4618                           ;../dc_motor.c: 181: void left_135(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 182: {;../dc_motor.c: 183:     mL->direction = 0;
  4619   00263C  EE20 F001          	lfsr	2,1
  4620   002640  501A               	movf	left_135@mL^0,w,c
  4621   002642  26D9               	addwf	fsr2l,f,c
  4622   002644  501B               	movf	(left_135@mL+1)^0,w,c
  4623   002646  22DA               	addwfc	fsr2h,f,c
  4624   002648  0E00               	movlw	0
  4625   00264A  6EDF               	movwf	indf2,c
  4626                           
  4627                           ;../dc_motor.c: 184:     mR->direction = 1;
  4628   00264C  EE20 F001          	lfsr	2,1
  4629   002650  501C               	movf	left_135@mR^0,w,c
  4630   002652  26D9               	addwf	fsr2l,f,c
  4631   002654  501D               	movf	(left_135@mR+1)^0,w,c
  4632   002656  22DA               	addwfc	fsr2h,f,c
  4633   002658  0E01               	movlw	1
  4634   00265A  6EDF               	movwf	indf2,c
  4635   00265C                     
  4636                           ;../dc_motor.c: 185:     for (int i = 0;i<50;i = i + 2)
  4637   00265C  0E00               	movlw	0
  4638   00265E  6E21               	movwf	(left_135@i+1)^0,c
  4639   002660  0E00               	movlw	0
  4640   002662  6E20               	movwf	left_135@i^0,c
  4641   002664                     l2719:
  4642                           
  4643                           ;../dc_motor.c: 186:     {;../dc_motor.c: 187:         mL->power = 50 + i;
  4644   002664  5020               	movf	left_135@i^0,w,c
  4645   002666  0F32               	addlw	50
  4646   002668  C01A  FFD9         	movff	left_135@mL,fsr2l
  4647   00266C  C01B  FFDA         	movff	left_135@mL+1,fsr2h
  4648   002670  6EDF               	movwf	indf2,c
  4649   002672                     
  4650                           ;../dc_motor.c: 188:         mR->power = i;
  4651   002672  C01C  FFD9         	movff	left_135@mR,fsr2l
  4652   002676  C01D  FFDA         	movff	left_135@mR+1,fsr2h
  4653   00267A  C020  FFDF         	movff	left_135@i,indf2
  4654   00267E                     
  4655                           ;../dc_motor.c: 189:         setMotorPWM(mL);
  4656   00267E  C01A  F00F         	movff	left_135@mL,setMotorPWM@m
  4657   002682  C01B  F010         	movff	left_135@mL+1,setMotorPWM@m+1
  4658   002686  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4659   00268A                     
  4660                           ;../dc_motor.c: 190:         setMotorPWM(mR);
  4661   00268A  C01C  F00F         	movff	left_135@mR,setMotorPWM@m
  4662   00268E  C01D  F010         	movff	left_135@mR+1,setMotorPWM@m+1
  4663   002692  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4664   002696                     
  4665                           ;../dc_motor.c: 191:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4666   002696  0E35               	movlw	53
  4667   002698                     u1907:
  4668   002698  2EE8               	decfsz	wreg,f,c
  4669   00269A  D7FE               	bra	u1907
  4670   00269C  F000               	nop	
  4671   00269E                     
  4672                           ;../dc_motor.c: 192:     }
  4673   00269E  0E02               	movlw	2
  4674   0026A0  2420               	addwf	left_135@i^0,w,c
  4675   0026A2  6E20               	movwf	left_135@i^0,c
  4676   0026A4  0E00               	movlw	0
  4677   0026A6  2021               	addwfc	(left_135@i+1)^0,w,c
  4678   0026A8  6E21               	movwf	(left_135@i+1)^0,c
  4679   0026AA  BE21               	btfsc	(left_135@i+1)^0,7,c
  4680   0026AC  EF61  F013         	goto	u1411
  4681   0026B0  5021               	movf	(left_135@i+1)^0,w,c
  4682   0026B2  E109               	bnz	u1410
  4683   0026B4  0E32               	movlw	50
  4684   0026B6  5C20               	subwf	left_135@i^0,w,c
  4685   0026B8  A0D8               	btfss	status,0,c
  4686   0026BA  EF61  F013         	goto	u1411
  4687   0026BE  EF63  F013         	goto	u1410
  4688   0026C2                     u1411:
  4689   0026C2  EF32  F013         	goto	l2719
  4690   0026C6                     u1410:
  4691   0026C6                     
  4692                           ;../dc_motor.c: 193:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4693   0026C6  0E13               	movlw	19
  4694   0026C8  6E1F               	movwf	(??_left_135+1)^0,c
  4695   0026CA  0EAC               	movlw	172
  4696   0026CC  6E1E               	movwf	??_left_135^0,c
  4697   0026CE  0E2A               	movlw	42
  4698   0026D0                     u1917:
  4699   0026D0  2EE8               	decfsz	wreg,f,c
  4700   0026D2  D7FE               	bra	u1917
  4701   0026D4  2E1E               	decfsz	??_left_135^0,f,c
  4702   0026D6  D7FC               	bra	u1917
  4703   0026D8  2E1F               	decfsz	(??_left_135+1)^0,f,c
  4704   0026DA  D7FA               	bra	u1917
  4705   0026DC  0012               	return		;funcret
  4706   0026DE                     __end_of_left_135:
  4707                           	callstack 0
  4708                           
  4709 ;; *************** function _initUSART4 *****************
  4710 ;; Defined at:
  4711 ;;		line 5 in file "../serial.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;		None
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;		None
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      void 
  4718 ;; Registers used:
  4719 ;;		wreg, status,2
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4729 ;;Total ram usage:        0 bytes
  4730 ;; Hardware stack levels used: 1
  4731 ;; Hardware stack levels required when called: 1
  4732 ;; This function calls:
  4733 ;;		Nothing
  4734 ;; This function is called by:
  4735 ;;		_main
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text23
  4740   002CC8                     __ptext23:
  4741                           	callstack 0
  4742   002CC8                     _initUSART4:
  4743                           	callstack 29
  4744   002CC8                     
  4745                           ;../serial.c: 9:     RC0PPS = 0x12;
  4746   002CC8  0E12               	movlw	18
  4747   002CCA  010E               	movlb	14	; () banked
  4748   002CCC  6F62               	movwf	98,b	;volatile
  4749                           
  4750                           ;../serial.c: 10:     RX4PPS = 0x11;
  4751   002CCE  0E11               	movlw	17
  4752   002CD0  6F15               	movwf	21,b	;volatile
  4753   002CD2                     
  4754                           ; BSR set to: 14
  4755                           ;../serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  4756   002CD2  97E9               	bcf	233,3,b	;volatile
  4757   002CD4                     
  4758                           ; BSR set to: 14
  4759                           ;../serial.c: 13:     TX4STAbits.BRGH = 0;
  4760   002CD4  95E8               	bcf	232,2,b	;volatile
  4761                           
  4762                           ;../serial.c: 14:     SP4BRGL = 103;
  4763   002CD6  0E67               	movlw	103
  4764   002CD8  6FE5               	movwf	229,b	;volatile
  4765                           
  4766                           ;../serial.c: 15:     SP4BRGH = 0;
  4767   002CDA  0E00               	movlw	0
  4768   002CDC  6FE6               	movwf	230,b	;volatile
  4769   002CDE                     
  4770                           ; BSR set to: 14
  4771                           ;../serial.c: 17:     RC4STAbits.CREN = 1;
  4772   002CDE  89E7               	bsf	231,4,b	;volatile
  4773   002CE0                     
  4774                           ; BSR set to: 14
  4775                           ;../serial.c: 18:     TX4STAbits.TXEN = 1;
  4776   002CE0  8BE8               	bsf	232,5,b	;volatile
  4777   002CE2                     
  4778                           ; BSR set to: 14
  4779                           ;../serial.c: 19:     RC4STAbits.SPEN = 1;
  4780   002CE2  8FE7               	bsf	231,7,b	;volatile
  4781   002CE4                     
  4782                           ; BSR set to: 14
  4783   002CE4  0012               	return		;funcret
  4784   002CE6                     __end_of_initUSART4:
  4785                           	callstack 0
  4786                           
  4787 ;; *************** function _initDCmotorsPWM *****************
  4788 ;; Defined at:
  4789 ;;		line 5 in file "../dc_motor.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  PWMperiod       2    0[COMRAM] int 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;		None
  4794 ;; Return value:  Size  Location     Type
  4795 ;;                  1    wreg      void 
  4796 ;; Registers used:
  4797 ;;		wreg, status,2
  4798 ;; Tracked objects:
  4799 ;;		On entry : 0/0
  4800 ;;		On exit  : 0/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4803 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4806 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4807 ;;Total ram usage:        2 bytes
  4808 ;; Hardware stack levels used: 1
  4809 ;; Hardware stack levels required when called: 1
  4810 ;; This function calls:
  4811 ;;		Nothing
  4812 ;; This function is called by:
  4813 ;;		_main
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           	psect	text24
  4818   002AF2                     __ptext24:
  4819                           	callstack 0
  4820   002AF2                     _initDCmotorsPWM:
  4821                           	callstack 29
  4822   002AF2                     
  4823                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  4824   002AF2  9485               	bcf	133,2,c	;volatile
  4825                           
  4826                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  4827   002AF4  9885               	bcf	133,4,c	;volatile
  4828                           
  4829                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  4830   002AF6  9E83               	bcf	131,7,c	;volatile
  4831                           
  4832                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  4833   002AF8  9C87               	bcf	135,6,c	;volatile
  4834                           
  4835                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  4836   002AFA  947D               	bcf	125,2,c	;volatile
  4837                           
  4838                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  4839   002AFC  987D               	bcf	125,4,c	;volatile
  4840                           
  4841                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  4842   002AFE  9E7B               	bcf	123,7,c	;volatile
  4843                           
  4844                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  4845   002B00  9C7F               	bcf	127,6,c	;volatile
  4846   002B02                     
  4847                           ;../dc_motor.c: 17:     T2CONbits.CKPS=0b0011;
  4848   002B02  50BD               	movf	189,w,c	;volatile
  4849   002B04  0B8F               	andlw	-113
  4850   002B06  0930               	iorlw	48
  4851   002B08  6EBD               	movwf	189,c	;volatile
  4852                           
  4853                           ;../dc_motor.c: 18:     T2HLTbits.MODE=0b00000;
  4854   002B0A  0EE0               	movlw	-32
  4855   002B0C  16BE               	andwf	190,f,c	;volatile
  4856                           
  4857                           ;../dc_motor.c: 19:     T2CLKCONbits.CS=0b0001;
  4858   002B0E  50BF               	movf	191,w,c	;volatile
  4859   002B10  0BF0               	andlw	-16
  4860   002B12  0901               	iorlw	1
  4861   002B14  6EBF               	movwf	191,c	;volatile
  4862   002B16                     
  4863                           ;../dc_motor.c: 23:     T2PR=PWMperiod;
  4864   002B16  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4865   002B1A                     
  4866                           ;../dc_motor.c: 24:     T2CONbits.ON=1;
  4867   002B1A  8EBD               	bsf	189,7,c	;volatile
  4868                           
  4869                           ;../dc_motor.c: 26:     RE2PPS=0x0A;
  4870   002B1C  0E0A               	movlw	10
  4871   002B1E  010E               	movlb	14	; () banked
  4872   002B20  6F74               	movwf	116,b	;volatile
  4873                           
  4874                           ;../dc_motor.c: 27:     RC7PPS=0x0B;
  4875   002B22  0E0B               	movlw	11
  4876   002B24  6F69               	movwf	105,b	;volatile
  4877                           
  4878                           ;../dc_motor.c: 29:     PWM6DCH=0;
  4879   002B26  0E00               	movlw	0
  4880   002B28  6EA3               	movwf	163,c	;volatile
  4881                           
  4882                           ;../dc_motor.c: 30:     PWM7DCH=0;
  4883   002B2A  0E00               	movlw	0
  4884   002B2C  6EA0               	movwf	160,c	;volatile
  4885   002B2E                     
  4886                           ; BSR set to: 14
  4887                           ;../dc_motor.c: 32:     PWM6CONbits.EN = 1;
  4888   002B2E  8EA4               	bsf	164,7,c	;volatile
  4889   002B30                     
  4890                           ; BSR set to: 14
  4891                           ;../dc_motor.c: 33:     PWM7CONbits.EN = 1;
  4892   002B30  8EA1               	bsf	161,7,c	;volatile
  4893   002B32                     
  4894                           ; BSR set to: 14
  4895   002B32  0012               	return		;funcret
  4896   002B34                     __end_of_initDCmotorsPWM:
  4897                           	callstack 0
  4898                           
  4899 ;; *************** function _forward *****************
  4900 ;; Defined at:
  4901 ;;		line 77 in file "../dc_motor.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4904 ;;		 -> main@motorL(9), 
  4905 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4906 ;;		 -> main@motorR(9), 
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  i               2   29[COMRAM] int 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  1    wreg      void 
  4911 ;; Registers used:
  4912 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4918 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4919 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4921 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4922 ;;Total ram usage:        6 bytes
  4923 ;; Hardware stack levels used: 1
  4924 ;; Hardware stack levels required when called: 3
  4925 ;; This function calls:
  4926 ;;		_setMotorPWM
  4927 ;; This function is called by:
  4928 ;;		_main
  4929 ;;		_motor_action_return
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933                           	psect	text25
  4934   00276C                     __ptext25:
  4935                           	callstack 0
  4936   00276C                     _forward:
  4937                           	callstack 27
  4938   00276C                     
  4939                           ;../dc_motor.c: 77: void forward(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c
      +                          : 78: {;../dc_motor.c: 79:     mL->direction = 1;
  4940   00276C  EE20 F001          	lfsr	2,1
  4941   002770  501A               	movf	forward@mL^0,w,c
  4942   002772  26D9               	addwf	fsr2l,f,c
  4943   002774  501B               	movf	(forward@mL+1)^0,w,c
  4944   002776  22DA               	addwfc	fsr2h,f,c
  4945   002778  0E01               	movlw	1
  4946   00277A  6EDF               	movwf	indf2,c
  4947                           
  4948                           ;../dc_motor.c: 80:     mR->direction = 1;
  4949   00277C  EE20 F001          	lfsr	2,1
  4950   002780  501C               	movf	forward@mR^0,w,c
  4951   002782  26D9               	addwf	fsr2l,f,c
  4952   002784  501D               	movf	(forward@mR+1)^0,w,c
  4953   002786  22DA               	addwfc	fsr2h,f,c
  4954   002788  0E01               	movlw	1
  4955   00278A  6EDF               	movwf	indf2,c
  4956   00278C                     
  4957                           ;../dc_motor.c: 81:     for (int i=0;i<31;i=i+2)
  4958   00278C  0E00               	movlw	0
  4959   00278E  6E1F               	movwf	(forward@i+1)^0,c
  4960   002790  0E00               	movlw	0
  4961   002792  6E1E               	movwf	forward@i^0,c
  4962   002794                     l2933:
  4963                           
  4964                           ;../dc_motor.c: 82:     {;../dc_motor.c: 83:         mL->power = i;
  4965   002794  C01A  FFD9         	movff	forward@mL,fsr2l
  4966   002798  C01B  FFDA         	movff	forward@mL+1,fsr2h
  4967   00279C  C01E  FFDF         	movff	forward@i,indf2
  4968                           
  4969                           ;../dc_motor.c: 84:         mR->power = i;
  4970   0027A0  C01C  FFD9         	movff	forward@mR,fsr2l
  4971   0027A4  C01D  FFDA         	movff	forward@mR+1,fsr2h
  4972   0027A8  C01E  FFDF         	movff	forward@i,indf2
  4973   0027AC                     
  4974                           ;../dc_motor.c: 85:         setMotorPWM(mL);
  4975   0027AC  C01A  F00F         	movff	forward@mL,setMotorPWM@m
  4976   0027B0  C01B  F010         	movff	forward@mL+1,setMotorPWM@m+1
  4977   0027B4  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4978   0027B8                     
  4979                           ;../dc_motor.c: 86:         setMotorPWM(mR);
  4980   0027B8  C01C  F00F         	movff	forward@mR,setMotorPWM@m
  4981   0027BC  C01D  F010         	movff	forward@mR+1,setMotorPWM@m+1
  4982   0027C0  ECFB  F00B         	call	_setMotorPWM	;wreg free
  4983   0027C4                     
  4984                           ;../dc_motor.c: 87:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4985   0027C4  0E6A               	movlw	106
  4986   0027C6                     u1927:
  4987   0027C6  2EE8               	decfsz	wreg,f,c
  4988   0027C8  D7FE               	bra	u1927
  4989   0027CA  D000               	nop2	
  4990   0027CC                     
  4991                           ;../dc_motor.c: 88:     }
  4992   0027CC  0E02               	movlw	2
  4993   0027CE  241E               	addwf	forward@i^0,w,c
  4994   0027D0  6E1E               	movwf	forward@i^0,c
  4995   0027D2  0E00               	movlw	0
  4996   0027D4  201F               	addwfc	(forward@i+1)^0,w,c
  4997   0027D6  6E1F               	movwf	(forward@i+1)^0,c
  4998   0027D8  BE1F               	btfsc	(forward@i+1)^0,7,c
  4999   0027DA  EFF8  F013         	goto	u1551
  5000   0027DE  501F               	movf	(forward@i+1)^0,w,c
  5001   0027E0  E109               	bnz	u1550
  5002   0027E2  0E1F               	movlw	31
  5003   0027E4  5C1E               	subwf	forward@i^0,w,c
  5004   0027E6  A0D8               	btfss	status,0,c
  5005   0027E8  EFF8  F013         	goto	u1551
  5006   0027EC  EFFA  F013         	goto	u1550
  5007   0027F0                     u1551:
  5008   0027F0  EFCA  F013         	goto	l2933
  5009   0027F4                     u1550:
  5010   0027F4  0012               	return		;funcret
  5011   0027F6                     __end_of_forward:
  5012                           	callstack 0
  5013                           
  5014 ;; *************** function _setMotorPWM *****************
  5015 ;; Defined at:
  5016 ;;		line 38 in file "../dc_motor.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;  m               2   14[COMRAM] PTR struct DC_motor
  5019 ;;		 -> main@motorR(9), main@motorL(9), 
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  PWMduty         2   23[COMRAM] int 
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  1    wreg      void 
  5024 ;; Registers used:
  5025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5031 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5032 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5033 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5034 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5035 ;;Total ram usage:       11 bytes
  5036 ;; Hardware stack levels used: 1
  5037 ;; Hardware stack levels required when called: 2
  5038 ;; This function calls:
  5039 ;;		___awdiv
  5040 ;;		___wmul
  5041 ;; This function is called by:
  5042 ;;		_main
  5043 ;;		_stop
  5044 ;;		_forward
  5045 ;;		_reverse_fromcard
  5046 ;;		_reverse_onesquare
  5047 ;;		_right_90
  5048 ;;		_left_90
  5049 ;;		_spin_180
  5050 ;;		_right_135
  5051 ;;		_left_135
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           	psect	text26
  5056   0017F6                     __ptext26:
  5057                           	callstack 0
  5058   0017F6                     _setMotorPWM:
  5059                           	callstack 27
  5060   0017F6                     
  5061                           ;../dc_motor.c: 38: void setMotorPWM(struct DC_motor *m);../dc_motor.c: 39: {;../dc_moto
      +                          r.c: 40:  int PWMduty;;../dc_motor.c: 42:  if (m->direction){
  5062   0017F6  EE20 F001          	lfsr	2,1
  5063   0017FA  500F               	movf	setMotorPWM@m^0,w,c
  5064   0017FC  26D9               	addwf	fsr2l,f,c
  5065   0017FE  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5066   001800  22DA               	addwfc	fsr2h,f,c
  5067   001802  50DF               	movf	indf2,w,c
  5068   001804  B4D8               	btfsc	status,2,c
  5069   001806  EF07  F00C         	goto	u1271
  5070   00180A  EF09  F00C         	goto	u1270
  5071   00180E                     u1271:
  5072   00180E  EF3A  F00C         	goto	l2473
  5073   001812                     u1270:
  5074   001812                     
  5075                           ;../dc_motor.c: 44:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  5076   001812  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  5077   001816  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5078   00181A  50DF               	movf	indf2,w,c
  5079   00181C  6E11               	movwf	??_setMotorPWM^0,c
  5080   00181E  5011               	movf	??_setMotorPWM^0,w,c
  5081   001820  6E01               	movwf	___wmul@multiplier^0,c
  5082   001822  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5083   001824  EE20 F007          	lfsr	2,7
  5084   001828  500F               	movf	setMotorPWM@m^0,w,c
  5085   00182A  26D9               	addwf	fsr2l,f,c
  5086   00182C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5087   00182E  22DA               	addwfc	fsr2h,f,c
  5088   001830  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5089   001834  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5090   001838  EC31  F016         	call	___wmul	;wreg free
  5091   00183C  C001  F007         	movff	?___wmul,___awdiv@dividend
  5092   001840  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  5093   001844  0E00               	movlw	0
  5094   001846  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  5095   001848  0E64               	movlw	100
  5096   00184A  6E09               	movwf	___awdiv@divisor^0,c
  5097   00184C  EC22  F010         	call	___awdiv	;wreg free
  5098   001850  EE20 F007          	lfsr	2,7
  5099   001854  500F               	movf	setMotorPWM@m^0,w,c
  5100   001856  26D9               	addwf	fsr2l,f,c
  5101   001858  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5102   00185A  22DA               	addwfc	fsr2h,f,c
  5103   00185C  CFDE F012          	movff	postinc2,??_setMotorPWM+1
  5104   001860  CFDD F013          	movff	postdec2,??_setMotorPWM+2
  5105   001864  5007               	movf	?___awdiv^0,w,c
  5106   001866  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  5107   001868  6E18               	movwf	setMotorPWM@PWMduty^0,c
  5108   00186A  5008               	movf	(?___awdiv+1)^0,w,c
  5109   00186C  5813               	subwfb	(??_setMotorPWM+2)^0,w,c
  5110   00186E  6E19               	movwf	(setMotorPWM@PWMduty+1)^0,c
  5111                           
  5112                           ;../dc_motor.c: 45:  }
  5113   001870  EF5D  F00C         	goto	l2475
  5114   001874                     l2473:
  5115                           
  5116                           ;../dc_motor.c: 48:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  5117   001874  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  5118   001878  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5119   00187C  50DF               	movf	indf2,w,c
  5120   00187E  6E11               	movwf	??_setMotorPWM^0,c
  5121   001880  5011               	movf	??_setMotorPWM^0,w,c
  5122   001882  6E01               	movwf	___wmul@multiplier^0,c
  5123   001884  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5124   001886  EE20 F007          	lfsr	2,7
  5125   00188A  500F               	movf	setMotorPWM@m^0,w,c
  5126   00188C  26D9               	addwf	fsr2l,f,c
  5127   00188E  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5128   001890  22DA               	addwfc	fsr2h,f,c
  5129   001892  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5130   001896  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5131   00189A  EC31  F016         	call	___wmul	;wreg free
  5132   00189E  C001  F007         	movff	?___wmul,___awdiv@dividend
  5133   0018A2  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  5134   0018A6  0E00               	movlw	0
  5135   0018A8  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  5136   0018AA  0E64               	movlw	100
  5137   0018AC  6E09               	movwf	___awdiv@divisor^0,c
  5138   0018AE  EC22  F010         	call	___awdiv	;wreg free
  5139   0018B2  C007  F018         	movff	?___awdiv,setMotorPWM@PWMduty
  5140   0018B6  C008  F019         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  5141   0018BA                     l2475:
  5142                           
  5143                           ;../dc_motor.c: 51:  *(m->dutyHighByte) = PWMduty;
  5144   0018BA  EE20 F002          	lfsr	2,2
  5145   0018BE  500F               	movf	setMotorPWM@m^0,w,c
  5146   0018C0  26D9               	addwf	fsr2l,f,c
  5147   0018C2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5148   0018C4  22DA               	addwfc	fsr2h,f,c
  5149   0018C6  CFDE F011          	movff	postinc2,??_setMotorPWM
  5150   0018CA  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5151   0018CE  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5152   0018D2  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5153   0018D6  C018  FFDF         	movff	setMotorPWM@PWMduty,indf2
  5154   0018DA                     
  5155                           ;../dc_motor.c: 53:  if (m->direction){
  5156   0018DA  EE20 F001          	lfsr	2,1
  5157   0018DE  500F               	movf	setMotorPWM@m^0,w,c
  5158   0018E0  26D9               	addwf	fsr2l,f,c
  5159   0018E2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5160   0018E4  22DA               	addwfc	fsr2h,f,c
  5161   0018E6  50DF               	movf	indf2,w,c
  5162   0018E8  B4D8               	btfsc	status,2,c
  5163   0018EA  EF79  F00C         	goto	u1281
  5164   0018EE  EF7B  F00C         	goto	u1280
  5165   0018F2                     u1281:
  5166   0018F2  EFB0  F00C         	goto	l2481
  5167   0018F6                     u1280:
  5168   0018F6                     
  5169                           ;../dc_motor.c: 54:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  5170   0018F6  EE20 F004          	lfsr	2,4
  5171   0018FA  500F               	movf	setMotorPWM@m^0,w,c
  5172   0018FC  26D9               	addwf	fsr2l,f,c
  5173   0018FE  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5174   001900  22DA               	addwfc	fsr2h,f,c
  5175   001902  CFDE F011          	movff	postinc2,??_setMotorPWM
  5176   001906  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5177   00190A  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5178   00190E  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5179   001912  EE10 F004          	lfsr	1,4
  5180   001916  500F               	movf	setMotorPWM@m^0,w,c
  5181   001918  26E1               	addwf	fsr1l,f,c
  5182   00191A  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5183   00191C  22E2               	addwfc	fsr1h,f,c
  5184   00191E  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  5185   001922  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  5186   001926  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  5187   00192A  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  5188   00192E  50E7               	movf	indf1,w,c
  5189   001930  6E15               	movwf	(??_setMotorPWM+4)^0,c
  5190   001932  EE10 F006          	lfsr	1,6
  5191   001936  500F               	movf	setMotorPWM@m^0,w,c
  5192   001938  26E1               	addwf	fsr1l,f,c
  5193   00193A  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5194   00193C  22E2               	addwfc	fsr1h,f,c
  5195   00193E  50E7               	movf	indf1,w,c
  5196   001940  6E16               	movwf	(??_setMotorPWM+5)^0,c
  5197   001942  0E01               	movlw	1
  5198   001944  6E17               	movwf	(??_setMotorPWM+6)^0,c
  5199   001946  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  5200   001948  EFA8  F00C         	goto	u1294
  5201   00194C                     u1295:
  5202   00194C  90D8               	bcf	status,0,c
  5203   00194E  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  5204   001950                     u1294:
  5205   001950  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  5206   001952  EFA6  F00C         	goto	u1295
  5207   001956  5017               	movf	(??_setMotorPWM+6)^0,w,c
  5208   001958  1015               	iorwf	(??_setMotorPWM+4)^0,w,c
  5209   00195A  6EDF               	movwf	indf2,c
  5210                           
  5211                           ;../dc_motor.c: 55:  } else {
  5212   00195C  EFE4  F00C         	goto	l264
  5213   001960                     l2481:
  5214                           
  5215                           ;../dc_motor.c: 56:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  5216   001960  EE20 F004          	lfsr	2,4
  5217   001964  500F               	movf	setMotorPWM@m^0,w,c
  5218   001966  26D9               	addwf	fsr2l,f,c
  5219   001968  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5220   00196A  22DA               	addwfc	fsr2h,f,c
  5221   00196C  CFDE F011          	movff	postinc2,??_setMotorPWM
  5222   001970  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5223   001974  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5224   001978  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5225   00197C  EE10 F004          	lfsr	1,4
  5226   001980  500F               	movf	setMotorPWM@m^0,w,c
  5227   001982  26E1               	addwf	fsr1l,f,c
  5228   001984  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5229   001986  22E2               	addwfc	fsr1h,f,c
  5230   001988  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  5231   00198C  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  5232   001990  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  5233   001994  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  5234   001998  50E7               	movf	indf1,w,c
  5235   00199A  6E15               	movwf	(??_setMotorPWM+4)^0,c
  5236   00199C  EE10 F006          	lfsr	1,6
  5237   0019A0  500F               	movf	setMotorPWM@m^0,w,c
  5238   0019A2  26E1               	addwf	fsr1l,f,c
  5239   0019A4  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5240   0019A6  22E2               	addwfc	fsr1h,f,c
  5241   0019A8  50E7               	movf	indf1,w,c
  5242   0019AA  6E16               	movwf	(??_setMotorPWM+5)^0,c
  5243   0019AC  0E01               	movlw	1
  5244   0019AE  6E17               	movwf	(??_setMotorPWM+6)^0,c
  5245   0019B0  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  5246   0019B2  EFDD  F00C         	goto	u1304
  5247   0019B6                     u1305:
  5248   0019B6  90D8               	bcf	status,0,c
  5249   0019B8  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  5250   0019BA                     u1304:
  5251   0019BA  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  5252   0019BC  EFDB  F00C         	goto	u1305
  5253   0019C0  5017               	movf	(??_setMotorPWM+6)^0,w,c
  5254   0019C2  0AFF               	xorlw	255
  5255   0019C4  1415               	andwf	(??_setMotorPWM+4)^0,w,c
  5256   0019C6  6EDF               	movwf	indf2,c
  5257   0019C8                     l264:
  5258   0019C8  0012               	return		;funcret
  5259   0019CA                     __end_of_setMotorPWM:
  5260                           	callstack 0
  5261                           
  5262 ;; *************** function ___wmul *****************
  5263 ;; Defined at:
  5264 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;  multiplier      2    0[COMRAM] unsigned int 
  5267 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;  product         2    4[COMRAM] unsigned int 
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  2    0[COMRAM] unsigned int 
  5272 ;; Registers used:
  5273 ;;		wreg, status,2, status,0, prodl, prodh
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5279 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5280 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5282 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5283 ;;Total ram usage:        6 bytes
  5284 ;; Hardware stack levels used: 1
  5285 ;; Hardware stack levels required when called: 1
  5286 ;; This function calls:
  5287 ;;		Nothing
  5288 ;; This function is called by:
  5289 ;;		_setMotorPWM
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293                           	psect	text27
  5294   002C62                     __ptext27:
  5295                           	callstack 0
  5296   002C62                     ___wmul:
  5297                           	callstack 27
  5298   002C62  5001               	movf	___wmul@multiplier^0,w,c
  5299   002C64  0203               	mulwf	___wmul@multiplicand^0,c
  5300   002C66  CFF3 F005          	movff	prodl,___wmul@product
  5301   002C6A  CFF4 F006          	movff	prodh,___wmul@product+1
  5302   002C6E  5001               	movf	___wmul@multiplier^0,w,c
  5303   002C70  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5304   002C72  50F3               	movf	243,w,c
  5305   002C74  2606               	addwf	(___wmul@product+1)^0,f,c
  5306   002C76  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5307   002C78  0203               	mulwf	___wmul@multiplicand^0,c
  5308   002C7A  50F3               	movf	243,w,c
  5309   002C7C  2606               	addwf	(___wmul@product+1)^0,f,c
  5310   002C7E  C005  F001         	movff	___wmul@product,?___wmul
  5311   002C82  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5312   002C86  0012               	return		;funcret
  5313   002C88                     __end_of___wmul:
  5314                           	callstack 0
  5315                           
  5316 ;; *************** function ___awdiv *****************
  5317 ;; Defined at:
  5318 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;  dividend        2    6[COMRAM] int 
  5321 ;;  divisor         2    8[COMRAM] int 
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;  quotient        2   12[COMRAM] int 
  5324 ;;  sign            1   11[COMRAM] unsigned char 
  5325 ;;  counter         1   10[COMRAM] unsigned char 
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  2    6[COMRAM] int 
  5328 ;; Registers used:
  5329 ;;		wreg, status,2, status,0
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5335 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5336 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5338 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5339 ;;Total ram usage:        8 bytes
  5340 ;; Hardware stack levels used: 1
  5341 ;; Hardware stack levels required when called: 1
  5342 ;; This function calls:
  5343 ;;		Nothing
  5344 ;; This function is called by:
  5345 ;;		_setMotorPWM
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text28
  5350   002044                     __ptext28:
  5351                           	callstack 0
  5352   002044                     ___awdiv:
  5353                           	callstack 27
  5354   002044  0E00               	movlw	0
  5355   002046  6E0C               	movwf	___awdiv@sign^0,c
  5356   002048  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
  5357   00204A  EF2B  F010         	goto	u1090
  5358   00204E  EF29  F010         	goto	u1091
  5359   002052                     u1091:
  5360   002052  EF31  F010         	goto	l2351
  5361   002056                     u1090:
  5362   002056  6C09               	negf	___awdiv@divisor^0,c
  5363   002058  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  5364   00205A  B0D8               	btfsc	status,0,c
  5365   00205C  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  5366   00205E  0E01               	movlw	1
  5367   002060  6E0C               	movwf	___awdiv@sign^0,c
  5368   002062                     l2351:
  5369   002062  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
  5370   002064  EF38  F010         	goto	u1100
  5371   002068  EF36  F010         	goto	u1101
  5372   00206C                     u1101:
  5373   00206C  EF3E  F010         	goto	l2357
  5374   002070                     u1100:
  5375   002070  6C07               	negf	___awdiv@dividend^0,c
  5376   002072  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  5377   002074  B0D8               	btfsc	status,0,c
  5378   002076  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  5379   002078  0E01               	movlw	1
  5380   00207A  1A0C               	xorwf	___awdiv@sign^0,f,c
  5381   00207C                     l2357:
  5382   00207C  0E00               	movlw	0
  5383   00207E  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  5384   002080  0E00               	movlw	0
  5385   002082  6E0D               	movwf	___awdiv@quotient^0,c
  5386   002084  5009               	movf	___awdiv@divisor^0,w,c
  5387   002086  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  5388   002088  B4D8               	btfsc	status,2,c
  5389   00208A  EF49  F010         	goto	u1111
  5390   00208E  EF4B  F010         	goto	u1110
  5391   002092                     u1111:
  5392   002092  EF73  F010         	goto	l2379
  5393   002096                     u1110:
  5394   002096  0E01               	movlw	1
  5395   002098  6E0B               	movwf	___awdiv@counter^0,c
  5396   00209A  EF53  F010         	goto	l2365
  5397   00209E                     l2363:
  5398   00209E  90D8               	bcf	status,0,c
  5399   0020A0  3609               	rlcf	___awdiv@divisor^0,f,c
  5400   0020A2  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  5401   0020A4  2A0B               	incf	___awdiv@counter^0,f,c
  5402   0020A6                     l2365:
  5403   0020A6  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  5404   0020A8  EF58  F010         	goto	u1121
  5405   0020AC  EF5A  F010         	goto	u1120
  5406   0020B0                     u1121:
  5407   0020B0  EF4F  F010         	goto	l2363
  5408   0020B4                     u1120:
  5409   0020B4                     l2367:
  5410   0020B4  90D8               	bcf	status,0,c
  5411   0020B6  360D               	rlcf	___awdiv@quotient^0,f,c
  5412   0020B8  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  5413   0020BA  5009               	movf	___awdiv@divisor^0,w,c
  5414   0020BC  5C07               	subwf	___awdiv@dividend^0,w,c
  5415   0020BE  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5416   0020C0  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  5417   0020C2  A0D8               	btfss	status,0,c
  5418   0020C4  EF66  F010         	goto	u1131
  5419   0020C8  EF68  F010         	goto	u1130
  5420   0020CC                     u1131:
  5421   0020CC  EF6D  F010         	goto	l2375
  5422   0020D0                     u1130:
  5423   0020D0  5009               	movf	___awdiv@divisor^0,w,c
  5424   0020D2  5E07               	subwf	___awdiv@dividend^0,f,c
  5425   0020D4  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5426   0020D6  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  5427   0020D8  800D               	bsf	___awdiv@quotient^0,0,c
  5428   0020DA                     l2375:
  5429   0020DA  90D8               	bcf	status,0,c
  5430   0020DC  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  5431   0020DE  3209               	rrcf	___awdiv@divisor^0,f,c
  5432   0020E0  2E0B               	decfsz	___awdiv@counter^0,f,c
  5433   0020E2  EF5A  F010         	goto	l2367
  5434   0020E6                     l2379:
  5435   0020E6  500C               	movf	___awdiv@sign^0,w,c
  5436   0020E8  B4D8               	btfsc	status,2,c
  5437   0020EA  EF79  F010         	goto	u1141
  5438   0020EE  EF7B  F010         	goto	u1140
  5439   0020F2                     u1141:
  5440   0020F2  EF7F  F010         	goto	l2383
  5441   0020F6                     u1140:
  5442   0020F6  6C0D               	negf	___awdiv@quotient^0,c
  5443   0020F8  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  5444   0020FA  B0D8               	btfsc	status,0,c
  5445   0020FC  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  5446   0020FE                     l2383:
  5447   0020FE  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  5448   002102  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  5449   002106  0012               	return		;funcret
  5450   002108                     __end_of___awdiv:
  5451                           	callstack 0
  5452                           
  5453 ;; *************** function _color_read *****************
  5454 ;; Defined at:
  5455 ;;		line 111 in file "../color.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;  rgb             2   11[COMRAM] PTR struct RGB_val
  5458 ;;		 -> main@RGB_recorded(8), main@RGB_calibrated(8), 
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;		None
  5461 ;; Return value:  Size  Location     Type
  5462 ;;                  1    wreg      void 
  5463 ;; Registers used:
  5464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5470 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5472 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5473 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5474 ;;Total ram usage:        4 bytes
  5475 ;; Hardware stack levels used: 1
  5476 ;; Hardware stack levels required when called: 4
  5477 ;; This function calls:
  5478 ;;		_color_read_Blue
  5479 ;;		_color_read_Green
  5480 ;;		_color_read_Luminosity
  5481 ;;		_color_read_Red
  5482 ;; This function is called by:
  5483 ;;		_main
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           	psect	text29
  5488   0021C6                     __ptext29:
  5489                           	callstack 0
  5490   0021C6                     _color_read:
  5491                           	callstack 26
  5492   0021C6                     
  5493                           ;../color.c: 111: void color_read(struct RGB_val *rgb);../color.c: 112: {;../color.c: 11
      +                          3:     rgb->L = color_read_Luminosity();
  5494   0021C6  ECDF  F014         	call	_color_read_Luminosity	;wreg free
  5495   0021CA  C00C  FFD9         	movff	color_read@rgb,fsr2l
  5496   0021CE  C00D  FFDA         	movff	color_read@rgb+1,fsr2h
  5497   0021D2  C005  FFDE         	movff	?_color_read_Luminosity,postinc2
  5498   0021D6  C006  FFDD         	movff	?_color_read_Luminosity+1,postdec2
  5499   0021DA                     
  5500                           ;../color.c: 114:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5501   0021DA  0E09               	movlw	9
  5502   0021DC  6E0F               	movwf	(??_color_read+1)^0,c
  5503   0021DE  0E1E               	movlw	30
  5504   0021E0  6E0E               	movwf	??_color_read^0,c
  5505   0021E2  0EE4               	movlw	228
  5506   0021E4                     u1937:
  5507   0021E4  2EE8               	decfsz	wreg,f,c
  5508   0021E6  D7FE               	bra	u1937
  5509   0021E8  2E0E               	decfsz	??_color_read^0,f,c
  5510   0021EA  D7FC               	bra	u1937
  5511   0021EC  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5512   0021EE  D7FA               	bra	u1937
  5513   0021F0  D000               	nop2	
  5514   0021F2                     
  5515                           ;../color.c: 115:     rgb->R = color_read_Red();
  5516   0021F2  ECB7  F014         	call	_color_read_Red	;wreg free
  5517   0021F6  EE20 F002          	lfsr	2,2
  5518   0021FA  500C               	movf	color_read@rgb^0,w,c
  5519   0021FC  26D9               	addwf	fsr2l,f,c
  5520   0021FE  500D               	movf	(color_read@rgb+1)^0,w,c
  5521   002200  22DA               	addwfc	fsr2h,f,c
  5522   002202  C005  FFDE         	movff	?_color_read_Red,postinc2
  5523   002206  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  5524                           
  5525                           ;../color.c: 116:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5526   00220A  0E09               	movlw	9
  5527   00220C  6E0F               	movwf	(??_color_read+1)^0,c
  5528   00220E  0E1E               	movlw	30
  5529   002210  6E0E               	movwf	??_color_read^0,c
  5530   002212  0EE4               	movlw	228
  5531   002214                     u1947:
  5532   002214  2EE8               	decfsz	wreg,f,c
  5533   002216  D7FE               	bra	u1947
  5534   002218  2E0E               	decfsz	??_color_read^0,f,c
  5535   00221A  D7FC               	bra	u1947
  5536   00221C  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5537   00221E  D7FA               	bra	u1947
  5538   002220  D000               	nop2	
  5539   002222                     
  5540                           ;../color.c: 117:     rgb->G = color_read_Green();
  5541   002222  EC07  F015         	call	_color_read_Green	;wreg free
  5542   002226  EE20 F004          	lfsr	2,4
  5543   00222A  500C               	movf	color_read@rgb^0,w,c
  5544   00222C  26D9               	addwf	fsr2l,f,c
  5545   00222E  500D               	movf	(color_read@rgb+1)^0,w,c
  5546   002230  22DA               	addwfc	fsr2h,f,c
  5547   002232  C005  FFDE         	movff	?_color_read_Green,postinc2
  5548   002236  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  5549   00223A                     
  5550                           ;../color.c: 118:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5551   00223A  0E09               	movlw	9
  5552   00223C  6E0F               	movwf	(??_color_read+1)^0,c
  5553   00223E  0E1E               	movlw	30
  5554   002240  6E0E               	movwf	??_color_read^0,c
  5555   002242  0EE4               	movlw	228
  5556   002244                     u1957:
  5557   002244  2EE8               	decfsz	wreg,f,c
  5558   002246  D7FE               	bra	u1957
  5559   002248  2E0E               	decfsz	??_color_read^0,f,c
  5560   00224A  D7FC               	bra	u1957
  5561   00224C  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5562   00224E  D7FA               	bra	u1957
  5563   002250  D000               	nop2	
  5564                           
  5565                           ;../color.c: 119:     rgb->B = color_read_Blue();
  5566   002252  EC2F  F015         	call	_color_read_Blue	;wreg free
  5567   002256  EE20 F006          	lfsr	2,6
  5568   00225A  500C               	movf	color_read@rgb^0,w,c
  5569   00225C  26D9               	addwf	fsr2l,f,c
  5570   00225E  500D               	movf	(color_read@rgb+1)^0,w,c
  5571   002260  22DA               	addwfc	fsr2h,f,c
  5572   002262  C005  FFDE         	movff	?_color_read_Blue,postinc2
  5573   002266  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  5574   00226A  0012               	return		;funcret
  5575   00226C                     __end_of_color_read:
  5576                           	callstack 0
  5577                           
  5578 ;; *************** function _color_read_Red *****************
  5579 ;; Defined at:
  5580 ;;		line 69 in file "../color.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;		None
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  tmp             2    9[COMRAM] unsigned int 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  2    4[COMRAM] unsigned int 
  5587 ;; Registers used:
  5588 ;;		wreg, status,2, status,0, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5594 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5595 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5596 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5597 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5598 ;;Total ram usage:        7 bytes
  5599 ;; Hardware stack levels used: 1
  5600 ;; Hardware stack levels required when called: 3
  5601 ;; This function calls:
  5602 ;;		_I2C_2_Master_Read
  5603 ;;		_I2C_2_Master_RepStart
  5604 ;;		_I2C_2_Master_Start
  5605 ;;		_I2C_2_Master_Stop
  5606 ;;		_I2C_2_Master_Write
  5607 ;; This function is called by:
  5608 ;;		_color_read
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text30
  5613   00296E                     __ptext30:
  5614                           	callstack 0
  5615   00296E                     _color_read_Red:
  5616                           	callstack 26
  5617   00296E                     
  5618                           ;../color.c: 71:  unsigned int tmp;;../color.c: 72:  I2C_2_Master_Start();
  5619   00296E  EC9A  F016         	call	_I2C_2_Master_Start	;wreg free
  5620                           
  5621                           ;../color.c: 73:  I2C_2_Master_Write(0x52 | 0x00);
  5622   002972  0E52               	movlw	82
  5623   002974  EC8A  F016         	call	_I2C_2_Master_Write
  5624                           
  5625                           ;../color.c: 74:  I2C_2_Master_Write(0xA0 | 0x16);
  5626   002978  0EB6               	movlw	182
  5627   00297A  EC8A  F016         	call	_I2C_2_Master_Write
  5628                           
  5629                           ;../color.c: 75:  I2C_2_Master_RepStart();
  5630   00297E  EC90  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5631                           
  5632                           ;../color.c: 76:  I2C_2_Master_Write(0x52 | 0x01);
  5633   002982  0E53               	movlw	83
  5634   002984  EC8A  F016         	call	_I2C_2_Master_Write
  5635                           
  5636                           ;../color.c: 77:  tmp=I2C_2_Master_Read(1);
  5637   002988  0E01               	movlw	1
  5638   00298A  EC9A  F015         	call	_I2C_2_Master_Read
  5639   00298E  6E07               	movwf	??_color_read_Red^0,c
  5640   002990  5007               	movf	??_color_read_Red^0,w,c
  5641   002992  6E0A               	movwf	color_read_Red@tmp^0,c
  5642   002994  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  5643                           
  5644                           ;../color.c: 78:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5645   002996  0E00               	movlw	0
  5646   002998  EC9A  F015         	call	_I2C_2_Master_Read
  5647   00299C  6E07               	movwf	??_color_read_Red^0,c
  5648   00299E  5007               	movf	??_color_read_Red^0,w,c
  5649   0029A0  6E09               	movwf	(??_color_read_Red+2)^0,c
  5650   0029A2  6A08               	clrf	(??_color_read_Red+1)^0,c
  5651   0029A4  500A               	movf	color_read_Red@tmp^0,w,c
  5652   0029A6  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  5653   0029A8  6E0A               	movwf	color_read_Red@tmp^0,c
  5654   0029AA  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  5655   0029AC  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  5656   0029AE  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5657                           
  5658                           ;../color.c: 79:  I2C_2_Master_Stop();
  5659   0029B0  EC95  F016         	call	_I2C_2_Master_Stop	;wreg free
  5660   0029B4                     
  5661                           ;../color.c: 80:  return tmp;
  5662   0029B4  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5663   0029B8  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5664   0029BC  0012               	return		;funcret
  5665   0029BE                     __end_of_color_read_Red:
  5666                           	callstack 0
  5667                           
  5668 ;; *************** function _color_read_Luminosity *****************
  5669 ;; Defined at:
  5670 ;;		line 55 in file "../color.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;		None
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;  tmp             2    9[COMRAM] unsigned int 
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  2    4[COMRAM] unsigned int 
  5677 ;; Registers used:
  5678 ;;		wreg, status,2, status,0, cstack
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5684 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5685 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5686 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5687 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5688 ;;Total ram usage:        7 bytes
  5689 ;; Hardware stack levels used: 1
  5690 ;; Hardware stack levels required when called: 3
  5691 ;; This function calls:
  5692 ;;		_I2C_2_Master_Read
  5693 ;;		_I2C_2_Master_RepStart
  5694 ;;		_I2C_2_Master_Start
  5695 ;;		_I2C_2_Master_Stop
  5696 ;;		_I2C_2_Master_Write
  5697 ;; This function is called by:
  5698 ;;		_color_read
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           	psect	text31
  5703   0029BE                     __ptext31:
  5704                           	callstack 0
  5705   0029BE                     _color_read_Luminosity:
  5706                           	callstack 26
  5707   0029BE                     
  5708                           ;../color.c: 57:  unsigned int tmp;;../color.c: 58:  I2C_2_Master_Start();
  5709   0029BE  EC9A  F016         	call	_I2C_2_Master_Start	;wreg free
  5710                           
  5711                           ;../color.c: 59:  I2C_2_Master_Write(0x52 | 0x00);
  5712   0029C2  0E52               	movlw	82
  5713   0029C4  EC8A  F016         	call	_I2C_2_Master_Write
  5714                           
  5715                           ;../color.c: 60:  I2C_2_Master_Write(0xA0 | 0x14);
  5716   0029C8  0EB4               	movlw	180
  5717   0029CA  EC8A  F016         	call	_I2C_2_Master_Write
  5718                           
  5719                           ;../color.c: 61:  I2C_2_Master_RepStart();
  5720   0029CE  EC90  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5721                           
  5722                           ;../color.c: 62:  I2C_2_Master_Write(0x52 | 0x01);
  5723   0029D2  0E53               	movlw	83
  5724   0029D4  EC8A  F016         	call	_I2C_2_Master_Write
  5725                           
  5726                           ;../color.c: 63:  tmp=I2C_2_Master_Read(1);
  5727   0029D8  0E01               	movlw	1
  5728   0029DA  EC9A  F015         	call	_I2C_2_Master_Read
  5729   0029DE  6E07               	movwf	??_color_read_Luminosity^0,c
  5730   0029E0  5007               	movf	??_color_read_Luminosity^0,w,c
  5731   0029E2  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5732   0029E4  6A0B               	clrf	(color_read_Luminosity@tmp+1)^0,c
  5733                           
  5734                           ;../color.c: 64:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5735   0029E6  0E00               	movlw	0
  5736   0029E8  EC9A  F015         	call	_I2C_2_Master_Read
  5737   0029EC  6E07               	movwf	??_color_read_Luminosity^0,c
  5738   0029EE  5007               	movf	??_color_read_Luminosity^0,w,c
  5739   0029F0  6E09               	movwf	(??_color_read_Luminosity+2)^0,c
  5740   0029F2  6A08               	clrf	(??_color_read_Luminosity+1)^0,c
  5741   0029F4  500A               	movf	color_read_Luminosity@tmp^0,w,c
  5742   0029F6  1008               	iorwf	(??_color_read_Luminosity+1)^0,w,c
  5743   0029F8  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5744   0029FA  500B               	movf	(color_read_Luminosity@tmp+1)^0,w,c
  5745   0029FC  1009               	iorwf	(??_color_read_Luminosity+2)^0,w,c
  5746   0029FE  6E0B               	movwf	(color_read_Luminosity@tmp+1)^0,c
  5747                           
  5748                           ;../color.c: 65:  I2C_2_Master_Stop();
  5749   002A00  EC95  F016         	call	_I2C_2_Master_Stop	;wreg free
  5750   002A04                     
  5751                           ;../color.c: 66:  return tmp;
  5752   002A04  C00A  F005         	movff	color_read_Luminosity@tmp,?_color_read_Luminosity
  5753   002A08  C00B  F006         	movff	color_read_Luminosity@tmp+1,?_color_read_Luminosity+1
  5754   002A0C  0012               	return		;funcret
  5755   002A0E                     __end_of_color_read_Luminosity:
  5756                           	callstack 0
  5757                           
  5758 ;; *************** function _color_read_Green *****************
  5759 ;; Defined at:
  5760 ;;		line 83 in file "../color.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;		None
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;  tmp             2    9[COMRAM] unsigned int 
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  2    4[COMRAM] unsigned int 
  5767 ;; Registers used:
  5768 ;;		wreg, status,2, status,0, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5774 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5775 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5776 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5777 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5778 ;;Total ram usage:        7 bytes
  5779 ;; Hardware stack levels used: 1
  5780 ;; Hardware stack levels required when called: 3
  5781 ;; This function calls:
  5782 ;;		_I2C_2_Master_Read
  5783 ;;		_I2C_2_Master_RepStart
  5784 ;;		_I2C_2_Master_Start
  5785 ;;		_I2C_2_Master_Stop
  5786 ;;		_I2C_2_Master_Write
  5787 ;; This function is called by:
  5788 ;;		_color_read
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           	psect	text32
  5793   002A0E                     __ptext32:
  5794                           	callstack 0
  5795   002A0E                     _color_read_Green:
  5796                           	callstack 26
  5797   002A0E                     
  5798                           ;../color.c: 85:  unsigned int tmp;;../color.c: 86:  I2C_2_Master_Start();
  5799   002A0E  EC9A  F016         	call	_I2C_2_Master_Start	;wreg free
  5800                           
  5801                           ;../color.c: 87:  I2C_2_Master_Write(0x52 | 0x00);
  5802   002A12  0E52               	movlw	82
  5803   002A14  EC8A  F016         	call	_I2C_2_Master_Write
  5804                           
  5805                           ;../color.c: 88:  I2C_2_Master_Write(0xA0 | 0x18);
  5806   002A18  0EB8               	movlw	184
  5807   002A1A  EC8A  F016         	call	_I2C_2_Master_Write
  5808                           
  5809                           ;../color.c: 89:  I2C_2_Master_RepStart();
  5810   002A1E  EC90  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5811                           
  5812                           ;../color.c: 90:  I2C_2_Master_Write(0x52 | 0x01);
  5813   002A22  0E53               	movlw	83
  5814   002A24  EC8A  F016         	call	_I2C_2_Master_Write
  5815                           
  5816                           ;../color.c: 91:  tmp=I2C_2_Master_Read(1);
  5817   002A28  0E01               	movlw	1
  5818   002A2A  EC9A  F015         	call	_I2C_2_Master_Read
  5819   002A2E  6E07               	movwf	??_color_read_Green^0,c
  5820   002A30  5007               	movf	??_color_read_Green^0,w,c
  5821   002A32  6E0A               	movwf	color_read_Green@tmp^0,c
  5822   002A34  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5823                           
  5824                           ;../color.c: 92:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5825   002A36  0E00               	movlw	0
  5826   002A38  EC9A  F015         	call	_I2C_2_Master_Read
  5827   002A3C  6E07               	movwf	??_color_read_Green^0,c
  5828   002A3E  5007               	movf	??_color_read_Green^0,w,c
  5829   002A40  6E09               	movwf	(??_color_read_Green+2)^0,c
  5830   002A42  6A08               	clrf	(??_color_read_Green+1)^0,c
  5831   002A44  500A               	movf	color_read_Green@tmp^0,w,c
  5832   002A46  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5833   002A48  6E0A               	movwf	color_read_Green@tmp^0,c
  5834   002A4A  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5835   002A4C  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5836   002A4E  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5837                           
  5838                           ;../color.c: 93:  I2C_2_Master_Stop();
  5839   002A50  EC95  F016         	call	_I2C_2_Master_Stop	;wreg free
  5840   002A54                     
  5841                           ;../color.c: 94:  return tmp;
  5842   002A54  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5843   002A58  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5844   002A5C  0012               	return		;funcret
  5845   002A5E                     __end_of_color_read_Green:
  5846                           	callstack 0
  5847                           
  5848 ;; *************** function _color_read_Blue *****************
  5849 ;; Defined at:
  5850 ;;		line 97 in file "../color.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;		None
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;  tmp             2    9[COMRAM] unsigned int 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  2    4[COMRAM] unsigned int 
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5865 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5866 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5867 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5868 ;;Total ram usage:        7 bytes
  5869 ;; Hardware stack levels used: 1
  5870 ;; Hardware stack levels required when called: 3
  5871 ;; This function calls:
  5872 ;;		_I2C_2_Master_Read
  5873 ;;		_I2C_2_Master_RepStart
  5874 ;;		_I2C_2_Master_Start
  5875 ;;		_I2C_2_Master_Stop
  5876 ;;		_I2C_2_Master_Write
  5877 ;; This function is called by:
  5878 ;;		_color_read
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           	psect	text33
  5883   002A5E                     __ptext33:
  5884                           	callstack 0
  5885   002A5E                     _color_read_Blue:
  5886                           	callstack 26
  5887   002A5E                     
  5888                           ;../color.c: 99:  unsigned int tmp;;../color.c: 100:  I2C_2_Master_Start();
  5889   002A5E  EC9A  F016         	call	_I2C_2_Master_Start	;wreg free
  5890                           
  5891                           ;../color.c: 101:  I2C_2_Master_Write(0x52 | 0x00);
  5892   002A62  0E52               	movlw	82
  5893   002A64  EC8A  F016         	call	_I2C_2_Master_Write
  5894                           
  5895                           ;../color.c: 102:  I2C_2_Master_Write(0xA0 | 0x1A);
  5896   002A68  0EBA               	movlw	186
  5897   002A6A  EC8A  F016         	call	_I2C_2_Master_Write
  5898                           
  5899                           ;../color.c: 103:  I2C_2_Master_RepStart();
  5900   002A6E  EC90  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5901                           
  5902                           ;../color.c: 104:  I2C_2_Master_Write(0x52 | 0x01);
  5903   002A72  0E53               	movlw	83
  5904   002A74  EC8A  F016         	call	_I2C_2_Master_Write
  5905                           
  5906                           ;../color.c: 105:  tmp=I2C_2_Master_Read(1);
  5907   002A78  0E01               	movlw	1
  5908   002A7A  EC9A  F015         	call	_I2C_2_Master_Read
  5909   002A7E  6E07               	movwf	??_color_read_Blue^0,c
  5910   002A80  5007               	movf	??_color_read_Blue^0,w,c
  5911   002A82  6E0A               	movwf	color_read_Blue@tmp^0,c
  5912   002A84  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5913                           
  5914                           ;../color.c: 106:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5915   002A86  0E00               	movlw	0
  5916   002A88  EC9A  F015         	call	_I2C_2_Master_Read
  5917   002A8C  6E07               	movwf	??_color_read_Blue^0,c
  5918   002A8E  5007               	movf	??_color_read_Blue^0,w,c
  5919   002A90  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5920   002A92  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5921   002A94  500A               	movf	color_read_Blue@tmp^0,w,c
  5922   002A96  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5923   002A98  6E0A               	movwf	color_read_Blue@tmp^0,c
  5924   002A9A  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5925   002A9C  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5926   002A9E  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5927                           
  5928                           ;../color.c: 107:  I2C_2_Master_Stop();
  5929   002AA0  EC95  F016         	call	_I2C_2_Master_Stop	;wreg free
  5930   002AA4                     
  5931                           ;../color.c: 108:  return tmp;
  5932   002AA4  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5933   002AA8  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5934   002AAC  0012               	return		;funcret
  5935   002AAE                     __end_of_color_read_Blue:
  5936                           	callstack 0
  5937                           
  5938 ;; *************** function _I2C_2_Master_RepStart *****************
  5939 ;; Defined at:
  5940 ;;		line 33 in file "../i2c.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;		None
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;		None
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, status,2, status,0, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5958 ;;Total ram usage:        0 bytes
  5959 ;; Hardware stack levels used: 1
  5960 ;; Hardware stack levels required when called: 2
  5961 ;; This function calls:
  5962 ;;		_I2C_2_Master_Idle
  5963 ;; This function is called by:
  5964 ;;		_color_read_Luminosity
  5965 ;;		_color_read_Red
  5966 ;;		_color_read_Green
  5967 ;;		_color_read_Blue
  5968 ;; This function uses a non-reentrant model
  5969 ;;
  5970                           
  5971                           	psect	text34
  5972   002D20                     __ptext34:
  5973                           	callstack 0
  5974   002D20                     _I2C_2_Master_RepStart:
  5975                           	callstack 26
  5976   002D20                     
  5977                           ;../i2c.c: 35:   I2C_2_Master_Idle();
  5978   002D20  EC1D  F016         	call	_I2C_2_Master_Idle	;wreg free
  5979   002D24                     
  5980                           ;../i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5981   002D24  010E               	movlb	14	; () banked
  5982   002D26  83DA               	bsf	218,1,b	;volatile
  5983   002D28                     
  5984                           ; BSR set to: 14
  5985   002D28  0012               	return		;funcret
  5986   002D2A                     __end_of_I2C_2_Master_RepStart:
  5987                           	callstack 0
  5988                           
  5989 ;; *************** function _I2C_2_Master_Read *****************
  5990 ;; Defined at:
  5991 ;;		line 51 in file "../i2c.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;  ack             1    wreg     unsigned char 
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;  ack             1    2[COMRAM] unsigned char 
  5996 ;;  tmp             1    3[COMRAM] unsigned char 
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  1    wreg      unsigned char 
  5999 ;; Registers used:
  6000 ;;		wreg, status,2, status,0, cstack
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6008 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6009 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6010 ;;Total ram usage:        3 bytes
  6011 ;; Hardware stack levels used: 1
  6012 ;; Hardware stack levels required when called: 2
  6013 ;; This function calls:
  6014 ;;		_I2C_2_Master_Idle
  6015 ;; This function is called by:
  6016 ;;		_color_read_Luminosity
  6017 ;;		_color_read_Red
  6018 ;;		_color_read_Green
  6019 ;;		_color_read_Blue
  6020 ;; This function uses a non-reentrant model
  6021 ;;
  6022                           
  6023                           	psect	text35
  6024   002B34                     __ptext35:
  6025                           	callstack 0
  6026   002B34                     _I2C_2_Master_Read:
  6027                           	callstack 26
  6028                           
  6029                           ; BSR set to: 14
  6030                           ;incstack = 0
  6031                           ;I2C_2_Master_Read@ack stored from wreg
  6032   002B34  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  6033   002B36                     
  6034                           ;../i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);../i2c.c: 52: {;../i2c
      +                          .c: 53:   unsigned char tmp;;../i2c.c: 54:   I2C_2_Master_Idle();
  6035   002B36  EC1D  F016         	call	_I2C_2_Master_Idle	;wreg free
  6036   002B3A                     
  6037                           ;../i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6038   002B3A  010E               	movlb	14	; () banked
  6039   002B3C  87DA               	bsf	218,3,b	;volatile
  6040                           
  6041                           ;../i2c.c: 56:   I2C_2_Master_Idle();
  6042   002B3E  EC1D  F016         	call	_I2C_2_Master_Idle	;wreg free
  6043   002B42                     
  6044                           ;../i2c.c: 57:   tmp = SSP2BUF;
  6045   002B42  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6046                           
  6047                           ;../i2c.c: 58:   I2C_2_Master_Idle();
  6048   002B46  EC1D  F016         	call	_I2C_2_Master_Idle	;wreg free
  6049   002B4A                     
  6050                           ;../i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6051   002B4A  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  6052   002B4C  B4D8               	btfsc	status,2,c
  6053   002B4E  EFAB  F015         	goto	u1251
  6054   002B52  EFAF  F015         	goto	u1250
  6055   002B56                     u1251:
  6056   002B56  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6057   002B58  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  6058   002B5A  EFB0  F015         	goto	u1268
  6059   002B5E                     u1250:
  6060   002B5E  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6061   002B60                     u1268:
  6062   002B60  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  6063   002B62  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  6064   002B64  010E               	movlb	14	; () banked
  6065   002B66  51DA               	movf	218,w,b	;volatile
  6066   002B68  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6067   002B6A  0BDF               	andlw	-33
  6068   002B6C  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6069   002B6E  6FDA               	movwf	218,b	;volatile
  6070   002B70                     
  6071                           ; BSR set to: 14
  6072                           ;../i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6073   002B70  89DA               	bsf	218,4,b	;volatile
  6074   002B72                     
  6075                           ; BSR set to: 14
  6076                           ;../i2c.c: 61:   return tmp;
  6077   002B72  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  6078   002B74                     
  6079                           ; BSR set to: 14
  6080   002B74  0012               	return		;funcret
  6081   002B76                     __end_of_I2C_2_Master_Read:
  6082                           	callstack 0
  6083                           
  6084 ;; *************** function _color_processor_hard *****************
  6085 ;; Defined at:
  6086 ;;		line 152 in file "../color.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  6089 ;;		 -> main@RGB_recorded(8), 
  6090 ;;  calibrated      2    2[COMRAM] PTR unsigned int 
  6091 ;;		 -> main@color_calibrated(64), 
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;  cb              2   19[COMRAM] unsigned int 
  6094 ;;  cg              2   17[COMRAM] unsigned int 
  6095 ;;  cr              2   15[COMRAM] unsigned int 
  6096 ;;  condition_b     1    0        _Bool 
  6097 ;;  condition_g     1    0        _Bool 
  6098 ;;  condition_r     1    0        _Bool 
  6099 ;;  i               2    0        int 
  6100 ;;  b               2   13[COMRAM] unsigned int 
  6101 ;;  g               2   11[COMRAM] unsigned int 
  6102 ;;  r               2    9[COMRAM] unsigned int 
  6103 ;; Return value:  Size  Location     Type
  6104 ;;                  2    0[COMRAM] unsigned int 
  6105 ;; Registers used:
  6106 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6107 ;; Tracked objects:
  6108 ;;		On entry : 0/0
  6109 ;;		On exit  : 0/0
  6110 ;;		Unchanged: 0/0
  6111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6112 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6113 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6115 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6116 ;;Total ram usage:       21 bytes
  6117 ;; Hardware stack levels used: 1
  6118 ;; Hardware stack levels required when called: 1
  6119 ;; This function calls:
  6120 ;;		Nothing
  6121 ;; This function is called by:
  6122 ;;		_main
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           	psect	text36
  6127   001B52                     __ptext36:
  6128                           	callstack 0
  6129   001B52                     _color_processor_hard:
  6130                           	callstack 29
  6131   001B52                     
  6132                           ;../color.c: 152: unsigned int color_processor_hard(struct RGB_val *rgb, unsigned int ca
      +                          librated[]);../color.c: 153: {;../color.c: 154:     unsigned int r = rgb->R;
  6133   001B52  EE20 F002          	lfsr	2,2
  6134   001B56  5001               	movf	color_processor_hard@rgb^0,w,c
  6135   001B58  26D9               	addwf	fsr2l,f,c
  6136   001B5A  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6137   001B5C  22DA               	addwfc	fsr2h,f,c
  6138   001B5E  CFDE F00A          	movff	postinc2,color_processor_hard@r
  6139   001B62  CFDD F00B          	movff	postdec2,color_processor_hard@r+1
  6140                           
  6141                           ;../color.c: 155:     unsigned int g = rgb->G;
  6142   001B66  EE20 F004          	lfsr	2,4
  6143   001B6A  5001               	movf	color_processor_hard@rgb^0,w,c
  6144   001B6C  26D9               	addwf	fsr2l,f,c
  6145   001B6E  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6146   001B70  22DA               	addwfc	fsr2h,f,c
  6147   001B72  CFDE F00C          	movff	postinc2,color_processor_hard@g
  6148   001B76  CFDD F00D          	movff	postdec2,color_processor_hard@g+1
  6149                           
  6150                           ;../color.c: 156:     unsigned int b = rgb->B;
  6151   001B7A  EE20 F006          	lfsr	2,6
  6152   001B7E  5001               	movf	color_processor_hard@rgb^0,w,c
  6153   001B80  26D9               	addwf	fsr2l,f,c
  6154   001B82  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6155   001B84  22DA               	addwfc	fsr2h,f,c
  6156   001B86  CFDE F00E          	movff	postinc2,color_processor_hard@b
  6157   001B8A  CFDD F00F          	movff	postdec2,color_processor_hard@b+1
  6158   001B8E                     
  6159                           ;../color.c: 160:         unsigned int cr = calibrated[4*i+1];
  6160   001B8E  EE20 F002          	lfsr	2,2
  6161   001B92  5003               	movf	color_processor_hard@calibrated^0,w,c
  6162   001B94  26D9               	addwf	fsr2l,f,c
  6163   001B96  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6164   001B98  22DA               	addwfc	fsr2h,f,c
  6165   001B9A  CFDE F010          	movff	postinc2,color_processor_hard@cr
  6166   001B9E  CFDD F011          	movff	postdec2,color_processor_hard@cr+1
  6167                           
  6168                           ;../color.c: 161:         unsigned int cg = calibrated[4*i+2];
  6169   001BA2  EE20 F004          	lfsr	2,4
  6170   001BA6  5003               	movf	color_processor_hard@calibrated^0,w,c
  6171   001BA8  26D9               	addwf	fsr2l,f,c
  6172   001BAA  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6173   001BAC  22DA               	addwfc	fsr2h,f,c
  6174   001BAE  CFDE F012          	movff	postinc2,color_processor_hard@cg
  6175   001BB2  CFDD F013          	movff	postdec2,color_processor_hard@cg+1
  6176                           
  6177                           ;../color.c: 162:         unsigned int cb = calibrated[4*i+3];
  6178   001BB6  EE20 F006          	lfsr	2,6
  6179   001BBA  5003               	movf	color_processor_hard@calibrated^0,w,c
  6180   001BBC  26D9               	addwf	fsr2l,f,c
  6181   001BBE  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6182   001BC0  22DA               	addwfc	fsr2h,f,c
  6183   001BC2  CFDE F014          	movff	postinc2,color_processor_hard@cb
  6184   001BC6  CFDD F015          	movff	postdec2,color_processor_hard@cb+1
  6185   001BCA                     
  6186                           ;../color.c: 164:         _Bool condition_r = r>cr-20 && r<cr+20;
  6187   001BCA  0E00               	movlw	0
  6188   001BCC  6E07               	movwf	_color_processor_hard$370^0,c
  6189   001BCE  0EEC               	movlw	236
  6190   001BD0  2410               	addwf	color_processor_hard@cr^0,w,c
  6191   001BD2  6E05               	movwf	??_color_processor_hard^0,c
  6192   001BD4  0EFF               	movlw	255
  6193   001BD6  2011               	addwfc	(color_processor_hard@cr+1)^0,w,c
  6194   001BD8  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6195   001BDA  500A               	movf	color_processor_hard@r^0,w,c
  6196   001BDC  5C05               	subwf	??_color_processor_hard^0,w,c
  6197   001BDE  500B               	movf	(color_processor_hard@r+1)^0,w,c
  6198   001BE0  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6199   001BE2  B0D8               	btfsc	status,0,c
  6200   001BE4  EFF6  F00D         	goto	u1481
  6201   001BE8  EFF8  F00D         	goto	u1480
  6202   001BEC                     u1481:
  6203   001BEC  EF0B  F00E         	goto	l64
  6204   001BF0                     u1480:
  6205   001BF0  0E14               	movlw	20
  6206   001BF2  2410               	addwf	color_processor_hard@cr^0,w,c
  6207   001BF4  6E05               	movwf	??_color_processor_hard^0,c
  6208   001BF6  0E00               	movlw	0
  6209   001BF8  2011               	addwfc	(color_processor_hard@cr+1)^0,w,c
  6210   001BFA  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6211   001BFC  5005               	movf	??_color_processor_hard^0,w,c
  6212   001BFE  5C0A               	subwf	color_processor_hard@r^0,w,c
  6213   001C00  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6214   001C02  580B               	subwfb	(color_processor_hard@r+1)^0,w,c
  6215   001C04  B0D8               	btfsc	status,0,c
  6216   001C06  EF07  F00E         	goto	u1491
  6217   001C0A  EF09  F00E         	goto	u1490
  6218   001C0E                     u1491:
  6219   001C0E  EF0B  F00E         	goto	l64
  6220   001C12                     u1490:
  6221   001C12  0E01               	movlw	1
  6222   001C14  6E07               	movwf	_color_processor_hard$370^0,c
  6223   001C16                     l64:
  6224                           
  6225                           ;../color.c: 165:         _Bool condition_g = b>cb-20 && b<cb+20;
  6226   001C16  0E00               	movlw	0
  6227   001C18  6E08               	movwf	_color_processor_hard$372^0,c
  6228   001C1A  0EEC               	movlw	236
  6229   001C1C  2414               	addwf	color_processor_hard@cb^0,w,c
  6230   001C1E  6E05               	movwf	??_color_processor_hard^0,c
  6231   001C20  0EFF               	movlw	255
  6232   001C22  2015               	addwfc	(color_processor_hard@cb+1)^0,w,c
  6233   001C24  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6234   001C26  500E               	movf	color_processor_hard@b^0,w,c
  6235   001C28  5C05               	subwf	??_color_processor_hard^0,w,c
  6236   001C2A  500F               	movf	(color_processor_hard@b+1)^0,w,c
  6237   001C2C  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6238   001C2E  B0D8               	btfsc	status,0,c
  6239   001C30  EF1C  F00E         	goto	u1501
  6240   001C34  EF1E  F00E         	goto	u1500
  6241   001C38                     u1501:
  6242   001C38  EF31  F00E         	goto	l66
  6243   001C3C                     u1500:
  6244   001C3C  0E14               	movlw	20
  6245   001C3E  2414               	addwf	color_processor_hard@cb^0,w,c
  6246   001C40  6E05               	movwf	??_color_processor_hard^0,c
  6247   001C42  0E00               	movlw	0
  6248   001C44  2015               	addwfc	(color_processor_hard@cb+1)^0,w,c
  6249   001C46  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6250   001C48  5005               	movf	??_color_processor_hard^0,w,c
  6251   001C4A  5C0E               	subwf	color_processor_hard@b^0,w,c
  6252   001C4C  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6253   001C4E  580F               	subwfb	(color_processor_hard@b+1)^0,w,c
  6254   001C50  B0D8               	btfsc	status,0,c
  6255   001C52  EF2D  F00E         	goto	u1511
  6256   001C56  EF2F  F00E         	goto	u1510
  6257   001C5A                     u1511:
  6258   001C5A  EF31  F00E         	goto	l66
  6259   001C5E                     u1510:
  6260   001C5E  0E01               	movlw	1
  6261   001C60  6E08               	movwf	_color_processor_hard$372^0,c
  6262   001C62                     l66:
  6263                           
  6264                           ;../color.c: 166:         _Bool condition_b = g>cg-20 && g<cg+20;
  6265   001C62  0E00               	movlw	0
  6266   001C64  6E09               	movwf	_color_processor_hard$374^0,c
  6267   001C66  0EEC               	movlw	236
  6268   001C68  2412               	addwf	color_processor_hard@cg^0,w,c
  6269   001C6A  6E05               	movwf	??_color_processor_hard^0,c
  6270   001C6C  0EFF               	movlw	255
  6271   001C6E  2013               	addwfc	(color_processor_hard@cg+1)^0,w,c
  6272   001C70  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6273   001C72  500C               	movf	color_processor_hard@g^0,w,c
  6274   001C74  5C05               	subwf	??_color_processor_hard^0,w,c
  6275   001C76  500D               	movf	(color_processor_hard@g+1)^0,w,c
  6276   001C78  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6277   001C7A  B0D8               	btfsc	status,0,c
  6278   001C7C  EF42  F00E         	goto	u1521
  6279   001C80  EF44  F00E         	goto	u1520
  6280   001C84                     u1521:
  6281   001C84  EF57  F00E         	goto	l68
  6282   001C88                     u1520:
  6283   001C88  0E14               	movlw	20
  6284   001C8A  2412               	addwf	color_processor_hard@cg^0,w,c
  6285   001C8C  6E05               	movwf	??_color_processor_hard^0,c
  6286   001C8E  0E00               	movlw	0
  6287   001C90  2013               	addwfc	(color_processor_hard@cg+1)^0,w,c
  6288   001C92  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6289   001C94  5005               	movf	??_color_processor_hard^0,w,c
  6290   001C96  5C0C               	subwf	color_processor_hard@g^0,w,c
  6291   001C98  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6292   001C9A  580D               	subwfb	(color_processor_hard@g+1)^0,w,c
  6293   001C9C  B0D8               	btfsc	status,0,c
  6294   001C9E  EF53  F00E         	goto	u1531
  6295   001CA2  EF55  F00E         	goto	u1530
  6296   001CA6                     u1531:
  6297   001CA6  EF57  F00E         	goto	l68
  6298   001CAA                     u1530:
  6299   001CAA  0E01               	movlw	1
  6300   001CAC  6E09               	movwf	_color_processor_hard$374^0,c
  6301   001CAE                     l68:
  6302   001CAE                     
  6303                           ;../color.c: 169:             return i;
  6304   001CAE  0E00               	movlw	0
  6305   001CB0  6E02               	movwf	(?_color_processor_hard+1)^0,c
  6306   001CB2  0E00               	movlw	0
  6307   001CB4  6E01               	movwf	?_color_processor_hard^0,c
  6308   001CB6  0012               	return		;funcret
  6309   001CB8                     __end_of_color_processor_hard:
  6310                           	callstack 0
  6311                           
  6312 ;; *************** function _color_processor_easy *****************
  6313 ;; Defined at:
  6314 ;;		line 134 in file "../color.c"
  6315 ;; Parameters:    Size  Location     Type
  6316 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  6317 ;;		 -> main@RGB_recorded(8), 
  6318 ;; Auto vars:     Size  Location     Type
  6319 ;;  b               2    8[COMRAM] unsigned int 
  6320 ;;  a               2    6[COMRAM] unsigned int 
  6321 ;;  c               2    4[COMRAM] unsigned int 
  6322 ;;  color           2    2[COMRAM] unsigned int 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  2    0[COMRAM] unsigned int 
  6325 ;; Registers used:
  6326 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6332 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6333 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6335 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6336 ;;Total ram usage:       10 bytes
  6337 ;; Hardware stack levels used: 1
  6338 ;; Hardware stack levels required when called: 1
  6339 ;; This function calls:
  6340 ;;		Nothing
  6341 ;; This function is called by:
  6342 ;;		_main
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text37
  6347   002108                     __ptext37:
  6348                           	callstack 0
  6349   002108                     _color_processor_easy:
  6350                           	callstack 29
  6351   002108                     
  6352                           ;../color.c: 134: unsigned int color_processor_easy(struct RGB_val *rgb);../color.c: 135
      +                          : {;../color.c: 136:     unsigned int a = rgb->R;
  6353   002108  EE20 F002          	lfsr	2,2
  6354   00210C  5001               	movf	color_processor_easy@rgb^0,w,c
  6355   00210E  26D9               	addwf	fsr2l,f,c
  6356   002110  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6357   002112  22DA               	addwfc	fsr2h,f,c
  6358   002114  CFDE F007          	movff	postinc2,color_processor_easy@a
  6359   002118  CFDD F008          	movff	postdec2,color_processor_easy@a+1
  6360                           
  6361                           ;../color.c: 137:     unsigned int b = rgb->G;
  6362   00211C  EE20 F004          	lfsr	2,4
  6363   002120  5001               	movf	color_processor_easy@rgb^0,w,c
  6364   002122  26D9               	addwf	fsr2l,f,c
  6365   002124  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6366   002126  22DA               	addwfc	fsr2h,f,c
  6367   002128  CFDE F009          	movff	postinc2,color_processor_easy@b
  6368   00212C  CFDD F00A          	movff	postdec2,color_processor_easy@b+1
  6369                           
  6370                           ;../color.c: 138:     unsigned int c = rgb->B;
  6371   002130  EE20 F006          	lfsr	2,6
  6372   002134  5001               	movf	color_processor_easy@rgb^0,w,c
  6373   002136  26D9               	addwf	fsr2l,f,c
  6374   002138  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6375   00213A  22DA               	addwfc	fsr2h,f,c
  6376   00213C  CFDE F005          	movff	postinc2,color_processor_easy@c
  6377   002140  CFDD F006          	movff	postdec2,color_processor_easy@c+1
  6378   002144                     
  6379                           ;../color.c: 139:     unsigned int color;;../color.c: 140:     if (a>=b & a>=c){
  6380   002144  5009               	movf	color_processor_easy@b^0,w,c
  6381   002146  5C07               	subwf	color_processor_easy@a^0,w,c
  6382   002148  500A               	movf	(color_processor_easy@b+1)^0,w,c
  6383   00214A  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6384   00214C  A0D8               	btfss	status,0,c
  6385   00214E  EFAB  F010         	goto	u1441
  6386   002152  EFAD  F010         	goto	u1440
  6387   002156                     u1441:
  6388   002156  EFBE  F010         	goto	l2813
  6389   00215A                     u1440:
  6390   00215A  5005               	movf	color_processor_easy@c^0,w,c
  6391   00215C  5C07               	subwf	color_processor_easy@a^0,w,c
  6392   00215E  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6393   002160  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6394   002162  A0D8               	btfss	status,0,c
  6395   002164  EFB6  F010         	goto	u1451
  6396   002168  EFB8  F010         	goto	u1450
  6397   00216C                     u1451:
  6398   00216C  EFBE  F010         	goto	l2813
  6399   002170                     u1450:
  6400   002170                     
  6401                           ;../color.c: 141:         color=1;
  6402   002170  0E00               	movlw	0
  6403   002172  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6404   002174  0E01               	movlw	1
  6405   002176  6E03               	movwf	color_processor_easy@color^0,c
  6406                           
  6407                           ;../color.c: 142:     }
  6408   002178  EFDE  F010         	goto	l2821
  6409   00217C                     l2813:
  6410   00217C  5007               	movf	color_processor_easy@a^0,w,c
  6411   00217E  5C09               	subwf	color_processor_easy@b^0,w,c
  6412   002180  5008               	movf	(color_processor_easy@a+1)^0,w,c
  6413   002182  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6414   002184  A0D8               	btfss	status,0,c
  6415   002186  EFC7  F010         	goto	u1461
  6416   00218A  EFC9  F010         	goto	u1460
  6417   00218E                     u1461:
  6418   00218E  EFDA  F010         	goto	l2819
  6419   002192                     u1460:
  6420   002192  5005               	movf	color_processor_easy@c^0,w,c
  6421   002194  5C09               	subwf	color_processor_easy@b^0,w,c
  6422   002196  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6423   002198  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6424   00219A  A0D8               	btfss	status,0,c
  6425   00219C  EFD2  F010         	goto	u1471
  6426   0021A0  EFD4  F010         	goto	u1470
  6427   0021A4                     u1471:
  6428   0021A4  EFDA  F010         	goto	l2819
  6429   0021A8                     u1470:
  6430   0021A8                     
  6431                           ;../color.c: 144:         color=2;
  6432   0021A8  0E00               	movlw	0
  6433   0021AA  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6434   0021AC  0E02               	movlw	2
  6435   0021AE  6E03               	movwf	color_processor_easy@color^0,c
  6436                           
  6437                           ;../color.c: 145:     }
  6438   0021B0  EFDE  F010         	goto	l2821
  6439   0021B4                     l2819:
  6440                           
  6441                           ;../color.c: 147:         color=3;
  6442   0021B4  0E00               	movlw	0
  6443   0021B6  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6444   0021B8  0E03               	movlw	3
  6445   0021BA  6E03               	movwf	color_processor_easy@color^0,c
  6446   0021BC                     l2821:
  6447                           
  6448                           ;../color.c: 149:     return color;
  6449   0021BC  C003  F001         	movff	color_processor_easy@color,?_color_processor_easy
  6450   0021C0  C004  F002         	movff	color_processor_easy@color+1,?_color_processor_easy+1
  6451   0021C4  0012               	return		;funcret
  6452   0021C6                     __end_of_color_processor_easy:
  6453                           	callstack 0
  6454                           
  6455 ;; *************** function _color_click_init *****************
  6456 ;; Defined at:
  6457 ;;		line 6 in file "../color.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;		None
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  1    wreg      void 
  6464 ;; Registers used:
  6465 ;;		wreg, status,2, status,0, cstack
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6473 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6474 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6475 ;;Total ram usage:        1 bytes
  6476 ;; Hardware stack levels used: 1
  6477 ;; Hardware stack levels required when called: 4
  6478 ;; This function calls:
  6479 ;;		_I2C_2_Master_Init
  6480 ;;		_color_writetoaddr
  6481 ;; This function is called by:
  6482 ;;		_main
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           	psect	text38
  6487   002870                     __ptext38:
  6488                           	callstack 0
  6489   002870                     _color_click_init:
  6490                           	callstack 26
  6491   002870                     
  6492                           ;../color.c: 9:     I2C_2_Master_Init();
  6493   002870  EC08  F016         	call	_I2C_2_Master_Init	;wreg free
  6494   002874                     
  6495                           ;../color.c: 12:   color_writetoaddr(0x00, 0x01);
  6496   002874  0E01               	movlw	1
  6497   002876  6E03               	movwf	color_writetoaddr@value^0,c
  6498   002878  0E00               	movlw	0
  6499   00287A  EC44  F016         	call	_color_writetoaddr
  6500   00287E                     
  6501                           ;../color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6502   00287E  0E3F               	movlw	63
  6503   002880  6E05               	movwf	??_color_click_init^0,c
  6504   002882  0E55               	movlw	85
  6505   002884                     u1967:
  6506   002884  2EE8               	decfsz	wreg,f,c
  6507   002886  D7FE               	bra	u1967
  6508   002888  2E05               	decfsz	??_color_click_init^0,f,c
  6509   00288A  D7FC               	bra	u1967
  6510   00288C  F000               	nop	
  6511   00288E                     
  6512                           ;../color.c: 16:  color_writetoaddr(0x00, 0x03);
  6513   00288E  0E03               	movlw	3
  6514   002890  6E03               	movwf	color_writetoaddr@value^0,c
  6515   002892  0E00               	movlw	0
  6516   002894  EC44  F016         	call	_color_writetoaddr
  6517   002898                     
  6518                           ;../color.c: 19:  color_writetoaddr(0x01, 0xD5);
  6519   002898  0ED5               	movlw	213
  6520   00289A  6E03               	movwf	color_writetoaddr@value^0,c
  6521   00289C  0E01               	movlw	1
  6522   00289E  EC44  F016         	call	_color_writetoaddr
  6523   0028A2                     
  6524                           ;../color.c: 22:     TRISHbits.TRISH1 = 0;
  6525   0028A2  9288               	bcf	136,1,c	;volatile
  6526   0028A4                     
  6527                           ;../color.c: 23:     TRISDbits.TRISD3 = 0;
  6528   0028A4  9684               	bcf	132,3,c	;volatile
  6529   0028A6                     
  6530                           ;../color.c: 24:     TRISDbits.TRISD4 = 0;
  6531   0028A6  9884               	bcf	132,4,c	;volatile
  6532   0028A8                     
  6533                           ;../color.c: 25:     TRISHbits.TRISH0 = 0;
  6534   0028A8  9088               	bcf	136,0,c	;volatile
  6535   0028AA                     
  6536                           ;../color.c: 26:     TRISFbits.TRISF0 = 0;
  6537   0028AA  9086               	bcf	134,0,c	;volatile
  6538   0028AC                     
  6539                           ;../color.c: 28:     LATHbits.LATH1 = 1;
  6540   0028AC  8280               	bsf	128,1,c	;volatile
  6541   0028AE                     
  6542                           ;../color.c: 29:     LATDbits.LATD3 = 1;
  6543   0028AE  867C               	bsf	124,3,c	;volatile
  6544   0028B0                     
  6545                           ;../color.c: 30:     LATDbits.LATD4 = 0;
  6546   0028B0  987C               	bcf	124,4,c	;volatile
  6547   0028B2                     
  6548                           ;../color.c: 31:     LATHbits.LATH0 = 0;
  6549   0028B2  9080               	bcf	128,0,c	;volatile
  6550   0028B4                     
  6551                           ;../color.c: 32:     LATFbits.LATF0 = 0;
  6552   0028B4  907E               	bcf	126,0,c	;volatile
  6553   0028B6                     
  6554                           ;../color.c: 35:     LATDbits.LATD7=0;
  6555   0028B6  9E7C               	bcf	124,7,c	;volatile
  6556   0028B8                     
  6557                           ;../color.c: 36:     LATHbits.LATH3=0;
  6558   0028B8  9680               	bcf	128,3,c	;volatile
  6559   0028BA                     
  6560                           ;../color.c: 37:     TRISDbits.TRISD7=0;
  6561   0028BA  9E84               	bcf	132,7,c	;volatile
  6562   0028BC                     
  6563                           ;../color.c: 38:     TRISHbits.TRISH3=0;
  6564   0028BC  9688               	bcf	136,3,c	;volatile
  6565   0028BE                     
  6566                           ;../color.c: 40:     TRISFbits.TRISF2=1;
  6567   0028BE  8486               	bsf	134,2,c	;volatile
  6568   0028C0                     
  6569                           ;../color.c: 41:     ANSELFbits.ANSELF2=0;
  6570   0028C0  010E               	movlb	14	; () banked
  6571   0028C2  95B4               	bcf	180,2,b	;volatile
  6572   0028C4                     
  6573                           ; BSR set to: 14
  6574                           ;../color.c: 42:     TRISFbits.TRISF3=1;
  6575   0028C4  8686               	bsf	134,3,c	;volatile
  6576   0028C6                     
  6577                           ; BSR set to: 14
  6578                           ;../color.c: 43:     ANSELFbits.ANSELF3=0;
  6579   0028C6  97B4               	bcf	180,3,b	;volatile
  6580   0028C8                     
  6581                           ; BSR set to: 14
  6582   0028C8  0012               	return		;funcret
  6583   0028CA                     __end_of_color_click_init:
  6584                           	callstack 0
  6585                           
  6586 ;; *************** function _color_writetoaddr *****************
  6587 ;; Defined at:
  6588 ;;		line 46 in file "../color.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;  address         1    wreg     unsigned char 
  6591 ;;  value           1    2[COMRAM] unsigned char 
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;  address         1    3[COMRAM] unsigned char 
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  1    wreg      void 
  6596 ;; Registers used:
  6597 ;;		wreg, status,2, status,0, cstack
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6603 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6604 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6606 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6607 ;;Total ram usage:        2 bytes
  6608 ;; Hardware stack levels used: 1
  6609 ;; Hardware stack levels required when called: 3
  6610 ;; This function calls:
  6611 ;;		_I2C_2_Master_Start
  6612 ;;		_I2C_2_Master_Stop
  6613 ;;		_I2C_2_Master_Write
  6614 ;; This function is called by:
  6615 ;;		_color_click_init
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           	psect	text39
  6620   002C88                     __ptext39:
  6621                           	callstack 0
  6622   002C88                     _color_writetoaddr:
  6623                           	callstack 26
  6624                           
  6625                           ; BSR set to: 14
  6626                           ;incstack = 0
  6627                           ;color_writetoaddr@address stored from wreg
  6628   002C88  6E04               	movwf	color_writetoaddr@address^0,c
  6629   002C8A                     
  6630                           ;../color.c: 46: void color_writetoaddr(char address, char value);../color.c: 47: {;../c
      +                          olor.c: 48:     I2C_2_Master_Start();
  6631   002C8A  EC9A  F016         	call	_I2C_2_Master_Start	;wreg free
  6632                           
  6633                           ;../color.c: 49:     I2C_2_Master_Write(0x52 | 0x00);
  6634   002C8E  0E52               	movlw	82
  6635   002C90  EC8A  F016         	call	_I2C_2_Master_Write
  6636                           
  6637                           ;../color.c: 50:     I2C_2_Master_Write(0x80 | address);
  6638   002C94  5004               	movf	color_writetoaddr@address^0,w,c
  6639   002C96  0980               	iorlw	128
  6640   002C98  EC8A  F016         	call	_I2C_2_Master_Write
  6641                           
  6642                           ;../color.c: 51:     I2C_2_Master_Write(value);
  6643   002C9C  5003               	movf	color_writetoaddr@value^0,w,c
  6644   002C9E  EC8A  F016         	call	_I2C_2_Master_Write
  6645                           
  6646                           ;../color.c: 52:     I2C_2_Master_Stop();
  6647   002CA2  EC95  F016         	call	_I2C_2_Master_Stop	;wreg free
  6648   002CA6  0012               	return		;funcret
  6649   002CA8                     __end_of_color_writetoaddr:
  6650                           	callstack 0
  6651                           
  6652 ;; *************** function _I2C_2_Master_Write *****************
  6653 ;; Defined at:
  6654 ;;		line 45 in file "../i2c.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;  data_byte       1    wreg     unsigned char 
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;  data_byte       1    1[COMRAM] unsigned char 
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      void 
  6661 ;; Registers used:
  6662 ;;		wreg, status,2, status,0, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6669 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6671 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6672 ;;Total ram usage:        1 bytes
  6673 ;; Hardware stack levels used: 1
  6674 ;; Hardware stack levels required when called: 2
  6675 ;; This function calls:
  6676 ;;		_I2C_2_Master_Idle
  6677 ;; This function is called by:
  6678 ;;		_color_writetoaddr
  6679 ;;		_color_read_Luminosity
  6680 ;;		_color_read_Red
  6681 ;;		_color_read_Green
  6682 ;;		_color_read_Blue
  6683 ;; This function uses a non-reentrant model
  6684 ;;
  6685                           
  6686                           	psect	text40
  6687   002D14                     __ptext40:
  6688                           	callstack 0
  6689   002D14                     _I2C_2_Master_Write:
  6690                           	callstack 26
  6691                           
  6692                           ;incstack = 0
  6693                           ;I2C_2_Master_Write@data_byte stored from wreg
  6694   002D14  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6695   002D16                     
  6696                           ;../i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);../i2c.c: 46: {;../i2c.c
      +                          : 47:   I2C_2_Master_Idle();
  6697   002D16  EC1D  F016         	call	_I2C_2_Master_Idle	;wreg free
  6698   002D1A                     
  6699                           ;../i2c.c: 48:   SSP2BUF = data_byte;
  6700   002D1A  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6701   002D1E  0012               	return		;funcret
  6702   002D20                     __end_of_I2C_2_Master_Write:
  6703                           	callstack 0
  6704                           
  6705 ;; *************** function _I2C_2_Master_Stop *****************
  6706 ;; Defined at:
  6707 ;;		line 39 in file "../i2c.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;		None
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;		None
  6712 ;; Return value:  Size  Location     Type
  6713 ;;                  1    wreg      void 
  6714 ;; Registers used:
  6715 ;;		wreg, status,2, status,0, cstack
  6716 ;; Tracked objects:
  6717 ;;		On entry : 0/0
  6718 ;;		On exit  : 0/0
  6719 ;;		Unchanged: 0/0
  6720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6725 ;;Total ram usage:        0 bytes
  6726 ;; Hardware stack levels used: 1
  6727 ;; Hardware stack levels required when called: 2
  6728 ;; This function calls:
  6729 ;;		_I2C_2_Master_Idle
  6730 ;; This function is called by:
  6731 ;;		_color_writetoaddr
  6732 ;;		_color_read_Luminosity
  6733 ;;		_color_read_Red
  6734 ;;		_color_read_Green
  6735 ;;		_color_read_Blue
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           	psect	text41
  6740   002D2A                     __ptext41:
  6741                           	callstack 0
  6742   002D2A                     _I2C_2_Master_Stop:
  6743                           	callstack 26
  6744   002D2A                     
  6745                           ;../i2c.c: 41:   I2C_2_Master_Idle();
  6746   002D2A  EC1D  F016         	call	_I2C_2_Master_Idle	;wreg free
  6747   002D2E                     
  6748                           ;../i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6749   002D2E  010E               	movlb	14	; () banked
  6750   002D30  85DA               	bsf	218,2,b	;volatile
  6751   002D32                     
  6752                           ; BSR set to: 14
  6753   002D32  0012               	return		;funcret
  6754   002D34                     __end_of_I2C_2_Master_Stop:
  6755                           	callstack 0
  6756                           
  6757 ;; *************** function _I2C_2_Master_Start *****************
  6758 ;; Defined at:
  6759 ;;		line 27 in file "../i2c.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;		None
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;		None
  6764 ;; Return value:  Size  Location     Type
  6765 ;;                  1    wreg      void 
  6766 ;; Registers used:
  6767 ;;		wreg, status,2, status,0, cstack
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6777 ;;Total ram usage:        0 bytes
  6778 ;; Hardware stack levels used: 1
  6779 ;; Hardware stack levels required when called: 2
  6780 ;; This function calls:
  6781 ;;		_I2C_2_Master_Idle
  6782 ;; This function is called by:
  6783 ;;		_color_writetoaddr
  6784 ;;		_color_read_Luminosity
  6785 ;;		_color_read_Red
  6786 ;;		_color_read_Green
  6787 ;;		_color_read_Blue
  6788 ;; This function uses a non-reentrant model
  6789 ;;
  6790                           
  6791                           	psect	text42
  6792   002D34                     __ptext42:
  6793                           	callstack 0
  6794   002D34                     _I2C_2_Master_Start:
  6795                           	callstack 26
  6796   002D34                     
  6797                           ;../i2c.c: 29:   I2C_2_Master_Idle();
  6798   002D34  EC1D  F016         	call	_I2C_2_Master_Idle	;wreg free
  6799   002D38                     
  6800                           ;../i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6801   002D38  010E               	movlb	14	; () banked
  6802   002D3A  81DA               	bsf	218,0,b	;volatile
  6803   002D3C                     
  6804                           ; BSR set to: 14
  6805   002D3C  0012               	return		;funcret
  6806   002D3E                     __end_of_I2C_2_Master_Start:
  6807                           	callstack 0
  6808                           
  6809 ;; *************** function _I2C_2_Master_Idle *****************
  6810 ;; Defined at:
  6811 ;;		line 22 in file "../i2c.c"
  6812 ;; Parameters:    Size  Location     Type
  6813 ;;		None
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;		None
  6816 ;; Return value:  Size  Location     Type
  6817 ;;                  1    wreg      void 
  6818 ;; Registers used:
  6819 ;;		wreg, status,2, status,0
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6827 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6828 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6829 ;;Total ram usage:        1 bytes
  6830 ;; Hardware stack levels used: 1
  6831 ;; Hardware stack levels required when called: 1
  6832 ;; This function calls:
  6833 ;;		Nothing
  6834 ;; This function is called by:
  6835 ;;		_I2C_2_Master_Start
  6836 ;;		_I2C_2_Master_RepStart
  6837 ;;		_I2C_2_Master_Stop
  6838 ;;		_I2C_2_Master_Write
  6839 ;;		_I2C_2_Master_Read
  6840 ;; This function uses a non-reentrant model
  6841 ;;
  6842                           
  6843                           	psect	text43
  6844   002C3A                     __ptext43:
  6845                           	callstack 0
  6846   002C3A                     _I2C_2_Master_Idle:
  6847                           	callstack 26
  6848   002C3A                     l101:
  6849   002C3A  010E               	movlb	14	; () banked
  6850   002C3C  B5D8               	btfsc	216,2,b	;volatile
  6851   002C3E  EF23  F016         	goto	u1071
  6852   002C42  EF25  F016         	goto	u1070
  6853   002C46                     u1071:
  6854   002C46  EF1D  F016         	goto	l101
  6855   002C4A                     u1070:
  6856   002C4A                     
  6857                           ; BSR set to: 14
  6858   002C4A  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6859   002C4E  0E1F               	movlw	31
  6860   002C50  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  6861   002C52  A4D8               	btfss	status,2,c
  6862   002C54  EF2E  F016         	goto	u1081
  6863   002C58  EF30  F016         	goto	u1080
  6864   002C5C                     u1081:
  6865   002C5C  EF1D  F016         	goto	l101
  6866   002C60                     u1080:
  6867   002C60                     
  6868                           ; BSR set to: 14
  6869   002C60  0012               	return		;funcret
  6870   002C62                     __end_of_I2C_2_Master_Idle:
  6871                           	callstack 0
  6872                           
  6873 ;; *************** function _I2C_2_Master_Init *****************
  6874 ;; Defined at:
  6875 ;;		line 4 in file "../i2c.c"
  6876 ;; Parameters:    Size  Location     Type
  6877 ;;		None
  6878 ;; Auto vars:     Size  Location     Type
  6879 ;;		None
  6880 ;; Return value:  Size  Location     Type
  6881 ;;                  1    wreg      void 
  6882 ;; Registers used:
  6883 ;;		wreg, status,2
  6884 ;; Tracked objects:
  6885 ;;		On entry : 0/0
  6886 ;;		On exit  : 0/0
  6887 ;;		Unchanged: 0/0
  6888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6893 ;;Total ram usage:        0 bytes
  6894 ;; Hardware stack levels used: 1
  6895 ;; Hardware stack levels required when called: 1
  6896 ;; This function calls:
  6897 ;;		Nothing
  6898 ;; This function is called by:
  6899 ;;		_color_click_init
  6900 ;;		_main
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           	psect	text44
  6905   002C10                     __ptext44:
  6906                           	callstack 0
  6907   002C10                     _I2C_2_Master_Init:
  6908                           	callstack 28
  6909   002C10                     
  6910                           ;../i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6911   002C10  010E               	movlb	14	; () banked
  6912   002C12  51D9               	movf	217,w,b	;volatile
  6913   002C14  0BF0               	andlw	-16
  6914   002C16  0908               	iorlw	8
  6915   002C18  6FD9               	movwf	217,b	;volatile
  6916   002C1A                     
  6917                           ; BSR set to: 14
  6918                           ;../i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6919   002C1A  8BD9               	bsf	217,5,b	;volatile
  6920                           
  6921                           ;../i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6922   002C1C  0E9F               	movlw	159
  6923   002C1E  6FD6               	movwf	214,b	;volatile
  6924   002C20                     
  6925                           ; BSR set to: 14
  6926                           ;../i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6927   002C20  8A84               	bsf	132,5,c	;volatile
  6928   002C22                     
  6929                           ; BSR set to: 14
  6930                           ;../i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6931   002C22  8C84               	bsf	132,6,c	;volatile
  6932   002C24                     
  6933                           ; BSR set to: 14
  6934                           ;../i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6935   002C24  9BA7               	bcf	167,5,b	;volatile
  6936   002C26                     
  6937                           ; BSR set to: 14
  6938                           ;../i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6939   002C26  9DA7               	bcf	167,6,b	;volatile
  6940                           
  6941                           ;../i2c.c: 16:   SSP2DATPPS=0x1D;
  6942   002C28  0E1D               	movlw	29
  6943   002C2A  6F1D               	movwf	29,b	;volatile
  6944                           
  6945                           ;../i2c.c: 17:   SSP2CLKPPS=0x1E;
  6946   002C2C  0E1E               	movlw	30
  6947   002C2E  6F1C               	movwf	28,b	;volatile
  6948                           
  6949                           ;../i2c.c: 18:   RD5PPS=0x1C;
  6950   002C30  0E1C               	movlw	28
  6951   002C32  6F6F               	movwf	111,b	;volatile
  6952                           
  6953                           ;../i2c.c: 19:   RD6PPS=0x1B;
  6954   002C34  0E1B               	movlw	27
  6955   002C36  6F70               	movwf	112,b	;volatile
  6956   002C38                     
  6957                           ; BSR set to: 14
  6958   002C38  0012               	return		;funcret
  6959   002C3A                     __end_of_I2C_2_Master_Init:
  6960                           	callstack 0
  6961                           
  6962 ;; *************** function _Timer0_init *****************
  6963 ;; Defined at:
  6964 ;;		line 62 in file "../rc_servo.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;		None
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;		None
  6969 ;; Return value:  Size  Location     Type
  6970 ;;                  1    wreg      void 
  6971 ;; Registers used:
  6972 ;;		wreg, status,2
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6982 ;;Total ram usage:        0 bytes
  6983 ;; Hardware stack levels used: 1
  6984 ;; Hardware stack levels required when called: 1
  6985 ;; This function calls:
  6986 ;;		Nothing
  6987 ;; This function is called by:
  6988 ;;		_main
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           	psect	text45
  6993   002CA8                     __ptext45:
  6994                           	callstack 0
  6995   002CA8                     _Timer0_init:
  6996                           	callstack 29
  6997   002CA8                     
  6998                           ;../rc_servo.c: 64:     T0CON1bits.T0CS=0b010;
  6999   002CA8  50D6               	movf	214,w,c	;volatile
  7000   002CAA  0B1F               	andlw	-225
  7001   002CAC  0940               	iorlw	64
  7002   002CAE  6ED6               	movwf	214,c	;volatile
  7003   002CB0                     
  7004                           ;../rc_servo.c: 65:     T0CON1bits.T0ASYNC=1;
  7005   002CB0  88D6               	bsf	214,4,c	;volatile
  7006                           
  7007                           ;../rc_servo.c: 66:     T0CON1bits.T0CKPS=0b0111;
  7008   002CB2  50D6               	movf	214,w,c	;volatile
  7009   002CB4  0BF0               	andlw	-16
  7010   002CB6  0907               	iorlw	7
  7011   002CB8  6ED6               	movwf	214,c	;volatile
  7012   002CBA                     
  7013                           ;../rc_servo.c: 68:     T0CON0bits.T016BIT=1;
  7014   002CBA  88D5               	bsf	213,4,c	;volatile
  7015                           
  7016                           ;../rc_servo.c: 71:     TMR0H=(65535-2500)>>8;
  7017   002CBC  0EF6               	movlw	246
  7018   002CBE  6ED4               	movwf	212,c	;volatile
  7019                           
  7020                           ;../rc_servo.c: 72:     TMR0L=(unsigned char)(65535-2500);
  7021   002CC0  0E3B               	movlw	59
  7022   002CC2  6ED3               	movwf	211,c	;volatile
  7023   002CC4                     
  7024                           ;../rc_servo.c: 73:     T0CON0bits.T0EN=1;
  7025   002CC4  8ED5               	bsf	213,7,c	;volatile
  7026   002CC6  0012               	return		;funcret
  7027   002CC8                     __end_of_Timer0_init:
  7028                           	callstack 0
  7029                           
  7030 ;; *************** function _Interrupts_init *****************
  7031 ;; Defined at:
  7032 ;;		line 8 in file "../rc_servo.c"
  7033 ;; Parameters:    Size  Location     Type
  7034 ;;		None
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;		None
  7037 ;; Return value:  Size  Location     Type
  7038 ;;                  1    wreg      void 
  7039 ;; Registers used:
  7040 ;;		None
  7041 ;; Tracked objects:
  7042 ;;		On entry : 0/0
  7043 ;;		On exit  : 0/0
  7044 ;;		Unchanged: 0/0
  7045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7050 ;;Total ram usage:        0 bytes
  7051 ;; Hardware stack levels used: 1
  7052 ;; Hardware stack levels required when called: 1
  7053 ;; This function calls:
  7054 ;;		Nothing
  7055 ;; This function is called by:
  7056 ;;		_main
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           	psect	text46
  7061   002CFE                     __ptext46:
  7062                           	callstack 0
  7063   002CFE                     _Interrupts_init:
  7064                           	callstack 29
  7065   002CFE                     
  7066                           ;../rc_servo.c: 12:     INTCONbits.IPEN = 1;
  7067   002CFE  8AF2               	bsf	242,5,c	;volatile
  7068                           
  7069                           ;../rc_servo.c: 13:     INTCONbits.PEIE = 1;
  7070   002D00  8CF2               	bsf	242,6,c	;volatile
  7071                           
  7072                           ;../rc_servo.c: 16:     PIE0bits.TMR0IE = 1;
  7073   002D02  010E               	movlb	14	; () banked
  7074   002D04  8B29               	bsf	41,5,b	;volatile
  7075                           
  7076                           ;../rc_servo.c: 17:     IPR0bits.TMR0IP = 1;
  7077   002D06  8B1F               	bsf	31,5,b	;volatile
  7078                           
  7079                           ;../rc_servo.c: 18:     PIR0bits.TMR0IF = 0;
  7080   002D08  9B33               	bcf	51,5,b	;volatile
  7081                           
  7082                           ;../rc_servo.c: 20:     PIE2bits.C1IE=1;
  7083   002D0A  812B               	bsf	43,0,b	;volatile
  7084                           
  7085                           ;../rc_servo.c: 21:     IPR2bits.C1IP=0;
  7086   002D0C  9121               	bcf	33,0,b	;volatile
  7087                           
  7088                           ;../rc_servo.c: 22:     PIR2bits.C1IF=0;
  7089   002D0E  9135               	bcf	53,0,b	;volatile
  7090                           
  7091                           ;../rc_servo.c: 24:     INTCONbits.GIE = 1;
  7092   002D10  8EF2               	bsf	242,7,c	;volatile
  7093   002D12                     
  7094                           ; BSR set to: 14
  7095   002D12  0012               	return		;funcret
  7096   002D14                     __end_of_Interrupts_init:
  7097                           	callstack 0
  7098                           
  7099 ;; *************** function _HighISR *****************
  7100 ;; Defined at:
  7101 ;;		line 31 in file "../rc_servo.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;		None
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;		None
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  1    wreg      void 
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7119 ;;Total ram usage:        0 bytes
  7120 ;; Hardware stack levels used: 1
  7121 ;; This function calls:
  7122 ;;		Nothing
  7123 ;; This function is called by:
  7124 ;;		Interrupt level 2
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           	psect	intcode
  7129   000008                     __pintcode:
  7130                           	callstack 0
  7131   000008                     _HighISR:
  7132                           	callstack 22
  7133                           
  7134                           ; BSR set to: 14
  7135                           ;incstack = 0
  7136   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7137   00000A                     
  7138                           ;../rc_servo.c: 33:     if(PIR0bits.TMR0IF||!PORTFbits.RF2){
  7139   00000A  010E               	movlb	14	; () banked
  7140   00000C  BB33               	btfsc	51,5,b	;volatile
  7141   00000E  EF0B  F000         	goto	i2u168_41
  7142   000012  EF0D  F000         	goto	i2u168_40
  7143   000016                     i2u168_41:
  7144   000016  EF14  F000         	goto	i2l3177
  7145   00001A                     i2u168_40:
  7146   00001A                     
  7147                           ; BSR set to: 14
  7148   00001A  B48E               	btfsc	142,2,c	;volatile
  7149   00001C  EF12  F000         	goto	i2u169_41
  7150   000020  EF14  F000         	goto	i2u169_40
  7151   000024                     i2u169_41:
  7152   000024  EF1D  F000         	goto	i2l376
  7153   000028                     i2u169_40:
  7154   000028                     i2l3177:
  7155                           
  7156                           ; BSR set to: 14
  7157                           ;../rc_servo.c: 36:         time++;
  7158   000028  0101               	movlb	1	; () banked
  7159   00002A  4BF4               	infsnz	_time& (0+255),f,b
  7160   00002C  2BF5               	incf	(_time+1)& (0+255),f,b
  7161   00002E                     
  7162                           ; BSR set to: 1
  7163                           ;../rc_servo.c: 39:         TMR0L = 0b11011011;
  7164   00002E  0EDB               	movlw	219
  7165   000030  6ED3               	movwf	211,c	;volatile
  7166   000032                     
  7167                           ; BSR set to: 1
  7168                           ;../rc_servo.c: 40:         TMR0H = 0b00001011;
  7169   000032  0E0B               	movlw	11
  7170   000034  6ED4               	movwf	212,c	;volatile
  7171   000036                     
  7172                           ; BSR set to: 1
  7173                           ;../rc_servo.c: 42:         PIR0bits.TMR0IF=0;
  7174   000036  010E               	movlb	14	; () banked
  7175   000038  9B33               	bcf	51,5,b	;volatile
  7176   00003A                     i2l376:
  7177                           
  7178                           ; BSR set to: 14
  7179   00003A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7180   00003C  0011               	retfie		f
  7181   00003E                     __end_of_HighISR:
  7182                           	callstack 0
  7183                           
  7184                           	psect	rparam
  7185   000000                     
  7186                           	psect	temp
  7187   00005F                     btemp:
  7188                           	callstack 0
  7189   00005F                     	ds	1
  7190   000000                     int$flags	set	btemp
  7191   000000                     wtemp8	set	btemp+1
  7192   000000                     ttemp5	set	btemp+1
  7193   000000                     ttemp6	set	btemp+4
  7194   000000                     ttemp7	set	btemp+8
  7195                           
  7196                           	psect	idloc
  7197                           
  7198                           ;Config register IDLOC0 @ 0x200000
  7199                           ;	unspecified, using default values
  7200   200000                     	org	2097152
  7201   200000  0FFF               	dw	4095
  7202                           
  7203                           ;Config register IDLOC1 @ 0x200002
  7204                           ;	unspecified, using default values
  7205   200002                     	org	2097154
  7206   200002  0FFF               	dw	4095
  7207                           
  7208                           ;Config register IDLOC2 @ 0x200004
  7209                           ;	unspecified, using default values
  7210   200004                     	org	2097156
  7211   200004  0FFF               	dw	4095
  7212                           
  7213                           ;Config register IDLOC3 @ 0x200006
  7214                           ;	unspecified, using default values
  7215   200006                     	org	2097158
  7216   200006  0FFF               	dw	4095
  7217                           
  7218                           ;Config register IDLOC4 @ 0x200008
  7219                           ;	unspecified, using default values
  7220   200008                     	org	2097160
  7221   200008  0FFF               	dw	4095
  7222                           
  7223                           ;Config register IDLOC5 @ 0x20000A
  7224                           ;	unspecified, using default values
  7225   20000A                     	org	2097162
  7226   20000A  0FFF               	dw	4095
  7227                           
  7228                           ;Config register IDLOC6 @ 0x20000C
  7229                           ;	unspecified, using default values
  7230   20000C                     	org	2097164
  7231   20000C  0FFF               	dw	4095
  7232                           
  7233                           ;Config register IDLOC7 @ 0x20000E
  7234                           ;	unspecified, using default values
  7235   20000E                     	org	2097166
  7236   20000E  0FFF               	dw	4095
  7237                           
  7238                           	psect	config
  7239                           
  7240                           ;Config register CONFIG1L @ 0x300000
  7241                           ;	External Oscillator mode Selection bits
  7242                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7243                           ;	Power-up default value for COSC bits
  7244                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7245   300000                     	org	3145728
  7246   300000  AA                 	db	170
  7247                           
  7248                           ;Config register CONFIG1H @ 0x300001
  7249                           ;	unspecified, using default values
  7250                           ;	Clock Out Enable bit
  7251                           ;	CLKOUTEN = 0x1, unprogrammed default
  7252                           ;	Clock Switch Enable bit
  7253                           ;	CSWEN = 0x1, unprogrammed default
  7254                           ;	Fail-Safe Clock Monitor Enable bit
  7255                           ;	FCMEN = 0x1, unprogrammed default
  7256   300001                     	org	3145729
  7257   300001  FF                 	db	255
  7258                           
  7259                           ;Config register CONFIG2L @ 0x300002
  7260                           ;	unspecified, using default values
  7261                           ;	Master Clear Enable bit
  7262                           ;	MCLRE = 0x1, unprogrammed default
  7263                           ;	Power-up Timer Enable bit
  7264                           ;	PWRTE = 0x1, unprogrammed default
  7265                           ;	Low-power BOR enable bit
  7266                           ;	LPBOREN = 0x1, unprogrammed default
  7267                           ;	Brown-out Reset Enable bits
  7268                           ;	BOREN = 0x3, unprogrammed default
  7269   300002                     	org	3145730
  7270   300002  FF                 	db	255
  7271                           
  7272                           ;Config register CONFIG2H @ 0x300003
  7273                           ;	unspecified, using default values
  7274                           ;	Brown Out Reset Voltage selection bits
  7275                           ;	BORV = 0x3, unprogrammed default
  7276                           ;	ZCD Disable bit
  7277                           ;	ZCD = 0x1, unprogrammed default
  7278                           ;	PPSLOCK bit One-Way Set Enable bit
  7279                           ;	PPS1WAY = 0x1, unprogrammed default
  7280                           ;	Stack Full/Underflow Reset Enable bit
  7281                           ;	STVREN = 0x1, unprogrammed default
  7282                           ;	Debugger Enable bit
  7283                           ;	DEBUG = 0x1, unprogrammed default
  7284                           ;	Extended Instruction Set Enable bit
  7285                           ;	XINST = 0x1, unprogrammed default
  7286   300003                     	org	3145731
  7287   300003  FF                 	db	255
  7288                           
  7289                           ;Config register CONFIG3L @ 0x300004
  7290                           ;	WDT Period Select bits
  7291                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7292                           ;	WDT operating mode
  7293                           ;	WDTE = OFF, WDT Disabled
  7294   300004                     	org	3145732
  7295   300004  9F                 	db	159
  7296                           
  7297                           ;Config register CONFIG3H @ 0x300005
  7298                           ;	unspecified, using default values
  7299                           ;	WDT Window Select bits
  7300                           ;	WDTCWS = 0x7, unprogrammed default
  7301                           ;	WDT input clock selector
  7302                           ;	WDTCCS = 0x7, unprogrammed default
  7303   300005                     	org	3145733
  7304   300005  FF                 	db	255
  7305                           
  7306                           ;Config register CONFIG4L @ 0x300006
  7307                           ;	unspecified, using default values
  7308                           ;	Write Protection Block 0
  7309                           ;	WRT0 = 0x1, unprogrammed default
  7310                           ;	Write Protection Block 1
  7311                           ;	WRT1 = 0x1, unprogrammed default
  7312                           ;	Write Protection Block 2
  7313                           ;	WRT2 = 0x1, unprogrammed default
  7314                           ;	Write Protection Block 3
  7315                           ;	WRT3 = 0x1, unprogrammed default
  7316                           ;	Write Protection Block 3
  7317                           ;	WRT4 = 0x1, unprogrammed default
  7318                           ;	Write Protection Block 3
  7319                           ;	WRT5 = 0x1, unprogrammed default
  7320                           ;	Write Protection Block 3
  7321                           ;	WRT6 = 0x1, unprogrammed default
  7322                           ;	Write Protection Block 3
  7323                           ;	WRT7 = 0x1, unprogrammed default
  7324   300006                     	org	3145734
  7325   300006  FF                 	db	255
  7326                           
  7327                           ;Config register CONFIG4H @ 0x300007
  7328                           ;	unspecified, using default values
  7329                           ;	Configuration Register Write Protection bit
  7330                           ;	WRTC = 0x1, unprogrammed default
  7331                           ;	Boot Block Write Protection bit
  7332                           ;	WRTB = 0x1, unprogrammed default
  7333                           ;	Data EEPROM Write Protection bit
  7334                           ;	WRTD = 0x1, unprogrammed default
  7335                           ;	Scanner Enable bit
  7336                           ;	SCANE = 0x1, unprogrammed default
  7337                           ;	Low Voltage Programming Enable bit
  7338                           ;	LVP = 0x1, unprogrammed default
  7339   300007                     	org	3145735
  7340   300007  FF                 	db	255
  7341                           
  7342                           ;Config register CONFIG5L @ 0x300008
  7343                           ;	unspecified, using default values
  7344                           ;	UserNVM Program Memory Code Protection bit
  7345                           ;	CP = 0x1, unprogrammed default
  7346                           ;	DataNVM Memory Code Protection bit
  7347                           ;	CPD = 0x1, unprogrammed default
  7348   300008                     	org	3145736
  7349   300008  FF                 	db	255
  7350                           
  7351                           ;Config register CONFIG5H @ 0x300009
  7352                           ;	unspecified, using default values
  7353   300009                     	org	3145737
  7354   300009  FF                 	db	255
  7355                           
  7356                           ;Config register CONFIG6L @ 0x30000A
  7357                           ;	unspecified, using default values
  7358                           ;	Table Read Protection Block 0
  7359                           ;	EBTR0 = 0x1, unprogrammed default
  7360                           ;	Table Read Protection Block 1
  7361                           ;	EBTR1 = 0x1, unprogrammed default
  7362                           ;	Table Read Protection Block 2
  7363                           ;	EBTR2 = 0x1, unprogrammed default
  7364                           ;	Table Read Protection Block 3
  7365                           ;	EBTR3 = 0x1, unprogrammed default
  7366                           ;	Table Read Protection Block 4
  7367                           ;	EBTR4 = 0x1, unprogrammed default
  7368                           ;	Table Read Protection Block 5
  7369                           ;	EBTR5 = 0x1, unprogrammed default
  7370                           ;	Table Read Protection Block 6
  7371                           ;	EBTR6 = 0x1, unprogrammed default
  7372                           ;	Table Read Protection Block 7
  7373                           ;	EBTR7 = 0x1, unprogrammed default
  7374   30000A                     	org	3145738
  7375   30000A  FF                 	db	255
  7376                           
  7377                           ;Config register CONFIG6H @ 0x30000B
  7378                           ;	unspecified, using default values
  7379                           ;	Boot Block Table Read Protection bit
  7380                           ;	EBTRB = 0x1, unprogrammed default
  7381   30000B                     	org	3145739
  7382   30000B  FF                 	db	255
  7383                           tosu	equ	0xFFF
  7384                           tosh	equ	0xFFE
  7385                           tosl	equ	0xFFD
  7386                           stkptr	equ	0xFFC
  7387                           pclatu	equ	0xFFB
  7388                           pclath	equ	0xFFA
  7389                           pcl	equ	0xFF9
  7390                           tblptru	equ	0xFF8
  7391                           tblptrh	equ	0xFF7
  7392                           tblptrl	equ	0xFF6
  7393                           tablat	equ	0xFF5
  7394                           prodh	equ	0xFF4
  7395                           prodl	equ	0xFF3
  7396                           indf0	equ	0xFEF
  7397                           postinc0	equ	0xFEE
  7398                           postdec0	equ	0xFED
  7399                           preinc0	equ	0xFEC
  7400                           plusw0	equ	0xFEB
  7401                           fsr0h	equ	0xFEA
  7402                           fsr0l	equ	0xFE9
  7403                           wreg	equ	0xFE8
  7404                           indf1	equ	0xFE7
  7405                           postinc1	equ	0xFE6
  7406                           postdec1	equ	0xFE5
  7407                           preinc1	equ	0xFE4
  7408                           plusw1	equ	0xFE3
  7409                           fsr1h	equ	0xFE2
  7410                           fsr1l	equ	0xFE1
  7411                           bsr	equ	0xFE0
  7412                           indf2	equ	0xFDF
  7413                           postinc2	equ	0xFDE
  7414                           postdec2	equ	0xFDD
  7415                           preinc2	equ	0xFDC
  7416                           plusw2	equ	0xFDB
  7417                           fsr2h	equ	0xFDA
  7418                           fsr2l	equ	0xFD9
  7419                           status	equ	0xFD8

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     92      94
    BANK0           160    159     160
    BANK1           256    240     252
    BANK2           256      0     112
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2389$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2336$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2336$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    motor_action@r	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_action@l	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    spin_180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    spin_180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_onesquare@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_onesquare@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_fromcard@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_fromcard@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    S589DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    S589DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    color_processor_hard@calibrated	PTR unsigned int  size(2) Largest target is 64
		 -> main@color_calibrated(BANK1[64]), 

    color_processor_hard@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_processor_easy@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_read@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), main@RGB_calibrated(BANK1[8]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _motor_action->_left_135
    _motor_action->_left_90
    _motor_action->_reverse_fromcard
    _motor_action->_reverse_onesquare
    _motor_action->_right_135
    _motor_action->_right_90
    _motor_action->_spin_180
    _stop->_setMotorPWM
    _spin_180->_setMotorPWM
    _right_90->_setMotorPWM
    _right_135->_setMotorPWM
    _reverse_onesquare->_setMotorPWM
    _reverse_fromcard->_setMotorPWM
    _left_90->_setMotorPWM
    _left_135->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _color_read->_color_read_Blue
    _color_read->_color_read_Green
    _color_read->_color_read_Luminosity
    _color_read->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Luminosity->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               385   385      0   55876
                                             88 COMRAM     4     4      0
                                             27 BANK0    132   132      0
                                              0 BANK1    240   240      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
               _color_processor_easy
               _color_processor_hard
                         _color_read
                            _forward
                    _initDCmotorsPWM
                         _initUSART4
                       _motor_action
                  _sendStringSerial4
                        _setMotorPWM
                           _spin_180
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    5722
                                              0 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5219
                                             80 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    4869
                                             62 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3649
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     219
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _motor_action                                         8     2      6   30862
                                             33 COMRAM     8     2      6
                           _left_135
                            _left_90
                   _reverse_fromcard
                  _reverse_onesquare
                          _right_135
                           _right_90
                           _spin_180
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 7     3      4    5075
                                             25 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _spin_180                                             8     4      4    3403
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_90                                             8     4      4    3555
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_135                                            8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_onesquare                                    8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_fromcard                                     8     4      4    4163
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_90                                              8     4      4    3555
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_135                                             8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                              6     2      4    3555
                                             25 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    2703
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read                                           4     2      2     768
                                             11 COMRAM     4     2      2
                    _color_read_Blue
                   _color_read_Green
              _color_read_Luminosity
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Luminosity                                7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_processor_hard                                26    22      4     829
                                              0 COMRAM    21    17      4
 ---------------------------------------------------------------------------------
 (1) _color_processor_easy                                10     8      2     346
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_processor_easy
   _color_processor_hard
   _color_read
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Luminosity
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _motor_action
     _left_135
       _setMotorPWM
     _left_90
       _setMotorPWM
     _reverse_fromcard
       _setMotorPWM
     _reverse_onesquare
       _setMotorPWM
     _right_135
       _setMotorPWM
     _right_90
       _setMotorPWM
     _spin_180
       _setMotorPWM
     _stop
       _setMotorPWM
   _sendStringSerial4
     _sendCharSerial4
   _setMotorPWM
   _spin_180
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
   _stop

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      60        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      70       9       43.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     F0      FC       7       98.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      A0       5      100.0%
BITBIGSFRllllhh     91      0       0      40        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5C      5E       1      100.0%
BITBIGSFRllllll     32      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      49        0.0%
BITBIGSFRllllll     26      0       0      58        0.0%
BITBIGSFRllllhl     20      0       0      43        0.0%
BITBIGSFRhhlhhh     1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      35        0.0%
BITBIGSFRhhlhl      13      0       0      34        0.0%
BITBIGSFRhllh       11      0       0      37        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      44        0.0%
BITBIGSFRllllhh      8      0       0      41        0.0%
BITBIGSFRllllll      7      0       0      54        0.0%
BITBIGSFRllllll      7      0       0      52        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRllllll      6      0       0      48        0.0%
BITBIGSFRllllll      5      0       0      47        0.0%
BITBIGSFRhlll        5      0       0      38        0.0%
BITBIGSFRllllll      3      0       0      46        0.0%
BITBIGSFRllh         2      0       0      39        0.0%
BITBIGSFRllllll      1      0       0      50        0.0%
BITBIGSFRllllll      1      0       0      51        0.0%
BITBIGSFRllllll      1      0       0      55        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      56        0.0%
BITBIGSFRllllhl      1      0       0      42        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26A      59        0.0%
DATA                 0      0     26A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Dec 10 22:45:13 2022

                _color_read_Red 296E                 _color_read_Blue 2A5E                              l33 28C8  
                            l42 29BC                              l51 226A                              l36 2CA6  
                            l45 2A5C                              l70 1CB6                              l39 2A0C  
                            l64 1C16                              l48 2AAC                              l58 21C4  
                            l66 1C62                              l68 1CAE                              l98 2C38  
                  ___awdiv@sign 000C             ___wmul@multiplicand 0003                _color_read_Green 2A0E  
             ??_Interrupts_init 0001                             l101 2C3A                             l110 2D28  
                           l104 2C60                             l200 1060                             l113 2D32  
                           l201 1074                             l210 1270                             l107 2D3C  
                           l116 2D1E                             l119 2B74                             l304 24F6  
                           l322 17F4                             l420 2CE4                             l309 26DC  
                           l264 19C8                             l432 2CFC                             l441 2C86  
                           l257 2B32                             l193 0E96                             l274 27F4  
                           l284 2598                             l269 276A                             l429 2CE8  
                           l197 1022                             l294 23B2                             l438 2BE4  
                           l279 263A                             l368 2D12                             l289 230E  
                           l379 2CC6                             l299 2454                             l555 1B50  
                           l672 2106                             l568 1E1A               motor_action@color 0022  
                           u900 2AF0                             u901 2AEC                             u910 19DC  
                           u911 19D8                             u920 1A0E                             u921 1A0A  
                           u931 1A38                             u940 1A5C                             u860 1F8C  
                           u941 1A58                             u861 1F88                             u950 1A86  
                           u870 1F9E                             u951 1A82                             u871 1F9A  
                           u960 1AC6                             u880 1FC6                             u961 1AC2  
                           u881 1FC2                             u970 1B10                             u890 1FFC  
                           u971 1B0C                             u891 1FF8                             u980 1CCA  
                           u981 1CC6                             u990 1CFC                             u991 1CF8  
                           _abs 2B76                             _pad 27F6                             wreg 000FE8  
                          ?_abs 0013                            l1204 2AF0                            l1141 2818  
                          l1150 13B6                            l1207 2D3E                            l1119 291A  
                          l1152 13BE                            l1145 286E                            l1153 1404  
                          l3001 0E34                            l1171 1F78                            l3011 0E52  
                          l3003 0E3A                            l1164 15A6                            l2301 1D92  
                          l1181 2BAC                            l2221 1FC6                            l2213 1F7A  
                          l3101 1204                            l3021 0E7E                            l3013 0E5A  
                          l3005 0E3E                            l2311 1DFA                            l2303 1DB2  
                          l2223 1FFC                            l2215 1F8C                            l2231 2ACC  
                          l3103 121C                            l3031 0EAE                            l3023 0E8A  
                          l3015 0E5E                            l3007 0E46                            l1184 2BB4  
                          l2241 19FC                            l2305 1DC4                            l2217 1F9E  
                          l2233 2AD0                            l2321 2824                            l2401 13D6  
                          l1177 296C                            l3121 12D8                            l3113 1272  
                          l3105 1232                            l3041 0F8A                            l3033 0EBA  
                          l3025 0EA4                            l3017 0E72                            l3009 0E4E  
                          l2251 1A3E                            l2243 1A00                            l2235 19CA  
                          l2307 1DCA                            l2331 2B90                            l2219 1FA8  
                          l2227 2AAE                            l2323 2838                            l2315 27F6  
                          l2411 140C                            l2403 13DC                            l3123 12DE  
                          l3115 127A                            l3107 1246                            l3051 0FE8  
                          l3043 0F8C                            l3035 0EE8                            l3019 0E76  
                          l1196 2042                            l2333 2C3A                            l2261 1A98  
                          l2253 1A5C                            l2245 1A0E                            l2237 19CE  
                          l2309 1DDA                            l2229 2ABA                            l2325 283C  
                          l2317 2804                            l2421 14AA                            l2413 1416  
                          l2405 13EC                            l3125 1308                            l3117 12A8  
                          l3109 1250                            l3061 107A                            l3053 1000  
                          l3045 0FC2                            l3037 0F1E                            l2335 2C4A  
                          l2351 2062                            l2343 2044                            l3207 17B6  
                          l2263 1AC6                            l2255 1A64                            l2271 1B00  
                          l2247 1A2E                            l2239 19DC                            l2327 285A  
                          l2319 2810                            l2431 1570                            l2415 141C  
                          l2423 150E                            l2407 13F8                            l2503 1F3A  
                          l3127 131C                            l3119 12C0                            l3071 10D6  
                          l3063 1082                            l3055 1006                            l3047 0FCE  
                          l3039 0F54                            l2521 2C24                            l2513 2C10  
                          l2441 2D38                            l2361 2096                            l2353 2070  
                          l2345 2048                            l2337 2C62                            l2273 1B10  
                          l2265 1AE6                            l2257 1A78                            l2249 1A32  
                          l2281 1CBC                            l2329 2B76                            l2433 1576  
                          l2425 1528                            l2417 149E                            l2409 1400  
                          l3081 111E                            l3073 10DE                            l3065 1096  
                          l3057 1032                            l3049 0FE6                            l2523 2C26  
                          l2515 2C1A                            l2443 2D16                            l2451 2D20  
                          l2371 20D0                            l2363 209E                            l2355 2078  
                          l2347 2056                            l2339 2C7E                            l2611 25FA  
                          l2603 25C2                            l2275 1B30                            l2267 1AE8  
                          l2259 1A86                            l2291 1D1C                            l2283 1CCA  
                          l2435 1586                            l2427 1546                            l2419 14A4  
                          l2507 1F4C                            l3091 11C6                            l3083 1136  
                          l3075 10F0                            l3067 10A2                            l3059 106E  
                          l2517 2C20                            l2445 2D1A                            l2525 2C8A  
                          l2461 2B4A                            l2453 2D24                            l2541 2A54  
                          l2533 296E                            l2381 20F6                            l2373 20D8  
                          l2365 20A6                            l2357 207C                            l2349 205E  
                          l2613 2606                            l2605 25DA                            l2701 24A4  
                          l2269 1AFA                            l2293 1D3A                            l2285 1CEA  
                          l2429 1560                            l3093 11D2                            l3085 1152  
                          l3077 1104                            l3069 10BA                            l2519 2C22  
                          l2439 2D34                            l2447 2D2A                            l2463 2B70  
                          l2455 2B36                            l2527 29BE                            l2535 29B4  
                          l2383 20FE                            l2375 20DA                            l2367 20B4  
                          l2359 2084                            l2471 1812                            l2711 263C  
                          l2615 2622                            l2607 25E6                            l2631 2550  
                          l2703 24B0                            l2551 26DE                            l2295 1D42  
                          l2287 1CEE                            l2279 1CB8                            l2391 135E  
                          l3095 11EE                            l3087 116E                            l3079 1110  
                          l2449 2D2E                            l2465 2B72                            l2457 2B3A  
                          l2545 2A5E                            l2529 2A04                            l2801 2222  
                          l2377 20E0                            l2369 20BA                            l2481 1960  
                          l2473 1874                            l2721 2672                            l2713 265C  
                          l2609 25F2                            l2633 2558                            l2625 2520  
                          l2617 24F8                            l2705 24B8                            l2641 228C  
                          l2561 271E                            l2553 26FE                            l2297 1D56  
                          l2289 1CFC                            l2393 136E                            l3097 11F4  
                          l3089 1188                            l2811 2170                            l2459 2B42  
                          l2547 2AA4                            l2539 2A0E                            l2803 223A  
                          l2379 20E6                            l2475 18BA                            l2731 26AA  
                          l2723 267E                            l2635 2564                            l2627 2538  
                          l2619 2518                            l2707 24C4                            l2651 22AE  
                          l2571 23B4                            l2563 272A                            l2299 1D64  
                          l2395 138E                            l2387 132A                            l2491 1E64  
                          l2483 1E1C                            l3099 11FC                            l2821 21BC  
                          l2813 217C                            l2805 2108                            l2477 18DA  
                          l2469 17F6                            l2901 2CE0                            l2733 26C6  
                          l2725 268A                            l2637 2580                            l2629 2544  
                          l2709 24E0                            l2661 22F6                            l2653 22BA  
                          l2581 23E8                            l2573 23D4                            l2565 2736  
                          l2397 13AA                            l2389 134A                            l2493 1E74  
                          l2485 1E44                            l2741 2928                            l2751 2874  
                          l2815 2192                            l2807 2144                            l2479 18F6  
                          l2903 2CE2                            l2727 2696                            l2719 2664  
                          l2671 2338                            l2663 2310                            l2655 22C6  
                          l2647 2294                            l2639 226C                            l2591 2422  
                          l2583 23F6                            l2567 2744                            l2559 2706  
                          l2735 2CE8                            l2399 13C6                            l2495 1E94  
                          l2487 1E52                            l2743 2944                            l2911 28EC  
                          l2761 28A4                            l2753 287E                            l2817 21A8  
                          l2809 215A                            l2841 1C12                            l2833 1B8E  
                          l2825 1B52                            l2729 269E                            l2681 2372  
                          l2673 2346                            l2665 2330                            l2657 22CE  
                          l2649 22A0                            l2593 243E                            l2585 2402  
                          l2569 2750                            l2737 2CF8                            l2921 2BC8  
                          l2497 1EB4                            l2489 1E60                            l2745 2964  
                          l2913 2908                            l2905 28CA                            l2771 28AE  
                          l2763 28A6                            l2755 288E                            l2819 21B4  
                          l2851 1C88                            l2843 1C1A                            l2835 1BCA  
                          l2827 1B8E                            l2683 237E                            l2675 2352  
                          l2595 259A                            l2659 22DA                            l2587 240E  
                          l2579 23DC                            l2923 2BCC                            l2499 1F0A  
                          l2739 291C                            l2907 28DC                            l2781 28B8  
                          l2773 28B0                            l2765 28A8                            l2757 2898  
                          l2749 2870                            l2853 1CAA                            l2845 1C3C  
                          l2837 1BCE                            l2941 27CC                            l2933 2794  
                          l2925 276C                            l2685 239A                            l2677 235E  
                          l2597 25BA                            l2589 2416                            l2917 2BB6  
                          l2909 28E4                            ?_pad 0011                            l2791 28C4  
                          l2783 28BA                            l2775 28B2                            l2767 28AA  
                          l2759 28A2                            l2847 1C5E                            l2839 1BF0  
                          l2943 27D8                            l2935 27AC                            l2927 278C  
                          l2871 2AF2                            l2679 236A                            l2695 247E  
                          l2687 2456                            l2951 15EC                            l2919 2BBA  
                          l2793 28C6                            l2785 28BC                            l2777 28B4  
                          l2769 28AC                            l2849 1C66                            l2937 27B8  
                          l2881 2B30                            l2873 2B02                            l2697 248A  
                          l2689 2476                            l2961 166C                            l2953 1600  
                          l2945 15A8                            l2883 2CFE                            l2891 2CC4  
                          l2787 28BE                            l2779 28B6                            l2859 1CAE  
                          l2795 21C6                            l2939 27C4                            l2875 2B16  
                          l2699 2498                            l2971 16F0                            l2963 1684  
                          l2955 1618                            l2947 15AC                            l2885 2CA8  
                          l2789 28C0                            l2797 21DA                            l2877 2B1A  
                          l2893 2CC8                            l2973 171C                            l2965 16AC  
                          l2957 1640                            l2949 15D4                            l2981 17A0  
                          l2887 2CB0                            l2799 21F2                            l2879 2B2E  
                          l2895 2CD2                            l2975 1748                            l2967 16C4  
                          l2959 1658                            l2991 0E24                            l2889 2CBA  
                          l2897 2CD4                            l2977 1774                            l2969 16D8  
                          l2993 0E28                            l2899 2CDE                            l2995 0E2C  
                          l2987 0E14                            l2997 0E30                            l2989 0E18  
                          l2999 0E34                            STR_1 0E04                            STR_2 0E01  
                          u1000 1D3A                            u1001 1D36                            u1010 1D64  
                          u1011 1D60                            u1100 2070                            u1020 1D92  
                          u1101 206C                            u1021 1D8E                            u1110 2096  
                          u1030 1DDA                            u1111 2092                            u1031 1DD6  
                          u1120 20B4                            u1040 2804                            u1200 13EC  
                          u1121 20B0                            u1041 2800                            u1201 13E8  
                          u1130 20D0                            u1050 285A                            u1210 1528  
                          u1131 20CC                            u1051 2856                            u1211 1524  
                          u1140 20F6                            u1060 2B90                            u1220 1546  
                          u1141 20F2                            u1061 2B8C                            u1221 1542  
                          u1070 2C4A                            u1230 1560                            u1150 135A  
                          u1310 1E44                            u1071 2C46                            u1231 155C  
                          u1151 1354                            u1311 1E40                            u1080 2C60  
                          u1304 19BA                            u1400 24E0                            u1240 1570  
                          u1160 135C                            u1320 1E94                            u1081 2C5C  
                          u1305 19B6                            u1401 24DC                            u1241 156C  
                          u1321 1E90                            u1250 2B5E                            u1090 2056  
                          u1410 26C6                            u1170 136E                            u1330 1EB4  
                          u1251 2B56                            u1091 2052                            u1411 26C2  
                          u1171 136A                            u1331 1EB0                            u1500 1C3C  
                          u1340 276A                            u1420 2CF8                            u1180 13AA  
                          u1501 1C38                            u1341 2766                            u1421 2CF4  
                          u1181 13A6                            u1510 1C5E                            u1270 1812  
                          u1350 243E                            u1190 13D6                            u1430 2964  
                          u1511 1C5A                            u1271 180E                            u1351 243A  
                          u1191 13D2                            u1431 2960                            u1440 215A  
                          u1520 1C88                            u1280 18F6                            u1360 2622  
                          u1600 106E                    _BAUD4CONbits 000EE9                            u1441 2156  
                          u1521 1C84                            u1281 18F2                            u1361 261E  
                          u1601 106A                            _LATE 000F7D                            u1450 2170  
                          u1530 1CAA                            u1370 2580                            u1610 10BA  
                          u1451 216C                            u1531 1CA6                            u1371 257C  
                          u1611 10B6                            _LATG 000F7F                            u1460 2192  
                          u1268 2B60                            u1380 22F6                            u1540 2BE4  
                          u1620 10D6                            u1461 218E                            u1381 22F2  
                          u1541 2BE0                            u1621 10D2                            u1470 21A8  
                          u1294 1950                            u1550 27F4                            u1390 239A  
                          u1630 10F0                            u1471 21A4                            u1295 194C  
                          u1551 27F0                            u1391 2396                            u1631 10EC  
                          u1480 1BF0                            u1640 111E                            u1560 0EA4  
                          u1481 1BEC                            u1641 111A                            u1561 0EA0  
                          u1490 1C12                            u1650 1232                            u1570 1022  
                          _T2PR 000FBC                            u1491 1C0E                            u1651 122E  
                          u1571 101E                            u1707 0FD8                            u1660 126C  
                          u1580 104E                            u1661 1268                            u1581 1046  
                          u1717 0FF2                            u1670 1308                            u1590 1060  
                          u1807 22C8                            u1671 1304                            u1727 120E  
                          u1591 105C                            u1817 2300                            u1737 12CA  
                          u1907 2698                            u1827 24B2                            u1747 15DE  
                          u1588 1050                            u1917 26D0                            u1837 24EA  
                          u1757 164A                            u1927 27C6                            u1847 2552  
                          u1767 16B6                            u1937 21E4                            u1857 258A  
                          u1777 273C                            u1947 2214                            u1867 25F4  
                          u1787 2410                            u1957 2244                            u1877 262C  
                          u1797 2448                            u1967 2884                            u1887 236C  
                          u1897 23A4                            abs@a 0013                            _dbuf 0250  
                          _main 0E14                            _dtoa 132A                            _prec 01F2  
                          _time 01F4                            pad@i 0018                            pad@p 0015  
                          fsr1h 000FE2                            fsr2h 000FDA                            indf1 000FE7  
                          indf2 000FDF                            fsr1l 000FE1                            pad@w 001A  
                          fsr2l 000FD9                            btemp 005F                            _stop 26DE  
                          prodh 000FF4                            prodl 000FF3                            start 003E  
        __end_of_color_read_Red 29BE                 __end_of_HighISR 003E                    ___param_bank 000000  
                         ??_abs 0015                           ??_pad 0017        _color_processor_hard$370 0007  
      _color_processor_hard$372 0008        _color_processor_hard$374 0009                 __end_of___aodiv 1B52  
                         ?_main 0001                           ?_dtoa 001C                 __end_of___aomod 1E1C  
               __end_of___awdiv 2108         ??_color_read_Luminosity 0007                           ?_stop 001A  
               ___awdiv@divisor 0009                           i2l376 003A                 ___awdiv@counter 000B  
                  vfpfcnvrt@fmt 0041                           _TMR0H 000FD4                           _TMR0L 000FD3  
                  main@readout2 007B                    main@readout3 0100         __end_of_sendCharSerial4 2CFE  
    __end_of_I2C_2_Master_Start 2D3E      __end_of_I2C_2_Master_Write 2D20                 __end_of_left_90 23B4  
                         _flags 01FA                           _fputc 1F7A                 __end_of_forward 27F6  
                         _fputs 2AAE                           pad@fp 0011                           _width 01F0  
                         _putch 2D3E                           main@i 01CC                           main@j 01C6  
                         main@k 01CA                           dtoa@d 001E                           dtoa@i 003C  
                         dtoa@n 0034                           dtoa@p 0030                           dtoa@s 003E  
                         dtoa@w 0032                           tablat 000FF5                           ttemp5 0060  
                         ttemp6 0063                           ttemp7 0067                           stop@i 001F  
                         status 000FD8                           wtemp8 0060                 __end_of_sprintf 291C  
       __end_of_color_read_Blue 2AAE           _I2C_2_Master_RepStart 2D20                 ?_color_read_Red 0005  
               __initialization 2BE6  color_processor_hard@calibrated 0003                    __end_of_main 132A  
                  __end_of_dtoa 15A8                    __end_of_stop 276C                          ??_main 0059  
                        ??_dtoa 0026                          ??_stop 001E                   __activetblptr 000003  
                  ?_setMotorPWM 000F                          ?_fputc 0001                          ?_fputs 000A  
              ___awdiv@dividend 0007                          ?_putch 0001                          _RC0PPS 000E62  
                        _RC4REG 000EE3                          _RE2PPS 000E74                          _RD5PPS 000E6F  
                        _RC7PPS 000E69                          _RD6PPS 000E70                          i2l3181 0032  
                        i2l3173 000A                          i2l3183 0036                          i2l3175 001A  
                        i2l3177 0028                          i2l3179 002E                       ??_HighISR 0001  
      __end_of_color_click_init 28CA                          _RX4PPS 000E15                          _TX4REG 000EE4  
                 ??_Timer0_init 0001       color_processor_easy@color 0003                    vfprintf@cfmt 0057  
              __end_of_left_135 26DE                       ??___aodiv 0011                       ??___aomod 0011  
                        ___wmul 2C62                       ??___awdiv 000B                          clear_0 2BEC  
                        clear_1 2BF8                ___awdiv@quotient 000D                          isa$std 000001  
                        pad@buf 0013                          dtoa@fp 001C                       ??_left_90 001E  
              __end_of_right_90 2310                   main@time_path 0164                          fputc@c 0001  
                        fputs@c 000E                          fputs@i 000F                          fputs@s 000A  
                     ??_forward 001E                __end_of_spin_180 2456                    __mediumconst 0000  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
              ?_sendCharSerial4 0001                          putch@c 0001                __end_of_vfprintf 296E  
                        stop@mL 001A                          stop@mR 001C               ??_initDCmotorsPWM 0003  
                     ??_sprintf 0059             reverse_onesquare@mL 001A             reverse_onesquare@mR 001C  
                    __accesstop 0060         __end_of__initialization 2C06        __end_of_color_read_Green 2A5E  
        ?_I2C_2_Master_RepStart 0001                   ___rparam_used 000001                ?_color_read_Blue 0005  
               _Interrupts_init 2CFE                  __pcstackCOMRAM 0001                   color_read@rgb 000C  
                 __end_of_fputc 2044                   __end_of_fputs 2AF2                   __end_of_putch 2D40  
           __end_of_Timer0_init 2CC8                         ??_fputc 0005                         ??_fputs 000E  
                       ??_putch 0001                      __pbssBANK0 00FF                      __pbssBANK1 01F0  
                    __pbssBANK2 0200          color_processor_hard@cb 0014          color_processor_hard@cg 0012  
        color_processor_hard@cr 0010               _color_writetoaddr 2C88                    _T2CLKCONbits 000FBF  
            ?_color_writetoaddr 0003                         ?___wmul 0001                  main@color_flag 005B  
                main@color_name 01C8                  main@color_path 00DF                     right_135@mL 001A  
                   right_135@mR 001C             ??_color_writetoaddr 0004                _reverse_fromcard 259A  
 __end_of_color_read_Luminosity 2A0E                         _SP4BRGH 000EE6                         _SP4BRGL 000EE5  
                       _PWM6DCH 000FA3                         _PWM7DCH 000FA0                         _SSP2ADD 000ED6  
                       _SSP2BUF 000ED5                       ?_left_135 001A                      _color_read 21C6  
       __end_of_Interrupts_init 2D14          color_writetoaddr@value 0003                ??_color_read_Red 0007  
                       _HighISR 0008       __end_of_color_writetoaddr 2CA8        color_read_Luminosity@tmp 000A  
            _I2C_2_Master_Start 2D34                      _initUSART4 2CC8              _I2C_2_Master_Write 2D14  
                     ?_right_90 001A                         __Hparam 0000                         __Lparam 0000  
             color_read_Red@tmp 000A                     _Timer0_init 2CA8                       ?_spin_180 001A  
       sendStringSerial4@string 0002                         ___aodiv 19CA                         ___aomod 1CB8  
                       ___awdiv 2044             ?_I2C_2_Master_Start 0001             ?_I2C_2_Master_Write 0001  
                    _off_period 01F6                       ?_vfprintf 0051                    __psmallconst 0E00  
                       __pcinit 2BE6                         __ramtop 0E00                         __ptext0 0E14  
                       __ptext1 28CA                         __ptext2 291C                         __ptext3 1E1C  
                       __ptext4 132A                         __ptext5 27F6                         __ptext6 2AAE  
                       __ptext7 1F7A                         __ptext8 2D3E                         __ptext9 2B76  
                       _left_90 2310                       _T2CONbits 000FBD                         _forward 276C  
                     _T2HLTbits 000FBE       main@lowerbound_calibrated 00FD                   ?_motor_action 0022  
                 _RxBufWriteCnt 005E                         _sprintf 28CA            ??_I2C_2_Master_Start 0002  
                    ??_left_135 001E            ??_I2C_2_Master_Write 0002            end_of_initialization 2C06  
             __end_of_right_135 24F8              setMotorPWM@PWMduty 0018                         fputc@fp 0003  
                       fputs@fp 000C               ?_color_click_init 0001    __end_of_color_processor_easy 21C6  
  __end_of_color_processor_hard 1CB8                      ??_right_90 001E              ??_color_click_init 0005  
             __end_of_vfpfcnvrt 1F7A                      ??_spin_180 001E                         postdec1 000FE5  
                       postdec2 000FDD                         postinc0 000FEE                         postinc1 000FE6  
                       postinc2 000FDE                vfpfcnvrt@convarg 0047                      ??_vfprintf 0057  
               _initDCmotorsPWM 2AF2                       _PORTFbits 000F8E                  ??_motor_action 0028  
                     _TRISCbits 000F83                       _TRISDbits 000F84                       _TRISEbits 000F85  
                     _TRISFbits 000F86                       _TRISGbits 000F87                       _TRISHbits 000F88  
            reverse_fromcard@mL 001A              reverse_fromcard@mR 001C                     ?_color_read 000C  
      color_writetoaddr@address 0004         ??_I2C_2_Master_RepStart 0002                ?_Interrupts_init 0001  
                    left_135@mL 001A                      left_135@mR 001C                    _EUSART4RXbuf 023C  
                  _EUSART4TXbuf 0200               ?_color_read_Green 0005                     ?_initUSART4 0001  
     sendCharSerial4@charToSend 0001                      main@motorL 01E7                      main@motorR 01DE  
            ??_color_read_Green 0007                     vfpfcnvrt@ap 0043                     vfpfcnvrt@cp 004F  
                   vfpfcnvrt@fp 003F                  __end_of___wmul 2C88             start_initialization 2BE6  
                   __end_of_abs 2BB6                     __end_of_pad 2870                   _TxBufWriteCnt 00FF  
      __end_of_reverse_fromcard 263C             color_read_Green@tmp 000A         __end_of_initDCmotorsPWM 2B34  
                   vfprintf@fmt 0053                        ??___wmul 0005              reverse_onesquare@i 0020  
                   __pbssCOMRAM 005D            _color_processor_easy 2108            _color_processor_hard 1B52  
                 __pcstackBANK0 0060                   __pcstackBANK1 0100                ___aodiv@dividend 0001  
            main@RGB_calibrated 01CE                        ?_HighISR 0001         color_processor_easy@rgb 0001  
       color_processor_hard@rgb 0001           color_processor_easy@a 0007           color_processor_easy@b 0009  
         color_processor_easy@c 0005           color_processor_hard@b 000E           color_processor_hard@g 000C  
         color_processor_hard@r 000A                       _dtoa$2417 002E            __end_of_motor_action 17F6  
                  ?_Timer0_init 0001                       __pintcode 0008                        ?___aodiv 0001  
                      ?___aomod 0001                        ?___awdiv 0007                ___aodiv@quotient 0013  
                    right_135@i 0020                      right_90@mL 001A                      right_90@mR 001C  
          I2C_2_Master_Read@ack 0003            I2C_2_Master_Read@tmp 0004                        ?_left_90 001A  
                   __smallconst 0E00                        ?_forward 001A               _I2C_2_Master_Idle 2C3A  
         ?_color_processor_easy 0001           ?_color_processor_hard 0001                main@RGB_recorded 01D6  
             _I2C_2_Master_Init 2C10               _I2C_2_Master_Read 2B34               _I2C_2_Master_Stop 2D2A  
                  _RxBufReadCnt 005D              ?_I2C_2_Master_Idle 0001              ?_I2C_2_Master_Init 0001  
            ?_I2C_2_Master_Read 0001                   ??_setMotorPWM 0011           _color_read_Luminosity 29BE  
            ?_I2C_2_Master_Stop 0001        initDCmotorsPWM@PWMperiod 0001                        ?_sprintf 0060  
             _sendStringSerial4 2BB6             ??_I2C_2_Master_Idle 0001             ??_I2C_2_Master_Init 0001  
           ??_I2C_2_Master_Read 0002                  ___wmul@product 0005             ??_I2C_2_Master_Stop 0002  
                      _LATCbits 000F7B                        _LATDbits 000F7C                        _LATEbits 000F7D  
                      _LATFbits 000F7E                       _on_period 01F8                        _LATGbits 000F7F  
                      _LATHbits 000F80                       _right_135 2456                        _IPR0bits 000E1F  
                      _IPR2bits 000E21                        _PIE0bits 000E29                        _PIE2bits 000E2B  
            ?_sendStringSerial4 0002                      spin_180@mL 001A                      spin_180@mR 001C  
                      _PIR0bits 000E33                        i2u168_40 001A                        i2u168_41 0016  
                      i2u169_40 0028                        i2u169_41 0024                        _PIR2bits 000E35  
                      _PIR4bits 000E37                ?_initDCmotorsPWM 0001               ??_sendCharSerial4 0001  
                      _SSP2CON2 000EDA             ??_sendStringSerial4 0004                        _SSP2STAT 000ED8  
             _reverse_onesquare 24F8                       _vfpfcnvrt 1E1C       __end_of_I2C_2_Master_Idle 2C62  
            ?_reverse_onesquare 001A       __end_of_I2C_2_Master_Init 2C3A       __end_of_I2C_2_Master_Read 2B76  
             ___wmul@multiplier 0001               reverse_fromcard@i 0020       __end_of_I2C_2_Master_Stop 2D34  
                  setMotorPWM@m 000F     I2C_2_Master_Write@data_byte 0002                       left_135@i 0020  
                     left_90@mL 001A                       left_90@mR 001C            main@color_calibrated 0182  
             ??_color_read_Blue 0007                    _TxBufReadCnt 01FB             ??_reverse_onesquare 001E  
     main@upperbound_calibrated 01C2                    ??_color_read 000E       __end_of_sendStringSerial4 2BE6  
 __end_of_I2C_2_Master_RepStart 2D2A              color_read_Blue@tmp 000A             __end_of_setMotorPWM 19CA  
                    ?_right_135 001A                    ??_initUSART4 0001                        __Hrparam 0000  
                    vfprintf@ap 0055                        __Lrparam 0000                      vfprintf@fp 0051  
     __end_of_reverse_onesquare 259A                       forward@mL 001A                       forward@mR 001C  
                    ?_vfpfcnvrt 003F              __end_of_color_read 226C                 ___aodiv@divisor 0009  
               ___aodiv@counter 0011                      _ANSELDbits 000EA7          ??_color_processor_easy 0003  
        ??_color_processor_hard 0005                      _ANSELFbits 000EB4                      sprintf@fmt 0062  
                    _T0CON0bits 000FD5                      _T0CON1bits 000FD6          ?_color_read_Luminosity 0005  
            __end_of_initUSART4 2CE6                        __ptext10 1CB8                        __ptext11 19CA  
                      __ptext20 259A                        __ptext12 2BB6                        __ptext21 2310  
                      __ptext13 2CE6                        __ptext30 296E                        __ptext22 263C  
                      __ptext14 15A8                        __ptext31 29BE                        __ptext23 2CC8  
                      __ptext15 26DE                        __ptext40 2D14                        __ptext32 2A0E  
                      __ptext24 2AF2                        __ptext16 23B4                        __ptext41 2D2A  
                      __ptext33 2A5E                        __ptext25 276C                        __ptext17 226C  
                      __ptext42 2D34                        __ptext34 2D20                        __ptext26 17F6  
                      __ptext18 2456                        __ptext43 2C3A                        __ptext35 2B34  
                      __ptext27 2C62                        __ptext19 24F8                        __ptext44 2C10  
                      __ptext36 1B52                        __ptext28 2044                        __ptext45 2CA8  
                      __ptext37 2108                        __ptext29 21C6                        __ptext46 2CFE  
                      __ptext38 2870                        __ptext39 2C88                       right_90@i 0020  
                      _left_135 263C                    _SSP2CON1bits 000ED9                    _SSP2CON2bits 000EDA  
                      _right_90 226C               ?_reverse_fromcard 001A                       spin_180@i 0020  
                      _spin_180 23B4                        isa$xinst 000000              ??_reverse_fromcard 001E  
                    _RC4STAbits 000EE7                        int$flags 005F                   motor_action@l 0024  
                 motor_action@r 0026                        _vfprintf 291C                        left_90@i 0020  
              ___aomod@dividend 0001                 main@time_return 01C4                      _INTCONbits 000FF2  
                  _motor_action 15A8                        forward@i 001E                     _setMotorPWM 17F6  
                   _PWM6CONbits 000FA4                     _PWM7CONbits 000FA1                        intlevel2 0000  
                     sprintf@ap 006E                     ??_right_135 001E                 ___aomod@divisor 0009  
                   ??_vfpfcnvrt 0045                 ___aomod@counter 0011                _color_click_init 2870  
                      sprintf@f 0070                        sprintf@s 0060                      _SSP2DATPPS 000E1D  
                    _SSP2CLKPPS 000E1C                      _TX4STAbits 000EE8                    ___aodiv@sign 0012  
               _sendCharSerial4 2CE6                    ___aomod@sign 0012  
