

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Dec 10 22:32:41 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    67   000000                     
    68                           ; Version 2.35
    69                           ; Generated 05/05/2021 GMT
    70                           ; 
    71                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution. Publication is not required when
    85                           ;        this file is used in an embedded application.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F67K40 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103   000000                     _TX4REG	set	3812
   104   000000                     _RC4STAbits	set	3815
   105   000000                     _SP4BRGH	set	3814
   106   000000                     _T0CON0bits	set	4053
   107   000000                     _T0CON1bits	set	4054
   108   000000                     _TMR0H	set	4052
   109   000000                     _TRISGbits	set	3975
   110   000000                     _TRISEbits	set	3973
   111   000000                     _LATFbits	set	3966
   112   000000                     _TRISFbits	set	3974
   113   000000                     _LATG	set	3967
   114   000000                     _LATE	set	3965
   115   000000                     _SSP2CON2bits	set	3802
   116   000000                     _LATGbits	set	3967
   117   000000                     _LATEbits	set	3965
   118   000000                     _RX4PPS	set	3605
   119   000000                     _SSP2CLKPPS	set	3612
   120   000000                     _SSP2DATPPS	set	3613
   121   000000                     _ANSELDbits	set	3751
   122   000000                     _ANSELFbits	set	3764
   123   000000                     _LATDbits	set	3964
   124   000000                     _LATHbits	set	3968
   125   000000                     _TRISDbits	set	3972
   126   000000                     _TRISHbits	set	3976
   127   000000                     _PORTFbits	set	3982
   128   000000                     _PWM7DCH	set	4000
   129   000000                     _PWM6DCH	set	4003
   130   000000                     _TRISCbits	set	3971
   131   000000                     _SSP2BUF	set	3797
   132   000000                     _SSP2ADD	set	3798
   133   000000                     _SSP2CON1bits	set	3801
   134   000000                     _RC4REG	set	3811
   135   000000                     _SP4BRGL	set	3813
   136   000000                     _TX4STAbits	set	3816
   137   000000                     _BAUD4CONbits	set	3817
   138   000000                     _LATCbits	set	3963
   139   000000                     _SSP2CON2	set	3802
   140   000000                     _SSP2STAT	set	3800
   141   000000                     _IPR0bits	set	3615
   142   000000                     _PIE0bits	set	3625
   143   000000                     _RC7PPS	set	3689
   144   000000                     _RD5PPS	set	3695
   145   000000                     _RE2PPS	set	3700
   146   000000                     _RD6PPS	set	3696
   147   000000                     _PWM6CONbits	set	4004
   148   000000                     _T2PR	set	4028
   149   000000                     _T2CONbits	set	4029
   150   000000                     _INTCONbits	set	4082
   151   000000                     _PWM7CONbits	set	4001
   152   000000                     _TMR0L	set	4051
   153   000000                     _T2CLKCONbits	set	4031
   154   000000                     _T2HLTbits	set	4030
   155   000000                     _PIE2bits	set	3627
   156   000000                     _PIR0bits	set	3635
   157   000000                     _IPR2bits	set	3617
   158   000000                     _PIR2bits	set	3637
   159   000000                     _PIR4bits	set	3639
   160   000000                     _RC0PPS	set	3682
   161                           
   162                           	psect	smallconst
   163   000E00                     __psmallconst:
   164                           	callstack 0
   165   000E00  00                 	db	0
   166   000E01                     STR_2:
   167                           
   168                           ; BSR set to: 14
   169   000E01  25                 	db	37
   170   000E02  64                 	db	100	;'d'
   171   000E03  20                 	db	32
   172   000E04  25                 	db	37
   173   000E05  64                 	db	100	;'d'
   174   000E06  20                 	db	32
   175   000E07  25                 	db	37
   176   000E08  64                 	db	100	;'d'
   177   000E09  20                 	db	32
   178   000E0A  25                 	db	37
   179   000E0B  64                 	db	100	;'d'
   180   000E0C  20                 	db	32
   181   000E0D  25                 	db	37
   182   000E0E  64                 	db	100	;'d'
   183   000E0F  20                 	db	32
   184   000E10  0D                 	db	13
   185   000E11  0A                 	db	10
   186   000E12  00                 	db	0
   187   000E13  00                 	db	0	; dummy byte at the end
   188   000000                     
   189                           ; #config settings
   190                           
   191                           	psect	cinit
   192   002BD6                     __pcinit:
   193                           	callstack 0
   194   002BD6                     start_initialization:
   195                           	callstack 0
   196   002BD6                     __initialization:
   197                           	callstack 0
   198                           
   199                           ; Clear objects allocated to BANK2 (112 bytes)
   200   002BD6  EE02  F000         	lfsr	0,__pbssBANK2
   201   002BDA  0E70               	movlw	112
   202   002BDC                     clear_0:
   203   002BDC  6AEE               	clrf	postinc0,c
   204   002BDE  06E8               	decf	wreg,f,c
   205   002BE0  E1FD               	bnz	clear_0
   206                           
   207                           ; Clear objects allocated to BANK1 (12 bytes)
   208   002BE2  EE01  F0F0         	lfsr	0,__pbssBANK1
   209   002BE6  0E0C               	movlw	12
   210   002BE8                     clear_1:
   211   002BE8  6AEE               	clrf	postinc0,c
   212   002BEA  06E8               	decf	wreg,f,c
   213   002BEC  E1FD               	bnz	clear_1
   214                           
   215                           ; Clear objects allocated to BANK0 (1 bytes)
   216   002BEE  0100               	movlb	0
   217   002BF0  6BFF               	clrf	__pbssBANK0& (0+255),b
   218                           
   219                           ; Clear objects allocated to COMRAM (2 bytes)
   220   002BF2  6A5E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   221   002BF4  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   222   002BF6                     end_of_initialization:
   223                           	callstack 0
   224   002BF6                     __end_of__initialization:
   225                           	callstack 0
   226   002BF6  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   227   002BF8  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   228   002BFA  0100               	movlb	0
   229   002BFC  EF0A  F007         	goto	_main	;jump to C main() function
   230                           
   231                           	psect	bssCOMRAM
   232   00005D                     __pbssCOMRAM:
   233                           	callstack 0
   234   00005D                     _RxBufReadCnt:
   235                           	callstack 0
   236   00005D                     	ds	1
   237   00005E                     _RxBufWriteCnt:
   238                           	callstack 0
   239   00005E                     	ds	1
   240                           
   241                           	psect	bssBANK0
   242   0000FF                     __pbssBANK0:
   243                           	callstack 0
   244   0000FF                     _TxBufWriteCnt:
   245                           	callstack 0
   246   0000FF                     	ds	1
   247                           
   248                           	psect	bssBANK1
   249   0001F0                     __pbssBANK1:
   250                           	callstack 0
   251   0001F0                     _width:
   252                           	callstack 0
   253   0001F0                     	ds	2
   254   0001F2                     _prec:
   255                           	callstack 0
   256   0001F2                     	ds	2
   257   0001F4                     _time:
   258                           	callstack 0
   259   0001F4                     	ds	2
   260   0001F6                     _off_period:
   261                           	callstack 0
   262   0001F6                     	ds	2
   263   0001F8                     _on_period:
   264                           	callstack 0
   265   0001F8                     	ds	2
   266   0001FA                     _flags:
   267                           	callstack 0
   268   0001FA                     	ds	1
   269   0001FB                     _TxBufReadCnt:
   270                           	callstack 0
   271   0001FB                     	ds	1
   272                           
   273                           	psect	bssBANK2
   274   000200                     __pbssBANK2:
   275                           	callstack 0
   276   000200                     _EUSART4TXbuf:
   277                           	callstack 0
   278   000200                     	ds	60
   279   00023C                     _EUSART4RXbuf:
   280                           	callstack 0
   281   00023C                     	ds	20
   282   000250                     _dbuf:
   283                           	callstack 0
   284   000250                     	ds	32
   285                           
   286                           	psect	cstackBANK1
   287   000100                     __pcstackBANK1:
   288                           	callstack 0
   289   000100                     main@readout3:
   290                           	callstack 0
   291                           
   292                           ; 100 bytes @ 0x0
   293   000100                     	ds	100
   294   000164                     main@time_path:
   295                           	callstack 0
   296                           
   297                           ; 30 bytes @ 0x64
   298   000164                     	ds	30
   299   000182                     main@color_calibrated:
   300                           	callstack 0
   301                           
   302                           ; 64 bytes @ 0x82
   303   000182                     	ds	64
   304   0001C2                     main@upperbound_calibrated:
   305                           	callstack 0
   306                           
   307                           ; 2 bytes @ 0xC2
   308   0001C2                     	ds	2
   309   0001C4                     main@time_return:
   310                           	callstack 0
   311                           
   312                           ; 2 bytes @ 0xC4
   313   0001C4                     	ds	2
   314   0001C6                     main@j:
   315                           	callstack 0
   316                           
   317                           ; 2 bytes @ 0xC6
   318   0001C6                     	ds	2
   319   0001C8                     main@color_name:
   320                           	callstack 0
   321                           
   322                           ; 2 bytes @ 0xC8
   323   0001C8                     	ds	2
   324   0001CA                     main@k:
   325                           	callstack 0
   326                           
   327                           ; 2 bytes @ 0xCA
   328   0001CA                     	ds	2
   329   0001CC                     main@i:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0xCC
   333   0001CC                     	ds	2
   334   0001CE                     main@RGB_calibrated:
   335                           	callstack 0
   336                           
   337                           ; 8 bytes @ 0xCE
   338   0001CE                     	ds	8
   339   0001D6                     main@RGB_recorded:
   340                           	callstack 0
   341                           
   342                           ; 8 bytes @ 0xD6
   343   0001D6                     	ds	8
   344   0001DE                     main@motorR:
   345                           	callstack 0
   346                           
   347                           ; 9 bytes @ 0xDE
   348   0001DE                     	ds	9
   349   0001E7                     main@motorL:
   350                           	callstack 0
   351                           
   352                           ; 9 bytes @ 0xE7
   353   0001E7                     	ds	9
   354                           
   355                           	psect	cstackBANK0
   356   000060                     __pcstackBANK0:
   357                           	callstack 0
   358   000060                     ?_sprintf:
   359                           	callstack 0
   360   000060                     sprintf@s:
   361                           	callstack 0
   362                           
   363                           ; 2 bytes @ 0x0
   364   000060                     	ds	2
   365   000062                     sprintf@fmt:
   366                           	callstack 0
   367                           
   368                           ; 2 bytes @ 0x2
   369   000062                     	ds	12
   370   00006E                     sprintf@ap:
   371                           	callstack 0
   372                           
   373                           ; 2 bytes @ 0xE
   374   00006E                     	ds	2
   375   000070                     sprintf@f:
   376                           	callstack 0
   377                           
   378                           ; 11 bytes @ 0x10
   379   000070                     	ds	11
   380   00007B                     main@readout2:
   381                           	callstack 0
   382                           
   383                           ; 100 bytes @ 0x1B
   384   00007B                     	ds	100
   385   0000DF                     main@color_path:
   386                           	callstack 0
   387                           
   388                           ; 30 bytes @ 0x7F
   389   0000DF                     	ds	30
   390   0000FD                     main@lowerbound_calibrated:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x9D
   394   0000FD                     	ds	2
   395                           
   396                           	psect	cstackCOMRAM
   397   000001                     __pcstackCOMRAM:
   398                           	callstack 0
   399   000001                     ??_I2C_2_Master_Idle:
   400   000001                     ?_color_processor_easy:
   401                           	callstack 0
   402   000001                     ?_color_processor_hard:
   403                           	callstack 0
   404   000001                     ?___wmul:
   405                           	callstack 0
   406   000001                     ?___aodiv:
   407                           	callstack 0
   408   000001                     ?___aomod:
   409                           	callstack 0
   410   000001                     sendCharSerial4@charToSend:
   411                           	callstack 0
   412   000001                     color_processor_easy@rgb:
   413                           	callstack 0
   414   000001                     color_processor_hard@rgb:
   415                           	callstack 0
   416   000001                     initDCmotorsPWM@PWMperiod:
   417                           	callstack 0
   418   000001                     ___wmul@multiplier:
   419                           	callstack 0
   420   000001                     fputc@c:
   421                           	callstack 0
   422   000001                     ___aodiv@dividend:
   423                           	callstack 0
   424   000001                     ___aomod@dividend:
   425                           	callstack 0
   426                           
   427                           ; 8 bytes @ 0x0
   428   000001                     	ds	1
   429   000002                     ??_I2C_2_Master_Read:
   430   000002                     I2C_2_Master_Write@data_byte:
   431                           	callstack 0
   432   000002                     sendStringSerial4@string:
   433                           	callstack 0
   434                           
   435                           ; 2 bytes @ 0x1
   436   000002                     	ds	1
   437   000003                     color_writetoaddr@value:
   438                           	callstack 0
   439   000003                     I2C_2_Master_Read@ack:
   440                           	callstack 0
   441   000003                     color_processor_easy@color:
   442                           	callstack 0
   443   000003                     color_processor_hard@calibrated:
   444                           	callstack 0
   445   000003                     ___wmul@multiplicand:
   446                           	callstack 0
   447   000003                     fputc@fp:
   448                           	callstack 0
   449                           
   450                           ; 2 bytes @ 0x2
   451   000003                     	ds	1
   452   000004                     color_writetoaddr@address:
   453                           	callstack 0
   454   000004                     I2C_2_Master_Read@tmp:
   455                           	callstack 0
   456                           
   457                           ; 1 bytes @ 0x3
   458   000004                     	ds	1
   459   000005                     ??_fputc:
   460   000005                     ??_color_click_init:
   461   000005                     ??_color_processor_hard:
   462   000005                     ?_color_read_Luminosity:
   463                           	callstack 0
   464   000005                     ?_color_read_Red:
   465                           	callstack 0
   466   000005                     ?_color_read_Green:
   467                           	callstack 0
   468   000005                     ?_color_read_Blue:
   469                           	callstack 0
   470   000005                     color_processor_easy@c:
   471                           	callstack 0
   472   000005                     ___wmul@product:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x4
   476   000005                     	ds	2
   477   000007                     ??_color_read_Luminosity:
   478   000007                     ??_color_read_Red:
   479   000007                     ??_color_read_Green:
   480   000007                     ??_color_read_Blue:
   481   000007                     ?___awdiv:
   482                           	callstack 0
   483   000007                     _color_processor_hard$370:
   484                           	callstack 0
   485   000007                     color_processor_easy@a:
   486                           	callstack 0
   487   000007                     ___awdiv@dividend:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x6
   491   000007                     	ds	1
   492   000008                     _color_processor_hard$372:
   493                           	callstack 0
   494                           
   495                           ; 1 bytes @ 0x7
   496   000008                     	ds	1
   497   000009                     _color_processor_hard$374:
   498                           	callstack 0
   499   000009                     color_processor_easy@b:
   500                           	callstack 0
   501   000009                     ___awdiv@divisor:
   502                           	callstack 0
   503   000009                     ___aodiv@divisor:
   504                           	callstack 0
   505   000009                     ___aomod@divisor:
   506                           	callstack 0
   507                           
   508                           ; 8 bytes @ 0x8
   509   000009                     	ds	1
   510   00000A                     color_read_Luminosity@tmp:
   511                           	callstack 0
   512   00000A                     color_read_Red@tmp:
   513                           	callstack 0
   514   00000A                     color_read_Green@tmp:
   515                           	callstack 0
   516   00000A                     color_read_Blue@tmp:
   517                           	callstack 0
   518   00000A                     color_processor_hard@r:
   519                           	callstack 0
   520   00000A                     fputs@s:
   521                           	callstack 0
   522                           
   523                           ; 2 bytes @ 0x9
   524   00000A                     	ds	1
   525   00000B                     ___awdiv@counter:
   526                           	callstack 0
   527                           
   528                           ; 1 bytes @ 0xA
   529   00000B                     	ds	1
   530   00000C                     ___awdiv@sign:
   531                           	callstack 0
   532   00000C                     color_read@rgb:
   533                           	callstack 0
   534   00000C                     color_processor_hard@g:
   535                           	callstack 0
   536   00000C                     fputs@fp:
   537                           	callstack 0
   538                           
   539                           ; 2 bytes @ 0xB
   540   00000C                     	ds	1
   541   00000D                     ___awdiv@quotient:
   542                           	callstack 0
   543                           
   544                           ; 2 bytes @ 0xC
   545   00000D                     	ds	1
   546   00000E                     ??_color_read:
   547   00000E                     fputs@c:
   548                           	callstack 0
   549   00000E                     color_processor_hard@b:
   550                           	callstack 0
   551                           
   552                           ; 2 bytes @ 0xD
   553   00000E                     	ds	1
   554   00000F                     setMotorPWM@m:
   555                           	callstack 0
   556   00000F                     fputs@i:
   557                           	callstack 0
   558                           
   559                           ; 2 bytes @ 0xE
   560   00000F                     	ds	1
   561   000010                     color_processor_hard@cr:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0xF
   565   000010                     	ds	1
   566   000011                     ??_setMotorPWM:
   567   000011                     ___aodiv@counter:
   568                           	callstack 0
   569   000011                     ___aomod@counter:
   570                           	callstack 0
   571   000011                     pad@fp:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0x10
   575   000011                     	ds	1
   576   000012                     ___aodiv@sign:
   577                           	callstack 0
   578   000012                     ___aomod@sign:
   579                           	callstack 0
   580   000012                     color_processor_hard@cg:
   581                           	callstack 0
   582                           
   583                           ; 2 bytes @ 0x11
   584   000012                     	ds	1
   585   000013                     ?_abs:
   586                           	callstack 0
   587   000013                     pad@buf:
   588                           	callstack 0
   589   000013                     abs@a:
   590                           	callstack 0
   591   000013                     ___aodiv@quotient:
   592                           	callstack 0
   593                           
   594                           ; 8 bytes @ 0x12
   595   000013                     	ds	1
   596   000014                     color_processor_hard@cb:
   597                           	callstack 0
   598                           
   599                           ; 2 bytes @ 0x13
   600   000014                     	ds	1
   601   000015                     ??_abs:
   602   000015                     pad@p:
   603                           	callstack 0
   604                           
   605                           ; 2 bytes @ 0x14
   606   000015                     	ds	2
   607   000017                     ??_pad:
   608                           
   609                           ; 1 bytes @ 0x16
   610   000017                     	ds	1
   611   000018                     setMotorPWM@PWMduty:
   612                           	callstack 0
   613   000018                     pad@i:
   614                           	callstack 0
   615                           
   616                           ; 2 bytes @ 0x17
   617   000018                     	ds	2
   618   00001A                     stop@mL:
   619                           	callstack 0
   620   00001A                     forward@mL:
   621                           	callstack 0
   622   00001A                     reverse_fromcard@mL:
   623                           	callstack 0
   624   00001A                     reverse_onesquare@mL:
   625                           	callstack 0
   626   00001A                     right_90@mL:
   627                           	callstack 0
   628   00001A                     left_90@mL:
   629                           	callstack 0
   630   00001A                     spin_180@mL:
   631                           	callstack 0
   632   00001A                     right_135@mL:
   633                           	callstack 0
   634   00001A                     left_135@mL:
   635                           	callstack 0
   636   00001A                     pad@w:
   637                           	callstack 0
   638                           
   639                           ; 2 bytes @ 0x19
   640   00001A                     	ds	2
   641   00001C                     stop@mR:
   642                           	callstack 0
   643   00001C                     forward@mR:
   644                           	callstack 0
   645   00001C                     reverse_fromcard@mR:
   646                           	callstack 0
   647   00001C                     reverse_onesquare@mR:
   648                           	callstack 0
   649   00001C                     right_90@mR:
   650                           	callstack 0
   651   00001C                     left_90@mR:
   652                           	callstack 0
   653   00001C                     spin_180@mR:
   654                           	callstack 0
   655   00001C                     right_135@mR:
   656                           	callstack 0
   657   00001C                     left_135@mR:
   658                           	callstack 0
   659   00001C                     dtoa@fp:
   660                           	callstack 0
   661                           
   662                           ; 2 bytes @ 0x1B
   663   00001C                     	ds	2
   664   00001E                     ??_stop:
   665   00001E                     ??_spin_180:
   666   00001E                     ??_reverse_fromcard:
   667   00001E                     ??_reverse_onesquare:
   668   00001E                     ??_right_90:
   669   00001E                     ??_left_90:
   670   00001E                     ??_right_135:
   671   00001E                     ??_left_135:
   672   00001E                     forward@i:
   673                           	callstack 0
   674   00001E                     dtoa@d:
   675                           	callstack 0
   676                           
   677                           ; 8 bytes @ 0x1D
   678   00001E                     	ds	1
   679   00001F                     stop@i:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0x1E
   683   00001F                     	ds	1
   684   000020                     reverse_fromcard@i:
   685                           	callstack 0
   686   000020                     reverse_onesquare@i:
   687                           	callstack 0
   688   000020                     right_90@i:
   689                           	callstack 0
   690   000020                     left_90@i:
   691                           	callstack 0
   692   000020                     spin_180@i:
   693                           	callstack 0
   694   000020                     right_135@i:
   695                           	callstack 0
   696   000020                     left_135@i:
   697                           	callstack 0
   698                           
   699                           ; 2 bytes @ 0x1F
   700   000020                     	ds	2
   701   000022                     motor_action@color:
   702                           	callstack 0
   703                           
   704                           ; 2 bytes @ 0x21
   705   000022                     	ds	2
   706   000024                     motor_action@l:
   707                           	callstack 0
   708                           
   709                           ; 2 bytes @ 0x23
   710   000024                     	ds	2
   711   000026                     ??_dtoa:
   712   000026                     motor_action@r:
   713                           	callstack 0
   714                           
   715                           ; 2 bytes @ 0x25
   716   000026                     	ds	2
   717   000028                     ??_motor_action:
   718                           
   719                           ; 1 bytes @ 0x27
   720   000028                     	ds	6
   721   00002E                     _dtoa$2417:
   722                           	callstack 0
   723                           
   724                           ; 2 bytes @ 0x2D
   725   00002E                     	ds	2
   726   000030                     dtoa@p:
   727                           	callstack 0
   728                           
   729                           ; 2 bytes @ 0x2F
   730   000030                     	ds	2
   731   000032                     dtoa@w:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x31
   735   000032                     	ds	2
   736   000034                     dtoa@n:
   737                           	callstack 0
   738                           
   739                           ; 8 bytes @ 0x33
   740   000034                     	ds	8
   741   00003C                     dtoa@i:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x3B
   745   00003C                     	ds	2
   746   00003E                     dtoa@s:
   747                           	callstack 0
   748                           
   749                           ; 1 bytes @ 0x3D
   750   00003E                     	ds	1
   751   00003F                     vfpfcnvrt@fp:
   752                           	callstack 0
   753                           
   754                           ; 2 bytes @ 0x3E
   755   00003F                     	ds	2
   756   000041                     vfpfcnvrt@fmt:
   757                           	callstack 0
   758                           
   759                           ; 2 bytes @ 0x40
   760   000041                     	ds	2
   761   000043                     vfpfcnvrt@ap:
   762                           	callstack 0
   763                           
   764                           ; 2 bytes @ 0x42
   765   000043                     	ds	2
   766   000045                     ??_vfpfcnvrt:
   767                           
   768                           ; 1 bytes @ 0x44
   769   000045                     	ds	2
   770   000047                     vfpfcnvrt@convarg:
   771                           	callstack 0
   772                           
   773                           ; 8 bytes @ 0x46
   774   000047                     	ds	8
   775   00004F                     vfpfcnvrt@cp:
   776                           	callstack 0
   777                           
   778                           ; 2 bytes @ 0x4E
   779   00004F                     	ds	2
   780   000051                     ?_vfprintf:
   781                           	callstack 0
   782   000051                     vfprintf@fp:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x50
   786   000051                     	ds	2
   787   000053                     vfprintf@fmt:
   788                           	callstack 0
   789                           
   790                           ; 2 bytes @ 0x52
   791   000053                     	ds	2
   792   000055                     vfprintf@ap:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x54
   796   000055                     	ds	2
   797   000057                     vfprintf@cfmt:
   798                           	callstack 0
   799                           
   800                           ; 2 bytes @ 0x56
   801   000057                     	ds	2
   802   000059                     ??_main:
   803                           
   804                           ; 1 bytes @ 0x58
   805   000059                     	ds	2
   806   00005B                     main@color_flag:
   807                           	callstack 0
   808                           
   809                           ; 2 bytes @ 0x5A
   810   00005B                     	ds	2
   811                           
   812 ;;
   813 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   814 ;;
   815 ;; *************** function _main *****************
   816 ;; Defined at:
   817 ;;		line 20 in file "../main.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;  readout3      100    0[BANK1 ] unsigned char [100]
   822 ;;  readout2      100   27[BANK0 ] unsigned char [100]
   823 ;;  k               2  202[BANK1 ] int 
   824 ;;  i               2  204[BANK1 ] int 
   825 ;;  color_calibr   64  130[BANK1 ] int [32]
   826 ;;  time_path      30  100[BANK1 ] unsigned int [15]
   827 ;;  color_path     30  127[BANK0 ] unsigned int [15]
   828 ;;  motorL          9  231[BANK1 ] struct DC_motor
   829 ;;  motorR          9  222[BANK1 ] struct DC_motor
   830 ;;  RGB_recorded    8  214[BANK1 ] struct RGB_val
   831 ;;  RGB_calibrat    8  206[BANK1 ] struct RGB_val
   832 ;;  L_calibrated    8    0        struct RGB_val
   833 ;;  color_name      2  200[BANK1 ] unsigned int 
   834 ;;  j               2  198[BANK1 ] int 
   835 ;;  time_return     2  196[BANK1 ] unsigned int 
   836 ;;  color_flag      2   90[COMRAM] unsigned int 
   837 ;;  upperbound_c    2  194[BANK1 ] unsigned int 
   838 ;;  lowerbound_c    2  157[BANK0 ] unsigned int 
   839 ;;  PWMcycle        1    0        unsigned char 
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   850 ;;      Locals:         2     132     240       0       0       0       0       0       0       0       0       0       
      +0       0       0
   851 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   852 ;;      Totals:         4     132     240       0       0       0       0       0       0       0       0       0       
      +0       0       0
   853 ;;Total ram usage:      376 bytes
   854 ;; Hardware stack levels required when called: 9
   855 ;; This function calls:
   856 ;;		_I2C_2_Master_Init
   857 ;;		_Interrupts_init
   858 ;;		_Timer0_init
   859 ;;		_color_click_init
   860 ;;		_color_processor_easy
   861 ;;		_color_processor_hard
   862 ;;		_color_read
   863 ;;		_forward
   864 ;;		_initDCmotorsPWM
   865 ;;		_initUSART4
   866 ;;		_motor_action
   867 ;;		_sendStringSerial4
   868 ;;		_setMotorPWM
   869 ;;		_spin_180
   870 ;;		_sprintf
   871 ;;		_stop
   872 ;; This function is called by:
   873 ;;		Startup code after reset
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           	psect	text0
   878   000E14                     __ptext0:
   879                           	callstack 0
   880   000E14                     _main:
   881                           	callstack 22
   882   000E14                     
   883                           ;../main.c: 22:     color_click_init();
   884   000E14  EC30  F014         	call	_color_click_init	;wreg free
   885   000E18                     
   886                           ;../main.c: 23:     initDCmotorsPWM(20);
   887   000E18  0E00               	movlw	0
   888   000E1A  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   889   000E1C  0E14               	movlw	20
   890   000E1E  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   891   000E20  EC71  F015         	call	_initDCmotorsPWM	;wreg free
   892   000E24                     
   893                           ;../main.c: 24:     Interrupts_init();
   894   000E24  EC77  F016         	call	_Interrupts_init	;wreg free
   895   000E28                     
   896                           ;../main.c: 25:     Timer0_init();
   897   000E28  EC4C  F016         	call	_Timer0_init	;wreg free
   898   000E2C                     
   899                           ;../main.c: 26:     I2C_2_Master_Init();
   900   000E2C  EC00  F016         	call	_I2C_2_Master_Init	;wreg free
   901   000E30                     
   902                           ;../main.c: 27:     initUSART4();
   903   000E30  EC5C  F016         	call	_initUSART4	;wreg free
   904   000E34                     
   905                           ;../main.c: 32:     motorL.power = 0;
   906   000E34  0E00               	movlw	0
   907   000E36  0101               	movlb	1	; () banked
   908   000E38  6FE7               	movwf	main@motorL& (0+255),b
   909   000E3A                     
   910                           ; BSR set to: 1
   911                           ;../main.c: 33:     motorL.direction = 0;
   912   000E3A  0E00               	movlw	0
   913   000E3C  6FE8               	movwf	(main@motorL+1)& (0+255),b
   914   000E3E                     
   915                           ; BSR set to: 1
   916                           ;../main.c: 34:     motorL.dutyHighByte = (unsigned char *)(&PWM6DCH);
   917   000E3E  0EA3               	movlw	163
   918   000E40  6FE9               	movwf	(main@motorL+2)& (0+255),b
   919   000E42  0E0F               	movlw	15
   920   000E44  6FEA               	movwf	(main@motorL+3)& (0+255),b
   921   000E46                     
   922                           ; BSR set to: 1
   923                           ;../main.c: 35:     motorL.dir_LAT = (unsigned char *)(&LATE);
   924   000E46  0E7D               	movlw	125
   925   000E48  6FEB               	movwf	(main@motorL+4)& (0+255),b
   926   000E4A  0E0F               	movlw	15
   927   000E4C  6FEC               	movwf	(main@motorL+5)& (0+255),b
   928   000E4E                     
   929                           ; BSR set to: 1
   930                           ;../main.c: 36:     motorL.dir_pin = 4;
   931   000E4E  0E04               	movlw	4
   932   000E50  6FED               	movwf	(main@motorL+6)& (0+255),b
   933   000E52                     
   934                           ; BSR set to: 1
   935                           ;../main.c: 37:     motorL.PWMperiod = PWMcycle;
   936   000E52  0E00               	movlw	0
   937   000E54  6FEF               	movwf	(main@motorL+8)& (0+255),b
   938   000E56  0EC8               	movlw	200
   939   000E58  6FEE               	movwf	(main@motorL+7)& (0+255),b
   940   000E5A                     
   941                           ; BSR set to: 1
   942                           ;../main.c: 38:     motorR.power = 0;
   943   000E5A  0E00               	movlw	0
   944   000E5C  6FDE               	movwf	main@motorR& (0+255),b
   945   000E5E                     
   946                           ; BSR set to: 1
   947                           ;../main.c: 39:     motorR.direction = 0;
   948   000E5E  0E00               	movlw	0
   949   000E60  6FDF               	movwf	(main@motorR+1)& (0+255),b
   950                           
   951                           ;../main.c: 40:     motorR.dutyHighByte = (unsigned char *)(&PWM7DCH);
   952   000E62  0EA0               	movlw	160
   953   000E64  6FE0               	movwf	(main@motorR+2)& (0+255),b
   954   000E66  0E0F               	movlw	15
   955   000E68  6FE1               	movwf	(main@motorR+3)& (0+255),b
   956                           
   957                           ;../main.c: 41:     motorR.dir_LAT = (unsigned char *)(&LATG);
   958   000E6A  0E7F               	movlw	127
   959   000E6C  6FE2               	movwf	(main@motorR+4)& (0+255),b
   960   000E6E  0E0F               	movlw	15
   961   000E70  6FE3               	movwf	(main@motorR+5)& (0+255),b
   962   000E72                     
   963                           ; BSR set to: 1
   964                           ;../main.c: 42:     motorR.dir_pin = 6;
   965   000E72  0E06               	movlw	6
   966   000E74  6FE4               	movwf	(main@motorR+6)& (0+255),b
   967   000E76                     
   968                           ; BSR set to: 1
   969                           ;../main.c: 43:     motorR.PWMperiod = PWMcycle;
   970   000E76  0E00               	movlw	0
   971   000E78  6FE6               	movwf	(main@motorR+8)& (0+255),b
   972   000E7A  0EC8               	movlw	200
   973   000E7C  6FE5               	movwf	(main@motorR+7)& (0+255),b
   974   000E7E                     
   975                           ; BSR set to: 1
   976                           ;../main.c: 44:     setMotorPWM(&motorL);
   977   000E7E  0EE7               	movlw	low main@motorL
   978   000E80  6E0F               	movwf	setMotorPWM@m^0,c
   979   000E82  0E01               	movlw	high main@motorL
   980   000E84  6E10               	movwf	(setMotorPWM@m+1)^0,c
   981   000E86  ECF3  F00B         	call	_setMotorPWM	;wreg free
   982   000E8A                     
   983                           ;../main.c: 45:     setMotorPWM(&motorR);
   984   000E8A  0EDE               	movlw	low main@motorR
   985   000E8C  6E0F               	movwf	setMotorPWM@m^0,c
   986   000E8E  0E01               	movlw	high main@motorR
   987   000E90  6E10               	movwf	(setMotorPWM@m+1)^0,c
   988   000E92  ECF3  F00B         	call	_setMotorPWM	;wreg free
   989   000E96                     l193:
   990   000E96  B68E               	btfsc	142,3,c	;volatile
   991   000E98  EF50  F007         	goto	u1561
   992   000E9C  EF52  F007         	goto	u1560
   993   000EA0                     u1561:
   994   000EA0  EF4B  F007         	goto	l193
   995   000EA4                     u1560:
   996   000EA4                     
   997                           ;../main.c: 76:         for (int i=0;i<8;i++){
   998   000EA4  0E00               	movlw	0
   999   000EA6  0101               	movlb	1	; () banked
  1000   000EA8  6FCD               	movwf	(main@i+1)& (0+255),b
  1001   000EAA  0E00               	movlw	0
  1002   000EAC  6FCC               	movwf	main@i& (0+255),b
  1003   000EAE                     l3031:
  1004                           
  1005                           ; BSR set to: 1
  1006                           ;../main.c: 77:             color_read(&RGB_calibrated);
  1007   000EAE  0ECE               	movlw	low main@RGB_calibrated
  1008   000EB0  6E0C               	movwf	color_read@rgb^0,c
  1009   000EB2  0E01               	movlw	high main@RGB_calibrated
  1010   000EB4  6E0D               	movwf	(color_read@rgb+1)^0,c
  1011   000EB6  ECDB  F010         	call	_color_read	;wreg free
  1012   000EBA                     
  1013                           ;../main.c: 78:             color_calibrated[4*i] = RGB_calibrated.L;
  1014   000EBA  C1CC  F059         	movff	main@i,??_main
  1015   000EBE  C1CD  F05A         	movff	main@i+1,??_main+1
  1016   000EC2  90D8               	bcf	status,0,c
  1017   000EC4  3659               	rlcf	??_main^0,f,c
  1018   000EC6  365A               	rlcf	(??_main+1)^0,f,c
  1019   000EC8  90D8               	bcf	status,0,c
  1020   000ECA  3659               	rlcf	??_main^0,f,c
  1021   000ECC  365A               	rlcf	(??_main+1)^0,f,c
  1022   000ECE  90D8               	bcf	status,0,c
  1023   000ED0  3659               	rlcf	??_main^0,f,c
  1024   000ED2  365A               	rlcf	(??_main+1)^0,f,c
  1025   000ED4  0E82               	movlw	low main@color_calibrated
  1026   000ED6  2459               	addwf	??_main^0,w,c
  1027   000ED8  6ED9               	movwf	fsr2l,c
  1028   000EDA  0E01               	movlw	high main@color_calibrated
  1029   000EDC  205A               	addwfc	(??_main+1)^0,w,c
  1030   000EDE  6EDA               	movwf	fsr2h,c
  1031   000EE0  C1CE  FFDE         	movff	main@RGB_calibrated,postinc2
  1032   000EE4  C1CF  FFDD         	movff	main@RGB_calibrated+1,postdec2
  1033   000EE8                     
  1034                           ;../main.c: 79:             color_calibrated[4*i+1] = RGB_calibrated.R;
  1035   000EE8  C1CC  F059         	movff	main@i,??_main
  1036   000EEC  C1CD  F05A         	movff	main@i+1,??_main+1
  1037   000EF0  90D8               	bcf	status,0,c
  1038   000EF2  3659               	rlcf	??_main^0,f,c
  1039   000EF4  365A               	rlcf	(??_main+1)^0,f,c
  1040   000EF6  90D8               	bcf	status,0,c
  1041   000EF8  3659               	rlcf	??_main^0,f,c
  1042   000EFA  365A               	rlcf	(??_main+1)^0,f,c
  1043   000EFC  90D8               	bcf	status,0,c
  1044   000EFE  3659               	rlcf	??_main^0,f,c
  1045   000F00  365A               	rlcf	(??_main+1)^0,f,c
  1046   000F02  0E02               	movlw	2
  1047   000F04  2659               	addwf	??_main^0,f,c
  1048   000F06  0E00               	movlw	0
  1049   000F08  225A               	addwfc	(??_main+1)^0,f,c
  1050   000F0A  0E82               	movlw	low main@color_calibrated
  1051   000F0C  2459               	addwf	??_main^0,w,c
  1052   000F0E  6ED9               	movwf	fsr2l,c
  1053   000F10  0E01               	movlw	high main@color_calibrated
  1054   000F12  205A               	addwfc	(??_main+1)^0,w,c
  1055   000F14  6EDA               	movwf	fsr2h,c
  1056   000F16  C1D0  FFDE         	movff	main@RGB_calibrated+2,postinc2
  1057   000F1A  C1D1  FFDD         	movff	main@RGB_calibrated+3,postdec2
  1058   000F1E                     
  1059                           ;../main.c: 80:             color_calibrated[4*i+2] = RGB_calibrated.G;
  1060   000F1E  C1CC  F059         	movff	main@i,??_main
  1061   000F22  C1CD  F05A         	movff	main@i+1,??_main+1
  1062   000F26  90D8               	bcf	status,0,c
  1063   000F28  3659               	rlcf	??_main^0,f,c
  1064   000F2A  365A               	rlcf	(??_main+1)^0,f,c
  1065   000F2C  90D8               	bcf	status,0,c
  1066   000F2E  3659               	rlcf	??_main^0,f,c
  1067   000F30  365A               	rlcf	(??_main+1)^0,f,c
  1068   000F32  90D8               	bcf	status,0,c
  1069   000F34  3659               	rlcf	??_main^0,f,c
  1070   000F36  365A               	rlcf	(??_main+1)^0,f,c
  1071   000F38  0E04               	movlw	4
  1072   000F3A  2659               	addwf	??_main^0,f,c
  1073   000F3C  0E00               	movlw	0
  1074   000F3E  225A               	addwfc	(??_main+1)^0,f,c
  1075   000F40  0E82               	movlw	low main@color_calibrated
  1076   000F42  2459               	addwf	??_main^0,w,c
  1077   000F44  6ED9               	movwf	fsr2l,c
  1078   000F46  0E01               	movlw	high main@color_calibrated
  1079   000F48  205A               	addwfc	(??_main+1)^0,w,c
  1080   000F4A  6EDA               	movwf	fsr2h,c
  1081   000F4C  C1D2  FFDE         	movff	main@RGB_calibrated+4,postinc2
  1082   000F50  C1D3  FFDD         	movff	main@RGB_calibrated+5,postdec2
  1083   000F54                     
  1084                           ;../main.c: 81:             color_calibrated[4*i+3] = RGB_calibrated.B;
  1085   000F54  C1CC  F059         	movff	main@i,??_main
  1086   000F58  C1CD  F05A         	movff	main@i+1,??_main+1
  1087   000F5C  90D8               	bcf	status,0,c
  1088   000F5E  3659               	rlcf	??_main^0,f,c
  1089   000F60  365A               	rlcf	(??_main+1)^0,f,c
  1090   000F62  90D8               	bcf	status,0,c
  1091   000F64  3659               	rlcf	??_main^0,f,c
  1092   000F66  365A               	rlcf	(??_main+1)^0,f,c
  1093   000F68  90D8               	bcf	status,0,c
  1094   000F6A  3659               	rlcf	??_main^0,f,c
  1095   000F6C  365A               	rlcf	(??_main+1)^0,f,c
  1096   000F6E  0E06               	movlw	6
  1097   000F70  2659               	addwf	??_main^0,f,c
  1098   000F72  0E00               	movlw	0
  1099   000F74  225A               	addwfc	(??_main+1)^0,f,c
  1100   000F76  0E82               	movlw	low main@color_calibrated
  1101   000F78  2459               	addwf	??_main^0,w,c
  1102   000F7A  6ED9               	movwf	fsr2l,c
  1103   000F7C  0E01               	movlw	high main@color_calibrated
  1104   000F7E  205A               	addwfc	(??_main+1)^0,w,c
  1105   000F80  6EDA               	movwf	fsr2h,c
  1106   000F82  C1D4  FFDE         	movff	main@RGB_calibrated+6,postinc2
  1107   000F86  C1D5  FFDD         	movff	main@RGB_calibrated+7,postdec2
  1108   000F8A                     
  1109                           ;../main.c: 82:             LATHbits.LATH3 = 1;
  1110   000F8A  8680               	bsf	128,3,c	;volatile
  1111   000F8C                     
  1112                           ;../main.c: 84:             char readout2[100];;../main.c: 85:             sprintf(reado
      +                          ut2,"%d %d %d %d \r\n", RGB_calibrated.L,RGB_calibrated.R,RGB_calibrated.G,RGB_calibrate
      +                          d.B);
  1113   000F8C  0E7B               	movlw	low main@readout2
  1114   000F8E  0100               	movlb	0	; () banked
  1115   000F90  6F60               	movwf	sprintf@s& (0+255),b
  1116   000F92  0E00               	movlw	high main@readout2
  1117   000F94  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1118   000F96  0E04               	movlw	low (STR_2+3)
  1119   000F98  6F62               	movwf	sprintf@fmt& (0+255),b
  1120   000F9A  0E0E               	movlw	high (STR_2+3)
  1121   000F9C  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1122   000F9E  C1CE  F064         	movff	main@RGB_calibrated,?_sprintf+4
  1123   000FA2  C1CF  F065         	movff	main@RGB_calibrated+1,?_sprintf+5
  1124   000FA6  C1D0  F066         	movff	main@RGB_calibrated+2,?_sprintf+6
  1125   000FAA  C1D1  F067         	movff	main@RGB_calibrated+3,?_sprintf+7
  1126   000FAE  C1D2  F068         	movff	main@RGB_calibrated+4,?_sprintf+8
  1127   000FB2  C1D3  F069         	movff	main@RGB_calibrated+5,?_sprintf+9
  1128   000FB6  C1D4  F06A         	movff	main@RGB_calibrated+6,?_sprintf+10
  1129   000FBA  C1D5  F06B         	movff	main@RGB_calibrated+7,?_sprintf+11
  1130   000FBE  EC5D  F014         	call	_sprintf	;wreg free
  1131   000FC2                     
  1132                           ;../main.c: 86:             sendStringSerial4(readout2);
  1133   000FC2  0E7B               	movlw	low main@readout2
  1134   000FC4  6E02               	movwf	sendStringSerial4@string^0,c
  1135   000FC6  0E00               	movlw	high main@readout2
  1136   000FC8  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1137   000FCA  ECD3  F015         	call	_sendStringSerial4	;wreg free
  1138   000FCE                     
  1139                           ;../main.c: 87:             _delay((unsigned long)((2000)*(64000000/4000.0)));
  1140   000FCE  0EA3               	movlw	163
  1141   000FD0  6E5A               	movwf	(??_main+1)^0,c
  1142   000FD2  0E57               	movlw	87
  1143   000FD4  6E59               	movwf	??_main^0,c
  1144   000FD6  0E02               	movlw	2
  1145   000FD8                     u1707:
  1146   000FD8  2EE8               	decfsz	wreg,f,c
  1147   000FDA  D7FE               	bra	u1707
  1148   000FDC  2E59               	decfsz	??_main^0,f,c
  1149   000FDE  D7FC               	bra	u1707
  1150   000FE0  2E5A               	decfsz	(??_main+1)^0,f,c
  1151   000FE2  D7FA               	bra	u1707
  1152   000FE4  D000               	nop2	
  1153   000FE6                     
  1154                           ;../main.c: 88:             LATHbits.LATH3 = 0;
  1155   000FE6  9680               	bcf	128,3,c	;volatile
  1156   000FE8                     
  1157                           ;../main.c: 89:             _delay((unsigned long)((2000)*(64000000/4000.0)));
  1158   000FE8  0EA3               	movlw	163
  1159   000FEA  6E5A               	movwf	(??_main+1)^0,c
  1160   000FEC  0E57               	movlw	87
  1161   000FEE  6E59               	movwf	??_main^0,c
  1162   000FF0  0E02               	movlw	2
  1163   000FF2                     u1717:
  1164   000FF2  2EE8               	decfsz	wreg,f,c
  1165   000FF4  D7FE               	bra	u1717
  1166   000FF6  2E59               	decfsz	??_main^0,f,c
  1167   000FF8  D7FC               	bra	u1717
  1168   000FFA  2E5A               	decfsz	(??_main+1)^0,f,c
  1169   000FFC  D7FA               	bra	u1717
  1170   000FFE  D000               	nop2	
  1171   001000                     
  1172                           ;../main.c: 90:         }
  1173   001000  0101               	movlb	1	; () banked
  1174   001002  4BCC               	infsnz	main@i& (0+255),f,b
  1175   001004  2BCD               	incf	(main@i+1)& (0+255),f,b
  1176   001006                     
  1177                           ; BSR set to: 1
  1178   001006  BFCD               	btfsc	(main@i+1)& (0+255),7,b
  1179   001008  EF0F  F008         	goto	u1571
  1180   00100C  51CD               	movf	(main@i+1)& (0+255),w,b
  1181   00100E  E109               	bnz	u1570
  1182   001010  0E08               	movlw	8
  1183   001012  5DCC               	subwf	main@i& (0+255),w,b
  1184   001014  A0D8               	btfss	status,0,c
  1185   001016  EF0F  F008         	goto	u1571
  1186   00101A  EF11  F008         	goto	u1570
  1187   00101E                     u1571:
  1188   00101E  EF57  F007         	goto	l3031
  1189   001022                     u1570:
  1190   001022                     l3057:
  1191   001022  0E01               	movlw	1
  1192   001024  A68E               	btfss	142,3,c	;volatile
  1193   001026  0E00               	movlw	0
  1194   001028  A48E               	btfss	142,2,c	;volatile
  1195   00102A  0E00               	movlw	0
  1196   00102C  B0E8               	btfsc	wreg,0,c
  1197   00102E  EF1B  F008         	goto	u1581
  1198   001032  EF1F  F008         	goto	u1580
  1199   001036                     u1581:
  1200   001036  6A59               	clrf	??_main^0,c
  1201   001038  2A59               	incf	??_main^0,f,c
  1202   00103A  EF20  F008         	goto	u1588
  1203   00103E                     u1580:
  1204   00103E  6A59               	clrf	??_main^0,c
  1205   001040                     u1588:
  1206   001040  5059               	movf	??_main^0,w,c
  1207   001042  A4D8               	btfss	status,2,c
  1208   001044  EF26  F008         	goto	u1591
  1209   001048  EF28  F008         	goto	u1590
  1210   00104C                     u1591:
  1211   00104C  EF11  F008         	goto	l3057
  1212   001050                     u1590:
  1213   001050                     
  1214                           ;../main.c: 98:         if (!PORTFbits.RF2){LATDbits.LATD7 = 1;}
  1215   001050  B48E               	btfsc	142,2,c	;volatile
  1216   001052  EF2D  F008         	goto	u1601
  1217   001056  EF2F  F008         	goto	u1600
  1218   00105A                     u1601:
  1219   00105A  EF32  F008         	goto	l201
  1220   00105E                     u1600:
  1221   00105E  8E7C               	bsf	124,7,c	;volatile
  1222   001060  EF06  F009         	goto	l3103
  1223   001064                     l201:
  1224   001064  8680               	bsf	128,3,c	;volatile
  1225   001066  EF06  F009         	goto	l3103
  1226   00106A                     l3061:
  1227                           
  1228                           ; BSR set to: 1
  1229                           ;../main.c: 103:             time = 0;
  1230   00106A  0E00               	movlw	0
  1231   00106C  6FF5               	movwf	(_time+1)& (0+255),b
  1232   00106E  0E00               	movlw	0
  1233   001070  6FF4               	movwf	_time& (0+255),b
  1234   001072                     
  1235                           ; BSR set to: 1
  1236                           ;../main.c: 104:             forward(&motorL,&motorR);
  1237   001072  0EE7               	movlw	low main@motorL
  1238   001074  6E1A               	movwf	forward@mL^0,c
  1239   001076  0E01               	movlw	high main@motorL
  1240   001078  6E1B               	movwf	(forward@mL+1)^0,c
  1241   00107A  0EDE               	movlw	low main@motorR
  1242   00107C  6E1C               	movwf	forward@mR^0,c
  1243   00107E  0E01               	movlw	high main@motorR
  1244   001080  6E1D               	movwf	(forward@mR+1)^0,c
  1245   001082  ECAE  F013         	call	_forward	;wreg free
  1246   001086                     
  1247                           ;../main.c: 105:             color_read(&RGB_recorded);
  1248   001086  0ED6               	movlw	low main@RGB_recorded
  1249   001088  6E0C               	movwf	color_read@rgb^0,c
  1250   00108A  0E01               	movlw	high main@RGB_recorded
  1251   00108C  6E0D               	movwf	(color_read@rgb+1)^0,c
  1252   00108E  ECDB  F010         	call	_color_read	;wreg free
  1253   001092                     
  1254                           ;../main.c: 106:             if (RGB_recorded.L<upperbound_calibrated && RGB_recorded.L>
      +                          lowerbound_calibrated){color_flag=1;}
  1255   001092  0101               	movlb	1	; () banked
  1256   001094  51C2               	movf	main@upperbound_calibrated& (0+255),w,b
  1257   001096  5DD6               	subwf	main@RGB_recorded& (0+255),w,b
  1258   001098  51C3               	movf	(main@upperbound_calibrated+1)& (0+255),w,b
  1259   00109A  59D7               	subwfb	(main@RGB_recorded+1)& (0+255),w,b
  1260   00109C  B0D8               	btfsc	status,0,c
  1261   00109E  EF53  F008         	goto	u1611
  1262   0010A2  EF55  F008         	goto	u1610
  1263   0010A6                     u1611:
  1264   0010A6  EF67  F008         	goto	l3073
  1265   0010AA                     u1610:
  1266   0010AA                     
  1267                           ; BSR set to: 1
  1268   0010AA  51D6               	movf	main@RGB_recorded& (0+255),w,b
  1269   0010AC  0100               	movlb	0	; () banked
  1270   0010AE  5DFD               	subwf	main@lowerbound_calibrated& (0+255),w,b
  1271   0010B0  0101               	movlb	1	; () banked
  1272   0010B2  51D7               	movf	(main@RGB_recorded+1)& (0+255),w,b
  1273   0010B4  0100               	movlb	0	; () banked
  1274   0010B6  59FE               	subwfb	(main@lowerbound_calibrated+1)& (0+255),w,b
  1275   0010B8  B0D8               	btfsc	status,0,c
  1276   0010BA  EF61  F008         	goto	u1621
  1277   0010BE  EF63  F008         	goto	u1620
  1278   0010C2                     u1621:
  1279   0010C2  EF67  F008         	goto	l3073
  1280   0010C6                     u1620:
  1281   0010C6                     
  1282                           ; BSR set to: 0
  1283   0010C6  0E00               	movlw	0
  1284   0010C8  6E5C               	movwf	(main@color_flag+1)^0,c
  1285   0010CA  0E01               	movlw	1
  1286   0010CC  6E5B               	movwf	main@color_flag^0,c
  1287   0010CE                     l3073:
  1288                           
  1289                           ;../main.c: 107:             if (color_flag){
  1290   0010CE  505B               	movf	main@color_flag^0,w,c
  1291   0010D0  105C               	iorwf	(main@color_flag+1)^0,w,c
  1292   0010D2  B4D8               	btfsc	status,2,c
  1293   0010D4  EF6E  F008         	goto	u1631
  1294   0010D8  EF70  F008         	goto	u1630
  1295   0010DC                     u1631:
  1296   0010DC  EFFA  F008         	goto	l3101
  1297   0010E0                     u1630:
  1298   0010E0                     
  1299                           ;../main.c: 108:                 stop(&motorL,&motorR);
  1300   0010E0  0EE7               	movlw	low main@motorL
  1301   0010E2  6E1A               	movwf	stop@mL^0,c
  1302   0010E4  0E01               	movlw	high main@motorL
  1303   0010E6  6E1B               	movwf	(stop@mL+1)^0,c
  1304   0010E8  0EDE               	movlw	low main@motorR
  1305   0010EA  6E1C               	movwf	stop@mR^0,c
  1306   0010EC  0E01               	movlw	high main@motorR
  1307   0010EE  6E1D               	movwf	(stop@mR+1)^0,c
  1308   0010F0  EC67  F013         	call	_stop	;wreg free
  1309   0010F4                     
  1310                           ;../main.c: 109:                 color_read(&RGB_recorded);
  1311   0010F4  0ED6               	movlw	low main@RGB_recorded
  1312   0010F6  6E0C               	movwf	color_read@rgb^0,c
  1313   0010F8  0E01               	movlw	high main@RGB_recorded
  1314   0010FA  6E0D               	movwf	(color_read@rgb+1)^0,c
  1315   0010FC  ECDB  F010         	call	_color_read	;wreg free
  1316   001100                     
  1317                           ;../main.c: 110:                 if (LATDbits.LATD7){color_name = color_processor_easy(&
      +                          RGB_recorded);}
  1318   001100  AE7C               	btfss	124,7,c	;volatile
  1319   001102  EF85  F008         	goto	u1641
  1320   001106  EF87  F008         	goto	u1640
  1321   00110A                     u1641:
  1322   00110A  EF93  F008         	goto	l3083
  1323   00110E                     u1640:
  1324   00110E  0ED6               	movlw	low main@RGB_recorded
  1325   001110  6E01               	movwf	color_processor_easy@rgb^0,c
  1326   001112  0E01               	movlw	high main@RGB_recorded
  1327   001114  6E02               	movwf	(color_processor_easy@rgb+1)^0,c
  1328   001116  EC7C  F010         	call	_color_processor_easy	;wreg free
  1329   00111A  C001  F1C8         	movff	?_color_processor_easy,main@color_name
  1330   00111E  C002  F1C9         	movff	?_color_processor_easy+1,main@color_name+1
  1331   001122  EFA1  F008         	goto	l3085
  1332   001126                     l3083:
  1333   001126  0ED6               	movlw	low main@RGB_recorded
  1334   001128  6E01               	movwf	color_processor_hard@rgb^0,c
  1335   00112A  0E01               	movlw	high main@RGB_recorded
  1336   00112C  6E02               	movwf	(color_processor_hard@rgb+1)^0,c
  1337   00112E  0E82               	movlw	low main@color_calibrated
  1338   001130  6E03               	movwf	color_processor_hard@calibrated^0,c
  1339   001132  0E01               	movlw	high main@color_calibrated
  1340   001134  6E04               	movwf	(color_processor_hard@calibrated+1)^0,c
  1341   001136  ECA1  F00D         	call	_color_processor_hard	;wreg free
  1342   00113A  C001  F1C8         	movff	?_color_processor_hard,main@color_name
  1343   00113E  C002  F1C9         	movff	?_color_processor_hard+1,main@color_name+1
  1344   001142                     l3085:
  1345                           
  1346                           ;../main.c: 112:                 color_path[j] = color_name;
  1347   001142  90D8               	bcf	status,0,c
  1348   001144  0101               	movlb	1	; () banked
  1349   001146  35C6               	rlcf	main@j& (0+255),w,b
  1350   001148  6ED9               	movwf	fsr2l,c
  1351   00114A  35C7               	rlcf	(main@j+1)& (0+255),w,b
  1352   00114C  6EDA               	movwf	fsr2h,c
  1353   00114E  0EDF               	movlw	low main@color_path
  1354   001150  26D9               	addwf	fsr2l,f,c
  1355   001152  0E00               	movlw	high main@color_path
  1356   001154  22DA               	addwfc	fsr2h,f,c
  1357   001156  C1C8  FFDE         	movff	main@color_name,postinc2
  1358   00115A  C1C9  FFDD         	movff	main@color_name+1,postdec2
  1359   00115E                     
  1360                           ; BSR set to: 1
  1361                           ;../main.c: 113:                 time_path[j] = time;
  1362   00115E  90D8               	bcf	status,0,c
  1363   001160  35C6               	rlcf	main@j& (0+255),w,b
  1364   001162  6ED9               	movwf	fsr2l,c
  1365   001164  35C7               	rlcf	(main@j+1)& (0+255),w,b
  1366   001166  6EDA               	movwf	fsr2h,c
  1367   001168  0E64               	movlw	low main@time_path
  1368   00116A  26D9               	addwf	fsr2l,f,c
  1369   00116C  0E01               	movlw	high main@time_path
  1370   00116E  22DA               	addwfc	fsr2h,f,c
  1371   001170  C1F4  FFDE         	movff	_time,postinc2
  1372   001174  C1F5  FFDD         	movff	_time+1,postdec2
  1373   001178                     
  1374                           ; BSR set to: 1
  1375                           ;../main.c: 116:                 char readout3[100];;../main.c: 117:                 spr
      +                          intf(readout3,"%d %d %d %d %d \r\n", color_name,RGB_recorded.L,RGB_recorded.R,RGB_record
      +                          ed.G,RGB_recorded.B);
  1376   001178  0E00               	movlw	low main@readout3
  1377   00117A  0100               	movlb	0	; () banked
  1378   00117C  6F60               	movwf	sprintf@s& (0+255),b
  1379   00117E  0E01               	movlw	high main@readout3
  1380   001180  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1381   001182  0E01               	movlw	low STR_2
  1382   001184  6F62               	movwf	sprintf@fmt& (0+255),b
  1383   001186  0E0E               	movlw	high STR_2
  1384   001188  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1385   00118A  C1C8  F064         	movff	main@color_name,?_sprintf+4
  1386   00118E  C1C9  F065         	movff	main@color_name+1,?_sprintf+5
  1387   001192  C1D6  F066         	movff	main@RGB_recorded,?_sprintf+6
  1388   001196  C1D7  F067         	movff	main@RGB_recorded+1,?_sprintf+7
  1389   00119A  C1D8  F068         	movff	main@RGB_recorded+2,?_sprintf+8
  1390   00119E  C1D9  F069         	movff	main@RGB_recorded+3,?_sprintf+9
  1391   0011A2  C1DA  F06A         	movff	main@RGB_recorded+4,?_sprintf+10
  1392   0011A6  C1DB  F06B         	movff	main@RGB_recorded+5,?_sprintf+11
  1393   0011AA  C1DC  F06C         	movff	main@RGB_recorded+6,?_sprintf+12
  1394   0011AE  C1DD  F06D         	movff	main@RGB_recorded+7,?_sprintf+13
  1395   0011B2  EC5D  F014         	call	_sprintf	;wreg free
  1396   0011B6                     
  1397                           ;../main.c: 118:                 sendStringSerial4(readout3);
  1398   0011B6  0E00               	movlw	low main@readout3
  1399   0011B8  6E02               	movwf	sendStringSerial4@string^0,c
  1400   0011BA  0E01               	movlw	high main@readout3
  1401   0011BC  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1402   0011BE  ECD3  F015         	call	_sendStringSerial4	;wreg free
  1403   0011C2                     
  1404                           ;../main.c: 120:                 motor_action(color_name,&motorL,&motorR);
  1405   0011C2  C1C8  F022         	movff	main@color_name,motor_action@color
  1406   0011C6  C1C9  F023         	movff	main@color_name+1,motor_action@color+1
  1407   0011CA  0EE7               	movlw	low main@motorL
  1408   0011CC  6E24               	movwf	motor_action@l^0,c
  1409   0011CE  0E01               	movlw	high main@motorL
  1410   0011D0  6E25               	movwf	(motor_action@l+1)^0,c
  1411   0011D2  0EDE               	movlw	low main@motorR
  1412   0011D4  6E26               	movwf	motor_action@r^0,c
  1413   0011D6  0E01               	movlw	high main@motorR
  1414   0011D8  6E27               	movwf	(motor_action@r+1)^0,c
  1415   0011DA  ECCC  F00A         	call	_motor_action	;wreg free
  1416   0011DE                     
  1417                           ;../main.c: 122:                 j++;
  1418   0011DE  0101               	movlb	1	; () banked
  1419   0011E0  4BC6               	infsnz	main@j& (0+255),f,b
  1420   0011E2  2BC7               	incf	(main@j+1)& (0+255),f,b
  1421   0011E4                     
  1422                           ; BSR set to: 1
  1423                           ;../main.c: 123:                 time = 0;
  1424   0011E4  0E00               	movlw	0
  1425   0011E6  6FF5               	movwf	(_time+1)& (0+255),b
  1426   0011E8  0E00               	movlw	0
  1427   0011EA  6FF4               	movwf	_time& (0+255),b
  1428   0011EC                     
  1429                           ; BSR set to: 1
  1430                           ;../main.c: 124:                 color_flag = 0;
  1431   0011EC  0E00               	movlw	0
  1432   0011EE  6E5C               	movwf	(main@color_flag+1)^0,c
  1433   0011F0  0E00               	movlw	0
  1434   0011F2  6E5B               	movwf	main@color_flag^0,c
  1435   0011F4                     l3101:
  1436                           
  1437                           ;../main.c: 126:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1438   0011F4  0E11               	movlw	17
  1439   0011F6  6E5A               	movwf	(??_main+1)^0,c
  1440   0011F8  0E3C               	movlw	60
  1441   0011FA  6E59               	movwf	??_main^0,c
  1442   0011FC  0ECB               	movlw	203
  1443   0011FE                     u1727:
  1444   0011FE  2EE8               	decfsz	wreg,f,c
  1445   001200  D7FE               	bra	u1727
  1446   001202  2E59               	decfsz	??_main^0,f,c
  1447   001204  D7FC               	bra	u1727
  1448   001206  2E5A               	decfsz	(??_main+1)^0,f,c
  1449   001208  D7FA               	bra	u1727
  1450   00120A  F000               	nop	
  1451   00120C                     l3103:
  1452                           
  1453                           ;../main.c: 102:         while (color_name != 8){
  1454   00120C  0E08               	movlw	8
  1455   00120E  0101               	movlb	1	; () banked
  1456   001210  19C8               	xorwf	main@color_name& (0+255),w,b
  1457   001212  11C9               	iorwf	(main@color_name+1)& (0+255),w,b
  1458   001214  A4D8               	btfss	status,2,c
  1459   001216  EF0F  F009         	goto	u1651
  1460   00121A  EF11  F009         	goto	u1650
  1461   00121E                     u1651:
  1462   00121E  EF35  F008         	goto	l3061
  1463   001222                     u1650:
  1464   001222                     
  1465                           ; BSR set to: 1
  1466                           ;../main.c: 130:         spin_180(&motorL,&motorR);
  1467   001222  0EE7               	movlw	low main@motorL
  1468   001224  6E1A               	movwf	spin_180@mL^0,c
  1469   001226  0E01               	movlw	high main@motorL
  1470   001228  6E1B               	movwf	(spin_180@mL+1)^0,c
  1471   00122A  0EDE               	movlw	low main@motorR
  1472   00122C  6E1C               	movwf	spin_180@mR^0,c
  1473   00122E  0E01               	movlw	high main@motorR
  1474   001230  6E1D               	movwf	(spin_180@mR+1)^0,c
  1475   001232  ECD2  F011         	call	_spin_180	;wreg free
  1476   001236                     
  1477                           ;../main.c: 131:         for (int k=0;k<15;k++){
  1478   001236  0E00               	movlw	0
  1479   001238  0101               	movlb	1	; () banked
  1480   00123A  6FCB               	movwf	(main@k+1)& (0+255),b
  1481   00123C  0E00               	movlw	0
  1482   00123E  6FCA               	movwf	main@k& (0+255),b
  1483   001240                     l3109:
  1484                           
  1485                           ; BSR set to: 1
  1486   001240  BFCB               	btfsc	(main@k+1)& (0+255),7,b
  1487   001242  EF2C  F009         	goto	u1661
  1488   001246  51CB               	movf	(main@k+1)& (0+255),w,b
  1489   001248  E109               	bnz	u1660
  1490   00124A  0E0F               	movlw	15
  1491   00124C  5DCA               	subwf	main@k& (0+255),w,b
  1492   00124E  A0D8               	btfss	status,0,c
  1493   001250  EF2C  F009         	goto	u1661
  1494   001254  EF2E  F009         	goto	u1660
  1495   001258                     u1661:
  1496   001258  EF30  F009         	goto	l210
  1497   00125C                     u1660:
  1498   00125C  EF4B  F007         	goto	l193
  1499   001260                     l210:
  1500                           
  1501                           ; BSR set to: 1
  1502                           ;../main.c: 132:             INTCONbits.GIE = 0;
  1503   001260  9EF2               	bcf	242,7,c	;volatile
  1504   001262                     
  1505                           ; BSR set to: 1
  1506                           ;../main.c: 133:             time_return = 0;
  1507   001262  0E00               	movlw	0
  1508   001264  6FC5               	movwf	(main@time_return+1)& (0+255),b
  1509   001266  0E00               	movlw	0
  1510   001268  6FC4               	movwf	main@time_return& (0+255),b
  1511   00126A                     
  1512                           ; BSR set to: 1
  1513                           ;../main.c: 134:             motor_action(color_path[k],&motorL,&motorR);
  1514   00126A  90D8               	bcf	status,0,c
  1515   00126C  35CA               	rlcf	main@k& (0+255),w,b
  1516   00126E  6ED9               	movwf	fsr2l,c
  1517   001270  35CB               	rlcf	(main@k+1)& (0+255),w,b
  1518   001272  6EDA               	movwf	fsr2h,c
  1519   001274  0EDF               	movlw	low main@color_path
  1520   001276  26D9               	addwf	fsr2l,f,c
  1521   001278  0E00               	movlw	high main@color_path
  1522   00127A  22DA               	addwfc	fsr2h,f,c
  1523   00127C  CFDE F022          	movff	postinc2,motor_action@color
  1524   001280  CFDD F023          	movff	postdec2,motor_action@color+1
  1525   001284  0EE7               	movlw	low main@motorL
  1526   001286  6E24               	movwf	motor_action@l^0,c
  1527   001288  0E01               	movlw	high main@motorL
  1528   00128A  6E25               	movwf	(motor_action@l+1)^0,c
  1529   00128C  0EDE               	movlw	low main@motorR
  1530   00128E  6E26               	movwf	motor_action@r^0,c
  1531   001290  0E01               	movlw	high main@motorR
  1532   001292  6E27               	movwf	(motor_action@r+1)^0,c
  1533   001294  ECCC  F00A         	call	_motor_action	;wreg free
  1534   001298                     
  1535                           ;../main.c: 135:             forward(&motorL,&motorR);
  1536   001298  0EE7               	movlw	low main@motorL
  1537   00129A  6E1A               	movwf	forward@mL^0,c
  1538   00129C  0E01               	movlw	high main@motorL
  1539   00129E  6E1B               	movwf	(forward@mL+1)^0,c
  1540   0012A0  0EDE               	movlw	low main@motorR
  1541   0012A2  6E1C               	movwf	forward@mR^0,c
  1542   0012A4  0E01               	movlw	high main@motorR
  1543   0012A6  6E1D               	movwf	(forward@mR+1)^0,c
  1544   0012A8  ECAE  F013         	call	_forward	;wreg free
  1545                           
  1546                           ;../main.c: 136:             while (time_return < time_path[k]) {
  1547   0012AC  EF67  F009         	goto	l3123
  1548   0012B0                     l3119:
  1549                           
  1550                           ; BSR set to: 1
  1551                           ;../main.c: 137:                 _delay((unsigned long)((50)*(64000000/4000.0)));
  1552   0012B0  0E05               	movlw	5
  1553   0012B2  6E5A               	movwf	(??_main+1)^0,c
  1554   0012B4  0E0F               	movlw	15
  1555   0012B6  6E59               	movwf	??_main^0,c
  1556   0012B8  0EF1               	movlw	241
  1557   0012BA                     u1737:
  1558   0012BA  2EE8               	decfsz	wreg,f,c
  1559   0012BC  D7FE               	bra	u1737
  1560   0012BE  2E59               	decfsz	??_main^0,f,c
  1561   0012C0  D7FC               	bra	u1737
  1562   0012C2  2E5A               	decfsz	(??_main+1)^0,f,c
  1563   0012C4  D7FA               	bra	u1737
  1564   0012C6  F000               	nop	
  1565   0012C8                     
  1566                           ;../main.c: 138:                 time_return++;
  1567   0012C8  0101               	movlb	1	; () banked
  1568   0012CA  4BC4               	infsnz	main@time_return& (0+255),f,b
  1569   0012CC  2BC5               	incf	(main@time_return+1)& (0+255),f,b
  1570   0012CE                     l3123:
  1571                           
  1572                           ;../main.c: 136:             while (time_return < time_path[k]) {
  1573   0012CE  90D8               	bcf	status,0,c
  1574   0012D0  0101               	movlb	1	; () banked
  1575   0012D2  35CA               	rlcf	main@k& (0+255),w,b
  1576   0012D4  6ED9               	movwf	fsr2l,c
  1577   0012D6  35CB               	rlcf	(main@k+1)& (0+255),w,b
  1578   0012D8  6EDA               	movwf	fsr2h,c
  1579   0012DA  0E64               	movlw	low main@time_path
  1580   0012DC  26D9               	addwf	fsr2l,f,c
  1581   0012DE  0E01               	movlw	high main@time_path
  1582   0012E0  22DA               	addwfc	fsr2h,f,c
  1583   0012E2  50DE               	movf	postinc2,w,c
  1584   0012E4  5DC4               	subwf	main@time_return& (0+255),w,b
  1585   0012E6  50DE               	movf	postinc2,w,c
  1586   0012E8  59C5               	subwfb	(main@time_return+1)& (0+255),w,b
  1587   0012EA  A0D8               	btfss	status,0,c
  1588   0012EC  EF7A  F009         	goto	u1671
  1589   0012F0  EF7C  F009         	goto	u1670
  1590   0012F4                     u1671:
  1591   0012F4  EF58  F009         	goto	l3119
  1592   0012F8                     u1670:
  1593   0012F8                     
  1594                           ; BSR set to: 1
  1595                           ;../main.c: 140:             stop(&motorL,&motorR);
  1596   0012F8  0EE7               	movlw	low main@motorL
  1597   0012FA  6E1A               	movwf	stop@mL^0,c
  1598   0012FC  0E01               	movlw	high main@motorL
  1599   0012FE  6E1B               	movwf	(stop@mL+1)^0,c
  1600   001300  0EDE               	movlw	low main@motorR
  1601   001302  6E1C               	movwf	stop@mR^0,c
  1602   001304  0E01               	movlw	high main@motorR
  1603   001306  6E1D               	movwf	(stop@mR+1)^0,c
  1604   001308  EC67  F013         	call	_stop	;wreg free
  1605   00130C                     
  1606                           ;../main.c: 141:         }
  1607   00130C  0101               	movlb	1	; () banked
  1608   00130E  4BCA               	infsnz	main@k& (0+255),f,b
  1609   001310  2BCB               	incf	(main@k+1)& (0+255),f,b
  1610   001312  EF20  F009         	goto	l3109
  1611   001316  EF1F  F000         	goto	start
  1612   00131A                     __end_of_main:
  1613                           	callstack 0
  1614                           
  1615 ;; *************** function _sprintf *****************
  1616 ;; Defined at:
  1617 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  s               2    0[BANK0 ] PTR unsigned char 
  1620 ;;		 -> main@readout3(100), main@readout2(100), 
  1621 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1622 ;;		 -> STR_2(18), STR_1(15), 
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;  f              11   16[BANK0 ] struct _IO_FILE
  1625 ;;  ap              2   14[BANK0 ] PTR void [1]
  1626 ;;		 -> ?_sprintf(2), 
  1627 ;;  ret             2    0        int 
  1628 ;; Return value:  Size  Location     Type
  1629 ;;                  2    0[BANK0 ] int 
  1630 ;; Registers used:
  1631 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1632 ;; Tracked objects:
  1633 ;;		On entry : 0/0
  1634 ;;		On exit  : 0/0
  1635 ;;		Unchanged: 0/0
  1636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1637 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1638 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1640 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1641 ;;Total ram usage:       27 bytes
  1642 ;; Hardware stack levels used: 1
  1643 ;; Hardware stack levels required when called: 8
  1644 ;; This function calls:
  1645 ;;		_vfprintf
  1646 ;; This function is called by:
  1647 ;;		_main
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           	psect	text1
  1652   0028BA                     __ptext1:
  1653                           	callstack 0
  1654   0028BA                     _sprintf:
  1655                           	callstack 22
  1656   0028BA  0E64               	movlw	low (?_sprintf+4)
  1657   0028BC  0100               	movlb	0	; () banked
  1658   0028BE  6F6E               	movwf	sprintf@ap& (0+255),b
  1659   0028C0  0E00               	movlw	high (?_sprintf+4)
  1660   0028C2  6F6F               	movwf	(sprintf@ap+1)& (0+255),b
  1661   0028C4  C060  F070         	movff	sprintf@s,sprintf@f
  1662   0028C8  C061  F071         	movff	sprintf@s+1,sprintf@f+1
  1663   0028CC                     
  1664                           ; BSR set to: 0
  1665   0028CC  0E00               	movlw	0
  1666   0028CE  6F74               	movwf	(sprintf@f+4)& (0+255),b
  1667   0028D0  0E00               	movlw	0
  1668   0028D2  6F73               	movwf	(sprintf@f+3)& (0+255),b
  1669   0028D4                     
  1670                           ; BSR set to: 0
  1671   0028D4  0E00               	movlw	0
  1672   0028D6  6F7A               	movwf	(sprintf@f+10)& (0+255),b
  1673   0028D8  0E00               	movlw	0
  1674   0028DA  6F79               	movwf	(sprintf@f+9)& (0+255),b
  1675   0028DC                     
  1676                           ; BSR set to: 0
  1677   0028DC  0E70               	movlw	low sprintf@f
  1678   0028DE  6E51               	movwf	vfprintf@fp^0,c
  1679   0028E0  0E00               	movlw	high sprintf@f
  1680   0028E2  6E52               	movwf	(vfprintf@fp+1)^0,c
  1681   0028E4  C062  F053         	movff	sprintf@fmt,vfprintf@fmt
  1682   0028E8  C063  F054         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1683   0028EC  0E6E               	movlw	low sprintf@ap
  1684   0028EE  6E55               	movwf	vfprintf@ap^0,c
  1685   0028F0  0E00               	movlw	high sprintf@ap
  1686   0028F2  6E56               	movwf	(vfprintf@ap+1)^0,c
  1687   0028F4  EC86  F014         	call	_vfprintf	;wreg free
  1688   0028F8  0100               	movlb	0	; () banked
  1689   0028FA  5173               	movf	(sprintf@f+3)& (0+255),w,b
  1690   0028FC  2560               	addwf	sprintf@s& (0+255),w,b
  1691   0028FE  6ED9               	movwf	fsr2l,c
  1692   002900  5174               	movf	(sprintf@f+4)& (0+255),w,b
  1693   002902  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  1694   002904  6EDA               	movwf	fsr2h,c
  1695   002906  0E00               	movlw	0
  1696   002908  6EDF               	movwf	indf2,c
  1697   00290A                     
  1698                           ; BSR set to: 0
  1699   00290A  0012               	return		;funcret
  1700   00290C                     __end_of_sprintf:
  1701                           	callstack 0
  1702                           
  1703 ;; *************** function _vfprintf *****************
  1704 ;; Defined at:
  1705 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
  1708 ;;		 -> sprintf@f(11), 
  1709 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
  1710 ;;		 -> STR_2(18), STR_1(15), 
  1711 ;;  ap              2   84[COMRAM] PTR PTR void 
  1712 ;;		 -> sprintf@ap(2), 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  cfmt            2   86[COMRAM] PTR unsigned char 
  1715 ;;		 -> STR_2(18), STR_1(15), 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  2   80[COMRAM] int 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1725 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1726 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1728 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1729 ;;Total ram usage:        8 bytes
  1730 ;; Hardware stack levels used: 1
  1731 ;; Hardware stack levels required when called: 7
  1732 ;; This function calls:
  1733 ;;		_vfpfcnvrt
  1734 ;; This function is called by:
  1735 ;;		_sprintf
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text2
  1740   00290C                     __ptext2:
  1741                           	callstack 0
  1742   00290C                     _vfprintf:
  1743                           	callstack 22
  1744   00290C                     
  1745                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  1746   00290C  C053  F057         	movff	vfprintf@fmt,vfprintf@cfmt
  1747   002910  C054  F058         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1748                           
  1749                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1750   002914  EF9A  F014         	goto	l2743
  1751   002918                     l2741:
  1752                           
  1753                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1754   002918  C051  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1755   00291C  C052  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1756   002920  0E57               	movlw	low vfprintf@cfmt
  1757   002922  6E41               	movwf	vfpfcnvrt@fmt^0,c
  1758   002924  0E00               	movlw	high vfprintf@cfmt
  1759   002926  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1760   002928  C055  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
  1761   00292C  C056  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1762   002930  EC06  F00F         	call	_vfpfcnvrt	;wreg free
  1763   002934                     l2743:
  1764                           
  1765                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1766   002934  C057  FFF6         	movff	vfprintf@cfmt,tblptrl
  1767   002938  C058  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1768   00293C                     	if	0	;tblptru may be non-zero
  1769   00293C                     	endif
  1770   00293C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1771   00293C  0E00               	movlw	low (__mediumconst shr (0+16))
  1772   00293E  6EF8               	movwf	tblptru,c
  1773   002940                     	endif
  1774   002940  0008               	tblrd		*
  1775   002942  50F5               	movf	tablat,w,c
  1776   002944  0900               	iorlw	0
  1777   002946  A4D8               	btfss	status,2,c
  1778   002948  EFA8  F014         	goto	u1431
  1779   00294C  EFAA  F014         	goto	u1430
  1780   002950                     u1431:
  1781   002950  EF8C  F014         	goto	l2741
  1782   002954                     u1430:
  1783   002954                     
  1784                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  1785   002954  0E00               	movlw	0
  1786   002956  6E52               	movwf	(?_vfprintf+1)^0,c
  1787   002958  0E00               	movlw	0
  1788   00295A  6E51               	movwf	?_vfprintf^0,c
  1789   00295C  0012               	return		;funcret
  1790   00295E                     __end_of_vfprintf:
  1791                           	callstack 0
  1792                           
  1793 ;; *************** function _vfpfcnvrt *****************
  1794 ;; Defined at:
  1795 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
  1798 ;;		 -> sprintf@f(11), 
  1799 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
  1800 ;;		 -> vfprintf@cfmt(2), 
  1801 ;;  ap              2   66[COMRAM] PTR PTR void 
  1802 ;;		 -> sprintf@ap(2), 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;  convarg         8   70[COMRAM] struct .
  1805 ;;  cp              2   78[COMRAM] PTR unsigned char 
  1806 ;;		 -> STR_2(18), STR_1(15), 
  1807 ;;  i               2    0        int 
  1808 ;;  done            2    0        int 
  1809 ;;  c               1    0        unsigned char 
  1810 ;; Return value:  Size  Location     Type
  1811 ;;                  1    wreg      void 
  1812 ;; Registers used:
  1813 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1819 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1820 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1821 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1822 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1823 ;;Total ram usage:       18 bytes
  1824 ;; Hardware stack levels used: 1
  1825 ;; Hardware stack levels required when called: 6
  1826 ;; This function calls:
  1827 ;;		_dtoa
  1828 ;;		_fputc
  1829 ;; This function is called by:
  1830 ;;		_vfprintf
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           	psect	text3
  1835   001E0C                     __ptext3:
  1836                           	callstack 0
  1837   001E0C                     _vfpfcnvrt:
  1838                           	callstack 22
  1839   001E0C                     
  1840                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  1841   001E0C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1842   001E10  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1843   001E14  CFDE FFF6          	movff	postinc2,tblptrl
  1844   001E18  CFDD FFF7          	movff	postdec2,tblptrh
  1845   001E1C                     	if	0	;tblptru may be non-zero
  1846   001E1C                     	endif
  1847   001E1C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1848   001E1C  0E00               	movlw	low (__mediumconst shr (0+16))
  1849   001E1E  6EF8               	movwf	tblptru,c
  1850   001E20                     	endif
  1851   001E20  0008               	tblrd		*
  1852   001E22  50F5               	movf	tablat,w,c
  1853   001E24  0A25               	xorlw	37
  1854   001E26  A4D8               	btfss	status,2,c
  1855   001E28  EF18  F00F         	goto	u1311
  1856   001E2C  EF1A  F00F         	goto	u1310
  1857   001E30                     u1311:
  1858   001E30  EF9E  F00F         	goto	l2507
  1859   001E34                     u1310:
  1860   001E34                     
  1861                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  1862   001E34  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1863   001E38  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1864   001E3C  2ADE               	incf	postinc2,f,c
  1865   001E3E  0E00               	movlw	0
  1866   001E40  22DD               	addwfc	postdec2,f,c
  1867   001E42                     
  1868                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  1869   001E42  0E00               	movlw	0
  1870   001E44  0101               	movlb	1	; () banked
  1871   001E46  6FF1               	movwf	(_width+1)& (0+255),b
  1872   001E48  0E00               	movlw	0
  1873   001E4A  6FF0               	movwf	_width& (0+255),b
  1874   001E4C  C1F0  F1FA         	movff	_width,_flags
  1875   001E50                     
  1876                           ; BSR set to: 1
  1877                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  1878   001E50  69F2               	setf	_prec& (0+255),b
  1879   001E52  69F3               	setf	(_prec+1)& (0+255),b
  1880   001E54                     
  1881                           ; BSR set to: 1
  1882                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1883   001E54  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1884   001E58  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1885   001E5C  CFDE F04F          	movff	postinc2,vfpfcnvrt@cp
  1886   001E60  CFDD F050          	movff	postdec2,vfpfcnvrt@cp+1
  1887   001E64                     
  1888                           ; BSR set to: 1
  1889                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1890   001E64  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1891   001E68  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1892   001E6C                     	if	0	;tblptru may be non-zero
  1893   001E6C                     	endif
  1894   001E6C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1895   001E6C  0E00               	movlw	low (__mediumconst shr (0+16))
  1896   001E6E  6EF8               	movwf	tblptru,c
  1897   001E70                     	endif
  1898   001E70  0008               	tblrd		*
  1899   001E72  50F5               	movf	tablat,w,c
  1900   001E74  0A64               	xorlw	100
  1901   001E76  B4D8               	btfsc	status,2,c
  1902   001E78  EF40  F00F         	goto	u1321
  1903   001E7C  EF42  F00F         	goto	u1320
  1904   001E80                     u1321:
  1905   001E80  EF52  F00F         	goto	l2497
  1906   001E84                     u1320:
  1907   001E84                     
  1908                           ; BSR set to: 1
  1909   001E84  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1910   001E88  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1911   001E8C                     	if	0	;tblptru may be non-zero
  1912   001E8C                     	endif
  1913   001E8C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1914   001E8C  0E00               	movlw	low (__mediumconst shr (0+16))
  1915   001E8E  6EF8               	movwf	tblptru,c
  1916   001E90                     	endif
  1917   001E90  0008               	tblrd		*
  1918   001E92  50F5               	movf	tablat,w,c
  1919   001E94  0A69               	xorlw	105
  1920   001E96  A4D8               	btfss	status,2,c
  1921   001E98  EF50  F00F         	goto	u1331
  1922   001E9C  EF52  F00F         	goto	u1330
  1923   001EA0                     u1331:
  1924   001EA0  EF95  F00F         	goto	l2503
  1925   001EA4                     u1330:
  1926   001EA4                     l2497:
  1927                           
  1928                           ; BSR set to: 1
  1929                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1930   001EA4  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1931   001EA8  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1932   001EAC  CFDF F045          	movff	indf2,??_vfpfcnvrt
  1933   001EB0  0E02               	movlw	2
  1934   001EB2  26DE               	addwf	postinc2,f,c
  1935   001EB4  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  1936   001EB8  0E00               	movlw	0
  1937   001EBA  22DD               	addwfc	postdec2,f,c
  1938   001EBC  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1939   001EC0  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1940   001EC4  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg
  1941   001EC8  CFDD F048          	movff	postdec2,vfpfcnvrt@convarg+1
  1942   001ECC  0E00               	movlw	0
  1943   001ECE  BE48               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1944   001ED0  0EFF               	movlw	-1
  1945   001ED2  6E49               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1946   001ED4  6E4A               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1947   001ED6  6E4B               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1948   001ED8  6E4C               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1949   001EDA  6E4D               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1950   001EDC  6E4E               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1951                           
  1952                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1953   001EDE  0E01               	movlw	1
  1954   001EE0  244F               	addwf	vfpfcnvrt@cp^0,w,c
  1955   001EE2  6E45               	movwf	??_vfpfcnvrt^0,c
  1956   001EE4  0E00               	movlw	0
  1957   001EE6  2050               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1958   001EE8  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  1959   001EEA  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1960   001EEE  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1961   001EF2  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  1962   001EF6  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1963   001EFA                     
  1964                           ; BSR set to: 1
  1965                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1966   001EFA  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1967   001EFE  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1968   001F02  C047  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  1969   001F06  C048  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1970   001F0A  C049  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1971   001F0E  C04A  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1972   001F12  C04B  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1973   001F16  C04C  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1974   001F1A  C04D  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1975   001F1E  C04E  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1976   001F22  EC8D  F009         	call	_dtoa	;wreg free
  1977   001F26  EFB4  F00F         	goto	l1171
  1978   001F2A                     l2503:
  1979                           
  1980                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1981   001F2A  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1982   001F2E  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1983   001F32  2ADE               	incf	postinc2,f,c
  1984   001F34  0E00               	movlw	0
  1985   001F36  22DD               	addwfc	postdec2,f,c
  1986   001F38  EFB4  F00F         	goto	l1171
  1987   001F3C                     l2507:
  1988                           
  1989                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1990   001F3C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1991   001F40  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1992   001F44  CFDE FFF6          	movff	postinc2,tblptrl
  1993   001F48  CFDD FFF7          	movff	postdec2,tblptrh
  1994   001F4C                     	if	0	;tblptru may be non-zero
  1995   001F4C                     	endif
  1996   001F4C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1997   001F4C  0E00               	movlw	low (__mediumconst shr (0+16))
  1998   001F4E  6EF8               	movwf	tblptru,c
  1999   001F50                     	endif
  2000   001F50  0008               	tblrd		*
  2001   001F52  50F5               	movf	tablat,w,c
  2002   001F54  6E01               	movwf	fputc@c^0,c
  2003   001F56  6A02               	clrf	(fputc@c+1)^0,c
  2004   001F58  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2005   001F5C  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2006   001F60  ECB5  F00F         	call	_fputc	;wreg free
  2007   001F64  EF95  F00F         	goto	l2503
  2008   001F68                     l1171:
  2009   001F68  0012               	return		;funcret
  2010   001F6A                     __end_of_vfpfcnvrt:
  2011                           	callstack 0
  2012                           
  2013 ;; *************** function _dtoa *****************
  2014 ;; Defined at:
  2015 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2018 ;;		 -> sprintf@f(11), 
  2019 ;;  d               8   29[COMRAM] long long 
  2020 ;; Auto vars:     Size  Location     Type
  2021 ;;  n               8   51[COMRAM] long long 
  2022 ;;  i               2   59[COMRAM] int 
  2023 ;;  w               2   49[COMRAM] int 
  2024 ;;  p               2   47[COMRAM] int 
  2025 ;;  s               1   61[COMRAM] unsigned char 
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  1    wreg      void 
  2028 ;; Registers used:
  2029 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2035 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2036 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2037 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2038 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2039 ;;Total ram usage:       35 bytes
  2040 ;; Hardware stack levels used: 1
  2041 ;; Hardware stack levels required when called: 5
  2042 ;; This function calls:
  2043 ;;		___aodiv
  2044 ;;		___aomod
  2045 ;;		_abs
  2046 ;;		_pad
  2047 ;; This function is called by:
  2048 ;;		_vfpfcnvrt
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           	psect	text4
  2053   00131A                     __ptext4:
  2054                           	callstack 0
  2055   00131A                     _dtoa:
  2056                           	callstack 22
  2057   00131A                     
  2058                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2059   00131A  C01E  F034         	movff	dtoa@d,dtoa@n
  2060   00131E  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  2061   001322  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  2062   001326  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  2063   00132A  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  2064   00132E  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  2065   001332  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  2066   001336  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  2067   00133A                     
  2068                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2069   00133A  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  2070   00133C  EFA2  F009         	goto	u1151
  2071   001340  EFA5  F009         	goto	u1150
  2072   001344                     u1151:
  2073   001344  0E01               	movlw	1
  2074   001346  EFA6  F009         	goto	u1160
  2075   00134A                     u1150:
  2076   00134A  0E00               	movlw	0
  2077   00134C                     u1160:
  2078   00134C  6E3E               	movwf	dtoa@s^0,c
  2079   00134E                     
  2080                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2081   00134E  503E               	movf	dtoa@s^0,w,c
  2082   001350  B4D8               	btfsc	status,2,c
  2083   001352  EFAD  F009         	goto	u1171
  2084   001356  EFAF  F009         	goto	u1170
  2085   00135A                     u1171:
  2086   00135A  EFBF  F009         	goto	l2395
  2087   00135E                     u1170:
  2088   00135E                     
  2089                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2090   00135E  1E3B               	comf	(dtoa@n+7)^0,f,c
  2091   001360  1E3A               	comf	(dtoa@n+6)^0,f,c
  2092   001362  1E39               	comf	(dtoa@n+5)^0,f,c
  2093   001364  1E38               	comf	(dtoa@n+4)^0,f,c
  2094   001366  1E37               	comf	(dtoa@n+3)^0,f,c
  2095   001368  1E36               	comf	(dtoa@n+2)^0,f,c
  2096   00136A  1E35               	comf	(dtoa@n+1)^0,f,c
  2097   00136C  6C34               	negf	dtoa@n^0,c
  2098   00136E  0E00               	movlw	0
  2099   001370  2235               	addwfc	(dtoa@n+1)^0,f,c
  2100   001372  2236               	addwfc	(dtoa@n+2)^0,f,c
  2101   001374  2237               	addwfc	(dtoa@n+3)^0,f,c
  2102   001376  2238               	addwfc	(dtoa@n+4)^0,f,c
  2103   001378  2239               	addwfc	(dtoa@n+5)^0,f,c
  2104   00137A  223A               	addwfc	(dtoa@n+6)^0,f,c
  2105   00137C  223B               	addwfc	(dtoa@n+7)^0,f,c
  2106   00137E                     l2395:
  2107                           
  2108                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2109   00137E  0101               	movlb	1	; () banked
  2110   001380  BFF3               	btfsc	(_prec+1)& (0+255),7,b
  2111   001382  EFCD  F009         	goto	u1180
  2112   001386  51F3               	movf	(_prec+1)& (0+255),w,b
  2113   001388  E106               	bnz	u1181
  2114   00138A  05F2               	decf	_prec& (0+255),w,b
  2115   00138C  B0D8               	btfsc	status,0,c
  2116   00138E  EFCB  F009         	goto	u1181
  2117   001392  EFCD  F009         	goto	u1180
  2118   001396                     u1181:
  2119   001396  EFD3  F009         	goto	l1150
  2120   00139A                     u1180:
  2121   00139A                     
  2122                           ; BSR set to: 1
  2123   00139A  0E00               	movlw	0
  2124   00139C  6E31               	movwf	(dtoa@p+1)^0,c
  2125   00139E  0E01               	movlw	1
  2126   0013A0  6E30               	movwf	dtoa@p^0,c
  2127   0013A2  EFD7  F009         	goto	l1152
  2128   0013A6                     l1150:
  2129                           
  2130                           ; BSR set to: 1
  2131   0013A6  C1F2  F030         	movff	_prec,dtoa@p
  2132   0013AA  C1F3  F031         	movff	_prec+1,dtoa@p+1
  2133   0013AE                     l1152:
  2134                           
  2135                           ; BSR set to: 1
  2136                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2137   0013AE  C1F0  F032         	movff	_width,dtoa@w
  2138   0013B2  C1F1  F033         	movff	_width+1,dtoa@w+1
  2139   0013B6                     
  2140                           ; BSR set to: 1
  2141                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2142   0013B6  503E               	movf	dtoa@s^0,w,c
  2143   0013B8  B4D8               	btfsc	status,2,c
  2144   0013BA  EFE1  F009         	goto	u1191
  2145   0013BE  EFE3  F009         	goto	u1190
  2146   0013C2                     u1191:
  2147   0013C2  EFFA  F009         	goto	l1153
  2148   0013C6                     u1190:
  2149   0013C6                     
  2150                           ; BSR set to: 1
  2151                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2152   0013C6  0632               	decf	dtoa@w^0,f,c
  2153   0013C8  A0D8               	btfss	status,0,c
  2154   0013CA  0633               	decf	(dtoa@w+1)^0,f,c
  2155   0013CC                     
  2156                           ; BSR set to: 1
  2157                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2158   0013CC  503E               	movf	dtoa@s^0,w,c
  2159   0013CE  A4D8               	btfss	status,2,c
  2160   0013D0  EFEC  F009         	goto	u1201
  2161   0013D4  EFEE  F009         	goto	u1200
  2162   0013D8                     u1201:
  2163   0013D8  EFF4  F009         	goto	l2407
  2164   0013DC                     u1200:
  2165   0013DC                     
  2166                           ; BSR set to: 1
  2167   0013DC  0E00               	movlw	0
  2168   0013DE  6E2F               	movwf	(_dtoa$2417+1)^0,c
  2169   0013E0  0E2B               	movlw	43
  2170   0013E2  6E2E               	movwf	_dtoa$2417^0,c
  2171   0013E4  EFF8  F009         	goto	l2409
  2172   0013E8                     l2407:
  2173                           
  2174                           ; BSR set to: 1
  2175   0013E8  0E00               	movlw	0
  2176   0013EA  6E2F               	movwf	(_dtoa$2417+1)^0,c
  2177   0013EC  0E2D               	movlw	45
  2178   0013EE  6E2E               	movwf	_dtoa$2417^0,c
  2179   0013F0                     l2409:
  2180                           
  2181                           ; BSR set to: 1
  2182   0013F0  C02E  F03E         	movff	_dtoa$2417,dtoa@s
  2183   0013F4                     l1153:
  2184                           
  2185                           ; BSR set to: 1
  2186                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2187   0013F4  0E00               	movlw	0
  2188   0013F6  6E3D               	movwf	(dtoa@i+1)^0,c
  2189   0013F8  0E1F               	movlw	31
  2190   0013FA  6E3C               	movwf	dtoa@i^0,c
  2191   0013FC                     
  2192                           ; BSR set to: 1
  2193                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2194   0013FC  0E00               	movlw	0
  2195   0013FE  0102               	movlb	2	; () banked
  2196   001400  6F6F               	movwf	(_dbuf+31)& (0+255),b
  2197                           
  2198                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2199   001402  EF7F  F00A         	goto	l2423
  2200   001406                     l2413:
  2201                           
  2202                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2203   001406  063C               	decf	dtoa@i^0,f,c
  2204   001408  A0D8               	btfss	status,0,c
  2205   00140A  063D               	decf	(dtoa@i+1)^0,f,c
  2206   00140C                     
  2207                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2208   00140C  0E50               	movlw	low _dbuf
  2209   00140E  243C               	addwf	dtoa@i^0,w,c
  2210   001410  6ED9               	movwf	fsr2l,c
  2211   001412  0E02               	movlw	high _dbuf
  2212   001414  203D               	addwfc	(dtoa@i+1)^0,w,c
  2213   001416  6EDA               	movwf	fsr2h,c
  2214   001418  C034  F001         	movff	dtoa@n,___aomod@dividend
  2215   00141C  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  2216   001420  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  2217   001424  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  2218   001428  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  2219   00142C  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  2220   001430  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  2221   001434  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  2222   001438  0E0A               	movlw	10
  2223   00143A  6E09               	movwf	___aomod@divisor^0,c
  2224   00143C  0E00               	movlw	0
  2225   00143E  6E0A               	movwf	(___aomod@divisor+1)^0,c
  2226   001440  0E00               	movlw	0
  2227   001442  6E0B               	movwf	(___aomod@divisor+2)^0,c
  2228   001444  0E00               	movlw	0
  2229   001446  6E0C               	movwf	(___aomod@divisor+3)^0,c
  2230   001448  0E00               	movlw	0
  2231   00144A  6E0D               	movwf	(___aomod@divisor+4)^0,c
  2232   00144C  0E00               	movlw	0
  2233   00144E  6E0E               	movwf	(___aomod@divisor+5)^0,c
  2234   001450  0E00               	movlw	0
  2235   001452  6E0F               	movwf	(___aomod@divisor+6)^0,c
  2236   001454  0E00               	movlw	0
  2237   001456  6E10               	movwf	(___aomod@divisor+7)^0,c
  2238   001458  EC54  F00E         	call	___aomod	;wreg free
  2239   00145C  C001  F026         	movff	?___aomod,??_dtoa
  2240   001460  C002  F027         	movff	?___aomod+1,??_dtoa+1
  2241   001464  C003  F028         	movff	?___aomod+2,??_dtoa+2
  2242   001468  C004  F029         	movff	?___aomod+3,??_dtoa+3
  2243   00146C  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  2244   001470  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  2245   001474  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  2246   001478  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  2247   00147C  C026  F013         	movff	??_dtoa,abs@a
  2248   001480  C027  F014         	movff	??_dtoa+1,abs@a+1
  2249   001484  ECB3  F015         	call	_abs	;wreg free
  2250   001488  5013               	movf	?_abs^0,w,c
  2251   00148A  0F30               	addlw	48
  2252   00148C  6EDF               	movwf	indf2,c
  2253   00148E                     
  2254                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2255   00148E  0630               	decf	dtoa@p^0,f,c
  2256   001490  A0D8               	btfss	status,0,c
  2257   001492  0631               	decf	(dtoa@p+1)^0,f,c
  2258   001494                     
  2259                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2260   001494  0632               	decf	dtoa@w^0,f,c
  2261   001496  A0D8               	btfss	status,0,c
  2262   001498  0633               	decf	(dtoa@w+1)^0,f,c
  2263   00149A                     
  2264                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2265   00149A  C034  F001         	movff	dtoa@n,___aodiv@dividend
  2266   00149E  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  2267   0014A2  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  2268   0014A6  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  2269   0014AA  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  2270   0014AE  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  2271   0014B2  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  2272   0014B6  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  2273   0014BA  0E0A               	movlw	10
  2274   0014BC  6E09               	movwf	___aodiv@divisor^0,c
  2275   0014BE  0E00               	movlw	0
  2276   0014C0  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  2277   0014C2  0E00               	movlw	0
  2278   0014C4  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  2279   0014C6  0E00               	movlw	0
  2280   0014C8  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  2281   0014CA  0E00               	movlw	0
  2282   0014CC  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  2283   0014CE  0E00               	movlw	0
  2284   0014D0  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  2285   0014D2  0E00               	movlw	0
  2286   0014D4  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  2287   0014D6  0E00               	movlw	0
  2288   0014D8  6E10               	movwf	(___aodiv@divisor+7)^0,c
  2289   0014DA  ECDD  F00C         	call	___aodiv	;wreg free
  2290   0014DE  C001  F034         	movff	?___aodiv,dtoa@n
  2291   0014E2  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  2292   0014E6  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  2293   0014EA  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  2294   0014EE  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  2295   0014F2  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  2296   0014F6  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  2297   0014FA  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  2298   0014FE                     l2423:
  2299                           
  2300                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2301   0014FE  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  2302   001500  EF8A  F00A         	goto	u1211
  2303   001504  503D               	movf	(dtoa@i+1)^0,w,c
  2304   001506  E108               	bnz	u1210
  2305   001508  043C               	decf	dtoa@i^0,w,c
  2306   00150A  A0D8               	btfss	status,0,c
  2307   00150C  EF8A  F00A         	goto	u1211
  2308   001510  EF8C  F00A         	goto	u1210
  2309   001514                     u1211:
  2310   001514  EFA8  F00A         	goto	l2429
  2311   001518                     u1210:
  2312   001518  5034               	movf	dtoa@n^0,w,c
  2313   00151A  1035               	iorwf	(dtoa@n+1)^0,w,c
  2314   00151C  1036               	iorwf	(dtoa@n+2)^0,w,c
  2315   00151E  1037               	iorwf	(dtoa@n+3)^0,w,c
  2316   001520  1038               	iorwf	(dtoa@n+4)^0,w,c
  2317   001522  1039               	iorwf	(dtoa@n+5)^0,w,c
  2318   001524  103A               	iorwf	(dtoa@n+6)^0,w,c
  2319   001526  103B               	iorwf	(dtoa@n+7)^0,w,c
  2320   001528  A4D8               	btfss	status,2,c
  2321   00152A  EF99  F00A         	goto	u1221
  2322   00152E  EF9B  F00A         	goto	u1220
  2323   001532                     u1221:
  2324   001532  EF03  F00A         	goto	l2413
  2325   001536                     u1220:
  2326   001536  BE31               	btfsc	(dtoa@p+1)^0,7,c
  2327   001538  EFA8  F00A         	goto	u1230
  2328   00153C  5031               	movf	(dtoa@p+1)^0,w,c
  2329   00153E  E106               	bnz	u1231
  2330   001540  0430               	decf	dtoa@p^0,w,c
  2331   001542  B0D8               	btfsc	status,0,c
  2332   001544  EFA6  F00A         	goto	u1231
  2333   001548  EFA8  F00A         	goto	u1230
  2334   00154C                     u1231:
  2335   00154C  EF03  F00A         	goto	l2413
  2336   001550                     u1230:
  2337   001550                     l2429:
  2338                           
  2339                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2340   001550  503E               	movf	dtoa@s^0,w,c
  2341   001552  B4D8               	btfsc	status,2,c
  2342   001554  EFAE  F00A         	goto	u1241
  2343   001558  EFB0  F00A         	goto	u1240
  2344   00155C                     u1241:
  2345   00155C  EFBB  F00A         	goto	l2435
  2346   001560                     u1240:
  2347   001560                     
  2348                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2349   001560  063C               	decf	dtoa@i^0,f,c
  2350   001562  A0D8               	btfss	status,0,c
  2351   001564  063D               	decf	(dtoa@i+1)^0,f,c
  2352   001566                     
  2353                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2354   001566  0E50               	movlw	low _dbuf
  2355   001568  243C               	addwf	dtoa@i^0,w,c
  2356   00156A  6ED9               	movwf	fsr2l,c
  2357   00156C  0E02               	movlw	high _dbuf
  2358   00156E  203D               	addwfc	(dtoa@i+1)^0,w,c
  2359   001570  6EDA               	movwf	fsr2h,c
  2360   001572  C03E  FFDF         	movff	dtoa@s,indf2
  2361   001576                     l2435:
  2362                           
  2363                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2364   001576  C01C  F011         	movff	dtoa@fp,pad@fp
  2365   00157A  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  2366   00157E  0E50               	movlw	low _dbuf
  2367   001580  243C               	addwf	dtoa@i^0,w,c
  2368   001582  6E13               	movwf	pad@buf^0,c
  2369   001584  0E02               	movlw	high _dbuf
  2370   001586  203D               	addwfc	(dtoa@i+1)^0,w,c
  2371   001588  6E14               	movwf	(pad@buf+1)^0,c
  2372   00158A  C032  F015         	movff	dtoa@w,pad@p
  2373   00158E  C033  F016         	movff	dtoa@w+1,pad@p+1
  2374   001592  ECF3  F013         	call	_pad	;wreg free
  2375   001596  0012               	return		;funcret
  2376   001598                     __end_of_dtoa:
  2377                           	callstack 0
  2378                           
  2379 ;; *************** function _pad *****************
  2380 ;; Defined at:
  2381 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  2384 ;;		 -> sprintf@f(11), 
  2385 ;;  buf             2   18[COMRAM] PTR unsigned char 
  2386 ;;		 -> dbuf(32), 
  2387 ;;  p               2   20[COMRAM] int 
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;  w               2   25[COMRAM] int 
  2390 ;;  i               2   23[COMRAM] int 
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2400 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2401 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2402 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2403 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2404 ;;Total ram usage:       11 bytes
  2405 ;; Hardware stack levels used: 1
  2406 ;; Hardware stack levels required when called: 4
  2407 ;; This function calls:
  2408 ;;		_fputc
  2409 ;;		_fputs
  2410 ;; This function is called by:
  2411 ;;		_dtoa
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text5
  2416   0027E6                     __ptext5:
  2417                           	callstack 0
  2418   0027E6                     _pad:
  2419                           	callstack 22
  2420   0027E6                     
  2421                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  2422   0027E6  BE16               	btfsc	(pad@p+1)^0,7,c
  2423   0027E8  EFF8  F013         	goto	u1041
  2424   0027EC  EFFA  F013         	goto	u1040
  2425   0027F0                     u1041:
  2426   0027F0  EF00  F014         	goto	l2319
  2427   0027F4                     u1040:
  2428   0027F4  C015  F01A         	movff	pad@p,pad@w
  2429   0027F8  C016  F01B         	movff	pad@p+1,pad@w+1
  2430   0027FC  EF04  F014         	goto	l1141
  2431   002800                     l2319:
  2432   002800  0E00               	movlw	0
  2433   002802  6E1B               	movwf	(pad@w+1)^0,c
  2434   002804  0E00               	movlw	0
  2435   002806  6E1A               	movwf	pad@w^0,c
  2436   002808                     l1141:
  2437                           
  2438                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  2439   002808  0E00               	movlw	0
  2440   00280A  6E19               	movwf	(pad@i+1)^0,c
  2441   00280C  0E00               	movlw	0
  2442   00280E  6E18               	movwf	pad@i^0,c
  2443                           
  2444                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2445   002810  EF16  F014         	goto	l2325
  2446   002814                     l2321:
  2447                           
  2448                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  2449   002814  0E00               	movlw	0
  2450   002816  6E02               	movwf	(fputc@c+1)^0,c
  2451   002818  0E20               	movlw	32
  2452   00281A  6E01               	movwf	fputc@c^0,c
  2453   00281C  C011  F003         	movff	pad@fp,fputc@fp
  2454   002820  C012  F004         	movff	pad@fp+1,fputc@fp+1
  2455   002824  ECB5  F00F         	call	_fputc	;wreg free
  2456   002828                     
  2457                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  2458   002828  4A18               	infsnz	pad@i^0,f,c
  2459   00282A  2A19               	incf	(pad@i+1)^0,f,c
  2460   00282C                     l2325:
  2461                           
  2462                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2463   00282C  501A               	movf	pad@w^0,w,c
  2464   00282E  5C18               	subwf	pad@i^0,w,c
  2465   002830  5019               	movf	(pad@i+1)^0,w,c
  2466   002832  0A80               	xorlw	128
  2467   002834  6E17               	movwf	??_pad^0,c
  2468   002836  501B               	movf	(pad@w+1)^0,w,c
  2469   002838  0A80               	xorlw	128
  2470   00283A  5817               	subwfb	??_pad^0,w,c
  2471   00283C  A0D8               	btfss	status,0,c
  2472   00283E  EF23  F014         	goto	u1051
  2473   002842  EF25  F014         	goto	u1050
  2474   002846                     u1051:
  2475   002846  EF0A  F014         	goto	l2321
  2476   00284A                     u1050:
  2477   00284A                     
  2478                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  2479   00284A  C013  F00A         	movff	pad@buf,fputs@s
  2480   00284E  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2481   002852  C011  F00C         	movff	pad@fp,fputs@fp
  2482   002856  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2483   00285A  EC4F  F015         	call	_fputs	;wreg free
  2484   00285E  0012               	return		;funcret
  2485   002860                     __end_of_pad:
  2486                           	callstack 0
  2487                           
  2488 ;; *************** function _fputs *****************
  2489 ;; Defined at:
  2490 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2493 ;;		 -> dbuf(32), 
  2494 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  2495 ;;		 -> sprintf@f(11), 
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;  i               2   14[COMRAM] int 
  2498 ;;  c               1   13[COMRAM] unsigned char 
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  2    9[COMRAM] int 
  2501 ;; Registers used:
  2502 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2508 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2509 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2511 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2512 ;;Total ram usage:        7 bytes
  2513 ;; Hardware stack levels used: 1
  2514 ;; Hardware stack levels required when called: 3
  2515 ;; This function calls:
  2516 ;;		_fputc
  2517 ;; This function is called by:
  2518 ;;		_pad
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           	psect	text6
  2523   002A9E                     __ptext6:
  2524                           	callstack 0
  2525   002A9E                     _fputs:
  2526                           	callstack 22
  2527   002A9E  0E00               	movlw	0
  2528   002AA0  6E10               	movwf	(fputs@i+1)^0,c
  2529   002AA2  0E00               	movlw	0
  2530   002AA4  6E0F               	movwf	fputs@i^0,c
  2531   002AA6  EF60  F015         	goto	l2233
  2532   002AAA                     l2229:
  2533   002AAA  C00E  F001         	movff	fputs@c,fputc@c
  2534   002AAE  6A02               	clrf	(fputc@c+1)^0,c
  2535   002AB0  C00C  F003         	movff	fputs@fp,fputc@fp
  2536   002AB4  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  2537   002AB8  ECB5  F00F         	call	_fputc	;wreg free
  2538   002ABC  4A0F               	infsnz	fputs@i^0,f,c
  2539   002ABE  2A10               	incf	(fputs@i+1)^0,f,c
  2540   002AC0                     l2233:
  2541   002AC0  500F               	movf	fputs@i^0,w,c
  2542   002AC2  240A               	addwf	fputs@s^0,w,c
  2543   002AC4  6ED9               	movwf	fsr2l,c
  2544   002AC6  5010               	movf	(fputs@i+1)^0,w,c
  2545   002AC8  200B               	addwfc	(fputs@s+1)^0,w,c
  2546   002ACA  6EDA               	movwf	fsr2h,c
  2547   002ACC  50DF               	movf	indf2,w,c
  2548   002ACE  6E0E               	movwf	fputs@c^0,c
  2549   002AD0  500E               	movf	fputs@c^0,w,c
  2550   002AD2  A4D8               	btfss	status,2,c
  2551   002AD4  EF6E  F015         	goto	u901
  2552   002AD8  EF70  F015         	goto	u900
  2553   002ADC                     u901:
  2554   002ADC  EF55  F015         	goto	l2229
  2555   002AE0                     u900:
  2556   002AE0  0012               	return		;funcret
  2557   002AE2                     __end_of_fputs:
  2558                           	callstack 0
  2559                           
  2560 ;; *************** function _fputc *****************
  2561 ;; Defined at:
  2562 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;  c               2    0[COMRAM] int 
  2565 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  2566 ;;		 -> sprintf@f(11), 
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;		None
  2569 ;; Return value:  Size  Location     Type
  2570 ;;                  2    0[COMRAM] int 
  2571 ;; Registers used:
  2572 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2580 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2581 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2582 ;;Total ram usage:        9 bytes
  2583 ;; Hardware stack levels used: 1
  2584 ;; Hardware stack levels required when called: 2
  2585 ;; This function calls:
  2586 ;;		_putch
  2587 ;; This function is called by:
  2588 ;;		_pad
  2589 ;;		_vfpfcnvrt
  2590 ;;		_fputs
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594                           	psect	text7
  2595   001F6A                     __ptext7:
  2596                           	callstack 0
  2597   001F6A                     _fputc:
  2598                           	callstack 25
  2599   001F6A  5003               	movf	fputc@fp^0,w,c
  2600   001F6C  1004               	iorwf	(fputc@fp+1)^0,w,c
  2601   001F6E  B4D8               	btfsc	status,2,c
  2602   001F70  EFBC  F00F         	goto	u861
  2603   001F74  EFBE  F00F         	goto	u860
  2604   001F78                     u861:
  2605   001F78  EFC7  F00F         	goto	l2217
  2606   001F7C                     u860:
  2607   001F7C  5003               	movf	fputc@fp^0,w,c
  2608   001F7E  1004               	iorwf	(fputc@fp+1)^0,w,c
  2609   001F80  A4D8               	btfss	status,2,c
  2610   001F82  EFC5  F00F         	goto	u871
  2611   001F86  EFC7  F00F         	goto	u870
  2612   001F8A                     u871:
  2613   001F8A  EFCC  F00F         	goto	l2219
  2614   001F8E                     u870:
  2615   001F8E                     l2217:
  2616   001F8E  5001               	movf	fputc@c^0,w,c
  2617   001F90  EC97  F016         	call	_putch
  2618   001F94  EF19  F010         	goto	l1196
  2619   001F98                     l2219:
  2620   001F98  EE20 F009          	lfsr	2,9
  2621   001F9C  5003               	movf	fputc@fp^0,w,c
  2622   001F9E  26D9               	addwf	fsr2l,f,c
  2623   001FA0  5004               	movf	(fputc@fp+1)^0,w,c
  2624   001FA2  22DA               	addwfc	fsr2h,f,c
  2625   001FA4  50DE               	movf	postinc2,w,c
  2626   001FA6  10DE               	iorwf	postinc2,w,c
  2627   001FA8  B4D8               	btfsc	status,2,c
  2628   001FAA  EFD9  F00F         	goto	u881
  2629   001FAE  EFDB  F00F         	goto	u880
  2630   001FB2                     u881:
  2631   001FB2  EFF6  F00F         	goto	l2223
  2632   001FB6                     u880:
  2633   001FB6  EE20 F009          	lfsr	2,9
  2634   001FBA  5003               	movf	fputc@fp^0,w,c
  2635   001FBC  26D9               	addwf	fsr2l,f,c
  2636   001FBE  5004               	movf	(fputc@fp+1)^0,w,c
  2637   001FC0  22DA               	addwfc	fsr2h,f,c
  2638   001FC2  EE10 F003          	lfsr	1,3
  2639   001FC6  5003               	movf	fputc@fp^0,w,c
  2640   001FC8  26E1               	addwf	fsr1l,f,c
  2641   001FCA  5004               	movf	(fputc@fp+1)^0,w,c
  2642   001FCC  22E2               	addwfc	fsr1h,f,c
  2643   001FCE  50DE               	movf	postinc2,w,c
  2644   001FD0  5CE6               	subwf	postinc1,w,c
  2645   001FD2  50E6               	movf	postinc1,w,c
  2646   001FD4  0A80               	xorlw	128
  2647   001FD6  6E09               	movwf	(??_fputc+4)^0,c
  2648   001FD8  50DE               	movf	postinc2,w,c
  2649   001FDA  0A80               	xorlw	128
  2650   001FDC  5809               	subwfb	(??_fputc+4)^0,w,c
  2651   001FDE  B0D8               	btfsc	status,0,c
  2652   001FE0  EFF4  F00F         	goto	u891
  2653   001FE4  EFF6  F00F         	goto	u890
  2654   001FE8                     u891:
  2655   001FE8  EF19  F010         	goto	l1196
  2656   001FEC                     u890:
  2657   001FEC                     l2223:
  2658   001FEC  EE20 F003          	lfsr	2,3
  2659   001FF0  5003               	movf	fputc@fp^0,w,c
  2660   001FF2  26D9               	addwf	fsr2l,f,c
  2661   001FF4  5004               	movf	(fputc@fp+1)^0,w,c
  2662   001FF6  22DA               	addwfc	fsr2h,f,c
  2663   001FF8  CFDE F005          	movff	postinc2,??_fputc
  2664   001FFC  CFDD F006          	movff	postdec2,??_fputc+1
  2665   002000  C003  FFD9         	movff	fputc@fp,fsr2l
  2666   002004  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2667   002008  CFDE F007          	movff	postinc2,??_fputc+2
  2668   00200C  CFDD F008          	movff	postdec2,??_fputc+3
  2669   002010  5005               	movf	??_fputc^0,w,c
  2670   002012  2407               	addwf	(??_fputc+2)^0,w,c
  2671   002014  6ED9               	movwf	fsr2l,c
  2672   002016  5006               	movf	(??_fputc+1)^0,w,c
  2673   002018  2008               	addwfc	(??_fputc+3)^0,w,c
  2674   00201A  6EDA               	movwf	fsr2h,c
  2675   00201C  C001  FFDF         	movff	fputc@c,indf2
  2676   002020  EE20 F003          	lfsr	2,3
  2677   002024  5003               	movf	fputc@fp^0,w,c
  2678   002026  26D9               	addwf	fsr2l,f,c
  2679   002028  5004               	movf	(fputc@fp+1)^0,w,c
  2680   00202A  22DA               	addwfc	fsr2h,f,c
  2681   00202C  2ADE               	incf	postinc2,f,c
  2682   00202E  0E00               	movlw	0
  2683   002030  22DD               	addwfc	postdec2,f,c
  2684   002032                     l1196:
  2685   002032  0012               	return		;funcret
  2686   002034                     __end_of_fputc:
  2687                           	callstack 0
  2688                           
  2689 ;; *************** function _putch *****************
  2690 ;; Defined at:
  2691 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;  c               1    wreg     unsigned char 
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;  c               1    0[COMRAM] unsigned char 
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2709 ;;Total ram usage:        0 bytes
  2710 ;; Hardware stack levels used: 1
  2711 ;; Hardware stack levels required when called: 1
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_fputc
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text8
  2720   002D2E                     __ptext8:
  2721                           	callstack 0
  2722   002D2E                     _putch:
  2723                           	callstack 25
  2724   002D2E  0012               	return		;funcret
  2725   002D30                     __end_of_putch:
  2726                           	callstack 0
  2727                           
  2728 ;; *************** function _abs *****************
  2729 ;; Defined at:
  2730 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  a               2   18[COMRAM] int 
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;		None
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  2   18[COMRAM] int 
  2737 ;; Registers used:
  2738 ;;		wreg, status,2, status,0
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2744 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2746 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2747 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2748 ;;Total ram usage:        4 bytes
  2749 ;; Hardware stack levels used: 1
  2750 ;; Hardware stack levels required when called: 1
  2751 ;; This function calls:
  2752 ;;		Nothing
  2753 ;; This function is called by:
  2754 ;;		_dtoa
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           	psect	text9
  2759   002B66                     __ptext9:
  2760                           	callstack 0
  2761   002B66                     _abs:
  2762                           	callstack 25
  2763   002B66  BE14               	btfsc	(abs@a+1)^0,7,c
  2764   002B68  EFC0  F015         	goto	u1060
  2765   002B6C  5014               	movf	(abs@a+1)^0,w,c
  2766   002B6E  E106               	bnz	u1061
  2767   002B70  0413               	decf	abs@a^0,w,c
  2768   002B72  B0D8               	btfsc	status,0,c
  2769   002B74  EFBE  F015         	goto	u1061
  2770   002B78  EFC0  F015         	goto	u1060
  2771   002B7C                     u1061:
  2772   002B7C  EFCE  F015         	goto	l1181
  2773   002B80                     u1060:
  2774   002B80  C013  F015         	movff	abs@a,??_abs
  2775   002B84  C014  F016         	movff	abs@a+1,??_abs+1
  2776   002B88  1E15               	comf	??_abs^0,f,c
  2777   002B8A  1E16               	comf	(??_abs+1)^0,f,c
  2778   002B8C  4A15               	infsnz	??_abs^0,f,c
  2779   002B8E  2A16               	incf	(??_abs+1)^0,f,c
  2780   002B90  C015  F013         	movff	??_abs,?_abs
  2781   002B94  C016  F014         	movff	??_abs+1,?_abs+1
  2782   002B98  EFD2  F015         	goto	l1184
  2783   002B9C                     l1181:
  2784   002B9C  C013  F013         	movff	abs@a,?_abs
  2785   002BA0  C014  F014         	movff	abs@a+1,?_abs+1
  2786   002BA4                     l1184:
  2787   002BA4  0012               	return		;funcret
  2788   002BA6                     __end_of_abs:
  2789                           	callstack 0
  2790                           
  2791 ;; *************** function ___aomod *****************
  2792 ;; Defined at:
  2793 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  dividend        8    0[COMRAM] long long 
  2796 ;;  divisor         8    8[COMRAM] long long 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;  sign            1   17[COMRAM] unsigned char 
  2799 ;;  counter         1   16[COMRAM] unsigned char 
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  8    0[COMRAM] long long 
  2802 ;; Registers used:
  2803 ;;		wreg, status,2, status,0
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2809 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2810 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2812 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2813 ;;Total ram usage:       18 bytes
  2814 ;; Hardware stack levels used: 1
  2815 ;; Hardware stack levels required when called: 1
  2816 ;; This function calls:
  2817 ;;		Nothing
  2818 ;; This function is called by:
  2819 ;;		_dtoa
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text10
  2824   001CA8                     __ptext10:
  2825                           	callstack 0
  2826   001CA8                     ___aomod:
  2827                           	callstack 25
  2828   001CA8  0E00               	movlw	0
  2829   001CAA  6E12               	movwf	___aomod@sign^0,c
  2830   001CAC  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2831   001CAE  EF5D  F00E         	goto	u980
  2832   001CB2  EF5B  F00E         	goto	u981
  2833   001CB6                     u981:
  2834   001CB6  EF6F  F00E         	goto	l2287
  2835   001CBA                     u980:
  2836   001CBA  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2837   001CBC  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2838   001CBE  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2839   001CC0  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2840   001CC2  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2841   001CC4  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2842   001CC6  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2843   001CC8  6C01               	negf	___aomod@dividend^0,c
  2844   001CCA  0E00               	movlw	0
  2845   001CCC  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2846   001CCE  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2847   001CD0  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2848   001CD2  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2849   001CD4  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2850   001CD6  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2851   001CD8  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2852   001CDA  0E01               	movlw	1
  2853   001CDC  6E12               	movwf	___aomod@sign^0,c
  2854   001CDE                     l2287:
  2855   001CDE  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2856   001CE0  EF76  F00E         	goto	u990
  2857   001CE4  EF74  F00E         	goto	u991
  2858   001CE8                     u991:
  2859   001CE8  EF86  F00E         	goto	l2291
  2860   001CEC                     u990:
  2861   001CEC  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2862   001CEE  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2863   001CF0  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2864   001CF2  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2865   001CF4  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2866   001CF6  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2867   001CF8  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2868   001CFA  6C09               	negf	___aomod@divisor^0,c
  2869   001CFC  0E00               	movlw	0
  2870   001CFE  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2871   001D00  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2872   001D02  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2873   001D04  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2874   001D06  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2875   001D08  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2876   001D0A  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2877   001D0C                     l2291:
  2878   001D0C  5009               	movf	___aomod@divisor^0,w,c
  2879   001D0E  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2880   001D10  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2881   001D12  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2882   001D14  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2883   001D16  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2884   001D18  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2885   001D1A  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2886   001D1C  B4D8               	btfsc	status,2,c
  2887   001D1E  EF93  F00E         	goto	u1001
  2888   001D22  EF95  F00E         	goto	u1000
  2889   001D26                     u1001:
  2890   001D26  EFDD  F00E         	goto	l2307
  2891   001D2A                     u1000:
  2892   001D2A  0E01               	movlw	1
  2893   001D2C  6E11               	movwf	___aomod@counter^0,c
  2894   001D2E  EFA3  F00E         	goto	l2297
  2895   001D32                     l2295:
  2896   001D32  90D8               	bcf	status,0,c
  2897   001D34  3609               	rlcf	___aomod@divisor^0,f,c
  2898   001D36  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2899   001D38  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2900   001D3A  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2901   001D3C  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2902   001D3E  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2903   001D40  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2904   001D42  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2905   001D44  2A11               	incf	___aomod@counter^0,f,c
  2906   001D46                     l2297:
  2907   001D46  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2908   001D48  EFA8  F00E         	goto	u1011
  2909   001D4C  EFAA  F00E         	goto	u1010
  2910   001D50                     u1011:
  2911   001D50  EF99  F00E         	goto	l2295
  2912   001D54                     u1010:
  2913   001D54                     l2299:
  2914   001D54  5009               	movf	___aomod@divisor^0,w,c
  2915   001D56  5C01               	subwf	___aomod@dividend^0,w,c
  2916   001D58  500A               	movf	(___aomod@divisor+1)^0,w,c
  2917   001D5A  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2918   001D5C  500B               	movf	(___aomod@divisor+2)^0,w,c
  2919   001D5E  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2920   001D60  500C               	movf	(___aomod@divisor+3)^0,w,c
  2921   001D62  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2922   001D64  500D               	movf	(___aomod@divisor+4)^0,w,c
  2923   001D66  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2924   001D68  500E               	movf	(___aomod@divisor+5)^0,w,c
  2925   001D6A  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2926   001D6C  500F               	movf	(___aomod@divisor+6)^0,w,c
  2927   001D6E  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2928   001D70  5010               	movf	(___aomod@divisor+7)^0,w,c
  2929   001D72  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2930   001D74  A0D8               	btfss	status,0,c
  2931   001D76  EFBF  F00E         	goto	u1021
  2932   001D7A  EFC1  F00E         	goto	u1020
  2933   001D7E                     u1021:
  2934   001D7E  EFD1  F00E         	goto	l2303
  2935   001D82                     u1020:
  2936   001D82  5009               	movf	___aomod@divisor^0,w,c
  2937   001D84  5E01               	subwf	___aomod@dividend^0,f,c
  2938   001D86  500A               	movf	(___aomod@divisor+1)^0,w,c
  2939   001D88  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2940   001D8A  500B               	movf	(___aomod@divisor+2)^0,w,c
  2941   001D8C  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2942   001D8E  500C               	movf	(___aomod@divisor+3)^0,w,c
  2943   001D90  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2944   001D92  500D               	movf	(___aomod@divisor+4)^0,w,c
  2945   001D94  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2946   001D96  500E               	movf	(___aomod@divisor+5)^0,w,c
  2947   001D98  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2948   001D9A  500F               	movf	(___aomod@divisor+6)^0,w,c
  2949   001D9C  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2950   001D9E  5010               	movf	(___aomod@divisor+7)^0,w,c
  2951   001DA0  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2952   001DA2                     l2303:
  2953   001DA2  90D8               	bcf	status,0,c
  2954   001DA4  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2955   001DA6  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2956   001DA8  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2957   001DAA  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2958   001DAC  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2959   001DAE  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2960   001DB0  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2961   001DB2  3209               	rrcf	___aomod@divisor^0,f,c
  2962   001DB4  2E11               	decfsz	___aomod@counter^0,f,c
  2963   001DB6  EFAA  F00E         	goto	l2299
  2964   001DBA                     l2307:
  2965   001DBA  5012               	movf	___aomod@sign^0,w,c
  2966   001DBC  B4D8               	btfsc	status,2,c
  2967   001DBE  EFE3  F00E         	goto	u1031
  2968   001DC2  EFE5  F00E         	goto	u1030
  2969   001DC6                     u1031:
  2970   001DC6  EFF5  F00E         	goto	l2311
  2971   001DCA                     u1030:
  2972   001DCA  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2973   001DCC  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2974   001DCE  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2975   001DD0  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2976   001DD2  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2977   001DD4  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2978   001DD6  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2979   001DD8  6C01               	negf	___aomod@dividend^0,c
  2980   001DDA  0E00               	movlw	0
  2981   001DDC  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2982   001DDE  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2983   001DE0  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2984   001DE2  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2985   001DE4  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2986   001DE6  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2987   001DE8  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2988   001DEA                     l2311:
  2989   001DEA  C001  F001         	movff	___aomod@dividend,?___aomod
  2990   001DEE  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2991   001DF2  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2992   001DF6  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2993   001DFA  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2994   001DFE  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2995   001E02  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2996   001E06  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2997   001E0A  0012               	return		;funcret
  2998   001E0C                     __end_of___aomod:
  2999                           	callstack 0
  3000                           
  3001 ;; *************** function ___aodiv *****************
  3002 ;; Defined at:
  3003 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;  dividend        8    0[COMRAM] long long 
  3006 ;;  divisor         8    8[COMRAM] long long 
  3007 ;; Auto vars:     Size  Location     Type
  3008 ;;  quotient        8   18[COMRAM] long long 
  3009 ;;  sign            1   17[COMRAM] unsigned char 
  3010 ;;  counter         1   16[COMRAM] unsigned char 
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  8    0[COMRAM] long long 
  3013 ;; Registers used:
  3014 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3020 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3021 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3023 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3024 ;;Total ram usage:       26 bytes
  3025 ;; Hardware stack levels used: 1
  3026 ;; Hardware stack levels required when called: 1
  3027 ;; This function calls:
  3028 ;;		Nothing
  3029 ;; This function is called by:
  3030 ;;		_dtoa
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           	psect	text11
  3035   0019BA                     __ptext11:
  3036                           	callstack 0
  3037   0019BA                     ___aodiv:
  3038                           	callstack 25
  3039   0019BA  0E00               	movlw	0
  3040   0019BC  6E12               	movwf	___aodiv@sign^0,c
  3041   0019BE  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  3042   0019C0  EFE6  F00C         	goto	u910
  3043   0019C4  EFE4  F00C         	goto	u911
  3044   0019C8                     u911:
  3045   0019C8  EFF8  F00C         	goto	l2243
  3046   0019CC                     u910:
  3047   0019CC  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  3048   0019CE  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  3049   0019D0  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  3050   0019D2  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  3051   0019D4  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  3052   0019D6  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  3053   0019D8  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  3054   0019DA  6C09               	negf	___aodiv@divisor^0,c
  3055   0019DC  0E00               	movlw	0
  3056   0019DE  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  3057   0019E0  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  3058   0019E2  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  3059   0019E4  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  3060   0019E6  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  3061   0019E8  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  3062   0019EA  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  3063   0019EC  0E01               	movlw	1
  3064   0019EE  6E12               	movwf	___aodiv@sign^0,c
  3065   0019F0                     l2243:
  3066   0019F0  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  3067   0019F2  EFFF  F00C         	goto	u920
  3068   0019F6  EFFD  F00C         	goto	u921
  3069   0019FA                     u921:
  3070   0019FA  EF11  F00D         	goto	l2249
  3071   0019FE                     u920:
  3072   0019FE  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  3073   001A00  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  3074   001A02  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  3075   001A04  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  3076   001A06  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  3077   001A08  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  3078   001A0A  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  3079   001A0C  6C01               	negf	___aodiv@dividend^0,c
  3080   001A0E  0E00               	movlw	0
  3081   001A10  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  3082   001A12  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  3083   001A14  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  3084   001A16  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  3085   001A18  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  3086   001A1A  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  3087   001A1C  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  3088   001A1E  0E01               	movlw	1
  3089   001A20  1A12               	xorwf	___aodiv@sign^0,f,c
  3090   001A22                     l2249:
  3091   001A22  EE20  F013         	lfsr	2,___aodiv@quotient
  3092   001A26  0E07               	movlw	7
  3093   001A28                     u931:
  3094   001A28  6ADE               	clrf	postinc2,c
  3095   001A2A  06E8               	decf	wreg,f,c
  3096   001A2C  E2FD               	bc	u931
  3097   001A2E  5009               	movf	___aodiv@divisor^0,w,c
  3098   001A30  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  3099   001A32  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  3100   001A34  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  3101   001A36  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  3102   001A38  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  3103   001A3A  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  3104   001A3C  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  3105   001A3E  B4D8               	btfsc	status,2,c
  3106   001A40  EF24  F00D         	goto	u941
  3107   001A44  EF26  F00D         	goto	u940
  3108   001A48                     u941:
  3109   001A48  EF78  F00D         	goto	l2271
  3110   001A4C                     u940:
  3111   001A4C  0E01               	movlw	1
  3112   001A4E  6E11               	movwf	___aodiv@counter^0,c
  3113   001A50  EF34  F00D         	goto	l2257
  3114   001A54                     l2255:
  3115   001A54  90D8               	bcf	status,0,c
  3116   001A56  3609               	rlcf	___aodiv@divisor^0,f,c
  3117   001A58  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  3118   001A5A  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  3119   001A5C  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  3120   001A5E  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  3121   001A60  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  3122   001A62  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  3123   001A64  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  3124   001A66  2A11               	incf	___aodiv@counter^0,f,c
  3125   001A68                     l2257:
  3126   001A68  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  3127   001A6A  EF39  F00D         	goto	u951
  3128   001A6E  EF3B  F00D         	goto	u950
  3129   001A72                     u951:
  3130   001A72  EF2A  F00D         	goto	l2255
  3131   001A76                     u950:
  3132   001A76                     l2259:
  3133   001A76  90D8               	bcf	status,0,c
  3134   001A78  3613               	rlcf	___aodiv@quotient^0,f,c
  3135   001A7A  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  3136   001A7C  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  3137   001A7E  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  3138   001A80  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  3139   001A82  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  3140   001A84  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  3141   001A86  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  3142   001A88  5009               	movf	___aodiv@divisor^0,w,c
  3143   001A8A  5C01               	subwf	___aodiv@dividend^0,w,c
  3144   001A8C  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3145   001A8E  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  3146   001A90  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3147   001A92  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  3148   001A94  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3149   001A96  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  3150   001A98  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3151   001A9A  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  3152   001A9C  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3153   001A9E  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  3154   001AA0  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3155   001AA2  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  3156   001AA4  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3157   001AA6  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  3158   001AA8  A0D8               	btfss	status,0,c
  3159   001AAA  EF59  F00D         	goto	u961
  3160   001AAE  EF5B  F00D         	goto	u960
  3161   001AB2                     u961:
  3162   001AB2  EF6C  F00D         	goto	l2267
  3163   001AB6                     u960:
  3164   001AB6  5009               	movf	___aodiv@divisor^0,w,c
  3165   001AB8  5E01               	subwf	___aodiv@dividend^0,f,c
  3166   001ABA  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3167   001ABC  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  3168   001ABE  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3169   001AC0  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  3170   001AC2  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3171   001AC4  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  3172   001AC6  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3173   001AC8  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  3174   001ACA  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3175   001ACC  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  3176   001ACE  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3177   001AD0  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  3178   001AD2  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3179   001AD4  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  3180   001AD6  8013               	bsf	___aodiv@quotient^0,0,c
  3181   001AD8                     l2267:
  3182   001AD8  90D8               	bcf	status,0,c
  3183   001ADA  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  3184   001ADC  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  3185   001ADE  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  3186   001AE0  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  3187   001AE2  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  3188   001AE4  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  3189   001AE6  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  3190   001AE8  3209               	rrcf	___aodiv@divisor^0,f,c
  3191   001AEA  2E11               	decfsz	___aodiv@counter^0,f,c
  3192   001AEC  EF3B  F00D         	goto	l2259
  3193   001AF0                     l2271:
  3194   001AF0  5012               	movf	___aodiv@sign^0,w,c
  3195   001AF2  B4D8               	btfsc	status,2,c
  3196   001AF4  EF7E  F00D         	goto	u971
  3197   001AF8  EF80  F00D         	goto	u970
  3198   001AFC                     u971:
  3199   001AFC  EF90  F00D         	goto	l2275
  3200   001B00                     u970:
  3201   001B00  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  3202   001B02  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  3203   001B04  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  3204   001B06  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  3205   001B08  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  3206   001B0A  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  3207   001B0C  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  3208   001B0E  6C13               	negf	___aodiv@quotient^0,c
  3209   001B10  0E00               	movlw	0
  3210   001B12  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  3211   001B14  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  3212   001B16  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  3213   001B18  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  3214   001B1A  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  3215   001B1C  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  3216   001B1E  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  3217   001B20                     l2275:
  3218   001B20  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3219   001B24  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3220   001B28  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3221   001B2C  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3222   001B30  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3223   001B34  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3224   001B38  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3225   001B3C  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3226   001B40  0012               	return		;funcret
  3227   001B42                     __end_of___aodiv:
  3228                           	callstack 0
  3229                           
  3230 ;; *************** function _sendStringSerial4 *****************
  3231 ;; Defined at:
  3232 ;;		line 37 in file "../serial.c"
  3233 ;; Parameters:    Size  Location     Type
  3234 ;;  string          2    1[COMRAM] PTR unsigned char 
  3235 ;;		 -> main@readout3(100), main@readout2(100), 
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;		None
  3238 ;; Return value:  Size  Location     Type
  3239 ;;                  1    wreg      void 
  3240 ;; Registers used:
  3241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3242 ;; Tracked objects:
  3243 ;;		On entry : 0/0
  3244 ;;		On exit  : 0/0
  3245 ;;		Unchanged: 0/0
  3246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3247 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3250 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3251 ;;Total ram usage:        2 bytes
  3252 ;; Hardware stack levels used: 1
  3253 ;; Hardware stack levels required when called: 2
  3254 ;; This function calls:
  3255 ;;		_sendCharSerial4
  3256 ;; This function is called by:
  3257 ;;		_main
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261                           	psect	text12
  3262   002BA6                     __ptext12:
  3263                           	callstack 0
  3264   002BA6                     _sendStringSerial4:
  3265                           	callstack 28
  3266   002BA6                     
  3267                           ;../serial.c: 40:     while (*string != 0)
  3268   002BA6  EFDE  F015         	goto	l2923
  3269   002BAA                     l2919:
  3270                           
  3271                           ;../serial.c: 41:     {;../serial.c: 42:         sendCharSerial4(*string++);
  3272   002BAA  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3273   002BAE  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3274   002BB2  50DF               	movf	indf2,w,c
  3275   002BB4  EC6B  F016         	call	_sendCharSerial4
  3276   002BB8  4A02               	infsnz	sendStringSerial4@string^0,f,c
  3277   002BBA  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  3278   002BBC                     l2923:
  3279                           
  3280                           ;../serial.c: 40:     while (*string != 0)
  3281   002BBC  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3282   002BC0  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3283   002BC4  50DF               	movf	indf2,w,c
  3284   002BC6  A4D8               	btfss	status,2,c
  3285   002BC8  EFE8  F015         	goto	u1541
  3286   002BCC  EFEA  F015         	goto	u1540
  3287   002BD0                     u1541:
  3288   002BD0  EFD5  F015         	goto	l2919
  3289   002BD4                     u1540:
  3290   002BD4  0012               	return		;funcret
  3291   002BD6                     __end_of_sendStringSerial4:
  3292                           	callstack 0
  3293                           
  3294 ;; *************** function _sendCharSerial4 *****************
  3295 ;; Defined at:
  3296 ;;		line 30 in file "../serial.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  charToSend      1    wreg     unsigned char 
  3299 ;; Auto vars:     Size  Location     Type
  3300 ;;  charToSend      1    0[COMRAM] unsigned char 
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  1    wreg      void 
  3303 ;; Registers used:
  3304 ;;		wreg
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3311 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3313 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3314 ;;Total ram usage:        1 bytes
  3315 ;; Hardware stack levels used: 1
  3316 ;; Hardware stack levels required when called: 1
  3317 ;; This function calls:
  3318 ;;		Nothing
  3319 ;; This function is called by:
  3320 ;;		_sendStringSerial4
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           	psect	text13
  3325   002CD6                     __ptext13:
  3326                           	callstack 0
  3327   002CD6                     _sendCharSerial4:
  3328                           	callstack 28
  3329                           
  3330                           ;incstack = 0
  3331                           ;sendCharSerial4@charToSend stored from wreg
  3332   002CD6  6E01               	movwf	sendCharSerial4@charToSend^0,c
  3333   002CD8                     l429:
  3334   002CD8  010E               	movlb	14	; () banked
  3335   002CDA  A537               	btfss	55,2,b	;volatile
  3336   002CDC  EF72  F016         	goto	u1421
  3337   002CE0  EF74  F016         	goto	u1420
  3338   002CE4                     u1421:
  3339   002CE4  EF6C  F016         	goto	l429
  3340   002CE8                     u1420:
  3341   002CE8                     
  3342                           ; BSR set to: 14
  3343                           ;../serial.c: 32:     TX4REG = charToSend;
  3344   002CE8  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3345   002CEC                     
  3346                           ; BSR set to: 14
  3347   002CEC  0012               	return		;funcret
  3348   002CEE                     __end_of_sendCharSerial4:
  3349                           	callstack 0
  3350                           
  3351 ;; *************** function _motor_action *****************
  3352 ;; Defined at:
  3353 ;;		line 196 in file "../dc_motor.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;  color           2   33[COMRAM] unsigned int 
  3356 ;;  l               2   35[COMRAM] PTR struct DC_motor
  3357 ;;		 -> main@motorL(9), 
  3358 ;;  r               2   37[COMRAM] PTR struct DC_motor
  3359 ;;		 -> main@motorR(9), 
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;		None
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3371 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3373 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3374 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3375 ;;Total ram usage:        8 bytes
  3376 ;; Hardware stack levels used: 1
  3377 ;; Hardware stack levels required when called: 4
  3378 ;; This function calls:
  3379 ;;		_left_135
  3380 ;;		_left_90
  3381 ;;		_reverse_fromcard
  3382 ;;		_reverse_onesquare
  3383 ;;		_right_135
  3384 ;;		_right_90
  3385 ;;		_spin_180
  3386 ;;		_stop
  3387 ;; This function is called by:
  3388 ;;		_main
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           	psect	text14
  3393   001598                     __ptext14:
  3394                           	callstack 0
  3395   001598                     _motor_action:
  3396                           	callstack 26
  3397   001598                     
  3398                           ;../dc_motor.c: 196: void motor_action(unsigned int color, struct DC_motor *l, struct DC
      +                          _motor *r);../dc_motor.c: 197: {;../dc_motor.c: 198:     switch (color){
  3399   001598  EFC8  F00B         	goto	l2981
  3400   00159C                     l2947:
  3401                           
  3402                           ;../dc_motor.c: 200:             reverse_fromcard(l,r);
  3403   00159C  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3404   0015A0  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3405   0015A4  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3406   0015A8  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3407   0015AC  ECC5  F012         	call	_reverse_fromcard	;wreg free
  3408                           
  3409                           ;../dc_motor.c: 201:             stop(l,r);
  3410   0015B0  C024  F01A         	movff	motor_action@l,stop@mL
  3411   0015B4  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3412   0015B8  C026  F01C         	movff	motor_action@r,stop@mR
  3413   0015BC  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3414   0015C0  EC67  F013         	call	_stop	;wreg free
  3415   0015C4                     
  3416                           ;../dc_motor.c: 202:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3417   0015C4  0E29               	movlw	41
  3418   0015C6  6E29               	movwf	(??_motor_action+1)^0,c
  3419   0015C8  0E96               	movlw	150
  3420   0015CA  6E28               	movwf	??_motor_action^0,c
  3421   0015CC  0E7F               	movlw	127
  3422   0015CE                     u1747:
  3423   0015CE  2EE8               	decfsz	wreg,f,c
  3424   0015D0  D7FE               	bra	u1747
  3425   0015D2  2E28               	decfsz	??_motor_action^0,f,c
  3426   0015D4  D7FC               	bra	u1747
  3427   0015D6  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3428   0015D8  D7FA               	bra	u1747
  3429   0015DA  F000               	nop	
  3430   0015DC                     
  3431                           ;../dc_motor.c: 203:             stop(l,r);
  3432   0015DC  C024  F01A         	movff	motor_action@l,stop@mL
  3433   0015E0  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3434   0015E4  C026  F01C         	movff	motor_action@r,stop@mR
  3435   0015E8  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3436   0015EC  EC67  F013         	call	_stop	;wreg free
  3437   0015F0                     
  3438                           ;../dc_motor.c: 204:             right_90(l,r);
  3439   0015F0  C024  F01A         	movff	motor_action@l,right_90@mL
  3440   0015F4  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3441   0015F8  C026  F01C         	movff	motor_action@r,right_90@mR
  3442   0015FC  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3443   001600  EC2E  F011         	call	_right_90	;wreg free
  3444                           
  3445                           ;../dc_motor.c: 205:             break;
  3446   001604  EFF2  F00B         	goto	l322
  3447   001608                     l2955:
  3448                           
  3449                           ;../dc_motor.c: 207:             reverse_fromcard(l,r);
  3450   001608  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3451   00160C  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3452   001610  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3453   001614  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3454   001618  ECC5  F012         	call	_reverse_fromcard	;wreg free
  3455                           
  3456                           ;../dc_motor.c: 208:             stop(l,r);
  3457   00161C  C024  F01A         	movff	motor_action@l,stop@mL
  3458   001620  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3459   001624  C026  F01C         	movff	motor_action@r,stop@mR
  3460   001628  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3461   00162C  EC67  F013         	call	_stop	;wreg free
  3462   001630                     
  3463                           ;../dc_motor.c: 209:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3464   001630  0E29               	movlw	41
  3465   001632  6E29               	movwf	(??_motor_action+1)^0,c
  3466   001634  0E96               	movlw	150
  3467   001636  6E28               	movwf	??_motor_action^0,c
  3468   001638  0E7F               	movlw	127
  3469   00163A                     u1757:
  3470   00163A  2EE8               	decfsz	wreg,f,c
  3471   00163C  D7FE               	bra	u1757
  3472   00163E  2E28               	decfsz	??_motor_action^0,f,c
  3473   001640  D7FC               	bra	u1757
  3474   001642  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3475   001644  D7FA               	bra	u1757
  3476   001646  F000               	nop	
  3477   001648                     
  3478                           ;../dc_motor.c: 210:             stop(l,r);
  3479   001648  C024  F01A         	movff	motor_action@l,stop@mL
  3480   00164C  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3481   001650  C026  F01C         	movff	motor_action@r,stop@mR
  3482   001654  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3483   001658  EC67  F013         	call	_stop	;wreg free
  3484   00165C                     
  3485                           ;../dc_motor.c: 211:             left_90(l,r);
  3486   00165C  C024  F01A         	movff	motor_action@l,left_90@mL
  3487   001660  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3488   001664  C026  F01C         	movff	motor_action@r,left_90@mR
  3489   001668  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3490   00166C  EC80  F011         	call	_left_90	;wreg free
  3491                           
  3492                           ;../dc_motor.c: 212:             break;
  3493   001670  EFF2  F00B         	goto	l322
  3494   001674                     l2963:
  3495                           
  3496                           ;../dc_motor.c: 214:             reverse_fromcard(l,r);
  3497   001674  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3498   001678  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3499   00167C  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3500   001680  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3501   001684  ECC5  F012         	call	_reverse_fromcard	;wreg free
  3502                           
  3503                           ;../dc_motor.c: 215:             stop(l,r);
  3504   001688  C024  F01A         	movff	motor_action@l,stop@mL
  3505   00168C  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3506   001690  C026  F01C         	movff	motor_action@r,stop@mR
  3507   001694  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3508   001698  EC67  F013         	call	_stop	;wreg free
  3509   00169C                     
  3510                           ;../dc_motor.c: 216:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3511   00169C  0E29               	movlw	41
  3512   00169E  6E29               	movwf	(??_motor_action+1)^0,c
  3513   0016A0  0E96               	movlw	150
  3514   0016A2  6E28               	movwf	??_motor_action^0,c
  3515   0016A4  0E7F               	movlw	127
  3516   0016A6                     u1767:
  3517   0016A6  2EE8               	decfsz	wreg,f,c
  3518   0016A8  D7FE               	bra	u1767
  3519   0016AA  2E28               	decfsz	??_motor_action^0,f,c
  3520   0016AC  D7FC               	bra	u1767
  3521   0016AE  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3522   0016B0  D7FA               	bra	u1767
  3523   0016B2  F000               	nop	
  3524   0016B4                     
  3525                           ;../dc_motor.c: 217:             spin_180(l,r);
  3526   0016B4  C024  F01A         	movff	motor_action@l,spin_180@mL
  3527   0016B8  C025  F01B         	movff	motor_action@l+1,spin_180@mL+1
  3528   0016BC  C026  F01C         	movff	motor_action@r,spin_180@mR
  3529   0016C0  C027  F01D         	movff	motor_action@r+1,spin_180@mR+1
  3530   0016C4  ECD2  F011         	call	_spin_180	;wreg free
  3531   0016C8                     
  3532                           ;../dc_motor.c: 218:             stop(l,r);
  3533   0016C8  C024  F01A         	movff	motor_action@l,stop@mL
  3534   0016CC  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3535   0016D0  C026  F01C         	movff	motor_action@r,stop@mR
  3536   0016D4  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3537   0016D8  EC67  F013         	call	_stop	;wreg free
  3538                           
  3539                           ;../dc_motor.c: 219:             break;
  3540   0016DC  EFF2  F00B         	goto	l322
  3541   0016E0                     l2971:
  3542                           
  3543                           ;../dc_motor.c: 221:             reverse_onesquare(l,r);
  3544   0016E0  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3545   0016E4  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3546   0016E8  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3547   0016EC  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3548   0016F0  EC74  F012         	call	_reverse_onesquare	;wreg free
  3549                           
  3550                           ;../dc_motor.c: 222:             right_90(l,r);
  3551   0016F4  C024  F01A         	movff	motor_action@l,right_90@mL
  3552   0016F8  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3553   0016FC  C026  F01C         	movff	motor_action@r,right_90@mR
  3554   001700  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3555   001704  EC2E  F011         	call	_right_90	;wreg free
  3556                           
  3557                           ;../dc_motor.c: 223:             break;
  3558   001708  EFF2  F00B         	goto	l322
  3559   00170C                     l2973:
  3560                           
  3561                           ;../dc_motor.c: 225:             reverse_onesquare(l,r);
  3562   00170C  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3563   001710  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3564   001714  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3565   001718  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3566   00171C  EC74  F012         	call	_reverse_onesquare	;wreg free
  3567                           
  3568                           ;../dc_motor.c: 226:             left_90(l,r);
  3569   001720  C024  F01A         	movff	motor_action@l,left_90@mL
  3570   001724  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3571   001728  C026  F01C         	movff	motor_action@r,left_90@mR
  3572   00172C  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3573   001730  EC80  F011         	call	_left_90	;wreg free
  3574                           
  3575                           ;../dc_motor.c: 227:             break;
  3576   001734  EFF2  F00B         	goto	l322
  3577   001738                     l2975:
  3578                           
  3579                           ;../dc_motor.c: 229:             reverse_fromcard(l,r);
  3580   001738  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3581   00173C  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3582   001740  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3583   001744  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3584   001748  ECC5  F012         	call	_reverse_fromcard	;wreg free
  3585                           
  3586                           ;../dc_motor.c: 230:             right_135(l,r);
  3587   00174C  C024  F01A         	movff	motor_action@l,right_135@mL
  3588   001750  C025  F01B         	movff	motor_action@l+1,right_135@mL+1
  3589   001754  C026  F01C         	movff	motor_action@r,right_135@mR
  3590   001758  C027  F01D         	movff	motor_action@r+1,right_135@mR+1
  3591   00175C  EC23  F012         	call	_right_135	;wreg free
  3592                           
  3593                           ;../dc_motor.c: 231:             break;
  3594   001760  EFF2  F00B         	goto	l322
  3595   001764                     l2977:
  3596                           
  3597                           ;../dc_motor.c: 233:             reverse_fromcard(l,r);
  3598   001764  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3599   001768  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3600   00176C  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3601   001770  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3602   001774  ECC5  F012         	call	_reverse_fromcard	;wreg free
  3603                           
  3604                           ;../dc_motor.c: 234:             left_135(l,r);
  3605   001778  C024  F01A         	movff	motor_action@l,left_135@mL
  3606   00177C  C025  F01B         	movff	motor_action@l+1,left_135@mL+1
  3607   001780  C026  F01C         	movff	motor_action@r,left_135@mR
  3608   001784  C027  F01D         	movff	motor_action@r+1,left_135@mR+1
  3609   001788  EC16  F013         	call	_left_135	;wreg free
  3610                           
  3611                           ;../dc_motor.c: 235:             break;
  3612   00178C  EFF2  F00B         	goto	l322
  3613   001790                     l2981:
  3614   001790  C022  F028         	movff	motor_action@color,??_motor_action
  3615   001794  C023  F029         	movff	motor_action@color+1,??_motor_action+1
  3616                           
  3617                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3618                           ; Switch size 1, requested type "simple"
  3619                           ; Number of cases is 1, Range of values is 0 to 0
  3620                           ; switch strategies available:
  3621                           ; Name         Instructions Cycles
  3622                           ; simple_byte            4     3 (average)
  3623                           ;	Chosen strategy is simple_byte
  3624   001798  5029               	movf	(??_motor_action+1)^0,w,c
  3625   00179A  0A00               	xorlw	0	; case 0
  3626   00179C  B4D8               	btfsc	status,2,c
  3627   00179E  EFD3  F00B         	goto	l3207
  3628   0017A2  EFF2  F00B         	goto	l322
  3629   0017A6                     l3207:
  3630                           
  3631                           ; Switch size 1, requested type "simple"
  3632                           ; Number of cases is 7, Range of values is 1 to 7
  3633                           ; switch strategies available:
  3634                           ; Name         Instructions Cycles
  3635                           ; simple_byte           22    12 (average)
  3636                           ;	Chosen strategy is simple_byte
  3637   0017A6  5028               	movf	??_motor_action^0,w,c
  3638   0017A8  0A01               	xorlw	1	; case 1
  3639   0017AA  B4D8               	btfsc	status,2,c
  3640   0017AC  EFCE  F00A         	goto	l2947
  3641   0017B0  0A03               	xorlw	3	; case 2
  3642   0017B2  B4D8               	btfsc	status,2,c
  3643   0017B4  EF04  F00B         	goto	l2955
  3644   0017B8  0A01               	xorlw	1	; case 3
  3645   0017BA  B4D8               	btfsc	status,2,c
  3646   0017BC  EF3A  F00B         	goto	l2963
  3647   0017C0  0A07               	xorlw	7	; case 4
  3648   0017C2  B4D8               	btfsc	status,2,c
  3649   0017C4  EF70  F00B         	goto	l2971
  3650   0017C8  0A01               	xorlw	1	; case 5
  3651   0017CA  B4D8               	btfsc	status,2,c
  3652   0017CC  EF86  F00B         	goto	l2973
  3653   0017D0  0A03               	xorlw	3	; case 6
  3654   0017D2  B4D8               	btfsc	status,2,c
  3655   0017D4  EF9C  F00B         	goto	l2975
  3656   0017D8  0A01               	xorlw	1	; case 7
  3657   0017DA  B4D8               	btfsc	status,2,c
  3658   0017DC  EFB2  F00B         	goto	l2977
  3659   0017E0  EFF2  F00B         	goto	l322
  3660   0017E4                     l322:
  3661   0017E4  0012               	return		;funcret
  3662   0017E6                     __end_of_motor_action:
  3663                           	callstack 0
  3664                           
  3665 ;; *************** function _stop *****************
  3666 ;; Defined at:
  3667 ;;		line 61 in file "../dc_motor.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3670 ;;		 -> main@motorL(9), 
  3671 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3672 ;;		 -> main@motorR(9), 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  i               2   30[COMRAM] int 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  1    wreg      void 
  3677 ;; Registers used:
  3678 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3684 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3685 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3686 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3687 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3688 ;;Total ram usage:        7 bytes
  3689 ;; Hardware stack levels used: 1
  3690 ;; Hardware stack levels required when called: 3
  3691 ;; This function calls:
  3692 ;;		_setMotorPWM
  3693 ;; This function is called by:
  3694 ;;		_main
  3695 ;;		_motor_action
  3696 ;;		_motor_action_return
  3697 ;; This function uses a non-reentrant model
  3698 ;;
  3699                           
  3700                           	psect	text15
  3701   0026CE                     __ptext15:
  3702                           	callstack 0
  3703   0026CE                     _stop:
  3704                           	callstack 27
  3705   0026CE                     
  3706                           ;../dc_motor.c: 61: void stop(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c: 6
      +                          2: {;../dc_motor.c: 63:     mL->direction = 0;
  3707   0026CE  EE20 F001          	lfsr	2,1
  3708   0026D2  501A               	movf	stop@mL^0,w,c
  3709   0026D4  26D9               	addwf	fsr2l,f,c
  3710   0026D6  501B               	movf	(stop@mL+1)^0,w,c
  3711   0026D8  22DA               	addwfc	fsr2h,f,c
  3712   0026DA  0E00               	movlw	0
  3713   0026DC  6EDF               	movwf	indf2,c
  3714                           
  3715                           ;../dc_motor.c: 64:     mR->direction = 0;
  3716   0026DE  EE20 F001          	lfsr	2,1
  3717   0026E2  501C               	movf	stop@mR^0,w,c
  3718   0026E4  26D9               	addwf	fsr2l,f,c
  3719   0026E6  501D               	movf	(stop@mR+1)^0,w,c
  3720   0026E8  22DA               	addwfc	fsr2h,f,c
  3721   0026EA  0E00               	movlw	0
  3722   0026EC  6EDF               	movwf	indf2,c
  3723   0026EE                     
  3724                           ;../dc_motor.c: 65:     for (int i = 5;i>0;i = i - 1)
  3725   0026EE  0E00               	movlw	0
  3726   0026F0  6E20               	movwf	(stop@i+1)^0,c
  3727   0026F2  0E05               	movlw	5
  3728   0026F4  6E1F               	movwf	stop@i^0,c
  3729   0026F6                     l2559:
  3730                           
  3731                           ;../dc_motor.c: 66:     {;../dc_motor.c: 67:         mL->power = i;
  3732   0026F6  C01A  FFD9         	movff	stop@mL,fsr2l
  3733   0026FA  C01B  FFDA         	movff	stop@mL+1,fsr2h
  3734   0026FE  C01F  FFDF         	movff	stop@i,indf2
  3735                           
  3736                           ;../dc_motor.c: 68:         mR->power = i;
  3737   002702  C01C  FFD9         	movff	stop@mR,fsr2l
  3738   002706  C01D  FFDA         	movff	stop@mR+1,fsr2h
  3739   00270A  C01F  FFDF         	movff	stop@i,indf2
  3740   00270E                     
  3741                           ;../dc_motor.c: 69:         setMotorPWM(mL);
  3742   00270E  C01A  F00F         	movff	stop@mL,setMotorPWM@m
  3743   002712  C01B  F010         	movff	stop@mL+1,setMotorPWM@m+1
  3744   002716  ECF3  F00B         	call	_setMotorPWM	;wreg free
  3745   00271A                     
  3746                           ;../dc_motor.c: 70:         setMotorPWM(mR);
  3747   00271A  C01C  F00F         	movff	stop@mR,setMotorPWM@m
  3748   00271E  C01D  F010         	movff	stop@mR+1,setMotorPWM@m+1
  3749   002722  ECF3  F00B         	call	_setMotorPWM	;wreg free
  3750   002726                     
  3751                           ;../dc_motor.c: 71:         _delay((unsigned long)((10)*(64000000/4000.0)));
  3752   002726  0ED0               	movlw	208
  3753   002728  6E1E               	movwf	??_stop^0,c
  3754   00272A  0ECA               	movlw	202
  3755   00272C                     u1777:
  3756   00272C  2EE8               	decfsz	wreg,f,c
  3757   00272E  D7FE               	bra	u1777
  3758   002730  2E1E               	decfsz	??_stop^0,f,c
  3759   002732  D7FC               	bra	u1777
  3760   002734                     
  3761                           ;../dc_motor.c: 72:     }
  3762   002734  0EFF               	movlw	255
  3763   002736  241F               	addwf	stop@i^0,w,c
  3764   002738  6E1F               	movwf	stop@i^0,c
  3765   00273A  0EFF               	movlw	255
  3766   00273C  2020               	addwfc	(stop@i+1)^0,w,c
  3767   00273E  6E20               	movwf	(stop@i+1)^0,c
  3768   002740  BE20               	btfsc	(stop@i+1)^0,7,c
  3769   002742  EFAD  F013         	goto	u1340
  3770   002746  5020               	movf	(stop@i+1)^0,w,c
  3771   002748  E106               	bnz	u1341
  3772   00274A  041F               	decf	stop@i^0,w,c
  3773   00274C  B0D8               	btfsc	status,0,c
  3774   00274E  EFAB  F013         	goto	u1341
  3775   002752  EFAD  F013         	goto	u1340
  3776   002756                     u1341:
  3777   002756  EF7B  F013         	goto	l2559
  3778   00275A                     u1340:
  3779   00275A  0012               	return		;funcret
  3780   00275C                     __end_of_stop:
  3781                           	callstack 0
  3782                           
  3783 ;; *************** function _spin_180 *****************
  3784 ;; Defined at:
  3785 ;;		line 151 in file "../dc_motor.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3788 ;;		 -> main@motorL(9), 
  3789 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3790 ;;		 -> main@motorR(9), 
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;  i               2   31[COMRAM] int 
  3793 ;; Return value:  Size  Location     Type
  3794 ;;                  1    wreg      void 
  3795 ;; Registers used:
  3796 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3797 ;; Tracked objects:
  3798 ;;		On entry : 0/0
  3799 ;;		On exit  : 0/0
  3800 ;;		Unchanged: 0/0
  3801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3802 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3803 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3804 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3805 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3806 ;;Total ram usage:        8 bytes
  3807 ;; Hardware stack levels used: 1
  3808 ;; Hardware stack levels required when called: 3
  3809 ;; This function calls:
  3810 ;;		_setMotorPWM
  3811 ;; This function is called by:
  3812 ;;		_main
  3813 ;;		_motor_action
  3814 ;;		_motor_action_return
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           	psect	text16
  3819   0023A4                     __ptext16:
  3820                           	callstack 0
  3821   0023A4                     _spin_180:
  3822                           	callstack 27
  3823   0023A4                     
  3824                           ;../dc_motor.c: 151: void spin_180(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 152: {;../dc_motor.c: 153:     mL->direction = 1;
  3825   0023A4  EE20 F001          	lfsr	2,1
  3826   0023A8  501A               	movf	spin_180@mL^0,w,c
  3827   0023AA  26D9               	addwf	fsr2l,f,c
  3828   0023AC  501B               	movf	(spin_180@mL+1)^0,w,c
  3829   0023AE  22DA               	addwfc	fsr2h,f,c
  3830   0023B0  0E01               	movlw	1
  3831   0023B2  6EDF               	movwf	indf2,c
  3832                           
  3833                           ;../dc_motor.c: 154:     mR->direction = 0;
  3834   0023B4  EE20 F001          	lfsr	2,1
  3835   0023B8  501C               	movf	spin_180@mR^0,w,c
  3836   0023BA  26D9               	addwf	fsr2l,f,c
  3837   0023BC  501D               	movf	(spin_180@mR+1)^0,w,c
  3838   0023BE  22DA               	addwfc	fsr2h,f,c
  3839   0023C0  0E00               	movlw	0
  3840   0023C2  6EDF               	movwf	indf2,c
  3841   0023C4                     
  3842                           ;../dc_motor.c: 155:     for (int i = 0;i<50;i = i + 2)
  3843   0023C4  0E00               	movlw	0
  3844   0023C6  6E21               	movwf	(spin_180@i+1)^0,c
  3845   0023C8  0E00               	movlw	0
  3846   0023CA  6E20               	movwf	spin_180@i^0,c
  3847   0023CC                     l2579:
  3848                           
  3849                           ;../dc_motor.c: 156:     {;../dc_motor.c: 157:         mL->power = i;
  3850   0023CC  C01A  FFD9         	movff	spin_180@mL,fsr2l
  3851   0023D0  C01B  FFDA         	movff	spin_180@mL+1,fsr2h
  3852   0023D4  C020  FFDF         	movff	spin_180@i,indf2
  3853   0023D8                     
  3854                           ;../dc_motor.c: 158:         mR->power = 50 + i;
  3855   0023D8  5020               	movf	spin_180@i^0,w,c
  3856   0023DA  0F32               	addlw	50
  3857   0023DC  C01C  FFD9         	movff	spin_180@mR,fsr2l
  3858   0023E0  C01D  FFDA         	movff	spin_180@mR+1,fsr2h
  3859   0023E4  6EDF               	movwf	indf2,c
  3860   0023E6                     
  3861                           ;../dc_motor.c: 159:         setMotorPWM(mL);
  3862   0023E6  C01A  F00F         	movff	spin_180@mL,setMotorPWM@m
  3863   0023EA  C01B  F010         	movff	spin_180@mL+1,setMotorPWM@m+1
  3864   0023EE  ECF3  F00B         	call	_setMotorPWM	;wreg free
  3865   0023F2                     
  3866                           ;../dc_motor.c: 160:         setMotorPWM(mR);
  3867   0023F2  C01C  F00F         	movff	spin_180@mR,setMotorPWM@m
  3868   0023F6  C01D  F010         	movff	spin_180@mR+1,setMotorPWM@m+1
  3869   0023FA  ECF3  F00B         	call	_setMotorPWM	;wreg free
  3870   0023FE                     
  3871                           ;../dc_motor.c: 161:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3872   0023FE  0E35               	movlw	53
  3873   002400                     u1787:
  3874   002400  2EE8               	decfsz	wreg,f,c
  3875   002402  D7FE               	bra	u1787
  3876   002404  F000               	nop	
  3877   002406                     
  3878                           ;../dc_motor.c: 162:     }
  3879   002406  0E02               	movlw	2
  3880   002408  2420               	addwf	spin_180@i^0,w,c
  3881   00240A  6E20               	movwf	spin_180@i^0,c
  3882   00240C  0E00               	movlw	0
  3883   00240E  2021               	addwfc	(spin_180@i+1)^0,w,c
  3884   002410  6E21               	movwf	(spin_180@i+1)^0,c
  3885   002412  BE21               	btfsc	(spin_180@i+1)^0,7,c
  3886   002414  EF15  F012         	goto	u1351
  3887   002418  5021               	movf	(spin_180@i+1)^0,w,c
  3888   00241A  E109               	bnz	u1350
  3889   00241C  0E32               	movlw	50
  3890   00241E  5C20               	subwf	spin_180@i^0,w,c
  3891   002420  A0D8               	btfss	status,0,c
  3892   002422  EF15  F012         	goto	u1351
  3893   002426  EF17  F012         	goto	u1350
  3894   00242A                     u1351:
  3895   00242A  EFE6  F011         	goto	l2579
  3896   00242E                     u1350:
  3897   00242E                     
  3898                           ;../dc_motor.c: 163:     _delay((unsigned long)((290)*(64000000/4000.0)));
  3899   00242E  0E18               	movlw	24
  3900   002430  6E1F               	movwf	(??_spin_180+1)^0,c
  3901   002432  0E8A               	movlw	138
  3902   002434  6E1E               	movwf	??_spin_180^0,c
  3903   002436  0EE8               	movlw	232
  3904   002438                     u1797:
  3905   002438  2EE8               	decfsz	wreg,f,c
  3906   00243A  D7FE               	bra	u1797
  3907   00243C  2E1E               	decfsz	??_spin_180^0,f,c
  3908   00243E  D7FC               	bra	u1797
  3909   002440  2E1F               	decfsz	(??_spin_180+1)^0,f,c
  3910   002442  D7FA               	bra	u1797
  3911   002444  0012               	return		;funcret
  3912   002446                     __end_of_spin_180:
  3913                           	callstack 0
  3914                           
  3915 ;; *************** function _right_90 *****************
  3916 ;; Defined at:
  3917 ;;		line 121 in file "../dc_motor.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3920 ;;		 -> main@motorL(9), 
  3921 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3922 ;;		 -> main@motorR(9), 
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;  i               2   31[COMRAM] int 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3934 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3935 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3936 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3937 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3938 ;;Total ram usage:        8 bytes
  3939 ;; Hardware stack levels used: 1
  3940 ;; Hardware stack levels required when called: 3
  3941 ;; This function calls:
  3942 ;;		_setMotorPWM
  3943 ;; This function is called by:
  3944 ;;		_motor_action
  3945 ;;		_motor_action_return
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           	psect	text17
  3950   00225C                     __ptext17:
  3951                           	callstack 0
  3952   00225C                     _right_90:
  3953                           	callstack 26
  3954   00225C                     
  3955                           ;../dc_motor.c: 121: void right_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 122: {;../dc_motor.c: 123:     mL->direction = 1;
  3956   00225C  EE20 F001          	lfsr	2,1
  3957   002260  501A               	movf	right_90@mL^0,w,c
  3958   002262  26D9               	addwf	fsr2l,f,c
  3959   002264  501B               	movf	(right_90@mL+1)^0,w,c
  3960   002266  22DA               	addwfc	fsr2h,f,c
  3961   002268  0E01               	movlw	1
  3962   00226A  6EDF               	movwf	indf2,c
  3963                           
  3964                           ;../dc_motor.c: 124:     mR->direction = 0;
  3965   00226C  EE20 F001          	lfsr	2,1
  3966   002270  501C               	movf	right_90@mR^0,w,c
  3967   002272  26D9               	addwf	fsr2l,f,c
  3968   002274  501D               	movf	(right_90@mR+1)^0,w,c
  3969   002276  22DA               	addwfc	fsr2h,f,c
  3970   002278  0E00               	movlw	0
  3971   00227A  6EDF               	movwf	indf2,c
  3972   00227C                     
  3973                           ;../dc_motor.c: 125:     for (int i = 0;i<50;i = i + 2)
  3974   00227C  0E00               	movlw	0
  3975   00227E  6E21               	movwf	(right_90@i+1)^0,c
  3976   002280  0E00               	movlw	0
  3977   002282  6E20               	movwf	right_90@i^0,c
  3978   002284                     l2647:
  3979                           
  3980                           ;../dc_motor.c: 126:     {;../dc_motor.c: 127:         mL->power = i;
  3981   002284  C01A  FFD9         	movff	right_90@mL,fsr2l
  3982   002288  C01B  FFDA         	movff	right_90@mL+1,fsr2h
  3983   00228C  C020  FFDF         	movff	right_90@i,indf2
  3984   002290                     
  3985                           ;../dc_motor.c: 128:         mR->power = 50 + i;
  3986   002290  5020               	movf	right_90@i^0,w,c
  3987   002292  0F32               	addlw	50
  3988   002294  C01C  FFD9         	movff	right_90@mR,fsr2l
  3989   002298  C01D  FFDA         	movff	right_90@mR+1,fsr2h
  3990   00229C  6EDF               	movwf	indf2,c
  3991   00229E                     
  3992                           ;../dc_motor.c: 129:         setMotorPWM(mL);
  3993   00229E  C01A  F00F         	movff	right_90@mL,setMotorPWM@m
  3994   0022A2  C01B  F010         	movff	right_90@mL+1,setMotorPWM@m+1
  3995   0022A6  ECF3  F00B         	call	_setMotorPWM	;wreg free
  3996   0022AA                     
  3997                           ;../dc_motor.c: 130:         setMotorPWM(mR);
  3998   0022AA  C01C  F00F         	movff	right_90@mR,setMotorPWM@m
  3999   0022AE  C01D  F010         	movff	right_90@mR+1,setMotorPWM@m+1
  4000   0022B2  ECF3  F00B         	call	_setMotorPWM	;wreg free
  4001   0022B6                     
  4002                           ;../dc_motor.c: 131:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4003   0022B6  0E35               	movlw	53
  4004   0022B8                     u1807:
  4005   0022B8  2EE8               	decfsz	wreg,f,c
  4006   0022BA  D7FE               	bra	u1807
  4007   0022BC  F000               	nop	
  4008   0022BE                     
  4009                           ;../dc_motor.c: 132:     }
  4010   0022BE  0E02               	movlw	2
  4011   0022C0  2420               	addwf	right_90@i^0,w,c
  4012   0022C2  6E20               	movwf	right_90@i^0,c
  4013   0022C4  0E00               	movlw	0
  4014   0022C6  2021               	addwfc	(right_90@i+1)^0,w,c
  4015   0022C8  6E21               	movwf	(right_90@i+1)^0,c
  4016   0022CA  BE21               	btfsc	(right_90@i+1)^0,7,c
  4017   0022CC  EF71  F011         	goto	u1381
  4018   0022D0  5021               	movf	(right_90@i+1)^0,w,c
  4019   0022D2  E109               	bnz	u1380
  4020   0022D4  0E32               	movlw	50
  4021   0022D6  5C20               	subwf	right_90@i^0,w,c
  4022   0022D8  A0D8               	btfss	status,0,c
  4023   0022DA  EF71  F011         	goto	u1381
  4024   0022DE  EF73  F011         	goto	u1380
  4025   0022E2                     u1381:
  4026   0022E2  EF42  F011         	goto	l2647
  4027   0022E6                     u1380:
  4028   0022E6                     
  4029                           ;../dc_motor.c: 133:     _delay((unsigned long)((165)*(64000000/4000.0)));
  4030   0022E6  0E0E               	movlw	14
  4031   0022E8  6E1F               	movwf	(??_right_90+1)^0,c
  4032   0022EA  0E65               	movlw	101
  4033   0022EC  6E1E               	movwf	??_right_90^0,c
  4034   0022EE  0E87               	movlw	135
  4035   0022F0                     u1817:
  4036   0022F0  2EE8               	decfsz	wreg,f,c
  4037   0022F2  D7FE               	bra	u1817
  4038   0022F4  2E1E               	decfsz	??_right_90^0,f,c
  4039   0022F6  D7FC               	bra	u1817
  4040   0022F8  2E1F               	decfsz	(??_right_90+1)^0,f,c
  4041   0022FA  D7FA               	bra	u1817
  4042   0022FC  F000               	nop	
  4043   0022FE  0012               	return		;funcret
  4044   002300                     __end_of_right_90:
  4045                           	callstack 0
  4046                           
  4047 ;; *************** function _right_135 *****************
  4048 ;; Defined at:
  4049 ;;		line 166 in file "../dc_motor.c"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4052 ;;		 -> main@motorL(9), 
  4053 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4054 ;;		 -> main@motorR(9), 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  i               2   31[COMRAM] int 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4066 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4067 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4068 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4069 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4070 ;;Total ram usage:        8 bytes
  4071 ;; Hardware stack levels used: 1
  4072 ;; Hardware stack levels required when called: 3
  4073 ;; This function calls:
  4074 ;;		_setMotorPWM
  4075 ;; This function is called by:
  4076 ;;		_motor_action
  4077 ;;		_motor_action_return
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text18
  4082   002446                     __ptext18:
  4083                           	callstack 0
  4084   002446                     _right_135:
  4085                           	callstack 26
  4086   002446                     
  4087                           ;../dc_motor.c: 166: void right_135(struct DC_motor *mL, struct DC_motor *mR);../dc_moto
      +                          r.c: 167: {;../dc_motor.c: 168:     mL->direction = 1;
  4088   002446  EE20 F001          	lfsr	2,1
  4089   00244A  501A               	movf	right_135@mL^0,w,c
  4090   00244C  26D9               	addwf	fsr2l,f,c
  4091   00244E  501B               	movf	(right_135@mL+1)^0,w,c
  4092   002450  22DA               	addwfc	fsr2h,f,c
  4093   002452  0E01               	movlw	1
  4094   002454  6EDF               	movwf	indf2,c
  4095                           
  4096                           ;../dc_motor.c: 169:     mR->direction = 0;
  4097   002456  EE20 F001          	lfsr	2,1
  4098   00245A  501C               	movf	right_135@mR^0,w,c
  4099   00245C  26D9               	addwf	fsr2l,f,c
  4100   00245E  501D               	movf	(right_135@mR+1)^0,w,c
  4101   002460  22DA               	addwfc	fsr2h,f,c
  4102   002462  0E00               	movlw	0
  4103   002464  6EDF               	movwf	indf2,c
  4104   002466                     
  4105                           ;../dc_motor.c: 170:     for (int i = 0;i<50;i = i + 2)
  4106   002466  0E00               	movlw	0
  4107   002468  6E21               	movwf	(right_135@i+1)^0,c
  4108   00246A  0E00               	movlw	0
  4109   00246C  6E20               	movwf	right_135@i^0,c
  4110   00246E                     l2695:
  4111                           
  4112                           ;../dc_motor.c: 171:     {;../dc_motor.c: 172:         mL->power = i;
  4113   00246E  C01A  FFD9         	movff	right_135@mL,fsr2l
  4114   002472  C01B  FFDA         	movff	right_135@mL+1,fsr2h
  4115   002476  C020  FFDF         	movff	right_135@i,indf2
  4116   00247A                     
  4117                           ;../dc_motor.c: 173:         mR->power = 50 + i;
  4118   00247A  5020               	movf	right_135@i^0,w,c
  4119   00247C  0F32               	addlw	50
  4120   00247E  C01C  FFD9         	movff	right_135@mR,fsr2l
  4121   002482  C01D  FFDA         	movff	right_135@mR+1,fsr2h
  4122   002486  6EDF               	movwf	indf2,c
  4123   002488                     
  4124                           ;../dc_motor.c: 174:         setMotorPWM(mL);
  4125   002488  C01A  F00F         	movff	right_135@mL,setMotorPWM@m
  4126   00248C  C01B  F010         	movff	right_135@mL+1,setMotorPWM@m+1
  4127   002490  ECF3  F00B         	call	_setMotorPWM	;wreg free
  4128   002494                     
  4129                           ;../dc_motor.c: 175:         setMotorPWM(mR);
  4130   002494  C01C  F00F         	movff	right_135@mR,setMotorPWM@m
  4131   002498  C01D  F010         	movff	right_135@mR+1,setMotorPWM@m+1
  4132   00249C  ECF3  F00B         	call	_setMotorPWM	;wreg free
  4133   0024A0                     
  4134                           ;../dc_motor.c: 176:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4135   0024A0  0E35               	movlw	53
  4136   0024A2                     u1827:
  4137   0024A2  2EE8               	decfsz	wreg,f,c
  4138   0024A4  D7FE               	bra	u1827
  4139   0024A6  F000               	nop	
  4140   0024A8                     
  4141                           ;../dc_motor.c: 177:     }
  4142   0024A8  0E02               	movlw	2
  4143   0024AA  2420               	addwf	right_135@i^0,w,c
  4144   0024AC  6E20               	movwf	right_135@i^0,c
  4145   0024AE  0E00               	movlw	0
  4146   0024B0  2021               	addwfc	(right_135@i+1)^0,w,c
  4147   0024B2  6E21               	movwf	(right_135@i+1)^0,c
  4148   0024B4  BE21               	btfsc	(right_135@i+1)^0,7,c
  4149   0024B6  EF66  F012         	goto	u1401
  4150   0024BA  5021               	movf	(right_135@i+1)^0,w,c
  4151   0024BC  E109               	bnz	u1400
  4152   0024BE  0E32               	movlw	50
  4153   0024C0  5C20               	subwf	right_135@i^0,w,c
  4154   0024C2  A0D8               	btfss	status,0,c
  4155   0024C4  EF66  F012         	goto	u1401
  4156   0024C8  EF68  F012         	goto	u1400
  4157   0024CC                     u1401:
  4158   0024CC  EF37  F012         	goto	l2695
  4159   0024D0                     u1400:
  4160   0024D0                     
  4161                           ;../dc_motor.c: 178:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4162   0024D0  0E13               	movlw	19
  4163   0024D2  6E1F               	movwf	(??_right_135+1)^0,c
  4164   0024D4  0EAC               	movlw	172
  4165   0024D6  6E1E               	movwf	??_right_135^0,c
  4166   0024D8  0E2A               	movlw	42
  4167   0024DA                     u1837:
  4168   0024DA  2EE8               	decfsz	wreg,f,c
  4169   0024DC  D7FE               	bra	u1837
  4170   0024DE  2E1E               	decfsz	??_right_135^0,f,c
  4171   0024E0  D7FC               	bra	u1837
  4172   0024E2  2E1F               	decfsz	(??_right_135+1)^0,f,c
  4173   0024E4  D7FA               	bra	u1837
  4174   0024E6  0012               	return		;funcret
  4175   0024E8                     __end_of_right_135:
  4176                           	callstack 0
  4177                           
  4178 ;; *************** function _reverse_onesquare *****************
  4179 ;; Defined at:
  4180 ;;		line 106 in file "../dc_motor.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4183 ;;		 -> main@motorL(9), 
  4184 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4185 ;;		 -> main@motorR(9), 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;  i               2   31[COMRAM] int 
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  1    wreg      void 
  4190 ;; Registers used:
  4191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4197 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4198 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4199 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4200 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4201 ;;Total ram usage:        8 bytes
  4202 ;; Hardware stack levels used: 1
  4203 ;; Hardware stack levels required when called: 3
  4204 ;; This function calls:
  4205 ;;		_setMotorPWM
  4206 ;; This function is called by:
  4207 ;;		_motor_action
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text19
  4212   0024E8                     __ptext19:
  4213                           	callstack 0
  4214   0024E8                     _reverse_onesquare:
  4215                           	callstack 26
  4216   0024E8                     
  4217                           ;../dc_motor.c: 106: void reverse_onesquare (struct DC_motor *mL, struct DC_motor *mR);.
      +                          ./dc_motor.c: 107: {;../dc_motor.c: 108:     mL->direction = 0;
  4218   0024E8  EE20 F001          	lfsr	2,1
  4219   0024EC  501A               	movf	reverse_onesquare@mL^0,w,c
  4220   0024EE  26D9               	addwf	fsr2l,f,c
  4221   0024F0  501B               	movf	(reverse_onesquare@mL+1)^0,w,c
  4222   0024F2  22DA               	addwfc	fsr2h,f,c
  4223   0024F4  0E00               	movlw	0
  4224   0024F6  6EDF               	movwf	indf2,c
  4225                           
  4226                           ;../dc_motor.c: 109:     mR->direction = 0;
  4227   0024F8  EE20 F001          	lfsr	2,1
  4228   0024FC  501C               	movf	reverse_onesquare@mR^0,w,c
  4229   0024FE  26D9               	addwf	fsr2l,f,c
  4230   002500  501D               	movf	(reverse_onesquare@mR+1)^0,w,c
  4231   002502  22DA               	addwfc	fsr2h,f,c
  4232   002504  0E00               	movlw	0
  4233   002506  6EDF               	movwf	indf2,c
  4234   002508                     
  4235                           ;../dc_motor.c: 110:     for (int i=0;i<51;i=i + 2)
  4236   002508  0E00               	movlw	0
  4237   00250A  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  4238   00250C  0E00               	movlw	0
  4239   00250E  6E20               	movwf	reverse_onesquare@i^0,c
  4240   002510                     l2625:
  4241                           
  4242                           ;../dc_motor.c: 111:     {;../dc_motor.c: 112:         mL->power = i;
  4243   002510  C01A  FFD9         	movff	reverse_onesquare@mL,fsr2l
  4244   002514  C01B  FFDA         	movff	reverse_onesquare@mL+1,fsr2h
  4245   002518  C020  FFDF         	movff	reverse_onesquare@i,indf2
  4246                           
  4247                           ;../dc_motor.c: 113:         mR->power = i;
  4248   00251C  C01C  FFD9         	movff	reverse_onesquare@mR,fsr2l
  4249   002520  C01D  FFDA         	movff	reverse_onesquare@mR+1,fsr2h
  4250   002524  C020  FFDF         	movff	reverse_onesquare@i,indf2
  4251   002528                     
  4252                           ;../dc_motor.c: 114:         setMotorPWM(mL);
  4253   002528  C01A  F00F         	movff	reverse_onesquare@mL,setMotorPWM@m
  4254   00252C  C01B  F010         	movff	reverse_onesquare@mL+1,setMotorPWM@m+1
  4255   002530  ECF3  F00B         	call	_setMotorPWM	;wreg free
  4256   002534                     
  4257                           ;../dc_motor.c: 115:         setMotorPWM(mR);
  4258   002534  C01C  F00F         	movff	reverse_onesquare@mR,setMotorPWM@m
  4259   002538  C01D  F010         	movff	reverse_onesquare@mR+1,setMotorPWM@m+1
  4260   00253C  ECF3  F00B         	call	_setMotorPWM	;wreg free
  4261   002540                     
  4262                           ;../dc_motor.c: 116:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4263   002540  0E35               	movlw	53
  4264   002542                     u1847:
  4265   002542  2EE8               	decfsz	wreg,f,c
  4266   002544  D7FE               	bra	u1847
  4267   002546  F000               	nop	
  4268   002548                     
  4269                           ;../dc_motor.c: 117:     }
  4270   002548  0E02               	movlw	2
  4271   00254A  2420               	addwf	reverse_onesquare@i^0,w,c
  4272   00254C  6E20               	movwf	reverse_onesquare@i^0,c
  4273   00254E  0E00               	movlw	0
  4274   002550  2021               	addwfc	(reverse_onesquare@i+1)^0,w,c
  4275   002552  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  4276   002554  BE21               	btfsc	(reverse_onesquare@i+1)^0,7,c
  4277   002556  EFB6  F012         	goto	u1371
  4278   00255A  5021               	movf	(reverse_onesquare@i+1)^0,w,c
  4279   00255C  E109               	bnz	u1370
  4280   00255E  0E33               	movlw	51
  4281   002560  5C20               	subwf	reverse_onesquare@i^0,w,c
  4282   002562  A0D8               	btfss	status,0,c
  4283   002564  EFB6  F012         	goto	u1371
  4284   002568  EFB8  F012         	goto	u1370
  4285   00256C                     u1371:
  4286   00256C  EF88  F012         	goto	l2625
  4287   002570                     u1370:
  4288   002570                     
  4289                           ;../dc_motor.c: 118:     _delay((unsigned long)((1100)*(64000000/4000.0)));
  4290   002570  0E5A               	movlw	90
  4291   002572  6E1F               	movwf	(??_reverse_onesquare+1)^0,c
  4292   002574  0E49               	movlw	73
  4293   002576  6E1E               	movwf	??_reverse_onesquare^0,c
  4294   002578  0EE7               	movlw	231
  4295   00257A                     u1857:
  4296   00257A  2EE8               	decfsz	wreg,f,c
  4297   00257C  D7FE               	bra	u1857
  4298   00257E  2E1E               	decfsz	??_reverse_onesquare^0,f,c
  4299   002580  D7FC               	bra	u1857
  4300   002582  2E1F               	decfsz	(??_reverse_onesquare+1)^0,f,c
  4301   002584  D7FA               	bra	u1857
  4302   002586  F000               	nop	
  4303   002588  0012               	return		;funcret
  4304   00258A                     __end_of_reverse_onesquare:
  4305                           	callstack 0
  4306                           
  4307 ;; *************** function _reverse_fromcard *****************
  4308 ;; Defined at:
  4309 ;;		line 91 in file "../dc_motor.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4312 ;;		 -> main@motorL(9), 
  4313 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4314 ;;		 -> main@motorR(9), 
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;  i               2   31[COMRAM] int 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  1    wreg      void 
  4319 ;; Registers used:
  4320 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4326 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4327 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4328 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4329 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4330 ;;Total ram usage:        8 bytes
  4331 ;; Hardware stack levels used: 1
  4332 ;; Hardware stack levels required when called: 3
  4333 ;; This function calls:
  4334 ;;		_setMotorPWM
  4335 ;; This function is called by:
  4336 ;;		_motor_action
  4337 ;;		_motor_action_return
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           	psect	text20
  4342   00258A                     __ptext20:
  4343                           	callstack 0
  4344   00258A                     _reverse_fromcard:
  4345                           	callstack 26
  4346   00258A                     
  4347                           ;../dc_motor.c: 91: void reverse_fromcard (struct DC_motor *mL, struct DC_motor *mR);../
      +                          dc_motor.c: 92: {;../dc_motor.c: 93:     mL->direction = 0;
  4348   00258A  EE20 F001          	lfsr	2,1
  4349   00258E  501A               	movf	reverse_fromcard@mL^0,w,c
  4350   002590  26D9               	addwf	fsr2l,f,c
  4351   002592  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  4352   002594  22DA               	addwfc	fsr2h,f,c
  4353   002596  0E00               	movlw	0
  4354   002598  6EDF               	movwf	indf2,c
  4355                           
  4356                           ;../dc_motor.c: 94:     mL->direction = 0;
  4357   00259A  EE20 F001          	lfsr	2,1
  4358   00259E  501A               	movf	reverse_fromcard@mL^0,w,c
  4359   0025A0  26D9               	addwf	fsr2l,f,c
  4360   0025A2  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  4361   0025A4  22DA               	addwfc	fsr2h,f,c
  4362   0025A6  0E00               	movlw	0
  4363   0025A8  6EDF               	movwf	indf2,c
  4364   0025AA                     
  4365                           ;../dc_motor.c: 95:     for (int i = 0;i < 41;i = i + 2)
  4366   0025AA  0E00               	movlw	0
  4367   0025AC  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  4368   0025AE  0E00               	movlw	0
  4369   0025B0  6E20               	movwf	reverse_fromcard@i^0,c
  4370   0025B2                     l2603:
  4371                           
  4372                           ;../dc_motor.c: 96:     {;../dc_motor.c: 97:         mL->power = i;
  4373   0025B2  C01A  FFD9         	movff	reverse_fromcard@mL,fsr2l
  4374   0025B6  C01B  FFDA         	movff	reverse_fromcard@mL+1,fsr2h
  4375   0025BA  C020  FFDF         	movff	reverse_fromcard@i,indf2
  4376                           
  4377                           ;../dc_motor.c: 98:         mR->power = i;
  4378   0025BE  C01C  FFD9         	movff	reverse_fromcard@mR,fsr2l
  4379   0025C2  C01D  FFDA         	movff	reverse_fromcard@mR+1,fsr2h
  4380   0025C6  C020  FFDF         	movff	reverse_fromcard@i,indf2
  4381   0025CA                     
  4382                           ;../dc_motor.c: 99:         setMotorPWM(mL);
  4383   0025CA  C01A  F00F         	movff	reverse_fromcard@mL,setMotorPWM@m
  4384   0025CE  C01B  F010         	movff	reverse_fromcard@mL+1,setMotorPWM@m+1
  4385   0025D2  ECF3  F00B         	call	_setMotorPWM	;wreg free
  4386   0025D6                     
  4387                           ;../dc_motor.c: 100:         setMotorPWM(mR);
  4388   0025D6  C01C  F00F         	movff	reverse_fromcard@mR,setMotorPWM@m
  4389   0025DA  C01D  F010         	movff	reverse_fromcard@mR+1,setMotorPWM@m+1
  4390   0025DE  ECF3  F00B         	call	_setMotorPWM	;wreg free
  4391   0025E2                     
  4392                           ;../dc_motor.c: 101:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4393   0025E2  0E35               	movlw	53
  4394   0025E4                     u1867:
  4395   0025E4  2EE8               	decfsz	wreg,f,c
  4396   0025E6  D7FE               	bra	u1867
  4397   0025E8  F000               	nop	
  4398   0025EA                     
  4399                           ;../dc_motor.c: 102:     }
  4400   0025EA  0E02               	movlw	2
  4401   0025EC  2420               	addwf	reverse_fromcard@i^0,w,c
  4402   0025EE  6E20               	movwf	reverse_fromcard@i^0,c
  4403   0025F0  0E00               	movlw	0
  4404   0025F2  2021               	addwfc	(reverse_fromcard@i+1)^0,w,c
  4405   0025F4  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  4406   0025F6  BE21               	btfsc	(reverse_fromcard@i+1)^0,7,c
  4407   0025F8  EF07  F013         	goto	u1361
  4408   0025FC  5021               	movf	(reverse_fromcard@i+1)^0,w,c
  4409   0025FE  E109               	bnz	u1360
  4410   002600  0E29               	movlw	41
  4411   002602  5C20               	subwf	reverse_fromcard@i^0,w,c
  4412   002604  A0D8               	btfss	status,0,c
  4413   002606  EF07  F013         	goto	u1361
  4414   00260A  EF09  F013         	goto	u1360
  4415   00260E                     u1361:
  4416   00260E  EFD9  F012         	goto	l2603
  4417   002612                     u1360:
  4418   002612                     
  4419                           ;../dc_motor.c: 103:     _delay((unsigned long)((500)*(64000000/4000.0)));
  4420   002612  0E29               	movlw	41
  4421   002614  6E1F               	movwf	(??_reverse_fromcard+1)^0,c
  4422   002616  0E96               	movlw	150
  4423   002618  6E1E               	movwf	??_reverse_fromcard^0,c
  4424   00261A  0E7F               	movlw	127
  4425   00261C                     u1877:
  4426   00261C  2EE8               	decfsz	wreg,f,c
  4427   00261E  D7FE               	bra	u1877
  4428   002620  2E1E               	decfsz	??_reverse_fromcard^0,f,c
  4429   002622  D7FC               	bra	u1877
  4430   002624  2E1F               	decfsz	(??_reverse_fromcard+1)^0,f,c
  4431   002626  D7FA               	bra	u1877
  4432   002628  F000               	nop	
  4433   00262A  0012               	return		;funcret
  4434   00262C                     __end_of_reverse_fromcard:
  4435                           	callstack 0
  4436                           
  4437 ;; *************** function _left_90 *****************
  4438 ;; Defined at:
  4439 ;;		line 136 in file "../dc_motor.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4442 ;;		 -> main@motorL(9), 
  4443 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4444 ;;		 -> main@motorR(9), 
  4445 ;; Auto vars:     Size  Location     Type
  4446 ;;  i               2   31[COMRAM] int 
  4447 ;; Return value:  Size  Location     Type
  4448 ;;                  1    wreg      void 
  4449 ;; Registers used:
  4450 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4451 ;; Tracked objects:
  4452 ;;		On entry : 0/0
  4453 ;;		On exit  : 0/0
  4454 ;;		Unchanged: 0/0
  4455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4456 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4458 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4459 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4460 ;;Total ram usage:        8 bytes
  4461 ;; Hardware stack levels used: 1
  4462 ;; Hardware stack levels required when called: 3
  4463 ;; This function calls:
  4464 ;;		_setMotorPWM
  4465 ;; This function is called by:
  4466 ;;		_motor_action
  4467 ;;		_motor_action_return
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           	psect	text21
  4472   002300                     __ptext21:
  4473                           	callstack 0
  4474   002300                     _left_90:
  4475                           	callstack 26
  4476   002300                     
  4477                           ;../dc_motor.c: 136: void left_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 137: {;../dc_motor.c: 138:     mL->direction = 0;
  4478   002300  EE20 F001          	lfsr	2,1
  4479   002304  501A               	movf	left_90@mL^0,w,c
  4480   002306  26D9               	addwf	fsr2l,f,c
  4481   002308  501B               	movf	(left_90@mL+1)^0,w,c
  4482   00230A  22DA               	addwfc	fsr2h,f,c
  4483   00230C  0E00               	movlw	0
  4484   00230E  6EDF               	movwf	indf2,c
  4485                           
  4486                           ;../dc_motor.c: 139:     mR->direction = 1;
  4487   002310  EE20 F001          	lfsr	2,1
  4488   002314  501C               	movf	left_90@mR^0,w,c
  4489   002316  26D9               	addwf	fsr2l,f,c
  4490   002318  501D               	movf	(left_90@mR+1)^0,w,c
  4491   00231A  22DA               	addwfc	fsr2h,f,c
  4492   00231C  0E01               	movlw	1
  4493   00231E  6EDF               	movwf	indf2,c
  4494   002320                     
  4495                           ;../dc_motor.c: 140:     for (int i = 0;i<50;i = i + 2)
  4496   002320  0E00               	movlw	0
  4497   002322  6E21               	movwf	(left_90@i+1)^0,c
  4498   002324  0E00               	movlw	0
  4499   002326  6E20               	movwf	left_90@i^0,c
  4500   002328                     l2671:
  4501                           
  4502                           ;../dc_motor.c: 141:     {;../dc_motor.c: 142:         mL->power = 50 + i;
  4503   002328  5020               	movf	left_90@i^0,w,c
  4504   00232A  0F32               	addlw	50
  4505   00232C  C01A  FFD9         	movff	left_90@mL,fsr2l
  4506   002330  C01B  FFDA         	movff	left_90@mL+1,fsr2h
  4507   002334  6EDF               	movwf	indf2,c
  4508   002336                     
  4509                           ;../dc_motor.c: 143:         mR->power = i;
  4510   002336  C01C  FFD9         	movff	left_90@mR,fsr2l
  4511   00233A  C01D  FFDA         	movff	left_90@mR+1,fsr2h
  4512   00233E  C020  FFDF         	movff	left_90@i,indf2
  4513   002342                     
  4514                           ;../dc_motor.c: 144:         setMotorPWM(mL);
  4515   002342  C01A  F00F         	movff	left_90@mL,setMotorPWM@m
  4516   002346  C01B  F010         	movff	left_90@mL+1,setMotorPWM@m+1
  4517   00234A  ECF3  F00B         	call	_setMotorPWM	;wreg free
  4518   00234E                     
  4519                           ;../dc_motor.c: 145:         setMotorPWM(mR);
  4520   00234E  C01C  F00F         	movff	left_90@mR,setMotorPWM@m
  4521   002352  C01D  F010         	movff	left_90@mR+1,setMotorPWM@m+1
  4522   002356  ECF3  F00B         	call	_setMotorPWM	;wreg free
  4523   00235A                     
  4524                           ;../dc_motor.c: 146:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4525   00235A  0E35               	movlw	53
  4526   00235C                     u1887:
  4527   00235C  2EE8               	decfsz	wreg,f,c
  4528   00235E  D7FE               	bra	u1887
  4529   002360  F000               	nop	
  4530   002362                     
  4531                           ;../dc_motor.c: 147:     }
  4532   002362  0E02               	movlw	2
  4533   002364  2420               	addwf	left_90@i^0,w,c
  4534   002366  6E20               	movwf	left_90@i^0,c
  4535   002368  0E00               	movlw	0
  4536   00236A  2021               	addwfc	(left_90@i+1)^0,w,c
  4537   00236C  6E21               	movwf	(left_90@i+1)^0,c
  4538   00236E  BE21               	btfsc	(left_90@i+1)^0,7,c
  4539   002370  EFC3  F011         	goto	u1391
  4540   002374  5021               	movf	(left_90@i+1)^0,w,c
  4541   002376  E109               	bnz	u1390
  4542   002378  0E32               	movlw	50
  4543   00237A  5C20               	subwf	left_90@i^0,w,c
  4544   00237C  A0D8               	btfss	status,0,c
  4545   00237E  EFC3  F011         	goto	u1391
  4546   002382  EFC5  F011         	goto	u1390
  4547   002386                     u1391:
  4548   002386  EF94  F011         	goto	l2671
  4549   00238A                     u1390:
  4550   00238A                     
  4551                           ;../dc_motor.c: 148:     _delay((unsigned long)((165)*(64000000/4000.0)));
  4552   00238A  0E0E               	movlw	14
  4553   00238C  6E1F               	movwf	(??_left_90+1)^0,c
  4554   00238E  0E65               	movlw	101
  4555   002390  6E1E               	movwf	??_left_90^0,c
  4556   002392  0E87               	movlw	135
  4557   002394                     u1897:
  4558   002394  2EE8               	decfsz	wreg,f,c
  4559   002396  D7FE               	bra	u1897
  4560   002398  2E1E               	decfsz	??_left_90^0,f,c
  4561   00239A  D7FC               	bra	u1897
  4562   00239C  2E1F               	decfsz	(??_left_90+1)^0,f,c
  4563   00239E  D7FA               	bra	u1897
  4564   0023A0  F000               	nop	
  4565   0023A2  0012               	return		;funcret
  4566   0023A4                     __end_of_left_90:
  4567                           	callstack 0
  4568                           
  4569 ;; *************** function _left_135 *****************
  4570 ;; Defined at:
  4571 ;;		line 181 in file "../dc_motor.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4574 ;;		 -> main@motorL(9), 
  4575 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4576 ;;		 -> main@motorR(9), 
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;  i               2   31[COMRAM] int 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  1    wreg      void 
  4581 ;; Registers used:
  4582 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4588 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4589 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4590 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4591 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4592 ;;Total ram usage:        8 bytes
  4593 ;; Hardware stack levels used: 1
  4594 ;; Hardware stack levels required when called: 3
  4595 ;; This function calls:
  4596 ;;		_setMotorPWM
  4597 ;; This function is called by:
  4598 ;;		_motor_action
  4599 ;;		_motor_action_return
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           	psect	text22
  4604   00262C                     __ptext22:
  4605                           	callstack 0
  4606   00262C                     _left_135:
  4607                           	callstack 26
  4608   00262C                     
  4609                           ;../dc_motor.c: 181: void left_135(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 182: {;../dc_motor.c: 183:     mL->direction = 0;
  4610   00262C  EE20 F001          	lfsr	2,1
  4611   002630  501A               	movf	left_135@mL^0,w,c
  4612   002632  26D9               	addwf	fsr2l,f,c
  4613   002634  501B               	movf	(left_135@mL+1)^0,w,c
  4614   002636  22DA               	addwfc	fsr2h,f,c
  4615   002638  0E00               	movlw	0
  4616   00263A  6EDF               	movwf	indf2,c
  4617                           
  4618                           ;../dc_motor.c: 184:     mR->direction = 1;
  4619   00263C  EE20 F001          	lfsr	2,1
  4620   002640  501C               	movf	left_135@mR^0,w,c
  4621   002642  26D9               	addwf	fsr2l,f,c
  4622   002644  501D               	movf	(left_135@mR+1)^0,w,c
  4623   002646  22DA               	addwfc	fsr2h,f,c
  4624   002648  0E01               	movlw	1
  4625   00264A  6EDF               	movwf	indf2,c
  4626   00264C                     
  4627                           ;../dc_motor.c: 185:     for (int i = 0;i<50;i = i + 2)
  4628   00264C  0E00               	movlw	0
  4629   00264E  6E21               	movwf	(left_135@i+1)^0,c
  4630   002650  0E00               	movlw	0
  4631   002652  6E20               	movwf	left_135@i^0,c
  4632   002654                     l2719:
  4633                           
  4634                           ;../dc_motor.c: 186:     {;../dc_motor.c: 187:         mL->power = 50 + i;
  4635   002654  5020               	movf	left_135@i^0,w,c
  4636   002656  0F32               	addlw	50
  4637   002658  C01A  FFD9         	movff	left_135@mL,fsr2l
  4638   00265C  C01B  FFDA         	movff	left_135@mL+1,fsr2h
  4639   002660  6EDF               	movwf	indf2,c
  4640   002662                     
  4641                           ;../dc_motor.c: 188:         mR->power = i;
  4642   002662  C01C  FFD9         	movff	left_135@mR,fsr2l
  4643   002666  C01D  FFDA         	movff	left_135@mR+1,fsr2h
  4644   00266A  C020  FFDF         	movff	left_135@i,indf2
  4645   00266E                     
  4646                           ;../dc_motor.c: 189:         setMotorPWM(mL);
  4647   00266E  C01A  F00F         	movff	left_135@mL,setMotorPWM@m
  4648   002672  C01B  F010         	movff	left_135@mL+1,setMotorPWM@m+1
  4649   002676  ECF3  F00B         	call	_setMotorPWM	;wreg free
  4650   00267A                     
  4651                           ;../dc_motor.c: 190:         setMotorPWM(mR);
  4652   00267A  C01C  F00F         	movff	left_135@mR,setMotorPWM@m
  4653   00267E  C01D  F010         	movff	left_135@mR+1,setMotorPWM@m+1
  4654   002682  ECF3  F00B         	call	_setMotorPWM	;wreg free
  4655   002686                     
  4656                           ;../dc_motor.c: 191:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4657   002686  0E35               	movlw	53
  4658   002688                     u1907:
  4659   002688  2EE8               	decfsz	wreg,f,c
  4660   00268A  D7FE               	bra	u1907
  4661   00268C  F000               	nop	
  4662   00268E                     
  4663                           ;../dc_motor.c: 192:     }
  4664   00268E  0E02               	movlw	2
  4665   002690  2420               	addwf	left_135@i^0,w,c
  4666   002692  6E20               	movwf	left_135@i^0,c
  4667   002694  0E00               	movlw	0
  4668   002696  2021               	addwfc	(left_135@i+1)^0,w,c
  4669   002698  6E21               	movwf	(left_135@i+1)^0,c
  4670   00269A  BE21               	btfsc	(left_135@i+1)^0,7,c
  4671   00269C  EF59  F013         	goto	u1411
  4672   0026A0  5021               	movf	(left_135@i+1)^0,w,c
  4673   0026A2  E109               	bnz	u1410
  4674   0026A4  0E32               	movlw	50
  4675   0026A6  5C20               	subwf	left_135@i^0,w,c
  4676   0026A8  A0D8               	btfss	status,0,c
  4677   0026AA  EF59  F013         	goto	u1411
  4678   0026AE  EF5B  F013         	goto	u1410
  4679   0026B2                     u1411:
  4680   0026B2  EF2A  F013         	goto	l2719
  4681   0026B6                     u1410:
  4682   0026B6                     
  4683                           ;../dc_motor.c: 193:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4684   0026B6  0E13               	movlw	19
  4685   0026B8  6E1F               	movwf	(??_left_135+1)^0,c
  4686   0026BA  0EAC               	movlw	172
  4687   0026BC  6E1E               	movwf	??_left_135^0,c
  4688   0026BE  0E2A               	movlw	42
  4689   0026C0                     u1917:
  4690   0026C0  2EE8               	decfsz	wreg,f,c
  4691   0026C2  D7FE               	bra	u1917
  4692   0026C4  2E1E               	decfsz	??_left_135^0,f,c
  4693   0026C6  D7FC               	bra	u1917
  4694   0026C8  2E1F               	decfsz	(??_left_135+1)^0,f,c
  4695   0026CA  D7FA               	bra	u1917
  4696   0026CC  0012               	return		;funcret
  4697   0026CE                     __end_of_left_135:
  4698                           	callstack 0
  4699                           
  4700 ;; *************** function _initUSART4 *****************
  4701 ;; Defined at:
  4702 ;;		line 5 in file "../serial.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;		None
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;		None
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      void 
  4709 ;; Registers used:
  4710 ;;		wreg, status,2
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4720 ;;Total ram usage:        0 bytes
  4721 ;; Hardware stack levels used: 1
  4722 ;; Hardware stack levels required when called: 1
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		_main
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text23
  4731   002CB8                     __ptext23:
  4732                           	callstack 0
  4733   002CB8                     _initUSART4:
  4734                           	callstack 29
  4735   002CB8                     
  4736                           ;../serial.c: 9:     RC0PPS = 0x12;
  4737   002CB8  0E12               	movlw	18
  4738   002CBA  010E               	movlb	14	; () banked
  4739   002CBC  6F62               	movwf	98,b	;volatile
  4740                           
  4741                           ;../serial.c: 10:     RX4PPS = 0x11;
  4742   002CBE  0E11               	movlw	17
  4743   002CC0  6F15               	movwf	21,b	;volatile
  4744   002CC2                     
  4745                           ; BSR set to: 14
  4746                           ;../serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  4747   002CC2  97E9               	bcf	233,3,b	;volatile
  4748   002CC4                     
  4749                           ; BSR set to: 14
  4750                           ;../serial.c: 13:     TX4STAbits.BRGH = 0;
  4751   002CC4  95E8               	bcf	232,2,b	;volatile
  4752                           
  4753                           ;../serial.c: 14:     SP4BRGL = 103;
  4754   002CC6  0E67               	movlw	103
  4755   002CC8  6FE5               	movwf	229,b	;volatile
  4756                           
  4757                           ;../serial.c: 15:     SP4BRGH = 0;
  4758   002CCA  0E00               	movlw	0
  4759   002CCC  6FE6               	movwf	230,b	;volatile
  4760   002CCE                     
  4761                           ; BSR set to: 14
  4762                           ;../serial.c: 17:     RC4STAbits.CREN = 1;
  4763   002CCE  89E7               	bsf	231,4,b	;volatile
  4764   002CD0                     
  4765                           ; BSR set to: 14
  4766                           ;../serial.c: 18:     TX4STAbits.TXEN = 1;
  4767   002CD0  8BE8               	bsf	232,5,b	;volatile
  4768   002CD2                     
  4769                           ; BSR set to: 14
  4770                           ;../serial.c: 19:     RC4STAbits.SPEN = 1;
  4771   002CD2  8FE7               	bsf	231,7,b	;volatile
  4772   002CD4                     
  4773                           ; BSR set to: 14
  4774   002CD4  0012               	return		;funcret
  4775   002CD6                     __end_of_initUSART4:
  4776                           	callstack 0
  4777                           
  4778 ;; *************** function _initDCmotorsPWM *****************
  4779 ;; Defined at:
  4780 ;;		line 5 in file "../dc_motor.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;  PWMperiod       2    0[COMRAM] int 
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;		None
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      void 
  4787 ;; Registers used:
  4788 ;;		wreg, status,2
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4797 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4798 ;;Total ram usage:        2 bytes
  4799 ;; Hardware stack levels used: 1
  4800 ;; Hardware stack levels required when called: 1
  4801 ;; This function calls:
  4802 ;;		Nothing
  4803 ;; This function is called by:
  4804 ;;		_main
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           	psect	text24
  4809   002AE2                     __ptext24:
  4810                           	callstack 0
  4811   002AE2                     _initDCmotorsPWM:
  4812                           	callstack 29
  4813   002AE2                     
  4814                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  4815   002AE2  9485               	bcf	133,2,c	;volatile
  4816                           
  4817                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  4818   002AE4  9885               	bcf	133,4,c	;volatile
  4819                           
  4820                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  4821   002AE6  9E83               	bcf	131,7,c	;volatile
  4822                           
  4823                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  4824   002AE8  9C87               	bcf	135,6,c	;volatile
  4825                           
  4826                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  4827   002AEA  947D               	bcf	125,2,c	;volatile
  4828                           
  4829                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  4830   002AEC  987D               	bcf	125,4,c	;volatile
  4831                           
  4832                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  4833   002AEE  9E7B               	bcf	123,7,c	;volatile
  4834                           
  4835                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  4836   002AF0  9C7F               	bcf	127,6,c	;volatile
  4837   002AF2                     
  4838                           ;../dc_motor.c: 17:     T2CONbits.CKPS=0b0011;
  4839   002AF2  50BD               	movf	189,w,c	;volatile
  4840   002AF4  0B8F               	andlw	-113
  4841   002AF6  0930               	iorlw	48
  4842   002AF8  6EBD               	movwf	189,c	;volatile
  4843                           
  4844                           ;../dc_motor.c: 18:     T2HLTbits.MODE=0b00000;
  4845   002AFA  0EE0               	movlw	-32
  4846   002AFC  16BE               	andwf	190,f,c	;volatile
  4847                           
  4848                           ;../dc_motor.c: 19:     T2CLKCONbits.CS=0b0001;
  4849   002AFE  50BF               	movf	191,w,c	;volatile
  4850   002B00  0BF0               	andlw	-16
  4851   002B02  0901               	iorlw	1
  4852   002B04  6EBF               	movwf	191,c	;volatile
  4853   002B06                     
  4854                           ;../dc_motor.c: 23:     T2PR=PWMperiod;
  4855   002B06  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4856   002B0A                     
  4857                           ;../dc_motor.c: 24:     T2CONbits.ON=1;
  4858   002B0A  8EBD               	bsf	189,7,c	;volatile
  4859                           
  4860                           ;../dc_motor.c: 26:     RE2PPS=0x0A;
  4861   002B0C  0E0A               	movlw	10
  4862   002B0E  010E               	movlb	14	; () banked
  4863   002B10  6F74               	movwf	116,b	;volatile
  4864                           
  4865                           ;../dc_motor.c: 27:     RC7PPS=0x0B;
  4866   002B12  0E0B               	movlw	11
  4867   002B14  6F69               	movwf	105,b	;volatile
  4868                           
  4869                           ;../dc_motor.c: 29:     PWM6DCH=0;
  4870   002B16  0E00               	movlw	0
  4871   002B18  6EA3               	movwf	163,c	;volatile
  4872                           
  4873                           ;../dc_motor.c: 30:     PWM7DCH=0;
  4874   002B1A  0E00               	movlw	0
  4875   002B1C  6EA0               	movwf	160,c	;volatile
  4876   002B1E                     
  4877                           ; BSR set to: 14
  4878                           ;../dc_motor.c: 32:     PWM6CONbits.EN = 1;
  4879   002B1E  8EA4               	bsf	164,7,c	;volatile
  4880   002B20                     
  4881                           ; BSR set to: 14
  4882                           ;../dc_motor.c: 33:     PWM7CONbits.EN = 1;
  4883   002B20  8EA1               	bsf	161,7,c	;volatile
  4884   002B22                     
  4885                           ; BSR set to: 14
  4886   002B22  0012               	return		;funcret
  4887   002B24                     __end_of_initDCmotorsPWM:
  4888                           	callstack 0
  4889                           
  4890 ;; *************** function _forward *****************
  4891 ;; Defined at:
  4892 ;;		line 77 in file "../dc_motor.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4895 ;;		 -> main@motorL(9), 
  4896 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4897 ;;		 -> main@motorR(9), 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;  i               2   29[COMRAM] int 
  4900 ;; Return value:  Size  Location     Type
  4901 ;;                  1    wreg      void 
  4902 ;; Registers used:
  4903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4909 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4910 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4912 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4913 ;;Total ram usage:        6 bytes
  4914 ;; Hardware stack levels used: 1
  4915 ;; Hardware stack levels required when called: 3
  4916 ;; This function calls:
  4917 ;;		_setMotorPWM
  4918 ;; This function is called by:
  4919 ;;		_main
  4920 ;;		_motor_action_return
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           	psect	text25
  4925   00275C                     __ptext25:
  4926                           	callstack 0
  4927   00275C                     _forward:
  4928                           	callstack 27
  4929   00275C                     
  4930                           ;../dc_motor.c: 77: void forward(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c
      +                          : 78: {;../dc_motor.c: 79:     mL->direction = 1;
  4931   00275C  EE20 F001          	lfsr	2,1
  4932   002760  501A               	movf	forward@mL^0,w,c
  4933   002762  26D9               	addwf	fsr2l,f,c
  4934   002764  501B               	movf	(forward@mL+1)^0,w,c
  4935   002766  22DA               	addwfc	fsr2h,f,c
  4936   002768  0E01               	movlw	1
  4937   00276A  6EDF               	movwf	indf2,c
  4938                           
  4939                           ;../dc_motor.c: 80:     mR->direction = 1;
  4940   00276C  EE20 F001          	lfsr	2,1
  4941   002770  501C               	movf	forward@mR^0,w,c
  4942   002772  26D9               	addwf	fsr2l,f,c
  4943   002774  501D               	movf	(forward@mR+1)^0,w,c
  4944   002776  22DA               	addwfc	fsr2h,f,c
  4945   002778  0E01               	movlw	1
  4946   00277A  6EDF               	movwf	indf2,c
  4947   00277C                     
  4948                           ;../dc_motor.c: 81:     for (int i=0;i<31;i=i+2)
  4949   00277C  0E00               	movlw	0
  4950   00277E  6E1F               	movwf	(forward@i+1)^0,c
  4951   002780  0E00               	movlw	0
  4952   002782  6E1E               	movwf	forward@i^0,c
  4953   002784                     l2933:
  4954                           
  4955                           ;../dc_motor.c: 82:     {;../dc_motor.c: 83:         mL->power = i;
  4956   002784  C01A  FFD9         	movff	forward@mL,fsr2l
  4957   002788  C01B  FFDA         	movff	forward@mL+1,fsr2h
  4958   00278C  C01E  FFDF         	movff	forward@i,indf2
  4959                           
  4960                           ;../dc_motor.c: 84:         mR->power = i;
  4961   002790  C01C  FFD9         	movff	forward@mR,fsr2l
  4962   002794  C01D  FFDA         	movff	forward@mR+1,fsr2h
  4963   002798  C01E  FFDF         	movff	forward@i,indf2
  4964   00279C                     
  4965                           ;../dc_motor.c: 85:         setMotorPWM(mL);
  4966   00279C  C01A  F00F         	movff	forward@mL,setMotorPWM@m
  4967   0027A0  C01B  F010         	movff	forward@mL+1,setMotorPWM@m+1
  4968   0027A4  ECF3  F00B         	call	_setMotorPWM	;wreg free
  4969   0027A8                     
  4970                           ;../dc_motor.c: 86:         setMotorPWM(mR);
  4971   0027A8  C01C  F00F         	movff	forward@mR,setMotorPWM@m
  4972   0027AC  C01D  F010         	movff	forward@mR+1,setMotorPWM@m+1
  4973   0027B0  ECF3  F00B         	call	_setMotorPWM	;wreg free
  4974   0027B4                     
  4975                           ;../dc_motor.c: 87:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4976   0027B4  0E6A               	movlw	106
  4977   0027B6                     u1927:
  4978   0027B6  2EE8               	decfsz	wreg,f,c
  4979   0027B8  D7FE               	bra	u1927
  4980   0027BA  D000               	nop2	
  4981   0027BC                     
  4982                           ;../dc_motor.c: 88:     }
  4983   0027BC  0E02               	movlw	2
  4984   0027BE  241E               	addwf	forward@i^0,w,c
  4985   0027C0  6E1E               	movwf	forward@i^0,c
  4986   0027C2  0E00               	movlw	0
  4987   0027C4  201F               	addwfc	(forward@i+1)^0,w,c
  4988   0027C6  6E1F               	movwf	(forward@i+1)^0,c
  4989   0027C8  BE1F               	btfsc	(forward@i+1)^0,7,c
  4990   0027CA  EFF0  F013         	goto	u1551
  4991   0027CE  501F               	movf	(forward@i+1)^0,w,c
  4992   0027D0  E109               	bnz	u1550
  4993   0027D2  0E1F               	movlw	31
  4994   0027D4  5C1E               	subwf	forward@i^0,w,c
  4995   0027D6  A0D8               	btfss	status,0,c
  4996   0027D8  EFF0  F013         	goto	u1551
  4997   0027DC  EFF2  F013         	goto	u1550
  4998   0027E0                     u1551:
  4999   0027E0  EFC2  F013         	goto	l2933
  5000   0027E4                     u1550:
  5001   0027E4  0012               	return		;funcret
  5002   0027E6                     __end_of_forward:
  5003                           	callstack 0
  5004                           
  5005 ;; *************** function _setMotorPWM *****************
  5006 ;; Defined at:
  5007 ;;		line 38 in file "../dc_motor.c"
  5008 ;; Parameters:    Size  Location     Type
  5009 ;;  m               2   14[COMRAM] PTR struct DC_motor
  5010 ;;		 -> main@motorR(9), main@motorL(9), 
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;  PWMduty         2   23[COMRAM] int 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  1    wreg      void 
  5015 ;; Registers used:
  5016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5022 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5023 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5024 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5025 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5026 ;;Total ram usage:       11 bytes
  5027 ;; Hardware stack levels used: 1
  5028 ;; Hardware stack levels required when called: 2
  5029 ;; This function calls:
  5030 ;;		___awdiv
  5031 ;;		___wmul
  5032 ;; This function is called by:
  5033 ;;		_main
  5034 ;;		_stop
  5035 ;;		_forward
  5036 ;;		_reverse_fromcard
  5037 ;;		_reverse_onesquare
  5038 ;;		_right_90
  5039 ;;		_left_90
  5040 ;;		_spin_180
  5041 ;;		_right_135
  5042 ;;		_left_135
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           	psect	text26
  5047   0017E6                     __ptext26:
  5048                           	callstack 0
  5049   0017E6                     _setMotorPWM:
  5050                           	callstack 27
  5051   0017E6                     
  5052                           ;../dc_motor.c: 38: void setMotorPWM(struct DC_motor *m);../dc_motor.c: 39: {;../dc_moto
      +                          r.c: 40:  int PWMduty;;../dc_motor.c: 42:  if (m->direction){
  5053   0017E6  EE20 F001          	lfsr	2,1
  5054   0017EA  500F               	movf	setMotorPWM@m^0,w,c
  5055   0017EC  26D9               	addwf	fsr2l,f,c
  5056   0017EE  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5057   0017F0  22DA               	addwfc	fsr2h,f,c
  5058   0017F2  50DF               	movf	indf2,w,c
  5059   0017F4  B4D8               	btfsc	status,2,c
  5060   0017F6  EFFF  F00B         	goto	u1271
  5061   0017FA  EF01  F00C         	goto	u1270
  5062   0017FE                     u1271:
  5063   0017FE  EF32  F00C         	goto	l2473
  5064   001802                     u1270:
  5065   001802                     
  5066                           ;../dc_motor.c: 44:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  5067   001802  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  5068   001806  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5069   00180A  50DF               	movf	indf2,w,c
  5070   00180C  6E11               	movwf	??_setMotorPWM^0,c
  5071   00180E  5011               	movf	??_setMotorPWM^0,w,c
  5072   001810  6E01               	movwf	___wmul@multiplier^0,c
  5073   001812  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5074   001814  EE20 F007          	lfsr	2,7
  5075   001818  500F               	movf	setMotorPWM@m^0,w,c
  5076   00181A  26D9               	addwf	fsr2l,f,c
  5077   00181C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5078   00181E  22DA               	addwfc	fsr2h,f,c
  5079   001820  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5080   001824  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5081   001828  EC29  F016         	call	___wmul	;wreg free
  5082   00182C  C001  F007         	movff	?___wmul,___awdiv@dividend
  5083   001830  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  5084   001834  0E00               	movlw	0
  5085   001836  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  5086   001838  0E64               	movlw	100
  5087   00183A  6E09               	movwf	___awdiv@divisor^0,c
  5088   00183C  EC1A  F010         	call	___awdiv	;wreg free
  5089   001840  EE20 F007          	lfsr	2,7
  5090   001844  500F               	movf	setMotorPWM@m^0,w,c
  5091   001846  26D9               	addwf	fsr2l,f,c
  5092   001848  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5093   00184A  22DA               	addwfc	fsr2h,f,c
  5094   00184C  CFDE F012          	movff	postinc2,??_setMotorPWM+1
  5095   001850  CFDD F013          	movff	postdec2,??_setMotorPWM+2
  5096   001854  5007               	movf	?___awdiv^0,w,c
  5097   001856  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  5098   001858  6E18               	movwf	setMotorPWM@PWMduty^0,c
  5099   00185A  5008               	movf	(?___awdiv+1)^0,w,c
  5100   00185C  5813               	subwfb	(??_setMotorPWM+2)^0,w,c
  5101   00185E  6E19               	movwf	(setMotorPWM@PWMduty+1)^0,c
  5102                           
  5103                           ;../dc_motor.c: 45:  }
  5104   001860  EF55  F00C         	goto	l2475
  5105   001864                     l2473:
  5106                           
  5107                           ;../dc_motor.c: 48:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  5108   001864  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  5109   001868  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5110   00186C  50DF               	movf	indf2,w,c
  5111   00186E  6E11               	movwf	??_setMotorPWM^0,c
  5112   001870  5011               	movf	??_setMotorPWM^0,w,c
  5113   001872  6E01               	movwf	___wmul@multiplier^0,c
  5114   001874  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5115   001876  EE20 F007          	lfsr	2,7
  5116   00187A  500F               	movf	setMotorPWM@m^0,w,c
  5117   00187C  26D9               	addwf	fsr2l,f,c
  5118   00187E  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5119   001880  22DA               	addwfc	fsr2h,f,c
  5120   001882  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5121   001886  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5122   00188A  EC29  F016         	call	___wmul	;wreg free
  5123   00188E  C001  F007         	movff	?___wmul,___awdiv@dividend
  5124   001892  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  5125   001896  0E00               	movlw	0
  5126   001898  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  5127   00189A  0E64               	movlw	100
  5128   00189C  6E09               	movwf	___awdiv@divisor^0,c
  5129   00189E  EC1A  F010         	call	___awdiv	;wreg free
  5130   0018A2  C007  F018         	movff	?___awdiv,setMotorPWM@PWMduty
  5131   0018A6  C008  F019         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  5132   0018AA                     l2475:
  5133                           
  5134                           ;../dc_motor.c: 51:  *(m->dutyHighByte) = PWMduty;
  5135   0018AA  EE20 F002          	lfsr	2,2
  5136   0018AE  500F               	movf	setMotorPWM@m^0,w,c
  5137   0018B0  26D9               	addwf	fsr2l,f,c
  5138   0018B2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5139   0018B4  22DA               	addwfc	fsr2h,f,c
  5140   0018B6  CFDE F011          	movff	postinc2,??_setMotorPWM
  5141   0018BA  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5142   0018BE  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5143   0018C2  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5144   0018C6  C018  FFDF         	movff	setMotorPWM@PWMduty,indf2
  5145   0018CA                     
  5146                           ;../dc_motor.c: 53:  if (m->direction){
  5147   0018CA  EE20 F001          	lfsr	2,1
  5148   0018CE  500F               	movf	setMotorPWM@m^0,w,c
  5149   0018D0  26D9               	addwf	fsr2l,f,c
  5150   0018D2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5151   0018D4  22DA               	addwfc	fsr2h,f,c
  5152   0018D6  50DF               	movf	indf2,w,c
  5153   0018D8  B4D8               	btfsc	status,2,c
  5154   0018DA  EF71  F00C         	goto	u1281
  5155   0018DE  EF73  F00C         	goto	u1280
  5156   0018E2                     u1281:
  5157   0018E2  EFA8  F00C         	goto	l2481
  5158   0018E6                     u1280:
  5159   0018E6                     
  5160                           ;../dc_motor.c: 54:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  5161   0018E6  EE20 F004          	lfsr	2,4
  5162   0018EA  500F               	movf	setMotorPWM@m^0,w,c
  5163   0018EC  26D9               	addwf	fsr2l,f,c
  5164   0018EE  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5165   0018F0  22DA               	addwfc	fsr2h,f,c
  5166   0018F2  CFDE F011          	movff	postinc2,??_setMotorPWM
  5167   0018F6  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5168   0018FA  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5169   0018FE  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5170   001902  EE10 F004          	lfsr	1,4
  5171   001906  500F               	movf	setMotorPWM@m^0,w,c
  5172   001908  26E1               	addwf	fsr1l,f,c
  5173   00190A  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5174   00190C  22E2               	addwfc	fsr1h,f,c
  5175   00190E  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  5176   001912  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  5177   001916  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  5178   00191A  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  5179   00191E  50E7               	movf	indf1,w,c
  5180   001920  6E15               	movwf	(??_setMotorPWM+4)^0,c
  5181   001922  EE10 F006          	lfsr	1,6
  5182   001926  500F               	movf	setMotorPWM@m^0,w,c
  5183   001928  26E1               	addwf	fsr1l,f,c
  5184   00192A  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5185   00192C  22E2               	addwfc	fsr1h,f,c
  5186   00192E  50E7               	movf	indf1,w,c
  5187   001930  6E16               	movwf	(??_setMotorPWM+5)^0,c
  5188   001932  0E01               	movlw	1
  5189   001934  6E17               	movwf	(??_setMotorPWM+6)^0,c
  5190   001936  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  5191   001938  EFA0  F00C         	goto	u1294
  5192   00193C                     u1295:
  5193   00193C  90D8               	bcf	status,0,c
  5194   00193E  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  5195   001940                     u1294:
  5196   001940  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  5197   001942  EF9E  F00C         	goto	u1295
  5198   001946  5017               	movf	(??_setMotorPWM+6)^0,w,c
  5199   001948  1015               	iorwf	(??_setMotorPWM+4)^0,w,c
  5200   00194A  6EDF               	movwf	indf2,c
  5201                           
  5202                           ;../dc_motor.c: 55:  } else {
  5203   00194C  EFDC  F00C         	goto	l264
  5204   001950                     l2481:
  5205                           
  5206                           ;../dc_motor.c: 56:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  5207   001950  EE20 F004          	lfsr	2,4
  5208   001954  500F               	movf	setMotorPWM@m^0,w,c
  5209   001956  26D9               	addwf	fsr2l,f,c
  5210   001958  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5211   00195A  22DA               	addwfc	fsr2h,f,c
  5212   00195C  CFDE F011          	movff	postinc2,??_setMotorPWM
  5213   001960  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5214   001964  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5215   001968  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5216   00196C  EE10 F004          	lfsr	1,4
  5217   001970  500F               	movf	setMotorPWM@m^0,w,c
  5218   001972  26E1               	addwf	fsr1l,f,c
  5219   001974  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5220   001976  22E2               	addwfc	fsr1h,f,c
  5221   001978  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  5222   00197C  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  5223   001980  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  5224   001984  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  5225   001988  50E7               	movf	indf1,w,c
  5226   00198A  6E15               	movwf	(??_setMotorPWM+4)^0,c
  5227   00198C  EE10 F006          	lfsr	1,6
  5228   001990  500F               	movf	setMotorPWM@m^0,w,c
  5229   001992  26E1               	addwf	fsr1l,f,c
  5230   001994  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5231   001996  22E2               	addwfc	fsr1h,f,c
  5232   001998  50E7               	movf	indf1,w,c
  5233   00199A  6E16               	movwf	(??_setMotorPWM+5)^0,c
  5234   00199C  0E01               	movlw	1
  5235   00199E  6E17               	movwf	(??_setMotorPWM+6)^0,c
  5236   0019A0  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  5237   0019A2  EFD5  F00C         	goto	u1304
  5238   0019A6                     u1305:
  5239   0019A6  90D8               	bcf	status,0,c
  5240   0019A8  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  5241   0019AA                     u1304:
  5242   0019AA  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  5243   0019AC  EFD3  F00C         	goto	u1305
  5244   0019B0  5017               	movf	(??_setMotorPWM+6)^0,w,c
  5245   0019B2  0AFF               	xorlw	255
  5246   0019B4  1415               	andwf	(??_setMotorPWM+4)^0,w,c
  5247   0019B6  6EDF               	movwf	indf2,c
  5248   0019B8                     l264:
  5249   0019B8  0012               	return		;funcret
  5250   0019BA                     __end_of_setMotorPWM:
  5251                           	callstack 0
  5252                           
  5253 ;; *************** function ___wmul *****************
  5254 ;; Defined at:
  5255 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  multiplier      2    0[COMRAM] unsigned int 
  5258 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;  product         2    4[COMRAM] unsigned int 
  5261 ;; Return value:  Size  Location     Type
  5262 ;;                  2    0[COMRAM] unsigned int 
  5263 ;; Registers used:
  5264 ;;		wreg, status,2, status,0, prodl, prodh
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5270 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5273 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5274 ;;Total ram usage:        6 bytes
  5275 ;; Hardware stack levels used: 1
  5276 ;; Hardware stack levels required when called: 1
  5277 ;; This function calls:
  5278 ;;		Nothing
  5279 ;; This function is called by:
  5280 ;;		_setMotorPWM
  5281 ;; This function uses a non-reentrant model
  5282 ;;
  5283                           
  5284                           	psect	text27
  5285   002C52                     __ptext27:
  5286                           	callstack 0
  5287   002C52                     ___wmul:
  5288                           	callstack 27
  5289   002C52  5001               	movf	___wmul@multiplier^0,w,c
  5290   002C54  0203               	mulwf	___wmul@multiplicand^0,c
  5291   002C56  CFF3 F005          	movff	prodl,___wmul@product
  5292   002C5A  CFF4 F006          	movff	prodh,___wmul@product+1
  5293   002C5E  5001               	movf	___wmul@multiplier^0,w,c
  5294   002C60  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5295   002C62  50F3               	movf	243,w,c
  5296   002C64  2606               	addwf	(___wmul@product+1)^0,f,c
  5297   002C66  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5298   002C68  0203               	mulwf	___wmul@multiplicand^0,c
  5299   002C6A  50F3               	movf	243,w,c
  5300   002C6C  2606               	addwf	(___wmul@product+1)^0,f,c
  5301   002C6E  C005  F001         	movff	___wmul@product,?___wmul
  5302   002C72  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5303   002C76  0012               	return		;funcret
  5304   002C78                     __end_of___wmul:
  5305                           	callstack 0
  5306                           
  5307 ;; *************** function ___awdiv *****************
  5308 ;; Defined at:
  5309 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;  dividend        2    6[COMRAM] int 
  5312 ;;  divisor         2    8[COMRAM] int 
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;  quotient        2   12[COMRAM] int 
  5315 ;;  sign            1   11[COMRAM] unsigned char 
  5316 ;;  counter         1   10[COMRAM] unsigned char 
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  2    6[COMRAM] int 
  5319 ;; Registers used:
  5320 ;;		wreg, status,2, status,0
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5326 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5327 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5329 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5330 ;;Total ram usage:        8 bytes
  5331 ;; Hardware stack levels used: 1
  5332 ;; Hardware stack levels required when called: 1
  5333 ;; This function calls:
  5334 ;;		Nothing
  5335 ;; This function is called by:
  5336 ;;		_setMotorPWM
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           	psect	text28
  5341   002034                     __ptext28:
  5342                           	callstack 0
  5343   002034                     ___awdiv:
  5344                           	callstack 27
  5345   002034  0E00               	movlw	0
  5346   002036  6E0C               	movwf	___awdiv@sign^0,c
  5347   002038  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
  5348   00203A  EF23  F010         	goto	u1090
  5349   00203E  EF21  F010         	goto	u1091
  5350   002042                     u1091:
  5351   002042  EF29  F010         	goto	l2351
  5352   002046                     u1090:
  5353   002046  6C09               	negf	___awdiv@divisor^0,c
  5354   002048  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  5355   00204A  B0D8               	btfsc	status,0,c
  5356   00204C  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  5357   00204E  0E01               	movlw	1
  5358   002050  6E0C               	movwf	___awdiv@sign^0,c
  5359   002052                     l2351:
  5360   002052  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
  5361   002054  EF30  F010         	goto	u1100
  5362   002058  EF2E  F010         	goto	u1101
  5363   00205C                     u1101:
  5364   00205C  EF36  F010         	goto	l2357
  5365   002060                     u1100:
  5366   002060  6C07               	negf	___awdiv@dividend^0,c
  5367   002062  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  5368   002064  B0D8               	btfsc	status,0,c
  5369   002066  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  5370   002068  0E01               	movlw	1
  5371   00206A  1A0C               	xorwf	___awdiv@sign^0,f,c
  5372   00206C                     l2357:
  5373   00206C  0E00               	movlw	0
  5374   00206E  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  5375   002070  0E00               	movlw	0
  5376   002072  6E0D               	movwf	___awdiv@quotient^0,c
  5377   002074  5009               	movf	___awdiv@divisor^0,w,c
  5378   002076  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  5379   002078  B4D8               	btfsc	status,2,c
  5380   00207A  EF41  F010         	goto	u1111
  5381   00207E  EF43  F010         	goto	u1110
  5382   002082                     u1111:
  5383   002082  EF6B  F010         	goto	l2379
  5384   002086                     u1110:
  5385   002086  0E01               	movlw	1
  5386   002088  6E0B               	movwf	___awdiv@counter^0,c
  5387   00208A  EF4B  F010         	goto	l2365
  5388   00208E                     l2363:
  5389   00208E  90D8               	bcf	status,0,c
  5390   002090  3609               	rlcf	___awdiv@divisor^0,f,c
  5391   002092  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  5392   002094  2A0B               	incf	___awdiv@counter^0,f,c
  5393   002096                     l2365:
  5394   002096  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  5395   002098  EF50  F010         	goto	u1121
  5396   00209C  EF52  F010         	goto	u1120
  5397   0020A0                     u1121:
  5398   0020A0  EF47  F010         	goto	l2363
  5399   0020A4                     u1120:
  5400   0020A4                     l2367:
  5401   0020A4  90D8               	bcf	status,0,c
  5402   0020A6  360D               	rlcf	___awdiv@quotient^0,f,c
  5403   0020A8  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  5404   0020AA  5009               	movf	___awdiv@divisor^0,w,c
  5405   0020AC  5C07               	subwf	___awdiv@dividend^0,w,c
  5406   0020AE  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5407   0020B0  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  5408   0020B2  A0D8               	btfss	status,0,c
  5409   0020B4  EF5E  F010         	goto	u1131
  5410   0020B8  EF60  F010         	goto	u1130
  5411   0020BC                     u1131:
  5412   0020BC  EF65  F010         	goto	l2375
  5413   0020C0                     u1130:
  5414   0020C0  5009               	movf	___awdiv@divisor^0,w,c
  5415   0020C2  5E07               	subwf	___awdiv@dividend^0,f,c
  5416   0020C4  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5417   0020C6  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  5418   0020C8  800D               	bsf	___awdiv@quotient^0,0,c
  5419   0020CA                     l2375:
  5420   0020CA  90D8               	bcf	status,0,c
  5421   0020CC  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  5422   0020CE  3209               	rrcf	___awdiv@divisor^0,f,c
  5423   0020D0  2E0B               	decfsz	___awdiv@counter^0,f,c
  5424   0020D2  EF52  F010         	goto	l2367
  5425   0020D6                     l2379:
  5426   0020D6  500C               	movf	___awdiv@sign^0,w,c
  5427   0020D8  B4D8               	btfsc	status,2,c
  5428   0020DA  EF71  F010         	goto	u1141
  5429   0020DE  EF73  F010         	goto	u1140
  5430   0020E2                     u1141:
  5431   0020E2  EF77  F010         	goto	l2383
  5432   0020E6                     u1140:
  5433   0020E6  6C0D               	negf	___awdiv@quotient^0,c
  5434   0020E8  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  5435   0020EA  B0D8               	btfsc	status,0,c
  5436   0020EC  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  5437   0020EE                     l2383:
  5438   0020EE  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  5439   0020F2  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  5440   0020F6  0012               	return		;funcret
  5441   0020F8                     __end_of___awdiv:
  5442                           	callstack 0
  5443                           
  5444 ;; *************** function _color_read *****************
  5445 ;; Defined at:
  5446 ;;		line 111 in file "../color.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;  rgb             2   11[COMRAM] PTR struct RGB_val
  5449 ;;		 -> main@RGB_recorded(8), main@RGB_calibrated(8), 
  5450 ;; Auto vars:     Size  Location     Type
  5451 ;;		None
  5452 ;; Return value:  Size  Location     Type
  5453 ;;                  1    wreg      void 
  5454 ;; Registers used:
  5455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5456 ;; Tracked objects:
  5457 ;;		On entry : 0/0
  5458 ;;		On exit  : 0/0
  5459 ;;		Unchanged: 0/0
  5460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5461 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5463 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5464 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5465 ;;Total ram usage:        4 bytes
  5466 ;; Hardware stack levels used: 1
  5467 ;; Hardware stack levels required when called: 4
  5468 ;; This function calls:
  5469 ;;		_color_read_Blue
  5470 ;;		_color_read_Green
  5471 ;;		_color_read_Luminosity
  5472 ;;		_color_read_Red
  5473 ;; This function is called by:
  5474 ;;		_main
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           	psect	text29
  5479   0021B6                     __ptext29:
  5480                           	callstack 0
  5481   0021B6                     _color_read:
  5482                           	callstack 26
  5483   0021B6                     
  5484                           ;../color.c: 111: void color_read(struct RGB_val *rgb);../color.c: 112: {;../color.c: 11
      +                          3:     rgb->L = color_read_Luminosity();
  5485   0021B6  ECD7  F014         	call	_color_read_Luminosity	;wreg free
  5486   0021BA  C00C  FFD9         	movff	color_read@rgb,fsr2l
  5487   0021BE  C00D  FFDA         	movff	color_read@rgb+1,fsr2h
  5488   0021C2  C005  FFDE         	movff	?_color_read_Luminosity,postinc2
  5489   0021C6  C006  FFDD         	movff	?_color_read_Luminosity+1,postdec2
  5490   0021CA                     
  5491                           ;../color.c: 114:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5492   0021CA  0E09               	movlw	9
  5493   0021CC  6E0F               	movwf	(??_color_read+1)^0,c
  5494   0021CE  0E1E               	movlw	30
  5495   0021D0  6E0E               	movwf	??_color_read^0,c
  5496   0021D2  0EE4               	movlw	228
  5497   0021D4                     u1937:
  5498   0021D4  2EE8               	decfsz	wreg,f,c
  5499   0021D6  D7FE               	bra	u1937
  5500   0021D8  2E0E               	decfsz	??_color_read^0,f,c
  5501   0021DA  D7FC               	bra	u1937
  5502   0021DC  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5503   0021DE  D7FA               	bra	u1937
  5504   0021E0  D000               	nop2	
  5505   0021E2                     
  5506                           ;../color.c: 115:     rgb->R = color_read_Red();
  5507   0021E2  ECAF  F014         	call	_color_read_Red	;wreg free
  5508   0021E6  EE20 F002          	lfsr	2,2
  5509   0021EA  500C               	movf	color_read@rgb^0,w,c
  5510   0021EC  26D9               	addwf	fsr2l,f,c
  5511   0021EE  500D               	movf	(color_read@rgb+1)^0,w,c
  5512   0021F0  22DA               	addwfc	fsr2h,f,c
  5513   0021F2  C005  FFDE         	movff	?_color_read_Red,postinc2
  5514   0021F6  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  5515                           
  5516                           ;../color.c: 116:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5517   0021FA  0E09               	movlw	9
  5518   0021FC  6E0F               	movwf	(??_color_read+1)^0,c
  5519   0021FE  0E1E               	movlw	30
  5520   002200  6E0E               	movwf	??_color_read^0,c
  5521   002202  0EE4               	movlw	228
  5522   002204                     u1947:
  5523   002204  2EE8               	decfsz	wreg,f,c
  5524   002206  D7FE               	bra	u1947
  5525   002208  2E0E               	decfsz	??_color_read^0,f,c
  5526   00220A  D7FC               	bra	u1947
  5527   00220C  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5528   00220E  D7FA               	bra	u1947
  5529   002210  D000               	nop2	
  5530   002212                     
  5531                           ;../color.c: 117:     rgb->G = color_read_Green();
  5532   002212  ECFF  F014         	call	_color_read_Green	;wreg free
  5533   002216  EE20 F004          	lfsr	2,4
  5534   00221A  500C               	movf	color_read@rgb^0,w,c
  5535   00221C  26D9               	addwf	fsr2l,f,c
  5536   00221E  500D               	movf	(color_read@rgb+1)^0,w,c
  5537   002220  22DA               	addwfc	fsr2h,f,c
  5538   002222  C005  FFDE         	movff	?_color_read_Green,postinc2
  5539   002226  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  5540   00222A                     
  5541                           ;../color.c: 118:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5542   00222A  0E09               	movlw	9
  5543   00222C  6E0F               	movwf	(??_color_read+1)^0,c
  5544   00222E  0E1E               	movlw	30
  5545   002230  6E0E               	movwf	??_color_read^0,c
  5546   002232  0EE4               	movlw	228
  5547   002234                     u1957:
  5548   002234  2EE8               	decfsz	wreg,f,c
  5549   002236  D7FE               	bra	u1957
  5550   002238  2E0E               	decfsz	??_color_read^0,f,c
  5551   00223A  D7FC               	bra	u1957
  5552   00223C  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5553   00223E  D7FA               	bra	u1957
  5554   002240  D000               	nop2	
  5555                           
  5556                           ;../color.c: 119:     rgb->B = color_read_Blue();
  5557   002242  EC27  F015         	call	_color_read_Blue	;wreg free
  5558   002246  EE20 F006          	lfsr	2,6
  5559   00224A  500C               	movf	color_read@rgb^0,w,c
  5560   00224C  26D9               	addwf	fsr2l,f,c
  5561   00224E  500D               	movf	(color_read@rgb+1)^0,w,c
  5562   002250  22DA               	addwfc	fsr2h,f,c
  5563   002252  C005  FFDE         	movff	?_color_read_Blue,postinc2
  5564   002256  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  5565   00225A  0012               	return		;funcret
  5566   00225C                     __end_of_color_read:
  5567                           	callstack 0
  5568                           
  5569 ;; *************** function _color_read_Red *****************
  5570 ;; Defined at:
  5571 ;;		line 69 in file "../color.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;		None
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;  tmp             2    9[COMRAM] unsigned int 
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  2    4[COMRAM] unsigned int 
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0, cstack
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5585 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5586 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5587 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5588 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5589 ;;Total ram usage:        7 bytes
  5590 ;; Hardware stack levels used: 1
  5591 ;; Hardware stack levels required when called: 3
  5592 ;; This function calls:
  5593 ;;		_I2C_2_Master_Read
  5594 ;;		_I2C_2_Master_RepStart
  5595 ;;		_I2C_2_Master_Start
  5596 ;;		_I2C_2_Master_Stop
  5597 ;;		_I2C_2_Master_Write
  5598 ;; This function is called by:
  5599 ;;		_color_read
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           	psect	text30
  5604   00295E                     __ptext30:
  5605                           	callstack 0
  5606   00295E                     _color_read_Red:
  5607                           	callstack 26
  5608   00295E                     
  5609                           ;../color.c: 71:  unsigned int tmp;;../color.c: 72:  I2C_2_Master_Start();
  5610   00295E  EC92  F016         	call	_I2C_2_Master_Start	;wreg free
  5611                           
  5612                           ;../color.c: 73:  I2C_2_Master_Write(0x52 | 0x00);
  5613   002962  0E52               	movlw	82
  5614   002964  EC82  F016         	call	_I2C_2_Master_Write
  5615                           
  5616                           ;../color.c: 74:  I2C_2_Master_Write(0xA0 | 0x16);
  5617   002968  0EB6               	movlw	182
  5618   00296A  EC82  F016         	call	_I2C_2_Master_Write
  5619                           
  5620                           ;../color.c: 75:  I2C_2_Master_RepStart();
  5621   00296E  EC88  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5622                           
  5623                           ;../color.c: 76:  I2C_2_Master_Write(0x52 | 0x01);
  5624   002972  0E53               	movlw	83
  5625   002974  EC82  F016         	call	_I2C_2_Master_Write
  5626                           
  5627                           ;../color.c: 77:  tmp=I2C_2_Master_Read(1);
  5628   002978  0E01               	movlw	1
  5629   00297A  EC92  F015         	call	_I2C_2_Master_Read
  5630   00297E  6E07               	movwf	??_color_read_Red^0,c
  5631   002980  5007               	movf	??_color_read_Red^0,w,c
  5632   002982  6E0A               	movwf	color_read_Red@tmp^0,c
  5633   002984  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  5634                           
  5635                           ;../color.c: 78:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5636   002986  0E00               	movlw	0
  5637   002988  EC92  F015         	call	_I2C_2_Master_Read
  5638   00298C  6E07               	movwf	??_color_read_Red^0,c
  5639   00298E  5007               	movf	??_color_read_Red^0,w,c
  5640   002990  6E09               	movwf	(??_color_read_Red+2)^0,c
  5641   002992  6A08               	clrf	(??_color_read_Red+1)^0,c
  5642   002994  500A               	movf	color_read_Red@tmp^0,w,c
  5643   002996  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  5644   002998  6E0A               	movwf	color_read_Red@tmp^0,c
  5645   00299A  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  5646   00299C  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  5647   00299E  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5648                           
  5649                           ;../color.c: 79:  I2C_2_Master_Stop();
  5650   0029A0  EC8D  F016         	call	_I2C_2_Master_Stop	;wreg free
  5651   0029A4                     
  5652                           ;../color.c: 80:  return tmp;
  5653   0029A4  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5654   0029A8  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5655   0029AC  0012               	return		;funcret
  5656   0029AE                     __end_of_color_read_Red:
  5657                           	callstack 0
  5658                           
  5659 ;; *************** function _color_read_Luminosity *****************
  5660 ;; Defined at:
  5661 ;;		line 55 in file "../color.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;		None
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  tmp             2    9[COMRAM] unsigned int 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  2    4[COMRAM] unsigned int 
  5668 ;; Registers used:
  5669 ;;		wreg, status,2, status,0, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5677 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5678 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5679 ;;Total ram usage:        7 bytes
  5680 ;; Hardware stack levels used: 1
  5681 ;; Hardware stack levels required when called: 3
  5682 ;; This function calls:
  5683 ;;		_I2C_2_Master_Read
  5684 ;;		_I2C_2_Master_RepStart
  5685 ;;		_I2C_2_Master_Start
  5686 ;;		_I2C_2_Master_Stop
  5687 ;;		_I2C_2_Master_Write
  5688 ;; This function is called by:
  5689 ;;		_color_read
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           	psect	text31
  5694   0029AE                     __ptext31:
  5695                           	callstack 0
  5696   0029AE                     _color_read_Luminosity:
  5697                           	callstack 26
  5698   0029AE                     
  5699                           ;../color.c: 57:  unsigned int tmp;;../color.c: 58:  I2C_2_Master_Start();
  5700   0029AE  EC92  F016         	call	_I2C_2_Master_Start	;wreg free
  5701                           
  5702                           ;../color.c: 59:  I2C_2_Master_Write(0x52 | 0x00);
  5703   0029B2  0E52               	movlw	82
  5704   0029B4  EC82  F016         	call	_I2C_2_Master_Write
  5705                           
  5706                           ;../color.c: 60:  I2C_2_Master_Write(0xA0 | 0x14);
  5707   0029B8  0EB4               	movlw	180
  5708   0029BA  EC82  F016         	call	_I2C_2_Master_Write
  5709                           
  5710                           ;../color.c: 61:  I2C_2_Master_RepStart();
  5711   0029BE  EC88  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5712                           
  5713                           ;../color.c: 62:  I2C_2_Master_Write(0x52 | 0x01);
  5714   0029C2  0E53               	movlw	83
  5715   0029C4  EC82  F016         	call	_I2C_2_Master_Write
  5716                           
  5717                           ;../color.c: 63:  tmp=I2C_2_Master_Read(1);
  5718   0029C8  0E01               	movlw	1
  5719   0029CA  EC92  F015         	call	_I2C_2_Master_Read
  5720   0029CE  6E07               	movwf	??_color_read_Luminosity^0,c
  5721   0029D0  5007               	movf	??_color_read_Luminosity^0,w,c
  5722   0029D2  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5723   0029D4  6A0B               	clrf	(color_read_Luminosity@tmp+1)^0,c
  5724                           
  5725                           ;../color.c: 64:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5726   0029D6  0E00               	movlw	0
  5727   0029D8  EC92  F015         	call	_I2C_2_Master_Read
  5728   0029DC  6E07               	movwf	??_color_read_Luminosity^0,c
  5729   0029DE  5007               	movf	??_color_read_Luminosity^0,w,c
  5730   0029E0  6E09               	movwf	(??_color_read_Luminosity+2)^0,c
  5731   0029E2  6A08               	clrf	(??_color_read_Luminosity+1)^0,c
  5732   0029E4  500A               	movf	color_read_Luminosity@tmp^0,w,c
  5733   0029E6  1008               	iorwf	(??_color_read_Luminosity+1)^0,w,c
  5734   0029E8  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5735   0029EA  500B               	movf	(color_read_Luminosity@tmp+1)^0,w,c
  5736   0029EC  1009               	iorwf	(??_color_read_Luminosity+2)^0,w,c
  5737   0029EE  6E0B               	movwf	(color_read_Luminosity@tmp+1)^0,c
  5738                           
  5739                           ;../color.c: 65:  I2C_2_Master_Stop();
  5740   0029F0  EC8D  F016         	call	_I2C_2_Master_Stop	;wreg free
  5741   0029F4                     
  5742                           ;../color.c: 66:  return tmp;
  5743   0029F4  C00A  F005         	movff	color_read_Luminosity@tmp,?_color_read_Luminosity
  5744   0029F8  C00B  F006         	movff	color_read_Luminosity@tmp+1,?_color_read_Luminosity+1
  5745   0029FC  0012               	return		;funcret
  5746   0029FE                     __end_of_color_read_Luminosity:
  5747                           	callstack 0
  5748                           
  5749 ;; *************** function _color_read_Green *****************
  5750 ;; Defined at:
  5751 ;;		line 83 in file "../color.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;		None
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;  tmp             2    9[COMRAM] unsigned int 
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  2    4[COMRAM] unsigned int 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2, status,0, cstack
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5765 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5766 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5767 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5768 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5769 ;;Total ram usage:        7 bytes
  5770 ;; Hardware stack levels used: 1
  5771 ;; Hardware stack levels required when called: 3
  5772 ;; This function calls:
  5773 ;;		_I2C_2_Master_Read
  5774 ;;		_I2C_2_Master_RepStart
  5775 ;;		_I2C_2_Master_Start
  5776 ;;		_I2C_2_Master_Stop
  5777 ;;		_I2C_2_Master_Write
  5778 ;; This function is called by:
  5779 ;;		_color_read
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           	psect	text32
  5784   0029FE                     __ptext32:
  5785                           	callstack 0
  5786   0029FE                     _color_read_Green:
  5787                           	callstack 26
  5788   0029FE                     
  5789                           ;../color.c: 85:  unsigned int tmp;;../color.c: 86:  I2C_2_Master_Start();
  5790   0029FE  EC92  F016         	call	_I2C_2_Master_Start	;wreg free
  5791                           
  5792                           ;../color.c: 87:  I2C_2_Master_Write(0x52 | 0x00);
  5793   002A02  0E52               	movlw	82
  5794   002A04  EC82  F016         	call	_I2C_2_Master_Write
  5795                           
  5796                           ;../color.c: 88:  I2C_2_Master_Write(0xA0 | 0x18);
  5797   002A08  0EB8               	movlw	184
  5798   002A0A  EC82  F016         	call	_I2C_2_Master_Write
  5799                           
  5800                           ;../color.c: 89:  I2C_2_Master_RepStart();
  5801   002A0E  EC88  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5802                           
  5803                           ;../color.c: 90:  I2C_2_Master_Write(0x52 | 0x01);
  5804   002A12  0E53               	movlw	83
  5805   002A14  EC82  F016         	call	_I2C_2_Master_Write
  5806                           
  5807                           ;../color.c: 91:  tmp=I2C_2_Master_Read(1);
  5808   002A18  0E01               	movlw	1
  5809   002A1A  EC92  F015         	call	_I2C_2_Master_Read
  5810   002A1E  6E07               	movwf	??_color_read_Green^0,c
  5811   002A20  5007               	movf	??_color_read_Green^0,w,c
  5812   002A22  6E0A               	movwf	color_read_Green@tmp^0,c
  5813   002A24  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5814                           
  5815                           ;../color.c: 92:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5816   002A26  0E00               	movlw	0
  5817   002A28  EC92  F015         	call	_I2C_2_Master_Read
  5818   002A2C  6E07               	movwf	??_color_read_Green^0,c
  5819   002A2E  5007               	movf	??_color_read_Green^0,w,c
  5820   002A30  6E09               	movwf	(??_color_read_Green+2)^0,c
  5821   002A32  6A08               	clrf	(??_color_read_Green+1)^0,c
  5822   002A34  500A               	movf	color_read_Green@tmp^0,w,c
  5823   002A36  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5824   002A38  6E0A               	movwf	color_read_Green@tmp^0,c
  5825   002A3A  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5826   002A3C  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5827   002A3E  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5828                           
  5829                           ;../color.c: 93:  I2C_2_Master_Stop();
  5830   002A40  EC8D  F016         	call	_I2C_2_Master_Stop	;wreg free
  5831   002A44                     
  5832                           ;../color.c: 94:  return tmp;
  5833   002A44  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5834   002A48  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5835   002A4C  0012               	return		;funcret
  5836   002A4E                     __end_of_color_read_Green:
  5837                           	callstack 0
  5838                           
  5839 ;; *************** function _color_read_Blue *****************
  5840 ;; Defined at:
  5841 ;;		line 97 in file "../color.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;		None
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;  tmp             2    9[COMRAM] unsigned int 
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  2    4[COMRAM] unsigned int 
  5848 ;; Registers used:
  5849 ;;		wreg, status,2, status,0, cstack
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5855 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5856 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5857 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5858 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5859 ;;Total ram usage:        7 bytes
  5860 ;; Hardware stack levels used: 1
  5861 ;; Hardware stack levels required when called: 3
  5862 ;; This function calls:
  5863 ;;		_I2C_2_Master_Read
  5864 ;;		_I2C_2_Master_RepStart
  5865 ;;		_I2C_2_Master_Start
  5866 ;;		_I2C_2_Master_Stop
  5867 ;;		_I2C_2_Master_Write
  5868 ;; This function is called by:
  5869 ;;		_color_read
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           	psect	text33
  5874   002A4E                     __ptext33:
  5875                           	callstack 0
  5876   002A4E                     _color_read_Blue:
  5877                           	callstack 26
  5878   002A4E                     
  5879                           ;../color.c: 99:  unsigned int tmp;;../color.c: 100:  I2C_2_Master_Start();
  5880   002A4E  EC92  F016         	call	_I2C_2_Master_Start	;wreg free
  5881                           
  5882                           ;../color.c: 101:  I2C_2_Master_Write(0x52 | 0x00);
  5883   002A52  0E52               	movlw	82
  5884   002A54  EC82  F016         	call	_I2C_2_Master_Write
  5885                           
  5886                           ;../color.c: 102:  I2C_2_Master_Write(0xA0 | 0x1A);
  5887   002A58  0EBA               	movlw	186
  5888   002A5A  EC82  F016         	call	_I2C_2_Master_Write
  5889                           
  5890                           ;../color.c: 103:  I2C_2_Master_RepStart();
  5891   002A5E  EC88  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5892                           
  5893                           ;../color.c: 104:  I2C_2_Master_Write(0x52 | 0x01);
  5894   002A62  0E53               	movlw	83
  5895   002A64  EC82  F016         	call	_I2C_2_Master_Write
  5896                           
  5897                           ;../color.c: 105:  tmp=I2C_2_Master_Read(1);
  5898   002A68  0E01               	movlw	1
  5899   002A6A  EC92  F015         	call	_I2C_2_Master_Read
  5900   002A6E  6E07               	movwf	??_color_read_Blue^0,c
  5901   002A70  5007               	movf	??_color_read_Blue^0,w,c
  5902   002A72  6E0A               	movwf	color_read_Blue@tmp^0,c
  5903   002A74  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5904                           
  5905                           ;../color.c: 106:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5906   002A76  0E00               	movlw	0
  5907   002A78  EC92  F015         	call	_I2C_2_Master_Read
  5908   002A7C  6E07               	movwf	??_color_read_Blue^0,c
  5909   002A7E  5007               	movf	??_color_read_Blue^0,w,c
  5910   002A80  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5911   002A82  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5912   002A84  500A               	movf	color_read_Blue@tmp^0,w,c
  5913   002A86  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5914   002A88  6E0A               	movwf	color_read_Blue@tmp^0,c
  5915   002A8A  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5916   002A8C  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5917   002A8E  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5918                           
  5919                           ;../color.c: 107:  I2C_2_Master_Stop();
  5920   002A90  EC8D  F016         	call	_I2C_2_Master_Stop	;wreg free
  5921   002A94                     
  5922                           ;../color.c: 108:  return tmp;
  5923   002A94  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5924   002A98  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5925   002A9C  0012               	return		;funcret
  5926   002A9E                     __end_of_color_read_Blue:
  5927                           	callstack 0
  5928                           
  5929 ;; *************** function _I2C_2_Master_RepStart *****************
  5930 ;; Defined at:
  5931 ;;		line 33 in file "../i2c.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;		None
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      void 
  5938 ;; Registers used:
  5939 ;;		wreg, status,2, status,0, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5949 ;;Total ram usage:        0 bytes
  5950 ;; Hardware stack levels used: 1
  5951 ;; Hardware stack levels required when called: 2
  5952 ;; This function calls:
  5953 ;;		_I2C_2_Master_Idle
  5954 ;; This function is called by:
  5955 ;;		_color_read_Luminosity
  5956 ;;		_color_read_Red
  5957 ;;		_color_read_Green
  5958 ;;		_color_read_Blue
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           	psect	text34
  5963   002D10                     __ptext34:
  5964                           	callstack 0
  5965   002D10                     _I2C_2_Master_RepStart:
  5966                           	callstack 26
  5967   002D10                     
  5968                           ;../i2c.c: 35:   I2C_2_Master_Idle();
  5969   002D10  EC15  F016         	call	_I2C_2_Master_Idle	;wreg free
  5970   002D14                     
  5971                           ;../i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5972   002D14  010E               	movlb	14	; () banked
  5973   002D16  83DA               	bsf	218,1,b	;volatile
  5974   002D18                     
  5975                           ; BSR set to: 14
  5976   002D18  0012               	return		;funcret
  5977   002D1A                     __end_of_I2C_2_Master_RepStart:
  5978                           	callstack 0
  5979                           
  5980 ;; *************** function _I2C_2_Master_Read *****************
  5981 ;; Defined at:
  5982 ;;		line 51 in file "../i2c.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;  ack             1    wreg     unsigned char 
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;  ack             1    2[COMRAM] unsigned char 
  5987 ;;  tmp             1    3[COMRAM] unsigned char 
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  1    wreg      unsigned char 
  5990 ;; Registers used:
  5991 ;;		wreg, status,2, status,0, cstack
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5998 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5999 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6000 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6001 ;;Total ram usage:        3 bytes
  6002 ;; Hardware stack levels used: 1
  6003 ;; Hardware stack levels required when called: 2
  6004 ;; This function calls:
  6005 ;;		_I2C_2_Master_Idle
  6006 ;; This function is called by:
  6007 ;;		_color_read_Luminosity
  6008 ;;		_color_read_Red
  6009 ;;		_color_read_Green
  6010 ;;		_color_read_Blue
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           	psect	text35
  6015   002B24                     __ptext35:
  6016                           	callstack 0
  6017   002B24                     _I2C_2_Master_Read:
  6018                           	callstack 26
  6019                           
  6020                           ; BSR set to: 14
  6021                           ;incstack = 0
  6022                           ;I2C_2_Master_Read@ack stored from wreg
  6023   002B24  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  6024   002B26                     
  6025                           ;../i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);../i2c.c: 52: {;../i2c
      +                          .c: 53:   unsigned char tmp;;../i2c.c: 54:   I2C_2_Master_Idle();
  6026   002B26  EC15  F016         	call	_I2C_2_Master_Idle	;wreg free
  6027   002B2A                     
  6028                           ;../i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6029   002B2A  010E               	movlb	14	; () banked
  6030   002B2C  87DA               	bsf	218,3,b	;volatile
  6031                           
  6032                           ;../i2c.c: 56:   I2C_2_Master_Idle();
  6033   002B2E  EC15  F016         	call	_I2C_2_Master_Idle	;wreg free
  6034   002B32                     
  6035                           ;../i2c.c: 57:   tmp = SSP2BUF;
  6036   002B32  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6037                           
  6038                           ;../i2c.c: 58:   I2C_2_Master_Idle();
  6039   002B36  EC15  F016         	call	_I2C_2_Master_Idle	;wreg free
  6040   002B3A                     
  6041                           ;../i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6042   002B3A  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  6043   002B3C  B4D8               	btfsc	status,2,c
  6044   002B3E  EFA3  F015         	goto	u1251
  6045   002B42  EFA7  F015         	goto	u1250
  6046   002B46                     u1251:
  6047   002B46  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6048   002B48  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  6049   002B4A  EFA8  F015         	goto	u1268
  6050   002B4E                     u1250:
  6051   002B4E  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6052   002B50                     u1268:
  6053   002B50  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  6054   002B52  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  6055   002B54  010E               	movlb	14	; () banked
  6056   002B56  51DA               	movf	218,w,b	;volatile
  6057   002B58  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6058   002B5A  0BDF               	andlw	-33
  6059   002B5C  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6060   002B5E  6FDA               	movwf	218,b	;volatile
  6061   002B60                     
  6062                           ; BSR set to: 14
  6063                           ;../i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6064   002B60  89DA               	bsf	218,4,b	;volatile
  6065   002B62                     
  6066                           ; BSR set to: 14
  6067                           ;../i2c.c: 61:   return tmp;
  6068   002B62  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  6069   002B64                     
  6070                           ; BSR set to: 14
  6071   002B64  0012               	return		;funcret
  6072   002B66                     __end_of_I2C_2_Master_Read:
  6073                           	callstack 0
  6074                           
  6075 ;; *************** function _color_processor_hard *****************
  6076 ;; Defined at:
  6077 ;;		line 152 in file "../color.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  6080 ;;		 -> main@RGB_recorded(8), 
  6081 ;;  calibrated      2    2[COMRAM] PTR unsigned int 
  6082 ;;		 -> main@color_calibrated(64), 
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;  cb              2   19[COMRAM] unsigned int 
  6085 ;;  cg              2   17[COMRAM] unsigned int 
  6086 ;;  cr              2   15[COMRAM] unsigned int 
  6087 ;;  condition_b     1    0        _Bool 
  6088 ;;  condition_g     1    0        _Bool 
  6089 ;;  condition_r     1    0        _Bool 
  6090 ;;  i               2    0        int 
  6091 ;;  b               2   13[COMRAM] unsigned int 
  6092 ;;  g               2   11[COMRAM] unsigned int 
  6093 ;;  r               2    9[COMRAM] unsigned int 
  6094 ;; Return value:  Size  Location     Type
  6095 ;;                  2    0[COMRAM] unsigned int 
  6096 ;; Registers used:
  6097 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6098 ;; Tracked objects:
  6099 ;;		On entry : 0/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6103 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6104 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6105 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6106 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6107 ;;Total ram usage:       21 bytes
  6108 ;; Hardware stack levels used: 1
  6109 ;; Hardware stack levels required when called: 1
  6110 ;; This function calls:
  6111 ;;		Nothing
  6112 ;; This function is called by:
  6113 ;;		_main
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117                           	psect	text36
  6118   001B42                     __ptext36:
  6119                           	callstack 0
  6120   001B42                     _color_processor_hard:
  6121                           	callstack 29
  6122   001B42                     
  6123                           ;../color.c: 152: unsigned int color_processor_hard(struct RGB_val *rgb, unsigned int ca
      +                          librated[]);../color.c: 153: {;../color.c: 154:     unsigned int r = rgb->R;
  6124   001B42  EE20 F002          	lfsr	2,2
  6125   001B46  5001               	movf	color_processor_hard@rgb^0,w,c
  6126   001B48  26D9               	addwf	fsr2l,f,c
  6127   001B4A  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6128   001B4C  22DA               	addwfc	fsr2h,f,c
  6129   001B4E  CFDE F00A          	movff	postinc2,color_processor_hard@r
  6130   001B52  CFDD F00B          	movff	postdec2,color_processor_hard@r+1
  6131                           
  6132                           ;../color.c: 155:     unsigned int g = rgb->G;
  6133   001B56  EE20 F004          	lfsr	2,4
  6134   001B5A  5001               	movf	color_processor_hard@rgb^0,w,c
  6135   001B5C  26D9               	addwf	fsr2l,f,c
  6136   001B5E  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6137   001B60  22DA               	addwfc	fsr2h,f,c
  6138   001B62  CFDE F00C          	movff	postinc2,color_processor_hard@g
  6139   001B66  CFDD F00D          	movff	postdec2,color_processor_hard@g+1
  6140                           
  6141                           ;../color.c: 156:     unsigned int b = rgb->B;
  6142   001B6A  EE20 F006          	lfsr	2,6
  6143   001B6E  5001               	movf	color_processor_hard@rgb^0,w,c
  6144   001B70  26D9               	addwf	fsr2l,f,c
  6145   001B72  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6146   001B74  22DA               	addwfc	fsr2h,f,c
  6147   001B76  CFDE F00E          	movff	postinc2,color_processor_hard@b
  6148   001B7A  CFDD F00F          	movff	postdec2,color_processor_hard@b+1
  6149   001B7E                     
  6150                           ;../color.c: 160:         unsigned int cr = calibrated[4*i+1];
  6151   001B7E  EE20 F002          	lfsr	2,2
  6152   001B82  5003               	movf	color_processor_hard@calibrated^0,w,c
  6153   001B84  26D9               	addwf	fsr2l,f,c
  6154   001B86  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6155   001B88  22DA               	addwfc	fsr2h,f,c
  6156   001B8A  CFDE F010          	movff	postinc2,color_processor_hard@cr
  6157   001B8E  CFDD F011          	movff	postdec2,color_processor_hard@cr+1
  6158                           
  6159                           ;../color.c: 161:         unsigned int cg = calibrated[4*i+2];
  6160   001B92  EE20 F004          	lfsr	2,4
  6161   001B96  5003               	movf	color_processor_hard@calibrated^0,w,c
  6162   001B98  26D9               	addwf	fsr2l,f,c
  6163   001B9A  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6164   001B9C  22DA               	addwfc	fsr2h,f,c
  6165   001B9E  CFDE F012          	movff	postinc2,color_processor_hard@cg
  6166   001BA2  CFDD F013          	movff	postdec2,color_processor_hard@cg+1
  6167                           
  6168                           ;../color.c: 162:         unsigned int cb = calibrated[4*i+3];
  6169   001BA6  EE20 F006          	lfsr	2,6
  6170   001BAA  5003               	movf	color_processor_hard@calibrated^0,w,c
  6171   001BAC  26D9               	addwf	fsr2l,f,c
  6172   001BAE  5004               	movf	(color_processor_hard@calibrated+1)^0,w,c
  6173   001BB0  22DA               	addwfc	fsr2h,f,c
  6174   001BB2  CFDE F014          	movff	postinc2,color_processor_hard@cb
  6175   001BB6  CFDD F015          	movff	postdec2,color_processor_hard@cb+1
  6176   001BBA                     
  6177                           ;../color.c: 164:         _Bool condition_r = r>cr-20 && r<cr+20;
  6178   001BBA  0E00               	movlw	0
  6179   001BBC  6E07               	movwf	_color_processor_hard$370^0,c
  6180   001BBE  0EEC               	movlw	236
  6181   001BC0  2410               	addwf	color_processor_hard@cr^0,w,c
  6182   001BC2  6E05               	movwf	??_color_processor_hard^0,c
  6183   001BC4  0EFF               	movlw	255
  6184   001BC6  2011               	addwfc	(color_processor_hard@cr+1)^0,w,c
  6185   001BC8  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6186   001BCA  500A               	movf	color_processor_hard@r^0,w,c
  6187   001BCC  5C05               	subwf	??_color_processor_hard^0,w,c
  6188   001BCE  500B               	movf	(color_processor_hard@r+1)^0,w,c
  6189   001BD0  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6190   001BD2  B0D8               	btfsc	status,0,c
  6191   001BD4  EFEE  F00D         	goto	u1481
  6192   001BD8  EFF0  F00D         	goto	u1480
  6193   001BDC                     u1481:
  6194   001BDC  EF03  F00E         	goto	l64
  6195   001BE0                     u1480:
  6196   001BE0  0E14               	movlw	20
  6197   001BE2  2410               	addwf	color_processor_hard@cr^0,w,c
  6198   001BE4  6E05               	movwf	??_color_processor_hard^0,c
  6199   001BE6  0E00               	movlw	0
  6200   001BE8  2011               	addwfc	(color_processor_hard@cr+1)^0,w,c
  6201   001BEA  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6202   001BEC  5005               	movf	??_color_processor_hard^0,w,c
  6203   001BEE  5C0A               	subwf	color_processor_hard@r^0,w,c
  6204   001BF0  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6205   001BF2  580B               	subwfb	(color_processor_hard@r+1)^0,w,c
  6206   001BF4  B0D8               	btfsc	status,0,c
  6207   001BF6  EFFF  F00D         	goto	u1491
  6208   001BFA  EF01  F00E         	goto	u1490
  6209   001BFE                     u1491:
  6210   001BFE  EF03  F00E         	goto	l64
  6211   001C02                     u1490:
  6212   001C02  0E01               	movlw	1
  6213   001C04  6E07               	movwf	_color_processor_hard$370^0,c
  6214   001C06                     l64:
  6215                           
  6216                           ;../color.c: 165:         _Bool condition_g = b>cb-20 && b<cb+20;
  6217   001C06  0E00               	movlw	0
  6218   001C08  6E08               	movwf	_color_processor_hard$372^0,c
  6219   001C0A  0EEC               	movlw	236
  6220   001C0C  2414               	addwf	color_processor_hard@cb^0,w,c
  6221   001C0E  6E05               	movwf	??_color_processor_hard^0,c
  6222   001C10  0EFF               	movlw	255
  6223   001C12  2015               	addwfc	(color_processor_hard@cb+1)^0,w,c
  6224   001C14  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6225   001C16  500E               	movf	color_processor_hard@b^0,w,c
  6226   001C18  5C05               	subwf	??_color_processor_hard^0,w,c
  6227   001C1A  500F               	movf	(color_processor_hard@b+1)^0,w,c
  6228   001C1C  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6229   001C1E  B0D8               	btfsc	status,0,c
  6230   001C20  EF14  F00E         	goto	u1501
  6231   001C24  EF16  F00E         	goto	u1500
  6232   001C28                     u1501:
  6233   001C28  EF29  F00E         	goto	l66
  6234   001C2C                     u1500:
  6235   001C2C  0E14               	movlw	20
  6236   001C2E  2414               	addwf	color_processor_hard@cb^0,w,c
  6237   001C30  6E05               	movwf	??_color_processor_hard^0,c
  6238   001C32  0E00               	movlw	0
  6239   001C34  2015               	addwfc	(color_processor_hard@cb+1)^0,w,c
  6240   001C36  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6241   001C38  5005               	movf	??_color_processor_hard^0,w,c
  6242   001C3A  5C0E               	subwf	color_processor_hard@b^0,w,c
  6243   001C3C  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6244   001C3E  580F               	subwfb	(color_processor_hard@b+1)^0,w,c
  6245   001C40  B0D8               	btfsc	status,0,c
  6246   001C42  EF25  F00E         	goto	u1511
  6247   001C46  EF27  F00E         	goto	u1510
  6248   001C4A                     u1511:
  6249   001C4A  EF29  F00E         	goto	l66
  6250   001C4E                     u1510:
  6251   001C4E  0E01               	movlw	1
  6252   001C50  6E08               	movwf	_color_processor_hard$372^0,c
  6253   001C52                     l66:
  6254                           
  6255                           ;../color.c: 166:         _Bool condition_b = g>cg-20 && g<cg+20;
  6256   001C52  0E00               	movlw	0
  6257   001C54  6E09               	movwf	_color_processor_hard$374^0,c
  6258   001C56  0EEC               	movlw	236
  6259   001C58  2412               	addwf	color_processor_hard@cg^0,w,c
  6260   001C5A  6E05               	movwf	??_color_processor_hard^0,c
  6261   001C5C  0EFF               	movlw	255
  6262   001C5E  2013               	addwfc	(color_processor_hard@cg+1)^0,w,c
  6263   001C60  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6264   001C62  500C               	movf	color_processor_hard@g^0,w,c
  6265   001C64  5C05               	subwf	??_color_processor_hard^0,w,c
  6266   001C66  500D               	movf	(color_processor_hard@g+1)^0,w,c
  6267   001C68  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6268   001C6A  B0D8               	btfsc	status,0,c
  6269   001C6C  EF3A  F00E         	goto	u1521
  6270   001C70  EF3C  F00E         	goto	u1520
  6271   001C74                     u1521:
  6272   001C74  EF4F  F00E         	goto	l68
  6273   001C78                     u1520:
  6274   001C78  0E14               	movlw	20
  6275   001C7A  2412               	addwf	color_processor_hard@cg^0,w,c
  6276   001C7C  6E05               	movwf	??_color_processor_hard^0,c
  6277   001C7E  0E00               	movlw	0
  6278   001C80  2013               	addwfc	(color_processor_hard@cg+1)^0,w,c
  6279   001C82  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6280   001C84  5005               	movf	??_color_processor_hard^0,w,c
  6281   001C86  5C0C               	subwf	color_processor_hard@g^0,w,c
  6282   001C88  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6283   001C8A  580D               	subwfb	(color_processor_hard@g+1)^0,w,c
  6284   001C8C  B0D8               	btfsc	status,0,c
  6285   001C8E  EF4B  F00E         	goto	u1531
  6286   001C92  EF4D  F00E         	goto	u1530
  6287   001C96                     u1531:
  6288   001C96  EF4F  F00E         	goto	l68
  6289   001C9A                     u1530:
  6290   001C9A  0E01               	movlw	1
  6291   001C9C  6E09               	movwf	_color_processor_hard$374^0,c
  6292   001C9E                     l68:
  6293   001C9E                     
  6294                           ;../color.c: 169:             return i;
  6295   001C9E  0E00               	movlw	0
  6296   001CA0  6E02               	movwf	(?_color_processor_hard+1)^0,c
  6297   001CA2  0E00               	movlw	0
  6298   001CA4  6E01               	movwf	?_color_processor_hard^0,c
  6299   001CA6  0012               	return		;funcret
  6300   001CA8                     __end_of_color_processor_hard:
  6301                           	callstack 0
  6302                           
  6303 ;; *************** function _color_processor_easy *****************
  6304 ;; Defined at:
  6305 ;;		line 134 in file "../color.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  6308 ;;		 -> main@RGB_recorded(8), 
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;  b               2    8[COMRAM] unsigned int 
  6311 ;;  a               2    6[COMRAM] unsigned int 
  6312 ;;  c               2    4[COMRAM] unsigned int 
  6313 ;;  color           2    2[COMRAM] unsigned int 
  6314 ;; Return value:  Size  Location     Type
  6315 ;;                  2    0[COMRAM] unsigned int 
  6316 ;; Registers used:
  6317 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6323 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6324 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6326 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6327 ;;Total ram usage:       10 bytes
  6328 ;; Hardware stack levels used: 1
  6329 ;; Hardware stack levels required when called: 1
  6330 ;; This function calls:
  6331 ;;		Nothing
  6332 ;; This function is called by:
  6333 ;;		_main
  6334 ;; This function uses a non-reentrant model
  6335 ;;
  6336                           
  6337                           	psect	text37
  6338   0020F8                     __ptext37:
  6339                           	callstack 0
  6340   0020F8                     _color_processor_easy:
  6341                           	callstack 29
  6342   0020F8                     
  6343                           ;../color.c: 134: unsigned int color_processor_easy(struct RGB_val *rgb);../color.c: 135
      +                          : {;../color.c: 136:     unsigned int a = rgb->R;
  6344   0020F8  EE20 F002          	lfsr	2,2
  6345   0020FC  5001               	movf	color_processor_easy@rgb^0,w,c
  6346   0020FE  26D9               	addwf	fsr2l,f,c
  6347   002100  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6348   002102  22DA               	addwfc	fsr2h,f,c
  6349   002104  CFDE F007          	movff	postinc2,color_processor_easy@a
  6350   002108  CFDD F008          	movff	postdec2,color_processor_easy@a+1
  6351                           
  6352                           ;../color.c: 137:     unsigned int b = rgb->G;
  6353   00210C  EE20 F004          	lfsr	2,4
  6354   002110  5001               	movf	color_processor_easy@rgb^0,w,c
  6355   002112  26D9               	addwf	fsr2l,f,c
  6356   002114  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6357   002116  22DA               	addwfc	fsr2h,f,c
  6358   002118  CFDE F009          	movff	postinc2,color_processor_easy@b
  6359   00211C  CFDD F00A          	movff	postdec2,color_processor_easy@b+1
  6360                           
  6361                           ;../color.c: 138:     unsigned int c = rgb->B;
  6362   002120  EE20 F006          	lfsr	2,6
  6363   002124  5001               	movf	color_processor_easy@rgb^0,w,c
  6364   002126  26D9               	addwf	fsr2l,f,c
  6365   002128  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6366   00212A  22DA               	addwfc	fsr2h,f,c
  6367   00212C  CFDE F005          	movff	postinc2,color_processor_easy@c
  6368   002130  CFDD F006          	movff	postdec2,color_processor_easy@c+1
  6369   002134                     
  6370                           ;../color.c: 139:     unsigned int color;;../color.c: 140:     if (a>=b & a>=c){
  6371   002134  5009               	movf	color_processor_easy@b^0,w,c
  6372   002136  5C07               	subwf	color_processor_easy@a^0,w,c
  6373   002138  500A               	movf	(color_processor_easy@b+1)^0,w,c
  6374   00213A  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6375   00213C  A0D8               	btfss	status,0,c
  6376   00213E  EFA3  F010         	goto	u1441
  6377   002142  EFA5  F010         	goto	u1440
  6378   002146                     u1441:
  6379   002146  EFB6  F010         	goto	l2813
  6380   00214A                     u1440:
  6381   00214A  5005               	movf	color_processor_easy@c^0,w,c
  6382   00214C  5C07               	subwf	color_processor_easy@a^0,w,c
  6383   00214E  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6384   002150  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6385   002152  A0D8               	btfss	status,0,c
  6386   002154  EFAE  F010         	goto	u1451
  6387   002158  EFB0  F010         	goto	u1450
  6388   00215C                     u1451:
  6389   00215C  EFB6  F010         	goto	l2813
  6390   002160                     u1450:
  6391   002160                     
  6392                           ;../color.c: 141:         color=1;
  6393   002160  0E00               	movlw	0
  6394   002162  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6395   002164  0E01               	movlw	1
  6396   002166  6E03               	movwf	color_processor_easy@color^0,c
  6397                           
  6398                           ;../color.c: 142:     }
  6399   002168  EFD6  F010         	goto	l2821
  6400   00216C                     l2813:
  6401   00216C  5007               	movf	color_processor_easy@a^0,w,c
  6402   00216E  5C09               	subwf	color_processor_easy@b^0,w,c
  6403   002170  5008               	movf	(color_processor_easy@a+1)^0,w,c
  6404   002172  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6405   002174  A0D8               	btfss	status,0,c
  6406   002176  EFBF  F010         	goto	u1461
  6407   00217A  EFC1  F010         	goto	u1460
  6408   00217E                     u1461:
  6409   00217E  EFD2  F010         	goto	l2819
  6410   002182                     u1460:
  6411   002182  5005               	movf	color_processor_easy@c^0,w,c
  6412   002184  5C09               	subwf	color_processor_easy@b^0,w,c
  6413   002186  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6414   002188  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6415   00218A  A0D8               	btfss	status,0,c
  6416   00218C  EFCA  F010         	goto	u1471
  6417   002190  EFCC  F010         	goto	u1470
  6418   002194                     u1471:
  6419   002194  EFD2  F010         	goto	l2819
  6420   002198                     u1470:
  6421   002198                     
  6422                           ;../color.c: 144:         color=2;
  6423   002198  0E00               	movlw	0
  6424   00219A  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6425   00219C  0E02               	movlw	2
  6426   00219E  6E03               	movwf	color_processor_easy@color^0,c
  6427                           
  6428                           ;../color.c: 145:     }
  6429   0021A0  EFD6  F010         	goto	l2821
  6430   0021A4                     l2819:
  6431                           
  6432                           ;../color.c: 147:         color=3;
  6433   0021A4  0E00               	movlw	0
  6434   0021A6  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6435   0021A8  0E03               	movlw	3
  6436   0021AA  6E03               	movwf	color_processor_easy@color^0,c
  6437   0021AC                     l2821:
  6438                           
  6439                           ;../color.c: 149:     return color;
  6440   0021AC  C003  F001         	movff	color_processor_easy@color,?_color_processor_easy
  6441   0021B0  C004  F002         	movff	color_processor_easy@color+1,?_color_processor_easy+1
  6442   0021B4  0012               	return		;funcret
  6443   0021B6                     __end_of_color_processor_easy:
  6444                           	callstack 0
  6445                           
  6446 ;; *************** function _color_click_init *****************
  6447 ;; Defined at:
  6448 ;;		line 6 in file "../color.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;		None
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;		None
  6453 ;; Return value:  Size  Location     Type
  6454 ;;                  1    wreg      void 
  6455 ;; Registers used:
  6456 ;;		wreg, status,2, status,0, cstack
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6464 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6465 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6466 ;;Total ram usage:        1 bytes
  6467 ;; Hardware stack levels used: 1
  6468 ;; Hardware stack levels required when called: 4
  6469 ;; This function calls:
  6470 ;;		_I2C_2_Master_Init
  6471 ;;		_color_writetoaddr
  6472 ;; This function is called by:
  6473 ;;		_main
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           	psect	text38
  6478   002860                     __ptext38:
  6479                           	callstack 0
  6480   002860                     _color_click_init:
  6481                           	callstack 26
  6482   002860                     
  6483                           ;../color.c: 9:     I2C_2_Master_Init();
  6484   002860  EC00  F016         	call	_I2C_2_Master_Init	;wreg free
  6485   002864                     
  6486                           ;../color.c: 12:   color_writetoaddr(0x00, 0x01);
  6487   002864  0E01               	movlw	1
  6488   002866  6E03               	movwf	color_writetoaddr@value^0,c
  6489   002868  0E00               	movlw	0
  6490   00286A  EC3C  F016         	call	_color_writetoaddr
  6491   00286E                     
  6492                           ;../color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6493   00286E  0E3F               	movlw	63
  6494   002870  6E05               	movwf	??_color_click_init^0,c
  6495   002872  0E55               	movlw	85
  6496   002874                     u1967:
  6497   002874  2EE8               	decfsz	wreg,f,c
  6498   002876  D7FE               	bra	u1967
  6499   002878  2E05               	decfsz	??_color_click_init^0,f,c
  6500   00287A  D7FC               	bra	u1967
  6501   00287C  F000               	nop	
  6502   00287E                     
  6503                           ;../color.c: 16:  color_writetoaddr(0x00, 0x03);
  6504   00287E  0E03               	movlw	3
  6505   002880  6E03               	movwf	color_writetoaddr@value^0,c
  6506   002882  0E00               	movlw	0
  6507   002884  EC3C  F016         	call	_color_writetoaddr
  6508   002888                     
  6509                           ;../color.c: 19:  color_writetoaddr(0x01, 0xD5);
  6510   002888  0ED5               	movlw	213
  6511   00288A  6E03               	movwf	color_writetoaddr@value^0,c
  6512   00288C  0E01               	movlw	1
  6513   00288E  EC3C  F016         	call	_color_writetoaddr
  6514   002892                     
  6515                           ;../color.c: 22:     TRISHbits.TRISH1 = 0;
  6516   002892  9288               	bcf	136,1,c	;volatile
  6517   002894                     
  6518                           ;../color.c: 23:     TRISDbits.TRISD3 = 0;
  6519   002894  9684               	bcf	132,3,c	;volatile
  6520   002896                     
  6521                           ;../color.c: 24:     TRISDbits.TRISD4 = 0;
  6522   002896  9884               	bcf	132,4,c	;volatile
  6523   002898                     
  6524                           ;../color.c: 25:     TRISHbits.TRISH0 = 0;
  6525   002898  9088               	bcf	136,0,c	;volatile
  6526   00289A                     
  6527                           ;../color.c: 26:     TRISFbits.TRISF0 = 0;
  6528   00289A  9086               	bcf	134,0,c	;volatile
  6529   00289C                     
  6530                           ;../color.c: 28:     LATHbits.LATH1 = 1;
  6531   00289C  8280               	bsf	128,1,c	;volatile
  6532   00289E                     
  6533                           ;../color.c: 29:     LATDbits.LATD3 = 1;
  6534   00289E  867C               	bsf	124,3,c	;volatile
  6535   0028A0                     
  6536                           ;../color.c: 30:     LATDbits.LATD4 = 0;
  6537   0028A0  987C               	bcf	124,4,c	;volatile
  6538   0028A2                     
  6539                           ;../color.c: 31:     LATHbits.LATH0 = 0;
  6540   0028A2  9080               	bcf	128,0,c	;volatile
  6541   0028A4                     
  6542                           ;../color.c: 32:     LATFbits.LATF0 = 0;
  6543   0028A4  907E               	bcf	126,0,c	;volatile
  6544   0028A6                     
  6545                           ;../color.c: 35:     LATDbits.LATD7=0;
  6546   0028A6  9E7C               	bcf	124,7,c	;volatile
  6547   0028A8                     
  6548                           ;../color.c: 36:     LATHbits.LATH3=0;
  6549   0028A8  9680               	bcf	128,3,c	;volatile
  6550   0028AA                     
  6551                           ;../color.c: 37:     TRISDbits.TRISD7=0;
  6552   0028AA  9E84               	bcf	132,7,c	;volatile
  6553   0028AC                     
  6554                           ;../color.c: 38:     TRISHbits.TRISH3=0;
  6555   0028AC  9688               	bcf	136,3,c	;volatile
  6556   0028AE                     
  6557                           ;../color.c: 40:     TRISFbits.TRISF2=1;
  6558   0028AE  8486               	bsf	134,2,c	;volatile
  6559   0028B0                     
  6560                           ;../color.c: 41:     ANSELFbits.ANSELF2=0;
  6561   0028B0  010E               	movlb	14	; () banked
  6562   0028B2  95B4               	bcf	180,2,b	;volatile
  6563   0028B4                     
  6564                           ; BSR set to: 14
  6565                           ;../color.c: 42:     TRISFbits.TRISF3=1;
  6566   0028B4  8686               	bsf	134,3,c	;volatile
  6567   0028B6                     
  6568                           ; BSR set to: 14
  6569                           ;../color.c: 43:     ANSELFbits.ANSELF3=0;
  6570   0028B6  97B4               	bcf	180,3,b	;volatile
  6571   0028B8                     
  6572                           ; BSR set to: 14
  6573   0028B8  0012               	return		;funcret
  6574   0028BA                     __end_of_color_click_init:
  6575                           	callstack 0
  6576                           
  6577 ;; *************** function _color_writetoaddr *****************
  6578 ;; Defined at:
  6579 ;;		line 46 in file "../color.c"
  6580 ;; Parameters:    Size  Location     Type
  6581 ;;  address         1    wreg     unsigned char 
  6582 ;;  value           1    2[COMRAM] unsigned char 
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;  address         1    3[COMRAM] unsigned char 
  6585 ;; Return value:  Size  Location     Type
  6586 ;;                  1    wreg      void 
  6587 ;; Registers used:
  6588 ;;		wreg, status,2, status,0, cstack
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6594 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6595 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6597 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6598 ;;Total ram usage:        2 bytes
  6599 ;; Hardware stack levels used: 1
  6600 ;; Hardware stack levels required when called: 3
  6601 ;; This function calls:
  6602 ;;		_I2C_2_Master_Start
  6603 ;;		_I2C_2_Master_Stop
  6604 ;;		_I2C_2_Master_Write
  6605 ;; This function is called by:
  6606 ;;		_color_click_init
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           	psect	text39
  6611   002C78                     __ptext39:
  6612                           	callstack 0
  6613   002C78                     _color_writetoaddr:
  6614                           	callstack 26
  6615                           
  6616                           ; BSR set to: 14
  6617                           ;incstack = 0
  6618                           ;color_writetoaddr@address stored from wreg
  6619   002C78  6E04               	movwf	color_writetoaddr@address^0,c
  6620   002C7A                     
  6621                           ;../color.c: 46: void color_writetoaddr(char address, char value);../color.c: 47: {;../c
      +                          olor.c: 48:     I2C_2_Master_Start();
  6622   002C7A  EC92  F016         	call	_I2C_2_Master_Start	;wreg free
  6623                           
  6624                           ;../color.c: 49:     I2C_2_Master_Write(0x52 | 0x00);
  6625   002C7E  0E52               	movlw	82
  6626   002C80  EC82  F016         	call	_I2C_2_Master_Write
  6627                           
  6628                           ;../color.c: 50:     I2C_2_Master_Write(0x80 | address);
  6629   002C84  5004               	movf	color_writetoaddr@address^0,w,c
  6630   002C86  0980               	iorlw	128
  6631   002C88  EC82  F016         	call	_I2C_2_Master_Write
  6632                           
  6633                           ;../color.c: 51:     I2C_2_Master_Write(value);
  6634   002C8C  5003               	movf	color_writetoaddr@value^0,w,c
  6635   002C8E  EC82  F016         	call	_I2C_2_Master_Write
  6636                           
  6637                           ;../color.c: 52:     I2C_2_Master_Stop();
  6638   002C92  EC8D  F016         	call	_I2C_2_Master_Stop	;wreg free
  6639   002C96  0012               	return		;funcret
  6640   002C98                     __end_of_color_writetoaddr:
  6641                           	callstack 0
  6642                           
  6643 ;; *************** function _I2C_2_Master_Write *****************
  6644 ;; Defined at:
  6645 ;;		line 45 in file "../i2c.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;  data_byte       1    wreg     unsigned char 
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;  data_byte       1    1[COMRAM] unsigned char 
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  1    wreg      void 
  6652 ;; Registers used:
  6653 ;;		wreg, status,2, status,0, cstack
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6662 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6663 ;;Total ram usage:        1 bytes
  6664 ;; Hardware stack levels used: 1
  6665 ;; Hardware stack levels required when called: 2
  6666 ;; This function calls:
  6667 ;;		_I2C_2_Master_Idle
  6668 ;; This function is called by:
  6669 ;;		_color_writetoaddr
  6670 ;;		_color_read_Luminosity
  6671 ;;		_color_read_Red
  6672 ;;		_color_read_Green
  6673 ;;		_color_read_Blue
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           	psect	text40
  6678   002D04                     __ptext40:
  6679                           	callstack 0
  6680   002D04                     _I2C_2_Master_Write:
  6681                           	callstack 26
  6682                           
  6683                           ;incstack = 0
  6684                           ;I2C_2_Master_Write@data_byte stored from wreg
  6685   002D04  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6686   002D06                     
  6687                           ;../i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);../i2c.c: 46: {;../i2c.c
      +                          : 47:   I2C_2_Master_Idle();
  6688   002D06  EC15  F016         	call	_I2C_2_Master_Idle	;wreg free
  6689   002D0A                     
  6690                           ;../i2c.c: 48:   SSP2BUF = data_byte;
  6691   002D0A  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6692   002D0E  0012               	return		;funcret
  6693   002D10                     __end_of_I2C_2_Master_Write:
  6694                           	callstack 0
  6695                           
  6696 ;; *************** function _I2C_2_Master_Stop *****************
  6697 ;; Defined at:
  6698 ;;		line 39 in file "../i2c.c"
  6699 ;; Parameters:    Size  Location     Type
  6700 ;;		None
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;		None
  6703 ;; Return value:  Size  Location     Type
  6704 ;;                  1    wreg      void 
  6705 ;; Registers used:
  6706 ;;		wreg, status,2, status,0, cstack
  6707 ;; Tracked objects:
  6708 ;;		On entry : 0/0
  6709 ;;		On exit  : 0/0
  6710 ;;		Unchanged: 0/0
  6711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6716 ;;Total ram usage:        0 bytes
  6717 ;; Hardware stack levels used: 1
  6718 ;; Hardware stack levels required when called: 2
  6719 ;; This function calls:
  6720 ;;		_I2C_2_Master_Idle
  6721 ;; This function is called by:
  6722 ;;		_color_writetoaddr
  6723 ;;		_color_read_Luminosity
  6724 ;;		_color_read_Red
  6725 ;;		_color_read_Green
  6726 ;;		_color_read_Blue
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730                           	psect	text41
  6731   002D1A                     __ptext41:
  6732                           	callstack 0
  6733   002D1A                     _I2C_2_Master_Stop:
  6734                           	callstack 26
  6735   002D1A                     
  6736                           ;../i2c.c: 41:   I2C_2_Master_Idle();
  6737   002D1A  EC15  F016         	call	_I2C_2_Master_Idle	;wreg free
  6738   002D1E                     
  6739                           ;../i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6740   002D1E  010E               	movlb	14	; () banked
  6741   002D20  85DA               	bsf	218,2,b	;volatile
  6742   002D22                     
  6743                           ; BSR set to: 14
  6744   002D22  0012               	return		;funcret
  6745   002D24                     __end_of_I2C_2_Master_Stop:
  6746                           	callstack 0
  6747                           
  6748 ;; *************** function _I2C_2_Master_Start *****************
  6749 ;; Defined at:
  6750 ;;		line 27 in file "../i2c.c"
  6751 ;; Parameters:    Size  Location     Type
  6752 ;;		None
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;		None
  6755 ;; Return value:  Size  Location     Type
  6756 ;;                  1    wreg      void 
  6757 ;; Registers used:
  6758 ;;		wreg, status,2, status,0, cstack
  6759 ;; Tracked objects:
  6760 ;;		On entry : 0/0
  6761 ;;		On exit  : 0/0
  6762 ;;		Unchanged: 0/0
  6763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6768 ;;Total ram usage:        0 bytes
  6769 ;; Hardware stack levels used: 1
  6770 ;; Hardware stack levels required when called: 2
  6771 ;; This function calls:
  6772 ;;		_I2C_2_Master_Idle
  6773 ;; This function is called by:
  6774 ;;		_color_writetoaddr
  6775 ;;		_color_read_Luminosity
  6776 ;;		_color_read_Red
  6777 ;;		_color_read_Green
  6778 ;;		_color_read_Blue
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           	psect	text42
  6783   002D24                     __ptext42:
  6784                           	callstack 0
  6785   002D24                     _I2C_2_Master_Start:
  6786                           	callstack 26
  6787   002D24                     
  6788                           ;../i2c.c: 29:   I2C_2_Master_Idle();
  6789   002D24  EC15  F016         	call	_I2C_2_Master_Idle	;wreg free
  6790   002D28                     
  6791                           ;../i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6792   002D28  010E               	movlb	14	; () banked
  6793   002D2A  81DA               	bsf	218,0,b	;volatile
  6794   002D2C                     
  6795                           ; BSR set to: 14
  6796   002D2C  0012               	return		;funcret
  6797   002D2E                     __end_of_I2C_2_Master_Start:
  6798                           	callstack 0
  6799                           
  6800 ;; *************** function _I2C_2_Master_Idle *****************
  6801 ;; Defined at:
  6802 ;;		line 22 in file "../i2c.c"
  6803 ;; Parameters:    Size  Location     Type
  6804 ;;		None
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;		None
  6807 ;; Return value:  Size  Location     Type
  6808 ;;                  1    wreg      void 
  6809 ;; Registers used:
  6810 ;;		wreg, status,2, status,0
  6811 ;; Tracked objects:
  6812 ;;		On entry : 0/0
  6813 ;;		On exit  : 0/0
  6814 ;;		Unchanged: 0/0
  6815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6818 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6819 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6820 ;;Total ram usage:        1 bytes
  6821 ;; Hardware stack levels used: 1
  6822 ;; Hardware stack levels required when called: 1
  6823 ;; This function calls:
  6824 ;;		Nothing
  6825 ;; This function is called by:
  6826 ;;		_I2C_2_Master_Start
  6827 ;;		_I2C_2_Master_RepStart
  6828 ;;		_I2C_2_Master_Stop
  6829 ;;		_I2C_2_Master_Write
  6830 ;;		_I2C_2_Master_Read
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           	psect	text43
  6835   002C2A                     __ptext43:
  6836                           	callstack 0
  6837   002C2A                     _I2C_2_Master_Idle:
  6838                           	callstack 26
  6839   002C2A                     l101:
  6840   002C2A  010E               	movlb	14	; () banked
  6841   002C2C  B5D8               	btfsc	216,2,b	;volatile
  6842   002C2E  EF1B  F016         	goto	u1071
  6843   002C32  EF1D  F016         	goto	u1070
  6844   002C36                     u1071:
  6845   002C36  EF15  F016         	goto	l101
  6846   002C3A                     u1070:
  6847   002C3A                     
  6848                           ; BSR set to: 14
  6849   002C3A  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6850   002C3E  0E1F               	movlw	31
  6851   002C40  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  6852   002C42  A4D8               	btfss	status,2,c
  6853   002C44  EF26  F016         	goto	u1081
  6854   002C48  EF28  F016         	goto	u1080
  6855   002C4C                     u1081:
  6856   002C4C  EF15  F016         	goto	l101
  6857   002C50                     u1080:
  6858   002C50                     
  6859                           ; BSR set to: 14
  6860   002C50  0012               	return		;funcret
  6861   002C52                     __end_of_I2C_2_Master_Idle:
  6862                           	callstack 0
  6863                           
  6864 ;; *************** function _I2C_2_Master_Init *****************
  6865 ;; Defined at:
  6866 ;;		line 4 in file "../i2c.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  1    wreg      void 
  6873 ;; Registers used:
  6874 ;;		wreg, status,2
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6884 ;;Total ram usage:        0 bytes
  6885 ;; Hardware stack levels used: 1
  6886 ;; Hardware stack levels required when called: 1
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_color_click_init
  6891 ;;		_main
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895                           	psect	text44
  6896   002C00                     __ptext44:
  6897                           	callstack 0
  6898   002C00                     _I2C_2_Master_Init:
  6899                           	callstack 28
  6900   002C00                     
  6901                           ;../i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6902   002C00  010E               	movlb	14	; () banked
  6903   002C02  51D9               	movf	217,w,b	;volatile
  6904   002C04  0BF0               	andlw	-16
  6905   002C06  0908               	iorlw	8
  6906   002C08  6FD9               	movwf	217,b	;volatile
  6907   002C0A                     
  6908                           ; BSR set to: 14
  6909                           ;../i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6910   002C0A  8BD9               	bsf	217,5,b	;volatile
  6911                           
  6912                           ;../i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6913   002C0C  0E9F               	movlw	159
  6914   002C0E  6FD6               	movwf	214,b	;volatile
  6915   002C10                     
  6916                           ; BSR set to: 14
  6917                           ;../i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6918   002C10  8A84               	bsf	132,5,c	;volatile
  6919   002C12                     
  6920                           ; BSR set to: 14
  6921                           ;../i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6922   002C12  8C84               	bsf	132,6,c	;volatile
  6923   002C14                     
  6924                           ; BSR set to: 14
  6925                           ;../i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6926   002C14  9BA7               	bcf	167,5,b	;volatile
  6927   002C16                     
  6928                           ; BSR set to: 14
  6929                           ;../i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6930   002C16  9DA7               	bcf	167,6,b	;volatile
  6931                           
  6932                           ;../i2c.c: 16:   SSP2DATPPS=0x1D;
  6933   002C18  0E1D               	movlw	29
  6934   002C1A  6F1D               	movwf	29,b	;volatile
  6935                           
  6936                           ;../i2c.c: 17:   SSP2CLKPPS=0x1E;
  6937   002C1C  0E1E               	movlw	30
  6938   002C1E  6F1C               	movwf	28,b	;volatile
  6939                           
  6940                           ;../i2c.c: 18:   RD5PPS=0x1C;
  6941   002C20  0E1C               	movlw	28
  6942   002C22  6F6F               	movwf	111,b	;volatile
  6943                           
  6944                           ;../i2c.c: 19:   RD6PPS=0x1B;
  6945   002C24  0E1B               	movlw	27
  6946   002C26  6F70               	movwf	112,b	;volatile
  6947   002C28                     
  6948                           ; BSR set to: 14
  6949   002C28  0012               	return		;funcret
  6950   002C2A                     __end_of_I2C_2_Master_Init:
  6951                           	callstack 0
  6952                           
  6953 ;; *************** function _Timer0_init *****************
  6954 ;; Defined at:
  6955 ;;		line 62 in file "../rc_servo.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;		None
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;		None
  6960 ;; Return value:  Size  Location     Type
  6961 ;;                  1    wreg      void 
  6962 ;; Registers used:
  6963 ;;		wreg, status,2
  6964 ;; Tracked objects:
  6965 ;;		On entry : 0/0
  6966 ;;		On exit  : 0/0
  6967 ;;		Unchanged: 0/0
  6968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6973 ;;Total ram usage:        0 bytes
  6974 ;; Hardware stack levels used: 1
  6975 ;; Hardware stack levels required when called: 1
  6976 ;; This function calls:
  6977 ;;		Nothing
  6978 ;; This function is called by:
  6979 ;;		_main
  6980 ;; This function uses a non-reentrant model
  6981 ;;
  6982                           
  6983                           	psect	text45
  6984   002C98                     __ptext45:
  6985                           	callstack 0
  6986   002C98                     _Timer0_init:
  6987                           	callstack 29
  6988   002C98                     
  6989                           ;../rc_servo.c: 64:     T0CON1bits.T0CS=0b010;
  6990   002C98  50D6               	movf	214,w,c	;volatile
  6991   002C9A  0B1F               	andlw	-225
  6992   002C9C  0940               	iorlw	64
  6993   002C9E  6ED6               	movwf	214,c	;volatile
  6994   002CA0                     
  6995                           ;../rc_servo.c: 65:     T0CON1bits.T0ASYNC=1;
  6996   002CA0  88D6               	bsf	214,4,c	;volatile
  6997                           
  6998                           ;../rc_servo.c: 66:     T0CON1bits.T0CKPS=0b0111;
  6999   002CA2  50D6               	movf	214,w,c	;volatile
  7000   002CA4  0BF0               	andlw	-16
  7001   002CA6  0907               	iorlw	7
  7002   002CA8  6ED6               	movwf	214,c	;volatile
  7003   002CAA                     
  7004                           ;../rc_servo.c: 68:     T0CON0bits.T016BIT=1;
  7005   002CAA  88D5               	bsf	213,4,c	;volatile
  7006                           
  7007                           ;../rc_servo.c: 71:     TMR0H=(65535-2500)>>8;
  7008   002CAC  0EF6               	movlw	246
  7009   002CAE  6ED4               	movwf	212,c	;volatile
  7010                           
  7011                           ;../rc_servo.c: 72:     TMR0L=(unsigned char)(65535-2500);
  7012   002CB0  0E3B               	movlw	59
  7013   002CB2  6ED3               	movwf	211,c	;volatile
  7014   002CB4                     
  7015                           ;../rc_servo.c: 73:     T0CON0bits.T0EN=1;
  7016   002CB4  8ED5               	bsf	213,7,c	;volatile
  7017   002CB6  0012               	return		;funcret
  7018   002CB8                     __end_of_Timer0_init:
  7019                           	callstack 0
  7020                           
  7021 ;; *************** function _Interrupts_init *****************
  7022 ;; Defined at:
  7023 ;;		line 8 in file "../rc_servo.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;		None
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;		None
  7028 ;; Return value:  Size  Location     Type
  7029 ;;                  1    wreg      void 
  7030 ;; Registers used:
  7031 ;;		None
  7032 ;; Tracked objects:
  7033 ;;		On entry : 0/0
  7034 ;;		On exit  : 0/0
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7041 ;;Total ram usage:        0 bytes
  7042 ;; Hardware stack levels used: 1
  7043 ;; Hardware stack levels required when called: 1
  7044 ;; This function calls:
  7045 ;;		Nothing
  7046 ;; This function is called by:
  7047 ;;		_main
  7048 ;; This function uses a non-reentrant model
  7049 ;;
  7050                           
  7051                           	psect	text46
  7052   002CEE                     __ptext46:
  7053                           	callstack 0
  7054   002CEE                     _Interrupts_init:
  7055                           	callstack 29
  7056   002CEE                     
  7057                           ;../rc_servo.c: 12:     INTCONbits.IPEN = 1;
  7058   002CEE  8AF2               	bsf	242,5,c	;volatile
  7059                           
  7060                           ;../rc_servo.c: 13:     INTCONbits.PEIE = 1;
  7061   002CF0  8CF2               	bsf	242,6,c	;volatile
  7062                           
  7063                           ;../rc_servo.c: 16:     PIE0bits.TMR0IE = 1;
  7064   002CF2  010E               	movlb	14	; () banked
  7065   002CF4  8B29               	bsf	41,5,b	;volatile
  7066                           
  7067                           ;../rc_servo.c: 17:     IPR0bits.TMR0IP = 1;
  7068   002CF6  8B1F               	bsf	31,5,b	;volatile
  7069                           
  7070                           ;../rc_servo.c: 18:     PIR0bits.TMR0IF = 0;
  7071   002CF8  9B33               	bcf	51,5,b	;volatile
  7072                           
  7073                           ;../rc_servo.c: 20:     PIE2bits.C1IE=1;
  7074   002CFA  812B               	bsf	43,0,b	;volatile
  7075                           
  7076                           ;../rc_servo.c: 21:     IPR2bits.C1IP=0;
  7077   002CFC  9121               	bcf	33,0,b	;volatile
  7078                           
  7079                           ;../rc_servo.c: 22:     PIR2bits.C1IF=0;
  7080   002CFE  9135               	bcf	53,0,b	;volatile
  7081                           
  7082                           ;../rc_servo.c: 24:     INTCONbits.GIE = 1;
  7083   002D00  8EF2               	bsf	242,7,c	;volatile
  7084   002D02                     
  7085                           ; BSR set to: 14
  7086   002D02  0012               	return		;funcret
  7087   002D04                     __end_of_Interrupts_init:
  7088                           	callstack 0
  7089                           
  7090 ;; *************** function _HighISR *****************
  7091 ;; Defined at:
  7092 ;;		line 31 in file "../rc_servo.c"
  7093 ;; Parameters:    Size  Location     Type
  7094 ;;		None
  7095 ;; Auto vars:     Size  Location     Type
  7096 ;;		None
  7097 ;; Return value:  Size  Location     Type
  7098 ;;                  1    wreg      void 
  7099 ;; Registers used:
  7100 ;;		wreg, status,2, status,0
  7101 ;; Tracked objects:
  7102 ;;		On entry : 0/0
  7103 ;;		On exit  : 0/0
  7104 ;;		Unchanged: 0/0
  7105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7110 ;;Total ram usage:        0 bytes
  7111 ;; Hardware stack levels used: 1
  7112 ;; This function calls:
  7113 ;;		Nothing
  7114 ;; This function is called by:
  7115 ;;		Interrupt level 2
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           	psect	intcode
  7120   000008                     __pintcode:
  7121                           	callstack 0
  7122   000008                     _HighISR:
  7123                           	callstack 22
  7124                           
  7125                           ; BSR set to: 14
  7126                           ;incstack = 0
  7127   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7128   00000A                     
  7129                           ;../rc_servo.c: 33:     if(PIR0bits.TMR0IF||!PORTFbits.RF2){
  7130   00000A  010E               	movlb	14	; () banked
  7131   00000C  BB33               	btfsc	51,5,b	;volatile
  7132   00000E  EF0B  F000         	goto	i2u168_41
  7133   000012  EF0D  F000         	goto	i2u168_40
  7134   000016                     i2u168_41:
  7135   000016  EF14  F000         	goto	i2l3177
  7136   00001A                     i2u168_40:
  7137   00001A                     
  7138                           ; BSR set to: 14
  7139   00001A  B48E               	btfsc	142,2,c	;volatile
  7140   00001C  EF12  F000         	goto	i2u169_41
  7141   000020  EF14  F000         	goto	i2u169_40
  7142   000024                     i2u169_41:
  7143   000024  EF1D  F000         	goto	i2l376
  7144   000028                     i2u169_40:
  7145   000028                     i2l3177:
  7146                           
  7147                           ; BSR set to: 14
  7148                           ;../rc_servo.c: 36:         time++;
  7149   000028  0101               	movlb	1	; () banked
  7150   00002A  4BF4               	infsnz	_time& (0+255),f,b
  7151   00002C  2BF5               	incf	(_time+1)& (0+255),f,b
  7152   00002E                     
  7153                           ; BSR set to: 1
  7154                           ;../rc_servo.c: 39:         TMR0L = 0b11011011;
  7155   00002E  0EDB               	movlw	219
  7156   000030  6ED3               	movwf	211,c	;volatile
  7157   000032                     
  7158                           ; BSR set to: 1
  7159                           ;../rc_servo.c: 40:         TMR0H = 0b00001011;
  7160   000032  0E0B               	movlw	11
  7161   000034  6ED4               	movwf	212,c	;volatile
  7162   000036                     
  7163                           ; BSR set to: 1
  7164                           ;../rc_servo.c: 42:         PIR0bits.TMR0IF=0;
  7165   000036  010E               	movlb	14	; () banked
  7166   000038  9B33               	bcf	51,5,b	;volatile
  7167   00003A                     i2l376:
  7168                           
  7169                           ; BSR set to: 14
  7170   00003A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7171   00003C  0011               	retfie		f
  7172   00003E                     __end_of_HighISR:
  7173                           	callstack 0
  7174                           
  7175                           	psect	rparam
  7176   000000                     
  7177                           	psect	temp
  7178   00005F                     btemp:
  7179                           	callstack 0
  7180   00005F                     	ds	1
  7181   000000                     int$flags	set	btemp
  7182   000000                     wtemp8	set	btemp+1
  7183   000000                     ttemp5	set	btemp+1
  7184   000000                     ttemp6	set	btemp+4
  7185   000000                     ttemp7	set	btemp+8
  7186                           
  7187                           	psect	idloc
  7188                           
  7189                           ;Config register IDLOC0 @ 0x200000
  7190                           ;	unspecified, using default values
  7191   200000                     	org	2097152
  7192   200000  0FFF               	dw	4095
  7193                           
  7194                           ;Config register IDLOC1 @ 0x200002
  7195                           ;	unspecified, using default values
  7196   200002                     	org	2097154
  7197   200002  0FFF               	dw	4095
  7198                           
  7199                           ;Config register IDLOC2 @ 0x200004
  7200                           ;	unspecified, using default values
  7201   200004                     	org	2097156
  7202   200004  0FFF               	dw	4095
  7203                           
  7204                           ;Config register IDLOC3 @ 0x200006
  7205                           ;	unspecified, using default values
  7206   200006                     	org	2097158
  7207   200006  0FFF               	dw	4095
  7208                           
  7209                           ;Config register IDLOC4 @ 0x200008
  7210                           ;	unspecified, using default values
  7211   200008                     	org	2097160
  7212   200008  0FFF               	dw	4095
  7213                           
  7214                           ;Config register IDLOC5 @ 0x20000A
  7215                           ;	unspecified, using default values
  7216   20000A                     	org	2097162
  7217   20000A  0FFF               	dw	4095
  7218                           
  7219                           ;Config register IDLOC6 @ 0x20000C
  7220                           ;	unspecified, using default values
  7221   20000C                     	org	2097164
  7222   20000C  0FFF               	dw	4095
  7223                           
  7224                           ;Config register IDLOC7 @ 0x20000E
  7225                           ;	unspecified, using default values
  7226   20000E                     	org	2097166
  7227   20000E  0FFF               	dw	4095
  7228                           
  7229                           	psect	config
  7230                           
  7231                           ;Config register CONFIG1L @ 0x300000
  7232                           ;	External Oscillator mode Selection bits
  7233                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7234                           ;	Power-up default value for COSC bits
  7235                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7236   300000                     	org	3145728
  7237   300000  AA                 	db	170
  7238                           
  7239                           ;Config register CONFIG1H @ 0x300001
  7240                           ;	unspecified, using default values
  7241                           ;	Clock Out Enable bit
  7242                           ;	CLKOUTEN = 0x1, unprogrammed default
  7243                           ;	Clock Switch Enable bit
  7244                           ;	CSWEN = 0x1, unprogrammed default
  7245                           ;	Fail-Safe Clock Monitor Enable bit
  7246                           ;	FCMEN = 0x1, unprogrammed default
  7247   300001                     	org	3145729
  7248   300001  FF                 	db	255
  7249                           
  7250                           ;Config register CONFIG2L @ 0x300002
  7251                           ;	unspecified, using default values
  7252                           ;	Master Clear Enable bit
  7253                           ;	MCLRE = 0x1, unprogrammed default
  7254                           ;	Power-up Timer Enable bit
  7255                           ;	PWRTE = 0x1, unprogrammed default
  7256                           ;	Low-power BOR enable bit
  7257                           ;	LPBOREN = 0x1, unprogrammed default
  7258                           ;	Brown-out Reset Enable bits
  7259                           ;	BOREN = 0x3, unprogrammed default
  7260   300002                     	org	3145730
  7261   300002  FF                 	db	255
  7262                           
  7263                           ;Config register CONFIG2H @ 0x300003
  7264                           ;	unspecified, using default values
  7265                           ;	Brown Out Reset Voltage selection bits
  7266                           ;	BORV = 0x3, unprogrammed default
  7267                           ;	ZCD Disable bit
  7268                           ;	ZCD = 0x1, unprogrammed default
  7269                           ;	PPSLOCK bit One-Way Set Enable bit
  7270                           ;	PPS1WAY = 0x1, unprogrammed default
  7271                           ;	Stack Full/Underflow Reset Enable bit
  7272                           ;	STVREN = 0x1, unprogrammed default
  7273                           ;	Debugger Enable bit
  7274                           ;	DEBUG = 0x1, unprogrammed default
  7275                           ;	Extended Instruction Set Enable bit
  7276                           ;	XINST = 0x1, unprogrammed default
  7277   300003                     	org	3145731
  7278   300003  FF                 	db	255
  7279                           
  7280                           ;Config register CONFIG3L @ 0x300004
  7281                           ;	WDT Period Select bits
  7282                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7283                           ;	WDT operating mode
  7284                           ;	WDTE = OFF, WDT Disabled
  7285   300004                     	org	3145732
  7286   300004  9F                 	db	159
  7287                           
  7288                           ;Config register CONFIG3H @ 0x300005
  7289                           ;	unspecified, using default values
  7290                           ;	WDT Window Select bits
  7291                           ;	WDTCWS = 0x7, unprogrammed default
  7292                           ;	WDT input clock selector
  7293                           ;	WDTCCS = 0x7, unprogrammed default
  7294   300005                     	org	3145733
  7295   300005  FF                 	db	255
  7296                           
  7297                           ;Config register CONFIG4L @ 0x300006
  7298                           ;	unspecified, using default values
  7299                           ;	Write Protection Block 0
  7300                           ;	WRT0 = 0x1, unprogrammed default
  7301                           ;	Write Protection Block 1
  7302                           ;	WRT1 = 0x1, unprogrammed default
  7303                           ;	Write Protection Block 2
  7304                           ;	WRT2 = 0x1, unprogrammed default
  7305                           ;	Write Protection Block 3
  7306                           ;	WRT3 = 0x1, unprogrammed default
  7307                           ;	Write Protection Block 3
  7308                           ;	WRT4 = 0x1, unprogrammed default
  7309                           ;	Write Protection Block 3
  7310                           ;	WRT5 = 0x1, unprogrammed default
  7311                           ;	Write Protection Block 3
  7312                           ;	WRT6 = 0x1, unprogrammed default
  7313                           ;	Write Protection Block 3
  7314                           ;	WRT7 = 0x1, unprogrammed default
  7315   300006                     	org	3145734
  7316   300006  FF                 	db	255
  7317                           
  7318                           ;Config register CONFIG4H @ 0x300007
  7319                           ;	unspecified, using default values
  7320                           ;	Configuration Register Write Protection bit
  7321                           ;	WRTC = 0x1, unprogrammed default
  7322                           ;	Boot Block Write Protection bit
  7323                           ;	WRTB = 0x1, unprogrammed default
  7324                           ;	Data EEPROM Write Protection bit
  7325                           ;	WRTD = 0x1, unprogrammed default
  7326                           ;	Scanner Enable bit
  7327                           ;	SCANE = 0x1, unprogrammed default
  7328                           ;	Low Voltage Programming Enable bit
  7329                           ;	LVP = 0x1, unprogrammed default
  7330   300007                     	org	3145735
  7331   300007  FF                 	db	255
  7332                           
  7333                           ;Config register CONFIG5L @ 0x300008
  7334                           ;	unspecified, using default values
  7335                           ;	UserNVM Program Memory Code Protection bit
  7336                           ;	CP = 0x1, unprogrammed default
  7337                           ;	DataNVM Memory Code Protection bit
  7338                           ;	CPD = 0x1, unprogrammed default
  7339   300008                     	org	3145736
  7340   300008  FF                 	db	255
  7341                           
  7342                           ;Config register CONFIG5H @ 0x300009
  7343                           ;	unspecified, using default values
  7344   300009                     	org	3145737
  7345   300009  FF                 	db	255
  7346                           
  7347                           ;Config register CONFIG6L @ 0x30000A
  7348                           ;	unspecified, using default values
  7349                           ;	Table Read Protection Block 0
  7350                           ;	EBTR0 = 0x1, unprogrammed default
  7351                           ;	Table Read Protection Block 1
  7352                           ;	EBTR1 = 0x1, unprogrammed default
  7353                           ;	Table Read Protection Block 2
  7354                           ;	EBTR2 = 0x1, unprogrammed default
  7355                           ;	Table Read Protection Block 3
  7356                           ;	EBTR3 = 0x1, unprogrammed default
  7357                           ;	Table Read Protection Block 4
  7358                           ;	EBTR4 = 0x1, unprogrammed default
  7359                           ;	Table Read Protection Block 5
  7360                           ;	EBTR5 = 0x1, unprogrammed default
  7361                           ;	Table Read Protection Block 6
  7362                           ;	EBTR6 = 0x1, unprogrammed default
  7363                           ;	Table Read Protection Block 7
  7364                           ;	EBTR7 = 0x1, unprogrammed default
  7365   30000A                     	org	3145738
  7366   30000A  FF                 	db	255
  7367                           
  7368                           ;Config register CONFIG6H @ 0x30000B
  7369                           ;	unspecified, using default values
  7370                           ;	Boot Block Table Read Protection bit
  7371                           ;	EBTRB = 0x1, unprogrammed default
  7372   30000B                     	org	3145739
  7373   30000B  FF                 	db	255
  7374                           tosu	equ	0xFFF
  7375                           tosh	equ	0xFFE
  7376                           tosl	equ	0xFFD
  7377                           stkptr	equ	0xFFC
  7378                           pclatu	equ	0xFFB
  7379                           pclath	equ	0xFFA
  7380                           pcl	equ	0xFF9
  7381                           tblptru	equ	0xFF8
  7382                           tblptrh	equ	0xFF7
  7383                           tblptrl	equ	0xFF6
  7384                           tablat	equ	0xFF5
  7385                           prodh	equ	0xFF4
  7386                           prodl	equ	0xFF3
  7387                           indf0	equ	0xFEF
  7388                           postinc0	equ	0xFEE
  7389                           postdec0	equ	0xFED
  7390                           preinc0	equ	0xFEC
  7391                           plusw0	equ	0xFEB
  7392                           fsr0h	equ	0xFEA
  7393                           fsr0l	equ	0xFE9
  7394                           wreg	equ	0xFE8
  7395                           indf1	equ	0xFE7
  7396                           postinc1	equ	0xFE6
  7397                           postdec1	equ	0xFE5
  7398                           preinc1	equ	0xFE4
  7399                           plusw1	equ	0xFE3
  7400                           fsr1h	equ	0xFE2
  7401                           fsr1l	equ	0xFE1
  7402                           bsr	equ	0xFE0
  7403                           indf2	equ	0xFDF
  7404                           postinc2	equ	0xFDE
  7405                           postdec2	equ	0xFDD
  7406                           preinc2	equ	0xFDC
  7407                           plusw2	equ	0xFDB
  7408                           fsr2h	equ	0xFDA
  7409                           fsr2l	equ	0xFD9
  7410                           status	equ	0xFD8

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     92      94
    BANK0           160    159     160
    BANK1           256    240     252
    BANK2           256      0     112
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2389$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2336$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2336$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    motor_action@r	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_action@l	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    spin_180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    spin_180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_onesquare@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_onesquare@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_fromcard@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_fromcard@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    S589DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    S589DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    color_processor_hard@calibrated	PTR unsigned int  size(2) Largest target is 64
		 -> main@color_calibrated(BANK1[64]), 

    color_processor_hard@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_processor_easy@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_read@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), main@RGB_calibrated(BANK1[8]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _motor_action->_left_135
    _motor_action->_left_90
    _motor_action->_reverse_fromcard
    _motor_action->_reverse_onesquare
    _motor_action->_right_135
    _motor_action->_right_90
    _motor_action->_spin_180
    _stop->_setMotorPWM
    _spin_180->_setMotorPWM
    _right_90->_setMotorPWM
    _right_135->_setMotorPWM
    _reverse_onesquare->_setMotorPWM
    _reverse_fromcard->_setMotorPWM
    _left_90->_setMotorPWM
    _left_135->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _color_read->_color_read_Blue
    _color_read->_color_read_Green
    _color_read->_color_read_Luminosity
    _color_read->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Luminosity->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               385   385      0   55828
                                             88 COMRAM     4     4      0
                                             27 BANK0    132   132      0
                                              0 BANK1    240   240      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
               _color_processor_easy
               _color_processor_hard
                         _color_read
                            _forward
                    _initDCmotorsPWM
                         _initUSART4
                       _motor_action
                  _sendStringSerial4
                        _setMotorPWM
                           _spin_180
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    5722
                                              0 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5219
                                             80 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    4869
                                             62 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3649
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     219
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _motor_action                                         8     2      6   30862
                                             33 COMRAM     8     2      6
                           _left_135
                            _left_90
                   _reverse_fromcard
                  _reverse_onesquare
                          _right_135
                           _right_90
                           _spin_180
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 7     3      4    5075
                                             25 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _spin_180                                             8     4      4    3403
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_90                                             8     4      4    3555
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_135                                            8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_onesquare                                    8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_fromcard                                     8     4      4    4163
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_90                                              8     4      4    3555
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_135                                             8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                              6     2      4    3555
                                             25 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    2703
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read                                           4     2      2     768
                                             11 COMRAM     4     2      2
                    _color_read_Blue
                   _color_read_Green
              _color_read_Luminosity
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Luminosity                                7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_processor_hard                                26    22      4     829
                                              0 COMRAM    21    17      4
 ---------------------------------------------------------------------------------
 (1) _color_processor_easy                                10     8      2     346
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_processor_easy
   _color_processor_hard
   _color_read
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Luminosity
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _motor_action
     _left_135
       _setMotorPWM
     _left_90
       _setMotorPWM
     _reverse_fromcard
       _setMotorPWM
     _reverse_onesquare
       _setMotorPWM
     _right_135
       _setMotorPWM
     _right_90
       _setMotorPWM
     _spin_180
       _setMotorPWM
     _stop
       _setMotorPWM
   _sendStringSerial4
     _sendCharSerial4
   _setMotorPWM
   _spin_180
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
   _stop

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      60        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      70       9       43.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     F0      FC       7       98.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      A0       5      100.0%
BITBIGSFRllllhh     91      0       0      40        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5C      5E       1      100.0%
BITBIGSFRllllll     32      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      49        0.0%
BITBIGSFRllllll     26      0       0      58        0.0%
BITBIGSFRllllhl     20      0       0      43        0.0%
BITBIGSFRhhlhhh     1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      35        0.0%
BITBIGSFRhhlhl      13      0       0      34        0.0%
BITBIGSFRhllh       11      0       0      37        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      44        0.0%
BITBIGSFRllllhh      8      0       0      41        0.0%
BITBIGSFRllllll      7      0       0      54        0.0%
BITBIGSFRllllll      7      0       0      52        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRllllll      6      0       0      48        0.0%
BITBIGSFRllllll      5      0       0      47        0.0%
BITBIGSFRhlll        5      0       0      38        0.0%
BITBIGSFRllllll      3      0       0      46        0.0%
BITBIGSFRllh         2      0       0      39        0.0%
BITBIGSFRllllll      1      0       0      50        0.0%
BITBIGSFRllllll      1      0       0      51        0.0%
BITBIGSFRllllll      1      0       0      55        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      56        0.0%
BITBIGSFRllllhl      1      0       0      42        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26A      59        0.0%
DATA                 0      0     26A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Dec 10 22:32:41 2022

                _color_read_Red 295E                 _color_read_Blue 2A4E                              l33 28B8  
                            l42 29AC                              l51 225A                              l36 2C96  
                            l45 2A4C                              l70 1CA6                              l39 29FC  
                            l64 1C06                              l48 2A9C                              l58 21B4  
                            l66 1C52                              l68 1C9E                              l98 2C28  
                  ___awdiv@sign 000C             ___wmul@multiplicand 0003                _color_read_Green 29FE  
             ??_Interrupts_init 0001                             l101 2C2A                             l110 2D18  
                           l104 2C50                             l200 1050                             l113 2D22  
                           l201 1064                             l210 1260                             l107 2D2C  
                           l116 2D0E                             l119 2B64                             l304 24E6  
                           l322 17E4                             l420 2CD4                             l309 26CC  
                           l264 19B8                             l432 2CEC                             l441 2C76  
                           l257 2B22                             l193 0E96                             l274 27E4  
                           l284 2588                             l269 275A                             l429 2CD8  
                           l294 23A2                             l438 2BD4                             l279 262A  
                           l368 2D02                             l289 22FE                             l379 2CB6  
                           l299 2444                             l555 1B40                             l672 20F6  
                           l568 1E0A               motor_action@color 0022                             u900 2AE0  
                           u901 2ADC                             u910 19CC                             u911 19C8  
                           u920 19FE                             u921 19FA                             u931 1A28  
                           u940 1A4C                             u860 1F7C                             u941 1A48  
                           u861 1F78                             u950 1A76                             u870 1F8E  
                           u951 1A72                             u871 1F8A                             u960 1AB6  
                           u880 1FB6                             u961 1AB2                             u881 1FB2  
                           u970 1B00                             u890 1FEC                             u971 1AFC  
                           u891 1FE8                             u980 1CBA                             u981 1CB6  
                           u990 1CEC                             u991 1CE8                             _abs 2B66  
                           _pad 27E6                             wreg 000FE8                            ?_abs 0013  
                          l1204 2AE0                            l1141 2808                            l1150 13A6  
                          l1207 2D2E                            l1119 290A                            l1152 13AE  
                          l1145 285E                            l1153 13F4                            l3001 0E34  
                          l1171 1F68                            l3011 0E52                            l3003 0E3A  
                          l1164 1596                            l2301 1D82                            l1181 2B9C  
                          l2221 1FB6                            l2213 1F6A                            l3101 11F4  
                          l3021 0E7E                            l3013 0E5A                            l3005 0E3E  
                          l2311 1DEA                            l2303 1DA2                            l2223 1FEC  
                          l2215 1F7C                            l2231 2ABC                            l3103 120C  
                          l3031 0EAE                            l3023 0E8A                            l3015 0E5E  
                          l3007 0E46                            l1184 2BA4                            l2241 19EC  
                          l2305 1DB4                            l2217 1F8E                            l2233 2AC0  
                          l2321 2814                            l2401 13C6                            l1177 295C  
                          l3121 12C8                            l3113 1262                            l3105 1222  
                          l3041 0F8A                            l3033 0EBA                            l3025 0EA4  
                          l3017 0E72                            l3009 0E4E                            l2251 1A2E  
                          l2243 19F0                            l2235 19BA                            l2307 1DBA  
                          l2331 2B80                            l2219 1F98                            l2227 2A9E  
                          l2323 2828                            l2315 27E6                            l2411 13FC  
                          l2403 13CC                            l3123 12CE                            l3115 126A  
                          l3107 1236                            l3051 0FE8                            l3043 0F8C  
                          l3035 0EE8                            l3019 0E76                            l1196 2032  
                          l2333 2C2A                            l2261 1A88                            l2253 1A4C  
                          l2245 19FE                            l2237 19BE                            l2309 1DCA  
                          l2229 2AAA                            l2325 282C                            l2317 27F4  
                          l2421 149A                            l2413 1406                            l2405 13DC  
                          l3125 12F8                            l3117 1298                            l3109 1240  
                          l3061 106A                            l3053 1000                            l3045 0FC2  
                          l3037 0F1E                            l2335 2C3A                            l2351 2052  
                          l2343 2034                            l3207 17A6                            l2263 1AB6  
                          l2255 1A54                            l2271 1AF0                            l2247 1A1E  
                          l2239 19CC                            l2327 284A                            l2319 2800  
                          l2431 1560                            l2415 140C                            l2423 14FE  
                          l2407 13E8                            l2503 1F2A                            l3127 130C  
                          l3119 12B0                            l3071 10C6                            l3063 1072  
                          l3055 1006                            l3047 0FCE                            l3039 0F54  
                          l2521 2C14                            l2513 2C00                            l2441 2D28  
                          l2361 2086                            l2353 2060                            l2345 2038  
                          l2337 2C52                            l2273 1B00                            l2265 1AD6  
                          l2257 1A68                            l2249 1A22                            l2281 1CAC  
                          l2329 2B66                            l2433 1566                            l2425 1518  
                          l2417 148E                            l2409 13F0                            l3081 110E  
                          l3073 10CE                            l3065 1086                            l3057 1022  
                          l3049 0FE6                            l2523 2C16                            l2515 2C0A  
                          l2443 2D06                            l2451 2D10                            l2371 20C0  
                          l2363 208E                            l2355 2068                            l2347 2046  
                          l2339 2C6E                            l2611 25EA                            l2603 25B2  
                          l2275 1B20                            l2267 1AD8                            l2259 1A76  
                          l2291 1D0C                            l2283 1CBA                            l2435 1576  
                          l2427 1536                            l2419 1494                            l2507 1F3C  
                          l3091 11B6                            l3083 1126                            l3075 10E0  
                          l3067 1092                            l3059 105E                            l2517 2C10  
                          l2445 2D0A                            l2525 2C7A                            l2461 2B3A  
                          l2453 2D14                            l2541 2A44                            l2533 295E  
                          l2381 20E6                            l2373 20C8                            l2365 2096  
                          l2357 206C                            l2349 204E                            l2613 25F6  
                          l2605 25CA                            l2701 2494                            l2269 1AEA  
                          l2293 1D2A                            l2285 1CDA                            l2429 1550  
                          l3093 11C2                            l3085 1142                            l3077 10F4  
                          l3069 10AA                            l2519 2C12                            l2439 2D24  
                          l2447 2D1A                            l2463 2B60                            l2455 2B26  
                          l2527 29AE                            l2535 29A4                            l2383 20EE  
                          l2375 20CA                            l2367 20A4                            l2359 2074  
                          l2471 1802                            l2711 262C                            l2615 2612  
                          l2607 25D6                            l2631 2540                            l2703 24A0  
                          l2551 26CE                            l2295 1D32                            l2287 1CDE  
                          l2279 1CA8                            l2391 134E                            l3095 11DE  
                          l3087 115E                            l3079 1100                            l2449 2D1E  
                          l2465 2B62                            l2457 2B2A                            l2545 2A4E  
                          l2529 29F4                            l2801 2212                            l2377 20D0  
                          l2369 20AA                            l2481 1950                            l2473 1864  
                          l2721 2662                            l2713 264C                            l2609 25E2  
                          l2633 2548                            l2625 2510                            l2617 24E8  
                          l2705 24A8                            l2641 227C                            l2561 270E  
                          l2553 26EE                            l2297 1D46                            l2289 1CEC  
                          l2393 135E                            l3097 11E4                            l3089 1178  
                          l2811 2160                            l2459 2B32                            l2547 2A94  
                          l2539 29FE                            l2803 222A                            l2379 20D6  
                          l2475 18AA                            l2731 269A                            l2723 266E  
                          l2635 2554                            l2627 2528                            l2619 2508  
                          l2707 24B4                            l2651 229E                            l2571 23A4  
                          l2563 271A                            l2299 1D54                            l2395 137E  
                          l2387 131A                            l2491 1E54                            l2483 1E0C  
                          l3099 11EC                            l2821 21AC                            l2813 216C  
                          l2805 20F8                            l2477 18CA                            l2469 17E6  
                          l2901 2CD0                            l2733 26B6                            l2725 267A  
                          l2637 2570                            l2629 2534                            l2709 24D0  
                          l2661 22E6                            l2653 22AA                            l2581 23D8  
                          l2573 23C4                            l2565 2726                            l2397 139A  
                          l2389 133A                            l2493 1E64                            l2485 1E34  
                          l2741 2918                            l2751 2864                            l2815 2182  
                          l2807 2134                            l2479 18E6                            l2903 2CD2  
                          l2727 2686                            l2719 2654                            l2671 2328  
                          l2663 2300                            l2655 22B6                            l2647 2284  
                          l2639 225C                            l2591 2412                            l2583 23E6  
                          l2567 2734                            l2559 26F6                            l2735 2CD8  
                          l2399 13B6                            l2495 1E84                            l2487 1E42  
                          l2743 2934                            l2911 28DC                            l2761 2894  
                          l2753 286E                            l2817 2198                            l2809 214A  
                          l2841 1C02                            l2833 1B7E                            l2825 1B42  
                          l2729 268E                            l2681 2362                            l2673 2336  
                          l2665 2320                            l2657 22BE                            l2649 2290  
                          l2593 242E                            l2585 23F2                            l2569 2740  
                          l2737 2CE8                            l2921 2BB8                            l2497 1EA4  
                          l2489 1E50                            l2745 2954                            l2913 28F8  
                          l2905 28BA                            l2771 289E                            l2763 2896  
                          l2755 287E                            l2819 21A4                            l2851 1C78  
                          l2843 1C0A                            l2835 1BBA                            l2827 1B7E  
                          l2683 236E                            l2675 2342                            l2595 258A  
                          l2659 22CA                            l2587 23FE                            l2579 23CC  
                          l2923 2BBC                            l2499 1EFA                            l2739 290C  
                          l2907 28CC                            l2781 28A8                            l2773 28A0  
                          l2765 2898                            l2757 2888                            l2749 2860  
                          l2853 1C9A                            l2845 1C2C                            l2837 1BBE  
                          l2941 27BC                            l2933 2784                            l2925 275C  
                          l2685 238A                            l2677 234E                            l2597 25AA  
                          l2589 2406                            l2917 2BA6                            l2909 28D4  
                          ?_pad 0011                            l2791 28B4                            l2783 28AA  
                          l2775 28A2                            l2767 289A                            l2759 2892  
                          l2847 1C4E                            l2839 1BE0                            l2943 27C8  
                          l2935 279C                            l2927 277C                            l2871 2AE2  
                          l2679 235A                            l2695 246E                            l2687 2446  
                          l2951 15DC                            l2919 2BAA                            l2793 28B6  
                          l2785 28AC                            l2777 28A4                            l2769 289C  
                          l2849 1C56                            l2937 27A8                            l2881 2B20  
                          l2873 2AF2                            l2697 247A                            l2689 2466  
                          l2961 165C                            l2953 15F0                            l2945 1598  
                          l2883 2CEE                            l2891 2CB4                            l2787 28AE  
                          l2779 28A6                            l2859 1C9E                            l2795 21B6  
                          l2939 27B4                            l2875 2B06                            l2699 2488  
                          l2971 16E0                            l2963 1674                            l2955 1608  
                          l2947 159C                            l2885 2C98                            l2789 28B0  
                          l2797 21CA                            l2877 2B0A                            l2893 2CB8  
                          l2973 170C                            l2965 169C                            l2957 1630  
                          l2949 15C4                            l2981 1790                            l2887 2CA0  
                          l2799 21E2                            l2879 2B1E                            l2895 2CC2  
                          l2975 1738                            l2967 16B4                            l2959 1648  
                          l2991 0E24                            l2889 2CAA                            l2897 2CC4  
                          l2977 1764                            l2969 16C8                            l2993 0E28  
                          l2899 2CCE                            l2995 0E2C                            l2987 0E14  
                          l2997 0E30                            l2989 0E18                            l2999 0E34  
                          STR_1 0E04                            STR_2 0E01                            u1000 1D2A  
                          u1001 1D26                            u1010 1D54                            u1011 1D50  
                          u1100 2060                            u1020 1D82                            u1101 205C  
                          u1021 1D7E                            u1110 2086                            u1030 1DCA  
                          u1111 2082                            u1031 1DC6                            u1120 20A4  
                          u1040 27F4                            u1200 13DC                            u1121 20A0  
                          u1041 27F0                            u1201 13D8                            u1130 20C0  
                          u1050 284A                            u1210 1518                            u1131 20BC  
                          u1051 2846                            u1211 1514                            u1140 20E6  
                          u1060 2B80                            u1220 1536                            u1141 20E2  
                          u1061 2B7C                            u1221 1532                            u1070 2C3A  
                          u1230 1550                            u1150 134A                            u1310 1E34  
                          u1071 2C36                            u1231 154C                            u1151 1344  
                          u1311 1E30                            u1080 2C50                            u1304 19AA  
                          u1400 24D0                            u1240 1560                            u1160 134C  
                          u1320 1E84                            u1081 2C4C                            u1305 19A6  
                          u1401 24CC                            u1241 155C                            u1321 1E80  
                          u1250 2B4E                            u1090 2046                            u1410 26B6  
                          u1170 135E                            u1330 1EA4                            u1251 2B46  
                          u1091 2042                            u1411 26B2                            u1171 135A  
                          u1331 1EA0                            u1500 1C2C                            u1340 275A  
                          u1420 2CE8                            u1180 139A                            u1501 1C28  
                          u1341 2756                            u1421 2CE4                            u1181 1396  
                          u1510 1C4E                            u1270 1802                            u1350 242E  
                          u1190 13C6                            u1430 2954                            u1511 1C4A  
                          u1271 17FE                            u1351 242A                            u1191 13C2  
                          u1431 2950                            u1440 214A                            u1520 1C78  
                          u1280 18E6                            u1360 2612                            u1600 105E  
                  _BAUD4CONbits 000EE9                            u1441 2146                            u1521 1C74  
                          u1281 18E2                            u1361 260E                            u1601 105A  
                          _LATE 000F7D                            u1450 2160                            u1530 1C9A  
                          u1370 2570                            u1610 10AA                            u1451 215C  
                          u1531 1C96                            u1371 256C                            u1611 10A6  
                          _LATG 000F7F                            u1460 2182                            u1268 2B50  
                          u1380 22E6                            u1540 2BD4                            u1620 10C6  
                          u1461 217E                            u1381 22E2                            u1541 2BD0  
                          u1621 10C2                            u1470 2198                            u1294 1940  
                          u1550 27E4                            u1390 238A                            u1630 10E0  
                          u1471 2194                            u1295 193C                            u1551 27E0  
                          u1391 2386                            u1631 10DC                            u1480 1BE0  
                          u1640 110E                            u1560 0EA4                            u1481 1BDC  
                          u1641 110A                            u1561 0EA0                            u1490 1C02  
                          u1650 1222                            u1570 1022                            _T2PR 000FBC  
                          u1491 1BFE                            u1651 121E                            u1571 101E  
                          u1707 0FD8                            u1660 125C                            u1580 103E  
                          u1661 1258                            u1581 1036                            u1717 0FF2  
                          u1670 12F8                            u1590 1050                            u1807 22B8  
                          u1671 12F4                            u1727 11FE                            u1591 104C  
                          u1817 22F0                            u1737 12BA                            u1907 2688  
                          u1827 24A2                            u1747 15CE                            u1588 1040  
                          u1917 26C0                            u1837 24DA                            u1757 163A  
                          u1927 27B6                            u1847 2542                            u1767 16A6  
                          u1937 21D4                            u1857 257A                            u1777 272C  
                          u1947 2204                            u1867 25E4                            u1787 2400  
                          u1957 2234                            u1877 261C                            u1797 2438  
                          u1967 2874                            u1887 235C                            u1897 2394  
                          abs@a 0013                            _dbuf 0250                            _main 0E14  
                          _dtoa 131A                            _prec 01F2                            _time 01F4  
                          pad@i 0018                            pad@p 0015                            fsr1h 000FE2  
                          fsr2h 000FDA                            indf1 000FE7                            indf2 000FDF  
                          fsr1l 000FE1                            pad@w 001A                            fsr2l 000FD9  
                          btemp 005F                            _stop 26CE                            prodh 000FF4  
                          prodl 000FF3                            start 003E          __end_of_color_read_Red 29AE  
               __end_of_HighISR 003E                    ___param_bank 000000                           ??_abs 0015  
                         ??_pad 0017        _color_processor_hard$370 0007        _color_processor_hard$372 0008  
      _color_processor_hard$374 0009                 __end_of___aodiv 1B42                           ?_main 0001  
                         ?_dtoa 001C                 __end_of___aomod 1E0C                 __end_of___awdiv 20F8  
       ??_color_read_Luminosity 0007                           ?_stop 001A                 ___awdiv@divisor 0009  
                         i2l376 003A                 ___awdiv@counter 000B                    vfpfcnvrt@fmt 0041  
                         _TMR0H 000FD4                           _TMR0L 000FD3                    main@readout2 007B  
                  main@readout3 0100         __end_of_sendCharSerial4 2CEE      __end_of_I2C_2_Master_Start 2D2E  
    __end_of_I2C_2_Master_Write 2D10                 __end_of_left_90 23A4                           _flags 01FA  
                         _fputc 1F6A                 __end_of_forward 27E6                           _fputs 2A9E  
                         pad@fp 0011                           _width 01F0                           _putch 2D2E  
                         main@i 01CC                           main@j 01C6                           main@k 01CA  
                         dtoa@d 001E                           dtoa@i 003C                           dtoa@n 0034  
                         dtoa@p 0030                           dtoa@s 003E                           dtoa@w 0032  
                         tablat 000FF5                           ttemp5 0060                           ttemp6 0063  
                         ttemp7 0067                           stop@i 001F                           status 000FD8  
                         wtemp8 0060                 __end_of_sprintf 290C         __end_of_color_read_Blue 2A9E  
         _I2C_2_Master_RepStart 2D10                 ?_color_read_Red 0005                 __initialization 2BD6  
color_processor_hard@calibrated 0003                    __end_of_main 131A                    __end_of_dtoa 1598  
                  __end_of_stop 275C                          ??_main 0059                          ??_dtoa 0026  
                        ??_stop 001E                   __activetblptr 000003                    ?_setMotorPWM 000F  
                        ?_fputc 0001                          ?_fputs 000A                ___awdiv@dividend 0007  
                        ?_putch 0001                          _RC0PPS 000E62                          _RC4REG 000EE3  
                        _RE2PPS 000E74                          _RD5PPS 000E6F                          _RC7PPS 000E69  
                        _RD6PPS 000E70                          i2l3181 0032                          i2l3173 000A  
                        i2l3183 0036                          i2l3175 001A                          i2l3177 0028  
                        i2l3179 002E                       ??_HighISR 0001        __end_of_color_click_init 28BA  
                        _RX4PPS 000E15                          _TX4REG 000EE4                   ??_Timer0_init 0001  
     color_processor_easy@color 0003                    vfprintf@cfmt 0057                __end_of_left_135 26CE  
                     ??___aodiv 0011                       ??___aomod 0011                          ___wmul 2C52  
                     ??___awdiv 000B                          clear_0 2BDC                          clear_1 2BE8  
              ___awdiv@quotient 000D                          isa$std 000001                          pad@buf 0013  
                        dtoa@fp 001C                       ??_left_90 001E                __end_of_right_90 2300  
                 main@time_path 0164                          fputc@c 0001                          fputs@c 000E  
                        fputs@i 000F                          fputs@s 000A                       ??_forward 001E  
              __end_of_spin_180 2446                    __mediumconst 0000                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                ?_sendCharSerial4 0001  
                        putch@c 0001                __end_of_vfprintf 295E                          stop@mL 001A  
                        stop@mR 001C               ??_initDCmotorsPWM 0003                       ??_sprintf 0059  
           reverse_onesquare@mL 001A             reverse_onesquare@mR 001C                      __accesstop 0060  
       __end_of__initialization 2BF6        __end_of_color_read_Green 2A4E          ?_I2C_2_Master_RepStart 0001  
                 ___rparam_used 000001                ?_color_read_Blue 0005                 _Interrupts_init 2CEE  
                __pcstackCOMRAM 0001                   color_read@rgb 000C                   __end_of_fputc 2034  
                 __end_of_fputs 2AE2                   __end_of_putch 2D30             __end_of_Timer0_init 2CB8  
                       ??_fputc 0005                         ??_fputs 000E                         ??_putch 0001  
                    __pbssBANK0 00FF                      __pbssBANK1 01F0                      __pbssBANK2 0200  
        color_processor_hard@cb 0014          color_processor_hard@cg 0012          color_processor_hard@cr 0010  
             _color_writetoaddr 2C78                    _T2CLKCONbits 000FBF              ?_color_writetoaddr 0003  
                       ?___wmul 0001                  main@color_flag 005B                  main@color_name 01C8  
                main@color_path 00DF                     right_135@mL 001A                     right_135@mR 001C  
           ??_color_writetoaddr 0004                _reverse_fromcard 258A   __end_of_color_read_Luminosity 29FE  
                       _SP4BRGH 000EE6                         _SP4BRGL 000EE5                         _PWM6DCH 000FA3  
                       _PWM7DCH 000FA0                         _SSP2ADD 000ED6                         _SSP2BUF 000ED5  
                     ?_left_135 001A                      _color_read 21B6         __end_of_Interrupts_init 2D04  
        color_writetoaddr@value 0003                ??_color_read_Red 0007                         _HighISR 0008  
     __end_of_color_writetoaddr 2C98        color_read_Luminosity@tmp 000A              _I2C_2_Master_Start 2D24  
                    _initUSART4 2CB8              _I2C_2_Master_Write 2D04                       ?_right_90 001A  
                       __Hparam 0000                         __Lparam 0000               color_read_Red@tmp 000A  
                   _Timer0_init 2C98                       ?_spin_180 001A         sendStringSerial4@string 0002  
                       ___aodiv 19BA                         ___aomod 1CA8                         ___awdiv 2034  
           ?_I2C_2_Master_Start 0001             ?_I2C_2_Master_Write 0001                      _off_period 01F6  
                     ?_vfprintf 0051                    __psmallconst 0E00                         __pcinit 2BD6  
                       __ramtop 0E00                         __ptext0 0E14                         __ptext1 28BA  
                       __ptext2 290C                         __ptext3 1E0C                         __ptext4 131A  
                       __ptext5 27E6                         __ptext6 2A9E                         __ptext7 1F6A  
                       __ptext8 2D2E                         __ptext9 2B66                         _left_90 2300  
                     _T2CONbits 000FBD                         _forward 275C                       _T2HLTbits 000FBE  
     main@lowerbound_calibrated 00FD                   ?_motor_action 0022                   _RxBufWriteCnt 005E  
                       _sprintf 28BA            ??_I2C_2_Master_Start 0002                      ??_left_135 001E  
          ??_I2C_2_Master_Write 0002            end_of_initialization 2BF6               __end_of_right_135 24E8  
            setMotorPWM@PWMduty 0018                         fputc@fp 0003                         fputs@fp 000C  
             ?_color_click_init 0001    __end_of_color_processor_easy 21B6    __end_of_color_processor_hard 1CA8  
                    ??_right_90 001E              ??_color_click_init 0005               __end_of_vfpfcnvrt 1F6A  
                    ??_spin_180 001E                         postdec1 000FE5                         postdec2 000FDD  
                       postinc0 000FEE                         postinc1 000FE6                         postinc2 000FDE  
              vfpfcnvrt@convarg 0047                      ??_vfprintf 0057                 _initDCmotorsPWM 2AE2  
                     _PORTFbits 000F8E                  ??_motor_action 0028                       _TRISCbits 000F83  
                     _TRISDbits 000F84                       _TRISEbits 000F85                       _TRISFbits 000F86  
                     _TRISGbits 000F87                       _TRISHbits 000F88              reverse_fromcard@mL 001A  
            reverse_fromcard@mR 001C                     ?_color_read 000C        color_writetoaddr@address 0004  
       ??_I2C_2_Master_RepStart 0002                ?_Interrupts_init 0001                      left_135@mL 001A  
                    left_135@mR 001C                    _EUSART4RXbuf 023C                    _EUSART4TXbuf 0200  
             ?_color_read_Green 0005                     ?_initUSART4 0001       sendCharSerial4@charToSend 0001  
                    main@motorL 01E7                      main@motorR 01DE              ??_color_read_Green 0007  
                   vfpfcnvrt@ap 0043                     vfpfcnvrt@cp 004F                     vfpfcnvrt@fp 003F  
                __end_of___wmul 2C78             start_initialization 2BD6                     __end_of_abs 2BA6  
                   __end_of_pad 2860                   _TxBufWriteCnt 00FF        __end_of_reverse_fromcard 262C  
           color_read_Green@tmp 000A         __end_of_initDCmotorsPWM 2B24                     vfprintf@fmt 0053  
                      ??___wmul 0005              reverse_onesquare@i 0020                     __pbssCOMRAM 005D  
          _color_processor_easy 20F8            _color_processor_hard 1B42                   __pcstackBANK0 0060  
                 __pcstackBANK1 0100                ___aodiv@dividend 0001              main@RGB_calibrated 01CE  
                      ?_HighISR 0001         color_processor_easy@rgb 0001         color_processor_hard@rgb 0001  
         color_processor_easy@a 0007           color_processor_easy@b 0009           color_processor_easy@c 0005  
         color_processor_hard@b 000E           color_processor_hard@g 000C           color_processor_hard@r 000A  
                     _dtoa$2417 002E            __end_of_motor_action 17E6                    ?_Timer0_init 0001  
                     __pintcode 0008                        ?___aodiv 0001                        ?___aomod 0001  
                      ?___awdiv 0007                ___aodiv@quotient 0013                      right_135@i 0020  
                    right_90@mL 001A                      right_90@mR 001C            I2C_2_Master_Read@ack 0003  
          I2C_2_Master_Read@tmp 0004                        ?_left_90 001A                     __smallconst 0E00  
                      ?_forward 001A               _I2C_2_Master_Idle 2C2A           ?_color_processor_easy 0001  
         ?_color_processor_hard 0001                main@RGB_recorded 01D6               _I2C_2_Master_Init 2C00  
             _I2C_2_Master_Read 2B24               _I2C_2_Master_Stop 2D1A                    _RxBufReadCnt 005D  
            ?_I2C_2_Master_Idle 0001              ?_I2C_2_Master_Init 0001              ?_I2C_2_Master_Read 0001  
                 ??_setMotorPWM 0011           _color_read_Luminosity 29AE              ?_I2C_2_Master_Stop 0001  
      initDCmotorsPWM@PWMperiod 0001                        ?_sprintf 0060               _sendStringSerial4 2BA6  
           ??_I2C_2_Master_Idle 0001             ??_I2C_2_Master_Init 0001             ??_I2C_2_Master_Read 0002  
                ___wmul@product 0005             ??_I2C_2_Master_Stop 0002                        _LATCbits 000F7B  
                      _LATDbits 000F7C                        _LATEbits 000F7D                        _LATFbits 000F7E  
                     _on_period 01F8                        _LATGbits 000F7F                        _LATHbits 000F80  
                     _right_135 2446                        _IPR0bits 000E1F                        _IPR2bits 000E21  
                      _PIE0bits 000E29                        _PIE2bits 000E2B              ?_sendStringSerial4 0002  
                    spin_180@mL 001A                      spin_180@mR 001C                        _PIR0bits 000E33  
                      i2u168_40 001A                        i2u168_41 0016                        i2u169_40 0028  
                      i2u169_41 0024                        _PIR2bits 000E35                        _PIR4bits 000E37  
              ?_initDCmotorsPWM 0001               ??_sendCharSerial4 0001                        _SSP2CON2 000EDA  
           ??_sendStringSerial4 0004                        _SSP2STAT 000ED8               _reverse_onesquare 24E8  
                     _vfpfcnvrt 1E0C       __end_of_I2C_2_Master_Idle 2C52              ?_reverse_onesquare 001A  
     __end_of_I2C_2_Master_Init 2C2A       __end_of_I2C_2_Master_Read 2B66               ___wmul@multiplier 0001  
             reverse_fromcard@i 0020       __end_of_I2C_2_Master_Stop 2D24                    setMotorPWM@m 000F  
   I2C_2_Master_Write@data_byte 0002                       left_135@i 0020                       left_90@mL 001A  
                     left_90@mR 001C            main@color_calibrated 0182               ??_color_read_Blue 0007  
                  _TxBufReadCnt 01FB             ??_reverse_onesquare 001E       main@upperbound_calibrated 01C2  
                  ??_color_read 000E       __end_of_sendStringSerial4 2BD6   __end_of_I2C_2_Master_RepStart 2D1A  
            color_read_Blue@tmp 000A             __end_of_setMotorPWM 19BA                      ?_right_135 001A  
                  ??_initUSART4 0001                        __Hrparam 0000                      vfprintf@ap 0055  
                      __Lrparam 0000                      vfprintf@fp 0051       __end_of_reverse_onesquare 258A  
                     forward@mL 001A                       forward@mR 001C                      ?_vfpfcnvrt 003F  
            __end_of_color_read 225C                 ___aodiv@divisor 0009                 ___aodiv@counter 0011  
                    _ANSELDbits 000EA7          ??_color_processor_easy 0003          ??_color_processor_hard 0005  
                    _ANSELFbits 000EB4                      sprintf@fmt 0062                      _T0CON0bits 000FD5  
                    _T0CON1bits 000FD6          ?_color_read_Luminosity 0005              __end_of_initUSART4 2CD6  
                      __ptext10 1CA8                        __ptext11 19BA                        __ptext20 258A  
                      __ptext12 2BA6                        __ptext21 2300                        __ptext13 2CD6  
                      __ptext30 295E                        __ptext22 262C                        __ptext14 1598  
                      __ptext31 29AE                        __ptext23 2CB8                        __ptext15 26CE  
                      __ptext40 2D04                        __ptext32 29FE                        __ptext24 2AE2  
                      __ptext16 23A4                        __ptext41 2D1A                        __ptext33 2A4E  
                      __ptext25 275C                        __ptext17 225C                        __ptext42 2D24  
                      __ptext34 2D10                        __ptext26 17E6                        __ptext18 2446  
                      __ptext43 2C2A                        __ptext35 2B24                        __ptext27 2C52  
                      __ptext19 24E8                        __ptext44 2C00                        __ptext36 1B42  
                      __ptext28 2034                        __ptext45 2C98                        __ptext37 20F8  
                      __ptext29 21B6                        __ptext46 2CEE                        __ptext38 2860  
                      __ptext39 2C78                       right_90@i 0020                        _left_135 262C  
                  _SSP2CON1bits 000ED9                    _SSP2CON2bits 000EDA                        _right_90 225C  
             ?_reverse_fromcard 001A                       spin_180@i 0020                        _spin_180 23A4  
                      isa$xinst 000000              ??_reverse_fromcard 001E                      _RC4STAbits 000EE7  
                      int$flags 005F                   motor_action@l 0024                   motor_action@r 0026  
                      _vfprintf 290C                        left_90@i 0020                ___aomod@dividend 0001  
               main@time_return 01C4                      _INTCONbits 000FF2                    _motor_action 1598  
                      forward@i 001E                     _setMotorPWM 17E6                     _PWM6CONbits 000FA4  
                   _PWM7CONbits 000FA1                        intlevel2 0000                       sprintf@ap 006E  
                   ??_right_135 001E                 ___aomod@divisor 0009                     ??_vfpfcnvrt 0045  
               ___aomod@counter 0011                _color_click_init 2860                        sprintf@f 0070  
                      sprintf@s 0060                      _SSP2DATPPS 000E1D                      _SSP2CLKPPS 000E1C  
                    _TX4STAbits 000EE8                    ___aodiv@sign 0012                 _sendCharSerial4 2CD6  
                  ___aomod@sign 0012  
