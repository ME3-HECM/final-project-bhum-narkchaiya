

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Dec 10 21:10:31 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    68   000000                     
    69                           ; Version 2.35
    70                           ; Generated 05/05/2021 GMT
    71                           ; 
    72                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution. Publication is not required when
    86                           ;        this file is used in an embedded application.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F67K40 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104   000000                     _TX4REG	set	3812
   105   000000                     _RC4STAbits	set	3815
   106   000000                     _SP4BRGH	set	3814
   107   000000                     _T0CON0bits	set	4053
   108   000000                     _T0CON1bits	set	4054
   109   000000                     _TMR0H	set	4052
   110   000000                     _TRISGbits	set	3975
   111   000000                     _TRISEbits	set	3973
   112   000000                     _LATFbits	set	3966
   113   000000                     _TRISFbits	set	3974
   114   000000                     _LATG	set	3967
   115   000000                     _LATE	set	3965
   116   000000                     _SSP2CON2bits	set	3802
   117   000000                     _LATGbits	set	3967
   118   000000                     _LATEbits	set	3965
   119   000000                     _RX4PPS	set	3605
   120   000000                     _SSP2CLKPPS	set	3612
   121   000000                     _SSP2DATPPS	set	3613
   122   000000                     _ANSELDbits	set	3751
   123   000000                     _ANSELFbits	set	3764
   124   000000                     _LATDbits	set	3964
   125   000000                     _LATHbits	set	3968
   126   000000                     _TRISDbits	set	3972
   127   000000                     _TRISHbits	set	3976
   128   000000                     _PORTFbits	set	3982
   129   000000                     _PWM7DCH	set	4000
   130   000000                     _PWM6DCH	set	4003
   131   000000                     _TRISCbits	set	3971
   132   000000                     _SSP2BUF	set	3797
   133   000000                     _SSP2ADD	set	3798
   134   000000                     _SSP2CON1bits	set	3801
   135   000000                     _RC4REG	set	3811
   136   000000                     _SP4BRGL	set	3813
   137   000000                     _TX4STAbits	set	3816
   138   000000                     _BAUD4CONbits	set	3817
   139   000000                     _LATCbits	set	3963
   140   000000                     _SSP2CON2	set	3802
   141   000000                     _SSP2STAT	set	3800
   142   000000                     _IPR0bits	set	3615
   143   000000                     _PIE0bits	set	3625
   144   000000                     _RC7PPS	set	3689
   145   000000                     _RD5PPS	set	3695
   146   000000                     _RE2PPS	set	3700
   147   000000                     _RD6PPS	set	3696
   148   000000                     _PWM6CONbits	set	4004
   149   000000                     _T2PR	set	4028
   150   000000                     _T2CONbits	set	4029
   151   000000                     _INTCONbits	set	4082
   152   000000                     _PWM7CONbits	set	4001
   153   000000                     _TMR0L	set	4051
   154   000000                     _T2CLKCONbits	set	4031
   155   000000                     _T2HLTbits	set	4030
   156   000000                     _PIE2bits	set	3627
   157   000000                     _PIR0bits	set	3635
   158   000000                     _IPR2bits	set	3617
   159   000000                     _PIR2bits	set	3637
   160   000000                     _PIR4bits	set	3639
   161   000000                     _RC0PPS	set	3682
   162                           
   163                           	psect	smallconst
   164   000E00                     __psmallconst:
   165                           	callstack 0
   166   000E00  00                 	db	0
   167   000E01                     STR_3:
   168                           
   169                           ; BSR set to: 14
   170   000E01  25                 	db	37
   171   000E02  64                 	db	100	;'d'
   172   000E03  20                 	db	32
   173   000E04  25                 	db	37
   174   000E05  64                 	db	100	;'d'
   175   000E06  20                 	db	32
   176   000E07  25                 	db	37
   177   000E08  64                 	db	100	;'d'
   178   000E09  20                 	db	32
   179   000E0A  25                 	db	37
   180   000E0B  64                 	db	100	;'d'
   181   000E0C  20                 	db	32
   182   000E0D  25                 	db	37
   183   000E0E  64                 	db	100	;'d'
   184   000E0F  20                 	db	32
   185   000E10  0D                 	db	13
   186   000E11  0A                 	db	10
   187   000E12  00                 	db	0
   188   000E13  00                 	db	0	; dummy byte at the end
   189   000000                     
   190                           ; #config settings
   191                           
   192                           	psect	cinit
   193   002D98                     __pcinit:
   194                           	callstack 0
   195   002D98                     start_initialization:
   196                           	callstack 0
   197   002D98                     __initialization:
   198                           	callstack 0
   199                           
   200                           ; Clear objects allocated to BANK2 (122 bytes)
   201   002D98  EE02  F000         	lfsr	0,__pbssBANK2
   202   002D9C  0E7A               	movlw	122
   203   002D9E                     clear_0:
   204   002D9E  6AEE               	clrf	postinc0,c
   205   002DA0  06E8               	decf	wreg,f,c
   206   002DA2  E1FD               	bnz	clear_0
   207                           
   208                           ; Clear objects allocated to BANK1 (2 bytes)
   209   002DA4  0101               	movlb	1
   210   002DA6  6BFF               	clrf	(__pbssBANK1+1)& (0+255),b
   211   002DA8  6BFE               	clrf	__pbssBANK1& (0+255),b
   212                           
   213                           ; Clear objects allocated to BANK0 (1 bytes)
   214   002DAA  0100               	movlb	0
   215   002DAC  6BFF               	clrf	__pbssBANK0& (0+255),b
   216                           
   217                           ; Clear objects allocated to COMRAM (2 bytes)
   218   002DAE  6A5E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   219   002DB0  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   220   002DB2                     end_of_initialization:
   221                           	callstack 0
   222   002DB2                     __end_of__initialization:
   223                           	callstack 0
   224   002DB2  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   225   002DB4  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   226   002DB6  0100               	movlb	0
   227   002DB8  EF0A  F007         	goto	_main	;jump to C main() function
   228                           
   229                           	psect	bssCOMRAM
   230   00005D                     __pbssCOMRAM:
   231                           	callstack 0
   232   00005D                     _RxBufReadCnt:
   233                           	callstack 0
   234   00005D                     	ds	1
   235   00005E                     _RxBufWriteCnt:
   236                           	callstack 0
   237   00005E                     	ds	1
   238                           
   239                           	psect	bssBANK0
   240   0000FF                     __pbssBANK0:
   241                           	callstack 0
   242   0000FF                     _TxBufWriteCnt:
   243                           	callstack 0
   244   0000FF                     	ds	1
   245                           
   246                           	psect	bssBANK1
   247   0001FE                     __pbssBANK1:
   248                           	callstack 0
   249   0001FE                     _flags:
   250                           	callstack 0
   251   0001FE                     	ds	1
   252   0001FF                     _TxBufReadCnt:
   253                           	callstack 0
   254   0001FF                     	ds	1
   255                           
   256                           	psect	bssBANK2
   257   000200                     __pbssBANK2:
   258                           	callstack 0
   259   000200                     _EUSART4TXbuf:
   260                           	callstack 0
   261   000200                     	ds	60
   262   00023C                     _EUSART4RXbuf:
   263                           	callstack 0
   264   00023C                     	ds	20
   265   000250                     _width:
   266                           	callstack 0
   267   000250                     	ds	2
   268   000252                     _prec:
   269                           	callstack 0
   270   000252                     	ds	2
   271   000254                     _time:
   272                           	callstack 0
   273   000254                     	ds	2
   274   000256                     _off_period:
   275                           	callstack 0
   276   000256                     	ds	2
   277   000258                     _on_period:
   278                           	callstack 0
   279   000258                     	ds	2
   280   00025A                     _dbuf:
   281                           	callstack 0
   282   00025A                     	ds	32
   283                           
   284                           	psect	cstackBANK2
   285   00027A                     __pcstackBANK2:
   286                           	callstack 0
   287   00027A                     main@color_calibrated:
   288                           	callstack 0
   289                           
   290                           ; 64 bytes @ 0x0
   291   00027A                     	ds	64
   292   0002BA                     main@RGB_calibrated:
   293                           	callstack 0
   294                           
   295                           ; 8 bytes @ 0x40
   296   0002BA                     	ds	8
   297   0002C2                     main@motorR:
   298                           	callstack 0
   299                           
   300                           ; 9 bytes @ 0x48
   301   0002C2                     	ds	9
   302   0002CB                     main@motorL:
   303                           	callstack 0
   304                           
   305                           ; 9 bytes @ 0x51
   306   0002CB                     	ds	9
   307                           
   308                           	psect	cstackBANK1
   309   000100                     __pcstackBANK1:
   310                           	callstack 0
   311   000100                     main@readout2:
   312                           	callstack 0
   313                           
   314                           ; 100 bytes @ 0x0
   315   000100                     	ds	100
   316   000164                     main@readout3:
   317                           	callstack 0
   318                           
   319                           ; 100 bytes @ 0x64
   320   000164                     	ds	100
   321   0001C8                     main@time_path:
   322                           	callstack 0
   323                           
   324                           ; 30 bytes @ 0xC8
   325   0001C8                     	ds	30
   326   0001E6                     main@j:
   327                           	callstack 0
   328                           
   329                           ; 2 bytes @ 0xE6
   330   0001E6                     	ds	2
   331   0001E8                     main@L_calibrated:
   332                           	callstack 0
   333                           
   334                           ; 8 bytes @ 0xE8
   335   0001E8                     	ds	8
   336   0001F0                     main@color_name:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0xF0
   340   0001F0                     	ds	2
   341   0001F2                     main@k:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0xF2
   345   0001F2                     	ds	2
   346   0001F4                     main@i:
   347                           	callstack 0
   348                           
   349                           ; 2 bytes @ 0xF4
   350   0001F4                     	ds	2
   351   0001F6                     main@RGB_recorded:
   352                           	callstack 0
   353                           
   354                           ; 8 bytes @ 0xF6
   355   0001F6                     	ds	8
   356                           
   357                           	psect	cstackBANK0
   358   000060                     __pcstackBANK0:
   359                           	callstack 0
   360   000060                     ?_sprintf:
   361                           	callstack 0
   362   000060                     sprintf@s:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x0
   366   000060                     	ds	2
   367   000062                     sprintf@fmt:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x2
   371   000062                     	ds	12
   372   00006E                     sprintf@ap:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0xE
   376   00006E                     	ds	2
   377   000070                     sprintf@f:
   378                           	callstack 0
   379                           
   380                           ; 11 bytes @ 0x10
   381   000070                     	ds	11
   382   00007B                     main@readout1:
   383                           	callstack 0
   384                           
   385                           ; 100 bytes @ 0x1B
   386   00007B                     	ds	100
   387   0000DF                     main@color_path:
   388                           	callstack 0
   389                           
   390                           ; 30 bytes @ 0x7F
   391   0000DF                     	ds	30
   392   0000FD                     main@time_return:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0x9D
   396   0000FD                     	ds	2
   397                           
   398                           	psect	cstackCOMRAM
   399   000001                     __pcstackCOMRAM:
   400                           	callstack 0
   401   000001                     ??_I2C_2_Master_Idle:
   402   000001                     ?_color_processor_easy:
   403                           	callstack 0
   404   000001                     ?_color_processor_hard:
   405                           	callstack 0
   406   000001                     ?___wmul:
   407                           	callstack 0
   408   000001                     ?___aodiv:
   409                           	callstack 0
   410   000001                     ?___aomod:
   411                           	callstack 0
   412   000001                     sendCharSerial4@charToSend:
   413                           	callstack 0
   414   000001                     color_processor_easy@rgb:
   415                           	callstack 0
   416   000001                     color_processor_hard@rgb:
   417                           	callstack 0
   418   000001                     initDCmotorsPWM@PWMperiod:
   419                           	callstack 0
   420   000001                     ___wmul@multiplier:
   421                           	callstack 0
   422   000001                     fputc@c:
   423                           	callstack 0
   424   000001                     ___aodiv@dividend:
   425                           	callstack 0
   426   000001                     ___aomod@dividend:
   427                           	callstack 0
   428                           
   429                           ; 8 bytes @ 0x0
   430   000001                     	ds	1
   431   000002                     ??_I2C_2_Master_Read:
   432   000002                     I2C_2_Master_Write@data_byte:
   433                           	callstack 0
   434   000002                     sendStringSerial4@string:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x1
   438   000002                     	ds	1
   439   000003                     color_writetoaddr@value:
   440                           	callstack 0
   441   000003                     I2C_2_Master_Read@ack:
   442                           	callstack 0
   443   000003                     color_processor_easy@color:
   444                           	callstack 0
   445   000003                     color_processor_hard@calibrated:
   446                           	callstack 0
   447   000003                     ___wmul@multiplicand:
   448                           	callstack 0
   449   000003                     fputc@fp:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x2
   453   000003                     	ds	1
   454   000004                     color_writetoaddr@address:
   455                           	callstack 0
   456   000004                     I2C_2_Master_Read@tmp:
   457                           	callstack 0
   458                           
   459                           ; 1 bytes @ 0x3
   460   000004                     	ds	1
   461   000005                     ??_fputc:
   462   000005                     ??_color_click_init:
   463   000005                     ??_color_processor_hard:
   464   000005                     ?_color_read_Luminosity:
   465                           	callstack 0
   466   000005                     ?_color_read_Red:
   467                           	callstack 0
   468   000005                     ?_color_read_Green:
   469                           	callstack 0
   470   000005                     ?_color_read_Blue:
   471                           	callstack 0
   472   000005                     color_processor_easy@c:
   473                           	callstack 0
   474   000005                     ___wmul@product:
   475                           	callstack 0
   476                           
   477                           ; 2 bytes @ 0x4
   478   000005                     	ds	2
   479   000007                     ??_color_read_Luminosity:
   480   000007                     ??_color_read_Red:
   481   000007                     ??_color_read_Green:
   482   000007                     ??_color_read_Blue:
   483   000007                     ?___awdiv:
   484                           	callstack 0
   485   000007                     color_processor_easy@a:
   486                           	callstack 0
   487   000007                     ___awdiv@dividend:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x6
   491   000007                     	ds	2
   492   000009                     color_processor_hard@condition_r:
   493                           	callstack 0
   494   000009                     color_processor_easy@b:
   495                           	callstack 0
   496   000009                     ___awdiv@divisor:
   497                           	callstack 0
   498   000009                     ___aodiv@divisor:
   499                           	callstack 0
   500   000009                     ___aomod@divisor:
   501                           	callstack 0
   502                           
   503                           ; 8 bytes @ 0x8
   504   000009                     	ds	1
   505   00000A                     color_processor_hard@condition_g:
   506                           	callstack 0
   507   00000A                     color_read_Luminosity@tmp:
   508                           	callstack 0
   509   00000A                     color_read_Red@tmp:
   510                           	callstack 0
   511   00000A                     color_read_Green@tmp:
   512                           	callstack 0
   513   00000A                     color_read_Blue@tmp:
   514                           	callstack 0
   515   00000A                     fputs@s:
   516                           	callstack 0
   517                           
   518                           ; 2 bytes @ 0x9
   519   00000A                     	ds	1
   520   00000B                     color_processor_hard@condition_b:
   521                           	callstack 0
   522   00000B                     ___awdiv@counter:
   523                           	callstack 0
   524                           
   525                           ; 1 bytes @ 0xA
   526   00000B                     	ds	1
   527   00000C                     _color_processor_hard$370:
   528                           	callstack 0
   529   00000C                     ___awdiv@sign:
   530                           	callstack 0
   531   00000C                     color_read@rgb:
   532                           	callstack 0
   533   00000C                     fputs@fp:
   534                           	callstack 0
   535                           
   536                           ; 2 bytes @ 0xB
   537   00000C                     	ds	1
   538   00000D                     _color_processor_hard$372:
   539                           	callstack 0
   540   00000D                     ___awdiv@quotient:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0xC
   544   00000D                     	ds	1
   545   00000E                     ??_color_read:
   546   00000E                     _color_processor_hard$374:
   547                           	callstack 0
   548   00000E                     fputs@c:
   549                           	callstack 0
   550                           
   551                           ; 1 bytes @ 0xD
   552   00000E                     	ds	1
   553   00000F                     color_processor_hard@r:
   554                           	callstack 0
   555   00000F                     setMotorPWM@m:
   556                           	callstack 0
   557   00000F                     fputs@i:
   558                           	callstack 0
   559                           
   560                           ; 2 bytes @ 0xE
   561   00000F                     	ds	2
   562   000011                     ??_setMotorPWM:
   563   000011                     ___aodiv@counter:
   564                           	callstack 0
   565   000011                     ___aomod@counter:
   566                           	callstack 0
   567   000011                     color_processor_hard@g:
   568                           	callstack 0
   569   000011                     pad@fp:
   570                           	callstack 0
   571                           
   572                           ; 2 bytes @ 0x10
   573   000011                     	ds	1
   574   000012                     ___aodiv@sign:
   575                           	callstack 0
   576   000012                     ___aomod@sign:
   577                           	callstack 0
   578                           
   579                           ; 1 bytes @ 0x11
   580   000012                     	ds	1
   581   000013                     ?_abs:
   582                           	callstack 0
   583   000013                     color_processor_hard@b:
   584                           	callstack 0
   585   000013                     pad@buf:
   586                           	callstack 0
   587   000013                     abs@a:
   588                           	callstack 0
   589   000013                     ___aodiv@quotient:
   590                           	callstack 0
   591                           
   592                           ; 8 bytes @ 0x12
   593   000013                     	ds	2
   594   000015                     ??_abs:
   595   000015                     color_processor_hard@cr:
   596                           	callstack 0
   597   000015                     pad@p:
   598                           	callstack 0
   599                           
   600                           ; 2 bytes @ 0x14
   601   000015                     	ds	2
   602   000017                     ??_pad:
   603   000017                     color_processor_hard@cg:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x16
   607   000017                     	ds	1
   608   000018                     setMotorPWM@PWMduty:
   609                           	callstack 0
   610   000018                     pad@i:
   611                           	callstack 0
   612                           
   613                           ; 2 bytes @ 0x17
   614   000018                     	ds	1
   615   000019                     color_processor_hard@cb:
   616                           	callstack 0
   617                           
   618                           ; 2 bytes @ 0x18
   619   000019                     	ds	1
   620   00001A                     stop@mL:
   621                           	callstack 0
   622   00001A                     forward@mL:
   623                           	callstack 0
   624   00001A                     reverse_fromcard@mL:
   625                           	callstack 0
   626   00001A                     reverse_onesquare@mL:
   627                           	callstack 0
   628   00001A                     right_90@mL:
   629                           	callstack 0
   630   00001A                     left_90@mL:
   631                           	callstack 0
   632   00001A                     spin_180@mL:
   633                           	callstack 0
   634   00001A                     right_135@mL:
   635                           	callstack 0
   636   00001A                     left_135@mL:
   637                           	callstack 0
   638   00001A                     pad@w:
   639                           	callstack 0
   640                           
   641                           ; 2 bytes @ 0x19
   642   00001A                     	ds	1
   643   00001B                     color_processor_hard@i:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x1A
   647   00001B                     	ds	1
   648   00001C                     stop@mR:
   649                           	callstack 0
   650   00001C                     forward@mR:
   651                           	callstack 0
   652   00001C                     reverse_fromcard@mR:
   653                           	callstack 0
   654   00001C                     reverse_onesquare@mR:
   655                           	callstack 0
   656   00001C                     right_90@mR:
   657                           	callstack 0
   658   00001C                     left_90@mR:
   659                           	callstack 0
   660   00001C                     spin_180@mR:
   661                           	callstack 0
   662   00001C                     right_135@mR:
   663                           	callstack 0
   664   00001C                     left_135@mR:
   665                           	callstack 0
   666   00001C                     dtoa@fp:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0x1B
   670   00001C                     	ds	2
   671   00001E                     ??_stop:
   672   00001E                     ??_spin_180:
   673   00001E                     ??_reverse_fromcard:
   674   00001E                     ??_reverse_onesquare:
   675   00001E                     ??_right_90:
   676   00001E                     ??_left_90:
   677   00001E                     ??_right_135:
   678   00001E                     ??_left_135:
   679   00001E                     forward@i:
   680                           	callstack 0
   681   00001E                     dtoa@d:
   682                           	callstack 0
   683                           
   684                           ; 8 bytes @ 0x1D
   685   00001E                     	ds	1
   686   00001F                     stop@i:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0x1E
   690   00001F                     	ds	1
   691   000020                     reverse_fromcard@i:
   692                           	callstack 0
   693   000020                     reverse_onesquare@i:
   694                           	callstack 0
   695   000020                     right_90@i:
   696                           	callstack 0
   697   000020                     left_90@i:
   698                           	callstack 0
   699   000020                     spin_180@i:
   700                           	callstack 0
   701   000020                     right_135@i:
   702                           	callstack 0
   703   000020                     left_135@i:
   704                           	callstack 0
   705                           
   706                           ; 2 bytes @ 0x1F
   707   000020                     	ds	2
   708   000022                     motor_action@color:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0x21
   712   000022                     	ds	2
   713   000024                     motor_action@l:
   714                           	callstack 0
   715                           
   716                           ; 2 bytes @ 0x23
   717   000024                     	ds	2
   718   000026                     ??_dtoa:
   719   000026                     motor_action@r:
   720                           	callstack 0
   721                           
   722                           ; 2 bytes @ 0x25
   723   000026                     	ds	2
   724   000028                     ??_motor_action:
   725                           
   726                           ; 1 bytes @ 0x27
   727   000028                     	ds	6
   728   00002E                     _dtoa$2417:
   729                           	callstack 0
   730                           
   731                           ; 2 bytes @ 0x2D
   732   00002E                     	ds	2
   733   000030                     dtoa@p:
   734                           	callstack 0
   735                           
   736                           ; 2 bytes @ 0x2F
   737   000030                     	ds	2
   738   000032                     dtoa@w:
   739                           	callstack 0
   740                           
   741                           ; 2 bytes @ 0x31
   742   000032                     	ds	2
   743   000034                     dtoa@n:
   744                           	callstack 0
   745                           
   746                           ; 8 bytes @ 0x33
   747   000034                     	ds	8
   748   00003C                     dtoa@i:
   749                           	callstack 0
   750                           
   751                           ; 2 bytes @ 0x3B
   752   00003C                     	ds	2
   753   00003E                     dtoa@s:
   754                           	callstack 0
   755                           
   756                           ; 1 bytes @ 0x3D
   757   00003E                     	ds	1
   758   00003F                     vfpfcnvrt@fp:
   759                           	callstack 0
   760                           
   761                           ; 2 bytes @ 0x3E
   762   00003F                     	ds	2
   763   000041                     vfpfcnvrt@fmt:
   764                           	callstack 0
   765                           
   766                           ; 2 bytes @ 0x40
   767   000041                     	ds	2
   768   000043                     vfpfcnvrt@ap:
   769                           	callstack 0
   770                           
   771                           ; 2 bytes @ 0x42
   772   000043                     	ds	2
   773   000045                     ??_vfpfcnvrt:
   774                           
   775                           ; 1 bytes @ 0x44
   776   000045                     	ds	2
   777   000047                     vfpfcnvrt@convarg:
   778                           	callstack 0
   779                           
   780                           ; 8 bytes @ 0x46
   781   000047                     	ds	8
   782   00004F                     vfpfcnvrt@cp:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x4E
   786   00004F                     	ds	2
   787   000051                     ?_vfprintf:
   788                           	callstack 0
   789   000051                     vfprintf@fp:
   790                           	callstack 0
   791                           
   792                           ; 2 bytes @ 0x50
   793   000051                     	ds	2
   794   000053                     vfprintf@fmt:
   795                           	callstack 0
   796                           
   797                           ; 2 bytes @ 0x52
   798   000053                     	ds	2
   799   000055                     vfprintf@ap:
   800                           	callstack 0
   801                           
   802                           ; 2 bytes @ 0x54
   803   000055                     	ds	2
   804   000057                     vfprintf@cfmt:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0x56
   808   000057                     	ds	2
   809   000059                     ??_main:
   810                           
   811                           ; 1 bytes @ 0x58
   812   000059                     	ds	2
   813   00005B                     main@color_flag:
   814                           	callstack 0
   815                           
   816                           ; 2 bytes @ 0x5A
   817   00005B                     	ds	2
   818                           
   819 ;;
   820 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   821 ;;
   822 ;; *************** function _main *****************
   823 ;; Defined at:
   824 ;;		line 20 in file "../main.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;		None
   827 ;; Auto vars:     Size  Location     Type
   828 ;;  readout3      100  100[BANK1 ] unsigned char [100]
   829 ;;  readout2      100    0[BANK1 ] unsigned char [100]
   830 ;;  k               2  242[BANK1 ] int 
   831 ;;  i               2  244[BANK1 ] int 
   832 ;;  readout1      100   27[BANK0 ] unsigned char [100]
   833 ;;  color_calibr   64    0[BANK2 ] int [32]
   834 ;;  time_path      30  200[BANK1 ] unsigned int [15]
   835 ;;  color_path     30  127[BANK0 ] unsigned int [15]
   836 ;;  motorL          9   81[BANK2 ] struct DC_motor
   837 ;;  motorR          9   72[BANK2 ] struct DC_motor
   838 ;;  RGB_calibrat    8   64[BANK2 ] struct RGB_val
   839 ;;  RGB_recorded    8  246[BANK1 ] struct RGB_val
   840 ;;  L_calibrated    8  232[BANK1 ] struct RGB_val
   841 ;;  color_name      2  240[BANK1 ] unsigned int 
   842 ;;  j               2  230[BANK1 ] int 
   843 ;;  time_return     2  157[BANK0 ] unsigned int 
   844 ;;  color_flag      2   90[COMRAM] unsigned int 
   845 ;;  PWMcycle        1    0        unsigned char 
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   856 ;;      Locals:         2     132     254      90       0       0       0       0       0       0       0       0       
      +0       0       0
   857 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   858 ;;      Totals:         4     132     254      90       0       0       0       0       0       0       0       0       
      +0       0       0
   859 ;;Total ram usage:      480 bytes
   860 ;; Hardware stack levels required when called: 9
   861 ;; This function calls:
   862 ;;		_I2C_2_Master_Init
   863 ;;		_Interrupts_init
   864 ;;		_Timer0_init
   865 ;;		_color_click_init
   866 ;;		_color_processor_easy
   867 ;;		_color_processor_hard
   868 ;;		_color_read
   869 ;;		_forward
   870 ;;		_initDCmotorsPWM
   871 ;;		_initUSART4
   872 ;;		_motor_action
   873 ;;		_sendStringSerial4
   874 ;;		_setMotorPWM
   875 ;;		_spin_180
   876 ;;		_sprintf
   877 ;;		_stop
   878 ;; This function is called by:
   879 ;;		Startup code after reset
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           	psect	text0
   884   000E14                     __ptext0:
   885                           	callstack 0
   886   000E14                     _main:
   887                           	callstack 22
   888   000E14                     
   889                           ;../main.c: 22:     color_click_init();
   890   000E14  ECD5  F014         	call	_color_click_init	;wreg free
   891   000E18                     
   892                           ;../main.c: 23:     initDCmotorsPWM(20);
   893   000E18  0E00               	movlw	0
   894   000E1A  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   895   000E1C  0E14               	movlw	20
   896   000E1E  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   897   000E20  EC16  F016         	call	_initDCmotorsPWM	;wreg free
   898   000E24                     
   899                           ;../main.c: 24:     Interrupts_init();
   900   000E24  EC19  F017         	call	_Interrupts_init	;wreg free
   901   000E28                     
   902                           ;../main.c: 25:     Timer0_init();
   903   000E28  ECEE  F016         	call	_Timer0_init	;wreg free
   904   000E2C                     
   905                           ;../main.c: 26:     I2C_2_Master_Init();
   906   000E2C  EC90  F016         	call	_I2C_2_Master_Init	;wreg free
   907   000E30                     
   908                           ;../main.c: 27:     initUSART4();
   909   000E30  ECFE  F016         	call	_initUSART4	;wreg free
   910   000E34                     
   911                           ;../main.c: 32:     motorL.power = 0;
   912   000E34  0E00               	movlw	0
   913   000E36  0102               	movlb	2	; () banked
   914   000E38  6FCB               	movwf	main@motorL& (0+255),b
   915   000E3A                     
   916                           ; BSR set to: 2
   917                           ;../main.c: 33:     motorL.direction = 0;
   918   000E3A  0E00               	movlw	0
   919   000E3C  6FCC               	movwf	(main@motorL+1)& (0+255),b
   920   000E3E                     
   921                           ; BSR set to: 2
   922                           ;../main.c: 34:     motorL.dutyHighByte = (unsigned char *)(&PWM6DCH);
   923   000E3E  0EA3               	movlw	163
   924   000E40  6FCD               	movwf	(main@motorL+2)& (0+255),b
   925   000E42  0E0F               	movlw	15
   926   000E44  6FCE               	movwf	(main@motorL+3)& (0+255),b
   927   000E46                     
   928                           ; BSR set to: 2
   929                           ;../main.c: 35:     motorL.dir_LAT = (unsigned char *)(&LATE);
   930   000E46  0E7D               	movlw	125
   931   000E48  6FCF               	movwf	(main@motorL+4)& (0+255),b
   932   000E4A  0E0F               	movlw	15
   933   000E4C  6FD0               	movwf	(main@motorL+5)& (0+255),b
   934   000E4E                     
   935                           ; BSR set to: 2
   936                           ;../main.c: 36:     motorL.dir_pin = 4;
   937   000E4E  0E04               	movlw	4
   938   000E50  6FD1               	movwf	(main@motorL+6)& (0+255),b
   939   000E52                     
   940                           ; BSR set to: 2
   941                           ;../main.c: 37:     motorL.PWMperiod = PWMcycle;
   942   000E52  0E00               	movlw	0
   943   000E54  6FD3               	movwf	(main@motorL+8)& (0+255),b
   944   000E56  0EC8               	movlw	200
   945   000E58  6FD2               	movwf	(main@motorL+7)& (0+255),b
   946   000E5A                     
   947                           ; BSR set to: 2
   948                           ;../main.c: 38:     motorR.power = 0;
   949   000E5A  0E00               	movlw	0
   950   000E5C  6FC2               	movwf	main@motorR& (0+255),b
   951   000E5E                     
   952                           ; BSR set to: 2
   953                           ;../main.c: 39:     motorR.direction = 0;
   954   000E5E  0E00               	movlw	0
   955   000E60  6FC3               	movwf	(main@motorR+1)& (0+255),b
   956                           
   957                           ;../main.c: 40:     motorR.dutyHighByte = (unsigned char *)(&PWM7DCH);
   958   000E62  0EA0               	movlw	160
   959   000E64  6FC4               	movwf	(main@motorR+2)& (0+255),b
   960   000E66  0E0F               	movlw	15
   961   000E68  6FC5               	movwf	(main@motorR+3)& (0+255),b
   962                           
   963                           ;../main.c: 41:     motorR.dir_LAT = (unsigned char *)(&LATG);
   964   000E6A  0E7F               	movlw	127
   965   000E6C  6FC6               	movwf	(main@motorR+4)& (0+255),b
   966   000E6E  0E0F               	movlw	15
   967   000E70  6FC7               	movwf	(main@motorR+5)& (0+255),b
   968   000E72                     
   969                           ; BSR set to: 2
   970                           ;../main.c: 42:     motorR.dir_pin = 6;
   971   000E72  0E06               	movlw	6
   972   000E74  6FC8               	movwf	(main@motorR+6)& (0+255),b
   973   000E76                     
   974                           ; BSR set to: 2
   975                           ;../main.c: 43:     motorR.PWMperiod = PWMcycle;
   976   000E76  0E00               	movlw	0
   977   000E78  6FCA               	movwf	(main@motorR+8)& (0+255),b
   978   000E7A  0EC8               	movlw	200
   979   000E7C  6FC9               	movwf	(main@motorR+7)& (0+255),b
   980   000E7E                     
   981                           ; BSR set to: 2
   982                           ;../main.c: 44:     setMotorPWM(&motorL);
   983   000E7E  0ECB               	movlw	low main@motorL
   984   000E80  6E0F               	movwf	setMotorPWM@m^0,c
   985   000E82  0E02               	movlw	high main@motorL
   986   000E84  6E10               	movwf	(setMotorPWM@m+1)^0,c
   987   000E86  EC4B  F00D         	call	_setMotorPWM	;wreg free
   988   000E8A                     
   989                           ;../main.c: 45:     setMotorPWM(&motorR);
   990   000E8A  0EC2               	movlw	low main@motorR
   991   000E8C  6E0F               	movwf	setMotorPWM@m^0,c
   992   000E8E  0E02               	movlw	high main@motorR
   993   000E90  6E10               	movwf	(setMotorPWM@m+1)^0,c
   994   000E92  EC4B  F00D         	call	_setMotorPWM	;wreg free
   995   000E96                     l2997:
   996                           
   997                           ;../main.c: 63:         color_read(&L_calibrated);
   998   000E96  0EE8               	movlw	low main@L_calibrated
   999   000E98  6E0C               	movwf	color_read@rgb^0,c
  1000   000E9A  0E01               	movlw	high main@L_calibrated
  1001   000E9C  6E0D               	movwf	(color_read@rgb+1)^0,c
  1002   000E9E  EC80  F011         	call	_color_read	;wreg free
  1003   000EA2                     
  1004                           ;../main.c: 64:         char readout1[100];;../main.c: 65:         sprintf(readout1,"%d 
      +                          %d %d %d \r\n", RGB_calibrated.L,RGB_calibrated.R,RGB_calibrated.G,RGB_calibrated.B);
  1005   000EA2  0E7B               	movlw	low main@readout1
  1006   000EA4  0100               	movlb	0	; () banked
  1007   000EA6  6F60               	movwf	sprintf@s& (0+255),b
  1008   000EA8  0E00               	movlw	high main@readout1
  1009   000EAA  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1010   000EAC  0E04               	movlw	low (STR_3+3)
  1011   000EAE  6F62               	movwf	sprintf@fmt& (0+255),b
  1012   000EB0  0E0E               	movlw	high (STR_3+3)
  1013   000EB2  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1014   000EB4  C2BA  F064         	movff	main@RGB_calibrated,?_sprintf+4
  1015   000EB8  C2BB  F065         	movff	main@RGB_calibrated+1,?_sprintf+5
  1016   000EBC  C2BC  F066         	movff	main@RGB_calibrated+2,?_sprintf+6
  1017   000EC0  C2BD  F067         	movff	main@RGB_calibrated+3,?_sprintf+7
  1018   000EC4  C2BE  F068         	movff	main@RGB_calibrated+4,?_sprintf+8
  1019   000EC8  C2BF  F069         	movff	main@RGB_calibrated+5,?_sprintf+9
  1020   000ECC  C2C0  F06A         	movff	main@RGB_calibrated+6,?_sprintf+10
  1021   000ED0  C2C1  F06B         	movff	main@RGB_calibrated+7,?_sprintf+11
  1022   000ED4  EC02  F015         	call	_sprintf	;wreg free
  1023   000ED8                     
  1024                           ;../main.c: 66:         sendStringSerial4(readout1);
  1025   000ED8  0E7B               	movlw	low main@readout1
  1026   000EDA  6E02               	movwf	sendStringSerial4@string^0,c
  1027   000EDC  0E00               	movlw	high main@readout1
  1028   000EDE  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1029   000EE0  EC78  F016         	call	_sendStringSerial4	;wreg free
  1030   000EE4                     
  1031                           ;../main.c: 67:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1032   000EE4  0E29               	movlw	41
  1033   000EE6  6E5A               	movwf	(??_main+1)^0,c
  1034   000EE8  0E96               	movlw	150
  1035   000EEA  6E59               	movwf	??_main^0,c
  1036   000EEC  0E7F               	movlw	127
  1037   000EEE                     u1867:
  1038   000EEE  2EE8               	decfsz	wreg,f,c
  1039   000EF0  D7FE               	bra	u1867
  1040   000EF2  2E59               	decfsz	??_main^0,f,c
  1041   000EF4  D7FC               	bra	u1867
  1042   000EF6  2E5A               	decfsz	(??_main+1)^0,f,c
  1043   000EF8  D7FA               	bra	u1867
  1044   000EFA  F000               	nop	
  1045   000EFC                     
  1046                           ;../main.c: 68:         color_flag = 1;
  1047   000EFC  0E00               	movlw	0
  1048   000EFE  6E5C               	movwf	(main@color_flag+1)^0,c
  1049   000F00  0E01               	movlw	1
  1050   000F02  6E5B               	movwf	main@color_flag^0,c
  1051   000F04                     l192:
  1052   000F04  B68E               	btfsc	142,3,c	;volatile
  1053   000F06  EF87  F007         	goto	u1741
  1054   000F0A  EF89  F007         	goto	u1740
  1055   000F0E                     u1741:
  1056   000F0E  EF82  F007         	goto	l192
  1057   000F12                     u1740:
  1058   000F12                     
  1059                           ;../main.c: 72:         for (int i=0;i<8;i++){
  1060   000F12  0E00               	movlw	0
  1061   000F14  0101               	movlb	1	; () banked
  1062   000F16  6FF5               	movwf	(main@i+1)& (0+255),b
  1063   000F18  0E00               	movlw	0
  1064   000F1A  6FF4               	movwf	main@i& (0+255),b
  1065   000F1C                     l3013:
  1066                           
  1067                           ; BSR set to: 1
  1068                           ;../main.c: 73:             color_read(&RGB_calibrated);
  1069   000F1C  0EBA               	movlw	low main@RGB_calibrated
  1070   000F1E  6E0C               	movwf	color_read@rgb^0,c
  1071   000F20  0E02               	movlw	high main@RGB_calibrated
  1072   000F22  6E0D               	movwf	(color_read@rgb+1)^0,c
  1073   000F24  EC80  F011         	call	_color_read	;wreg free
  1074   000F28                     
  1075                           ;../main.c: 74:             color_calibrated[4*i] = RGB_calibrated.L;
  1076   000F28  C1F4  F059         	movff	main@i,??_main
  1077   000F2C  C1F5  F05A         	movff	main@i+1,??_main+1
  1078   000F30  90D8               	bcf	status,0,c
  1079   000F32  3659               	rlcf	??_main^0,f,c
  1080   000F34  365A               	rlcf	(??_main+1)^0,f,c
  1081   000F36  90D8               	bcf	status,0,c
  1082   000F38  3659               	rlcf	??_main^0,f,c
  1083   000F3A  365A               	rlcf	(??_main+1)^0,f,c
  1084   000F3C  90D8               	bcf	status,0,c
  1085   000F3E  3659               	rlcf	??_main^0,f,c
  1086   000F40  365A               	rlcf	(??_main+1)^0,f,c
  1087   000F42  0E7A               	movlw	low main@color_calibrated
  1088   000F44  2459               	addwf	??_main^0,w,c
  1089   000F46  6ED9               	movwf	fsr2l,c
  1090   000F48  0E02               	movlw	high main@color_calibrated
  1091   000F4A  205A               	addwfc	(??_main+1)^0,w,c
  1092   000F4C  6EDA               	movwf	fsr2h,c
  1093   000F4E  C2BA  FFDE         	movff	main@RGB_calibrated,postinc2
  1094   000F52  C2BB  FFDD         	movff	main@RGB_calibrated+1,postdec2
  1095   000F56                     
  1096                           ;../main.c: 75:             color_calibrated[4*i+1] = RGB_calibrated.R;
  1097   000F56  C1F4  F059         	movff	main@i,??_main
  1098   000F5A  C1F5  F05A         	movff	main@i+1,??_main+1
  1099   000F5E  90D8               	bcf	status,0,c
  1100   000F60  3659               	rlcf	??_main^0,f,c
  1101   000F62  365A               	rlcf	(??_main+1)^0,f,c
  1102   000F64  90D8               	bcf	status,0,c
  1103   000F66  3659               	rlcf	??_main^0,f,c
  1104   000F68  365A               	rlcf	(??_main+1)^0,f,c
  1105   000F6A  90D8               	bcf	status,0,c
  1106   000F6C  3659               	rlcf	??_main^0,f,c
  1107   000F6E  365A               	rlcf	(??_main+1)^0,f,c
  1108   000F70  0E02               	movlw	2
  1109   000F72  2659               	addwf	??_main^0,f,c
  1110   000F74  0E00               	movlw	0
  1111   000F76  225A               	addwfc	(??_main+1)^0,f,c
  1112   000F78  0E7A               	movlw	low main@color_calibrated
  1113   000F7A  2459               	addwf	??_main^0,w,c
  1114   000F7C  6ED9               	movwf	fsr2l,c
  1115   000F7E  0E02               	movlw	high main@color_calibrated
  1116   000F80  205A               	addwfc	(??_main+1)^0,w,c
  1117   000F82  6EDA               	movwf	fsr2h,c
  1118   000F84  C2BC  FFDE         	movff	main@RGB_calibrated+2,postinc2
  1119   000F88  C2BD  FFDD         	movff	main@RGB_calibrated+3,postdec2
  1120   000F8C                     
  1121                           ;../main.c: 76:             color_calibrated[4*i+2] = RGB_calibrated.G;
  1122   000F8C  C1F4  F059         	movff	main@i,??_main
  1123   000F90  C1F5  F05A         	movff	main@i+1,??_main+1
  1124   000F94  90D8               	bcf	status,0,c
  1125   000F96  3659               	rlcf	??_main^0,f,c
  1126   000F98  365A               	rlcf	(??_main+1)^0,f,c
  1127   000F9A  90D8               	bcf	status,0,c
  1128   000F9C  3659               	rlcf	??_main^0,f,c
  1129   000F9E  365A               	rlcf	(??_main+1)^0,f,c
  1130   000FA0  90D8               	bcf	status,0,c
  1131   000FA2  3659               	rlcf	??_main^0,f,c
  1132   000FA4  365A               	rlcf	(??_main+1)^0,f,c
  1133   000FA6  0E04               	movlw	4
  1134   000FA8  2659               	addwf	??_main^0,f,c
  1135   000FAA  0E00               	movlw	0
  1136   000FAC  225A               	addwfc	(??_main+1)^0,f,c
  1137   000FAE  0E7A               	movlw	low main@color_calibrated
  1138   000FB0  2459               	addwf	??_main^0,w,c
  1139   000FB2  6ED9               	movwf	fsr2l,c
  1140   000FB4  0E02               	movlw	high main@color_calibrated
  1141   000FB6  205A               	addwfc	(??_main+1)^0,w,c
  1142   000FB8  6EDA               	movwf	fsr2h,c
  1143   000FBA  C2BE  FFDE         	movff	main@RGB_calibrated+4,postinc2
  1144   000FBE  C2BF  FFDD         	movff	main@RGB_calibrated+5,postdec2
  1145   000FC2                     
  1146                           ;../main.c: 77:             color_calibrated[4*i+3] = RGB_calibrated.B;
  1147   000FC2  C1F4  F059         	movff	main@i,??_main
  1148   000FC6  C1F5  F05A         	movff	main@i+1,??_main+1
  1149   000FCA  90D8               	bcf	status,0,c
  1150   000FCC  3659               	rlcf	??_main^0,f,c
  1151   000FCE  365A               	rlcf	(??_main+1)^0,f,c
  1152   000FD0  90D8               	bcf	status,0,c
  1153   000FD2  3659               	rlcf	??_main^0,f,c
  1154   000FD4  365A               	rlcf	(??_main+1)^0,f,c
  1155   000FD6  90D8               	bcf	status,0,c
  1156   000FD8  3659               	rlcf	??_main^0,f,c
  1157   000FDA  365A               	rlcf	(??_main+1)^0,f,c
  1158   000FDC  0E06               	movlw	6
  1159   000FDE  2659               	addwf	??_main^0,f,c
  1160   000FE0  0E00               	movlw	0
  1161   000FE2  225A               	addwfc	(??_main+1)^0,f,c
  1162   000FE4  0E7A               	movlw	low main@color_calibrated
  1163   000FE6  2459               	addwf	??_main^0,w,c
  1164   000FE8  6ED9               	movwf	fsr2l,c
  1165   000FEA  0E02               	movlw	high main@color_calibrated
  1166   000FEC  205A               	addwfc	(??_main+1)^0,w,c
  1167   000FEE  6EDA               	movwf	fsr2h,c
  1168   000FF0  C2C0  FFDE         	movff	main@RGB_calibrated+6,postinc2
  1169   000FF4  C2C1  FFDD         	movff	main@RGB_calibrated+7,postdec2
  1170   000FF8                     
  1171                           ;../main.c: 78:             LATHbits.LATH3 = 1;
  1172   000FF8  8680               	bsf	128,3,c	;volatile
  1173   000FFA                     
  1174                           ;../main.c: 80:             char readout2[100];;../main.c: 81:             sprintf(reado
      +                          ut2,"%d %d %d %d \r\n", RGB_calibrated.L,RGB_calibrated.R,RGB_calibrated.G,RGB_calibrate
      +                          d.B);
  1175   000FFA  0E00               	movlw	low main@readout2
  1176   000FFC  0100               	movlb	0	; () banked
  1177   000FFE  6F60               	movwf	sprintf@s& (0+255),b
  1178   001000  0E01               	movlw	high main@readout2
  1179   001002  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1180   001004  0E04               	movlw	low (STR_3+3)
  1181   001006  6F62               	movwf	sprintf@fmt& (0+255),b
  1182   001008  0E0E               	movlw	high (STR_3+3)
  1183   00100A  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1184   00100C  C2BA  F064         	movff	main@RGB_calibrated,?_sprintf+4
  1185   001010  C2BB  F065         	movff	main@RGB_calibrated+1,?_sprintf+5
  1186   001014  C2BC  F066         	movff	main@RGB_calibrated+2,?_sprintf+6
  1187   001018  C2BD  F067         	movff	main@RGB_calibrated+3,?_sprintf+7
  1188   00101C  C2BE  F068         	movff	main@RGB_calibrated+4,?_sprintf+8
  1189   001020  C2BF  F069         	movff	main@RGB_calibrated+5,?_sprintf+9
  1190   001024  C2C0  F06A         	movff	main@RGB_calibrated+6,?_sprintf+10
  1191   001028  C2C1  F06B         	movff	main@RGB_calibrated+7,?_sprintf+11
  1192   00102C  EC02  F015         	call	_sprintf	;wreg free
  1193   001030                     
  1194                           ;../main.c: 82:             sendStringSerial4(readout2);
  1195   001030  0E00               	movlw	low main@readout2
  1196   001032  6E02               	movwf	sendStringSerial4@string^0,c
  1197   001034  0E01               	movlw	high main@readout2
  1198   001036  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1199   001038  EC78  F016         	call	_sendStringSerial4	;wreg free
  1200   00103C                     
  1201                           ;../main.c: 83:             _delay((unsigned long)((2000)*(64000000/4000.0)));
  1202   00103C  0EA3               	movlw	163
  1203   00103E  6E5A               	movwf	(??_main+1)^0,c
  1204   001040  0E57               	movlw	87
  1205   001042  6E59               	movwf	??_main^0,c
  1206   001044  0E02               	movlw	2
  1207   001046                     u1877:
  1208   001046  2EE8               	decfsz	wreg,f,c
  1209   001048  D7FE               	bra	u1877
  1210   00104A  2E59               	decfsz	??_main^0,f,c
  1211   00104C  D7FC               	bra	u1877
  1212   00104E  2E5A               	decfsz	(??_main+1)^0,f,c
  1213   001050  D7FA               	bra	u1877
  1214   001052  D000               	nop2	
  1215   001054                     
  1216                           ;../main.c: 84:             LATHbits.LATH3 = 0;
  1217   001054  9680               	bcf	128,3,c	;volatile
  1218   001056                     
  1219                           ;../main.c: 85:             _delay((unsigned long)((2000)*(64000000/4000.0)));
  1220   001056  0EA3               	movlw	163
  1221   001058  6E5A               	movwf	(??_main+1)^0,c
  1222   00105A  0E57               	movlw	87
  1223   00105C  6E59               	movwf	??_main^0,c
  1224   00105E  0E02               	movlw	2
  1225   001060                     u1887:
  1226   001060  2EE8               	decfsz	wreg,f,c
  1227   001062  D7FE               	bra	u1887
  1228   001064  2E59               	decfsz	??_main^0,f,c
  1229   001066  D7FC               	bra	u1887
  1230   001068  2E5A               	decfsz	(??_main+1)^0,f,c
  1231   00106A  D7FA               	bra	u1887
  1232   00106C  D000               	nop2	
  1233   00106E                     
  1234                           ;../main.c: 86:         }
  1235   00106E  0101               	movlb	1	; () banked
  1236   001070  4BF4               	infsnz	main@i& (0+255),f,b
  1237   001072  2BF5               	incf	(main@i+1)& (0+255),f,b
  1238   001074                     
  1239                           ; BSR set to: 1
  1240   001074  BFF5               	btfsc	(main@i+1)& (0+255),7,b
  1241   001076  EF46  F008         	goto	u1751
  1242   00107A  51F5               	movf	(main@i+1)& (0+255),w,b
  1243   00107C  E109               	bnz	u1750
  1244   00107E  0E08               	movlw	8
  1245   001080  5DF4               	subwf	main@i& (0+255),w,b
  1246   001082  A0D8               	btfss	status,0,c
  1247   001084  EF46  F008         	goto	u1751
  1248   001088  EF48  F008         	goto	u1750
  1249   00108C                     u1751:
  1250   00108C  EF8E  F007         	goto	l3013
  1251   001090                     u1750:
  1252   001090                     l3039:
  1253   001090  0E01               	movlw	1
  1254   001092  A68E               	btfss	142,3,c	;volatile
  1255   001094  0E00               	movlw	0
  1256   001096  A48E               	btfss	142,2,c	;volatile
  1257   001098  0E00               	movlw	0
  1258   00109A  B0E8               	btfsc	wreg,0,c
  1259   00109C  EF52  F008         	goto	u1761
  1260   0010A0  EF56  F008         	goto	u1760
  1261   0010A4                     u1761:
  1262   0010A4  6A59               	clrf	??_main^0,c
  1263   0010A6  2A59               	incf	??_main^0,f,c
  1264   0010A8  EF57  F008         	goto	u1768
  1265   0010AC                     u1760:
  1266   0010AC  6A59               	clrf	??_main^0,c
  1267   0010AE                     u1768:
  1268   0010AE  5059               	movf	??_main^0,w,c
  1269   0010B0  A4D8               	btfss	status,2,c
  1270   0010B2  EF5D  F008         	goto	u1771
  1271   0010B6  EF5F  F008         	goto	u1770
  1272   0010BA                     u1771:
  1273   0010BA  EF48  F008         	goto	l3039
  1274   0010BE                     u1770:
  1275   0010BE                     
  1276                           ;../main.c: 90:         if (!PORTFbits.RF2){LATDbits.LATD7 = 1;}
  1277   0010BE  B48E               	btfsc	142,2,c	;volatile
  1278   0010C0  EF64  F008         	goto	u1781
  1279   0010C4  EF66  F008         	goto	u1780
  1280   0010C8                     u1781:
  1281   0010C8  EF69  F008         	goto	l200
  1282   0010CC                     u1780:
  1283   0010CC  8E7C               	bsf	124,7,c	;volatile
  1284   0010CE  EF21  F009         	goto	l3079
  1285   0010D2                     l200:
  1286   0010D2  8680               	bsf	128,3,c	;volatile
  1287   0010D4  EF21  F009         	goto	l3079
  1288   0010D8                     l3043:
  1289                           
  1290                           ; BSR set to: 1
  1291                           ;../main.c: 95:             time = 0;
  1292   0010D8  0E00               	movlw	0
  1293   0010DA  0102               	movlb	2	; () banked
  1294   0010DC  6F55               	movwf	(_time+1)& (0+255),b
  1295   0010DE  0E00               	movlw	0
  1296   0010E0  6F54               	movwf	_time& (0+255),b
  1297   0010E2                     
  1298                           ; BSR set to: 2
  1299                           ;../main.c: 96:             forward(&motorL,&motorR);
  1300   0010E2  0ECB               	movlw	low main@motorL
  1301   0010E4  6E1A               	movwf	forward@mL^0,c
  1302   0010E6  0E02               	movlw	high main@motorL
  1303   0010E8  6E1B               	movwf	(forward@mL+1)^0,c
  1304   0010EA  0EC2               	movlw	low main@motorR
  1305   0010EC  6E1C               	movwf	forward@mR^0,c
  1306   0010EE  0E02               	movlw	high main@motorR
  1307   0010F0  6E1D               	movwf	(forward@mR+1)^0,c
  1308   0010F2  EC53  F014         	call	_forward	;wreg free
  1309   0010F6                     
  1310                           ;../main.c: 97:             color_read(&RGB_recorded);
  1311   0010F6  0EF6               	movlw	low main@RGB_recorded
  1312   0010F8  6E0C               	movwf	color_read@rgb^0,c
  1313   0010FA  0E01               	movlw	high main@RGB_recorded
  1314   0010FC  6E0D               	movwf	(color_read@rgb+1)^0,c
  1315   0010FE  EC80  F011         	call	_color_read	;wreg free
  1316   001102                     
  1317                           ;../main.c: 98:             if (color_flag){
  1318   001102  505B               	movf	main@color_flag^0,w,c
  1319   001104  105C               	iorwf	(main@color_flag+1)^0,w,c
  1320   001106  B4D8               	btfsc	status,2,c
  1321   001108  EF88  F008         	goto	u1791
  1322   00110C  EF8A  F008         	goto	u1790
  1323   001110                     u1791:
  1324   001110  EF15  F009         	goto	l3077
  1325   001114                     u1790:
  1326   001114                     
  1327                           ;../main.c: 99:                 stop(&motorL,&motorR);
  1328   001114  0ECB               	movlw	low main@motorL
  1329   001116  6E1A               	movwf	stop@mL^0,c
  1330   001118  0E02               	movlw	high main@motorL
  1331   00111A  6E1B               	movwf	(stop@mL+1)^0,c
  1332   00111C  0EC2               	movlw	low main@motorR
  1333   00111E  6E1C               	movwf	stop@mR^0,c
  1334   001120  0E02               	movlw	high main@motorR
  1335   001122  6E1D               	movwf	(stop@mR+1)^0,c
  1336   001124  EC0C  F014         	call	_stop	;wreg free
  1337   001128                     
  1338                           ;../main.c: 100:                 color_read(&RGB_recorded);
  1339   001128  0EF6               	movlw	low main@RGB_recorded
  1340   00112A  6E0C               	movwf	color_read@rgb^0,c
  1341   00112C  0E01               	movlw	high main@RGB_recorded
  1342   00112E  6E0D               	movwf	(color_read@rgb+1)^0,c
  1343   001130  EC80  F011         	call	_color_read	;wreg free
  1344   001134                     
  1345                           ;../main.c: 101:                 if (LATDbits.LATD7){color_name = color_processor_easy(&
      +                          RGB_recorded);}
  1346   001134  AE7C               	btfss	124,7,c	;volatile
  1347   001136  EF9F  F008         	goto	u1801
  1348   00113A  EFA1  F008         	goto	u1800
  1349   00113E                     u1801:
  1350   00113E  EFAD  F008         	goto	l3059
  1351   001142                     u1800:
  1352   001142  0EF6               	movlw	low main@RGB_recorded
  1353   001144  6E01               	movwf	color_processor_easy@rgb^0,c
  1354   001146  0E01               	movlw	high main@RGB_recorded
  1355   001148  6E02               	movwf	(color_processor_easy@rgb+1)^0,c
  1356   00114A  EC21  F011         	call	_color_processor_easy	;wreg free
  1357   00114E  C001  F1F0         	movff	?_color_processor_easy,main@color_name
  1358   001152  C002  F1F1         	movff	?_color_processor_easy+1,main@color_name+1
  1359   001156  EFBB  F008         	goto	l3061
  1360   00115A                     l3059:
  1361   00115A  0EF6               	movlw	low main@RGB_recorded
  1362   00115C  6E01               	movwf	color_processor_hard@rgb^0,c
  1363   00115E  0E01               	movlw	high main@RGB_recorded
  1364   001160  6E02               	movwf	(color_processor_hard@rgb+1)^0,c
  1365   001162  0E7A               	movlw	low main@color_calibrated
  1366   001164  6E03               	movwf	color_processor_hard@calibrated^0,c
  1367   001166  0E02               	movlw	high main@color_calibrated
  1368   001168  6E04               	movwf	(color_processor_hard@calibrated+1)^0,c
  1369   00116A  ECE9  F00A         	call	_color_processor_hard	;wreg free
  1370   00116E  C001  F1F0         	movff	?_color_processor_hard,main@color_name
  1371   001172  C002  F1F1         	movff	?_color_processor_hard+1,main@color_name+1
  1372   001176                     l3061:
  1373                           
  1374                           ;../main.c: 103:                 color_path[j] = color_name;
  1375   001176  90D8               	bcf	status,0,c
  1376   001178  0101               	movlb	1	; () banked
  1377   00117A  35E6               	rlcf	main@j& (0+255),w,b
  1378   00117C  6ED9               	movwf	fsr2l,c
  1379   00117E  35E7               	rlcf	(main@j+1)& (0+255),w,b
  1380   001180  6EDA               	movwf	fsr2h,c
  1381   001182  0EDF               	movlw	low main@color_path
  1382   001184  26D9               	addwf	fsr2l,f,c
  1383   001186  0E00               	movlw	high main@color_path
  1384   001188  22DA               	addwfc	fsr2h,f,c
  1385   00118A  C1F0  FFDE         	movff	main@color_name,postinc2
  1386   00118E  C1F1  FFDD         	movff	main@color_name+1,postdec2
  1387   001192                     
  1388                           ; BSR set to: 1
  1389                           ;../main.c: 104:                 time_path[j] = time;
  1390   001192  90D8               	bcf	status,0,c
  1391   001194  35E6               	rlcf	main@j& (0+255),w,b
  1392   001196  6ED9               	movwf	fsr2l,c
  1393   001198  35E7               	rlcf	(main@j+1)& (0+255),w,b
  1394   00119A  6EDA               	movwf	fsr2h,c
  1395   00119C  0EC8               	movlw	low main@time_path
  1396   00119E  26D9               	addwf	fsr2l,f,c
  1397   0011A0  0E01               	movlw	high main@time_path
  1398   0011A2  22DA               	addwfc	fsr2h,f,c
  1399   0011A4  C254  FFDE         	movff	_time,postinc2
  1400   0011A8  C255  FFDD         	movff	_time+1,postdec2
  1401   0011AC                     
  1402                           ; BSR set to: 1
  1403                           ;../main.c: 107:                 char readout3[100];;../main.c: 108:                 spr
      +                          intf(readout3,"%d %d %d %d %d \r\n", color_name,RGB_recorded.L,RGB_recorded.R,RGB_record
      +                          ed.G,RGB_recorded.B);
  1404   0011AC  0E64               	movlw	low main@readout3
  1405   0011AE  0100               	movlb	0	; () banked
  1406   0011B0  6F60               	movwf	sprintf@s& (0+255),b
  1407   0011B2  0E01               	movlw	high main@readout3
  1408   0011B4  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1409   0011B6  0E01               	movlw	low STR_3
  1410   0011B8  6F62               	movwf	sprintf@fmt& (0+255),b
  1411   0011BA  0E0E               	movlw	high STR_3
  1412   0011BC  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1413   0011BE  C1F0  F064         	movff	main@color_name,?_sprintf+4
  1414   0011C2  C1F1  F065         	movff	main@color_name+1,?_sprintf+5
  1415   0011C6  C1F6  F066         	movff	main@RGB_recorded,?_sprintf+6
  1416   0011CA  C1F7  F067         	movff	main@RGB_recorded+1,?_sprintf+7
  1417   0011CE  C1F8  F068         	movff	main@RGB_recorded+2,?_sprintf+8
  1418   0011D2  C1F9  F069         	movff	main@RGB_recorded+3,?_sprintf+9
  1419   0011D6  C1FA  F06A         	movff	main@RGB_recorded+4,?_sprintf+10
  1420   0011DA  C1FB  F06B         	movff	main@RGB_recorded+5,?_sprintf+11
  1421   0011DE  C1FC  F06C         	movff	main@RGB_recorded+6,?_sprintf+12
  1422   0011E2  C1FD  F06D         	movff	main@RGB_recorded+7,?_sprintf+13
  1423   0011E6  EC02  F015         	call	_sprintf	;wreg free
  1424   0011EA                     
  1425                           ;../main.c: 109:                 sendStringSerial4(readout3);
  1426   0011EA  0E64               	movlw	low main@readout3
  1427   0011EC  6E02               	movwf	sendStringSerial4@string^0,c
  1428   0011EE  0E01               	movlw	high main@readout3
  1429   0011F0  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1430   0011F2  EC78  F016         	call	_sendStringSerial4	;wreg free
  1431   0011F6                     
  1432                           ;../main.c: 111:                 motor_action(color_name,&motorL,&motorR);
  1433   0011F6  C1F0  F022         	movff	main@color_name,motor_action@color
  1434   0011FA  C1F1  F023         	movff	main@color_name+1,motor_action@color+1
  1435   0011FE  0ECB               	movlw	low main@motorL
  1436   001200  6E24               	movwf	motor_action@l^0,c
  1437   001202  0E02               	movlw	high main@motorL
  1438   001204  6E25               	movwf	(motor_action@l+1)^0,c
  1439   001206  0EC2               	movlw	low main@motorR
  1440   001208  6E26               	movwf	motor_action@r^0,c
  1441   00120A  0E02               	movlw	high main@motorR
  1442   00120C  6E27               	movwf	(motor_action@r+1)^0,c
  1443   00120E  EC24  F00C         	call	_motor_action	;wreg free
  1444   001212                     
  1445                           ;../main.c: 113:                 j++;
  1446   001212  0101               	movlb	1	; () banked
  1447   001214  4BE6               	infsnz	main@j& (0+255),f,b
  1448   001216  2BE7               	incf	(main@j+1)& (0+255),f,b
  1449   001218                     
  1450                           ; BSR set to: 1
  1451                           ;../main.c: 114:                 time = 0;
  1452   001218  0E00               	movlw	0
  1453   00121A  0102               	movlb	2	; () banked
  1454   00121C  6F55               	movwf	(_time+1)& (0+255),b
  1455   00121E  0E00               	movlw	0
  1456   001220  6F54               	movwf	_time& (0+255),b
  1457   001222                     
  1458                           ; BSR set to: 2
  1459                           ;../main.c: 115:                 color_flag = 0;
  1460   001222  0E00               	movlw	0
  1461   001224  6E5C               	movwf	(main@color_flag+1)^0,c
  1462   001226  0E00               	movlw	0
  1463   001228  6E5B               	movwf	main@color_flag^0,c
  1464   00122A                     l3077:
  1465                           
  1466                           ;../main.c: 117:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1467   00122A  0E11               	movlw	17
  1468   00122C  6E5A               	movwf	(??_main+1)^0,c
  1469   00122E  0E3C               	movlw	60
  1470   001230  6E59               	movwf	??_main^0,c
  1471   001232  0ECB               	movlw	203
  1472   001234                     u1897:
  1473   001234  2EE8               	decfsz	wreg,f,c
  1474   001236  D7FE               	bra	u1897
  1475   001238  2E59               	decfsz	??_main^0,f,c
  1476   00123A  D7FC               	bra	u1897
  1477   00123C  2E5A               	decfsz	(??_main+1)^0,f,c
  1478   00123E  D7FA               	bra	u1897
  1479   001240  F000               	nop	
  1480   001242                     l3079:
  1481                           
  1482                           ;../main.c: 94:         while (color_name != 8){
  1483   001242  0E08               	movlw	8
  1484   001244  0101               	movlb	1	; () banked
  1485   001246  19F0               	xorwf	main@color_name& (0+255),w,b
  1486   001248  11F1               	iorwf	(main@color_name+1)& (0+255),w,b
  1487   00124A  A4D8               	btfss	status,2,c
  1488   00124C  EF2A  F009         	goto	u1811
  1489   001250  EF2C  F009         	goto	u1810
  1490   001254                     u1811:
  1491   001254  EF6C  F008         	goto	l3043
  1492   001258                     u1810:
  1493   001258                     
  1494                           ; BSR set to: 1
  1495                           ;../main.c: 121:         spin_180(&motorL,&motorR);
  1496   001258  0ECB               	movlw	low main@motorL
  1497   00125A  6E1A               	movwf	spin_180@mL^0,c
  1498   00125C  0E02               	movlw	high main@motorL
  1499   00125E  6E1B               	movwf	(spin_180@mL+1)^0,c
  1500   001260  0EC2               	movlw	low main@motorR
  1501   001262  6E1C               	movwf	spin_180@mR^0,c
  1502   001264  0E02               	movlw	high main@motorR
  1503   001266  6E1D               	movwf	(spin_180@mR+1)^0,c
  1504   001268  EC77  F012         	call	_spin_180	;wreg free
  1505   00126C                     
  1506                           ;../main.c: 122:         for (int k=0;k<15;k++){
  1507   00126C  0E00               	movlw	0
  1508   00126E  0101               	movlb	1	; () banked
  1509   001270  6FF3               	movwf	(main@k+1)& (0+255),b
  1510   001272  0E00               	movlw	0
  1511   001274  6FF2               	movwf	main@k& (0+255),b
  1512   001276                     l3085:
  1513                           
  1514                           ; BSR set to: 1
  1515   001276  BFF3               	btfsc	(main@k+1)& (0+255),7,b
  1516   001278  EF47  F009         	goto	u1821
  1517   00127C  51F3               	movf	(main@k+1)& (0+255),w,b
  1518   00127E  E109               	bnz	u1820
  1519   001280  0E0F               	movlw	15
  1520   001282  5DF2               	subwf	main@k& (0+255),w,b
  1521   001284  A0D8               	btfss	status,0,c
  1522   001286  EF47  F009         	goto	u1821
  1523   00128A  EF49  F009         	goto	u1820
  1524   00128E                     u1821:
  1525   00128E  EF4B  F009         	goto	l208
  1526   001292                     u1820:
  1527   001292  EF4B  F007         	goto	l2997
  1528   001296                     l208:
  1529                           
  1530                           ; BSR set to: 1
  1531                           ;../main.c: 123:             INTCONbits.GIE = 0;
  1532   001296  9EF2               	bcf	242,7,c	;volatile
  1533   001298                     
  1534                           ; BSR set to: 1
  1535                           ;../main.c: 124:             time_return = 0;
  1536   001298  0E00               	movlw	0
  1537   00129A  0100               	movlb	0	; () banked
  1538   00129C  6FFE               	movwf	(main@time_return+1)& (0+255),b
  1539   00129E  0E00               	movlw	0
  1540   0012A0  6FFD               	movwf	main@time_return& (0+255),b
  1541   0012A2                     
  1542                           ; BSR set to: 0
  1543                           ;../main.c: 125:             motor_action(color_path[k],&motorL,&motorR);
  1544   0012A2  90D8               	bcf	status,0,c
  1545   0012A4  0101               	movlb	1	; () banked
  1546   0012A6  35F2               	rlcf	main@k& (0+255),w,b
  1547   0012A8  6ED9               	movwf	fsr2l,c
  1548   0012AA  35F3               	rlcf	(main@k+1)& (0+255),w,b
  1549   0012AC  6EDA               	movwf	fsr2h,c
  1550   0012AE  0EDF               	movlw	low main@color_path
  1551   0012B0  26D9               	addwf	fsr2l,f,c
  1552   0012B2  0E00               	movlw	high main@color_path
  1553   0012B4  22DA               	addwfc	fsr2h,f,c
  1554   0012B6  CFDE F022          	movff	postinc2,motor_action@color
  1555   0012BA  CFDD F023          	movff	postdec2,motor_action@color+1
  1556   0012BE  0ECB               	movlw	low main@motorL
  1557   0012C0  6E24               	movwf	motor_action@l^0,c
  1558   0012C2  0E02               	movlw	high main@motorL
  1559   0012C4  6E25               	movwf	(motor_action@l+1)^0,c
  1560   0012C6  0EC2               	movlw	low main@motorR
  1561   0012C8  6E26               	movwf	motor_action@r^0,c
  1562   0012CA  0E02               	movlw	high main@motorR
  1563   0012CC  6E27               	movwf	(motor_action@r+1)^0,c
  1564   0012CE  EC24  F00C         	call	_motor_action	;wreg free
  1565   0012D2                     
  1566                           ;../main.c: 126:             forward(&motorL,&motorR);
  1567   0012D2  0ECB               	movlw	low main@motorL
  1568   0012D4  6E1A               	movwf	forward@mL^0,c
  1569   0012D6  0E02               	movlw	high main@motorL
  1570   0012D8  6E1B               	movwf	(forward@mL+1)^0,c
  1571   0012DA  0EC2               	movlw	low main@motorR
  1572   0012DC  6E1C               	movwf	forward@mR^0,c
  1573   0012DE  0E02               	movlw	high main@motorR
  1574   0012E0  6E1D               	movwf	(forward@mR+1)^0,c
  1575   0012E2  EC53  F014         	call	_forward	;wreg free
  1576                           
  1577                           ;../main.c: 127:             while (time_return < time_path[k]) {
  1578   0012E6  EF84  F009         	goto	l3099
  1579   0012EA                     l3095:
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;../main.c: 128:                 _delay((unsigned long)((50)*(64000000/4000.0)));
  1583   0012EA  0E05               	movlw	5
  1584   0012EC  6E5A               	movwf	(??_main+1)^0,c
  1585   0012EE  0E0F               	movlw	15
  1586   0012F0  6E59               	movwf	??_main^0,c
  1587   0012F2  0EF1               	movlw	241
  1588   0012F4                     u1907:
  1589   0012F4  2EE8               	decfsz	wreg,f,c
  1590   0012F6  D7FE               	bra	u1907
  1591   0012F8  2E59               	decfsz	??_main^0,f,c
  1592   0012FA  D7FC               	bra	u1907
  1593   0012FC  2E5A               	decfsz	(??_main+1)^0,f,c
  1594   0012FE  D7FA               	bra	u1907
  1595   001300  F000               	nop	
  1596   001302                     
  1597                           ;../main.c: 129:                 time_return++;
  1598   001302  0100               	movlb	0	; () banked
  1599   001304  4BFD               	infsnz	main@time_return& (0+255),f,b
  1600   001306  2BFE               	incf	(main@time_return+1)& (0+255),f,b
  1601   001308                     l3099:
  1602                           
  1603                           ;../main.c: 127:             while (time_return < time_path[k]) {
  1604   001308  90D8               	bcf	status,0,c
  1605   00130A  0101               	movlb	1	; () banked
  1606   00130C  35F2               	rlcf	main@k& (0+255),w,b
  1607   00130E  6ED9               	movwf	fsr2l,c
  1608   001310  35F3               	rlcf	(main@k+1)& (0+255),w,b
  1609   001312  6EDA               	movwf	fsr2h,c
  1610   001314  0EC8               	movlw	low main@time_path
  1611   001316  26D9               	addwf	fsr2l,f,c
  1612   001318  0E01               	movlw	high main@time_path
  1613   00131A  22DA               	addwfc	fsr2h,f,c
  1614   00131C  50DE               	movf	postinc2,w,c
  1615   00131E  0100               	movlb	0	; () banked
  1616   001320  5DFD               	subwf	main@time_return& (0+255),w,b
  1617   001322  50DE               	movf	postinc2,w,c
  1618   001324  59FE               	subwfb	(main@time_return+1)& (0+255),w,b
  1619   001326  A0D8               	btfss	status,0,c
  1620   001328  EF98  F009         	goto	u1831
  1621   00132C  EF9A  F009         	goto	u1830
  1622   001330                     u1831:
  1623   001330  EF75  F009         	goto	l3095
  1624   001334                     u1830:
  1625   001334                     
  1626                           ; BSR set to: 0
  1627                           ;../main.c: 131:             stop(&motorL,&motorR);
  1628   001334  0ECB               	movlw	low main@motorL
  1629   001336  6E1A               	movwf	stop@mL^0,c
  1630   001338  0E02               	movlw	high main@motorL
  1631   00133A  6E1B               	movwf	(stop@mL+1)^0,c
  1632   00133C  0EC2               	movlw	low main@motorR
  1633   00133E  6E1C               	movwf	stop@mR^0,c
  1634   001340  0E02               	movlw	high main@motorR
  1635   001342  6E1D               	movwf	(stop@mR+1)^0,c
  1636   001344  EC0C  F014         	call	_stop	;wreg free
  1637   001348                     
  1638                           ;../main.c: 132:         }
  1639   001348  0101               	movlb	1	; () banked
  1640   00134A  4BF2               	infsnz	main@k& (0+255),f,b
  1641   00134C  2BF3               	incf	(main@k+1)& (0+255),f,b
  1642   00134E  EF3B  F009         	goto	l3085
  1643   001352  EF1F  F000         	goto	start
  1644   001356                     __end_of_main:
  1645                           	callstack 0
  1646                           
  1647 ;; *************** function _sprintf *****************
  1648 ;; Defined at:
  1649 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  s               2    0[BANK0 ] PTR unsigned char 
  1652 ;;		 -> main@readout3(100), main@readout2(100), main@readout1(100), 
  1653 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1654 ;;		 -> STR_3(18), STR_2(15), STR_1(15), 
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;  f              11   16[BANK0 ] struct _IO_FILE
  1657 ;;  ap              2   14[BANK0 ] PTR void [1]
  1658 ;;		 -> ?_sprintf(2), 
  1659 ;;  ret             2    0        int 
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  2    0[BANK0 ] int 
  1662 ;; Registers used:
  1663 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1669 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1670 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1672 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1673 ;;Total ram usage:       27 bytes
  1674 ;; Hardware stack levels used: 1
  1675 ;; Hardware stack levels required when called: 8
  1676 ;; This function calls:
  1677 ;;		_vfprintf
  1678 ;; This function is called by:
  1679 ;;		_main
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text1
  1684   002A04                     __ptext1:
  1685                           	callstack 0
  1686   002A04                     _sprintf:
  1687                           	callstack 22
  1688   002A04  0E64               	movlw	low (?_sprintf+4)
  1689   002A06  0100               	movlb	0	; () banked
  1690   002A08  6F6E               	movwf	sprintf@ap& (0+255),b
  1691   002A0A  0E00               	movlw	high (?_sprintf+4)
  1692   002A0C  6F6F               	movwf	(sprintf@ap+1)& (0+255),b
  1693   002A0E  C060  F070         	movff	sprintf@s,sprintf@f
  1694   002A12  C061  F071         	movff	sprintf@s+1,sprintf@f+1
  1695   002A16                     
  1696                           ; BSR set to: 0
  1697   002A16  0E00               	movlw	0
  1698   002A18  6F74               	movwf	(sprintf@f+4)& (0+255),b
  1699   002A1A  0E00               	movlw	0
  1700   002A1C  6F73               	movwf	(sprintf@f+3)& (0+255),b
  1701   002A1E                     
  1702                           ; BSR set to: 0
  1703   002A1E  0E00               	movlw	0
  1704   002A20  6F7A               	movwf	(sprintf@f+10)& (0+255),b
  1705   002A22  0E00               	movlw	0
  1706   002A24  6F79               	movwf	(sprintf@f+9)& (0+255),b
  1707   002A26                     
  1708                           ; BSR set to: 0
  1709   002A26  0E70               	movlw	low sprintf@f
  1710   002A28  6E51               	movwf	vfprintf@fp^0,c
  1711   002A2A  0E00               	movlw	high sprintf@f
  1712   002A2C  6E52               	movwf	(vfprintf@fp+1)^0,c
  1713   002A2E  C062  F053         	movff	sprintf@fmt,vfprintf@fmt
  1714   002A32  C063  F054         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1715   002A36  0E6E               	movlw	low sprintf@ap
  1716   002A38  6E55               	movwf	vfprintf@ap^0,c
  1717   002A3A  0E00               	movlw	high sprintf@ap
  1718   002A3C  6E56               	movwf	(vfprintf@ap+1)^0,c
  1719   002A3E  EC2B  F015         	call	_vfprintf	;wreg free
  1720   002A42  0100               	movlb	0	; () banked
  1721   002A44  5173               	movf	(sprintf@f+3)& (0+255),w,b
  1722   002A46  2560               	addwf	sprintf@s& (0+255),w,b
  1723   002A48  6ED9               	movwf	fsr2l,c
  1724   002A4A  5174               	movf	(sprintf@f+4)& (0+255),w,b
  1725   002A4C  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  1726   002A4E  6EDA               	movwf	fsr2h,c
  1727   002A50  0E00               	movlw	0
  1728   002A52  6EDF               	movwf	indf2,c
  1729   002A54                     
  1730                           ; BSR set to: 0
  1731   002A54  0012               	return		;funcret
  1732   002A56                     __end_of_sprintf:
  1733                           	callstack 0
  1734                           
  1735 ;; *************** function _vfprintf *****************
  1736 ;; Defined at:
  1737 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
  1740 ;;		 -> sprintf@f(11), 
  1741 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
  1742 ;;		 -> STR_3(18), STR_2(15), STR_1(15), 
  1743 ;;  ap              2   84[COMRAM] PTR PTR void 
  1744 ;;		 -> sprintf@ap(2), 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;  cfmt            2   86[COMRAM] PTR unsigned char 
  1747 ;;		 -> STR_3(18), STR_2(15), STR_1(15), 
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  2   80[COMRAM] int 
  1750 ;; Registers used:
  1751 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1757 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1758 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1760 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1761 ;;Total ram usage:        8 bytes
  1762 ;; Hardware stack levels used: 1
  1763 ;; Hardware stack levels required when called: 7
  1764 ;; This function calls:
  1765 ;;		_vfpfcnvrt
  1766 ;; This function is called by:
  1767 ;;		_sprintf
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           	psect	text2
  1772   002A56                     __ptext2:
  1773                           	callstack 0
  1774   002A56                     _vfprintf:
  1775                           	callstack 22
  1776   002A56                     
  1777                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  1778   002A56  C053  F057         	movff	vfprintf@fmt,vfprintf@cfmt
  1779   002A5A  C054  F058         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1780                           
  1781                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1782   002A5E  EF3F  F015         	goto	l2721
  1783   002A62                     l2719:
  1784                           
  1785                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1786   002A62  C051  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1787   002A66  C052  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1788   002A6A  0E57               	movlw	low vfprintf@cfmt
  1789   002A6C  6E41               	movwf	vfpfcnvrt@fmt^0,c
  1790   002A6E  0E00               	movlw	high vfprintf@cfmt
  1791   002A70  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1792   002A72  C055  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
  1793   002A76  C056  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1794   002A7A  ECAB  F00F         	call	_vfpfcnvrt	;wreg free
  1795   002A7E                     l2721:
  1796                           
  1797                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1798   002A7E  C057  FFF6         	movff	vfprintf@cfmt,tblptrl
  1799   002A82  C058  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1800   002A86                     	if	0	;tblptru may be non-zero
  1801   002A86                     	endif
  1802   002A86                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1803   002A86  0E00               	movlw	low (__mediumconst shr (0+16))
  1804   002A88  6EF8               	movwf	tblptru,c
  1805   002A8A                     	endif
  1806   002A8A  0008               	tblrd		*
  1807   002A8C  50F5               	movf	tablat,w,c
  1808   002A8E  0900               	iorlw	0
  1809   002A90  A4D8               	btfss	status,2,c
  1810   002A92  EF4D  F015         	goto	u1511
  1811   002A96  EF4F  F015         	goto	u1510
  1812   002A9A                     u1511:
  1813   002A9A  EF31  F015         	goto	l2719
  1814   002A9E                     u1510:
  1815   002A9E                     
  1816                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  1817   002A9E  0E00               	movlw	0
  1818   002AA0  6E52               	movwf	(?_vfprintf+1)^0,c
  1819   002AA2  0E00               	movlw	0
  1820   002AA4  6E51               	movwf	?_vfprintf^0,c
  1821   002AA6  0012               	return		;funcret
  1822   002AA8                     __end_of_vfprintf:
  1823                           	callstack 0
  1824                           
  1825 ;; *************** function _vfpfcnvrt *****************
  1826 ;; Defined at:
  1827 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
  1830 ;;		 -> sprintf@f(11), 
  1831 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
  1832 ;;		 -> vfprintf@cfmt(2), 
  1833 ;;  ap              2   66[COMRAM] PTR PTR void 
  1834 ;;		 -> sprintf@ap(2), 
  1835 ;; Auto vars:     Size  Location     Type
  1836 ;;  convarg         8   70[COMRAM] struct .
  1837 ;;  cp              2   78[COMRAM] PTR unsigned char 
  1838 ;;		 -> STR_3(18), STR_2(15), STR_1(15), 
  1839 ;;  i               2    0        int 
  1840 ;;  done            2    0        int 
  1841 ;;  c               1    0        unsigned char 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  1    wreg      void 
  1844 ;; Registers used:
  1845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1851 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1852 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1853 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1854 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1855 ;;Total ram usage:       18 bytes
  1856 ;; Hardware stack levels used: 1
  1857 ;; Hardware stack levels required when called: 6
  1858 ;; This function calls:
  1859 ;;		_dtoa
  1860 ;;		_fputc
  1861 ;; This function is called by:
  1862 ;;		_vfprintf
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866                           	psect	text3
  1867   001F56                     __ptext3:
  1868                           	callstack 0
  1869   001F56                     _vfpfcnvrt:
  1870                           	callstack 22
  1871   001F56                     
  1872                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  1873   001F56  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1874   001F5A  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1875   001F5E  CFDE FFF6          	movff	postinc2,tblptrl
  1876   001F62  CFDD FFF7          	movff	postdec2,tblptrh
  1877   001F66                     	if	0	;tblptru may be non-zero
  1878   001F66                     	endif
  1879   001F66                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1880   001F66  0E00               	movlw	low (__mediumconst shr (0+16))
  1881   001F68  6EF8               	movwf	tblptru,c
  1882   001F6A                     	endif
  1883   001F6A  0008               	tblrd		*
  1884   001F6C  50F5               	movf	tablat,w,c
  1885   001F6E  0A25               	xorlw	37
  1886   001F70  A4D8               	btfss	status,2,c
  1887   001F72  EFBD  F00F         	goto	u1391
  1888   001F76  EFBF  F00F         	goto	u1390
  1889   001F7A                     u1391:
  1890   001F7A  EF43  F010         	goto	l2485
  1891   001F7E                     u1390:
  1892   001F7E                     
  1893                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  1894   001F7E  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1895   001F82  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1896   001F86  2ADE               	incf	postinc2,f,c
  1897   001F88  0E00               	movlw	0
  1898   001F8A  22DD               	addwfc	postdec2,f,c
  1899   001F8C                     
  1900                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  1901   001F8C  0E00               	movlw	0
  1902   001F8E  0102               	movlb	2	; () banked
  1903   001F90  6F51               	movwf	(_width+1)& (0+255),b
  1904   001F92  0E00               	movlw	0
  1905   001F94  6F50               	movwf	_width& (0+255),b
  1906   001F96  C250  F1FE         	movff	_width,_flags
  1907   001F9A                     
  1908                           ; BSR set to: 2
  1909                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  1910   001F9A  6952               	setf	_prec& (0+255),b
  1911   001F9C  6953               	setf	(_prec+1)& (0+255),b
  1912   001F9E                     
  1913                           ; BSR set to: 2
  1914                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1915   001F9E  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1916   001FA2  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1917   001FA6  CFDE F04F          	movff	postinc2,vfpfcnvrt@cp
  1918   001FAA  CFDD F050          	movff	postdec2,vfpfcnvrt@cp+1
  1919   001FAE                     
  1920                           ; BSR set to: 2
  1921                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1922   001FAE  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1923   001FB2  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1924   001FB6                     	if	0	;tblptru may be non-zero
  1925   001FB6                     	endif
  1926   001FB6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1927   001FB6  0E00               	movlw	low (__mediumconst shr (0+16))
  1928   001FB8  6EF8               	movwf	tblptru,c
  1929   001FBA                     	endif
  1930   001FBA  0008               	tblrd		*
  1931   001FBC  50F5               	movf	tablat,w,c
  1932   001FBE  0A64               	xorlw	100
  1933   001FC0  B4D8               	btfsc	status,2,c
  1934   001FC2  EFE5  F00F         	goto	u1401
  1935   001FC6  EFE7  F00F         	goto	u1400
  1936   001FCA                     u1401:
  1937   001FCA  EFF7  F00F         	goto	l2475
  1938   001FCE                     u1400:
  1939   001FCE                     
  1940                           ; BSR set to: 2
  1941   001FCE  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1942   001FD2  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1943   001FD6                     	if	0	;tblptru may be non-zero
  1944   001FD6                     	endif
  1945   001FD6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1946   001FD6  0E00               	movlw	low (__mediumconst shr (0+16))
  1947   001FD8  6EF8               	movwf	tblptru,c
  1948   001FDA                     	endif
  1949   001FDA  0008               	tblrd		*
  1950   001FDC  50F5               	movf	tablat,w,c
  1951   001FDE  0A69               	xorlw	105
  1952   001FE0  A4D8               	btfss	status,2,c
  1953   001FE2  EFF5  F00F         	goto	u1411
  1954   001FE6  EFF7  F00F         	goto	u1410
  1955   001FEA                     u1411:
  1956   001FEA  EF3A  F010         	goto	l2481
  1957   001FEE                     u1410:
  1958   001FEE                     l2475:
  1959                           
  1960                           ; BSR set to: 2
  1961                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1962   001FEE  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1963   001FF2  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1964   001FF6  CFDF F045          	movff	indf2,??_vfpfcnvrt
  1965   001FFA  0E02               	movlw	2
  1966   001FFC  26DE               	addwf	postinc2,f,c
  1967   001FFE  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  1968   002002  0E00               	movlw	0
  1969   002004  22DD               	addwfc	postdec2,f,c
  1970   002006  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1971   00200A  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1972   00200E  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg
  1973   002012  CFDD F048          	movff	postdec2,vfpfcnvrt@convarg+1
  1974   002016  0E00               	movlw	0
  1975   002018  BE48               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1976   00201A  0EFF               	movlw	-1
  1977   00201C  6E49               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1978   00201E  6E4A               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1979   002020  6E4B               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1980   002022  6E4C               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1981   002024  6E4D               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1982   002026  6E4E               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1983                           
  1984                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1985   002028  0E01               	movlw	1
  1986   00202A  244F               	addwf	vfpfcnvrt@cp^0,w,c
  1987   00202C  6E45               	movwf	??_vfpfcnvrt^0,c
  1988   00202E  0E00               	movlw	0
  1989   002030  2050               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1990   002032  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  1991   002034  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1992   002038  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1993   00203C  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  1994   002040  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1995   002044                     
  1996                           ; BSR set to: 2
  1997                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1998   002044  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1999   002048  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2000   00204C  C047  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  2001   002050  C048  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2002   002054  C049  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2003   002058  C04A  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2004   00205C  C04B  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2005   002060  C04C  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2006   002064  C04D  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2007   002068  C04E  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2008   00206C  ECAB  F009         	call	_dtoa	;wreg free
  2009   002070  EF59  F010         	goto	l1169
  2010   002074                     l2481:
  2011                           
  2012                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2013   002074  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2014   002078  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2015   00207C  2ADE               	incf	postinc2,f,c
  2016   00207E  0E00               	movlw	0
  2017   002080  22DD               	addwfc	postdec2,f,c
  2018   002082  EF59  F010         	goto	l1169
  2019   002086                     l2485:
  2020                           
  2021                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2022   002086  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2023   00208A  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2024   00208E  CFDE FFF6          	movff	postinc2,tblptrl
  2025   002092  CFDD FFF7          	movff	postdec2,tblptrh
  2026   002096                     	if	0	;tblptru may be non-zero
  2027   002096                     	endif
  2028   002096                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2029   002096  0E00               	movlw	low (__mediumconst shr (0+16))
  2030   002098  6EF8               	movwf	tblptru,c
  2031   00209A                     	endif
  2032   00209A  0008               	tblrd		*
  2033   00209C  50F5               	movf	tablat,w,c
  2034   00209E  6E01               	movwf	fputc@c^0,c
  2035   0020A0  6A02               	clrf	(fputc@c+1)^0,c
  2036   0020A2  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2037   0020A6  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2038   0020AA  EC5A  F010         	call	_fputc	;wreg free
  2039   0020AE  EF3A  F010         	goto	l2481
  2040   0020B2                     l1169:
  2041   0020B2  0012               	return		;funcret
  2042   0020B4                     __end_of_vfpfcnvrt:
  2043                           	callstack 0
  2044                           
  2045 ;; *************** function _dtoa *****************
  2046 ;; Defined at:
  2047 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2050 ;;		 -> sprintf@f(11), 
  2051 ;;  d               8   29[COMRAM] long long 
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;  n               8   51[COMRAM] long long 
  2054 ;;  i               2   59[COMRAM] int 
  2055 ;;  w               2   49[COMRAM] int 
  2056 ;;  p               2   47[COMRAM] int 
  2057 ;;  s               1   61[COMRAM] unsigned char 
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  1    wreg      void 
  2060 ;; Registers used:
  2061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2067 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2068 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2069 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2070 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2071 ;;Total ram usage:       35 bytes
  2072 ;; Hardware stack levels used: 1
  2073 ;; Hardware stack levels required when called: 5
  2074 ;; This function calls:
  2075 ;;		___aodiv
  2076 ;;		___aomod
  2077 ;;		_abs
  2078 ;;		_pad
  2079 ;; This function is called by:
  2080 ;;		_vfpfcnvrt
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text4
  2085   001356                     __ptext4:
  2086                           	callstack 0
  2087   001356                     _dtoa:
  2088                           	callstack 22
  2089   001356                     
  2090                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2091   001356  C01E  F034         	movff	dtoa@d,dtoa@n
  2092   00135A  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  2093   00135E  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  2094   001362  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  2095   001366  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  2096   00136A  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  2097   00136E  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  2098   001372  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  2099   001376                     
  2100                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2101   001376  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  2102   001378  EFC0  F009         	goto	u1231
  2103   00137C  EFC3  F009         	goto	u1230
  2104   001380                     u1231:
  2105   001380  0E01               	movlw	1
  2106   001382  EFC4  F009         	goto	u1240
  2107   001386                     u1230:
  2108   001386  0E00               	movlw	0
  2109   001388                     u1240:
  2110   001388  6E3E               	movwf	dtoa@s^0,c
  2111   00138A                     
  2112                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2113   00138A  503E               	movf	dtoa@s^0,w,c
  2114   00138C  B4D8               	btfsc	status,2,c
  2115   00138E  EFCB  F009         	goto	u1251
  2116   001392  EFCD  F009         	goto	u1250
  2117   001396                     u1251:
  2118   001396  EFDD  F009         	goto	l2373
  2119   00139A                     u1250:
  2120   00139A                     
  2121                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2122   00139A  1E3B               	comf	(dtoa@n+7)^0,f,c
  2123   00139C  1E3A               	comf	(dtoa@n+6)^0,f,c
  2124   00139E  1E39               	comf	(dtoa@n+5)^0,f,c
  2125   0013A0  1E38               	comf	(dtoa@n+4)^0,f,c
  2126   0013A2  1E37               	comf	(dtoa@n+3)^0,f,c
  2127   0013A4  1E36               	comf	(dtoa@n+2)^0,f,c
  2128   0013A6  1E35               	comf	(dtoa@n+1)^0,f,c
  2129   0013A8  6C34               	negf	dtoa@n^0,c
  2130   0013AA  0E00               	movlw	0
  2131   0013AC  2235               	addwfc	(dtoa@n+1)^0,f,c
  2132   0013AE  2236               	addwfc	(dtoa@n+2)^0,f,c
  2133   0013B0  2237               	addwfc	(dtoa@n+3)^0,f,c
  2134   0013B2  2238               	addwfc	(dtoa@n+4)^0,f,c
  2135   0013B4  2239               	addwfc	(dtoa@n+5)^0,f,c
  2136   0013B6  223A               	addwfc	(dtoa@n+6)^0,f,c
  2137   0013B8  223B               	addwfc	(dtoa@n+7)^0,f,c
  2138   0013BA                     l2373:
  2139                           
  2140                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2141   0013BA  0102               	movlb	2	; () banked
  2142   0013BC  BF53               	btfsc	(_prec+1)& (0+255),7,b
  2143   0013BE  EFEB  F009         	goto	u1260
  2144   0013C2  5153               	movf	(_prec+1)& (0+255),w,b
  2145   0013C4  E106               	bnz	u1261
  2146   0013C6  0552               	decf	_prec& (0+255),w,b
  2147   0013C8  B0D8               	btfsc	status,0,c
  2148   0013CA  EFE9  F009         	goto	u1261
  2149   0013CE  EFEB  F009         	goto	u1260
  2150   0013D2                     u1261:
  2151   0013D2  EFF1  F009         	goto	l1148
  2152   0013D6                     u1260:
  2153   0013D6                     
  2154                           ; BSR set to: 2
  2155   0013D6  0E00               	movlw	0
  2156   0013D8  6E31               	movwf	(dtoa@p+1)^0,c
  2157   0013DA  0E01               	movlw	1
  2158   0013DC  6E30               	movwf	dtoa@p^0,c
  2159   0013DE  EFF5  F009         	goto	l1150
  2160   0013E2                     l1148:
  2161                           
  2162                           ; BSR set to: 2
  2163   0013E2  C252  F030         	movff	_prec,dtoa@p
  2164   0013E6  C253  F031         	movff	_prec+1,dtoa@p+1
  2165   0013EA                     l1150:
  2166                           
  2167                           ; BSR set to: 2
  2168                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2169   0013EA  C250  F032         	movff	_width,dtoa@w
  2170   0013EE  C251  F033         	movff	_width+1,dtoa@w+1
  2171   0013F2                     
  2172                           ; BSR set to: 2
  2173                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2174   0013F2  503E               	movf	dtoa@s^0,w,c
  2175   0013F4  B4D8               	btfsc	status,2,c
  2176   0013F6  EFFF  F009         	goto	u1271
  2177   0013FA  EF01  F00A         	goto	u1270
  2178   0013FE                     u1271:
  2179   0013FE  EF18  F00A         	goto	l1151
  2180   001402                     u1270:
  2181   001402                     
  2182                           ; BSR set to: 2
  2183                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2184   001402  0632               	decf	dtoa@w^0,f,c
  2185   001404  A0D8               	btfss	status,0,c
  2186   001406  0633               	decf	(dtoa@w+1)^0,f,c
  2187   001408                     
  2188                           ; BSR set to: 2
  2189                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2190   001408  503E               	movf	dtoa@s^0,w,c
  2191   00140A  A4D8               	btfss	status,2,c
  2192   00140C  EF0A  F00A         	goto	u1281
  2193   001410  EF0C  F00A         	goto	u1280
  2194   001414                     u1281:
  2195   001414  EF12  F00A         	goto	l2385
  2196   001418                     u1280:
  2197   001418                     
  2198                           ; BSR set to: 2
  2199   001418  0E00               	movlw	0
  2200   00141A  6E2F               	movwf	(_dtoa$2417+1)^0,c
  2201   00141C  0E2B               	movlw	43
  2202   00141E  6E2E               	movwf	_dtoa$2417^0,c
  2203   001420  EF16  F00A         	goto	l2387
  2204   001424                     l2385:
  2205                           
  2206                           ; BSR set to: 2
  2207   001424  0E00               	movlw	0
  2208   001426  6E2F               	movwf	(_dtoa$2417+1)^0,c
  2209   001428  0E2D               	movlw	45
  2210   00142A  6E2E               	movwf	_dtoa$2417^0,c
  2211   00142C                     l2387:
  2212                           
  2213                           ; BSR set to: 2
  2214   00142C  C02E  F03E         	movff	_dtoa$2417,dtoa@s
  2215   001430                     l1151:
  2216                           
  2217                           ; BSR set to: 2
  2218                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2219   001430  0E00               	movlw	0
  2220   001432  6E3D               	movwf	(dtoa@i+1)^0,c
  2221   001434  0E1F               	movlw	31
  2222   001436  6E3C               	movwf	dtoa@i^0,c
  2223   001438                     
  2224                           ; BSR set to: 2
  2225                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2226   001438  0E00               	movlw	0
  2227   00143A  6F79               	movwf	(_dbuf+31)& (0+255),b
  2228                           
  2229                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2230   00143C  EF9C  F00A         	goto	l2401
  2231   001440                     l2391:
  2232                           
  2233                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2234   001440  063C               	decf	dtoa@i^0,f,c
  2235   001442  A0D8               	btfss	status,0,c
  2236   001444  063D               	decf	(dtoa@i+1)^0,f,c
  2237   001446                     
  2238                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2239   001446  0E5A               	movlw	low _dbuf
  2240   001448  243C               	addwf	dtoa@i^0,w,c
  2241   00144A  6ED9               	movwf	fsr2l,c
  2242   00144C  0E02               	movlw	high _dbuf
  2243   00144E  203D               	addwfc	(dtoa@i+1)^0,w,c
  2244   001450  6EDA               	movwf	fsr2h,c
  2245   001452  C034  F001         	movff	dtoa@n,___aomod@dividend
  2246   001456  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  2247   00145A  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  2248   00145E  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  2249   001462  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  2250   001466  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  2251   00146A  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  2252   00146E  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  2253   001472  0E0A               	movlw	10
  2254   001474  6E09               	movwf	___aomod@divisor^0,c
  2255   001476  0E00               	movlw	0
  2256   001478  6E0A               	movwf	(___aomod@divisor+1)^0,c
  2257   00147A  0E00               	movlw	0
  2258   00147C  6E0B               	movwf	(___aomod@divisor+2)^0,c
  2259   00147E  0E00               	movlw	0
  2260   001480  6E0C               	movwf	(___aomod@divisor+3)^0,c
  2261   001482  0E00               	movlw	0
  2262   001484  6E0D               	movwf	(___aomod@divisor+4)^0,c
  2263   001486  0E00               	movlw	0
  2264   001488  6E0E               	movwf	(___aomod@divisor+5)^0,c
  2265   00148A  0E00               	movlw	0
  2266   00148C  6E0F               	movwf	(___aomod@divisor+6)^0,c
  2267   00148E  0E00               	movlw	0
  2268   001490  6E10               	movwf	(___aomod@divisor+7)^0,c
  2269   001492  ECF9  F00E         	call	___aomod	;wreg free
  2270   001496  C001  F026         	movff	?___aomod,??_dtoa
  2271   00149A  C002  F027         	movff	?___aomod+1,??_dtoa+1
  2272   00149E  C003  F028         	movff	?___aomod+2,??_dtoa+2
  2273   0014A2  C004  F029         	movff	?___aomod+3,??_dtoa+3
  2274   0014A6  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  2275   0014AA  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  2276   0014AE  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  2277   0014B2  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  2278   0014B6  C026  F013         	movff	??_dtoa,abs@a
  2279   0014BA  C027  F014         	movff	??_dtoa+1,abs@a+1
  2280   0014BE  EC58  F016         	call	_abs	;wreg free
  2281   0014C2  5013               	movf	?_abs^0,w,c
  2282   0014C4  0F30               	addlw	48
  2283   0014C6  6EDF               	movwf	indf2,c
  2284   0014C8                     
  2285                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2286   0014C8  0630               	decf	dtoa@p^0,f,c
  2287   0014CA  A0D8               	btfss	status,0,c
  2288   0014CC  0631               	decf	(dtoa@p+1)^0,f,c
  2289   0014CE                     
  2290                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2291   0014CE  0632               	decf	dtoa@w^0,f,c
  2292   0014D0  A0D8               	btfss	status,0,c
  2293   0014D2  0633               	decf	(dtoa@w+1)^0,f,c
  2294   0014D4                     
  2295                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2296   0014D4  C034  F001         	movff	dtoa@n,___aodiv@dividend
  2297   0014D8  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  2298   0014DC  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  2299   0014E0  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  2300   0014E4  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  2301   0014E8  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  2302   0014EC  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  2303   0014F0  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  2304   0014F4  0E0A               	movlw	10
  2305   0014F6  6E09               	movwf	___aodiv@divisor^0,c
  2306   0014F8  0E00               	movlw	0
  2307   0014FA  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  2308   0014FC  0E00               	movlw	0
  2309   0014FE  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  2310   001500  0E00               	movlw	0
  2311   001502  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  2312   001504  0E00               	movlw	0
  2313   001506  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  2314   001508  0E00               	movlw	0
  2315   00150A  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  2316   00150C  0E00               	movlw	0
  2317   00150E  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  2318   001510  0E00               	movlw	0
  2319   001512  6E10               	movwf	(___aodiv@divisor+7)^0,c
  2320   001514  EC35  F00E         	call	___aodiv	;wreg free
  2321   001518  C001  F034         	movff	?___aodiv,dtoa@n
  2322   00151C  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  2323   001520  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  2324   001524  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  2325   001528  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  2326   00152C  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  2327   001530  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  2328   001534  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  2329   001538                     l2401:
  2330                           
  2331                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2332   001538  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  2333   00153A  EFA7  F00A         	goto	u1291
  2334   00153E  503D               	movf	(dtoa@i+1)^0,w,c
  2335   001540  E108               	bnz	u1290
  2336   001542  043C               	decf	dtoa@i^0,w,c
  2337   001544  A0D8               	btfss	status,0,c
  2338   001546  EFA7  F00A         	goto	u1291
  2339   00154A  EFA9  F00A         	goto	u1290
  2340   00154E                     u1291:
  2341   00154E  EFC5  F00A         	goto	l2407
  2342   001552                     u1290:
  2343   001552  5034               	movf	dtoa@n^0,w,c
  2344   001554  1035               	iorwf	(dtoa@n+1)^0,w,c
  2345   001556  1036               	iorwf	(dtoa@n+2)^0,w,c
  2346   001558  1037               	iorwf	(dtoa@n+3)^0,w,c
  2347   00155A  1038               	iorwf	(dtoa@n+4)^0,w,c
  2348   00155C  1039               	iorwf	(dtoa@n+5)^0,w,c
  2349   00155E  103A               	iorwf	(dtoa@n+6)^0,w,c
  2350   001560  103B               	iorwf	(dtoa@n+7)^0,w,c
  2351   001562  A4D8               	btfss	status,2,c
  2352   001564  EFB6  F00A         	goto	u1301
  2353   001568  EFB8  F00A         	goto	u1300
  2354   00156C                     u1301:
  2355   00156C  EF20  F00A         	goto	l2391
  2356   001570                     u1300:
  2357   001570  BE31               	btfsc	(dtoa@p+1)^0,7,c
  2358   001572  EFC5  F00A         	goto	u1310
  2359   001576  5031               	movf	(dtoa@p+1)^0,w,c
  2360   001578  E106               	bnz	u1311
  2361   00157A  0430               	decf	dtoa@p^0,w,c
  2362   00157C  B0D8               	btfsc	status,0,c
  2363   00157E  EFC3  F00A         	goto	u1311
  2364   001582  EFC5  F00A         	goto	u1310
  2365   001586                     u1311:
  2366   001586  EF20  F00A         	goto	l2391
  2367   00158A                     u1310:
  2368   00158A                     l2407:
  2369                           
  2370                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2371   00158A  503E               	movf	dtoa@s^0,w,c
  2372   00158C  B4D8               	btfsc	status,2,c
  2373   00158E  EFCB  F00A         	goto	u1321
  2374   001592  EFCD  F00A         	goto	u1320
  2375   001596                     u1321:
  2376   001596  EFD8  F00A         	goto	l2413
  2377   00159A                     u1320:
  2378   00159A                     
  2379                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2380   00159A  063C               	decf	dtoa@i^0,f,c
  2381   00159C  A0D8               	btfss	status,0,c
  2382   00159E  063D               	decf	(dtoa@i+1)^0,f,c
  2383   0015A0                     
  2384                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2385   0015A0  0E5A               	movlw	low _dbuf
  2386   0015A2  243C               	addwf	dtoa@i^0,w,c
  2387   0015A4  6ED9               	movwf	fsr2l,c
  2388   0015A6  0E02               	movlw	high _dbuf
  2389   0015A8  203D               	addwfc	(dtoa@i+1)^0,w,c
  2390   0015AA  6EDA               	movwf	fsr2h,c
  2391   0015AC  C03E  FFDF         	movff	dtoa@s,indf2
  2392   0015B0                     l2413:
  2393                           
  2394                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2395   0015B0  C01C  F011         	movff	dtoa@fp,pad@fp
  2396   0015B4  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  2397   0015B8  0E5A               	movlw	low _dbuf
  2398   0015BA  243C               	addwf	dtoa@i^0,w,c
  2399   0015BC  6E13               	movwf	pad@buf^0,c
  2400   0015BE  0E02               	movlw	high _dbuf
  2401   0015C0  203D               	addwfc	(dtoa@i+1)^0,w,c
  2402   0015C2  6E14               	movwf	(pad@buf+1)^0,c
  2403   0015C4  C032  F015         	movff	dtoa@w,pad@p
  2404   0015C8  C033  F016         	movff	dtoa@w+1,pad@p+1
  2405   0015CC  EC98  F014         	call	_pad	;wreg free
  2406   0015D0  0012               	return		;funcret
  2407   0015D2                     __end_of_dtoa:
  2408                           	callstack 0
  2409                           
  2410 ;; *************** function _pad *****************
  2411 ;; Defined at:
  2412 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  2415 ;;		 -> sprintf@f(11), 
  2416 ;;  buf             2   18[COMRAM] PTR unsigned char 
  2417 ;;		 -> dbuf(32), 
  2418 ;;  p               2   20[COMRAM] int 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;  w               2   25[COMRAM] int 
  2421 ;;  i               2   23[COMRAM] int 
  2422 ;; Return value:  Size  Location     Type
  2423 ;;                  1    wreg      void 
  2424 ;; Registers used:
  2425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2426 ;; Tracked objects:
  2427 ;;		On entry : 0/0
  2428 ;;		On exit  : 0/0
  2429 ;;		Unchanged: 0/0
  2430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2431 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2432 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2433 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2434 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2435 ;;Total ram usage:       11 bytes
  2436 ;; Hardware stack levels used: 1
  2437 ;; Hardware stack levels required when called: 4
  2438 ;; This function calls:
  2439 ;;		_fputc
  2440 ;;		_fputs
  2441 ;; This function is called by:
  2442 ;;		_dtoa
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text5
  2447   002930                     __ptext5:
  2448                           	callstack 0
  2449   002930                     _pad:
  2450                           	callstack 22
  2451   002930                     
  2452                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  2453   002930  BE16               	btfsc	(pad@p+1)^0,7,c
  2454   002932  EF9D  F014         	goto	u1121
  2455   002936  EF9F  F014         	goto	u1120
  2456   00293A                     u1121:
  2457   00293A  EFA5  F014         	goto	l2297
  2458   00293E                     u1120:
  2459   00293E  C015  F01A         	movff	pad@p,pad@w
  2460   002942  C016  F01B         	movff	pad@p+1,pad@w+1
  2461   002946  EFA9  F014         	goto	l1139
  2462   00294A                     l2297:
  2463   00294A  0E00               	movlw	0
  2464   00294C  6E1B               	movwf	(pad@w+1)^0,c
  2465   00294E  0E00               	movlw	0
  2466   002950  6E1A               	movwf	pad@w^0,c
  2467   002952                     l1139:
  2468                           
  2469                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  2470   002952  0E00               	movlw	0
  2471   002954  6E19               	movwf	(pad@i+1)^0,c
  2472   002956  0E00               	movlw	0
  2473   002958  6E18               	movwf	pad@i^0,c
  2474                           
  2475                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2476   00295A  EFBB  F014         	goto	l2303
  2477   00295E                     l2299:
  2478                           
  2479                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  2480   00295E  0E00               	movlw	0
  2481   002960  6E02               	movwf	(fputc@c+1)^0,c
  2482   002962  0E20               	movlw	32
  2483   002964  6E01               	movwf	fputc@c^0,c
  2484   002966  C011  F003         	movff	pad@fp,fputc@fp
  2485   00296A  C012  F004         	movff	pad@fp+1,fputc@fp+1
  2486   00296E  EC5A  F010         	call	_fputc	;wreg free
  2487   002972                     
  2488                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  2489   002972  4A18               	infsnz	pad@i^0,f,c
  2490   002974  2A19               	incf	(pad@i+1)^0,f,c
  2491   002976                     l2303:
  2492                           
  2493                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2494   002976  501A               	movf	pad@w^0,w,c
  2495   002978  5C18               	subwf	pad@i^0,w,c
  2496   00297A  5019               	movf	(pad@i+1)^0,w,c
  2497   00297C  0A80               	xorlw	128
  2498   00297E  6E17               	movwf	??_pad^0,c
  2499   002980  501B               	movf	(pad@w+1)^0,w,c
  2500   002982  0A80               	xorlw	128
  2501   002984  5817               	subwfb	??_pad^0,w,c
  2502   002986  A0D8               	btfss	status,0,c
  2503   002988  EFC8  F014         	goto	u1131
  2504   00298C  EFCA  F014         	goto	u1130
  2505   002990                     u1131:
  2506   002990  EFAF  F014         	goto	l2299
  2507   002994                     u1130:
  2508   002994                     
  2509                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  2510   002994  C013  F00A         	movff	pad@buf,fputs@s
  2511   002998  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2512   00299C  C011  F00C         	movff	pad@fp,fputs@fp
  2513   0029A0  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2514   0029A4  ECF4  F015         	call	_fputs	;wreg free
  2515   0029A8  0012               	return		;funcret
  2516   0029AA                     __end_of_pad:
  2517                           	callstack 0
  2518                           
  2519 ;; *************** function _fputs *****************
  2520 ;; Defined at:
  2521 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2524 ;;		 -> dbuf(32), 
  2525 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  2526 ;;		 -> sprintf@f(11), 
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;  i               2   14[COMRAM] int 
  2529 ;;  c               1   13[COMRAM] unsigned char 
  2530 ;; Return value:  Size  Location     Type
  2531 ;;                  2    9[COMRAM] int 
  2532 ;; Registers used:
  2533 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2534 ;; Tracked objects:
  2535 ;;		On entry : 0/0
  2536 ;;		On exit  : 0/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2539 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2540 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2542 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2543 ;;Total ram usage:        7 bytes
  2544 ;; Hardware stack levels used: 1
  2545 ;; Hardware stack levels required when called: 3
  2546 ;; This function calls:
  2547 ;;		_fputc
  2548 ;; This function is called by:
  2549 ;;		_pad
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           	psect	text6
  2554   002BE8                     __ptext6:
  2555                           	callstack 0
  2556   002BE8                     _fputs:
  2557                           	callstack 22
  2558   002BE8  0E00               	movlw	0
  2559   002BEA  6E10               	movwf	(fputs@i+1)^0,c
  2560   002BEC  0E00               	movlw	0
  2561   002BEE  6E0F               	movwf	fputs@i^0,c
  2562   002BF0  EF05  F016         	goto	l2211
  2563   002BF4                     l2207:
  2564   002BF4  C00E  F001         	movff	fputs@c,fputc@c
  2565   002BF8  6A02               	clrf	(fputc@c+1)^0,c
  2566   002BFA  C00C  F003         	movff	fputs@fp,fputc@fp
  2567   002BFE  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  2568   002C02  EC5A  F010         	call	_fputc	;wreg free
  2569   002C06  4A0F               	infsnz	fputs@i^0,f,c
  2570   002C08  2A10               	incf	(fputs@i+1)^0,f,c
  2571   002C0A                     l2211:
  2572   002C0A  500F               	movf	fputs@i^0,w,c
  2573   002C0C  240A               	addwf	fputs@s^0,w,c
  2574   002C0E  6ED9               	movwf	fsr2l,c
  2575   002C10  5010               	movf	(fputs@i+1)^0,w,c
  2576   002C12  200B               	addwfc	(fputs@s+1)^0,w,c
  2577   002C14  6EDA               	movwf	fsr2h,c
  2578   002C16  50DF               	movf	indf2,w,c
  2579   002C18  6E0E               	movwf	fputs@c^0,c
  2580   002C1A  500E               	movf	fputs@c^0,w,c
  2581   002C1C  A4D8               	btfss	status,2,c
  2582   002C1E  EF13  F016         	goto	u981
  2583   002C22  EF15  F016         	goto	u980
  2584   002C26                     u981:
  2585   002C26  EFFA  F015         	goto	l2207
  2586   002C2A                     u980:
  2587   002C2A  0012               	return		;funcret
  2588   002C2C                     __end_of_fputs:
  2589                           	callstack 0
  2590                           
  2591 ;; *************** function _fputc *****************
  2592 ;; Defined at:
  2593 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;  c               2    0[COMRAM] int 
  2596 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  2597 ;;		 -> sprintf@f(11), 
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;		None
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  2    0[COMRAM] int 
  2602 ;; Registers used:
  2603 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2609 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2611 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2612 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2613 ;;Total ram usage:        9 bytes
  2614 ;; Hardware stack levels used: 1
  2615 ;; Hardware stack levels required when called: 2
  2616 ;; This function calls:
  2617 ;;		_putch
  2618 ;; This function is called by:
  2619 ;;		_pad
  2620 ;;		_vfpfcnvrt
  2621 ;;		_fputs
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           	psect	text7
  2626   0020B4                     __ptext7:
  2627                           	callstack 0
  2628   0020B4                     _fputc:
  2629                           	callstack 25
  2630   0020B4  5003               	movf	fputc@fp^0,w,c
  2631   0020B6  1004               	iorwf	(fputc@fp+1)^0,w,c
  2632   0020B8  B4D8               	btfsc	status,2,c
  2633   0020BA  EF61  F010         	goto	u941
  2634   0020BE  EF63  F010         	goto	u940
  2635   0020C2                     u941:
  2636   0020C2  EF6C  F010         	goto	l2195
  2637   0020C6                     u940:
  2638   0020C6  5003               	movf	fputc@fp^0,w,c
  2639   0020C8  1004               	iorwf	(fputc@fp+1)^0,w,c
  2640   0020CA  A4D8               	btfss	status,2,c
  2641   0020CC  EF6A  F010         	goto	u951
  2642   0020D0  EF6C  F010         	goto	u950
  2643   0020D4                     u951:
  2644   0020D4  EF71  F010         	goto	l2197
  2645   0020D8                     u950:
  2646   0020D8                     l2195:
  2647   0020D8  5001               	movf	fputc@c^0,w,c
  2648   0020DA  EC39  F017         	call	_putch
  2649   0020DE  EFBE  F010         	goto	l1194
  2650   0020E2                     l2197:
  2651   0020E2  EE20 F009          	lfsr	2,9
  2652   0020E6  5003               	movf	fputc@fp^0,w,c
  2653   0020E8  26D9               	addwf	fsr2l,f,c
  2654   0020EA  5004               	movf	(fputc@fp+1)^0,w,c
  2655   0020EC  22DA               	addwfc	fsr2h,f,c
  2656   0020EE  50DE               	movf	postinc2,w,c
  2657   0020F0  10DE               	iorwf	postinc2,w,c
  2658   0020F2  B4D8               	btfsc	status,2,c
  2659   0020F4  EF7E  F010         	goto	u961
  2660   0020F8  EF80  F010         	goto	u960
  2661   0020FC                     u961:
  2662   0020FC  EF9B  F010         	goto	l2201
  2663   002100                     u960:
  2664   002100  EE20 F009          	lfsr	2,9
  2665   002104  5003               	movf	fputc@fp^0,w,c
  2666   002106  26D9               	addwf	fsr2l,f,c
  2667   002108  5004               	movf	(fputc@fp+1)^0,w,c
  2668   00210A  22DA               	addwfc	fsr2h,f,c
  2669   00210C  EE10 F003          	lfsr	1,3
  2670   002110  5003               	movf	fputc@fp^0,w,c
  2671   002112  26E1               	addwf	fsr1l,f,c
  2672   002114  5004               	movf	(fputc@fp+1)^0,w,c
  2673   002116  22E2               	addwfc	fsr1h,f,c
  2674   002118  50DE               	movf	postinc2,w,c
  2675   00211A  5CE6               	subwf	postinc1,w,c
  2676   00211C  50E6               	movf	postinc1,w,c
  2677   00211E  0A80               	xorlw	128
  2678   002120  6E09               	movwf	(??_fputc+4)^0,c
  2679   002122  50DE               	movf	postinc2,w,c
  2680   002124  0A80               	xorlw	128
  2681   002126  5809               	subwfb	(??_fputc+4)^0,w,c
  2682   002128  B0D8               	btfsc	status,0,c
  2683   00212A  EF99  F010         	goto	u971
  2684   00212E  EF9B  F010         	goto	u970
  2685   002132                     u971:
  2686   002132  EFBE  F010         	goto	l1194
  2687   002136                     u970:
  2688   002136                     l2201:
  2689   002136  EE20 F003          	lfsr	2,3
  2690   00213A  5003               	movf	fputc@fp^0,w,c
  2691   00213C  26D9               	addwf	fsr2l,f,c
  2692   00213E  5004               	movf	(fputc@fp+1)^0,w,c
  2693   002140  22DA               	addwfc	fsr2h,f,c
  2694   002142  CFDE F005          	movff	postinc2,??_fputc
  2695   002146  CFDD F006          	movff	postdec2,??_fputc+1
  2696   00214A  C003  FFD9         	movff	fputc@fp,fsr2l
  2697   00214E  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2698   002152  CFDE F007          	movff	postinc2,??_fputc+2
  2699   002156  CFDD F008          	movff	postdec2,??_fputc+3
  2700   00215A  5005               	movf	??_fputc^0,w,c
  2701   00215C  2407               	addwf	(??_fputc+2)^0,w,c
  2702   00215E  6ED9               	movwf	fsr2l,c
  2703   002160  5006               	movf	(??_fputc+1)^0,w,c
  2704   002162  2008               	addwfc	(??_fputc+3)^0,w,c
  2705   002164  6EDA               	movwf	fsr2h,c
  2706   002166  C001  FFDF         	movff	fputc@c,indf2
  2707   00216A  EE20 F003          	lfsr	2,3
  2708   00216E  5003               	movf	fputc@fp^0,w,c
  2709   002170  26D9               	addwf	fsr2l,f,c
  2710   002172  5004               	movf	(fputc@fp+1)^0,w,c
  2711   002174  22DA               	addwfc	fsr2h,f,c
  2712   002176  2ADE               	incf	postinc2,f,c
  2713   002178  0E00               	movlw	0
  2714   00217A  22DD               	addwfc	postdec2,f,c
  2715   00217C                     l1194:
  2716   00217C  0012               	return		;funcret
  2717   00217E                     __end_of_fputc:
  2718                           	callstack 0
  2719                           
  2720 ;; *************** function _putch *****************
  2721 ;; Defined at:
  2722 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  2723 ;; Parameters:    Size  Location     Type
  2724 ;;  c               1    wreg     unsigned char 
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;  c               1    0[COMRAM] unsigned char 
  2727 ;; Return value:  Size  Location     Type
  2728 ;;                  1    wreg      void 
  2729 ;; Registers used:
  2730 ;;		wreg
  2731 ;; Tracked objects:
  2732 ;;		On entry : 0/0
  2733 ;;		On exit  : 0/0
  2734 ;;		Unchanged: 0/0
  2735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2740 ;;Total ram usage:        0 bytes
  2741 ;; Hardware stack levels used: 1
  2742 ;; Hardware stack levels required when called: 1
  2743 ;; This function calls:
  2744 ;;		Nothing
  2745 ;; This function is called by:
  2746 ;;		_fputc
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           	psect	text8
  2751   002E72                     __ptext8:
  2752                           	callstack 0
  2753   002E72                     _putch:
  2754                           	callstack 25
  2755   002E72  0012               	return		;funcret
  2756   002E74                     __end_of_putch:
  2757                           	callstack 0
  2758                           
  2759 ;; *************** function _abs *****************
  2760 ;; Defined at:
  2761 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;  a               2   18[COMRAM] int 
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;		None
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  2   18[COMRAM] int 
  2768 ;; Registers used:
  2769 ;;		wreg, status,2, status,0
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2775 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2777 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2778 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2779 ;;Total ram usage:        4 bytes
  2780 ;; Hardware stack levels used: 1
  2781 ;; Hardware stack levels required when called: 1
  2782 ;; This function calls:
  2783 ;;		Nothing
  2784 ;; This function is called by:
  2785 ;;		_dtoa
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           	psect	text9
  2790   002CB0                     __ptext9:
  2791                           	callstack 0
  2792   002CB0                     _abs:
  2793                           	callstack 25
  2794   002CB0  BE14               	btfsc	(abs@a+1)^0,7,c
  2795   002CB2  EF65  F016         	goto	u1140
  2796   002CB6  5014               	movf	(abs@a+1)^0,w,c
  2797   002CB8  E106               	bnz	u1141
  2798   002CBA  0413               	decf	abs@a^0,w,c
  2799   002CBC  B0D8               	btfsc	status,0,c
  2800   002CBE  EF63  F016         	goto	u1141
  2801   002CC2  EF65  F016         	goto	u1140
  2802   002CC6                     u1141:
  2803   002CC6  EF73  F016         	goto	l1179
  2804   002CCA                     u1140:
  2805   002CCA  C013  F015         	movff	abs@a,??_abs
  2806   002CCE  C014  F016         	movff	abs@a+1,??_abs+1
  2807   002CD2  1E15               	comf	??_abs^0,f,c
  2808   002CD4  1E16               	comf	(??_abs+1)^0,f,c
  2809   002CD6  4A15               	infsnz	??_abs^0,f,c
  2810   002CD8  2A16               	incf	(??_abs+1)^0,f,c
  2811   002CDA  C015  F013         	movff	??_abs,?_abs
  2812   002CDE  C016  F014         	movff	??_abs+1,?_abs+1
  2813   002CE2  EF77  F016         	goto	l1182
  2814   002CE6                     l1179:
  2815   002CE6  C013  F013         	movff	abs@a,?_abs
  2816   002CEA  C014  F014         	movff	abs@a+1,?_abs+1
  2817   002CEE                     l1182:
  2818   002CEE  0012               	return		;funcret
  2819   002CF0                     __end_of_abs:
  2820                           	callstack 0
  2821                           
  2822 ;; *************** function ___aomod *****************
  2823 ;; Defined at:
  2824 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  dividend        8    0[COMRAM] long long 
  2827 ;;  divisor         8    8[COMRAM] long long 
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;  sign            1   17[COMRAM] unsigned char 
  2830 ;;  counter         1   16[COMRAM] unsigned char 
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  8    0[COMRAM] long long 
  2833 ;; Registers used:
  2834 ;;		wreg, status,2, status,0
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2840 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2841 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2843 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2844 ;;Total ram usage:       18 bytes
  2845 ;; Hardware stack levels used: 1
  2846 ;; Hardware stack levels required when called: 1
  2847 ;; This function calls:
  2848 ;;		Nothing
  2849 ;; This function is called by:
  2850 ;;		_dtoa
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text10
  2855   001DF2                     __ptext10:
  2856                           	callstack 0
  2857   001DF2                     ___aomod:
  2858                           	callstack 25
  2859   001DF2  0E00               	movlw	0
  2860   001DF4  6E12               	movwf	___aomod@sign^0,c
  2861   001DF6  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2862   001DF8  EF02  F00F         	goto	u1060
  2863   001DFC  EF00  F00F         	goto	u1061
  2864   001E00                     u1061:
  2865   001E00  EF14  F00F         	goto	l2265
  2866   001E04                     u1060:
  2867   001E04  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2868   001E06  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2869   001E08  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2870   001E0A  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2871   001E0C  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2872   001E0E  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2873   001E10  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2874   001E12  6C01               	negf	___aomod@dividend^0,c
  2875   001E14  0E00               	movlw	0
  2876   001E16  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2877   001E18  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2878   001E1A  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2879   001E1C  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2880   001E1E  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2881   001E20  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2882   001E22  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2883   001E24  0E01               	movlw	1
  2884   001E26  6E12               	movwf	___aomod@sign^0,c
  2885   001E28                     l2265:
  2886   001E28  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2887   001E2A  EF1B  F00F         	goto	u1070
  2888   001E2E  EF19  F00F         	goto	u1071
  2889   001E32                     u1071:
  2890   001E32  EF2B  F00F         	goto	l2269
  2891   001E36                     u1070:
  2892   001E36  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2893   001E38  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2894   001E3A  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2895   001E3C  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2896   001E3E  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2897   001E40  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2898   001E42  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2899   001E44  6C09               	negf	___aomod@divisor^0,c
  2900   001E46  0E00               	movlw	0
  2901   001E48  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2902   001E4A  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2903   001E4C  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2904   001E4E  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2905   001E50  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2906   001E52  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2907   001E54  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2908   001E56                     l2269:
  2909   001E56  5009               	movf	___aomod@divisor^0,w,c
  2910   001E58  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2911   001E5A  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2912   001E5C  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2913   001E5E  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2914   001E60  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2915   001E62  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2916   001E64  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2917   001E66  B4D8               	btfsc	status,2,c
  2918   001E68  EF38  F00F         	goto	u1081
  2919   001E6C  EF3A  F00F         	goto	u1080
  2920   001E70                     u1081:
  2921   001E70  EF82  F00F         	goto	l2285
  2922   001E74                     u1080:
  2923   001E74  0E01               	movlw	1
  2924   001E76  6E11               	movwf	___aomod@counter^0,c
  2925   001E78  EF48  F00F         	goto	l2275
  2926   001E7C                     l2273:
  2927   001E7C  90D8               	bcf	status,0,c
  2928   001E7E  3609               	rlcf	___aomod@divisor^0,f,c
  2929   001E80  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2930   001E82  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2931   001E84  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2932   001E86  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2933   001E88  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2934   001E8A  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2935   001E8C  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2936   001E8E  2A11               	incf	___aomod@counter^0,f,c
  2937   001E90                     l2275:
  2938   001E90  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2939   001E92  EF4D  F00F         	goto	u1091
  2940   001E96  EF4F  F00F         	goto	u1090
  2941   001E9A                     u1091:
  2942   001E9A  EF3E  F00F         	goto	l2273
  2943   001E9E                     u1090:
  2944   001E9E                     l2277:
  2945   001E9E  5009               	movf	___aomod@divisor^0,w,c
  2946   001EA0  5C01               	subwf	___aomod@dividend^0,w,c
  2947   001EA2  500A               	movf	(___aomod@divisor+1)^0,w,c
  2948   001EA4  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2949   001EA6  500B               	movf	(___aomod@divisor+2)^0,w,c
  2950   001EA8  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2951   001EAA  500C               	movf	(___aomod@divisor+3)^0,w,c
  2952   001EAC  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2953   001EAE  500D               	movf	(___aomod@divisor+4)^0,w,c
  2954   001EB0  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2955   001EB2  500E               	movf	(___aomod@divisor+5)^0,w,c
  2956   001EB4  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2957   001EB6  500F               	movf	(___aomod@divisor+6)^0,w,c
  2958   001EB8  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2959   001EBA  5010               	movf	(___aomod@divisor+7)^0,w,c
  2960   001EBC  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2961   001EBE  A0D8               	btfss	status,0,c
  2962   001EC0  EF64  F00F         	goto	u1101
  2963   001EC4  EF66  F00F         	goto	u1100
  2964   001EC8                     u1101:
  2965   001EC8  EF76  F00F         	goto	l2281
  2966   001ECC                     u1100:
  2967   001ECC  5009               	movf	___aomod@divisor^0,w,c
  2968   001ECE  5E01               	subwf	___aomod@dividend^0,f,c
  2969   001ED0  500A               	movf	(___aomod@divisor+1)^0,w,c
  2970   001ED2  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2971   001ED4  500B               	movf	(___aomod@divisor+2)^0,w,c
  2972   001ED6  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2973   001ED8  500C               	movf	(___aomod@divisor+3)^0,w,c
  2974   001EDA  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2975   001EDC  500D               	movf	(___aomod@divisor+4)^0,w,c
  2976   001EDE  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2977   001EE0  500E               	movf	(___aomod@divisor+5)^0,w,c
  2978   001EE2  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2979   001EE4  500F               	movf	(___aomod@divisor+6)^0,w,c
  2980   001EE6  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2981   001EE8  5010               	movf	(___aomod@divisor+7)^0,w,c
  2982   001EEA  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2983   001EEC                     l2281:
  2984   001EEC  90D8               	bcf	status,0,c
  2985   001EEE  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2986   001EF0  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2987   001EF2  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2988   001EF4  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2989   001EF6  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2990   001EF8  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2991   001EFA  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2992   001EFC  3209               	rrcf	___aomod@divisor^0,f,c
  2993   001EFE  2E11               	decfsz	___aomod@counter^0,f,c
  2994   001F00  EF4F  F00F         	goto	l2277
  2995   001F04                     l2285:
  2996   001F04  5012               	movf	___aomod@sign^0,w,c
  2997   001F06  B4D8               	btfsc	status,2,c
  2998   001F08  EF88  F00F         	goto	u1111
  2999   001F0C  EF8A  F00F         	goto	u1110
  3000   001F10                     u1111:
  3001   001F10  EF9A  F00F         	goto	l2289
  3002   001F14                     u1110:
  3003   001F14  1E08               	comf	(___aomod@dividend+7)^0,f,c
  3004   001F16  1E07               	comf	(___aomod@dividend+6)^0,f,c
  3005   001F18  1E06               	comf	(___aomod@dividend+5)^0,f,c
  3006   001F1A  1E05               	comf	(___aomod@dividend+4)^0,f,c
  3007   001F1C  1E04               	comf	(___aomod@dividend+3)^0,f,c
  3008   001F1E  1E03               	comf	(___aomod@dividend+2)^0,f,c
  3009   001F20  1E02               	comf	(___aomod@dividend+1)^0,f,c
  3010   001F22  6C01               	negf	___aomod@dividend^0,c
  3011   001F24  0E00               	movlw	0
  3012   001F26  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  3013   001F28  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  3014   001F2A  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  3015   001F2C  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  3016   001F2E  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  3017   001F30  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  3018   001F32  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  3019   001F34                     l2289:
  3020   001F34  C001  F001         	movff	___aomod@dividend,?___aomod
  3021   001F38  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  3022   001F3C  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  3023   001F40  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  3024   001F44  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  3025   001F48  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  3026   001F4C  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  3027   001F50  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  3028   001F54  0012               	return		;funcret
  3029   001F56                     __end_of___aomod:
  3030                           	callstack 0
  3031                           
  3032 ;; *************** function ___aodiv *****************
  3033 ;; Defined at:
  3034 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  dividend        8    0[COMRAM] long long 
  3037 ;;  divisor         8    8[COMRAM] long long 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  quotient        8   18[COMRAM] long long 
  3040 ;;  sign            1   17[COMRAM] unsigned char 
  3041 ;;  counter         1   16[COMRAM] unsigned char 
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  8    0[COMRAM] long long 
  3044 ;; Registers used:
  3045 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3051 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3052 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3054 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3055 ;;Total ram usage:       26 bytes
  3056 ;; Hardware stack levels used: 1
  3057 ;; Hardware stack levels required when called: 1
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_dtoa
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text11
  3066   001C6A                     __ptext11:
  3067                           	callstack 0
  3068   001C6A                     ___aodiv:
  3069                           	callstack 25
  3070   001C6A  0E00               	movlw	0
  3071   001C6C  6E12               	movwf	___aodiv@sign^0,c
  3072   001C6E  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  3073   001C70  EF3E  F00E         	goto	u990
  3074   001C74  EF3C  F00E         	goto	u991
  3075   001C78                     u991:
  3076   001C78  EF50  F00E         	goto	l2221
  3077   001C7C                     u990:
  3078   001C7C  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  3079   001C7E  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  3080   001C80  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  3081   001C82  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  3082   001C84  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  3083   001C86  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  3084   001C88  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  3085   001C8A  6C09               	negf	___aodiv@divisor^0,c
  3086   001C8C  0E00               	movlw	0
  3087   001C8E  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  3088   001C90  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  3089   001C92  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  3090   001C94  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  3091   001C96  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  3092   001C98  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  3093   001C9A  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  3094   001C9C  0E01               	movlw	1
  3095   001C9E  6E12               	movwf	___aodiv@sign^0,c
  3096   001CA0                     l2221:
  3097   001CA0  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  3098   001CA2  EF57  F00E         	goto	u1000
  3099   001CA6  EF55  F00E         	goto	u1001
  3100   001CAA                     u1001:
  3101   001CAA  EF69  F00E         	goto	l2227
  3102   001CAE                     u1000:
  3103   001CAE  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  3104   001CB0  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  3105   001CB2  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  3106   001CB4  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  3107   001CB6  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  3108   001CB8  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  3109   001CBA  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  3110   001CBC  6C01               	negf	___aodiv@dividend^0,c
  3111   001CBE  0E00               	movlw	0
  3112   001CC0  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  3113   001CC2  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  3114   001CC4  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  3115   001CC6  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  3116   001CC8  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  3117   001CCA  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  3118   001CCC  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  3119   001CCE  0E01               	movlw	1
  3120   001CD0  1A12               	xorwf	___aodiv@sign^0,f,c
  3121   001CD2                     l2227:
  3122   001CD2  EE20  F013         	lfsr	2,___aodiv@quotient
  3123   001CD6  0E07               	movlw	7
  3124   001CD8                     u1011:
  3125   001CD8  6ADE               	clrf	postinc2,c
  3126   001CDA  06E8               	decf	wreg,f,c
  3127   001CDC  E2FD               	bc	u1011
  3128   001CDE  5009               	movf	___aodiv@divisor^0,w,c
  3129   001CE0  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  3130   001CE2  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  3131   001CE4  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  3132   001CE6  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  3133   001CE8  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  3134   001CEA  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  3135   001CEC  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  3136   001CEE  B4D8               	btfsc	status,2,c
  3137   001CF0  EF7C  F00E         	goto	u1021
  3138   001CF4  EF7E  F00E         	goto	u1020
  3139   001CF8                     u1021:
  3140   001CF8  EFD0  F00E         	goto	l2249
  3141   001CFC                     u1020:
  3142   001CFC  0E01               	movlw	1
  3143   001CFE  6E11               	movwf	___aodiv@counter^0,c
  3144   001D00  EF8C  F00E         	goto	l2235
  3145   001D04                     l2233:
  3146   001D04  90D8               	bcf	status,0,c
  3147   001D06  3609               	rlcf	___aodiv@divisor^0,f,c
  3148   001D08  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  3149   001D0A  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  3150   001D0C  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  3151   001D0E  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  3152   001D10  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  3153   001D12  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  3154   001D14  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  3155   001D16  2A11               	incf	___aodiv@counter^0,f,c
  3156   001D18                     l2235:
  3157   001D18  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  3158   001D1A  EF91  F00E         	goto	u1031
  3159   001D1E  EF93  F00E         	goto	u1030
  3160   001D22                     u1031:
  3161   001D22  EF82  F00E         	goto	l2233
  3162   001D26                     u1030:
  3163   001D26                     l2237:
  3164   001D26  90D8               	bcf	status,0,c
  3165   001D28  3613               	rlcf	___aodiv@quotient^0,f,c
  3166   001D2A  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  3167   001D2C  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  3168   001D2E  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  3169   001D30  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  3170   001D32  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  3171   001D34  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  3172   001D36  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  3173   001D38  5009               	movf	___aodiv@divisor^0,w,c
  3174   001D3A  5C01               	subwf	___aodiv@dividend^0,w,c
  3175   001D3C  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3176   001D3E  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  3177   001D40  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3178   001D42  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  3179   001D44  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3180   001D46  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  3181   001D48  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3182   001D4A  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  3183   001D4C  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3184   001D4E  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  3185   001D50  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3186   001D52  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  3187   001D54  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3188   001D56  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  3189   001D58  A0D8               	btfss	status,0,c
  3190   001D5A  EFB1  F00E         	goto	u1041
  3191   001D5E  EFB3  F00E         	goto	u1040
  3192   001D62                     u1041:
  3193   001D62  EFC4  F00E         	goto	l2245
  3194   001D66                     u1040:
  3195   001D66  5009               	movf	___aodiv@divisor^0,w,c
  3196   001D68  5E01               	subwf	___aodiv@dividend^0,f,c
  3197   001D6A  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3198   001D6C  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  3199   001D6E  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3200   001D70  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  3201   001D72  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3202   001D74  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  3203   001D76  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3204   001D78  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  3205   001D7A  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3206   001D7C  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  3207   001D7E  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3208   001D80  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  3209   001D82  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3210   001D84  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  3211   001D86  8013               	bsf	___aodiv@quotient^0,0,c
  3212   001D88                     l2245:
  3213   001D88  90D8               	bcf	status,0,c
  3214   001D8A  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  3215   001D8C  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  3216   001D8E  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  3217   001D90  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  3218   001D92  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  3219   001D94  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  3220   001D96  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  3221   001D98  3209               	rrcf	___aodiv@divisor^0,f,c
  3222   001D9A  2E11               	decfsz	___aodiv@counter^0,f,c
  3223   001D9C  EF93  F00E         	goto	l2237
  3224   001DA0                     l2249:
  3225   001DA0  5012               	movf	___aodiv@sign^0,w,c
  3226   001DA2  B4D8               	btfsc	status,2,c
  3227   001DA4  EFD6  F00E         	goto	u1051
  3228   001DA8  EFD8  F00E         	goto	u1050
  3229   001DAC                     u1051:
  3230   001DAC  EFE8  F00E         	goto	l2253
  3231   001DB0                     u1050:
  3232   001DB0  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  3233   001DB2  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  3234   001DB4  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  3235   001DB6  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  3236   001DB8  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  3237   001DBA  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  3238   001DBC  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  3239   001DBE  6C13               	negf	___aodiv@quotient^0,c
  3240   001DC0  0E00               	movlw	0
  3241   001DC2  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  3242   001DC4  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  3243   001DC6  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  3244   001DC8  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  3245   001DCA  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  3246   001DCC  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  3247   001DCE  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  3248   001DD0                     l2253:
  3249   001DD0  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3250   001DD4  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3251   001DD8  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3252   001DDC  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3253   001DE0  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3254   001DE4  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3255   001DE8  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3256   001DEC  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3257   001DF0  0012               	return		;funcret
  3258   001DF2                     __end_of___aodiv:
  3259                           	callstack 0
  3260                           
  3261 ;; *************** function _sendStringSerial4 *****************
  3262 ;; Defined at:
  3263 ;;		line 37 in file "../serial.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;  string          2    1[COMRAM] PTR unsigned char 
  3266 ;;		 -> main@readout3(100), main@readout2(100), main@readout1(100), 
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;		None
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      void 
  3271 ;; Registers used:
  3272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3278 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3281 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3282 ;;Total ram usage:        2 bytes
  3283 ;; Hardware stack levels used: 1
  3284 ;; Hardware stack levels required when called: 2
  3285 ;; This function calls:
  3286 ;;		_sendCharSerial4
  3287 ;; This function is called by:
  3288 ;;		_main
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292                           	psect	text12
  3293   002CF0                     __ptext12:
  3294                           	callstack 0
  3295   002CF0                     _sendStringSerial4:
  3296                           	callstack 28
  3297   002CF0                     
  3298                           ;../serial.c: 40:     while (*string != 0)
  3299   002CF0  EF83  F016         	goto	l2895
  3300   002CF4                     l2891:
  3301                           
  3302                           ;../serial.c: 41:     {;../serial.c: 42:         sendCharSerial4(*string++);
  3303   002CF4  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3304   002CF8  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3305   002CFC  50DF               	movf	indf2,w,c
  3306   002CFE  EC0D  F017         	call	_sendCharSerial4
  3307   002D02  4A02               	infsnz	sendStringSerial4@string^0,f,c
  3308   002D04  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  3309   002D06                     l2895:
  3310                           
  3311                           ;../serial.c: 40:     while (*string != 0)
  3312   002D06  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3313   002D0A  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3314   002D0E  50DF               	movf	indf2,w,c
  3315   002D10  A4D8               	btfss	status,2,c
  3316   002D12  EF8D  F016         	goto	u1721
  3317   002D16  EF8F  F016         	goto	u1720
  3318   002D1A                     u1721:
  3319   002D1A  EF7A  F016         	goto	l2891
  3320   002D1E                     u1720:
  3321   002D1E  0012               	return		;funcret
  3322   002D20                     __end_of_sendStringSerial4:
  3323                           	callstack 0
  3324                           
  3325 ;; *************** function _sendCharSerial4 *****************
  3326 ;; Defined at:
  3327 ;;		line 30 in file "../serial.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;  charToSend      1    wreg     unsigned char 
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;  charToSend      1    0[COMRAM] unsigned char 
  3332 ;; Return value:  Size  Location     Type
  3333 ;;                  1    wreg      void 
  3334 ;; Registers used:
  3335 ;;		wreg
  3336 ;; Tracked objects:
  3337 ;;		On entry : 0/0
  3338 ;;		On exit  : 0/0
  3339 ;;		Unchanged: 0/0
  3340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3344 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3345 ;;Total ram usage:        1 bytes
  3346 ;; Hardware stack levels used: 1
  3347 ;; Hardware stack levels required when called: 1
  3348 ;; This function calls:
  3349 ;;		Nothing
  3350 ;; This function is called by:
  3351 ;;		_sendStringSerial4
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text13
  3356   002E1A                     __ptext13:
  3357                           	callstack 0
  3358   002E1A                     _sendCharSerial4:
  3359                           	callstack 28
  3360                           
  3361                           ;incstack = 0
  3362                           ;sendCharSerial4@charToSend stored from wreg
  3363   002E1A  6E01               	movwf	sendCharSerial4@charToSend^0,c
  3364   002E1C                     l427:
  3365   002E1C  010E               	movlb	14	; () banked
  3366   002E1E  A537               	btfss	55,2,b	;volatile
  3367   002E20  EF14  F017         	goto	u1501
  3368   002E24  EF16  F017         	goto	u1500
  3369   002E28                     u1501:
  3370   002E28  EF0E  F017         	goto	l427
  3371   002E2C                     u1500:
  3372   002E2C                     
  3373                           ; BSR set to: 14
  3374                           ;../serial.c: 32:     TX4REG = charToSend;
  3375   002E2C  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3376   002E30                     
  3377                           ; BSR set to: 14
  3378   002E30  0012               	return		;funcret
  3379   002E32                     __end_of_sendCharSerial4:
  3380                           	callstack 0
  3381                           
  3382 ;; *************** function _motor_action *****************
  3383 ;; Defined at:
  3384 ;;		line 196 in file "../dc_motor.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;  color           2   33[COMRAM] unsigned int 
  3387 ;;  l               2   35[COMRAM] PTR struct DC_motor
  3388 ;;		 -> main@motorL(9), 
  3389 ;;  r               2   37[COMRAM] PTR struct DC_motor
  3390 ;;		 -> main@motorR(9), 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;		None
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  1    wreg      void 
  3395 ;; Registers used:
  3396 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3402 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3404 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3405 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3406 ;;Total ram usage:        8 bytes
  3407 ;; Hardware stack levels used: 1
  3408 ;; Hardware stack levels required when called: 4
  3409 ;; This function calls:
  3410 ;;		_left_135
  3411 ;;		_left_90
  3412 ;;		_reverse_fromcard
  3413 ;;		_reverse_onesquare
  3414 ;;		_right_135
  3415 ;;		_right_90
  3416 ;;		_spin_180
  3417 ;;		_stop
  3418 ;; This function is called by:
  3419 ;;		_main
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text14
  3424   001848                     __ptext14:
  3425                           	callstack 0
  3426   001848                     _motor_action:
  3427                           	callstack 26
  3428   001848                     
  3429                           ;../dc_motor.c: 196: void motor_action(unsigned int color, struct DC_motor *l, struct DC
      +                          _motor *r);../dc_motor.c: 197: {;../dc_motor.c: 198:     switch (color){
  3430   001848  EF20  F00D         	goto	l2953
  3431   00184C                     l2919:
  3432                           
  3433                           ;../dc_motor.c: 200:             reverse_fromcard(l,r);
  3434   00184C  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3435   001850  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3436   001854  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3437   001858  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3438   00185C  EC6A  F013         	call	_reverse_fromcard	;wreg free
  3439                           
  3440                           ;../dc_motor.c: 201:             stop(l,r);
  3441   001860  C024  F01A         	movff	motor_action@l,stop@mL
  3442   001864  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3443   001868  C026  F01C         	movff	motor_action@r,stop@mR
  3444   00186C  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3445   001870  EC0C  F014         	call	_stop	;wreg free
  3446   001874                     
  3447                           ;../dc_motor.c: 202:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3448   001874  0E29               	movlw	41
  3449   001876  6E29               	movwf	(??_motor_action+1)^0,c
  3450   001878  0E96               	movlw	150
  3451   00187A  6E28               	movwf	??_motor_action^0,c
  3452   00187C  0E7F               	movlw	127
  3453   00187E                     u1917:
  3454   00187E  2EE8               	decfsz	wreg,f,c
  3455   001880  D7FE               	bra	u1917
  3456   001882  2E28               	decfsz	??_motor_action^0,f,c
  3457   001884  D7FC               	bra	u1917
  3458   001886  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3459   001888  D7FA               	bra	u1917
  3460   00188A  F000               	nop	
  3461   00188C                     
  3462                           ;../dc_motor.c: 203:             stop(l,r);
  3463   00188C  C024  F01A         	movff	motor_action@l,stop@mL
  3464   001890  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3465   001894  C026  F01C         	movff	motor_action@r,stop@mR
  3466   001898  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3467   00189C  EC0C  F014         	call	_stop	;wreg free
  3468   0018A0                     
  3469                           ;../dc_motor.c: 204:             right_90(l,r);
  3470   0018A0  C024  F01A         	movff	motor_action@l,right_90@mL
  3471   0018A4  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3472   0018A8  C026  F01C         	movff	motor_action@r,right_90@mR
  3473   0018AC  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3474   0018B0  ECD3  F011         	call	_right_90	;wreg free
  3475                           
  3476                           ;../dc_motor.c: 205:             break;
  3477   0018B4  EF4A  F00D         	goto	l320
  3478   0018B8                     l2927:
  3479                           
  3480                           ;../dc_motor.c: 207:             reverse_fromcard(l,r);
  3481   0018B8  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3482   0018BC  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3483   0018C0  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3484   0018C4  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3485   0018C8  EC6A  F013         	call	_reverse_fromcard	;wreg free
  3486                           
  3487                           ;../dc_motor.c: 208:             stop(l,r);
  3488   0018CC  C024  F01A         	movff	motor_action@l,stop@mL
  3489   0018D0  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3490   0018D4  C026  F01C         	movff	motor_action@r,stop@mR
  3491   0018D8  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3492   0018DC  EC0C  F014         	call	_stop	;wreg free
  3493   0018E0                     
  3494                           ;../dc_motor.c: 209:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3495   0018E0  0E29               	movlw	41
  3496   0018E2  6E29               	movwf	(??_motor_action+1)^0,c
  3497   0018E4  0E96               	movlw	150
  3498   0018E6  6E28               	movwf	??_motor_action^0,c
  3499   0018E8  0E7F               	movlw	127
  3500   0018EA                     u1927:
  3501   0018EA  2EE8               	decfsz	wreg,f,c
  3502   0018EC  D7FE               	bra	u1927
  3503   0018EE  2E28               	decfsz	??_motor_action^0,f,c
  3504   0018F0  D7FC               	bra	u1927
  3505   0018F2  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3506   0018F4  D7FA               	bra	u1927
  3507   0018F6  F000               	nop	
  3508   0018F8                     
  3509                           ;../dc_motor.c: 210:             stop(l,r);
  3510   0018F8  C024  F01A         	movff	motor_action@l,stop@mL
  3511   0018FC  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3512   001900  C026  F01C         	movff	motor_action@r,stop@mR
  3513   001904  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3514   001908  EC0C  F014         	call	_stop	;wreg free
  3515   00190C                     
  3516                           ;../dc_motor.c: 211:             left_90(l,r);
  3517   00190C  C024  F01A         	movff	motor_action@l,left_90@mL
  3518   001910  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3519   001914  C026  F01C         	movff	motor_action@r,left_90@mR
  3520   001918  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3521   00191C  EC25  F012         	call	_left_90	;wreg free
  3522                           
  3523                           ;../dc_motor.c: 212:             break;
  3524   001920  EF4A  F00D         	goto	l320
  3525   001924                     l2935:
  3526                           
  3527                           ;../dc_motor.c: 214:             reverse_fromcard(l,r);
  3528   001924  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3529   001928  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3530   00192C  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3531   001930  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3532   001934  EC6A  F013         	call	_reverse_fromcard	;wreg free
  3533                           
  3534                           ;../dc_motor.c: 215:             stop(l,r);
  3535   001938  C024  F01A         	movff	motor_action@l,stop@mL
  3536   00193C  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3537   001940  C026  F01C         	movff	motor_action@r,stop@mR
  3538   001944  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3539   001948  EC0C  F014         	call	_stop	;wreg free
  3540   00194C                     
  3541                           ;../dc_motor.c: 216:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3542   00194C  0E29               	movlw	41
  3543   00194E  6E29               	movwf	(??_motor_action+1)^0,c
  3544   001950  0E96               	movlw	150
  3545   001952  6E28               	movwf	??_motor_action^0,c
  3546   001954  0E7F               	movlw	127
  3547   001956                     u1937:
  3548   001956  2EE8               	decfsz	wreg,f,c
  3549   001958  D7FE               	bra	u1937
  3550   00195A  2E28               	decfsz	??_motor_action^0,f,c
  3551   00195C  D7FC               	bra	u1937
  3552   00195E  2E29               	decfsz	(??_motor_action+1)^0,f,c
  3553   001960  D7FA               	bra	u1937
  3554   001962  F000               	nop	
  3555   001964                     
  3556                           ;../dc_motor.c: 217:             spin_180(l,r);
  3557   001964  C024  F01A         	movff	motor_action@l,spin_180@mL
  3558   001968  C025  F01B         	movff	motor_action@l+1,spin_180@mL+1
  3559   00196C  C026  F01C         	movff	motor_action@r,spin_180@mR
  3560   001970  C027  F01D         	movff	motor_action@r+1,spin_180@mR+1
  3561   001974  EC77  F012         	call	_spin_180	;wreg free
  3562   001978                     
  3563                           ;../dc_motor.c: 218:             stop(l,r);
  3564   001978  C024  F01A         	movff	motor_action@l,stop@mL
  3565   00197C  C025  F01B         	movff	motor_action@l+1,stop@mL+1
  3566   001980  C026  F01C         	movff	motor_action@r,stop@mR
  3567   001984  C027  F01D         	movff	motor_action@r+1,stop@mR+1
  3568   001988  EC0C  F014         	call	_stop	;wreg free
  3569                           
  3570                           ;../dc_motor.c: 219:             break;
  3571   00198C  EF4A  F00D         	goto	l320
  3572   001990                     l2943:
  3573                           
  3574                           ;../dc_motor.c: 221:             reverse_onesquare(l,r);
  3575   001990  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3576   001994  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3577   001998  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3578   00199C  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3579   0019A0  EC19  F013         	call	_reverse_onesquare	;wreg free
  3580                           
  3581                           ;../dc_motor.c: 222:             right_90(l,r);
  3582   0019A4  C024  F01A         	movff	motor_action@l,right_90@mL
  3583   0019A8  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3584   0019AC  C026  F01C         	movff	motor_action@r,right_90@mR
  3585   0019B0  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3586   0019B4  ECD3  F011         	call	_right_90	;wreg free
  3587                           
  3588                           ;../dc_motor.c: 223:             break;
  3589   0019B8  EF4A  F00D         	goto	l320
  3590   0019BC                     l2945:
  3591                           
  3592                           ;../dc_motor.c: 225:             reverse_onesquare(l,r);
  3593   0019BC  C024  F01A         	movff	motor_action@l,reverse_onesquare@mL
  3594   0019C0  C025  F01B         	movff	motor_action@l+1,reverse_onesquare@mL+1
  3595   0019C4  C026  F01C         	movff	motor_action@r,reverse_onesquare@mR
  3596   0019C8  C027  F01D         	movff	motor_action@r+1,reverse_onesquare@mR+1
  3597   0019CC  EC19  F013         	call	_reverse_onesquare	;wreg free
  3598                           
  3599                           ;../dc_motor.c: 226:             left_90(l,r);
  3600   0019D0  C024  F01A         	movff	motor_action@l,left_90@mL
  3601   0019D4  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3602   0019D8  C026  F01C         	movff	motor_action@r,left_90@mR
  3603   0019DC  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3604   0019E0  EC25  F012         	call	_left_90	;wreg free
  3605                           
  3606                           ;../dc_motor.c: 227:             break;
  3607   0019E4  EF4A  F00D         	goto	l320
  3608   0019E8                     l2947:
  3609                           
  3610                           ;../dc_motor.c: 229:             reverse_fromcard(l,r);
  3611   0019E8  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3612   0019EC  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3613   0019F0  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3614   0019F4  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3615   0019F8  EC6A  F013         	call	_reverse_fromcard	;wreg free
  3616                           
  3617                           ;../dc_motor.c: 230:             right_135(l,r);
  3618   0019FC  C024  F01A         	movff	motor_action@l,right_135@mL
  3619   001A00  C025  F01B         	movff	motor_action@l+1,right_135@mL+1
  3620   001A04  C026  F01C         	movff	motor_action@r,right_135@mR
  3621   001A08  C027  F01D         	movff	motor_action@r+1,right_135@mR+1
  3622   001A0C  ECC8  F012         	call	_right_135	;wreg free
  3623                           
  3624                           ;../dc_motor.c: 231:             break;
  3625   001A10  EF4A  F00D         	goto	l320
  3626   001A14                     l2949:
  3627                           
  3628                           ;../dc_motor.c: 233:             reverse_fromcard(l,r);
  3629   001A14  C024  F01A         	movff	motor_action@l,reverse_fromcard@mL
  3630   001A18  C025  F01B         	movff	motor_action@l+1,reverse_fromcard@mL+1
  3631   001A1C  C026  F01C         	movff	motor_action@r,reverse_fromcard@mR
  3632   001A20  C027  F01D         	movff	motor_action@r+1,reverse_fromcard@mR+1
  3633   001A24  EC6A  F013         	call	_reverse_fromcard	;wreg free
  3634                           
  3635                           ;../dc_motor.c: 234:             left_135(l,r);
  3636   001A28  C024  F01A         	movff	motor_action@l,left_135@mL
  3637   001A2C  C025  F01B         	movff	motor_action@l+1,left_135@mL+1
  3638   001A30  C026  F01C         	movff	motor_action@r,left_135@mR
  3639   001A34  C027  F01D         	movff	motor_action@r+1,left_135@mR+1
  3640   001A38  ECBB  F013         	call	_left_135	;wreg free
  3641                           
  3642                           ;../dc_motor.c: 235:             break;
  3643   001A3C  EF4A  F00D         	goto	l320
  3644   001A40                     l2953:
  3645   001A40  C022  F028         	movff	motor_action@color,??_motor_action
  3646   001A44  C023  F029         	movff	motor_action@color+1,??_motor_action+1
  3647                           
  3648                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3649                           ; Switch size 1, requested type "simple"
  3650                           ; Number of cases is 1, Range of values is 0 to 0
  3651                           ; switch strategies available:
  3652                           ; Name         Instructions Cycles
  3653                           ; simple_byte            4     3 (average)
  3654                           ;	Chosen strategy is simple_byte
  3655   001A48  5029               	movf	(??_motor_action+1)^0,w,c
  3656   001A4A  0A00               	xorlw	0	; case 0
  3657   001A4C  B4D8               	btfsc	status,2,c
  3658   001A4E  EF2B  F00D         	goto	l3165
  3659   001A52  EF4A  F00D         	goto	l320
  3660   001A56                     l3165:
  3661                           
  3662                           ; Switch size 1, requested type "simple"
  3663                           ; Number of cases is 7, Range of values is 1 to 7
  3664                           ; switch strategies available:
  3665                           ; Name         Instructions Cycles
  3666                           ; simple_byte           22    12 (average)
  3667                           ;	Chosen strategy is simple_byte
  3668   001A56  5028               	movf	??_motor_action^0,w,c
  3669   001A58  0A01               	xorlw	1	; case 1
  3670   001A5A  B4D8               	btfsc	status,2,c
  3671   001A5C  EF26  F00C         	goto	l2919
  3672   001A60  0A03               	xorlw	3	; case 2
  3673   001A62  B4D8               	btfsc	status,2,c
  3674   001A64  EF5C  F00C         	goto	l2927
  3675   001A68  0A01               	xorlw	1	; case 3
  3676   001A6A  B4D8               	btfsc	status,2,c
  3677   001A6C  EF92  F00C         	goto	l2935
  3678   001A70  0A07               	xorlw	7	; case 4
  3679   001A72  B4D8               	btfsc	status,2,c
  3680   001A74  EFC8  F00C         	goto	l2943
  3681   001A78  0A01               	xorlw	1	; case 5
  3682   001A7A  B4D8               	btfsc	status,2,c
  3683   001A7C  EFDE  F00C         	goto	l2945
  3684   001A80  0A03               	xorlw	3	; case 6
  3685   001A82  B4D8               	btfsc	status,2,c
  3686   001A84  EFF4  F00C         	goto	l2947
  3687   001A88  0A01               	xorlw	1	; case 7
  3688   001A8A  B4D8               	btfsc	status,2,c
  3689   001A8C  EF0A  F00D         	goto	l2949
  3690   001A90  EF4A  F00D         	goto	l320
  3691   001A94                     l320:
  3692   001A94  0012               	return		;funcret
  3693   001A96                     __end_of_motor_action:
  3694                           	callstack 0
  3695                           
  3696 ;; *************** function _stop *****************
  3697 ;; Defined at:
  3698 ;;		line 61 in file "../dc_motor.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3701 ;;		 -> main@motorL(9), 
  3702 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3703 ;;		 -> main@motorR(9), 
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;  i               2   30[COMRAM] int 
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  1    wreg      void 
  3708 ;; Registers used:
  3709 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3715 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3716 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3717 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3718 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3719 ;;Total ram usage:        7 bytes
  3720 ;; Hardware stack levels used: 1
  3721 ;; Hardware stack levels required when called: 3
  3722 ;; This function calls:
  3723 ;;		_setMotorPWM
  3724 ;; This function is called by:
  3725 ;;		_main
  3726 ;;		_motor_action
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text15
  3731   002818                     __ptext15:
  3732                           	callstack 0
  3733   002818                     _stop:
  3734                           	callstack 27
  3735   002818                     
  3736                           ;../dc_motor.c: 61: void stop(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c: 6
      +                          2: {;../dc_motor.c: 63:     mL->direction = 0;
  3737   002818  EE20 F001          	lfsr	2,1
  3738   00281C  501A               	movf	stop@mL^0,w,c
  3739   00281E  26D9               	addwf	fsr2l,f,c
  3740   002820  501B               	movf	(stop@mL+1)^0,w,c
  3741   002822  22DA               	addwfc	fsr2h,f,c
  3742   002824  0E00               	movlw	0
  3743   002826  6EDF               	movwf	indf2,c
  3744                           
  3745                           ;../dc_motor.c: 64:     mR->direction = 0;
  3746   002828  EE20 F001          	lfsr	2,1
  3747   00282C  501C               	movf	stop@mR^0,w,c
  3748   00282E  26D9               	addwf	fsr2l,f,c
  3749   002830  501D               	movf	(stop@mR+1)^0,w,c
  3750   002832  22DA               	addwfc	fsr2h,f,c
  3751   002834  0E00               	movlw	0
  3752   002836  6EDF               	movwf	indf2,c
  3753   002838                     
  3754                           ;../dc_motor.c: 65:     for (int i = 5;i>0;i = i - 1)
  3755   002838  0E00               	movlw	0
  3756   00283A  6E20               	movwf	(stop@i+1)^0,c
  3757   00283C  0E05               	movlw	5
  3758   00283E  6E1F               	movwf	stop@i^0,c
  3759   002840                     l2537:
  3760                           
  3761                           ;../dc_motor.c: 66:     {;../dc_motor.c: 67:         mL->power = i;
  3762   002840  C01A  FFD9         	movff	stop@mL,fsr2l
  3763   002844  C01B  FFDA         	movff	stop@mL+1,fsr2h
  3764   002848  C01F  FFDF         	movff	stop@i,indf2
  3765                           
  3766                           ;../dc_motor.c: 68:         mR->power = i;
  3767   00284C  C01C  FFD9         	movff	stop@mR,fsr2l
  3768   002850  C01D  FFDA         	movff	stop@mR+1,fsr2h
  3769   002854  C01F  FFDF         	movff	stop@i,indf2
  3770   002858                     
  3771                           ;../dc_motor.c: 69:         setMotorPWM(mL);
  3772   002858  C01A  F00F         	movff	stop@mL,setMotorPWM@m
  3773   00285C  C01B  F010         	movff	stop@mL+1,setMotorPWM@m+1
  3774   002860  EC4B  F00D         	call	_setMotorPWM	;wreg free
  3775   002864                     
  3776                           ;../dc_motor.c: 70:         setMotorPWM(mR);
  3777   002864  C01C  F00F         	movff	stop@mR,setMotorPWM@m
  3778   002868  C01D  F010         	movff	stop@mR+1,setMotorPWM@m+1
  3779   00286C  EC4B  F00D         	call	_setMotorPWM	;wreg free
  3780   002870                     
  3781                           ;../dc_motor.c: 71:         _delay((unsigned long)((10)*(64000000/4000.0)));
  3782   002870  0ED0               	movlw	208
  3783   002872  6E1E               	movwf	??_stop^0,c
  3784   002874  0ECA               	movlw	202
  3785   002876                     u1947:
  3786   002876  2EE8               	decfsz	wreg,f,c
  3787   002878  D7FE               	bra	u1947
  3788   00287A  2E1E               	decfsz	??_stop^0,f,c
  3789   00287C  D7FC               	bra	u1947
  3790   00287E                     
  3791                           ;../dc_motor.c: 72:     }
  3792   00287E  0EFF               	movlw	255
  3793   002880  241F               	addwf	stop@i^0,w,c
  3794   002882  6E1F               	movwf	stop@i^0,c
  3795   002884  0EFF               	movlw	255
  3796   002886  2020               	addwfc	(stop@i+1)^0,w,c
  3797   002888  6E20               	movwf	(stop@i+1)^0,c
  3798   00288A  BE20               	btfsc	(stop@i+1)^0,7,c
  3799   00288C  EF52  F014         	goto	u1420
  3800   002890  5020               	movf	(stop@i+1)^0,w,c
  3801   002892  E106               	bnz	u1421
  3802   002894  041F               	decf	stop@i^0,w,c
  3803   002896  B0D8               	btfsc	status,0,c
  3804   002898  EF50  F014         	goto	u1421
  3805   00289C  EF52  F014         	goto	u1420
  3806   0028A0                     u1421:
  3807   0028A0  EF20  F014         	goto	l2537
  3808   0028A4                     u1420:
  3809   0028A4  0012               	return		;funcret
  3810   0028A6                     __end_of_stop:
  3811                           	callstack 0
  3812                           
  3813 ;; *************** function _spin_180 *****************
  3814 ;; Defined at:
  3815 ;;		line 151 in file "../dc_motor.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3818 ;;		 -> main@motorL(9), 
  3819 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3820 ;;		 -> main@motorR(9), 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  i               2   31[COMRAM] int 
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  1    wreg      void 
  3825 ;; Registers used:
  3826 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3832 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3833 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3834 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3835 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3836 ;;Total ram usage:        8 bytes
  3837 ;; Hardware stack levels used: 1
  3838 ;; Hardware stack levels required when called: 3
  3839 ;; This function calls:
  3840 ;;		_setMotorPWM
  3841 ;; This function is called by:
  3842 ;;		_main
  3843 ;;		_motor_action
  3844 ;;		_motor_action_return
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text16
  3849   0024EE                     __ptext16:
  3850                           	callstack 0
  3851   0024EE                     _spin_180:
  3852                           	callstack 27
  3853   0024EE                     
  3854                           ;../dc_motor.c: 151: void spin_180(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 152: {;../dc_motor.c: 153:     mL->direction = 1;
  3855   0024EE  EE20 F001          	lfsr	2,1
  3856   0024F2  501A               	movf	spin_180@mL^0,w,c
  3857   0024F4  26D9               	addwf	fsr2l,f,c
  3858   0024F6  501B               	movf	(spin_180@mL+1)^0,w,c
  3859   0024F8  22DA               	addwfc	fsr2h,f,c
  3860   0024FA  0E01               	movlw	1
  3861   0024FC  6EDF               	movwf	indf2,c
  3862                           
  3863                           ;../dc_motor.c: 154:     mR->direction = 0;
  3864   0024FE  EE20 F001          	lfsr	2,1
  3865   002502  501C               	movf	spin_180@mR^0,w,c
  3866   002504  26D9               	addwf	fsr2l,f,c
  3867   002506  501D               	movf	(spin_180@mR+1)^0,w,c
  3868   002508  22DA               	addwfc	fsr2h,f,c
  3869   00250A  0E00               	movlw	0
  3870   00250C  6EDF               	movwf	indf2,c
  3871   00250E                     
  3872                           ;../dc_motor.c: 155:     for (int i = 0;i<50;i = i + 2)
  3873   00250E  0E00               	movlw	0
  3874   002510  6E21               	movwf	(spin_180@i+1)^0,c
  3875   002512  0E00               	movlw	0
  3876   002514  6E20               	movwf	spin_180@i^0,c
  3877   002516                     l2557:
  3878                           
  3879                           ;../dc_motor.c: 156:     {;../dc_motor.c: 157:         mL->power = i;
  3880   002516  C01A  FFD9         	movff	spin_180@mL,fsr2l
  3881   00251A  C01B  FFDA         	movff	spin_180@mL+1,fsr2h
  3882   00251E  C020  FFDF         	movff	spin_180@i,indf2
  3883   002522                     
  3884                           ;../dc_motor.c: 158:         mR->power = 50 + i;
  3885   002522  5020               	movf	spin_180@i^0,w,c
  3886   002524  0F32               	addlw	50
  3887   002526  C01C  FFD9         	movff	spin_180@mR,fsr2l
  3888   00252A  C01D  FFDA         	movff	spin_180@mR+1,fsr2h
  3889   00252E  6EDF               	movwf	indf2,c
  3890   002530                     
  3891                           ;../dc_motor.c: 159:         setMotorPWM(mL);
  3892   002530  C01A  F00F         	movff	spin_180@mL,setMotorPWM@m
  3893   002534  C01B  F010         	movff	spin_180@mL+1,setMotorPWM@m+1
  3894   002538  EC4B  F00D         	call	_setMotorPWM	;wreg free
  3895   00253C                     
  3896                           ;../dc_motor.c: 160:         setMotorPWM(mR);
  3897   00253C  C01C  F00F         	movff	spin_180@mR,setMotorPWM@m
  3898   002540  C01D  F010         	movff	spin_180@mR+1,setMotorPWM@m+1
  3899   002544  EC4B  F00D         	call	_setMotorPWM	;wreg free
  3900   002548                     
  3901                           ;../dc_motor.c: 161:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3902   002548  0E35               	movlw	53
  3903   00254A                     u1957:
  3904   00254A  2EE8               	decfsz	wreg,f,c
  3905   00254C  D7FE               	bra	u1957
  3906   00254E  F000               	nop	
  3907   002550                     
  3908                           ;../dc_motor.c: 162:     }
  3909   002550  0E02               	movlw	2
  3910   002552  2420               	addwf	spin_180@i^0,w,c
  3911   002554  6E20               	movwf	spin_180@i^0,c
  3912   002556  0E00               	movlw	0
  3913   002558  2021               	addwfc	(spin_180@i+1)^0,w,c
  3914   00255A  6E21               	movwf	(spin_180@i+1)^0,c
  3915   00255C  BE21               	btfsc	(spin_180@i+1)^0,7,c
  3916   00255E  EFBA  F012         	goto	u1431
  3917   002562  5021               	movf	(spin_180@i+1)^0,w,c
  3918   002564  E109               	bnz	u1430
  3919   002566  0E32               	movlw	50
  3920   002568  5C20               	subwf	spin_180@i^0,w,c
  3921   00256A  A0D8               	btfss	status,0,c
  3922   00256C  EFBA  F012         	goto	u1431
  3923   002570  EFBC  F012         	goto	u1430
  3924   002574                     u1431:
  3925   002574  EF8B  F012         	goto	l2557
  3926   002578                     u1430:
  3927   002578                     
  3928                           ;../dc_motor.c: 163:     _delay((unsigned long)((290)*(64000000/4000.0)));
  3929   002578  0E18               	movlw	24
  3930   00257A  6E1F               	movwf	(??_spin_180+1)^0,c
  3931   00257C  0E8A               	movlw	138
  3932   00257E  6E1E               	movwf	??_spin_180^0,c
  3933   002580  0EE8               	movlw	232
  3934   002582                     u1967:
  3935   002582  2EE8               	decfsz	wreg,f,c
  3936   002584  D7FE               	bra	u1967
  3937   002586  2E1E               	decfsz	??_spin_180^0,f,c
  3938   002588  D7FC               	bra	u1967
  3939   00258A  2E1F               	decfsz	(??_spin_180+1)^0,f,c
  3940   00258C  D7FA               	bra	u1967
  3941   00258E  0012               	return		;funcret
  3942   002590                     __end_of_spin_180:
  3943                           	callstack 0
  3944                           
  3945 ;; *************** function _right_90 *****************
  3946 ;; Defined at:
  3947 ;;		line 121 in file "../dc_motor.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3950 ;;		 -> main@motorL(9), 
  3951 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3952 ;;		 -> main@motorR(9), 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  i               2   31[COMRAM] int 
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  1    wreg      void 
  3957 ;; Registers used:
  3958 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3964 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3966 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3967 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3968 ;;Total ram usage:        8 bytes
  3969 ;; Hardware stack levels used: 1
  3970 ;; Hardware stack levels required when called: 3
  3971 ;; This function calls:
  3972 ;;		_setMotorPWM
  3973 ;; This function is called by:
  3974 ;;		_motor_action
  3975 ;;		_motor_action_return
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text17
  3980   0023A6                     __ptext17:
  3981                           	callstack 0
  3982   0023A6                     _right_90:
  3983                           	callstack 26
  3984   0023A6                     
  3985                           ;../dc_motor.c: 121: void right_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 122: {;../dc_motor.c: 123:     mL->direction = 1;
  3986   0023A6  EE20 F001          	lfsr	2,1
  3987   0023AA  501A               	movf	right_90@mL^0,w,c
  3988   0023AC  26D9               	addwf	fsr2l,f,c
  3989   0023AE  501B               	movf	(right_90@mL+1)^0,w,c
  3990   0023B0  22DA               	addwfc	fsr2h,f,c
  3991   0023B2  0E01               	movlw	1
  3992   0023B4  6EDF               	movwf	indf2,c
  3993                           
  3994                           ;../dc_motor.c: 124:     mR->direction = 0;
  3995   0023B6  EE20 F001          	lfsr	2,1
  3996   0023BA  501C               	movf	right_90@mR^0,w,c
  3997   0023BC  26D9               	addwf	fsr2l,f,c
  3998   0023BE  501D               	movf	(right_90@mR+1)^0,w,c
  3999   0023C0  22DA               	addwfc	fsr2h,f,c
  4000   0023C2  0E00               	movlw	0
  4001   0023C4  6EDF               	movwf	indf2,c
  4002   0023C6                     
  4003                           ;../dc_motor.c: 125:     for (int i = 0;i<50;i = i + 2)
  4004   0023C6  0E00               	movlw	0
  4005   0023C8  6E21               	movwf	(right_90@i+1)^0,c
  4006   0023CA  0E00               	movlw	0
  4007   0023CC  6E20               	movwf	right_90@i^0,c
  4008   0023CE                     l2625:
  4009                           
  4010                           ;../dc_motor.c: 126:     {;../dc_motor.c: 127:         mL->power = i;
  4011   0023CE  C01A  FFD9         	movff	right_90@mL,fsr2l
  4012   0023D2  C01B  FFDA         	movff	right_90@mL+1,fsr2h
  4013   0023D6  C020  FFDF         	movff	right_90@i,indf2
  4014   0023DA                     
  4015                           ;../dc_motor.c: 128:         mR->power = 50 + i;
  4016   0023DA  5020               	movf	right_90@i^0,w,c
  4017   0023DC  0F32               	addlw	50
  4018   0023DE  C01C  FFD9         	movff	right_90@mR,fsr2l
  4019   0023E2  C01D  FFDA         	movff	right_90@mR+1,fsr2h
  4020   0023E6  6EDF               	movwf	indf2,c
  4021   0023E8                     
  4022                           ;../dc_motor.c: 129:         setMotorPWM(mL);
  4023   0023E8  C01A  F00F         	movff	right_90@mL,setMotorPWM@m
  4024   0023EC  C01B  F010         	movff	right_90@mL+1,setMotorPWM@m+1
  4025   0023F0  EC4B  F00D         	call	_setMotorPWM	;wreg free
  4026   0023F4                     
  4027                           ;../dc_motor.c: 130:         setMotorPWM(mR);
  4028   0023F4  C01C  F00F         	movff	right_90@mR,setMotorPWM@m
  4029   0023F8  C01D  F010         	movff	right_90@mR+1,setMotorPWM@m+1
  4030   0023FC  EC4B  F00D         	call	_setMotorPWM	;wreg free
  4031   002400                     
  4032                           ;../dc_motor.c: 131:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4033   002400  0E35               	movlw	53
  4034   002402                     u1977:
  4035   002402  2EE8               	decfsz	wreg,f,c
  4036   002404  D7FE               	bra	u1977
  4037   002406  F000               	nop	
  4038   002408                     
  4039                           ;../dc_motor.c: 132:     }
  4040   002408  0E02               	movlw	2
  4041   00240A  2420               	addwf	right_90@i^0,w,c
  4042   00240C  6E20               	movwf	right_90@i^0,c
  4043   00240E  0E00               	movlw	0
  4044   002410  2021               	addwfc	(right_90@i+1)^0,w,c
  4045   002412  6E21               	movwf	(right_90@i+1)^0,c
  4046   002414  BE21               	btfsc	(right_90@i+1)^0,7,c
  4047   002416  EF16  F012         	goto	u1461
  4048   00241A  5021               	movf	(right_90@i+1)^0,w,c
  4049   00241C  E109               	bnz	u1460
  4050   00241E  0E32               	movlw	50
  4051   002420  5C20               	subwf	right_90@i^0,w,c
  4052   002422  A0D8               	btfss	status,0,c
  4053   002424  EF16  F012         	goto	u1461
  4054   002428  EF18  F012         	goto	u1460
  4055   00242C                     u1461:
  4056   00242C  EFE7  F011         	goto	l2625
  4057   002430                     u1460:
  4058   002430                     
  4059                           ;../dc_motor.c: 133:     _delay((unsigned long)((165)*(64000000/4000.0)));
  4060   002430  0E0E               	movlw	14
  4061   002432  6E1F               	movwf	(??_right_90+1)^0,c
  4062   002434  0E65               	movlw	101
  4063   002436  6E1E               	movwf	??_right_90^0,c
  4064   002438  0E87               	movlw	135
  4065   00243A                     u1987:
  4066   00243A  2EE8               	decfsz	wreg,f,c
  4067   00243C  D7FE               	bra	u1987
  4068   00243E  2E1E               	decfsz	??_right_90^0,f,c
  4069   002440  D7FC               	bra	u1987
  4070   002442  2E1F               	decfsz	(??_right_90+1)^0,f,c
  4071   002444  D7FA               	bra	u1987
  4072   002446  F000               	nop	
  4073   002448  0012               	return		;funcret
  4074   00244A                     __end_of_right_90:
  4075                           	callstack 0
  4076                           
  4077 ;; *************** function _right_135 *****************
  4078 ;; Defined at:
  4079 ;;		line 166 in file "../dc_motor.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4082 ;;		 -> main@motorL(9), 
  4083 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4084 ;;		 -> main@motorR(9), 
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;  i               2   31[COMRAM] int 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4096 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4097 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4098 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4099 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4100 ;;Total ram usage:        8 bytes
  4101 ;; Hardware stack levels used: 1
  4102 ;; Hardware stack levels required when called: 3
  4103 ;; This function calls:
  4104 ;;		_setMotorPWM
  4105 ;; This function is called by:
  4106 ;;		_motor_action
  4107 ;;		_motor_action_return
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           	psect	text18
  4112   002590                     __ptext18:
  4113                           	callstack 0
  4114   002590                     _right_135:
  4115                           	callstack 26
  4116   002590                     
  4117                           ;../dc_motor.c: 166: void right_135(struct DC_motor *mL, struct DC_motor *mR);../dc_moto
      +                          r.c: 167: {;../dc_motor.c: 168:     mL->direction = 1;
  4118   002590  EE20 F001          	lfsr	2,1
  4119   002594  501A               	movf	right_135@mL^0,w,c
  4120   002596  26D9               	addwf	fsr2l,f,c
  4121   002598  501B               	movf	(right_135@mL+1)^0,w,c
  4122   00259A  22DA               	addwfc	fsr2h,f,c
  4123   00259C  0E01               	movlw	1
  4124   00259E  6EDF               	movwf	indf2,c
  4125                           
  4126                           ;../dc_motor.c: 169:     mR->direction = 0;
  4127   0025A0  EE20 F001          	lfsr	2,1
  4128   0025A4  501C               	movf	right_135@mR^0,w,c
  4129   0025A6  26D9               	addwf	fsr2l,f,c
  4130   0025A8  501D               	movf	(right_135@mR+1)^0,w,c
  4131   0025AA  22DA               	addwfc	fsr2h,f,c
  4132   0025AC  0E00               	movlw	0
  4133   0025AE  6EDF               	movwf	indf2,c
  4134   0025B0                     
  4135                           ;../dc_motor.c: 170:     for (int i = 0;i<50;i = i + 2)
  4136   0025B0  0E00               	movlw	0
  4137   0025B2  6E21               	movwf	(right_135@i+1)^0,c
  4138   0025B4  0E00               	movlw	0
  4139   0025B6  6E20               	movwf	right_135@i^0,c
  4140   0025B8                     l2673:
  4141                           
  4142                           ;../dc_motor.c: 171:     {;../dc_motor.c: 172:         mL->power = i;
  4143   0025B8  C01A  FFD9         	movff	right_135@mL,fsr2l
  4144   0025BC  C01B  FFDA         	movff	right_135@mL+1,fsr2h
  4145   0025C0  C020  FFDF         	movff	right_135@i,indf2
  4146   0025C4                     
  4147                           ;../dc_motor.c: 173:         mR->power = 50 + i;
  4148   0025C4  5020               	movf	right_135@i^0,w,c
  4149   0025C6  0F32               	addlw	50
  4150   0025C8  C01C  FFD9         	movff	right_135@mR,fsr2l
  4151   0025CC  C01D  FFDA         	movff	right_135@mR+1,fsr2h
  4152   0025D0  6EDF               	movwf	indf2,c
  4153   0025D2                     
  4154                           ;../dc_motor.c: 174:         setMotorPWM(mL);
  4155   0025D2  C01A  F00F         	movff	right_135@mL,setMotorPWM@m
  4156   0025D6  C01B  F010         	movff	right_135@mL+1,setMotorPWM@m+1
  4157   0025DA  EC4B  F00D         	call	_setMotorPWM	;wreg free
  4158   0025DE                     
  4159                           ;../dc_motor.c: 175:         setMotorPWM(mR);
  4160   0025DE  C01C  F00F         	movff	right_135@mR,setMotorPWM@m
  4161   0025E2  C01D  F010         	movff	right_135@mR+1,setMotorPWM@m+1
  4162   0025E6  EC4B  F00D         	call	_setMotorPWM	;wreg free
  4163   0025EA                     
  4164                           ;../dc_motor.c: 176:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4165   0025EA  0E35               	movlw	53
  4166   0025EC                     u1997:
  4167   0025EC  2EE8               	decfsz	wreg,f,c
  4168   0025EE  D7FE               	bra	u1997
  4169   0025F0  F000               	nop	
  4170   0025F2                     
  4171                           ;../dc_motor.c: 177:     }
  4172   0025F2  0E02               	movlw	2
  4173   0025F4  2420               	addwf	right_135@i^0,w,c
  4174   0025F6  6E20               	movwf	right_135@i^0,c
  4175   0025F8  0E00               	movlw	0
  4176   0025FA  2021               	addwfc	(right_135@i+1)^0,w,c
  4177   0025FC  6E21               	movwf	(right_135@i+1)^0,c
  4178   0025FE  BE21               	btfsc	(right_135@i+1)^0,7,c
  4179   002600  EF0B  F013         	goto	u1481
  4180   002604  5021               	movf	(right_135@i+1)^0,w,c
  4181   002606  E109               	bnz	u1480
  4182   002608  0E32               	movlw	50
  4183   00260A  5C20               	subwf	right_135@i^0,w,c
  4184   00260C  A0D8               	btfss	status,0,c
  4185   00260E  EF0B  F013         	goto	u1481
  4186   002612  EF0D  F013         	goto	u1480
  4187   002616                     u1481:
  4188   002616  EFDC  F012         	goto	l2673
  4189   00261A                     u1480:
  4190   00261A                     
  4191                           ;../dc_motor.c: 178:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4192   00261A  0E13               	movlw	19
  4193   00261C  6E1F               	movwf	(??_right_135+1)^0,c
  4194   00261E  0EAC               	movlw	172
  4195   002620  6E1E               	movwf	??_right_135^0,c
  4196   002622  0E2A               	movlw	42
  4197   002624                     u2007:
  4198   002624  2EE8               	decfsz	wreg,f,c
  4199   002626  D7FE               	bra	u2007
  4200   002628  2E1E               	decfsz	??_right_135^0,f,c
  4201   00262A  D7FC               	bra	u2007
  4202   00262C  2E1F               	decfsz	(??_right_135+1)^0,f,c
  4203   00262E  D7FA               	bra	u2007
  4204   002630  0012               	return		;funcret
  4205   002632                     __end_of_right_135:
  4206                           	callstack 0
  4207                           
  4208 ;; *************** function _reverse_onesquare *****************
  4209 ;; Defined at:
  4210 ;;		line 106 in file "../dc_motor.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4213 ;;		 -> main@motorL(9), 
  4214 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4215 ;;		 -> main@motorR(9), 
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;  i               2   31[COMRAM] int 
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  1    wreg      void 
  4220 ;; Registers used:
  4221 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4227 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4229 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4230 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4231 ;;Total ram usage:        8 bytes
  4232 ;; Hardware stack levels used: 1
  4233 ;; Hardware stack levels required when called: 3
  4234 ;; This function calls:
  4235 ;;		_setMotorPWM
  4236 ;; This function is called by:
  4237 ;;		_motor_action
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text19
  4242   002632                     __ptext19:
  4243                           	callstack 0
  4244   002632                     _reverse_onesquare:
  4245                           	callstack 26
  4246   002632                     
  4247                           ;../dc_motor.c: 106: void reverse_onesquare (struct DC_motor *mL, struct DC_motor *mR);.
      +                          ./dc_motor.c: 107: {;../dc_motor.c: 108:     mL->direction = 0;
  4248   002632  EE20 F001          	lfsr	2,1
  4249   002636  501A               	movf	reverse_onesquare@mL^0,w,c
  4250   002638  26D9               	addwf	fsr2l,f,c
  4251   00263A  501B               	movf	(reverse_onesquare@mL+1)^0,w,c
  4252   00263C  22DA               	addwfc	fsr2h,f,c
  4253   00263E  0E00               	movlw	0
  4254   002640  6EDF               	movwf	indf2,c
  4255                           
  4256                           ;../dc_motor.c: 109:     mR->direction = 0;
  4257   002642  EE20 F001          	lfsr	2,1
  4258   002646  501C               	movf	reverse_onesquare@mR^0,w,c
  4259   002648  26D9               	addwf	fsr2l,f,c
  4260   00264A  501D               	movf	(reverse_onesquare@mR+1)^0,w,c
  4261   00264C  22DA               	addwfc	fsr2h,f,c
  4262   00264E  0E00               	movlw	0
  4263   002650  6EDF               	movwf	indf2,c
  4264   002652                     
  4265                           ;../dc_motor.c: 110:     for (int i=0;i<51;i=i + 2)
  4266   002652  0E00               	movlw	0
  4267   002654  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  4268   002656  0E00               	movlw	0
  4269   002658  6E20               	movwf	reverse_onesquare@i^0,c
  4270   00265A                     l2603:
  4271                           
  4272                           ;../dc_motor.c: 111:     {;../dc_motor.c: 112:         mL->power = i;
  4273   00265A  C01A  FFD9         	movff	reverse_onesquare@mL,fsr2l
  4274   00265E  C01B  FFDA         	movff	reverse_onesquare@mL+1,fsr2h
  4275   002662  C020  FFDF         	movff	reverse_onesquare@i,indf2
  4276                           
  4277                           ;../dc_motor.c: 113:         mR->power = i;
  4278   002666  C01C  FFD9         	movff	reverse_onesquare@mR,fsr2l
  4279   00266A  C01D  FFDA         	movff	reverse_onesquare@mR+1,fsr2h
  4280   00266E  C020  FFDF         	movff	reverse_onesquare@i,indf2
  4281   002672                     
  4282                           ;../dc_motor.c: 114:         setMotorPWM(mL);
  4283   002672  C01A  F00F         	movff	reverse_onesquare@mL,setMotorPWM@m
  4284   002676  C01B  F010         	movff	reverse_onesquare@mL+1,setMotorPWM@m+1
  4285   00267A  EC4B  F00D         	call	_setMotorPWM	;wreg free
  4286   00267E                     
  4287                           ;../dc_motor.c: 115:         setMotorPWM(mR);
  4288   00267E  C01C  F00F         	movff	reverse_onesquare@mR,setMotorPWM@m
  4289   002682  C01D  F010         	movff	reverse_onesquare@mR+1,setMotorPWM@m+1
  4290   002686  EC4B  F00D         	call	_setMotorPWM	;wreg free
  4291   00268A                     
  4292                           ;../dc_motor.c: 116:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4293   00268A  0E35               	movlw	53
  4294   00268C                     u2017:
  4295   00268C  2EE8               	decfsz	wreg,f,c
  4296   00268E  D7FE               	bra	u2017
  4297   002690  F000               	nop	
  4298   002692                     
  4299                           ;../dc_motor.c: 117:     }
  4300   002692  0E02               	movlw	2
  4301   002694  2420               	addwf	reverse_onesquare@i^0,w,c
  4302   002696  6E20               	movwf	reverse_onesquare@i^0,c
  4303   002698  0E00               	movlw	0
  4304   00269A  2021               	addwfc	(reverse_onesquare@i+1)^0,w,c
  4305   00269C  6E21               	movwf	(reverse_onesquare@i+1)^0,c
  4306   00269E  BE21               	btfsc	(reverse_onesquare@i+1)^0,7,c
  4307   0026A0  EF5B  F013         	goto	u1451
  4308   0026A4  5021               	movf	(reverse_onesquare@i+1)^0,w,c
  4309   0026A6  E109               	bnz	u1450
  4310   0026A8  0E33               	movlw	51
  4311   0026AA  5C20               	subwf	reverse_onesquare@i^0,w,c
  4312   0026AC  A0D8               	btfss	status,0,c
  4313   0026AE  EF5B  F013         	goto	u1451
  4314   0026B2  EF5D  F013         	goto	u1450
  4315   0026B6                     u1451:
  4316   0026B6  EF2D  F013         	goto	l2603
  4317   0026BA                     u1450:
  4318   0026BA                     
  4319                           ;../dc_motor.c: 118:     _delay((unsigned long)((1100)*(64000000/4000.0)));
  4320   0026BA  0E5A               	movlw	90
  4321   0026BC  6E1F               	movwf	(??_reverse_onesquare+1)^0,c
  4322   0026BE  0E49               	movlw	73
  4323   0026C0  6E1E               	movwf	??_reverse_onesquare^0,c
  4324   0026C2  0EE7               	movlw	231
  4325   0026C4                     u2027:
  4326   0026C4  2EE8               	decfsz	wreg,f,c
  4327   0026C6  D7FE               	bra	u2027
  4328   0026C8  2E1E               	decfsz	??_reverse_onesquare^0,f,c
  4329   0026CA  D7FC               	bra	u2027
  4330   0026CC  2E1F               	decfsz	(??_reverse_onesquare+1)^0,f,c
  4331   0026CE  D7FA               	bra	u2027
  4332   0026D0  F000               	nop	
  4333   0026D2  0012               	return		;funcret
  4334   0026D4                     __end_of_reverse_onesquare:
  4335                           	callstack 0
  4336                           
  4337 ;; *************** function _reverse_fromcard *****************
  4338 ;; Defined at:
  4339 ;;		line 91 in file "../dc_motor.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4342 ;;		 -> main@motorL(9), 
  4343 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4344 ;;		 -> main@motorR(9), 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  i               2   31[COMRAM] int 
  4347 ;; Return value:  Size  Location     Type
  4348 ;;                  1    wreg      void 
  4349 ;; Registers used:
  4350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4356 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4357 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4358 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4359 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4360 ;;Total ram usage:        8 bytes
  4361 ;; Hardware stack levels used: 1
  4362 ;; Hardware stack levels required when called: 3
  4363 ;; This function calls:
  4364 ;;		_setMotorPWM
  4365 ;; This function is called by:
  4366 ;;		_motor_action
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text20
  4371   0026D4                     __ptext20:
  4372                           	callstack 0
  4373   0026D4                     _reverse_fromcard:
  4374                           	callstack 26
  4375   0026D4                     
  4376                           ;../dc_motor.c: 91: void reverse_fromcard (struct DC_motor *mL, struct DC_motor *mR);../
      +                          dc_motor.c: 92: {;../dc_motor.c: 93:     mL->direction = 0;
  4377   0026D4  EE20 F001          	lfsr	2,1
  4378   0026D8  501A               	movf	reverse_fromcard@mL^0,w,c
  4379   0026DA  26D9               	addwf	fsr2l,f,c
  4380   0026DC  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  4381   0026DE  22DA               	addwfc	fsr2h,f,c
  4382   0026E0  0E00               	movlw	0
  4383   0026E2  6EDF               	movwf	indf2,c
  4384                           
  4385                           ;../dc_motor.c: 94:     mL->direction = 0;
  4386   0026E4  EE20 F001          	lfsr	2,1
  4387   0026E8  501A               	movf	reverse_fromcard@mL^0,w,c
  4388   0026EA  26D9               	addwf	fsr2l,f,c
  4389   0026EC  501B               	movf	(reverse_fromcard@mL+1)^0,w,c
  4390   0026EE  22DA               	addwfc	fsr2h,f,c
  4391   0026F0  0E00               	movlw	0
  4392   0026F2  6EDF               	movwf	indf2,c
  4393   0026F4                     
  4394                           ;../dc_motor.c: 95:     for (int i = 0;i < 41;i = i + 2)
  4395   0026F4  0E00               	movlw	0
  4396   0026F6  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  4397   0026F8  0E00               	movlw	0
  4398   0026FA  6E20               	movwf	reverse_fromcard@i^0,c
  4399   0026FC                     l2581:
  4400                           
  4401                           ;../dc_motor.c: 96:     {;../dc_motor.c: 97:         mL->power = i;
  4402   0026FC  C01A  FFD9         	movff	reverse_fromcard@mL,fsr2l
  4403   002700  C01B  FFDA         	movff	reverse_fromcard@mL+1,fsr2h
  4404   002704  C020  FFDF         	movff	reverse_fromcard@i,indf2
  4405                           
  4406                           ;../dc_motor.c: 98:         mR->power = i;
  4407   002708  C01C  FFD9         	movff	reverse_fromcard@mR,fsr2l
  4408   00270C  C01D  FFDA         	movff	reverse_fromcard@mR+1,fsr2h
  4409   002710  C020  FFDF         	movff	reverse_fromcard@i,indf2
  4410   002714                     
  4411                           ;../dc_motor.c: 99:         setMotorPWM(mL);
  4412   002714  C01A  F00F         	movff	reverse_fromcard@mL,setMotorPWM@m
  4413   002718  C01B  F010         	movff	reverse_fromcard@mL+1,setMotorPWM@m+1
  4414   00271C  EC4B  F00D         	call	_setMotorPWM	;wreg free
  4415   002720                     
  4416                           ;../dc_motor.c: 100:         setMotorPWM(mR);
  4417   002720  C01C  F00F         	movff	reverse_fromcard@mR,setMotorPWM@m
  4418   002724  C01D  F010         	movff	reverse_fromcard@mR+1,setMotorPWM@m+1
  4419   002728  EC4B  F00D         	call	_setMotorPWM	;wreg free
  4420   00272C                     
  4421                           ;../dc_motor.c: 101:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4422   00272C  0E35               	movlw	53
  4423   00272E                     u2037:
  4424   00272E  2EE8               	decfsz	wreg,f,c
  4425   002730  D7FE               	bra	u2037
  4426   002732  F000               	nop	
  4427   002734                     
  4428                           ;../dc_motor.c: 102:     }
  4429   002734  0E02               	movlw	2
  4430   002736  2420               	addwf	reverse_fromcard@i^0,w,c
  4431   002738  6E20               	movwf	reverse_fromcard@i^0,c
  4432   00273A  0E00               	movlw	0
  4433   00273C  2021               	addwfc	(reverse_fromcard@i+1)^0,w,c
  4434   00273E  6E21               	movwf	(reverse_fromcard@i+1)^0,c
  4435   002740  BE21               	btfsc	(reverse_fromcard@i+1)^0,7,c
  4436   002742  EFAC  F013         	goto	u1441
  4437   002746  5021               	movf	(reverse_fromcard@i+1)^0,w,c
  4438   002748  E109               	bnz	u1440
  4439   00274A  0E29               	movlw	41
  4440   00274C  5C20               	subwf	reverse_fromcard@i^0,w,c
  4441   00274E  A0D8               	btfss	status,0,c
  4442   002750  EFAC  F013         	goto	u1441
  4443   002754  EFAE  F013         	goto	u1440
  4444   002758                     u1441:
  4445   002758  EF7E  F013         	goto	l2581
  4446   00275C                     u1440:
  4447   00275C                     
  4448                           ;../dc_motor.c: 103:     _delay((unsigned long)((500)*(64000000/4000.0)));
  4449   00275C  0E29               	movlw	41
  4450   00275E  6E1F               	movwf	(??_reverse_fromcard+1)^0,c
  4451   002760  0E96               	movlw	150
  4452   002762  6E1E               	movwf	??_reverse_fromcard^0,c
  4453   002764  0E7F               	movlw	127
  4454   002766                     u2047:
  4455   002766  2EE8               	decfsz	wreg,f,c
  4456   002768  D7FE               	bra	u2047
  4457   00276A  2E1E               	decfsz	??_reverse_fromcard^0,f,c
  4458   00276C  D7FC               	bra	u2047
  4459   00276E  2E1F               	decfsz	(??_reverse_fromcard+1)^0,f,c
  4460   002770  D7FA               	bra	u2047
  4461   002772  F000               	nop	
  4462   002774  0012               	return		;funcret
  4463   002776                     __end_of_reverse_fromcard:
  4464                           	callstack 0
  4465                           
  4466 ;; *************** function _left_90 *****************
  4467 ;; Defined at:
  4468 ;;		line 136 in file "../dc_motor.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4471 ;;		 -> main@motorL(9), 
  4472 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4473 ;;		 -> main@motorR(9), 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  i               2   31[COMRAM] int 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  1    wreg      void 
  4478 ;; Registers used:
  4479 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4485 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4486 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4487 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4488 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4489 ;;Total ram usage:        8 bytes
  4490 ;; Hardware stack levels used: 1
  4491 ;; Hardware stack levels required when called: 3
  4492 ;; This function calls:
  4493 ;;		_setMotorPWM
  4494 ;; This function is called by:
  4495 ;;		_motor_action
  4496 ;;		_motor_action_return
  4497 ;; This function uses a non-reentrant model
  4498 ;;
  4499                           
  4500                           	psect	text21
  4501   00244A                     __ptext21:
  4502                           	callstack 0
  4503   00244A                     _left_90:
  4504                           	callstack 26
  4505   00244A                     
  4506                           ;../dc_motor.c: 136: void left_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 137: {;../dc_motor.c: 138:     mL->direction = 0;
  4507   00244A  EE20 F001          	lfsr	2,1
  4508   00244E  501A               	movf	left_90@mL^0,w,c
  4509   002450  26D9               	addwf	fsr2l,f,c
  4510   002452  501B               	movf	(left_90@mL+1)^0,w,c
  4511   002454  22DA               	addwfc	fsr2h,f,c
  4512   002456  0E00               	movlw	0
  4513   002458  6EDF               	movwf	indf2,c
  4514                           
  4515                           ;../dc_motor.c: 139:     mR->direction = 1;
  4516   00245A  EE20 F001          	lfsr	2,1
  4517   00245E  501C               	movf	left_90@mR^0,w,c
  4518   002460  26D9               	addwf	fsr2l,f,c
  4519   002462  501D               	movf	(left_90@mR+1)^0,w,c
  4520   002464  22DA               	addwfc	fsr2h,f,c
  4521   002466  0E01               	movlw	1
  4522   002468  6EDF               	movwf	indf2,c
  4523   00246A                     
  4524                           ;../dc_motor.c: 140:     for (int i = 0;i<50;i = i + 2)
  4525   00246A  0E00               	movlw	0
  4526   00246C  6E21               	movwf	(left_90@i+1)^0,c
  4527   00246E  0E00               	movlw	0
  4528   002470  6E20               	movwf	left_90@i^0,c
  4529   002472                     l2649:
  4530                           
  4531                           ;../dc_motor.c: 141:     {;../dc_motor.c: 142:         mL->power = 50 + i;
  4532   002472  5020               	movf	left_90@i^0,w,c
  4533   002474  0F32               	addlw	50
  4534   002476  C01A  FFD9         	movff	left_90@mL,fsr2l
  4535   00247A  C01B  FFDA         	movff	left_90@mL+1,fsr2h
  4536   00247E  6EDF               	movwf	indf2,c
  4537   002480                     
  4538                           ;../dc_motor.c: 143:         mR->power = i;
  4539   002480  C01C  FFD9         	movff	left_90@mR,fsr2l
  4540   002484  C01D  FFDA         	movff	left_90@mR+1,fsr2h
  4541   002488  C020  FFDF         	movff	left_90@i,indf2
  4542   00248C                     
  4543                           ;../dc_motor.c: 144:         setMotorPWM(mL);
  4544   00248C  C01A  F00F         	movff	left_90@mL,setMotorPWM@m
  4545   002490  C01B  F010         	movff	left_90@mL+1,setMotorPWM@m+1
  4546   002494  EC4B  F00D         	call	_setMotorPWM	;wreg free
  4547   002498                     
  4548                           ;../dc_motor.c: 145:         setMotorPWM(mR);
  4549   002498  C01C  F00F         	movff	left_90@mR,setMotorPWM@m
  4550   00249C  C01D  F010         	movff	left_90@mR+1,setMotorPWM@m+1
  4551   0024A0  EC4B  F00D         	call	_setMotorPWM	;wreg free
  4552   0024A4                     
  4553                           ;../dc_motor.c: 146:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4554   0024A4  0E35               	movlw	53
  4555   0024A6                     u2057:
  4556   0024A6  2EE8               	decfsz	wreg,f,c
  4557   0024A8  D7FE               	bra	u2057
  4558   0024AA  F000               	nop	
  4559   0024AC                     
  4560                           ;../dc_motor.c: 147:     }
  4561   0024AC  0E02               	movlw	2
  4562   0024AE  2420               	addwf	left_90@i^0,w,c
  4563   0024B0  6E20               	movwf	left_90@i^0,c
  4564   0024B2  0E00               	movlw	0
  4565   0024B4  2021               	addwfc	(left_90@i+1)^0,w,c
  4566   0024B6  6E21               	movwf	(left_90@i+1)^0,c
  4567   0024B8  BE21               	btfsc	(left_90@i+1)^0,7,c
  4568   0024BA  EF68  F012         	goto	u1471
  4569   0024BE  5021               	movf	(left_90@i+1)^0,w,c
  4570   0024C0  E109               	bnz	u1470
  4571   0024C2  0E32               	movlw	50
  4572   0024C4  5C20               	subwf	left_90@i^0,w,c
  4573   0024C6  A0D8               	btfss	status,0,c
  4574   0024C8  EF68  F012         	goto	u1471
  4575   0024CC  EF6A  F012         	goto	u1470
  4576   0024D0                     u1471:
  4577   0024D0  EF39  F012         	goto	l2649
  4578   0024D4                     u1470:
  4579   0024D4                     
  4580                           ;../dc_motor.c: 148:     _delay((unsigned long)((165)*(64000000/4000.0)));
  4581   0024D4  0E0E               	movlw	14
  4582   0024D6  6E1F               	movwf	(??_left_90+1)^0,c
  4583   0024D8  0E65               	movlw	101
  4584   0024DA  6E1E               	movwf	??_left_90^0,c
  4585   0024DC  0E87               	movlw	135
  4586   0024DE                     u2067:
  4587   0024DE  2EE8               	decfsz	wreg,f,c
  4588   0024E0  D7FE               	bra	u2067
  4589   0024E2  2E1E               	decfsz	??_left_90^0,f,c
  4590   0024E4  D7FC               	bra	u2067
  4591   0024E6  2E1F               	decfsz	(??_left_90+1)^0,f,c
  4592   0024E8  D7FA               	bra	u2067
  4593   0024EA  F000               	nop	
  4594   0024EC  0012               	return		;funcret
  4595   0024EE                     __end_of_left_90:
  4596                           	callstack 0
  4597                           
  4598 ;; *************** function _left_135 *****************
  4599 ;; Defined at:
  4600 ;;		line 181 in file "../dc_motor.c"
  4601 ;; Parameters:    Size  Location     Type
  4602 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4603 ;;		 -> main@motorL(9), 
  4604 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4605 ;;		 -> main@motorR(9), 
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;  i               2   31[COMRAM] int 
  4608 ;; Return value:  Size  Location     Type
  4609 ;;                  1    wreg      void 
  4610 ;; Registers used:
  4611 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4612 ;; Tracked objects:
  4613 ;;		On entry : 0/0
  4614 ;;		On exit  : 0/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4617 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4618 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4619 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4620 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4621 ;;Total ram usage:        8 bytes
  4622 ;; Hardware stack levels used: 1
  4623 ;; Hardware stack levels required when called: 3
  4624 ;; This function calls:
  4625 ;;		_setMotorPWM
  4626 ;; This function is called by:
  4627 ;;		_motor_action
  4628 ;;		_motor_action_return
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text22
  4633   002776                     __ptext22:
  4634                           	callstack 0
  4635   002776                     _left_135:
  4636                           	callstack 26
  4637   002776                     
  4638                           ;../dc_motor.c: 181: void left_135(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 182: {;../dc_motor.c: 183:     mL->direction = 0;
  4639   002776  EE20 F001          	lfsr	2,1
  4640   00277A  501A               	movf	left_135@mL^0,w,c
  4641   00277C  26D9               	addwf	fsr2l,f,c
  4642   00277E  501B               	movf	(left_135@mL+1)^0,w,c
  4643   002780  22DA               	addwfc	fsr2h,f,c
  4644   002782  0E00               	movlw	0
  4645   002784  6EDF               	movwf	indf2,c
  4646                           
  4647                           ;../dc_motor.c: 184:     mR->direction = 1;
  4648   002786  EE20 F001          	lfsr	2,1
  4649   00278A  501C               	movf	left_135@mR^0,w,c
  4650   00278C  26D9               	addwf	fsr2l,f,c
  4651   00278E  501D               	movf	(left_135@mR+1)^0,w,c
  4652   002790  22DA               	addwfc	fsr2h,f,c
  4653   002792  0E01               	movlw	1
  4654   002794  6EDF               	movwf	indf2,c
  4655   002796                     
  4656                           ;../dc_motor.c: 185:     for (int i = 0;i<50;i = i + 2)
  4657   002796  0E00               	movlw	0
  4658   002798  6E21               	movwf	(left_135@i+1)^0,c
  4659   00279A  0E00               	movlw	0
  4660   00279C  6E20               	movwf	left_135@i^0,c
  4661   00279E                     l2697:
  4662                           
  4663                           ;../dc_motor.c: 186:     {;../dc_motor.c: 187:         mL->power = 50 + i;
  4664   00279E  5020               	movf	left_135@i^0,w,c
  4665   0027A0  0F32               	addlw	50
  4666   0027A2  C01A  FFD9         	movff	left_135@mL,fsr2l
  4667   0027A6  C01B  FFDA         	movff	left_135@mL+1,fsr2h
  4668   0027AA  6EDF               	movwf	indf2,c
  4669   0027AC                     
  4670                           ;../dc_motor.c: 188:         mR->power = i;
  4671   0027AC  C01C  FFD9         	movff	left_135@mR,fsr2l
  4672   0027B0  C01D  FFDA         	movff	left_135@mR+1,fsr2h
  4673   0027B4  C020  FFDF         	movff	left_135@i,indf2
  4674   0027B8                     
  4675                           ;../dc_motor.c: 189:         setMotorPWM(mL);
  4676   0027B8  C01A  F00F         	movff	left_135@mL,setMotorPWM@m
  4677   0027BC  C01B  F010         	movff	left_135@mL+1,setMotorPWM@m+1
  4678   0027C0  EC4B  F00D         	call	_setMotorPWM	;wreg free
  4679   0027C4                     
  4680                           ;../dc_motor.c: 190:         setMotorPWM(mR);
  4681   0027C4  C01C  F00F         	movff	left_135@mR,setMotorPWM@m
  4682   0027C8  C01D  F010         	movff	left_135@mR+1,setMotorPWM@m+1
  4683   0027CC  EC4B  F00D         	call	_setMotorPWM	;wreg free
  4684   0027D0                     
  4685                           ;../dc_motor.c: 191:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4686   0027D0  0E35               	movlw	53
  4687   0027D2                     u2077:
  4688   0027D2  2EE8               	decfsz	wreg,f,c
  4689   0027D4  D7FE               	bra	u2077
  4690   0027D6  F000               	nop	
  4691   0027D8                     
  4692                           ;../dc_motor.c: 192:     }
  4693   0027D8  0E02               	movlw	2
  4694   0027DA  2420               	addwf	left_135@i^0,w,c
  4695   0027DC  6E20               	movwf	left_135@i^0,c
  4696   0027DE  0E00               	movlw	0
  4697   0027E0  2021               	addwfc	(left_135@i+1)^0,w,c
  4698   0027E2  6E21               	movwf	(left_135@i+1)^0,c
  4699   0027E4  BE21               	btfsc	(left_135@i+1)^0,7,c
  4700   0027E6  EFFE  F013         	goto	u1491
  4701   0027EA  5021               	movf	(left_135@i+1)^0,w,c
  4702   0027EC  E109               	bnz	u1490
  4703   0027EE  0E32               	movlw	50
  4704   0027F0  5C20               	subwf	left_135@i^0,w,c
  4705   0027F2  A0D8               	btfss	status,0,c
  4706   0027F4  EFFE  F013         	goto	u1491
  4707   0027F8  EF00  F014         	goto	u1490
  4708   0027FC                     u1491:
  4709   0027FC  EFCF  F013         	goto	l2697
  4710   002800                     u1490:
  4711   002800                     
  4712                           ;../dc_motor.c: 193:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4713   002800  0E13               	movlw	19
  4714   002802  6E1F               	movwf	(??_left_135+1)^0,c
  4715   002804  0EAC               	movlw	172
  4716   002806  6E1E               	movwf	??_left_135^0,c
  4717   002808  0E2A               	movlw	42
  4718   00280A                     u2087:
  4719   00280A  2EE8               	decfsz	wreg,f,c
  4720   00280C  D7FE               	bra	u2087
  4721   00280E  2E1E               	decfsz	??_left_135^0,f,c
  4722   002810  D7FC               	bra	u2087
  4723   002812  2E1F               	decfsz	(??_left_135+1)^0,f,c
  4724   002814  D7FA               	bra	u2087
  4725   002816  0012               	return		;funcret
  4726   002818                     __end_of_left_135:
  4727                           	callstack 0
  4728                           
  4729 ;; *************** function _initUSART4 *****************
  4730 ;; Defined at:
  4731 ;;		line 5 in file "../serial.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;		None
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;		None
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  1    wreg      void 
  4738 ;; Registers used:
  4739 ;;		wreg, status,2
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4749 ;;Total ram usage:        0 bytes
  4750 ;; Hardware stack levels used: 1
  4751 ;; Hardware stack levels required when called: 1
  4752 ;; This function calls:
  4753 ;;		Nothing
  4754 ;; This function is called by:
  4755 ;;		_main
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           	psect	text23
  4760   002DFC                     __ptext23:
  4761                           	callstack 0
  4762   002DFC                     _initUSART4:
  4763                           	callstack 29
  4764   002DFC                     
  4765                           ;../serial.c: 9:     RC0PPS = 0x12;
  4766   002DFC  0E12               	movlw	18
  4767   002DFE  010E               	movlb	14	; () banked
  4768   002E00  6F62               	movwf	98,b	;volatile
  4769                           
  4770                           ;../serial.c: 10:     RX4PPS = 0x11;
  4771   002E02  0E11               	movlw	17
  4772   002E04  6F15               	movwf	21,b	;volatile
  4773   002E06                     
  4774                           ; BSR set to: 14
  4775                           ;../serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  4776   002E06  97E9               	bcf	233,3,b	;volatile
  4777   002E08                     
  4778                           ; BSR set to: 14
  4779                           ;../serial.c: 13:     TX4STAbits.BRGH = 0;
  4780   002E08  95E8               	bcf	232,2,b	;volatile
  4781                           
  4782                           ;../serial.c: 14:     SP4BRGL = 103;
  4783   002E0A  0E67               	movlw	103
  4784   002E0C  6FE5               	movwf	229,b	;volatile
  4785                           
  4786                           ;../serial.c: 15:     SP4BRGH = 0;
  4787   002E0E  0E00               	movlw	0
  4788   002E10  6FE6               	movwf	230,b	;volatile
  4789   002E12                     
  4790                           ; BSR set to: 14
  4791                           ;../serial.c: 17:     RC4STAbits.CREN = 1;
  4792   002E12  89E7               	bsf	231,4,b	;volatile
  4793   002E14                     
  4794                           ; BSR set to: 14
  4795                           ;../serial.c: 18:     TX4STAbits.TXEN = 1;
  4796   002E14  8BE8               	bsf	232,5,b	;volatile
  4797   002E16                     
  4798                           ; BSR set to: 14
  4799                           ;../serial.c: 19:     RC4STAbits.SPEN = 1;
  4800   002E16  8FE7               	bsf	231,7,b	;volatile
  4801   002E18                     
  4802                           ; BSR set to: 14
  4803   002E18  0012               	return		;funcret
  4804   002E1A                     __end_of_initUSART4:
  4805                           	callstack 0
  4806                           
  4807 ;; *************** function _initDCmotorsPWM *****************
  4808 ;; Defined at:
  4809 ;;		line 5 in file "../dc_motor.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;  PWMperiod       2    0[COMRAM] int 
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;		None
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  1    wreg      void 
  4816 ;; Registers used:
  4817 ;;		wreg, status,2
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4823 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4826 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4827 ;;Total ram usage:        2 bytes
  4828 ;; Hardware stack levels used: 1
  4829 ;; Hardware stack levels required when called: 1
  4830 ;; This function calls:
  4831 ;;		Nothing
  4832 ;; This function is called by:
  4833 ;;		_main
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           	psect	text24
  4838   002C2C                     __ptext24:
  4839                           	callstack 0
  4840   002C2C                     _initDCmotorsPWM:
  4841                           	callstack 29
  4842   002C2C                     
  4843                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  4844   002C2C  9485               	bcf	133,2,c	;volatile
  4845                           
  4846                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  4847   002C2E  9885               	bcf	133,4,c	;volatile
  4848                           
  4849                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  4850   002C30  9E83               	bcf	131,7,c	;volatile
  4851                           
  4852                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  4853   002C32  9C87               	bcf	135,6,c	;volatile
  4854                           
  4855                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  4856   002C34  947D               	bcf	125,2,c	;volatile
  4857                           
  4858                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  4859   002C36  987D               	bcf	125,4,c	;volatile
  4860                           
  4861                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  4862   002C38  9E7B               	bcf	123,7,c	;volatile
  4863                           
  4864                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  4865   002C3A  9C7F               	bcf	127,6,c	;volatile
  4866   002C3C                     
  4867                           ;../dc_motor.c: 17:     T2CONbits.CKPS=0b0011;
  4868   002C3C  50BD               	movf	189,w,c	;volatile
  4869   002C3E  0B8F               	andlw	-113
  4870   002C40  0930               	iorlw	48
  4871   002C42  6EBD               	movwf	189,c	;volatile
  4872                           
  4873                           ;../dc_motor.c: 18:     T2HLTbits.MODE=0b00000;
  4874   002C44  0EE0               	movlw	-32
  4875   002C46  16BE               	andwf	190,f,c	;volatile
  4876                           
  4877                           ;../dc_motor.c: 19:     T2CLKCONbits.CS=0b0001;
  4878   002C48  50BF               	movf	191,w,c	;volatile
  4879   002C4A  0BF0               	andlw	-16
  4880   002C4C  0901               	iorlw	1
  4881   002C4E  6EBF               	movwf	191,c	;volatile
  4882   002C50                     
  4883                           ;../dc_motor.c: 23:     T2PR=PWMperiod;
  4884   002C50  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4885   002C54                     
  4886                           ;../dc_motor.c: 24:     T2CONbits.ON=1;
  4887   002C54  8EBD               	bsf	189,7,c	;volatile
  4888                           
  4889                           ;../dc_motor.c: 26:     RE2PPS=0x0A;
  4890   002C56  0E0A               	movlw	10
  4891   002C58  010E               	movlb	14	; () banked
  4892   002C5A  6F74               	movwf	116,b	;volatile
  4893                           
  4894                           ;../dc_motor.c: 27:     RC7PPS=0x0B;
  4895   002C5C  0E0B               	movlw	11
  4896   002C5E  6F69               	movwf	105,b	;volatile
  4897                           
  4898                           ;../dc_motor.c: 29:     PWM6DCH=0;
  4899   002C60  0E00               	movlw	0
  4900   002C62  6EA3               	movwf	163,c	;volatile
  4901                           
  4902                           ;../dc_motor.c: 30:     PWM7DCH=0;
  4903   002C64  0E00               	movlw	0
  4904   002C66  6EA0               	movwf	160,c	;volatile
  4905   002C68                     
  4906                           ; BSR set to: 14
  4907                           ;../dc_motor.c: 32:     PWM6CONbits.EN = 1;
  4908   002C68  8EA4               	bsf	164,7,c	;volatile
  4909   002C6A                     
  4910                           ; BSR set to: 14
  4911                           ;../dc_motor.c: 33:     PWM7CONbits.EN = 1;
  4912   002C6A  8EA1               	bsf	161,7,c	;volatile
  4913   002C6C                     
  4914                           ; BSR set to: 14
  4915   002C6C  0012               	return		;funcret
  4916   002C6E                     __end_of_initDCmotorsPWM:
  4917                           	callstack 0
  4918                           
  4919 ;; *************** function _forward *****************
  4920 ;; Defined at:
  4921 ;;		line 77 in file "../dc_motor.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4924 ;;		 -> main@motorL(9), 
  4925 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4926 ;;		 -> main@motorR(9), 
  4927 ;; Auto vars:     Size  Location     Type
  4928 ;;  i               2   29[COMRAM] int 
  4929 ;; Return value:  Size  Location     Type
  4930 ;;                  1    wreg      void 
  4931 ;; Registers used:
  4932 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4933 ;; Tracked objects:
  4934 ;;		On entry : 0/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4938 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4941 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4942 ;;Total ram usage:        6 bytes
  4943 ;; Hardware stack levels used: 1
  4944 ;; Hardware stack levels required when called: 3
  4945 ;; This function calls:
  4946 ;;		_setMotorPWM
  4947 ;; This function is called by:
  4948 ;;		_main
  4949 ;;		_motor_action_return
  4950 ;; This function uses a non-reentrant model
  4951 ;;
  4952                           
  4953                           	psect	text25
  4954   0028A6                     __ptext25:
  4955                           	callstack 0
  4956   0028A6                     _forward:
  4957                           	callstack 27
  4958   0028A6                     
  4959                           ;../dc_motor.c: 77: void forward(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c
      +                          : 78: {;../dc_motor.c: 79:     mL->direction = 1;
  4960   0028A6  EE20 F001          	lfsr	2,1
  4961   0028AA  501A               	movf	forward@mL^0,w,c
  4962   0028AC  26D9               	addwf	fsr2l,f,c
  4963   0028AE  501B               	movf	(forward@mL+1)^0,w,c
  4964   0028B0  22DA               	addwfc	fsr2h,f,c
  4965   0028B2  0E01               	movlw	1
  4966   0028B4  6EDF               	movwf	indf2,c
  4967                           
  4968                           ;../dc_motor.c: 80:     mR->direction = 1;
  4969   0028B6  EE20 F001          	lfsr	2,1
  4970   0028BA  501C               	movf	forward@mR^0,w,c
  4971   0028BC  26D9               	addwf	fsr2l,f,c
  4972   0028BE  501D               	movf	(forward@mR+1)^0,w,c
  4973   0028C0  22DA               	addwfc	fsr2h,f,c
  4974   0028C2  0E01               	movlw	1
  4975   0028C4  6EDF               	movwf	indf2,c
  4976   0028C6                     
  4977                           ;../dc_motor.c: 81:     for (int i=0;i<31;i = i+2)
  4978   0028C6  0E00               	movlw	0
  4979   0028C8  6E1F               	movwf	(forward@i+1)^0,c
  4980   0028CA  0E00               	movlw	0
  4981   0028CC  6E1E               	movwf	forward@i^0,c
  4982   0028CE                     l2905:
  4983                           
  4984                           ;../dc_motor.c: 82:     {;../dc_motor.c: 83:         mL->power = i;
  4985   0028CE  C01A  FFD9         	movff	forward@mL,fsr2l
  4986   0028D2  C01B  FFDA         	movff	forward@mL+1,fsr2h
  4987   0028D6  C01E  FFDF         	movff	forward@i,indf2
  4988                           
  4989                           ;../dc_motor.c: 84:         mR->power = i;
  4990   0028DA  C01C  FFD9         	movff	forward@mR,fsr2l
  4991   0028DE  C01D  FFDA         	movff	forward@mR+1,fsr2h
  4992   0028E2  C01E  FFDF         	movff	forward@i,indf2
  4993   0028E6                     
  4994                           ;../dc_motor.c: 85:         setMotorPWM(mL);
  4995   0028E6  C01A  F00F         	movff	forward@mL,setMotorPWM@m
  4996   0028EA  C01B  F010         	movff	forward@mL+1,setMotorPWM@m+1
  4997   0028EE  EC4B  F00D         	call	_setMotorPWM	;wreg free
  4998   0028F2                     
  4999                           ;../dc_motor.c: 86:         setMotorPWM(mR);
  5000   0028F2  C01C  F00F         	movff	forward@mR,setMotorPWM@m
  5001   0028F6  C01D  F010         	movff	forward@mR+1,setMotorPWM@m+1
  5002   0028FA  EC4B  F00D         	call	_setMotorPWM	;wreg free
  5003   0028FE                     
  5004                           ;../dc_motor.c: 87:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  5005   0028FE  0E6A               	movlw	106
  5006   002900                     u2097:
  5007   002900  2EE8               	decfsz	wreg,f,c
  5008   002902  D7FE               	bra	u2097
  5009   002904  D000               	nop2	
  5010   002906                     
  5011                           ;../dc_motor.c: 88:     }
  5012   002906  0E02               	movlw	2
  5013   002908  241E               	addwf	forward@i^0,w,c
  5014   00290A  6E1E               	movwf	forward@i^0,c
  5015   00290C  0E00               	movlw	0
  5016   00290E  201F               	addwfc	(forward@i+1)^0,w,c
  5017   002910  6E1F               	movwf	(forward@i+1)^0,c
  5018   002912  BE1F               	btfsc	(forward@i+1)^0,7,c
  5019   002914  EF95  F014         	goto	u1731
  5020   002918  501F               	movf	(forward@i+1)^0,w,c
  5021   00291A  E109               	bnz	u1730
  5022   00291C  0E1F               	movlw	31
  5023   00291E  5C1E               	subwf	forward@i^0,w,c
  5024   002920  A0D8               	btfss	status,0,c
  5025   002922  EF95  F014         	goto	u1731
  5026   002926  EF97  F014         	goto	u1730
  5027   00292A                     u1731:
  5028   00292A  EF67  F014         	goto	l2905
  5029   00292E                     u1730:
  5030   00292E  0012               	return		;funcret
  5031   002930                     __end_of_forward:
  5032                           	callstack 0
  5033                           
  5034 ;; *************** function _setMotorPWM *****************
  5035 ;; Defined at:
  5036 ;;		line 38 in file "../dc_motor.c"
  5037 ;; Parameters:    Size  Location     Type
  5038 ;;  m               2   14[COMRAM] PTR struct DC_motor
  5039 ;;		 -> main@motorR(9), main@motorL(9), 
  5040 ;; Auto vars:     Size  Location     Type
  5041 ;;  PWMduty         2   23[COMRAM] int 
  5042 ;; Return value:  Size  Location     Type
  5043 ;;                  1    wreg      void 
  5044 ;; Registers used:
  5045 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5051 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5052 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5053 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5054 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5055 ;;Total ram usage:       11 bytes
  5056 ;; Hardware stack levels used: 1
  5057 ;; Hardware stack levels required when called: 2
  5058 ;; This function calls:
  5059 ;;		___awdiv
  5060 ;;		___wmul
  5061 ;; This function is called by:
  5062 ;;		_main
  5063 ;;		_stop
  5064 ;;		_forward
  5065 ;;		_reverse_fromcard
  5066 ;;		_reverse_onesquare
  5067 ;;		_right_90
  5068 ;;		_left_90
  5069 ;;		_spin_180
  5070 ;;		_right_135
  5071 ;;		_left_135
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075                           	psect	text26
  5076   001A96                     __ptext26:
  5077                           	callstack 0
  5078   001A96                     _setMotorPWM:
  5079                           	callstack 27
  5080   001A96                     
  5081                           ;../dc_motor.c: 38: void setMotorPWM(struct DC_motor *m);../dc_motor.c: 39: {;../dc_moto
      +                          r.c: 40:  int PWMduty;;../dc_motor.c: 42:  if (m->direction){
  5082   001A96  EE20 F001          	lfsr	2,1
  5083   001A9A  500F               	movf	setMotorPWM@m^0,w,c
  5084   001A9C  26D9               	addwf	fsr2l,f,c
  5085   001A9E  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5086   001AA0  22DA               	addwfc	fsr2h,f,c
  5087   001AA2  50DF               	movf	indf2,w,c
  5088   001AA4  B4D8               	btfsc	status,2,c
  5089   001AA6  EF57  F00D         	goto	u1351
  5090   001AAA  EF59  F00D         	goto	u1350
  5091   001AAE                     u1351:
  5092   001AAE  EF8A  F00D         	goto	l2451
  5093   001AB2                     u1350:
  5094   001AB2                     
  5095                           ;../dc_motor.c: 44:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  5096   001AB2  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  5097   001AB6  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5098   001ABA  50DF               	movf	indf2,w,c
  5099   001ABC  6E11               	movwf	??_setMotorPWM^0,c
  5100   001ABE  5011               	movf	??_setMotorPWM^0,w,c
  5101   001AC0  6E01               	movwf	___wmul@multiplier^0,c
  5102   001AC2  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5103   001AC4  EE20 F007          	lfsr	2,7
  5104   001AC8  500F               	movf	setMotorPWM@m^0,w,c
  5105   001ACA  26D9               	addwf	fsr2l,f,c
  5106   001ACC  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5107   001ACE  22DA               	addwfc	fsr2h,f,c
  5108   001AD0  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5109   001AD4  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5110   001AD8  ECB9  F016         	call	___wmul	;wreg free
  5111   001ADC  C001  F007         	movff	?___wmul,___awdiv@dividend
  5112   001AE0  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  5113   001AE4  0E00               	movlw	0
  5114   001AE6  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  5115   001AE8  0E64               	movlw	100
  5116   001AEA  6E09               	movwf	___awdiv@divisor^0,c
  5117   001AEC  ECBF  F010         	call	___awdiv	;wreg free
  5118   001AF0  EE20 F007          	lfsr	2,7
  5119   001AF4  500F               	movf	setMotorPWM@m^0,w,c
  5120   001AF6  26D9               	addwf	fsr2l,f,c
  5121   001AF8  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5122   001AFA  22DA               	addwfc	fsr2h,f,c
  5123   001AFC  CFDE F012          	movff	postinc2,??_setMotorPWM+1
  5124   001B00  CFDD F013          	movff	postdec2,??_setMotorPWM+2
  5125   001B04  5007               	movf	?___awdiv^0,w,c
  5126   001B06  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  5127   001B08  6E18               	movwf	setMotorPWM@PWMduty^0,c
  5128   001B0A  5008               	movf	(?___awdiv+1)^0,w,c
  5129   001B0C  5813               	subwfb	(??_setMotorPWM+2)^0,w,c
  5130   001B0E  6E19               	movwf	(setMotorPWM@PWMduty+1)^0,c
  5131                           
  5132                           ;../dc_motor.c: 45:  }
  5133   001B10  EFAD  F00D         	goto	l2453
  5134   001B14                     l2451:
  5135                           
  5136                           ;../dc_motor.c: 48:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  5137   001B14  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  5138   001B18  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5139   001B1C  50DF               	movf	indf2,w,c
  5140   001B1E  6E11               	movwf	??_setMotorPWM^0,c
  5141   001B20  5011               	movf	??_setMotorPWM^0,w,c
  5142   001B22  6E01               	movwf	___wmul@multiplier^0,c
  5143   001B24  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5144   001B26  EE20 F007          	lfsr	2,7
  5145   001B2A  500F               	movf	setMotorPWM@m^0,w,c
  5146   001B2C  26D9               	addwf	fsr2l,f,c
  5147   001B2E  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5148   001B30  22DA               	addwfc	fsr2h,f,c
  5149   001B32  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5150   001B36  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5151   001B3A  ECB9  F016         	call	___wmul	;wreg free
  5152   001B3E  C001  F007         	movff	?___wmul,___awdiv@dividend
  5153   001B42  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  5154   001B46  0E00               	movlw	0
  5155   001B48  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  5156   001B4A  0E64               	movlw	100
  5157   001B4C  6E09               	movwf	___awdiv@divisor^0,c
  5158   001B4E  ECBF  F010         	call	___awdiv	;wreg free
  5159   001B52  C007  F018         	movff	?___awdiv,setMotorPWM@PWMduty
  5160   001B56  C008  F019         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  5161   001B5A                     l2453:
  5162                           
  5163                           ;../dc_motor.c: 51:  *(m->dutyHighByte) = PWMduty;
  5164   001B5A  EE20 F002          	lfsr	2,2
  5165   001B5E  500F               	movf	setMotorPWM@m^0,w,c
  5166   001B60  26D9               	addwf	fsr2l,f,c
  5167   001B62  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5168   001B64  22DA               	addwfc	fsr2h,f,c
  5169   001B66  CFDE F011          	movff	postinc2,??_setMotorPWM
  5170   001B6A  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5171   001B6E  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5172   001B72  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5173   001B76  C018  FFDF         	movff	setMotorPWM@PWMduty,indf2
  5174   001B7A                     
  5175                           ;../dc_motor.c: 53:  if (m->direction){
  5176   001B7A  EE20 F001          	lfsr	2,1
  5177   001B7E  500F               	movf	setMotorPWM@m^0,w,c
  5178   001B80  26D9               	addwf	fsr2l,f,c
  5179   001B82  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5180   001B84  22DA               	addwfc	fsr2h,f,c
  5181   001B86  50DF               	movf	indf2,w,c
  5182   001B88  B4D8               	btfsc	status,2,c
  5183   001B8A  EFC9  F00D         	goto	u1361
  5184   001B8E  EFCB  F00D         	goto	u1360
  5185   001B92                     u1361:
  5186   001B92  EF00  F00E         	goto	l2459
  5187   001B96                     u1360:
  5188   001B96                     
  5189                           ;../dc_motor.c: 54:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  5190   001B96  EE20 F004          	lfsr	2,4
  5191   001B9A  500F               	movf	setMotorPWM@m^0,w,c
  5192   001B9C  26D9               	addwf	fsr2l,f,c
  5193   001B9E  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5194   001BA0  22DA               	addwfc	fsr2h,f,c
  5195   001BA2  CFDE F011          	movff	postinc2,??_setMotorPWM
  5196   001BA6  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5197   001BAA  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5198   001BAE  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5199   001BB2  EE10 F004          	lfsr	1,4
  5200   001BB6  500F               	movf	setMotorPWM@m^0,w,c
  5201   001BB8  26E1               	addwf	fsr1l,f,c
  5202   001BBA  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5203   001BBC  22E2               	addwfc	fsr1h,f,c
  5204   001BBE  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  5205   001BC2  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  5206   001BC6  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  5207   001BCA  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  5208   001BCE  50E7               	movf	indf1,w,c
  5209   001BD0  6E15               	movwf	(??_setMotorPWM+4)^0,c
  5210   001BD2  EE10 F006          	lfsr	1,6
  5211   001BD6  500F               	movf	setMotorPWM@m^0,w,c
  5212   001BD8  26E1               	addwf	fsr1l,f,c
  5213   001BDA  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5214   001BDC  22E2               	addwfc	fsr1h,f,c
  5215   001BDE  50E7               	movf	indf1,w,c
  5216   001BE0  6E16               	movwf	(??_setMotorPWM+5)^0,c
  5217   001BE2  0E01               	movlw	1
  5218   001BE4  6E17               	movwf	(??_setMotorPWM+6)^0,c
  5219   001BE6  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  5220   001BE8  EFF8  F00D         	goto	u1374
  5221   001BEC                     u1375:
  5222   001BEC  90D8               	bcf	status,0,c
  5223   001BEE  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  5224   001BF0                     u1374:
  5225   001BF0  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  5226   001BF2  EFF6  F00D         	goto	u1375
  5227   001BF6  5017               	movf	(??_setMotorPWM+6)^0,w,c
  5228   001BF8  1015               	iorwf	(??_setMotorPWM+4)^0,w,c
  5229   001BFA  6EDF               	movwf	indf2,c
  5230                           
  5231                           ;../dc_motor.c: 55:  } else {
  5232   001BFC  EF34  F00E         	goto	l262
  5233   001C00                     l2459:
  5234                           
  5235                           ;../dc_motor.c: 56:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  5236   001C00  EE20 F004          	lfsr	2,4
  5237   001C04  500F               	movf	setMotorPWM@m^0,w,c
  5238   001C06  26D9               	addwf	fsr2l,f,c
  5239   001C08  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5240   001C0A  22DA               	addwfc	fsr2h,f,c
  5241   001C0C  CFDE F011          	movff	postinc2,??_setMotorPWM
  5242   001C10  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  5243   001C14  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  5244   001C18  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5245   001C1C  EE10 F004          	lfsr	1,4
  5246   001C20  500F               	movf	setMotorPWM@m^0,w,c
  5247   001C22  26E1               	addwf	fsr1l,f,c
  5248   001C24  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5249   001C26  22E2               	addwfc	fsr1h,f,c
  5250   001C28  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  5251   001C2C  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  5252   001C30  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  5253   001C34  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  5254   001C38  50E7               	movf	indf1,w,c
  5255   001C3A  6E15               	movwf	(??_setMotorPWM+4)^0,c
  5256   001C3C  EE10 F006          	lfsr	1,6
  5257   001C40  500F               	movf	setMotorPWM@m^0,w,c
  5258   001C42  26E1               	addwf	fsr1l,f,c
  5259   001C44  5010               	movf	(setMotorPWM@m+1)^0,w,c
  5260   001C46  22E2               	addwfc	fsr1h,f,c
  5261   001C48  50E7               	movf	indf1,w,c
  5262   001C4A  6E16               	movwf	(??_setMotorPWM+5)^0,c
  5263   001C4C  0E01               	movlw	1
  5264   001C4E  6E17               	movwf	(??_setMotorPWM+6)^0,c
  5265   001C50  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  5266   001C52  EF2D  F00E         	goto	u1384
  5267   001C56                     u1385:
  5268   001C56  90D8               	bcf	status,0,c
  5269   001C58  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  5270   001C5A                     u1384:
  5271   001C5A  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  5272   001C5C  EF2B  F00E         	goto	u1385
  5273   001C60  5017               	movf	(??_setMotorPWM+6)^0,w,c
  5274   001C62  0AFF               	xorlw	255
  5275   001C64  1415               	andwf	(??_setMotorPWM+4)^0,w,c
  5276   001C66  6EDF               	movwf	indf2,c
  5277   001C68                     l262:
  5278   001C68  0012               	return		;funcret
  5279   001C6A                     __end_of_setMotorPWM:
  5280                           	callstack 0
  5281                           
  5282 ;; *************** function ___wmul *****************
  5283 ;; Defined at:
  5284 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;  multiplier      2    0[COMRAM] unsigned int 
  5287 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;  product         2    4[COMRAM] unsigned int 
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  2    0[COMRAM] unsigned int 
  5292 ;; Registers used:
  5293 ;;		wreg, status,2, status,0, prodl, prodh
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5299 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5300 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5302 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5303 ;;Total ram usage:        6 bytes
  5304 ;; Hardware stack levels used: 1
  5305 ;; Hardware stack levels required when called: 1
  5306 ;; This function calls:
  5307 ;;		Nothing
  5308 ;; This function is called by:
  5309 ;;		_setMotorPWM
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313                           	psect	text27
  5314   002D72                     __ptext27:
  5315                           	callstack 0
  5316   002D72                     ___wmul:
  5317                           	callstack 27
  5318   002D72  5001               	movf	___wmul@multiplier^0,w,c
  5319   002D74  0203               	mulwf	___wmul@multiplicand^0,c
  5320   002D76  CFF3 F005          	movff	prodl,___wmul@product
  5321   002D7A  CFF4 F006          	movff	prodh,___wmul@product+1
  5322   002D7E  5001               	movf	___wmul@multiplier^0,w,c
  5323   002D80  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5324   002D82  50F3               	movf	243,w,c
  5325   002D84  2606               	addwf	(___wmul@product+1)^0,f,c
  5326   002D86  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5327   002D88  0203               	mulwf	___wmul@multiplicand^0,c
  5328   002D8A  50F3               	movf	243,w,c
  5329   002D8C  2606               	addwf	(___wmul@product+1)^0,f,c
  5330   002D8E  C005  F001         	movff	___wmul@product,?___wmul
  5331   002D92  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5332   002D96  0012               	return		;funcret
  5333   002D98                     __end_of___wmul:
  5334                           	callstack 0
  5335                           
  5336 ;; *************** function ___awdiv *****************
  5337 ;; Defined at:
  5338 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;  dividend        2    6[COMRAM] int 
  5341 ;;  divisor         2    8[COMRAM] int 
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;  quotient        2   12[COMRAM] int 
  5344 ;;  sign            1   11[COMRAM] unsigned char 
  5345 ;;  counter         1   10[COMRAM] unsigned char 
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  2    6[COMRAM] int 
  5348 ;; Registers used:
  5349 ;;		wreg, status,2, status,0
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5355 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5356 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5358 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5359 ;;Total ram usage:        8 bytes
  5360 ;; Hardware stack levels used: 1
  5361 ;; Hardware stack levels required when called: 1
  5362 ;; This function calls:
  5363 ;;		Nothing
  5364 ;; This function is called by:
  5365 ;;		_setMotorPWM
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           	psect	text28
  5370   00217E                     __ptext28:
  5371                           	callstack 0
  5372   00217E                     ___awdiv:
  5373                           	callstack 27
  5374   00217E  0E00               	movlw	0
  5375   002180  6E0C               	movwf	___awdiv@sign^0,c
  5376   002182  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
  5377   002184  EFC8  F010         	goto	u1170
  5378   002188  EFC6  F010         	goto	u1171
  5379   00218C                     u1171:
  5380   00218C  EFCE  F010         	goto	l2329
  5381   002190                     u1170:
  5382   002190  6C09               	negf	___awdiv@divisor^0,c
  5383   002192  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  5384   002194  B0D8               	btfsc	status,0,c
  5385   002196  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  5386   002198  0E01               	movlw	1
  5387   00219A  6E0C               	movwf	___awdiv@sign^0,c
  5388   00219C                     l2329:
  5389   00219C  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
  5390   00219E  EFD5  F010         	goto	u1180
  5391   0021A2  EFD3  F010         	goto	u1181
  5392   0021A6                     u1181:
  5393   0021A6  EFDB  F010         	goto	l2335
  5394   0021AA                     u1180:
  5395   0021AA  6C07               	negf	___awdiv@dividend^0,c
  5396   0021AC  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  5397   0021AE  B0D8               	btfsc	status,0,c
  5398   0021B0  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  5399   0021B2  0E01               	movlw	1
  5400   0021B4  1A0C               	xorwf	___awdiv@sign^0,f,c
  5401   0021B6                     l2335:
  5402   0021B6  0E00               	movlw	0
  5403   0021B8  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  5404   0021BA  0E00               	movlw	0
  5405   0021BC  6E0D               	movwf	___awdiv@quotient^0,c
  5406   0021BE  5009               	movf	___awdiv@divisor^0,w,c
  5407   0021C0  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  5408   0021C2  B4D8               	btfsc	status,2,c
  5409   0021C4  EFE6  F010         	goto	u1191
  5410   0021C8  EFE8  F010         	goto	u1190
  5411   0021CC                     u1191:
  5412   0021CC  EF10  F011         	goto	l2357
  5413   0021D0                     u1190:
  5414   0021D0  0E01               	movlw	1
  5415   0021D2  6E0B               	movwf	___awdiv@counter^0,c
  5416   0021D4  EFF0  F010         	goto	l2343
  5417   0021D8                     l2341:
  5418   0021D8  90D8               	bcf	status,0,c
  5419   0021DA  3609               	rlcf	___awdiv@divisor^0,f,c
  5420   0021DC  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  5421   0021DE  2A0B               	incf	___awdiv@counter^0,f,c
  5422   0021E0                     l2343:
  5423   0021E0  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  5424   0021E2  EFF5  F010         	goto	u1201
  5425   0021E6  EFF7  F010         	goto	u1200
  5426   0021EA                     u1201:
  5427   0021EA  EFEC  F010         	goto	l2341
  5428   0021EE                     u1200:
  5429   0021EE                     l2345:
  5430   0021EE  90D8               	bcf	status,0,c
  5431   0021F0  360D               	rlcf	___awdiv@quotient^0,f,c
  5432   0021F2  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  5433   0021F4  5009               	movf	___awdiv@divisor^0,w,c
  5434   0021F6  5C07               	subwf	___awdiv@dividend^0,w,c
  5435   0021F8  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5436   0021FA  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  5437   0021FC  A0D8               	btfss	status,0,c
  5438   0021FE  EF03  F011         	goto	u1211
  5439   002202  EF05  F011         	goto	u1210
  5440   002206                     u1211:
  5441   002206  EF0A  F011         	goto	l2353
  5442   00220A                     u1210:
  5443   00220A  5009               	movf	___awdiv@divisor^0,w,c
  5444   00220C  5E07               	subwf	___awdiv@dividend^0,f,c
  5445   00220E  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5446   002210  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  5447   002212  800D               	bsf	___awdiv@quotient^0,0,c
  5448   002214                     l2353:
  5449   002214  90D8               	bcf	status,0,c
  5450   002216  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  5451   002218  3209               	rrcf	___awdiv@divisor^0,f,c
  5452   00221A  2E0B               	decfsz	___awdiv@counter^0,f,c
  5453   00221C  EFF7  F010         	goto	l2345
  5454   002220                     l2357:
  5455   002220  500C               	movf	___awdiv@sign^0,w,c
  5456   002222  B4D8               	btfsc	status,2,c
  5457   002224  EF16  F011         	goto	u1221
  5458   002228  EF18  F011         	goto	u1220
  5459   00222C                     u1221:
  5460   00222C  EF1C  F011         	goto	l2361
  5461   002230                     u1220:
  5462   002230  6C0D               	negf	___awdiv@quotient^0,c
  5463   002232  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  5464   002234  B0D8               	btfsc	status,0,c
  5465   002236  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  5466   002238                     l2361:
  5467   002238  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  5468   00223C  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  5469   002240  0012               	return		;funcret
  5470   002242                     __end_of___awdiv:
  5471                           	callstack 0
  5472                           
  5473 ;; *************** function _color_read *****************
  5474 ;; Defined at:
  5475 ;;		line 111 in file "../color.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  rgb             2   11[COMRAM] PTR struct RGB_val
  5478 ;;		 -> main@RGB_recorded(8), main@RGB_calibrated(8), main@L_calibrated(8), 
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;		None
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      void 
  5483 ;; Registers used:
  5484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5490 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5492 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5493 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5494 ;;Total ram usage:        4 bytes
  5495 ;; Hardware stack levels used: 1
  5496 ;; Hardware stack levels required when called: 4
  5497 ;; This function calls:
  5498 ;;		_color_read_Blue
  5499 ;;		_color_read_Green
  5500 ;;		_color_read_Luminosity
  5501 ;;		_color_read_Red
  5502 ;; This function is called by:
  5503 ;;		_main
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           	psect	text29
  5508   002300                     __ptext29:
  5509                           	callstack 0
  5510   002300                     _color_read:
  5511                           	callstack 26
  5512   002300                     
  5513                           ;../color.c: 111: void color_read(struct RGB_val *rgb);../color.c: 112: {;../color.c: 11
      +                          3:     rgb->L = color_read_Luminosity();
  5514   002300  EC7C  F015         	call	_color_read_Luminosity	;wreg free
  5515   002304  C00C  FFD9         	movff	color_read@rgb,fsr2l
  5516   002308  C00D  FFDA         	movff	color_read@rgb+1,fsr2h
  5517   00230C  C005  FFDE         	movff	?_color_read_Luminosity,postinc2
  5518   002310  C006  FFDD         	movff	?_color_read_Luminosity+1,postdec2
  5519   002314                     
  5520                           ;../color.c: 114:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5521   002314  0E09               	movlw	9
  5522   002316  6E0F               	movwf	(??_color_read+1)^0,c
  5523   002318  0E1E               	movlw	30
  5524   00231A  6E0E               	movwf	??_color_read^0,c
  5525   00231C  0EE4               	movlw	228
  5526   00231E                     u2107:
  5527   00231E  2EE8               	decfsz	wreg,f,c
  5528   002320  D7FE               	bra	u2107
  5529   002322  2E0E               	decfsz	??_color_read^0,f,c
  5530   002324  D7FC               	bra	u2107
  5531   002326  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5532   002328  D7FA               	bra	u2107
  5533   00232A  D000               	nop2	
  5534   00232C                     
  5535                           ;../color.c: 115:     rgb->R = color_read_Red();
  5536   00232C  EC54  F015         	call	_color_read_Red	;wreg free
  5537   002330  EE20 F002          	lfsr	2,2
  5538   002334  500C               	movf	color_read@rgb^0,w,c
  5539   002336  26D9               	addwf	fsr2l,f,c
  5540   002338  500D               	movf	(color_read@rgb+1)^0,w,c
  5541   00233A  22DA               	addwfc	fsr2h,f,c
  5542   00233C  C005  FFDE         	movff	?_color_read_Red,postinc2
  5543   002340  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  5544                           
  5545                           ;../color.c: 116:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5546   002344  0E09               	movlw	9
  5547   002346  6E0F               	movwf	(??_color_read+1)^0,c
  5548   002348  0E1E               	movlw	30
  5549   00234A  6E0E               	movwf	??_color_read^0,c
  5550   00234C  0EE4               	movlw	228
  5551   00234E                     u2117:
  5552   00234E  2EE8               	decfsz	wreg,f,c
  5553   002350  D7FE               	bra	u2117
  5554   002352  2E0E               	decfsz	??_color_read^0,f,c
  5555   002354  D7FC               	bra	u2117
  5556   002356  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5557   002358  D7FA               	bra	u2117
  5558   00235A  D000               	nop2	
  5559   00235C                     
  5560                           ;../color.c: 117:     rgb->G = color_read_Green();
  5561   00235C  ECA4  F015         	call	_color_read_Green	;wreg free
  5562   002360  EE20 F004          	lfsr	2,4
  5563   002364  500C               	movf	color_read@rgb^0,w,c
  5564   002366  26D9               	addwf	fsr2l,f,c
  5565   002368  500D               	movf	(color_read@rgb+1)^0,w,c
  5566   00236A  22DA               	addwfc	fsr2h,f,c
  5567   00236C  C005  FFDE         	movff	?_color_read_Green,postinc2
  5568   002370  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  5569   002374                     
  5570                           ;../color.c: 118:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5571   002374  0E09               	movlw	9
  5572   002376  6E0F               	movwf	(??_color_read+1)^0,c
  5573   002378  0E1E               	movlw	30
  5574   00237A  6E0E               	movwf	??_color_read^0,c
  5575   00237C  0EE4               	movlw	228
  5576   00237E                     u2127:
  5577   00237E  2EE8               	decfsz	wreg,f,c
  5578   002380  D7FE               	bra	u2127
  5579   002382  2E0E               	decfsz	??_color_read^0,f,c
  5580   002384  D7FC               	bra	u2127
  5581   002386  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5582   002388  D7FA               	bra	u2127
  5583   00238A  D000               	nop2	
  5584                           
  5585                           ;../color.c: 119:     rgb->B = color_read_Blue();
  5586   00238C  ECCC  F015         	call	_color_read_Blue	;wreg free
  5587   002390  EE20 F006          	lfsr	2,6
  5588   002394  500C               	movf	color_read@rgb^0,w,c
  5589   002396  26D9               	addwf	fsr2l,f,c
  5590   002398  500D               	movf	(color_read@rgb+1)^0,w,c
  5591   00239A  22DA               	addwfc	fsr2h,f,c
  5592   00239C  C005  FFDE         	movff	?_color_read_Blue,postinc2
  5593   0023A0  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  5594   0023A4  0012               	return		;funcret
  5595   0023A6                     __end_of_color_read:
  5596                           	callstack 0
  5597                           
  5598 ;; *************** function _color_read_Red *****************
  5599 ;; Defined at:
  5600 ;;		line 69 in file "../color.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;		None
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;  tmp             2    9[COMRAM] unsigned int 
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  2    4[COMRAM] unsigned int 
  5607 ;; Registers used:
  5608 ;;		wreg, status,2, status,0, cstack
  5609 ;; Tracked objects:
  5610 ;;		On entry : 0/0
  5611 ;;		On exit  : 0/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5614 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5615 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5616 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5617 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5618 ;;Total ram usage:        7 bytes
  5619 ;; Hardware stack levels used: 1
  5620 ;; Hardware stack levels required when called: 3
  5621 ;; This function calls:
  5622 ;;		_I2C_2_Master_Read
  5623 ;;		_I2C_2_Master_RepStart
  5624 ;;		_I2C_2_Master_Start
  5625 ;;		_I2C_2_Master_Stop
  5626 ;;		_I2C_2_Master_Write
  5627 ;; This function is called by:
  5628 ;;		_color_read
  5629 ;; This function uses a non-reentrant model
  5630 ;;
  5631                           
  5632                           	psect	text30
  5633   002AA8                     __ptext30:
  5634                           	callstack 0
  5635   002AA8                     _color_read_Red:
  5636                           	callstack 26
  5637   002AA8                     
  5638                           ;../color.c: 71:  unsigned int tmp;;../color.c: 72:  I2C_2_Master_Start();
  5639   002AA8  EC34  F017         	call	_I2C_2_Master_Start	;wreg free
  5640                           
  5641                           ;../color.c: 73:  I2C_2_Master_Write(0x52 | 0x00);
  5642   002AAC  0E52               	movlw	82
  5643   002AAE  EC24  F017         	call	_I2C_2_Master_Write
  5644                           
  5645                           ;../color.c: 74:  I2C_2_Master_Write(0xA0 | 0x16);
  5646   002AB2  0EB6               	movlw	182
  5647   002AB4  EC24  F017         	call	_I2C_2_Master_Write
  5648                           
  5649                           ;../color.c: 75:  I2C_2_Master_RepStart();
  5650   002AB8  EC2A  F017         	call	_I2C_2_Master_RepStart	;wreg free
  5651                           
  5652                           ;../color.c: 76:  I2C_2_Master_Write(0x52 | 0x01);
  5653   002ABC  0E53               	movlw	83
  5654   002ABE  EC24  F017         	call	_I2C_2_Master_Write
  5655                           
  5656                           ;../color.c: 77:  tmp=I2C_2_Master_Read(1);
  5657   002AC2  0E01               	movlw	1
  5658   002AC4  EC37  F016         	call	_I2C_2_Master_Read
  5659   002AC8  6E07               	movwf	??_color_read_Red^0,c
  5660   002ACA  5007               	movf	??_color_read_Red^0,w,c
  5661   002ACC  6E0A               	movwf	color_read_Red@tmp^0,c
  5662   002ACE  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  5663                           
  5664                           ;../color.c: 78:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5665   002AD0  0E00               	movlw	0
  5666   002AD2  EC37  F016         	call	_I2C_2_Master_Read
  5667   002AD6  6E07               	movwf	??_color_read_Red^0,c
  5668   002AD8  5007               	movf	??_color_read_Red^0,w,c
  5669   002ADA  6E09               	movwf	(??_color_read_Red+2)^0,c
  5670   002ADC  6A08               	clrf	(??_color_read_Red+1)^0,c
  5671   002ADE  500A               	movf	color_read_Red@tmp^0,w,c
  5672   002AE0  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  5673   002AE2  6E0A               	movwf	color_read_Red@tmp^0,c
  5674   002AE4  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  5675   002AE6  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  5676   002AE8  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5677                           
  5678                           ;../color.c: 79:  I2C_2_Master_Stop();
  5679   002AEA  EC2F  F017         	call	_I2C_2_Master_Stop	;wreg free
  5680   002AEE                     
  5681                           ;../color.c: 80:  return tmp;
  5682   002AEE  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5683   002AF2  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5684   002AF6  0012               	return		;funcret
  5685   002AF8                     __end_of_color_read_Red:
  5686                           	callstack 0
  5687                           
  5688 ;; *************** function _color_read_Luminosity *****************
  5689 ;; Defined at:
  5690 ;;		line 55 in file "../color.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;		None
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;  tmp             2    9[COMRAM] unsigned int 
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  2    4[COMRAM] unsigned int 
  5697 ;; Registers used:
  5698 ;;		wreg, status,2, status,0, cstack
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5704 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5705 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5706 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5707 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5708 ;;Total ram usage:        7 bytes
  5709 ;; Hardware stack levels used: 1
  5710 ;; Hardware stack levels required when called: 3
  5711 ;; This function calls:
  5712 ;;		_I2C_2_Master_Read
  5713 ;;		_I2C_2_Master_RepStart
  5714 ;;		_I2C_2_Master_Start
  5715 ;;		_I2C_2_Master_Stop
  5716 ;;		_I2C_2_Master_Write
  5717 ;; This function is called by:
  5718 ;;		_color_read
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           	psect	text31
  5723   002AF8                     __ptext31:
  5724                           	callstack 0
  5725   002AF8                     _color_read_Luminosity:
  5726                           	callstack 26
  5727   002AF8                     
  5728                           ;../color.c: 57:  unsigned int tmp;;../color.c: 58:  I2C_2_Master_Start();
  5729   002AF8  EC34  F017         	call	_I2C_2_Master_Start	;wreg free
  5730                           
  5731                           ;../color.c: 59:  I2C_2_Master_Write(0x52 | 0x00);
  5732   002AFC  0E52               	movlw	82
  5733   002AFE  EC24  F017         	call	_I2C_2_Master_Write
  5734                           
  5735                           ;../color.c: 60:  I2C_2_Master_Write(0xA0 | 0x14);
  5736   002B02  0EB4               	movlw	180
  5737   002B04  EC24  F017         	call	_I2C_2_Master_Write
  5738                           
  5739                           ;../color.c: 61:  I2C_2_Master_RepStart();
  5740   002B08  EC2A  F017         	call	_I2C_2_Master_RepStart	;wreg free
  5741                           
  5742                           ;../color.c: 62:  I2C_2_Master_Write(0x52 | 0x01);
  5743   002B0C  0E53               	movlw	83
  5744   002B0E  EC24  F017         	call	_I2C_2_Master_Write
  5745                           
  5746                           ;../color.c: 63:  tmp=I2C_2_Master_Read(1);
  5747   002B12  0E01               	movlw	1
  5748   002B14  EC37  F016         	call	_I2C_2_Master_Read
  5749   002B18  6E07               	movwf	??_color_read_Luminosity^0,c
  5750   002B1A  5007               	movf	??_color_read_Luminosity^0,w,c
  5751   002B1C  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5752   002B1E  6A0B               	clrf	(color_read_Luminosity@tmp+1)^0,c
  5753                           
  5754                           ;../color.c: 64:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5755   002B20  0E00               	movlw	0
  5756   002B22  EC37  F016         	call	_I2C_2_Master_Read
  5757   002B26  6E07               	movwf	??_color_read_Luminosity^0,c
  5758   002B28  5007               	movf	??_color_read_Luminosity^0,w,c
  5759   002B2A  6E09               	movwf	(??_color_read_Luminosity+2)^0,c
  5760   002B2C  6A08               	clrf	(??_color_read_Luminosity+1)^0,c
  5761   002B2E  500A               	movf	color_read_Luminosity@tmp^0,w,c
  5762   002B30  1008               	iorwf	(??_color_read_Luminosity+1)^0,w,c
  5763   002B32  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5764   002B34  500B               	movf	(color_read_Luminosity@tmp+1)^0,w,c
  5765   002B36  1009               	iorwf	(??_color_read_Luminosity+2)^0,w,c
  5766   002B38  6E0B               	movwf	(color_read_Luminosity@tmp+1)^0,c
  5767                           
  5768                           ;../color.c: 65:  I2C_2_Master_Stop();
  5769   002B3A  EC2F  F017         	call	_I2C_2_Master_Stop	;wreg free
  5770   002B3E                     
  5771                           ;../color.c: 66:  return tmp;
  5772   002B3E  C00A  F005         	movff	color_read_Luminosity@tmp,?_color_read_Luminosity
  5773   002B42  C00B  F006         	movff	color_read_Luminosity@tmp+1,?_color_read_Luminosity+1
  5774   002B46  0012               	return		;funcret
  5775   002B48                     __end_of_color_read_Luminosity:
  5776                           	callstack 0
  5777                           
  5778 ;; *************** function _color_read_Green *****************
  5779 ;; Defined at:
  5780 ;;		line 83 in file "../color.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;		None
  5783 ;; Auto vars:     Size  Location     Type
  5784 ;;  tmp             2    9[COMRAM] unsigned int 
  5785 ;; Return value:  Size  Location     Type
  5786 ;;                  2    4[COMRAM] unsigned int 
  5787 ;; Registers used:
  5788 ;;		wreg, status,2, status,0, cstack
  5789 ;; Tracked objects:
  5790 ;;		On entry : 0/0
  5791 ;;		On exit  : 0/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5795 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5796 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5797 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5798 ;;Total ram usage:        7 bytes
  5799 ;; Hardware stack levels used: 1
  5800 ;; Hardware stack levels required when called: 3
  5801 ;; This function calls:
  5802 ;;		_I2C_2_Master_Read
  5803 ;;		_I2C_2_Master_RepStart
  5804 ;;		_I2C_2_Master_Start
  5805 ;;		_I2C_2_Master_Stop
  5806 ;;		_I2C_2_Master_Write
  5807 ;; This function is called by:
  5808 ;;		_color_read
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           	psect	text32
  5813   002B48                     __ptext32:
  5814                           	callstack 0
  5815   002B48                     _color_read_Green:
  5816                           	callstack 26
  5817   002B48                     
  5818                           ;../color.c: 85:  unsigned int tmp;;../color.c: 86:  I2C_2_Master_Start();
  5819   002B48  EC34  F017         	call	_I2C_2_Master_Start	;wreg free
  5820                           
  5821                           ;../color.c: 87:  I2C_2_Master_Write(0x52 | 0x00);
  5822   002B4C  0E52               	movlw	82
  5823   002B4E  EC24  F017         	call	_I2C_2_Master_Write
  5824                           
  5825                           ;../color.c: 88:  I2C_2_Master_Write(0xA0 | 0x18);
  5826   002B52  0EB8               	movlw	184
  5827   002B54  EC24  F017         	call	_I2C_2_Master_Write
  5828                           
  5829                           ;../color.c: 89:  I2C_2_Master_RepStart();
  5830   002B58  EC2A  F017         	call	_I2C_2_Master_RepStart	;wreg free
  5831                           
  5832                           ;../color.c: 90:  I2C_2_Master_Write(0x52 | 0x01);
  5833   002B5C  0E53               	movlw	83
  5834   002B5E  EC24  F017         	call	_I2C_2_Master_Write
  5835                           
  5836                           ;../color.c: 91:  tmp=I2C_2_Master_Read(1);
  5837   002B62  0E01               	movlw	1
  5838   002B64  EC37  F016         	call	_I2C_2_Master_Read
  5839   002B68  6E07               	movwf	??_color_read_Green^0,c
  5840   002B6A  5007               	movf	??_color_read_Green^0,w,c
  5841   002B6C  6E0A               	movwf	color_read_Green@tmp^0,c
  5842   002B6E  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5843                           
  5844                           ;../color.c: 92:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5845   002B70  0E00               	movlw	0
  5846   002B72  EC37  F016         	call	_I2C_2_Master_Read
  5847   002B76  6E07               	movwf	??_color_read_Green^0,c
  5848   002B78  5007               	movf	??_color_read_Green^0,w,c
  5849   002B7A  6E09               	movwf	(??_color_read_Green+2)^0,c
  5850   002B7C  6A08               	clrf	(??_color_read_Green+1)^0,c
  5851   002B7E  500A               	movf	color_read_Green@tmp^0,w,c
  5852   002B80  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5853   002B82  6E0A               	movwf	color_read_Green@tmp^0,c
  5854   002B84  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5855   002B86  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5856   002B88  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5857                           
  5858                           ;../color.c: 93:  I2C_2_Master_Stop();
  5859   002B8A  EC2F  F017         	call	_I2C_2_Master_Stop	;wreg free
  5860   002B8E                     
  5861                           ;../color.c: 94:  return tmp;
  5862   002B8E  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5863   002B92  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5864   002B96  0012               	return		;funcret
  5865   002B98                     __end_of_color_read_Green:
  5866                           	callstack 0
  5867                           
  5868 ;; *************** function _color_read_Blue *****************
  5869 ;; Defined at:
  5870 ;;		line 97 in file "../color.c"
  5871 ;; Parameters:    Size  Location     Type
  5872 ;;		None
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;  tmp             2    9[COMRAM] unsigned int 
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  2    4[COMRAM] unsigned int 
  5877 ;; Registers used:
  5878 ;;		wreg, status,2, status,0, cstack
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5884 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5886 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5887 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5888 ;;Total ram usage:        7 bytes
  5889 ;; Hardware stack levels used: 1
  5890 ;; Hardware stack levels required when called: 3
  5891 ;; This function calls:
  5892 ;;		_I2C_2_Master_Read
  5893 ;;		_I2C_2_Master_RepStart
  5894 ;;		_I2C_2_Master_Start
  5895 ;;		_I2C_2_Master_Stop
  5896 ;;		_I2C_2_Master_Write
  5897 ;; This function is called by:
  5898 ;;		_color_read
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901                           
  5902                           	psect	text33
  5903   002B98                     __ptext33:
  5904                           	callstack 0
  5905   002B98                     _color_read_Blue:
  5906                           	callstack 26
  5907   002B98                     
  5908                           ;../color.c: 99:  unsigned int tmp;;../color.c: 100:  I2C_2_Master_Start();
  5909   002B98  EC34  F017         	call	_I2C_2_Master_Start	;wreg free
  5910                           
  5911                           ;../color.c: 101:  I2C_2_Master_Write(0x52 | 0x00);
  5912   002B9C  0E52               	movlw	82
  5913   002B9E  EC24  F017         	call	_I2C_2_Master_Write
  5914                           
  5915                           ;../color.c: 102:  I2C_2_Master_Write(0xA0 | 0x1A);
  5916   002BA2  0EBA               	movlw	186
  5917   002BA4  EC24  F017         	call	_I2C_2_Master_Write
  5918                           
  5919                           ;../color.c: 103:  I2C_2_Master_RepStart();
  5920   002BA8  EC2A  F017         	call	_I2C_2_Master_RepStart	;wreg free
  5921                           
  5922                           ;../color.c: 104:  I2C_2_Master_Write(0x52 | 0x01);
  5923   002BAC  0E53               	movlw	83
  5924   002BAE  EC24  F017         	call	_I2C_2_Master_Write
  5925                           
  5926                           ;../color.c: 105:  tmp=I2C_2_Master_Read(1);
  5927   002BB2  0E01               	movlw	1
  5928   002BB4  EC37  F016         	call	_I2C_2_Master_Read
  5929   002BB8  6E07               	movwf	??_color_read_Blue^0,c
  5930   002BBA  5007               	movf	??_color_read_Blue^0,w,c
  5931   002BBC  6E0A               	movwf	color_read_Blue@tmp^0,c
  5932   002BBE  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5933                           
  5934                           ;../color.c: 106:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5935   002BC0  0E00               	movlw	0
  5936   002BC2  EC37  F016         	call	_I2C_2_Master_Read
  5937   002BC6  6E07               	movwf	??_color_read_Blue^0,c
  5938   002BC8  5007               	movf	??_color_read_Blue^0,w,c
  5939   002BCA  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5940   002BCC  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5941   002BCE  500A               	movf	color_read_Blue@tmp^0,w,c
  5942   002BD0  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5943   002BD2  6E0A               	movwf	color_read_Blue@tmp^0,c
  5944   002BD4  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5945   002BD6  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5946   002BD8  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5947                           
  5948                           ;../color.c: 107:  I2C_2_Master_Stop();
  5949   002BDA  EC2F  F017         	call	_I2C_2_Master_Stop	;wreg free
  5950   002BDE                     
  5951                           ;../color.c: 108:  return tmp;
  5952   002BDE  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5953   002BE2  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5954   002BE6  0012               	return		;funcret
  5955   002BE8                     __end_of_color_read_Blue:
  5956                           	callstack 0
  5957                           
  5958 ;; *************** function _I2C_2_Master_RepStart *****************
  5959 ;; Defined at:
  5960 ;;		line 33 in file "../i2c.c"
  5961 ;; Parameters:    Size  Location     Type
  5962 ;;		None
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;		None
  5965 ;; Return value:  Size  Location     Type
  5966 ;;                  1    wreg      void 
  5967 ;; Registers used:
  5968 ;;		wreg, status,2, status,0, cstack
  5969 ;; Tracked objects:
  5970 ;;		On entry : 0/0
  5971 ;;		On exit  : 0/0
  5972 ;;		Unchanged: 0/0
  5973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5978 ;;Total ram usage:        0 bytes
  5979 ;; Hardware stack levels used: 1
  5980 ;; Hardware stack levels required when called: 2
  5981 ;; This function calls:
  5982 ;;		_I2C_2_Master_Idle
  5983 ;; This function is called by:
  5984 ;;		_color_read_Luminosity
  5985 ;;		_color_read_Red
  5986 ;;		_color_read_Green
  5987 ;;		_color_read_Blue
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text34
  5992   002E54                     __ptext34:
  5993                           	callstack 0
  5994   002E54                     _I2C_2_Master_RepStart:
  5995                           	callstack 26
  5996   002E54                     
  5997                           ;../i2c.c: 35:   I2C_2_Master_Idle();
  5998   002E54  ECA5  F016         	call	_I2C_2_Master_Idle	;wreg free
  5999   002E58                     
  6000                           ;../i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6001   002E58  010E               	movlb	14	; () banked
  6002   002E5A  83DA               	bsf	218,1,b	;volatile
  6003   002E5C                     
  6004                           ; BSR set to: 14
  6005   002E5C  0012               	return		;funcret
  6006   002E5E                     __end_of_I2C_2_Master_RepStart:
  6007                           	callstack 0
  6008                           
  6009 ;; *************** function _I2C_2_Master_Read *****************
  6010 ;; Defined at:
  6011 ;;		line 51 in file "../i2c.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;  ack             1    wreg     unsigned char 
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;  ack             1    2[COMRAM] unsigned char 
  6016 ;;  tmp             1    3[COMRAM] unsigned char 
  6017 ;; Return value:  Size  Location     Type
  6018 ;;                  1    wreg      unsigned char 
  6019 ;; Registers used:
  6020 ;;		wreg, status,2, status,0, cstack
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6027 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6028 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6029 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6030 ;;Total ram usage:        3 bytes
  6031 ;; Hardware stack levels used: 1
  6032 ;; Hardware stack levels required when called: 2
  6033 ;; This function calls:
  6034 ;;		_I2C_2_Master_Idle
  6035 ;; This function is called by:
  6036 ;;		_color_read_Luminosity
  6037 ;;		_color_read_Red
  6038 ;;		_color_read_Green
  6039 ;;		_color_read_Blue
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           	psect	text35
  6044   002C6E                     __ptext35:
  6045                           	callstack 0
  6046   002C6E                     _I2C_2_Master_Read:
  6047                           	callstack 26
  6048                           
  6049                           ; BSR set to: 14
  6050                           ;incstack = 0
  6051                           ;I2C_2_Master_Read@ack stored from wreg
  6052   002C6E  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  6053   002C70                     
  6054                           ;../i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);../i2c.c: 52: {;../i2c
      +                          .c: 53:   unsigned char tmp;;../i2c.c: 54:   I2C_2_Master_Idle();
  6055   002C70  ECA5  F016         	call	_I2C_2_Master_Idle	;wreg free
  6056   002C74                     
  6057                           ;../i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6058   002C74  010E               	movlb	14	; () banked
  6059   002C76  87DA               	bsf	218,3,b	;volatile
  6060                           
  6061                           ;../i2c.c: 56:   I2C_2_Master_Idle();
  6062   002C78  ECA5  F016         	call	_I2C_2_Master_Idle	;wreg free
  6063   002C7C                     
  6064                           ;../i2c.c: 57:   tmp = SSP2BUF;
  6065   002C7C  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6066                           
  6067                           ;../i2c.c: 58:   I2C_2_Master_Idle();
  6068   002C80  ECA5  F016         	call	_I2C_2_Master_Idle	;wreg free
  6069   002C84                     
  6070                           ;../i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6071   002C84  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  6072   002C86  B4D8               	btfsc	status,2,c
  6073   002C88  EF48  F016         	goto	u1331
  6074   002C8C  EF4C  F016         	goto	u1330
  6075   002C90                     u1331:
  6076   002C90  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6077   002C92  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  6078   002C94  EF4D  F016         	goto	u1348
  6079   002C98                     u1330:
  6080   002C98  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6081   002C9A                     u1348:
  6082   002C9A  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  6083   002C9C  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  6084   002C9E  010E               	movlb	14	; () banked
  6085   002CA0  51DA               	movf	218,w,b	;volatile
  6086   002CA2  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6087   002CA4  0BDF               	andlw	-33
  6088   002CA6  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6089   002CA8  6FDA               	movwf	218,b	;volatile
  6090   002CAA                     
  6091                           ; BSR set to: 14
  6092                           ;../i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6093   002CAA  89DA               	bsf	218,4,b	;volatile
  6094   002CAC                     
  6095                           ; BSR set to: 14
  6096                           ;../i2c.c: 61:   return tmp;
  6097   002CAC  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  6098   002CAE                     
  6099                           ; BSR set to: 14
  6100   002CAE  0012               	return		;funcret
  6101   002CB0                     __end_of_I2C_2_Master_Read:
  6102                           	callstack 0
  6103                           
  6104 ;; *************** function _color_processor_hard *****************
  6105 ;; Defined at:
  6106 ;;		line 152 in file "../color.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  6109 ;;		 -> main@RGB_recorded(8), 
  6110 ;;  calibrated      2    2[COMRAM] PTR unsigned int 
  6111 ;;		 -> main@color_calibrated(64), 
  6112 ;; Auto vars:     Size  Location     Type
  6113 ;;  cb              2   24[COMRAM] unsigned int 
  6114 ;;  cg              2   22[COMRAM] unsigned int 
  6115 ;;  cr              2   20[COMRAM] unsigned int 
  6116 ;;  condition_b     1   10[COMRAM] _Bool 
  6117 ;;  condition_g     1    9[COMRAM] _Bool 
  6118 ;;  condition_r     1    8[COMRAM] _Bool 
  6119 ;;  i               2   26[COMRAM] int 
  6120 ;;  b               2   18[COMRAM] unsigned int 
  6121 ;;  g               2   16[COMRAM] unsigned int 
  6122 ;;  r               2   14[COMRAM] unsigned int 
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  2    0[COMRAM] unsigned int 
  6125 ;; Registers used:
  6126 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6132 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6133 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6134 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6135 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6136 ;;Total ram usage:       28 bytes
  6137 ;; Hardware stack levels used: 1
  6138 ;; Hardware stack levels required when called: 1
  6139 ;; This function calls:
  6140 ;;		Nothing
  6141 ;; This function is called by:
  6142 ;;		_main
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           	psect	text36
  6147   0015D2                     __ptext36:
  6148                           	callstack 0
  6149   0015D2                     _color_processor_hard:
  6150                           	callstack 29
  6151   0015D2                     
  6152                           ;../color.c: 152: unsigned int color_processor_hard(struct RGB_val *rgb, unsigned int *c
      +                          alibrated);../color.c: 153: {;../color.c: 154:     unsigned int r = rgb->R;
  6153   0015D2  EE20 F002          	lfsr	2,2
  6154   0015D6  5001               	movf	color_processor_hard@rgb^0,w,c
  6155   0015D8  26D9               	addwf	fsr2l,f,c
  6156   0015DA  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6157   0015DC  22DA               	addwfc	fsr2h,f,c
  6158   0015DE  CFDE F00F          	movff	postinc2,color_processor_hard@r
  6159   0015E2  CFDD F010          	movff	postdec2,color_processor_hard@r+1
  6160                           
  6161                           ;../color.c: 155:     unsigned int g = rgb->G;
  6162   0015E6  EE20 F004          	lfsr	2,4
  6163   0015EA  5001               	movf	color_processor_hard@rgb^0,w,c
  6164   0015EC  26D9               	addwf	fsr2l,f,c
  6165   0015EE  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6166   0015F0  22DA               	addwfc	fsr2h,f,c
  6167   0015F2  CFDE F011          	movff	postinc2,color_processor_hard@g
  6168   0015F6  CFDD F012          	movff	postdec2,color_processor_hard@g+1
  6169                           
  6170                           ;../color.c: 156:     unsigned int b = rgb->B;
  6171   0015FA  EE20 F006          	lfsr	2,6
  6172   0015FE  5001               	movf	color_processor_hard@rgb^0,w,c
  6173   001600  26D9               	addwf	fsr2l,f,c
  6174   001602  5002               	movf	(color_processor_hard@rgb+1)^0,w,c
  6175   001604  22DA               	addwfc	fsr2h,f,c
  6176   001606  CFDE F013          	movff	postinc2,color_processor_hard@b
  6177   00160A  CFDD F014          	movff	postdec2,color_processor_hard@b+1
  6178   00160E                     
  6179                           ;../color.c: 159:     for (int i=0;i<8;i++){
  6180   00160E  0E00               	movlw	0
  6181   001610  6E1C               	movwf	(color_processor_hard@i+1)^0,c
  6182   001612  0E00               	movlw	0
  6183   001614  6E1B               	movwf	color_processor_hard@i^0,c
  6184   001616                     l2811:
  6185                           
  6186                           ;../color.c: 160:         unsigned int cr = calibrated[4*i+1];
  6187   001616  C01B  F005         	movff	color_processor_hard@i,??_color_processor_hard
  6188   00161A  C01C  F006         	movff	color_processor_hard@i+1,??_color_processor_hard+1
  6189   00161E  90D8               	bcf	status,0,c
  6190   001620  3605               	rlcf	??_color_processor_hard^0,f,c
  6191   001622  3606               	rlcf	(??_color_processor_hard+1)^0,f,c
  6192   001624  90D8               	bcf	status,0,c
  6193   001626  3605               	rlcf	??_color_processor_hard^0,f,c
  6194   001628  3606               	rlcf	(??_color_processor_hard+1)^0,f,c
  6195   00162A  90D8               	bcf	status,0,c
  6196   00162C  3605               	rlcf	??_color_processor_hard^0,f,c
  6197   00162E  3606               	rlcf	(??_color_processor_hard+1)^0,f,c
  6198   001630  5005               	movf	??_color_processor_hard^0,w,c
  6199   001632  2403               	addwf	color_processor_hard@calibrated^0,w,c
  6200   001634  6E07               	movwf	(??_color_processor_hard+2)^0,c
  6201   001636  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6202   001638  2004               	addwfc	(color_processor_hard@calibrated+1)^0,w,c
  6203   00163A  6E08               	movwf	(??_color_processor_hard+3)^0,c
  6204   00163C  0E02               	movlw	2
  6205   00163E  2407               	addwf	(??_color_processor_hard+2)^0,w,c
  6206   001640  6ED9               	movwf	fsr2l,c
  6207   001642  0E00               	movlw	0
  6208   001644  2008               	addwfc	(??_color_processor_hard+3)^0,w,c
  6209   001646  6EDA               	movwf	fsr2h,c
  6210   001648  CFDE F015          	movff	postinc2,color_processor_hard@cr
  6211   00164C  CFDD F016          	movff	postdec2,color_processor_hard@cr+1
  6212                           
  6213                           ;../color.c: 161:         unsigned int cg = calibrated[4*i+2];
  6214   001650  C01B  F005         	movff	color_processor_hard@i,??_color_processor_hard
  6215   001654  C01C  F006         	movff	color_processor_hard@i+1,??_color_processor_hard+1
  6216   001658  90D8               	bcf	status,0,c
  6217   00165A  3605               	rlcf	??_color_processor_hard^0,f,c
  6218   00165C  3606               	rlcf	(??_color_processor_hard+1)^0,f,c
  6219   00165E  90D8               	bcf	status,0,c
  6220   001660  3605               	rlcf	??_color_processor_hard^0,f,c
  6221   001662  3606               	rlcf	(??_color_processor_hard+1)^0,f,c
  6222   001664  90D8               	bcf	status,0,c
  6223   001666  3605               	rlcf	??_color_processor_hard^0,f,c
  6224   001668  3606               	rlcf	(??_color_processor_hard+1)^0,f,c
  6225   00166A  5005               	movf	??_color_processor_hard^0,w,c
  6226   00166C  2403               	addwf	color_processor_hard@calibrated^0,w,c
  6227   00166E  6E07               	movwf	(??_color_processor_hard+2)^0,c
  6228   001670  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6229   001672  2004               	addwfc	(color_processor_hard@calibrated+1)^0,w,c
  6230   001674  6E08               	movwf	(??_color_processor_hard+3)^0,c
  6231   001676  0E04               	movlw	4
  6232   001678  2407               	addwf	(??_color_processor_hard+2)^0,w,c
  6233   00167A  6ED9               	movwf	fsr2l,c
  6234   00167C  0E00               	movlw	0
  6235   00167E  2008               	addwfc	(??_color_processor_hard+3)^0,w,c
  6236   001680  6EDA               	movwf	fsr2h,c
  6237   001682  CFDE F017          	movff	postinc2,color_processor_hard@cg
  6238   001686  CFDD F018          	movff	postdec2,color_processor_hard@cg+1
  6239                           
  6240                           ;../color.c: 162:         unsigned int cb = calibrated[4*i+3];
  6241   00168A  C01B  F005         	movff	color_processor_hard@i,??_color_processor_hard
  6242   00168E  C01C  F006         	movff	color_processor_hard@i+1,??_color_processor_hard+1
  6243   001692  90D8               	bcf	status,0,c
  6244   001694  3605               	rlcf	??_color_processor_hard^0,f,c
  6245   001696  3606               	rlcf	(??_color_processor_hard+1)^0,f,c
  6246   001698  90D8               	bcf	status,0,c
  6247   00169A  3605               	rlcf	??_color_processor_hard^0,f,c
  6248   00169C  3606               	rlcf	(??_color_processor_hard+1)^0,f,c
  6249   00169E  90D8               	bcf	status,0,c
  6250   0016A0  3605               	rlcf	??_color_processor_hard^0,f,c
  6251   0016A2  3606               	rlcf	(??_color_processor_hard+1)^0,f,c
  6252   0016A4  5005               	movf	??_color_processor_hard^0,w,c
  6253   0016A6  2403               	addwf	color_processor_hard@calibrated^0,w,c
  6254   0016A8  6E07               	movwf	(??_color_processor_hard+2)^0,c
  6255   0016AA  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6256   0016AC  2004               	addwfc	(color_processor_hard@calibrated+1)^0,w,c
  6257   0016AE  6E08               	movwf	(??_color_processor_hard+3)^0,c
  6258   0016B0  0E06               	movlw	6
  6259   0016B2  2407               	addwf	(??_color_processor_hard+2)^0,w,c
  6260   0016B4  6ED9               	movwf	fsr2l,c
  6261   0016B6  0E00               	movlw	0
  6262   0016B8  2008               	addwfc	(??_color_processor_hard+3)^0,w,c
  6263   0016BA  6EDA               	movwf	fsr2h,c
  6264   0016BC  CFDE F019          	movff	postinc2,color_processor_hard@cb
  6265   0016C0  CFDD F01A          	movff	postdec2,color_processor_hard@cb+1
  6266   0016C4                     
  6267                           ;../color.c: 163:         _Bool condition_r = r>cr-20 && r<cr+20;
  6268   0016C4  0E00               	movlw	0
  6269   0016C6  6E0C               	movwf	_color_processor_hard$370^0,c
  6270   0016C8  0EEC               	movlw	236
  6271   0016CA  2415               	addwf	color_processor_hard@cr^0,w,c
  6272   0016CC  6E05               	movwf	??_color_processor_hard^0,c
  6273   0016CE  0EFF               	movlw	255
  6274   0016D0  2016               	addwfc	(color_processor_hard@cr+1)^0,w,c
  6275   0016D2  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6276   0016D4  500F               	movf	color_processor_hard@r^0,w,c
  6277   0016D6  5C05               	subwf	??_color_processor_hard^0,w,c
  6278   0016D8  5010               	movf	(color_processor_hard@r+1)^0,w,c
  6279   0016DA  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6280   0016DC  B0D8               	btfsc	status,0,c
  6281   0016DE  EF73  F00B         	goto	u1561
  6282   0016E2  EF75  F00B         	goto	u1560
  6283   0016E6                     u1561:
  6284   0016E6  EF88  F00B         	goto	l64
  6285   0016EA                     u1560:
  6286   0016EA  0E14               	movlw	20
  6287   0016EC  2415               	addwf	color_processor_hard@cr^0,w,c
  6288   0016EE  6E05               	movwf	??_color_processor_hard^0,c
  6289   0016F0  0E00               	movlw	0
  6290   0016F2  2016               	addwfc	(color_processor_hard@cr+1)^0,w,c
  6291   0016F4  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6292   0016F6  5005               	movf	??_color_processor_hard^0,w,c
  6293   0016F8  5C0F               	subwf	color_processor_hard@r^0,w,c
  6294   0016FA  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6295   0016FC  5810               	subwfb	(color_processor_hard@r+1)^0,w,c
  6296   0016FE  B0D8               	btfsc	status,0,c
  6297   001700  EF84  F00B         	goto	u1571
  6298   001704  EF86  F00B         	goto	u1570
  6299   001708                     u1571:
  6300   001708  EF88  F00B         	goto	l64
  6301   00170C                     u1570:
  6302   00170C  0E01               	movlw	1
  6303   00170E  6E0C               	movwf	_color_processor_hard$370^0,c
  6304   001710                     l64:
  6305   001710  500C               	movf	_color_processor_hard$370^0,w,c
  6306   001712  A4D8               	btfss	status,2,c
  6307   001714  EF8E  F00B         	goto	u1581
  6308   001718  EF91  F00B         	goto	u1580
  6309   00171C                     u1581:
  6310   00171C  0E01               	movlw	1
  6311   00171E  EF92  F00B         	goto	u1590
  6312   001722                     u1580:
  6313   001722  0E00               	movlw	0
  6314   001724                     u1590:
  6315   001724  6E09               	movwf	color_processor_hard@condition_r^0,c
  6316                           
  6317                           ;../color.c: 164:         _Bool condition_g = b>cb-20 && b<cb+20;
  6318   001726  0E00               	movlw	0
  6319   001728  6E0D               	movwf	_color_processor_hard$372^0,c
  6320   00172A  0EEC               	movlw	236
  6321   00172C  2419               	addwf	color_processor_hard@cb^0,w,c
  6322   00172E  6E05               	movwf	??_color_processor_hard^0,c
  6323   001730  0EFF               	movlw	255
  6324   001732  201A               	addwfc	(color_processor_hard@cb+1)^0,w,c
  6325   001734  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6326   001736  5013               	movf	color_processor_hard@b^0,w,c
  6327   001738  5C05               	subwf	??_color_processor_hard^0,w,c
  6328   00173A  5014               	movf	(color_processor_hard@b+1)^0,w,c
  6329   00173C  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6330   00173E  B0D8               	btfsc	status,0,c
  6331   001740  EFA4  F00B         	goto	u1601
  6332   001744  EFA6  F00B         	goto	u1600
  6333   001748                     u1601:
  6334   001748  EFB9  F00B         	goto	l66
  6335   00174C                     u1600:
  6336   00174C  0E14               	movlw	20
  6337   00174E  2419               	addwf	color_processor_hard@cb^0,w,c
  6338   001750  6E05               	movwf	??_color_processor_hard^0,c
  6339   001752  0E00               	movlw	0
  6340   001754  201A               	addwfc	(color_processor_hard@cb+1)^0,w,c
  6341   001756  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6342   001758  5005               	movf	??_color_processor_hard^0,w,c
  6343   00175A  5C13               	subwf	color_processor_hard@b^0,w,c
  6344   00175C  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6345   00175E  5814               	subwfb	(color_processor_hard@b+1)^0,w,c
  6346   001760  B0D8               	btfsc	status,0,c
  6347   001762  EFB5  F00B         	goto	u1611
  6348   001766  EFB7  F00B         	goto	u1610
  6349   00176A                     u1611:
  6350   00176A  EFB9  F00B         	goto	l66
  6351   00176E                     u1610:
  6352   00176E  0E01               	movlw	1
  6353   001770  6E0D               	movwf	_color_processor_hard$372^0,c
  6354   001772                     l66:
  6355   001772  500D               	movf	_color_processor_hard$372^0,w,c
  6356   001774  A4D8               	btfss	status,2,c
  6357   001776  EFBF  F00B         	goto	u1621
  6358   00177A  EFC2  F00B         	goto	u1620
  6359   00177E                     u1621:
  6360   00177E  0E01               	movlw	1
  6361   001780  EFC3  F00B         	goto	u1630
  6362   001784                     u1620:
  6363   001784  0E00               	movlw	0
  6364   001786                     u1630:
  6365   001786  6E0A               	movwf	color_processor_hard@condition_g^0,c
  6366                           
  6367                           ;../color.c: 165:         _Bool condition_b = g>cg-20 && g<cg+20;
  6368   001788  0E00               	movlw	0
  6369   00178A  6E0E               	movwf	_color_processor_hard$374^0,c
  6370   00178C  0EEC               	movlw	236
  6371   00178E  2417               	addwf	color_processor_hard@cg^0,w,c
  6372   001790  6E05               	movwf	??_color_processor_hard^0,c
  6373   001792  0EFF               	movlw	255
  6374   001794  2018               	addwfc	(color_processor_hard@cg+1)^0,w,c
  6375   001796  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6376   001798  5011               	movf	color_processor_hard@g^0,w,c
  6377   00179A  5C05               	subwf	??_color_processor_hard^0,w,c
  6378   00179C  5012               	movf	(color_processor_hard@g+1)^0,w,c
  6379   00179E  5806               	subwfb	(??_color_processor_hard+1)^0,w,c
  6380   0017A0  B0D8               	btfsc	status,0,c
  6381   0017A2  EFD5  F00B         	goto	u1641
  6382   0017A6  EFD7  F00B         	goto	u1640
  6383   0017AA                     u1641:
  6384   0017AA  EFEA  F00B         	goto	l68
  6385   0017AE                     u1640:
  6386   0017AE  0E14               	movlw	20
  6387   0017B0  2417               	addwf	color_processor_hard@cg^0,w,c
  6388   0017B2  6E05               	movwf	??_color_processor_hard^0,c
  6389   0017B4  0E00               	movlw	0
  6390   0017B6  2018               	addwfc	(color_processor_hard@cg+1)^0,w,c
  6391   0017B8  6E06               	movwf	(??_color_processor_hard+1)^0,c
  6392   0017BA  5005               	movf	??_color_processor_hard^0,w,c
  6393   0017BC  5C11               	subwf	color_processor_hard@g^0,w,c
  6394   0017BE  5006               	movf	(??_color_processor_hard+1)^0,w,c
  6395   0017C0  5812               	subwfb	(color_processor_hard@g+1)^0,w,c
  6396   0017C2  B0D8               	btfsc	status,0,c
  6397   0017C4  EFE6  F00B         	goto	u1651
  6398   0017C8  EFE8  F00B         	goto	u1650
  6399   0017CC                     u1651:
  6400   0017CC  EFEA  F00B         	goto	l68
  6401   0017D0                     u1650:
  6402   0017D0  0E01               	movlw	1
  6403   0017D2  6E0E               	movwf	_color_processor_hard$374^0,c
  6404   0017D4                     l68:
  6405   0017D4  500E               	movf	_color_processor_hard$374^0,w,c
  6406   0017D6  A4D8               	btfss	status,2,c
  6407   0017D8  EFF0  F00B         	goto	u1661
  6408   0017DC  EFF3  F00B         	goto	u1660
  6409   0017E0                     u1661:
  6410   0017E0  0E01               	movlw	1
  6411   0017E2  EFF4  F00B         	goto	u1670
  6412   0017E6                     u1660:
  6413   0017E6  0E00               	movlw	0
  6414   0017E8                     u1670:
  6415   0017E8  6E0B               	movwf	color_processor_hard@condition_b^0,c
  6416                           
  6417                           ;../color.c: 167:         if (condition_r && condition_g && condition_b){
  6418   0017EA  5009               	movf	color_processor_hard@condition_r^0,w,c
  6419   0017EC  B4D8               	btfsc	status,2,c
  6420   0017EE  EFFB  F00B         	goto	u1681
  6421   0017F2  EFFD  F00B         	goto	u1680
  6422   0017F6                     u1681:
  6423   0017F6  EF13  F00C         	goto	l2839
  6424   0017FA                     u1680:
  6425   0017FA  500A               	movf	color_processor_hard@condition_g^0,w,c
  6426   0017FC  B4D8               	btfsc	status,2,c
  6427   0017FE  EF03  F00C         	goto	u1691
  6428   001802  EF05  F00C         	goto	u1690
  6429   001806                     u1691:
  6430   001806  EF13  F00C         	goto	l2839
  6431   00180A                     u1690:
  6432   00180A  500B               	movf	color_processor_hard@condition_b^0,w,c
  6433   00180C  B4D8               	btfsc	status,2,c
  6434   00180E  EF0B  F00C         	goto	u1701
  6435   001812  EF0D  F00C         	goto	u1700
  6436   001816                     u1701:
  6437   001816  EF13  F00C         	goto	l2839
  6438   00181A                     u1700:
  6439   00181A                     
  6440                           ;../color.c: 168:             return i;
  6441   00181A  C01B  F001         	movff	color_processor_hard@i,?_color_processor_hard
  6442   00181E  C01C  F002         	movff	color_processor_hard@i+1,?_color_processor_hard+1
  6443   001822  EF23  F00C         	goto	l70
  6444   001826                     l2839:
  6445                           
  6446                           ;../color.c: 170:     }
  6447   001826  4A1B               	infsnz	color_processor_hard@i^0,f,c
  6448   001828  2A1C               	incf	(color_processor_hard@i+1)^0,f,c
  6449   00182A  BE1C               	btfsc	(color_processor_hard@i+1)^0,7,c
  6450   00182C  EF21  F00C         	goto	u1711
  6451   001830  501C               	movf	(color_processor_hard@i+1)^0,w,c
  6452   001832  E109               	bnz	u1710
  6453   001834  0E08               	movlw	8
  6454   001836  5C1B               	subwf	color_processor_hard@i^0,w,c
  6455   001838  A0D8               	btfss	status,0,c
  6456   00183A  EF21  F00C         	goto	u1711
  6457   00183E  EF23  F00C         	goto	u1710
  6458   001842                     u1711:
  6459   001842  EF0B  F00B         	goto	l2811
  6460   001846                     u1710:
  6461   001846                     l70:
  6462   001846  0012               	return		;funcret
  6463   001848                     __end_of_color_processor_hard:
  6464                           	callstack 0
  6465                           
  6466 ;; *************** function _color_processor_easy *****************
  6467 ;; Defined at:
  6468 ;;		line 134 in file "../color.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  6471 ;;		 -> main@RGB_recorded(8), 
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;  b               2    8[COMRAM] unsigned int 
  6474 ;;  a               2    6[COMRAM] unsigned int 
  6475 ;;  c               2    4[COMRAM] unsigned int 
  6476 ;;  color           2    2[COMRAM] unsigned int 
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  2    0[COMRAM] unsigned int 
  6479 ;; Registers used:
  6480 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6486 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6487 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6489 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6490 ;;Total ram usage:       10 bytes
  6491 ;; Hardware stack levels used: 1
  6492 ;; Hardware stack levels required when called: 1
  6493 ;; This function calls:
  6494 ;;		Nothing
  6495 ;; This function is called by:
  6496 ;;		_main
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text37
  6501   002242                     __ptext37:
  6502                           	callstack 0
  6503   002242                     _color_processor_easy:
  6504                           	callstack 29
  6505   002242                     
  6506                           ;../color.c: 134: unsigned int color_processor_easy(struct RGB_val *rgb);../color.c: 135
      +                          : {;../color.c: 136:     unsigned int a = rgb->R;
  6507   002242  EE20 F002          	lfsr	2,2
  6508   002246  5001               	movf	color_processor_easy@rgb^0,w,c
  6509   002248  26D9               	addwf	fsr2l,f,c
  6510   00224A  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6511   00224C  22DA               	addwfc	fsr2h,f,c
  6512   00224E  CFDE F007          	movff	postinc2,color_processor_easy@a
  6513   002252  CFDD F008          	movff	postdec2,color_processor_easy@a+1
  6514                           
  6515                           ;../color.c: 137:     unsigned int b = rgb->G;
  6516   002256  EE20 F004          	lfsr	2,4
  6517   00225A  5001               	movf	color_processor_easy@rgb^0,w,c
  6518   00225C  26D9               	addwf	fsr2l,f,c
  6519   00225E  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6520   002260  22DA               	addwfc	fsr2h,f,c
  6521   002262  CFDE F009          	movff	postinc2,color_processor_easy@b
  6522   002266  CFDD F00A          	movff	postdec2,color_processor_easy@b+1
  6523                           
  6524                           ;../color.c: 138:     unsigned int c = rgb->B;
  6525   00226A  EE20 F006          	lfsr	2,6
  6526   00226E  5001               	movf	color_processor_easy@rgb^0,w,c
  6527   002270  26D9               	addwf	fsr2l,f,c
  6528   002272  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  6529   002274  22DA               	addwfc	fsr2h,f,c
  6530   002276  CFDE F005          	movff	postinc2,color_processor_easy@c
  6531   00227A  CFDD F006          	movff	postdec2,color_processor_easy@c+1
  6532   00227E                     
  6533                           ;../color.c: 139:     unsigned int color;;../color.c: 140:     if (a>=b & a>=c){
  6534   00227E  5009               	movf	color_processor_easy@b^0,w,c
  6535   002280  5C07               	subwf	color_processor_easy@a^0,w,c
  6536   002282  500A               	movf	(color_processor_easy@b+1)^0,w,c
  6537   002284  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6538   002286  A0D8               	btfss	status,0,c
  6539   002288  EF48  F011         	goto	u1521
  6540   00228C  EF4A  F011         	goto	u1520
  6541   002290                     u1521:
  6542   002290  EF5B  F011         	goto	l2791
  6543   002294                     u1520:
  6544   002294  5005               	movf	color_processor_easy@c^0,w,c
  6545   002296  5C07               	subwf	color_processor_easy@a^0,w,c
  6546   002298  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6547   00229A  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  6548   00229C  A0D8               	btfss	status,0,c
  6549   00229E  EF53  F011         	goto	u1531
  6550   0022A2  EF55  F011         	goto	u1530
  6551   0022A6                     u1531:
  6552   0022A6  EF5B  F011         	goto	l2791
  6553   0022AA                     u1530:
  6554   0022AA                     
  6555                           ;../color.c: 141:         color=1;
  6556   0022AA  0E00               	movlw	0
  6557   0022AC  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6558   0022AE  0E01               	movlw	1
  6559   0022B0  6E03               	movwf	color_processor_easy@color^0,c
  6560                           
  6561                           ;../color.c: 142:     }
  6562   0022B2  EF7B  F011         	goto	l2799
  6563   0022B6                     l2791:
  6564   0022B6  5007               	movf	color_processor_easy@a^0,w,c
  6565   0022B8  5C09               	subwf	color_processor_easy@b^0,w,c
  6566   0022BA  5008               	movf	(color_processor_easy@a+1)^0,w,c
  6567   0022BC  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6568   0022BE  A0D8               	btfss	status,0,c
  6569   0022C0  EF64  F011         	goto	u1541
  6570   0022C4  EF66  F011         	goto	u1540
  6571   0022C8                     u1541:
  6572   0022C8  EF77  F011         	goto	l2797
  6573   0022CC                     u1540:
  6574   0022CC  5005               	movf	color_processor_easy@c^0,w,c
  6575   0022CE  5C09               	subwf	color_processor_easy@b^0,w,c
  6576   0022D0  5006               	movf	(color_processor_easy@c+1)^0,w,c
  6577   0022D2  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  6578   0022D4  A0D8               	btfss	status,0,c
  6579   0022D6  EF6F  F011         	goto	u1551
  6580   0022DA  EF71  F011         	goto	u1550
  6581   0022DE                     u1551:
  6582   0022DE  EF77  F011         	goto	l2797
  6583   0022E2                     u1550:
  6584   0022E2                     
  6585                           ;../color.c: 144:         color=2;
  6586   0022E2  0E00               	movlw	0
  6587   0022E4  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6588   0022E6  0E02               	movlw	2
  6589   0022E8  6E03               	movwf	color_processor_easy@color^0,c
  6590                           
  6591                           ;../color.c: 145:     }
  6592   0022EA  EF7B  F011         	goto	l2799
  6593   0022EE                     l2797:
  6594                           
  6595                           ;../color.c: 147:         color=3;
  6596   0022EE  0E00               	movlw	0
  6597   0022F0  6E04               	movwf	(color_processor_easy@color+1)^0,c
  6598   0022F2  0E03               	movlw	3
  6599   0022F4  6E03               	movwf	color_processor_easy@color^0,c
  6600   0022F6                     l2799:
  6601                           
  6602                           ;../color.c: 149:     return color;
  6603   0022F6  C003  F001         	movff	color_processor_easy@color,?_color_processor_easy
  6604   0022FA  C004  F002         	movff	color_processor_easy@color+1,?_color_processor_easy+1
  6605   0022FE  0012               	return		;funcret
  6606   002300                     __end_of_color_processor_easy:
  6607                           	callstack 0
  6608                           
  6609 ;; *************** function _color_click_init *****************
  6610 ;; Defined at:
  6611 ;;		line 6 in file "../color.c"
  6612 ;; Parameters:    Size  Location     Type
  6613 ;;		None
  6614 ;; Auto vars:     Size  Location     Type
  6615 ;;		None
  6616 ;; Return value:  Size  Location     Type
  6617 ;;                  1    wreg      void 
  6618 ;; Registers used:
  6619 ;;		wreg, status,2, status,0, cstack
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6627 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6628 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6629 ;;Total ram usage:        1 bytes
  6630 ;; Hardware stack levels used: 1
  6631 ;; Hardware stack levels required when called: 4
  6632 ;; This function calls:
  6633 ;;		_I2C_2_Master_Init
  6634 ;;		_color_writetoaddr
  6635 ;; This function is called by:
  6636 ;;		_main
  6637 ;; This function uses a non-reentrant model
  6638 ;;
  6639                           
  6640                           	psect	text38
  6641   0029AA                     __ptext38:
  6642                           	callstack 0
  6643   0029AA                     _color_click_init:
  6644                           	callstack 26
  6645   0029AA                     
  6646                           ;../color.c: 9:     I2C_2_Master_Init();
  6647   0029AA  EC90  F016         	call	_I2C_2_Master_Init	;wreg free
  6648   0029AE                     
  6649                           ;../color.c: 12:   color_writetoaddr(0x00, 0x01);
  6650   0029AE  0E01               	movlw	1
  6651   0029B0  6E03               	movwf	color_writetoaddr@value^0,c
  6652   0029B2  0E00               	movlw	0
  6653   0029B4  ECDE  F016         	call	_color_writetoaddr
  6654   0029B8                     
  6655                           ;../color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6656   0029B8  0E3F               	movlw	63
  6657   0029BA  6E05               	movwf	??_color_click_init^0,c
  6658   0029BC  0E55               	movlw	85
  6659   0029BE                     u2137:
  6660   0029BE  2EE8               	decfsz	wreg,f,c
  6661   0029C0  D7FE               	bra	u2137
  6662   0029C2  2E05               	decfsz	??_color_click_init^0,f,c
  6663   0029C4  D7FC               	bra	u2137
  6664   0029C6  F000               	nop	
  6665   0029C8                     
  6666                           ;../color.c: 16:  color_writetoaddr(0x00, 0x03);
  6667   0029C8  0E03               	movlw	3
  6668   0029CA  6E03               	movwf	color_writetoaddr@value^0,c
  6669   0029CC  0E00               	movlw	0
  6670   0029CE  ECDE  F016         	call	_color_writetoaddr
  6671   0029D2                     
  6672                           ;../color.c: 19:  color_writetoaddr(0x01, 0xD5);
  6673   0029D2  0ED5               	movlw	213
  6674   0029D4  6E03               	movwf	color_writetoaddr@value^0,c
  6675   0029D6  0E01               	movlw	1
  6676   0029D8  ECDE  F016         	call	_color_writetoaddr
  6677   0029DC                     
  6678                           ;../color.c: 22:     TRISHbits.TRISH1 = 0;
  6679   0029DC  9288               	bcf	136,1,c	;volatile
  6680   0029DE                     
  6681                           ;../color.c: 23:     TRISDbits.TRISD3 = 0;
  6682   0029DE  9684               	bcf	132,3,c	;volatile
  6683   0029E0                     
  6684                           ;../color.c: 24:     TRISDbits.TRISD4 = 0;
  6685   0029E0  9884               	bcf	132,4,c	;volatile
  6686   0029E2                     
  6687                           ;../color.c: 25:     TRISHbits.TRISH0 = 0;
  6688   0029E2  9088               	bcf	136,0,c	;volatile
  6689   0029E4                     
  6690                           ;../color.c: 26:     TRISFbits.TRISF0 = 0;
  6691   0029E4  9086               	bcf	134,0,c	;volatile
  6692   0029E6                     
  6693                           ;../color.c: 28:     LATHbits.LATH1 = 1;
  6694   0029E6  8280               	bsf	128,1,c	;volatile
  6695   0029E8                     
  6696                           ;../color.c: 29:     LATDbits.LATD3 = 1;
  6697   0029E8  867C               	bsf	124,3,c	;volatile
  6698   0029EA                     
  6699                           ;../color.c: 30:     LATDbits.LATD4 = 0;
  6700   0029EA  987C               	bcf	124,4,c	;volatile
  6701   0029EC                     
  6702                           ;../color.c: 31:     LATHbits.LATH0 = 0;
  6703   0029EC  9080               	bcf	128,0,c	;volatile
  6704   0029EE                     
  6705                           ;../color.c: 32:     LATFbits.LATF0 = 0;
  6706   0029EE  907E               	bcf	126,0,c	;volatile
  6707   0029F0                     
  6708                           ;../color.c: 35:     LATDbits.LATD7=0;
  6709   0029F0  9E7C               	bcf	124,7,c	;volatile
  6710   0029F2                     
  6711                           ;../color.c: 36:     LATHbits.LATH3=0;
  6712   0029F2  9680               	bcf	128,3,c	;volatile
  6713   0029F4                     
  6714                           ;../color.c: 37:     TRISDbits.TRISD7=0;
  6715   0029F4  9E84               	bcf	132,7,c	;volatile
  6716   0029F6                     
  6717                           ;../color.c: 38:     TRISHbits.TRISH3=0;
  6718   0029F6  9688               	bcf	136,3,c	;volatile
  6719   0029F8                     
  6720                           ;../color.c: 40:     TRISFbits.TRISF2=1;
  6721   0029F8  8486               	bsf	134,2,c	;volatile
  6722   0029FA                     
  6723                           ;../color.c: 41:     ANSELFbits.ANSELF2=0;
  6724   0029FA  010E               	movlb	14	; () banked
  6725   0029FC  95B4               	bcf	180,2,b	;volatile
  6726   0029FE                     
  6727                           ; BSR set to: 14
  6728                           ;../color.c: 42:     TRISFbits.TRISF3=1;
  6729   0029FE  8686               	bsf	134,3,c	;volatile
  6730   002A00                     
  6731                           ; BSR set to: 14
  6732                           ;../color.c: 43:     ANSELFbits.ANSELF3=0;
  6733   002A00  97B4               	bcf	180,3,b	;volatile
  6734   002A02                     
  6735                           ; BSR set to: 14
  6736   002A02  0012               	return		;funcret
  6737   002A04                     __end_of_color_click_init:
  6738                           	callstack 0
  6739                           
  6740 ;; *************** function _color_writetoaddr *****************
  6741 ;; Defined at:
  6742 ;;		line 46 in file "../color.c"
  6743 ;; Parameters:    Size  Location     Type
  6744 ;;  address         1    wreg     unsigned char 
  6745 ;;  value           1    2[COMRAM] unsigned char 
  6746 ;; Auto vars:     Size  Location     Type
  6747 ;;  address         1    3[COMRAM] unsigned char 
  6748 ;; Return value:  Size  Location     Type
  6749 ;;                  1    wreg      void 
  6750 ;; Registers used:
  6751 ;;		wreg, status,2, status,0, cstack
  6752 ;; Tracked objects:
  6753 ;;		On entry : 0/0
  6754 ;;		On exit  : 0/0
  6755 ;;		Unchanged: 0/0
  6756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6757 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6758 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6760 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6761 ;;Total ram usage:        2 bytes
  6762 ;; Hardware stack levels used: 1
  6763 ;; Hardware stack levels required when called: 3
  6764 ;; This function calls:
  6765 ;;		_I2C_2_Master_Start
  6766 ;;		_I2C_2_Master_Stop
  6767 ;;		_I2C_2_Master_Write
  6768 ;; This function is called by:
  6769 ;;		_color_click_init
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           	psect	text39
  6774   002DBC                     __ptext39:
  6775                           	callstack 0
  6776   002DBC                     _color_writetoaddr:
  6777                           	callstack 26
  6778                           
  6779                           ; BSR set to: 14
  6780                           ;incstack = 0
  6781                           ;color_writetoaddr@address stored from wreg
  6782   002DBC  6E04               	movwf	color_writetoaddr@address^0,c
  6783   002DBE                     
  6784                           ;../color.c: 46: void color_writetoaddr(char address, char value);../color.c: 47: {;../c
      +                          olor.c: 48:     I2C_2_Master_Start();
  6785   002DBE  EC34  F017         	call	_I2C_2_Master_Start	;wreg free
  6786                           
  6787                           ;../color.c: 49:     I2C_2_Master_Write(0x52 | 0x00);
  6788   002DC2  0E52               	movlw	82
  6789   002DC4  EC24  F017         	call	_I2C_2_Master_Write
  6790                           
  6791                           ;../color.c: 50:     I2C_2_Master_Write(0x80 | address);
  6792   002DC8  5004               	movf	color_writetoaddr@address^0,w,c
  6793   002DCA  0980               	iorlw	128
  6794   002DCC  EC24  F017         	call	_I2C_2_Master_Write
  6795                           
  6796                           ;../color.c: 51:     I2C_2_Master_Write(value);
  6797   002DD0  5003               	movf	color_writetoaddr@value^0,w,c
  6798   002DD2  EC24  F017         	call	_I2C_2_Master_Write
  6799                           
  6800                           ;../color.c: 52:     I2C_2_Master_Stop();
  6801   002DD6  EC2F  F017         	call	_I2C_2_Master_Stop	;wreg free
  6802   002DDA  0012               	return		;funcret
  6803   002DDC                     __end_of_color_writetoaddr:
  6804                           	callstack 0
  6805                           
  6806 ;; *************** function _I2C_2_Master_Write *****************
  6807 ;; Defined at:
  6808 ;;		line 45 in file "../i2c.c"
  6809 ;; Parameters:    Size  Location     Type
  6810 ;;  data_byte       1    wreg     unsigned char 
  6811 ;; Auto vars:     Size  Location     Type
  6812 ;;  data_byte       1    1[COMRAM] unsigned char 
  6813 ;; Return value:  Size  Location     Type
  6814 ;;                  1    wreg      void 
  6815 ;; Registers used:
  6816 ;;		wreg, status,2, status,0, cstack
  6817 ;; Tracked objects:
  6818 ;;		On entry : 0/0
  6819 ;;		On exit  : 0/0
  6820 ;;		Unchanged: 0/0
  6821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6825 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6826 ;;Total ram usage:        1 bytes
  6827 ;; Hardware stack levels used: 1
  6828 ;; Hardware stack levels required when called: 2
  6829 ;; This function calls:
  6830 ;;		_I2C_2_Master_Idle
  6831 ;; This function is called by:
  6832 ;;		_color_writetoaddr
  6833 ;;		_color_read_Luminosity
  6834 ;;		_color_read_Red
  6835 ;;		_color_read_Green
  6836 ;;		_color_read_Blue
  6837 ;; This function uses a non-reentrant model
  6838 ;;
  6839                           
  6840                           	psect	text40
  6841   002E48                     __ptext40:
  6842                           	callstack 0
  6843   002E48                     _I2C_2_Master_Write:
  6844                           	callstack 26
  6845                           
  6846                           ;incstack = 0
  6847                           ;I2C_2_Master_Write@data_byte stored from wreg
  6848   002E48  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6849   002E4A                     
  6850                           ;../i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);../i2c.c: 46: {;../i2c.c
      +                          : 47:   I2C_2_Master_Idle();
  6851   002E4A  ECA5  F016         	call	_I2C_2_Master_Idle	;wreg free
  6852   002E4E                     
  6853                           ;../i2c.c: 48:   SSP2BUF = data_byte;
  6854   002E4E  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6855   002E52  0012               	return		;funcret
  6856   002E54                     __end_of_I2C_2_Master_Write:
  6857                           	callstack 0
  6858                           
  6859 ;; *************** function _I2C_2_Master_Stop *****************
  6860 ;; Defined at:
  6861 ;;		line 39 in file "../i2c.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;		None
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;		None
  6866 ;; Return value:  Size  Location     Type
  6867 ;;                  1    wreg      void 
  6868 ;; Registers used:
  6869 ;;		wreg, status,2, status,0, cstack
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6879 ;;Total ram usage:        0 bytes
  6880 ;; Hardware stack levels used: 1
  6881 ;; Hardware stack levels required when called: 2
  6882 ;; This function calls:
  6883 ;;		_I2C_2_Master_Idle
  6884 ;; This function is called by:
  6885 ;;		_color_writetoaddr
  6886 ;;		_color_read_Luminosity
  6887 ;;		_color_read_Red
  6888 ;;		_color_read_Green
  6889 ;;		_color_read_Blue
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           	psect	text41
  6894   002E5E                     __ptext41:
  6895                           	callstack 0
  6896   002E5E                     _I2C_2_Master_Stop:
  6897                           	callstack 26
  6898   002E5E                     
  6899                           ;../i2c.c: 41:   I2C_2_Master_Idle();
  6900   002E5E  ECA5  F016         	call	_I2C_2_Master_Idle	;wreg free
  6901   002E62                     
  6902                           ;../i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6903   002E62  010E               	movlb	14	; () banked
  6904   002E64  85DA               	bsf	218,2,b	;volatile
  6905   002E66                     
  6906                           ; BSR set to: 14
  6907   002E66  0012               	return		;funcret
  6908   002E68                     __end_of_I2C_2_Master_Stop:
  6909                           	callstack 0
  6910                           
  6911 ;; *************** function _I2C_2_Master_Start *****************
  6912 ;; Defined at:
  6913 ;;		line 27 in file "../i2c.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;		None
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;		None
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  1    wreg      void 
  6920 ;; Registers used:
  6921 ;;		wreg, status,2, status,0, cstack
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6931 ;;Total ram usage:        0 bytes
  6932 ;; Hardware stack levels used: 1
  6933 ;; Hardware stack levels required when called: 2
  6934 ;; This function calls:
  6935 ;;		_I2C_2_Master_Idle
  6936 ;; This function is called by:
  6937 ;;		_color_writetoaddr
  6938 ;;		_color_read_Luminosity
  6939 ;;		_color_read_Red
  6940 ;;		_color_read_Green
  6941 ;;		_color_read_Blue
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945                           	psect	text42
  6946   002E68                     __ptext42:
  6947                           	callstack 0
  6948   002E68                     _I2C_2_Master_Start:
  6949                           	callstack 26
  6950   002E68                     
  6951                           ;../i2c.c: 29:   I2C_2_Master_Idle();
  6952   002E68  ECA5  F016         	call	_I2C_2_Master_Idle	;wreg free
  6953   002E6C                     
  6954                           ;../i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6955   002E6C  010E               	movlb	14	; () banked
  6956   002E6E  81DA               	bsf	218,0,b	;volatile
  6957   002E70                     
  6958                           ; BSR set to: 14
  6959   002E70  0012               	return		;funcret
  6960   002E72                     __end_of_I2C_2_Master_Start:
  6961                           	callstack 0
  6962                           
  6963 ;; *************** function _I2C_2_Master_Idle *****************
  6964 ;; Defined at:
  6965 ;;		line 22 in file "../i2c.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;		None
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;		None
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  1    wreg      void 
  6972 ;; Registers used:
  6973 ;;		wreg, status,2, status,0
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6981 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6982 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6983 ;;Total ram usage:        1 bytes
  6984 ;; Hardware stack levels used: 1
  6985 ;; Hardware stack levels required when called: 1
  6986 ;; This function calls:
  6987 ;;		Nothing
  6988 ;; This function is called by:
  6989 ;;		_I2C_2_Master_Start
  6990 ;;		_I2C_2_Master_RepStart
  6991 ;;		_I2C_2_Master_Stop
  6992 ;;		_I2C_2_Master_Write
  6993 ;;		_I2C_2_Master_Read
  6994 ;; This function uses a non-reentrant model
  6995 ;;
  6996                           
  6997                           	psect	text43
  6998   002D4A                     __ptext43:
  6999                           	callstack 0
  7000   002D4A                     _I2C_2_Master_Idle:
  7001                           	callstack 26
  7002   002D4A                     l100:
  7003   002D4A  010E               	movlb	14	; () banked
  7004   002D4C  B5D8               	btfsc	216,2,b	;volatile
  7005   002D4E  EFAB  F016         	goto	u1151
  7006   002D52  EFAD  F016         	goto	u1150
  7007   002D56                     u1151:
  7008   002D56  EFA5  F016         	goto	l100
  7009   002D5A                     u1150:
  7010   002D5A                     
  7011                           ; BSR set to: 14
  7012   002D5A  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  7013   002D5E  0E1F               	movlw	31
  7014   002D60  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  7015   002D62  A4D8               	btfss	status,2,c
  7016   002D64  EFB6  F016         	goto	u1161
  7017   002D68  EFB8  F016         	goto	u1160
  7018   002D6C                     u1161:
  7019   002D6C  EFA5  F016         	goto	l100
  7020   002D70                     u1160:
  7021   002D70                     
  7022                           ; BSR set to: 14
  7023   002D70  0012               	return		;funcret
  7024   002D72                     __end_of_I2C_2_Master_Idle:
  7025                           	callstack 0
  7026                           
  7027 ;; *************** function _I2C_2_Master_Init *****************
  7028 ;; Defined at:
  7029 ;;		line 4 in file "../i2c.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;		None
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;		None
  7034 ;; Return value:  Size  Location     Type
  7035 ;;                  1    wreg      void 
  7036 ;; Registers used:
  7037 ;;		wreg, status,2
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7047 ;;Total ram usage:        0 bytes
  7048 ;; Hardware stack levels used: 1
  7049 ;; Hardware stack levels required when called: 1
  7050 ;; This function calls:
  7051 ;;		Nothing
  7052 ;; This function is called by:
  7053 ;;		_color_click_init
  7054 ;;		_main
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           	psect	text44
  7059   002D20                     __ptext44:
  7060                           	callstack 0
  7061   002D20                     _I2C_2_Master_Init:
  7062                           	callstack 28
  7063   002D20                     
  7064                           ;../i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  7065   002D20  010E               	movlb	14	; () banked
  7066   002D22  51D9               	movf	217,w,b	;volatile
  7067   002D24  0BF0               	andlw	-16
  7068   002D26  0908               	iorlw	8
  7069   002D28  6FD9               	movwf	217,b	;volatile
  7070   002D2A                     
  7071                           ; BSR set to: 14
  7072                           ;../i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  7073   002D2A  8BD9               	bsf	217,5,b	;volatile
  7074                           
  7075                           ;../i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  7076   002D2C  0E9F               	movlw	159
  7077   002D2E  6FD6               	movwf	214,b	;volatile
  7078   002D30                     
  7079                           ; BSR set to: 14
  7080                           ;../i2c.c: 12:   TRISDbits.TRISD5 = 1;
  7081   002D30  8A84               	bsf	132,5,c	;volatile
  7082   002D32                     
  7083                           ; BSR set to: 14
  7084                           ;../i2c.c: 13:   TRISDbits.TRISD6 = 1;
  7085   002D32  8C84               	bsf	132,6,c	;volatile
  7086   002D34                     
  7087                           ; BSR set to: 14
  7088                           ;../i2c.c: 14:   ANSELDbits.ANSELD5=0;
  7089   002D34  9BA7               	bcf	167,5,b	;volatile
  7090   002D36                     
  7091                           ; BSR set to: 14
  7092                           ;../i2c.c: 15:   ANSELDbits.ANSELD6=0;
  7093   002D36  9DA7               	bcf	167,6,b	;volatile
  7094                           
  7095                           ;../i2c.c: 16:   SSP2DATPPS=0x1D;
  7096   002D38  0E1D               	movlw	29
  7097   002D3A  6F1D               	movwf	29,b	;volatile
  7098                           
  7099                           ;../i2c.c: 17:   SSP2CLKPPS=0x1E;
  7100   002D3C  0E1E               	movlw	30
  7101   002D3E  6F1C               	movwf	28,b	;volatile
  7102                           
  7103                           ;../i2c.c: 18:   RD5PPS=0x1C;
  7104   002D40  0E1C               	movlw	28
  7105   002D42  6F6F               	movwf	111,b	;volatile
  7106                           
  7107                           ;../i2c.c: 19:   RD6PPS=0x1B;
  7108   002D44  0E1B               	movlw	27
  7109   002D46  6F70               	movwf	112,b	;volatile
  7110   002D48                     
  7111                           ; BSR set to: 14
  7112   002D48  0012               	return		;funcret
  7113   002D4A                     __end_of_I2C_2_Master_Init:
  7114                           	callstack 0
  7115                           
  7116 ;; *************** function _Timer0_init *****************
  7117 ;; Defined at:
  7118 ;;		line 62 in file "../rc_servo.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;		None
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;		None
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  1    wreg      void 
  7125 ;; Registers used:
  7126 ;;		wreg, status,2
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7136 ;;Total ram usage:        0 bytes
  7137 ;; Hardware stack levels used: 1
  7138 ;; Hardware stack levels required when called: 1
  7139 ;; This function calls:
  7140 ;;		Nothing
  7141 ;; This function is called by:
  7142 ;;		_main
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           	psect	text45
  7147   002DDC                     __ptext45:
  7148                           	callstack 0
  7149   002DDC                     _Timer0_init:
  7150                           	callstack 29
  7151   002DDC                     
  7152                           ;../rc_servo.c: 64:     T0CON1bits.T0CS=0b010;
  7153   002DDC  50D6               	movf	214,w,c	;volatile
  7154   002DDE  0B1F               	andlw	-225
  7155   002DE0  0940               	iorlw	64
  7156   002DE2  6ED6               	movwf	214,c	;volatile
  7157   002DE4                     
  7158                           ;../rc_servo.c: 65:     T0CON1bits.T0ASYNC=1;
  7159   002DE4  88D6               	bsf	214,4,c	;volatile
  7160                           
  7161                           ;../rc_servo.c: 66:     T0CON1bits.T0CKPS=0b0111;
  7162   002DE6  50D6               	movf	214,w,c	;volatile
  7163   002DE8  0BF0               	andlw	-16
  7164   002DEA  0907               	iorlw	7
  7165   002DEC  6ED6               	movwf	214,c	;volatile
  7166   002DEE                     
  7167                           ;../rc_servo.c: 68:     T0CON0bits.T016BIT=1;
  7168   002DEE  88D5               	bsf	213,4,c	;volatile
  7169                           
  7170                           ;../rc_servo.c: 71:     TMR0H=(65535-2500)>>8;
  7171   002DF0  0EF6               	movlw	246
  7172   002DF2  6ED4               	movwf	212,c	;volatile
  7173                           
  7174                           ;../rc_servo.c: 72:     TMR0L=(unsigned char)(65535-2500);
  7175   002DF4  0E3B               	movlw	59
  7176   002DF6  6ED3               	movwf	211,c	;volatile
  7177   002DF8                     
  7178                           ;../rc_servo.c: 73:     T0CON0bits.T0EN=1;
  7179   002DF8  8ED5               	bsf	213,7,c	;volatile
  7180   002DFA  0012               	return		;funcret
  7181   002DFC                     __end_of_Timer0_init:
  7182                           	callstack 0
  7183                           
  7184 ;; *************** function _Interrupts_init *****************
  7185 ;; Defined at:
  7186 ;;		line 8 in file "../rc_servo.c"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;		None
  7189 ;; Auto vars:     Size  Location     Type
  7190 ;;		None
  7191 ;; Return value:  Size  Location     Type
  7192 ;;                  1    wreg      void 
  7193 ;; Registers used:
  7194 ;;		None
  7195 ;; Tracked objects:
  7196 ;;		On entry : 0/0
  7197 ;;		On exit  : 0/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7204 ;;Total ram usage:        0 bytes
  7205 ;; Hardware stack levels used: 1
  7206 ;; Hardware stack levels required when called: 1
  7207 ;; This function calls:
  7208 ;;		Nothing
  7209 ;; This function is called by:
  7210 ;;		_main
  7211 ;; This function uses a non-reentrant model
  7212 ;;
  7213                           
  7214                           	psect	text46
  7215   002E32                     __ptext46:
  7216                           	callstack 0
  7217   002E32                     _Interrupts_init:
  7218                           	callstack 29
  7219   002E32                     
  7220                           ;../rc_servo.c: 12:     INTCONbits.IPEN = 1;
  7221   002E32  8AF2               	bsf	242,5,c	;volatile
  7222                           
  7223                           ;../rc_servo.c: 13:     INTCONbits.PEIE = 1;
  7224   002E34  8CF2               	bsf	242,6,c	;volatile
  7225                           
  7226                           ;../rc_servo.c: 16:     PIE0bits.TMR0IE = 1;
  7227   002E36  010E               	movlb	14	; () banked
  7228   002E38  8B29               	bsf	41,5,b	;volatile
  7229                           
  7230                           ;../rc_servo.c: 17:     IPR0bits.TMR0IP = 1;
  7231   002E3A  8B1F               	bsf	31,5,b	;volatile
  7232                           
  7233                           ;../rc_servo.c: 18:     PIR0bits.TMR0IF = 0;
  7234   002E3C  9B33               	bcf	51,5,b	;volatile
  7235                           
  7236                           ;../rc_servo.c: 20:     PIE2bits.C1IE=1;
  7237   002E3E  812B               	bsf	43,0,b	;volatile
  7238                           
  7239                           ;../rc_servo.c: 21:     IPR2bits.C1IP=0;
  7240   002E40  9121               	bcf	33,0,b	;volatile
  7241                           
  7242                           ;../rc_servo.c: 22:     PIR2bits.C1IF=0;
  7243   002E42  9135               	bcf	53,0,b	;volatile
  7244                           
  7245                           ;../rc_servo.c: 24:     INTCONbits.GIE = 1;
  7246   002E44  8EF2               	bsf	242,7,c	;volatile
  7247   002E46                     
  7248                           ; BSR set to: 14
  7249   002E46  0012               	return		;funcret
  7250   002E48                     __end_of_Interrupts_init:
  7251                           	callstack 0
  7252                           
  7253 ;; *************** function _HighISR *****************
  7254 ;; Defined at:
  7255 ;;		line 31 in file "../rc_servo.c"
  7256 ;; Parameters:    Size  Location     Type
  7257 ;;		None
  7258 ;; Auto vars:     Size  Location     Type
  7259 ;;		None
  7260 ;; Return value:  Size  Location     Type
  7261 ;;                  1    wreg      void 
  7262 ;; Registers used:
  7263 ;;		wreg, status,2, status,0
  7264 ;; Tracked objects:
  7265 ;;		On entry : 0/0
  7266 ;;		On exit  : 0/0
  7267 ;;		Unchanged: 0/0
  7268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7273 ;;Total ram usage:        0 bytes
  7274 ;; Hardware stack levels used: 1
  7275 ;; This function calls:
  7276 ;;		Nothing
  7277 ;; This function is called by:
  7278 ;;		Interrupt level 2
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           	psect	intcode
  7283   000008                     __pintcode:
  7284                           	callstack 0
  7285   000008                     _HighISR:
  7286                           	callstack 22
  7287                           
  7288                           ; BSR set to: 14
  7289                           ;incstack = 0
  7290   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7291   00000A                     
  7292                           ;../rc_servo.c: 33:     if(PIR0bits.TMR0IF||!PORTFbits.RF2){
  7293   00000A  010E               	movlb	14	; () banked
  7294   00000C  BB33               	btfsc	51,5,b	;volatile
  7295   00000E  EF0B  F000         	goto	i2u184_41
  7296   000012  EF0D  F000         	goto	i2u184_40
  7297   000016                     i2u184_41:
  7298   000016  EF14  F000         	goto	i2l3135
  7299   00001A                     i2u184_40:
  7300   00001A                     
  7301                           ; BSR set to: 14
  7302   00001A  B48E               	btfsc	142,2,c	;volatile
  7303   00001C  EF12  F000         	goto	i2u185_41
  7304   000020  EF14  F000         	goto	i2u185_40
  7305   000024                     i2u185_41:
  7306   000024  EF1D  F000         	goto	i2l374
  7307   000028                     i2u185_40:
  7308   000028                     i2l3135:
  7309                           
  7310                           ; BSR set to: 14
  7311                           ;../rc_servo.c: 36:         time++;
  7312   000028  0102               	movlb	2	; () banked
  7313   00002A  4B54               	infsnz	_time& (0+255),f,b
  7314   00002C  2B55               	incf	(_time+1)& (0+255),f,b
  7315   00002E                     
  7316                           ; BSR set to: 2
  7317                           ;../rc_servo.c: 39:         TMR0L = 0b11011011;
  7318   00002E  0EDB               	movlw	219
  7319   000030  6ED3               	movwf	211,c	;volatile
  7320   000032                     
  7321                           ; BSR set to: 2
  7322                           ;../rc_servo.c: 40:         TMR0H = 0b00001011;
  7323   000032  0E0B               	movlw	11
  7324   000034  6ED4               	movwf	212,c	;volatile
  7325   000036                     
  7326                           ; BSR set to: 2
  7327                           ;../rc_servo.c: 42:         PIR0bits.TMR0IF=0;
  7328   000036  010E               	movlb	14	; () banked
  7329   000038  9B33               	bcf	51,5,b	;volatile
  7330   00003A                     i2l374:
  7331                           
  7332                           ; BSR set to: 14
  7333   00003A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7334   00003C  0011               	retfie		f
  7335   00003E                     __end_of_HighISR:
  7336                           	callstack 0
  7337                           
  7338                           	psect	rparam
  7339   000000                     
  7340                           	psect	temp
  7341   00005F                     btemp:
  7342                           	callstack 0
  7343   00005F                     	ds	1
  7344   000000                     int$flags	set	btemp
  7345   000000                     wtemp8	set	btemp+1
  7346   000000                     ttemp5	set	btemp+1
  7347   000000                     ttemp6	set	btemp+4
  7348   000000                     ttemp7	set	btemp+8
  7349                           
  7350                           	psect	idloc
  7351                           
  7352                           ;Config register IDLOC0 @ 0x200000
  7353                           ;	unspecified, using default values
  7354   200000                     	org	2097152
  7355   200000  0FFF               	dw	4095
  7356                           
  7357                           ;Config register IDLOC1 @ 0x200002
  7358                           ;	unspecified, using default values
  7359   200002                     	org	2097154
  7360   200002  0FFF               	dw	4095
  7361                           
  7362                           ;Config register IDLOC2 @ 0x200004
  7363                           ;	unspecified, using default values
  7364   200004                     	org	2097156
  7365   200004  0FFF               	dw	4095
  7366                           
  7367                           ;Config register IDLOC3 @ 0x200006
  7368                           ;	unspecified, using default values
  7369   200006                     	org	2097158
  7370   200006  0FFF               	dw	4095
  7371                           
  7372                           ;Config register IDLOC4 @ 0x200008
  7373                           ;	unspecified, using default values
  7374   200008                     	org	2097160
  7375   200008  0FFF               	dw	4095
  7376                           
  7377                           ;Config register IDLOC5 @ 0x20000A
  7378                           ;	unspecified, using default values
  7379   20000A                     	org	2097162
  7380   20000A  0FFF               	dw	4095
  7381                           
  7382                           ;Config register IDLOC6 @ 0x20000C
  7383                           ;	unspecified, using default values
  7384   20000C                     	org	2097164
  7385   20000C  0FFF               	dw	4095
  7386                           
  7387                           ;Config register IDLOC7 @ 0x20000E
  7388                           ;	unspecified, using default values
  7389   20000E                     	org	2097166
  7390   20000E  0FFF               	dw	4095
  7391                           
  7392                           	psect	config
  7393                           
  7394                           ;Config register CONFIG1L @ 0x300000
  7395                           ;	External Oscillator mode Selection bits
  7396                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7397                           ;	Power-up default value for COSC bits
  7398                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7399   300000                     	org	3145728
  7400   300000  AA                 	db	170
  7401                           
  7402                           ;Config register CONFIG1H @ 0x300001
  7403                           ;	unspecified, using default values
  7404                           ;	Clock Out Enable bit
  7405                           ;	CLKOUTEN = 0x1, unprogrammed default
  7406                           ;	Clock Switch Enable bit
  7407                           ;	CSWEN = 0x1, unprogrammed default
  7408                           ;	Fail-Safe Clock Monitor Enable bit
  7409                           ;	FCMEN = 0x1, unprogrammed default
  7410   300001                     	org	3145729
  7411   300001  FF                 	db	255
  7412                           
  7413                           ;Config register CONFIG2L @ 0x300002
  7414                           ;	unspecified, using default values
  7415                           ;	Master Clear Enable bit
  7416                           ;	MCLRE = 0x1, unprogrammed default
  7417                           ;	Power-up Timer Enable bit
  7418                           ;	PWRTE = 0x1, unprogrammed default
  7419                           ;	Low-power BOR enable bit
  7420                           ;	LPBOREN = 0x1, unprogrammed default
  7421                           ;	Brown-out Reset Enable bits
  7422                           ;	BOREN = 0x3, unprogrammed default
  7423   300002                     	org	3145730
  7424   300002  FF                 	db	255
  7425                           
  7426                           ;Config register CONFIG2H @ 0x300003
  7427                           ;	unspecified, using default values
  7428                           ;	Brown Out Reset Voltage selection bits
  7429                           ;	BORV = 0x3, unprogrammed default
  7430                           ;	ZCD Disable bit
  7431                           ;	ZCD = 0x1, unprogrammed default
  7432                           ;	PPSLOCK bit One-Way Set Enable bit
  7433                           ;	PPS1WAY = 0x1, unprogrammed default
  7434                           ;	Stack Full/Underflow Reset Enable bit
  7435                           ;	STVREN = 0x1, unprogrammed default
  7436                           ;	Debugger Enable bit
  7437                           ;	DEBUG = 0x1, unprogrammed default
  7438                           ;	Extended Instruction Set Enable bit
  7439                           ;	XINST = 0x1, unprogrammed default
  7440   300003                     	org	3145731
  7441   300003  FF                 	db	255
  7442                           
  7443                           ;Config register CONFIG3L @ 0x300004
  7444                           ;	WDT Period Select bits
  7445                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7446                           ;	WDT operating mode
  7447                           ;	WDTE = OFF, WDT Disabled
  7448   300004                     	org	3145732
  7449   300004  9F                 	db	159
  7450                           
  7451                           ;Config register CONFIG3H @ 0x300005
  7452                           ;	unspecified, using default values
  7453                           ;	WDT Window Select bits
  7454                           ;	WDTCWS = 0x7, unprogrammed default
  7455                           ;	WDT input clock selector
  7456                           ;	WDTCCS = 0x7, unprogrammed default
  7457   300005                     	org	3145733
  7458   300005  FF                 	db	255
  7459                           
  7460                           ;Config register CONFIG4L @ 0x300006
  7461                           ;	unspecified, using default values
  7462                           ;	Write Protection Block 0
  7463                           ;	WRT0 = 0x1, unprogrammed default
  7464                           ;	Write Protection Block 1
  7465                           ;	WRT1 = 0x1, unprogrammed default
  7466                           ;	Write Protection Block 2
  7467                           ;	WRT2 = 0x1, unprogrammed default
  7468                           ;	Write Protection Block 3
  7469                           ;	WRT3 = 0x1, unprogrammed default
  7470                           ;	Write Protection Block 3
  7471                           ;	WRT4 = 0x1, unprogrammed default
  7472                           ;	Write Protection Block 3
  7473                           ;	WRT5 = 0x1, unprogrammed default
  7474                           ;	Write Protection Block 3
  7475                           ;	WRT6 = 0x1, unprogrammed default
  7476                           ;	Write Protection Block 3
  7477                           ;	WRT7 = 0x1, unprogrammed default
  7478   300006                     	org	3145734
  7479   300006  FF                 	db	255
  7480                           
  7481                           ;Config register CONFIG4H @ 0x300007
  7482                           ;	unspecified, using default values
  7483                           ;	Configuration Register Write Protection bit
  7484                           ;	WRTC = 0x1, unprogrammed default
  7485                           ;	Boot Block Write Protection bit
  7486                           ;	WRTB = 0x1, unprogrammed default
  7487                           ;	Data EEPROM Write Protection bit
  7488                           ;	WRTD = 0x1, unprogrammed default
  7489                           ;	Scanner Enable bit
  7490                           ;	SCANE = 0x1, unprogrammed default
  7491                           ;	Low Voltage Programming Enable bit
  7492                           ;	LVP = 0x1, unprogrammed default
  7493   300007                     	org	3145735
  7494   300007  FF                 	db	255
  7495                           
  7496                           ;Config register CONFIG5L @ 0x300008
  7497                           ;	unspecified, using default values
  7498                           ;	UserNVM Program Memory Code Protection bit
  7499                           ;	CP = 0x1, unprogrammed default
  7500                           ;	DataNVM Memory Code Protection bit
  7501                           ;	CPD = 0x1, unprogrammed default
  7502   300008                     	org	3145736
  7503   300008  FF                 	db	255
  7504                           
  7505                           ;Config register CONFIG5H @ 0x300009
  7506                           ;	unspecified, using default values
  7507   300009                     	org	3145737
  7508   300009  FF                 	db	255
  7509                           
  7510                           ;Config register CONFIG6L @ 0x30000A
  7511                           ;	unspecified, using default values
  7512                           ;	Table Read Protection Block 0
  7513                           ;	EBTR0 = 0x1, unprogrammed default
  7514                           ;	Table Read Protection Block 1
  7515                           ;	EBTR1 = 0x1, unprogrammed default
  7516                           ;	Table Read Protection Block 2
  7517                           ;	EBTR2 = 0x1, unprogrammed default
  7518                           ;	Table Read Protection Block 3
  7519                           ;	EBTR3 = 0x1, unprogrammed default
  7520                           ;	Table Read Protection Block 4
  7521                           ;	EBTR4 = 0x1, unprogrammed default
  7522                           ;	Table Read Protection Block 5
  7523                           ;	EBTR5 = 0x1, unprogrammed default
  7524                           ;	Table Read Protection Block 6
  7525                           ;	EBTR6 = 0x1, unprogrammed default
  7526                           ;	Table Read Protection Block 7
  7527                           ;	EBTR7 = 0x1, unprogrammed default
  7528   30000A                     	org	3145738
  7529   30000A  FF                 	db	255
  7530                           
  7531                           ;Config register CONFIG6H @ 0x30000B
  7532                           ;	unspecified, using default values
  7533                           ;	Boot Block Table Read Protection bit
  7534                           ;	EBTRB = 0x1, unprogrammed default
  7535   30000B                     	org	3145739
  7536   30000B  FF                 	db	255
  7537                           tosu	equ	0xFFF
  7538                           tosh	equ	0xFFE
  7539                           tosl	equ	0xFFD
  7540                           stkptr	equ	0xFFC
  7541                           pclatu	equ	0xFFB
  7542                           pclath	equ	0xFFA
  7543                           pcl	equ	0xFF9
  7544                           tblptru	equ	0xFF8
  7545                           tblptrh	equ	0xFF7
  7546                           tblptrl	equ	0xFF6
  7547                           tablat	equ	0xFF5
  7548                           prodh	equ	0xFF4
  7549                           prodl	equ	0xFF3
  7550                           indf0	equ	0xFEF
  7551                           postinc0	equ	0xFEE
  7552                           postdec0	equ	0xFED
  7553                           preinc0	equ	0xFEC
  7554                           plusw0	equ	0xFEB
  7555                           fsr0h	equ	0xFEA
  7556                           fsr0l	equ	0xFE9
  7557                           wreg	equ	0xFE8
  7558                           indf1	equ	0xFE7
  7559                           postinc1	equ	0xFE6
  7560                           postdec1	equ	0xFE5
  7561                           preinc1	equ	0xFE4
  7562                           plusw1	equ	0xFE3
  7563                           fsr1h	equ	0xFE2
  7564                           fsr1l	equ	0xFE1
  7565                           bsr	equ	0xFE0
  7566                           indf2	equ	0xFDF
  7567                           postinc2	equ	0xFDE
  7568                           postdec2	equ	0xFDD
  7569                           preinc2	equ	0xFDC
  7570                           plusw2	equ	0xFDB
  7571                           fsr2h	equ	0xFDA
  7572                           fsr2l	equ	0xFD9
  7573                           status	equ	0xFD8

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     92      94
    BANK0           160    159     160
    BANK1           256    254     256
    BANK2           256     90     212
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_3(CODE[18]), STR_2(CODE[15]), STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_3(CODE[18]), STR_2(CODE[15]), STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 18
		 -> STR_3(CODE[18]), STR_2(CODE[15]), STR_1(CODE[15]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2389$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_3(CODE[18]), STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK1[100]), main@readout1(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2336$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2336$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK1[100]), main@readout1(BANK0[100]), 

    motor_action@r	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    motor_action@l	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    left_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    left_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    right_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    right_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    spin_180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    spin_180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    left_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    left_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    right_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    right_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    reverse_onesquare@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    reverse_onesquare@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_onesquare@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_onesquare@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    reverse_fromcard@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    reverse_fromcard@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse_fromcard@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse_fromcard@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), main@motorL(BANK2[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    S589DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    S589DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    color_processor_hard@calibrated	PTR unsigned int  size(2) Largest target is 64
		 -> main@color_calibrated(BANK2[64]), 

    color_processor_hard@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_processor_easy@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_read@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), main@RGB_calibrated(BANK2[8]), main@L_calibrated(BANK1[8]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _motor_action->_left_135
    _motor_action->_left_90
    _motor_action->_reverse_fromcard
    _motor_action->_reverse_onesquare
    _motor_action->_right_135
    _motor_action->_right_90
    _motor_action->_spin_180
    _stop->_setMotorPWM
    _spin_180->_setMotorPWM
    _right_90->_setMotorPWM
    _right_135->_setMotorPWM
    _reverse_onesquare->_setMotorPWM
    _reverse_fromcard->_setMotorPWM
    _left_90->_setMotorPWM
    _left_135->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _color_read->_color_read_Blue
    _color_read->_color_read_Green
    _color_read->_color_read_Luminosity
    _color_read->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Luminosity->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               481   481      0   53935
                                             88 COMRAM     4     4      0
                                             27 BANK0    132   132      0
                                              0 BANK1    254   254      0
                                              0 BANK2     90    90      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
               _color_processor_easy
               _color_processor_hard
                         _color_read
                            _forward
                    _initDCmotorsPWM
                         _initUSART4
                       _motor_action
                  _sendStringSerial4
                        _setMotorPWM
                           _spin_180
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    5874
                                              0 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5219
                                             80 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    4869
                                             62 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3649
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     295
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _motor_action                                         8     2      6   29494
                                             33 COMRAM     8     2      6
                           _left_135
                            _left_90
                   _reverse_fromcard
                  _reverse_onesquare
                          _right_135
                           _right_90
                           _spin_180
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 7     3      4    4163
                                             25 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _spin_180                                             8     4      4    3403
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_90                                             8     4      4    3555
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_135                                            8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_onesquare                                    8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse_fromcard                                     8     4      4    3707
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_90                                              8     4      4    3555
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_135                                             8     4      4    3251
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                              6     2      4    3555
                                             25 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    2703
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read                                           4     2      2     844
                                             11 COMRAM     4     2      2
                    _color_read_Blue
                   _color_read_Green
              _color_read_Luminosity
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Luminosity                                7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_processor_hard                                28    24      4     829
                                              0 COMRAM    28    24      4
 ---------------------------------------------------------------------------------
 (1) _color_processor_easy                                10     8      2     346
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_processor_easy
   _color_processor_hard
   _color_read
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Luminosity
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _motor_action
     _left_135
       _setMotorPWM
     _left_90
       _setMotorPWM
     _reverse_fromcard
       _setMotorPWM
     _reverse_onesquare
       _setMotorPWM
     _right_135
       _setMotorPWM
     _right_90
       _setMotorPWM
     _spin_180
       _setMotorPWM
     _stop
       _setMotorPWM
   _sendStringSerial4
     _sendCharSerial4
   _setMotorPWM
   _spin_180
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
   _stop

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      60        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     5A      D4       9       82.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FE     100       7      100.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      A0       5      100.0%
BITBIGSFRllllhh     91      0       0      40        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5C      5E       1      100.0%
BITBIGSFRllllll     32      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      49        0.0%
BITBIGSFRllllll     26      0       0      58        0.0%
BITBIGSFRllllhl     20      0       0      43        0.0%
BITBIGSFRhhlhhh     1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      35        0.0%
BITBIGSFRhhlhl      13      0       0      34        0.0%
BITBIGSFRhllh       11      0       0      37        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      44        0.0%
BITBIGSFRllllhh      8      0       0      41        0.0%
BITBIGSFRllllll      7      0       0      54        0.0%
BITBIGSFRllllll      7      0       0      52        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRllllll      6      0       0      48        0.0%
BITBIGSFRllllll      5      0       0      47        0.0%
BITBIGSFRhlll        5      0       0      38        0.0%
BITBIGSFRllllll      3      0       0      46        0.0%
BITBIGSFRllh         2      0       0      39        0.0%
BITBIGSFRllllll      1      0       0      50        0.0%
BITBIGSFRllllll      1      0       0      51        0.0%
BITBIGSFRllllll      1      0       0      55        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      56        0.0%
BITBIGSFRllllhl      1      0       0      42        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2D2      59        0.0%
DATA                 0      0     2D2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Dec 10 21:10:31 2022

                 _color_read_Red 2AA8                  _color_read_Blue 2B98  
                             l33 2A02                               l42 2AF6  
                             l51 23A4                               l36 2DDA  
                             l45 2B96                               l70 1846  
                             l39 2B46                               l64 1710  
                             l48 2BE6                               l58 22FE  
                             l66 1772                               l68 17D4  
                             l97 2D48                     ___awdiv@sign 000C  
            ___wmul@multiplicand 0003                 _color_read_Green 2B48  
              ??_Interrupts_init 0001                              l100 2D4A  
                            l103 2D70                              l112 2E66  
                            l200 10D2                              l106 2E70  
                            l115 2E52                              l109 2E5C  
                            l118 2CAE                              l302 2630  
                            l320 1A94                              l208 1296  
                            l307 2816                              l262 1C68  
                            l430 2E30                              l255 2C6C  
                            l272 292E                              l192 0F04  
                            l418 2E18                              l282 26D2  
                            l267 28A4                              l427 2E1C  
                            l292 24EC                              l436 2D1E  
                            l277 2774                              l366 2E46  
                            l439 2D96                              l287 2448  
                            l199 10BE                              l377 2DFA  
                            l297 258E                              l553 1DF0  
                            l670 2240                              l566 1F54  
              motor_action@color 0022                              u940 20C6  
                            u941 20C2                              u950 20D8  
                            u951 20D4                              u960 2100  
                            u961 20FC                              u970 2136  
                            u971 2132                              u980 2C2A  
                            u981 2C26                              u990 1C7C  
                            u991 1C78                              _abs 2CB0  
                            _pad 2930                              wreg 000FE8  
                           l1202 2C2A                             ?_abs 0013  
                           l1205 2E72                             l1117 2A54  
                           l1150 13EA                             l1143 29A8  
                           l1151 1430                             l2201 2136  
                           l3001 0ED8                             l1162 15D0  
                           l2211 2C0A                             l1139 2952  
                           l3003 0EE4                             l1148 13E2  
                           l2221 1CA0                             l2213 1C6A  
                           l2205 2BE8                             l2301 2972  
                           l3101 1334                             l3021 0FC2  
                           l3013 0F1C                             l3005 0EFC  
                           l1182 2CEE                             l2311 2D4A  
                           l2231 1CFC                             l2223 1CAE  
                           l2215 1C6E                             l2207 2BF4  
                           l2303 2976                             l1175 2AA6  
                           l3103 1348                             l3031 1054  
                           l3023 0FF8                             l3015 0F28  
                           l3007 0F12                             l2313 2D5A  
                           l2321 217E                             l2241 1D66  
                           l2233 1D04                             l2225 1CCE  
                           l2217 1C7C                             l2209 2C06  
                           l2305 2994                             l2401 1538  
                           l1169 20B2                             l3041 10CC  
                           l3033 1056                             l3025 0FFA  
                           l3017 0F56                             l1194 217C  
                           l2331 21AA                             l2323 2182  
                           l2315 2D72                             l2251 1DB0  
                           l2243 1D86                             l2235 1D18  
                           l2227 1CD2                             l2219 1C9C  
                           l1179 2CE6                             l2307 2CB0  
                           l2411 15A0                             l2403 1552  
                           l3051 1114                             l3043 10D8  
                           l3035 106E                             l3027 1030  
                           l3019 0F8C                             l2501 2D36  
                           l2421 2E4A                             l2341 21D8  
                           l2333 21B2                             l2325 2190  
                           l2317 2D8E                             l2253 1DD0  
                           l2245 1D88                             l2237 1D26  
                           l2229 1CDE                             l2261 1E04  
                           l2309 2CCA                             l2413 15B0  
                           l2405 1570                             l3061 1176  
                           l3053 1128                             l3045 10E2  
                           l3037 1074                             l3029 103C  
                           l2423 2E4E                             l2503 2DBE  
                           l2431 2E58                             l2511 2AA8  
                           l2351 2212                             l2343 21E0  
                           l2335 21B6                             l2327 2198  
                           l2247 1D9A                             l2239 1D38  
                           l2271 1E74                             l2263 1E24  
                           l2191 20B4                             l2407 158A  
                           l3071 1212                             l3063 1192  
                           l3055 1134                             l3047 10F6  
                           l3039 1090                             l2417 2E68  
                           l2425 2E5E                             l2441 2CAA  
                           l2433 2C70                             l2505 2AF8  
                           l2513 2AEE                             l2361 2238  
                           l2353 2214                             l2345 21EE  
                           l2337 21BE                             l2329 219C  
                           l2249 1DA0                             l2281 1EEC  
                           l2273 1E7C                             l2265 1E28  
                           l2257 1DF2                             l2193 20C6  
                           l2409 159A                             l3081 1258  
                           l3073 1218                             l3065 11AC  
                           l3057 1142                             l3049 1102  
                           l2419 2E6C                             l2427 2E62  
                           l2443 2CAC                             l2435 2C74  
                           l2523 2B98                             l2507 2B3E  
                           l2355 221A                             l2347 21F4  
                           l2339 21D0                             l2451 1B14  
                           l2611 2692                             l2603 265A  
                           l2531 2838                             l2283 1EFE  
                           l2275 1E90                             l2267 1E36  
                           l2259 1DF6                             l2195 20D8  
                           l2371 139A                             l3091 12A2  
                           l3083 126C                             l3075 1222  
                           l3067 11EA                             l3059 115A  
                           l2437 2C7C                             l2429 2E54  
                           l2525 2BDE                             l2517 2B48  
                           l2349 220A                             l2357 2220  
                           l2453 1B5A                             l2701 27B8  
                           l2613 269E                             l2605 2672  
                           l2541 2864                             l3165 1A56  
                           l2277 1E9E                             l2285 1F04  
                           l2269 1E56                             l2197 20E2  
                           l2293 2930                             l2381 1408  
                           l2373 13BA                             l2365 1356  
                           l2461 1F56                             l3093 12D2  
                           l3085 1276                             l3069 11F6  
                           l3077 122A                             l2439 2C84  
                           l2519 2B8E                             l2359 2230  
                           l2455 1B7A                             l2447 1A96  
                           l2711 2800                             l2703 27C4  
                           l2615 26BA                             l2607 267E  
                           l2631 23F4                             l2551 250E  
                           l2543 2870                             l2287 1F14  
                           l2279 1ECC                             l2199 2100  
                           l2295 293E                             l2391 1440  
                           l2383 1418                             l2375 13D6  
                           l2367 1376                             l2471 1FAE  
                           l2463 1F7E                             l3095 12EA  
                           l3079 1242                             l2457 1B96  
                           l2449 1AB2                             l2705 27D0  
                           l2641 244A                             l2609 268A  
                           l2633 2400                             l2625 23CE  
                           l2617 23A6                             l2561 2530  
                           l2545 287E                             l2537 2840  
                           l2529 2818                             l2713 2E1C  
                           l2289 1F34                             l2297 294A  
                           l2393 1446                             l2385 1424  
                           l2377 13F2                             l2369 138A  
                           l2481 2074                             l2473 1FCE  
                           l2465 1F8C                             l2721 2A7E  
                           l3097 1302                             l3089 1298  
                           l2491 2D20                             l2731 29B8  
                           l2811 1616                             l2803 15D2  
                           l2459 1C00                             l2707 27D8  
                           l2651 2480                             l2643 246A  
                           l2635 2408                             l2627 23DA  
                           l2619 23C6                             l2571 2578  
                           l2563 253C                             l2547 288A  
                           l2539 2858                             l2715 2E2C  
                           l2299 295E                             l2395 14C8  
                           l2387 142C                             l2379 1402  
                           l2475 1FEE                             l2467 1F9A  
                           l2723 2A9E                             l3099 1308  
                           l2493 2D2A                             l2741 29E0  
                           l2733 29C8                             l2821 172A  
                           l2813 16C4                             l2805 160E  
                           l2709 27E4                             l2661 24B8  
                           l2653 248C                             l2581 26FC  
                           l2573 26D4                             l2637 2414  
                           l2629 23E8                             l2565 2548  
                           l2557 2516                             l2549 24EE  
                           l2397 14CE                             l2389 1438  
                           l2477 2044                             l2469 1F9E  
                           l2485 2086                             l2717 2A56  
                           l2495 2D30                             l2751 29EA  
                           l2743 29E2                             l2735 29D2  
                           l2727 29AA                             l2831 17D0  
                           l2823 174C                             l2815 16C8  
                           l2911 28FE                             l2663 24D4  
                           l2655 2498                             l2591 2740  
                           l2583 2714                             l2575 26F4  
                           l2639 2430                             l2567 2550  
                           l2559 2522                             l2399 14D4  
                           l2719 2A62                             l2497 2D32  
                           l2761 29F4                             l2753 29EC  
                           l2745 29E4                             l2737 29DC  
                           l2729 29AE                             l2841 182A  
                           l2833 17FA                             l2825 176E  
                           l2817 16EA                             l2913 2906  
                           l2905 28CE                             l2657 24A4  
                           l2649 2472                             l2593 275C  
                           l2585 2720                             l2681 25EA  
                           l2673 25B8                             l2665 2590  
                           l2569 255C                             l2921 1874  
                           l2499 2D34                             l2771 2A00  
                           l2763 29F6                             l2755 29EE  
                           l2747 29E6                             l2739 29DE  
                           l2835 180A                             l2827 178C  
                           l2819 170C                             l2915 2912  
                           l2907 28E6                             l2851 2C68  
                           l2843 2C2C                             l2691 2796  
                           l2659 24AC                             l2587 272C  
                           l2595 2632                             l2683 25F2  
                           l2675 25C4                             l2667 25B0  
                           l2931 18F8                             l2923 188C  
                           l2861 2DEE                             l2765 29F8  
                           l2757 29F0                             l2749 29E8  
                           l2837 181A                             l2829 17AE  
                           l2781 2374                             l2773 2300  
                           l2909 28F2                             l2853 2C6A  
                           l2845 2C3C                             l2589 2734  
                           l2597 2652                             l2685 25FE  
                           l2677 25D2                             l2941 1978  
                           l2933 190C                             l2925 18A0  
                           l2917 1848                             ?_pad 0011  
                           l2855 2E32                             l2863 2DF8  
                           l2767 29FA                             l2759 29F2  
                           l2791 22B6                             l2783 2242  
                           l2839 1826                             l2775 2314  
                           l2847 2C50                             l2871 2E12  
                           l2687 261A                             l2679 25DE  
                           l2943 1990                             l2935 1924  
                           l2927 18B8                             l2919 184C  
                           l2857 2DDC                             l2769 29FE  
                           l2793 22CC                             l2785 227E  
                           l2777 232C                             l2849 2C54  
                           l2873 2E14                             l2865 2DFC  
                           l2697 279E                             l2689 2776  
                           l2945 19BC                             l2937 194C  
                           l2929 18E0                             l2953 1A40  
                           l2881 2A1E                             l2961 0E18  
                           l2859 2DE4                             l2795 22E2  
                           l2787 2294                             l2779 235C  
                           l2875 2E16                             l2867 2E06  
                           l2699 27AC                             l2947 19E8  
                           l2939 1964                             l2891 2CF4  
                           l2883 2A26                             l2971 0E34  
                           l2963 0E24                             l2797 22EE  
                           l2789 22AA                             l2869 2E08  
                           l2949 1A14                             l2893 2D02  
                           l2885 2A42                             l2877 2A04  
                           l2981 0E4E                             l2973 0E34  
                           l2965 0E28                             l2799 22F6  
                           l2895 2D06                             l2879 2A16  
                           l2991 0E76                             l2983 0E52  
                           l2975 0E3A                             l2967 0E2C  
                           l2959 0E14                             l2897 28A6  
                           l2889 2CF0                             l2993 0E7E  
                           l2985 0E5A                             l2977 0E3E  
                           l2969 0E30                             l2899 28C6  
                           l2995 0E8A                             l2987 0E5E  
                           l2979 0E46                             l2997 0E96  
                           l2989 0E72                             l2999 0EA2  
                           STR_1 0E04                             STR_2 0E04  
                           STR_3 0E01                             u1000 1CAE  
                           u1001 1CAA                             u1011 1CD8  
                           u1020 1CFC                             u1100 1ECC  
                           u1021 1CF8                             u1101 1EC8  
                           u1030 1D26                             u1110 1F14  
                           u1031 1D22                             u1111 1F10  
                           u1200 21EE                             u1040 1D66  
                           u1120 293E                             u1201 21EA  
                           u1041 1D62                             u1121 293A  
                           u1210 220A                             u1050 1DB0  
                           u1130 2994                             u1211 2206  
                           u1051 1DAC                             u1131 2990  
                           u1220 2230                             u1060 1E04  
                           u1140 2CCA                             u1300 1570  
                           u1221 222C                             u1061 1E00  
                           u1141 2CC6                             u1301 156C  
                           u1150 2D5A                             u1070 1E36  
                           u1310 158A                             u1230 1386  
                           u1151 2D56                             u2007 2624  
                           u1071 1E32                             u1311 1586  
                           u1231 1380                             u1160 2D70  
                           u1080 1E74                             u1320 159A  
                           u1240 1388                             u1400 1FCE  
                           u1161 2D6C                             u2017 268C  
                           u1081 1E70                             u1321 1596  
                           u1401 1FCA                             u1330 2C98  
                           u1170 2190                             u1090 1E9E  
                           u1250 139A                             u1410 1FEE  
                           u1331 2C90                             u2107 231E  
                           u1171 218C                             u2027 26C4  
                           u1091 1E9A                             u1251 1396  
                           u1411 1FEA                             u1180 21AA  
                           u1420 28A4                             u1500 2E2C  
                           u1260 13D6                             u2117 234E  
                           u1181 21A6                             u2037 272E  
                           u1421 28A0                             u1501 2E28  
                           u1261 13D2                             u1190 21D0  
                           u1350 1AB2                             u1430 2578  
                           u1270 1402                             u1510 2A9E  
                           u2127 237E                             u1191 21CC  
                           u1351 1AAE                             u2047 2766  
                           u1431 2574                             u1271 13FE  
                           u1511 2A9A                             u1520 2294  
                           u1600 174C                             u1360 1B96  
                           u1440 275C                             u1280 1418  
                   _BAUD4CONbits 000EE9                             u2137 29BE  
                           u1521 2290                             u1601 1748  
                           u1361 1B92                             u2057 24A6  
                           u1441 2758                             u1281 1414  
                           _LATE 000F7D                             u1530 22AA  
                           u1610 176E                             u1450 26BA  
                           u1290 1552                             u1531 22A6  
                           u1611 176A                             u2067 24DE  
                           u1451 26B6                             u1291 154E  
                           _LATG 000F7F                             u1540 22CC  
                           u1700 181A                             u1620 1784  
                           u1348 2C9A                             u1460 2430  
                           u1541 22C8                             u1701 1816  
                           u1621 177E                             u2077 27D2  
                           u1461 242C                             u1550 22E2  
                           u1710 1846                             u1630 1786  
                           u1374 1BF0                             u1470 24D4  
                           u1390 1F7E                             u1551 22DE  
                           u1711 1842                             u1375 1BEC  
                           u2087 280A                             u1471 24D0  
                           u1391 1F7A                             u1640 17AE  
                           u1560 16EA                             u1384 1C5A  
                           u1480 261A                             u1720 2D1E  
                           u1800 1142                             u1641 17AA  
                           u1561 16E6                             u1385 1C56  
                           u2097 2900                             u1481 2616  
                           u1721 2D1A                             u1801 113E  
                           u1650 17D0                             u1570 170C  
                           u1730 292E                             u1490 2800  
                           u1810 1258                             _T2PR 000FBC  
                           u1651 17CC                             u1571 1708  
                           u1731 292A                             u1491 27FC  
                           u1811 1254                             u1660 17E6  
                           u1580 1722                             u1820 1292  
                           u1740 0F12                             u1661 17E0  
                           u1581 171C                             u1821 128E  
                           u1741 0F0E                             u1670 17E8  
                           u1590 1724                             u1830 1334  
                           u1750 1090                             u1831 1330  
                           u1751 108C                             u1680 17FA  
                           u1760 10AC                             u1681 17F6  
                           u1761 10A4                             u1690 180A  
                           u1770 10BE                             u1691 1806  
                           u1907 12F4                             u1771 10BA  
                           u1780 10CC                             u1917 187E  
                           u1781 10C8                             u1790 1114  
                           u1927 18EA                             u1791 1110  
                           u1768 10AE                             u1937 1956  
                           u1947 2876                             u1867 0EEE  
                           u1957 254A                             u1877 1046  
                           u1967 2582                             u1887 1060  
                           u1977 2402                             u1897 1234  
                           u1987 243A                             u1997 25EC  
                           abs@a 0013                             _dbuf 025A  
                           _main 0E14                             _dtoa 1356  
                           _prec 0252                             _time 0254  
                           pad@i 0018                             pad@p 0015  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             pad@w 001A  
                           fsr2l 000FD9                             btemp 005F  
                           _stop 2818                             prodh 000FF4  
                           prodl 000FF3                             start 003E  
         __end_of_color_read_Red 2AF8                  __end_of_HighISR 003E  
                   ___param_bank 000000                            ??_abs 0015  
                          ??_pad 0017         _color_processor_hard$370 000C  
       _color_processor_hard$372 000D         _color_processor_hard$374 000E  
                __end_of___aodiv 1DF2                            ?_main 0001  
                          ?_dtoa 001C                  __end_of___aomod 1F56  
                __end_of___awdiv 2242          ??_color_read_Luminosity 0007  
                          ?_stop 001A                  ___awdiv@divisor 0009  
                          i2l374 003A                  ___awdiv@counter 000B  
                   vfpfcnvrt@fmt 0041                            _TMR0H 000FD4  
                          _TMR0L 000FD3                     main@readout1 007B  
                   main@readout2 0100                     main@readout3 0164  
        __end_of_sendCharSerial4 2E32       __end_of_I2C_2_Master_Start 2E72  
     __end_of_I2C_2_Master_Write 2E54                  __end_of_left_90 24EE  
                          _flags 01FE                            _fputc 20B4  
                __end_of_forward 2930                            _fputs 2BE8  
                          pad@fp 0011                            _width 0250  
                          _putch 2E72                            main@i 01F4  
                          main@j 01E6                            main@k 01F2  
                          dtoa@d 001E                            dtoa@i 003C  
                          dtoa@n 0034                            dtoa@p 0030  
                          dtoa@s 003E                            dtoa@w 0032  
                          tablat 000FF5                            ttemp5 0060  
                          ttemp6 0063                            ttemp7 0067  
                          stop@i 001F                            status 000FD8  
                          wtemp8 0060                  __end_of_sprintf 2A56  
        __end_of_color_read_Blue 2BE8            _I2C_2_Master_RepStart 2E54  
                ?_color_read_Red 0005                  __initialization 2D98  
 color_processor_hard@calibrated 0003                     __end_of_main 1356  
                   __end_of_dtoa 15D2                     __end_of_stop 28A6  
                         ??_main 0059                           ??_dtoa 0026  
                         ??_stop 001E                    __activetblptr 000003  
                   ?_setMotorPWM 000F                           ?_fputc 0001  
                         ?_fputs 000A                 ___awdiv@dividend 0007  
                         ?_putch 0001                 main@L_calibrated 01E8  
                         _RC0PPS 000E62                           _RC4REG 000EE3  
                         _RE2PPS 000E74                           _RD5PPS 000E6F  
                         _RC7PPS 000E69                           _RD6PPS 000E70  
                         i2l3131 000A                           i2l3141 0036  
                         i2l3133 001A                           i2l3135 0028  
                         i2l3137 002E                           i2l3139 0032  
                      ??_HighISR 0001         __end_of_color_click_init 2A04  
                         _RX4PPS 000E15                           _TX4REG 000EE4  
                  ??_Timer0_init 0001        color_processor_easy@color 0003  
                   vfprintf@cfmt 0057                 __end_of_left_135 2818  
                      ??___aodiv 0011                        ??___aomod 0011  
                         ___wmul 2D72                        ??___awdiv 000B  
                         clear_0 2D9E                 ___awdiv@quotient 000D  
                         isa$std 000001                           pad@buf 0013  
                         dtoa@fp 001C                        ??_left_90 001E  
               __end_of_right_90 244A                    main@time_path 01C8  
                         fputc@c 0001                           fputs@c 000E  
                         fputs@i 000F                           fputs@s 000A  
                      ??_forward 001E                 __end_of_spin_180 2590  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
               ?_sendCharSerial4 0001                           putch@c 0001  
               __end_of_vfprintf 2AA8                           stop@mL 001A  
                         stop@mR 001C                ??_initDCmotorsPWM 0003  
                      ??_sprintf 0059              reverse_onesquare@mL 001A  
            reverse_onesquare@mR 001C                       __accesstop 0060  
        __end_of__initialization 2DB2         __end_of_color_read_Green 2B98  
         ?_I2C_2_Master_RepStart 0001                    ___rparam_used 000001  
               ?_color_read_Blue 0005                  _Interrupts_init 2E32  
                 __pcstackCOMRAM 0001                    color_read@rgb 000C  
                  __end_of_fputc 217E                    __end_of_fputs 2C2C  
                  __end_of_putch 2E74              __end_of_Timer0_init 2DFC  
                        ??_fputc 0005                          ??_fputs 000E  
                        ??_putch 0001                       __pbssBANK0 00FF  
                     __pbssBANK1 01FE                       __pbssBANK2 0200  
         color_processor_hard@cb 0019           color_processor_hard@cg 0017  
         color_processor_hard@cr 0015                _color_writetoaddr 2DBC  
                   _T2CLKCONbits 000FBF               ?_color_writetoaddr 0003  
                        ?___wmul 0001                   main@color_flag 005B  
                 main@color_name 01F0                   main@color_path 00DF  
                    right_135@mL 001A                      right_135@mR 001C  
            ??_color_writetoaddr 0004                 _reverse_fromcard 26D4  
  __end_of_color_read_Luminosity 2B48                          _SP4BRGH 000EE6  
                        _SP4BRGL 000EE5                          _PWM6DCH 000FA3  
                        _PWM7DCH 000FA0                          _SSP2ADD 000ED6  
                        _SSP2BUF 000ED5                        ?_left_135 001A  
                     _color_read 2300          __end_of_Interrupts_init 2E48  
         color_writetoaddr@value 0003                 ??_color_read_Red 0007  
                        _HighISR 0008        __end_of_color_writetoaddr 2DDC  
       color_read_Luminosity@tmp 000A               _I2C_2_Master_Start 2E68  
                     _initUSART4 2DFC               _I2C_2_Master_Write 2E48  
                      ?_right_90 001A                          __Hparam 0000  
                        __Lparam 0000  color_processor_hard@condition_b 000B  
color_processor_hard@condition_g 000A  color_processor_hard@condition_r 0009  
              color_read_Red@tmp 000A                      _Timer0_init 2DDC  
                      ?_spin_180 001A          sendStringSerial4@string 0002  
                        ___aodiv 1C6A                          ___aomod 1DF2  
                        ___awdiv 217E              ?_I2C_2_Master_Start 0001  
            ?_I2C_2_Master_Write 0001                       _off_period 0256  
                      ?_vfprintf 0051                     __psmallconst 0E00  
                        __pcinit 2D98                          __ramtop 0E00  
                        __ptext0 0E14                          __ptext1 2A04  
                        __ptext2 2A56                          __ptext3 1F56  
                        __ptext4 1356                          __ptext5 2930  
                        __ptext6 2BE8                          __ptext7 20B4  
                        __ptext8 2E72                          __ptext9 2CB0  
                        _left_90 244A                        _T2CONbits 000FBD  
                        _forward 28A6                        _T2HLTbits 000FBE  
                  ?_motor_action 0022                    _RxBufWriteCnt 005E  
                        _sprintf 2A04             ??_I2C_2_Master_Start 0002  
                     ??_left_135 001E             ??_I2C_2_Master_Write 0002  
           end_of_initialization 2DB2                __end_of_right_135 2632  
             setMotorPWM@PWMduty 0018                          fputc@fp 0003  
                        fputs@fp 000C                ?_color_click_init 0001  
   __end_of_color_processor_easy 2300     __end_of_color_processor_hard 1848  
                     ??_right_90 001E               ??_color_click_init 0005  
              __end_of_vfpfcnvrt 20B4                       ??_spin_180 001E  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE                 vfpfcnvrt@convarg 0047  
                     ??_vfprintf 0057                  _initDCmotorsPWM 2C2C  
                      _PORTFbits 000F8E                   ??_motor_action 0028  
                      _TRISCbits 000F83                        _TRISDbits 000F84  
                      _TRISEbits 000F85                        _TRISFbits 000F86  
                      _TRISGbits 000F87                        _TRISHbits 000F88  
             reverse_fromcard@mL 001A               reverse_fromcard@mR 001C  
                    ?_color_read 000C         color_writetoaddr@address 0004  
        ??_I2C_2_Master_RepStart 0002                 ?_Interrupts_init 0001  
                     left_135@mL 001A                       left_135@mR 001C  
                   _EUSART4RXbuf 023C                     _EUSART4TXbuf 0200  
              ?_color_read_Green 0005                      ?_initUSART4 0001  
      sendCharSerial4@charToSend 0001                       main@motorL 02CB  
                     main@motorR 02C2               ??_color_read_Green 0007  
                    vfpfcnvrt@ap 0043                      vfpfcnvrt@cp 004F  
                    vfpfcnvrt@fp 003F                   __end_of___wmul 2D98  
            start_initialization 2D98                      __end_of_abs 2CF0  
                    __end_of_pad 29AA                    _TxBufWriteCnt 00FF  
       __end_of_reverse_fromcard 2776              color_read_Green@tmp 000A  
        __end_of_initDCmotorsPWM 2C6E                      vfprintf@fmt 0053  
                       ??___wmul 0005               reverse_onesquare@i 0020  
                    __pbssCOMRAM 005D             _color_processor_easy 2242  
           _color_processor_hard 15D2                    __pcstackBANK0 0060  
                  __pcstackBANK1 0100                    __pcstackBANK2 027A  
               ___aodiv@dividend 0001               main@RGB_calibrated 02BA  
                       ?_HighISR 0001          color_processor_easy@rgb 0001  
        color_processor_hard@rgb 0001            color_processor_easy@a 0007  
          color_processor_easy@b 0009            color_processor_easy@c 0005  
          color_processor_hard@b 0013            color_processor_hard@g 0011  
          color_processor_hard@i 001B            color_processor_hard@r 000F  
                      _dtoa$2417 002E             __end_of_motor_action 1A96  
                   ?_Timer0_init 0001                        __pintcode 0008  
                       ?___aodiv 0001                         ?___aomod 0001  
                       ?___awdiv 0007                 ___aodiv@quotient 0013  
                     right_135@i 0020                       right_90@mL 001A  
                     right_90@mR 001C             I2C_2_Master_Read@ack 0003  
           I2C_2_Master_Read@tmp 0004                         ?_left_90 001A  
                    __smallconst 0E00                         ?_forward 001A  
              _I2C_2_Master_Idle 2D4A            ?_color_processor_easy 0001  
          ?_color_processor_hard 0001                 main@RGB_recorded 01F6  
              _I2C_2_Master_Init 2D20                _I2C_2_Master_Read 2C6E  
              _I2C_2_Master_Stop 2E5E                     _RxBufReadCnt 005D  
             ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 0011  
          _color_read_Luminosity 2AF8               ?_I2C_2_Master_Stop 0001  
       initDCmotorsPWM@PWMperiod 0001                         ?_sprintf 0060  
              _sendStringSerial4 2CF0              ??_I2C_2_Master_Idle 0001  
            ??_I2C_2_Master_Init 0001              ??_I2C_2_Master_Read 0002  
                 ___wmul@product 0005              ??_I2C_2_Master_Stop 0002  
                       _LATCbits 000F7B                         _LATDbits 000F7C  
                       _LATEbits 000F7D                         _LATFbits 000F7E  
                      _on_period 0258                         _LATGbits 000F7F  
                       _LATHbits 000F80                        _right_135 2590  
                       _IPR0bits 000E1F                         _IPR2bits 000E21  
                       _PIE0bits 000E29                         _PIE2bits 000E2B  
             ?_sendStringSerial4 0002                       spin_180@mL 001A  
                     spin_180@mR 001C                         _PIR0bits 000E33  
                       i2u184_40 001A                         i2u184_41 0016  
                       i2u185_40 0028                         i2u185_41 0024  
                       _PIR2bits 000E35                         _PIR4bits 000E37  
               ?_initDCmotorsPWM 0001                ??_sendCharSerial4 0001  
                       _SSP2CON2 000EDA              ??_sendStringSerial4 0004  
                       _SSP2STAT 000ED8                _reverse_onesquare 2632  
                      _vfpfcnvrt 1F56        __end_of_I2C_2_Master_Idle 2D72  
             ?_reverse_onesquare 001A        __end_of_I2C_2_Master_Init 2D4A  
      __end_of_I2C_2_Master_Read 2CB0                ___wmul@multiplier 0001  
              reverse_fromcard@i 0020        __end_of_I2C_2_Master_Stop 2E68  
                   setMotorPWM@m 000F      I2C_2_Master_Write@data_byte 0002  
                      left_135@i 0020                        left_90@mL 001A  
                      left_90@mR 001C             main@color_calibrated 027A  
              ??_color_read_Blue 0007                     _TxBufReadCnt 01FF  
            ??_reverse_onesquare 001E                     ??_color_read 000E  
      __end_of_sendStringSerial4 2D20    __end_of_I2C_2_Master_RepStart 2E5E  
             color_read_Blue@tmp 000A              __end_of_setMotorPWM 1C6A  
                     ?_right_135 001A                     ??_initUSART4 0001  
                       __Hrparam 0000                       vfprintf@ap 0055  
                       __Lrparam 0000                       vfprintf@fp 0051  
      __end_of_reverse_onesquare 26D4                        forward@mL 001A  
                      forward@mR 001C                       ?_vfpfcnvrt 003F  
             __end_of_color_read 23A6                  ___aodiv@divisor 0009  
                ___aodiv@counter 0011                       _ANSELDbits 000EA7  
         ??_color_processor_easy 0003           ??_color_processor_hard 0005  
                     _ANSELFbits 000EB4                       sprintf@fmt 0062  
                     _T0CON0bits 000FD5                       _T0CON1bits 000FD6  
         ?_color_read_Luminosity 0005               __end_of_initUSART4 2E1A  
                       __ptext10 1DF2                         __ptext11 1C6A  
                       __ptext20 26D4                         __ptext12 2CF0  
                       __ptext21 244A                         __ptext13 2E1A  
                       __ptext30 2AA8                         __ptext22 2776  
                       __ptext14 1848                         __ptext31 2AF8  
                       __ptext23 2DFC                         __ptext15 2818  
                       __ptext40 2E48                         __ptext32 2B48  
                       __ptext24 2C2C                         __ptext16 24EE  
                       __ptext41 2E5E                         __ptext33 2B98  
                       __ptext25 28A6                         __ptext17 23A6  
                       __ptext42 2E68                         __ptext34 2E54  
                       __ptext26 1A96                         __ptext18 2590  
                       __ptext43 2D4A                         __ptext35 2C6E  
                       __ptext27 2D72                         __ptext19 2632  
                       __ptext44 2D20                         __ptext36 15D2  
                       __ptext28 217E                         __ptext45 2DDC  
                       __ptext37 2242                         __ptext29 2300  
                       __ptext46 2E32                         __ptext38 29AA  
                       __ptext39 2DBC                        right_90@i 0020  
                       _left_135 2776                     _SSP2CON1bits 000ED9  
                   _SSP2CON2bits 000EDA                         _right_90 23A6  
              ?_reverse_fromcard 001A                        spin_180@i 0020  
                       _spin_180 24EE                         isa$xinst 000000  
             ??_reverse_fromcard 001E                       _RC4STAbits 000EE7  
                       int$flags 005F                    motor_action@l 0024  
                  motor_action@r 0026                         _vfprintf 2A56  
                       left_90@i 0020                 ___aomod@dividend 0001  
                main@time_return 00FD                       _INTCONbits 000FF2  
                   _motor_action 1848                         forward@i 001E  
                    _setMotorPWM 1A96                      _PWM6CONbits 000FA4  
                    _PWM7CONbits 000FA1                         intlevel2 0000  
                      sprintf@ap 006E                      ??_right_135 001E  
                ___aomod@divisor 0009                      ??_vfpfcnvrt 0045  
                ___aomod@counter 0011                 _color_click_init 29AA  
                       sprintf@f 0070                         sprintf@s 0060  
                     _SSP2DATPPS 000E1D                       _SSP2CLKPPS 000E1C  
                     _TX4STAbits 000EE8                     ___aodiv@sign 0012  
                _sendCharSerial4 2E1A                     ___aomod@sign 0012  
