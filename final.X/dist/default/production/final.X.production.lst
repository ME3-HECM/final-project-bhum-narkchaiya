

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Dec 10 16:35:58 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    62                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    63                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    64   000000                     
    65                           ; Version 2.35
    66                           ; Generated 05/05/2021 GMT
    67                           ; 
    68                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     _TX4REG	set	3812
   101   000000                     _RC4STAbits	set	3815
   102   000000                     _SP4BRGH	set	3814
   103   000000                     _T0CON0bits	set	4053
   104   000000                     _T0CON1bits	set	4054
   105   000000                     _TMR0H	set	4052
   106   000000                     _TRISGbits	set	3975
   107   000000                     _TRISEbits	set	3973
   108   000000                     _LATFbits	set	3966
   109   000000                     _TRISFbits	set	3974
   110   000000                     _LATG	set	3967
   111   000000                     _LATE	set	3965
   112   000000                     _SSP2CON2bits	set	3802
   113   000000                     _LATGbits	set	3967
   114   000000                     _LATEbits	set	3965
   115   000000                     _RX4PPS	set	3605
   116   000000                     _SSP2CLKPPS	set	3612
   117   000000                     _SSP2DATPPS	set	3613
   118   000000                     _ANSELDbits	set	3751
   119   000000                     _ANSELFbits	set	3764
   120   000000                     _LATDbits	set	3964
   121   000000                     _LATHbits	set	3968
   122   000000                     _TRISDbits	set	3972
   123   000000                     _TRISHbits	set	3976
   124   000000                     _PORTFbits	set	3982
   125   000000                     _PWM7DCH	set	4000
   126   000000                     _PWM6DCH	set	4003
   127   000000                     _TRISCbits	set	3971
   128   000000                     _SSP2BUF	set	3797
   129   000000                     _SSP2ADD	set	3798
   130   000000                     _SSP2CON1bits	set	3801
   131   000000                     _RC4REG	set	3811
   132   000000                     _SP4BRGL	set	3813
   133   000000                     _TX4STAbits	set	3816
   134   000000                     _BAUD4CONbits	set	3817
   135   000000                     _LATCbits	set	3963
   136   000000                     _SSP2CON2	set	3802
   137   000000                     _SSP2STAT	set	3800
   138   000000                     _IPR0bits	set	3615
   139   000000                     _PIE0bits	set	3625
   140   000000                     _RC7PPS	set	3689
   141   000000                     _RD5PPS	set	3695
   142   000000                     _RE2PPS	set	3700
   143   000000                     _RD6PPS	set	3696
   144   000000                     _PWM6CONbits	set	4004
   145   000000                     _T2PR	set	4028
   146   000000                     _T2CONbits	set	4029
   147   000000                     _INTCONbits	set	4082
   148   000000                     _PWM7CONbits	set	4001
   149   000000                     _TMR0L	set	4051
   150   000000                     _T2CLKCONbits	set	4031
   151   000000                     _T2HLTbits	set	4030
   152   000000                     _PIE2bits	set	3627
   153   000000                     _PIR0bits	set	3635
   154   000000                     _IPR2bits	set	3617
   155   000000                     _PIR2bits	set	3637
   156   000000                     _PIR4bits	set	3639
   157   000000                     _RC0PPS	set	3682
   158                           
   159                           	psect	smallconst
   160   000E00                     __psmallconst:
   161                           	callstack 0
   162   000E00  00                 	db	0
   163   000E01                     STR_2:
   164                           
   165                           ; BSR set to: 14
   166   000E01  25                 	db	37
   167   000E02  64                 	db	100	;'d'
   168   000E03  20                 	db	32
   169   000E04  25                 	db	37
   170   000E05  64                 	db	100	;'d'
   171   000E06  20                 	db	32
   172   000E07  25                 	db	37
   173   000E08  64                 	db	100	;'d'
   174   000E09  20                 	db	32
   175   000E0A  25                 	db	37
   176   000E0B  64                 	db	100	;'d'
   177   000E0C  20                 	db	32
   178   000E0D  25                 	db	37
   179   000E0E  64                 	db	100	;'d'
   180   000E0F  20                 	db	32
   181   000E10  0D                 	db	13
   182   000E11  0A                 	db	10
   183   000E12  00                 	db	0
   184   000E13  00                 	db	0	; dummy byte at the end
   185   000000                     
   186                           ; #config settings
   187                           
   188                           	psect	cinit
   189   0028AC                     __pcinit:
   190                           	callstack 0
   191   0028AC                     start_initialization:
   192                           	callstack 0
   193   0028AC                     __initialization:
   194                           	callstack 0
   195                           
   196                           ; Clear objects allocated to BANK2 (112 bytes)
   197   0028AC  EE02  F000         	lfsr	0,__pbssBANK2
   198   0028B0  0E70               	movlw	112
   199   0028B2                     clear_0:
   200   0028B2  6AEE               	clrf	postinc0,c
   201   0028B4  06E8               	decf	wreg,f,c
   202   0028B6  E1FD               	bnz	clear_0
   203                           
   204                           ; Clear objects allocated to BANK1 (14 bytes)
   205   0028B8  EE01  F0EA         	lfsr	0,__pbssBANK1
   206   0028BC  0E0E               	movlw	14
   207   0028BE                     clear_1:
   208   0028BE  6AEE               	clrf	postinc0,c
   209   0028C0  06E8               	decf	wreg,f,c
   210   0028C2  E1FD               	bnz	clear_1
   211                           
   212                           ; Clear objects allocated to BANK0 (1 bytes)
   213   0028C4  0100               	movlb	0
   214   0028C6  6BFF               	clrf	__pbssBANK0& (0+255),b
   215   0028C8                     end_of_initialization:
   216                           	callstack 0
   217   0028C8                     __end_of__initialization:
   218                           	callstack 0
   219   0028C8  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   220   0028CA  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   221   0028CC  0100               	movlb	0
   222   0028CE  EF0A  F007         	goto	_main	;jump to C main() function
   223                           
   224                           	psect	bssBANK0
   225   0000FF                     __pbssBANK0:
   226                           	callstack 0
   227   0000FF                     _RxBufWriteCnt:
   228                           	callstack 0
   229   0000FF                     	ds	1
   230                           
   231                           	psect	bssBANK1
   232   0001EA                     __pbssBANK1:
   233                           	callstack 0
   234   0001EA                     _width:
   235                           	callstack 0
   236   0001EA                     	ds	2
   237   0001EC                     _prec:
   238                           	callstack 0
   239   0001EC                     	ds	2
   240   0001EE                     _time:
   241                           	callstack 0
   242   0001EE                     	ds	2
   243   0001F0                     _off_period:
   244                           	callstack 0
   245   0001F0                     	ds	2
   246   0001F2                     _on_period:
   247                           	callstack 0
   248   0001F2                     	ds	2
   249   0001F4                     _flags:
   250                           	callstack 0
   251   0001F4                     	ds	1
   252   0001F5                     _TxBufReadCnt:
   253                           	callstack 0
   254   0001F5                     	ds	1
   255   0001F6                     _TxBufWriteCnt:
   256                           	callstack 0
   257   0001F6                     	ds	1
   258   0001F7                     _RxBufReadCnt:
   259                           	callstack 0
   260   0001F7                     	ds	1
   261                           
   262                           	psect	bssBANK2
   263   000200                     __pbssBANK2:
   264                           	callstack 0
   265   000200                     _EUSART4TXbuf:
   266                           	callstack 0
   267   000200                     	ds	60
   268   00023C                     _EUSART4RXbuf:
   269                           	callstack 0
   270   00023C                     	ds	20
   271   000250                     _dbuf:
   272                           	callstack 0
   273   000250                     	ds	32
   274                           
   275                           	psect	cstackBANK1
   276   000100                     __pcstackBANK1:
   277                           	callstack 0
   278   000100                     main@readout3:
   279                           	callstack 0
   280                           
   281                           ; 100 bytes @ 0x0
   282   000100                     	ds	100
   283   000164                     main@time_path:
   284                           	callstack 0
   285                           
   286                           ; 30 bytes @ 0x64
   287   000164                     	ds	30
   288   000182                     main@color_calibrated:
   289                           	callstack 0
   290                           
   291                           ; 64 bytes @ 0x82
   292   000182                     	ds	64
   293   0001C2                     main@color_name:
   294                           	callstack 0
   295                           
   296                           ; 2 bytes @ 0xC2
   297   0001C2                     	ds	2
   298   0001C4                     main@k:
   299                           	callstack 0
   300                           
   301                           ; 2 bytes @ 0xC4
   302   0001C4                     	ds	2
   303   0001C6                     main@i:
   304                           	callstack 0
   305                           
   306                           ; 2 bytes @ 0xC6
   307   0001C6                     	ds	2
   308   0001C8                     main@RGB_recorded:
   309                           	callstack 0
   310                           
   311                           ; 8 bytes @ 0xC8
   312   0001C8                     	ds	8
   313   0001D0                     main@RGB_calibrated:
   314                           	callstack 0
   315                           
   316                           ; 8 bytes @ 0xD0
   317   0001D0                     	ds	8
   318   0001D8                     main@motorL:
   319                           	callstack 0
   320                           
   321                           ; 9 bytes @ 0xD8
   322   0001D8                     	ds	9
   323   0001E1                     main@motorR:
   324                           	callstack 0
   325                           
   326                           ; 9 bytes @ 0xE1
   327   0001E1                     	ds	9
   328                           
   329                           	psect	cstackBANK0
   330   000060                     __pcstackBANK0:
   331                           	callstack 0
   332   000060                     ?_sprintf:
   333                           	callstack 0
   334   000060                     sprintf@s:
   335                           	callstack 0
   336                           
   337                           ; 2 bytes @ 0x0
   338   000060                     	ds	2
   339   000062                     sprintf@fmt:
   340                           	callstack 0
   341                           
   342                           ; 2 bytes @ 0x2
   343   000062                     	ds	12
   344   00006E                     sprintf@ap:
   345                           	callstack 0
   346                           
   347                           ; 2 bytes @ 0xE
   348   00006E                     	ds	2
   349   000070                     sprintf@f:
   350                           	callstack 0
   351                           
   352                           ; 11 bytes @ 0x10
   353   000070                     	ds	11
   354   00007B                     main@readout2:
   355                           	callstack 0
   356                           
   357                           ; 100 bytes @ 0x1B
   358   00007B                     	ds	100
   359   0000DF                     main@color_path:
   360                           	callstack 0
   361                           
   362                           ; 30 bytes @ 0x7F
   363   0000DF                     	ds	30
   364   0000FD                     main@j:
   365                           	callstack 0
   366                           
   367                           ; 2 bytes @ 0x9D
   368   0000FD                     	ds	2
   369                           
   370                           	psect	cstackCOMRAM
   371   000001                     __pcstackCOMRAM:
   372                           	callstack 0
   373   000001                     ??_I2C_2_Master_Idle:
   374   000001                     ?_color_processor_easy:
   375                           	callstack 0
   376   000001                     ?___wmul:
   377                           	callstack 0
   378   000001                     ?___aodiv:
   379                           	callstack 0
   380   000001                     ?___aomod:
   381                           	callstack 0
   382   000001                     sendCharSerial4@charToSend:
   383                           	callstack 0
   384   000001                     color_processor_easy@rgb:
   385                           	callstack 0
   386   000001                     initDCmotorsPWM@PWMperiod:
   387                           	callstack 0
   388   000001                     ___wmul@multiplier:
   389                           	callstack 0
   390   000001                     fputc@c:
   391                           	callstack 0
   392   000001                     ___aodiv@dividend:
   393                           	callstack 0
   394   000001                     ___aomod@dividend:
   395                           	callstack 0
   396                           
   397                           ; 8 bytes @ 0x0
   398   000001                     	ds	1
   399   000002                     ??_I2C_2_Master_Read:
   400   000002                     I2C_2_Master_Write@data_byte:
   401                           	callstack 0
   402   000002                     sendStringSerial4@string:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0x1
   406   000002                     	ds	1
   407   000003                     color_writetoaddr@value:
   408                           	callstack 0
   409   000003                     I2C_2_Master_Read@ack:
   410                           	callstack 0
   411   000003                     color_processor_easy@color:
   412                           	callstack 0
   413   000003                     ___wmul@multiplicand:
   414                           	callstack 0
   415   000003                     fputc@fp:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x2
   419   000003                     	ds	1
   420   000004                     color_writetoaddr@address:
   421                           	callstack 0
   422   000004                     I2C_2_Master_Read@tmp:
   423                           	callstack 0
   424                           
   425                           ; 1 bytes @ 0x3
   426   000004                     	ds	1
   427   000005                     ??_fputc:
   428   000005                     ??_color_click_init:
   429   000005                     ?_color_read_Luminosity:
   430                           	callstack 0
   431   000005                     ?_color_read_Red:
   432                           	callstack 0
   433   000005                     ?_color_read_Green:
   434                           	callstack 0
   435   000005                     ?_color_read_Blue:
   436                           	callstack 0
   437   000005                     color_processor_easy@c:
   438                           	callstack 0
   439   000005                     ___wmul@product:
   440                           	callstack 0
   441                           
   442                           ; 2 bytes @ 0x4
   443   000005                     	ds	2
   444   000007                     ??_color_read_Luminosity:
   445   000007                     ??_color_read_Red:
   446   000007                     ??_color_read_Green:
   447   000007                     ??_color_read_Blue:
   448   000007                     ?___awdiv:
   449                           	callstack 0
   450   000007                     color_processor_easy@a:
   451                           	callstack 0
   452   000007                     ___awdiv@dividend:
   453                           	callstack 0
   454                           
   455                           ; 2 bytes @ 0x6
   456   000007                     	ds	2
   457   000009                     color_processor_easy@b:
   458                           	callstack 0
   459   000009                     ___awdiv@divisor:
   460                           	callstack 0
   461   000009                     ___aodiv@divisor:
   462                           	callstack 0
   463   000009                     ___aomod@divisor:
   464                           	callstack 0
   465                           
   466                           ; 8 bytes @ 0x8
   467   000009                     	ds	1
   468   00000A                     color_read_Luminosity@tmp:
   469                           	callstack 0
   470   00000A                     color_read_Red@tmp:
   471                           	callstack 0
   472   00000A                     color_read_Green@tmp:
   473                           	callstack 0
   474   00000A                     color_read_Blue@tmp:
   475                           	callstack 0
   476   00000A                     fputs@s:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x9
   480   00000A                     	ds	1
   481   00000B                     ___awdiv@counter:
   482                           	callstack 0
   483                           
   484                           ; 1 bytes @ 0xA
   485   00000B                     	ds	1
   486   00000C                     ___awdiv@sign:
   487                           	callstack 0
   488   00000C                     color_read@rgb:
   489                           	callstack 0
   490   00000C                     fputs@fp:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0xB
   494   00000C                     	ds	1
   495   00000D                     ___awdiv@quotient:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0xC
   499   00000D                     	ds	1
   500   00000E                     ??_color_read:
   501   00000E                     fputs@c:
   502                           	callstack 0
   503                           
   504                           ; 1 bytes @ 0xD
   505   00000E                     	ds	1
   506   00000F                     setMotorPWM@m:
   507                           	callstack 0
   508   00000F                     fputs@i:
   509                           	callstack 0
   510                           
   511                           ; 2 bytes @ 0xE
   512   00000F                     	ds	2
   513   000011                     ??_setMotorPWM:
   514   000011                     ___aodiv@counter:
   515                           	callstack 0
   516   000011                     ___aomod@counter:
   517                           	callstack 0
   518   000011                     pad@fp:
   519                           	callstack 0
   520                           
   521                           ; 2 bytes @ 0x10
   522   000011                     	ds	1
   523   000012                     ___aodiv@sign:
   524                           	callstack 0
   525   000012                     ___aomod@sign:
   526                           	callstack 0
   527                           
   528                           ; 1 bytes @ 0x11
   529   000012                     	ds	1
   530   000013                     ?_abs:
   531                           	callstack 0
   532   000013                     pad@buf:
   533                           	callstack 0
   534   000013                     abs@a:
   535                           	callstack 0
   536   000013                     ___aodiv@quotient:
   537                           	callstack 0
   538                           
   539                           ; 8 bytes @ 0x12
   540   000013                     	ds	2
   541   000015                     ??_abs:
   542   000015                     pad@p:
   543                           	callstack 0
   544                           
   545                           ; 2 bytes @ 0x14
   546   000015                     	ds	2
   547   000017                     ??_pad:
   548                           
   549                           ; 1 bytes @ 0x16
   550   000017                     	ds	1
   551   000018                     setMotorPWM@PWMduty:
   552                           	callstack 0
   553   000018                     pad@i:
   554                           	callstack 0
   555                           
   556                           ; 2 bytes @ 0x17
   557   000018                     	ds	2
   558   00001A                     stop@mL:
   559                           	callstack 0
   560   00001A                     forward@mL:
   561                           	callstack 0
   562   00001A                     reverse@mL:
   563                           	callstack 0
   564   00001A                     right_90@mL:
   565                           	callstack 0
   566   00001A                     left_90@mL:
   567                           	callstack 0
   568   00001A                     spin_180@mL:
   569                           	callstack 0
   570   00001A                     right_135@mL:
   571                           	callstack 0
   572   00001A                     left_135@mL:
   573                           	callstack 0
   574   00001A                     pad@w:
   575                           	callstack 0
   576                           
   577                           ; 2 bytes @ 0x19
   578   00001A                     	ds	2
   579   00001C                     stop@mR:
   580                           	callstack 0
   581   00001C                     forward@mR:
   582                           	callstack 0
   583   00001C                     reverse@mR:
   584                           	callstack 0
   585   00001C                     right_90@mR:
   586                           	callstack 0
   587   00001C                     left_90@mR:
   588                           	callstack 0
   589   00001C                     spin_180@mR:
   590                           	callstack 0
   591   00001C                     right_135@mR:
   592                           	callstack 0
   593   00001C                     left_135@mR:
   594                           	callstack 0
   595   00001C                     dtoa@fp:
   596                           	callstack 0
   597                           
   598                           ; 2 bytes @ 0x1B
   599   00001C                     	ds	2
   600   00001E                     ??_stop:
   601   00001E                     ??_spin_180:
   602   00001E                     ??_reverse:
   603   00001E                     ??_right_90:
   604   00001E                     ??_left_90:
   605   00001E                     ??_right_135:
   606   00001E                     ??_left_135:
   607   00001E                     forward@i:
   608                           	callstack 0
   609   00001E                     dtoa@d:
   610                           	callstack 0
   611                           
   612                           ; 8 bytes @ 0x1D
   613   00001E                     	ds	1
   614   00001F                     stop@i:
   615                           	callstack 0
   616                           
   617                           ; 2 bytes @ 0x1E
   618   00001F                     	ds	1
   619   000020                     reverse@i:
   620                           	callstack 0
   621   000020                     right_90@i:
   622                           	callstack 0
   623   000020                     left_90@i:
   624                           	callstack 0
   625   000020                     spin_180@i:
   626                           	callstack 0
   627   000020                     right_135@i:
   628                           	callstack 0
   629   000020                     left_135@i:
   630                           	callstack 0
   631                           
   632                           ; 2 bytes @ 0x1F
   633   000020                     	ds	2
   634   000022                     motor_action@color:
   635                           	callstack 0
   636                           
   637                           ; 2 bytes @ 0x21
   638   000022                     	ds	2
   639   000024                     motor_action@l:
   640                           	callstack 0
   641                           
   642                           ; 2 bytes @ 0x23
   643   000024                     	ds	2
   644   000026                     ??_dtoa:
   645   000026                     motor_action@r:
   646                           	callstack 0
   647                           
   648                           ; 2 bytes @ 0x25
   649   000026                     	ds	2
   650   000028                     ??_motor_action:
   651                           
   652                           ; 1 bytes @ 0x27
   653   000028                     	ds	6
   654   00002E                     _dtoa$2399:
   655                           	callstack 0
   656                           
   657                           ; 2 bytes @ 0x2D
   658   00002E                     	ds	2
   659   000030                     dtoa@p:
   660                           	callstack 0
   661                           
   662                           ; 2 bytes @ 0x2F
   663   000030                     	ds	2
   664   000032                     dtoa@w:
   665                           	callstack 0
   666                           
   667                           ; 2 bytes @ 0x31
   668   000032                     	ds	2
   669   000034                     dtoa@n:
   670                           	callstack 0
   671                           
   672                           ; 8 bytes @ 0x33
   673   000034                     	ds	8
   674   00003C                     dtoa@i:
   675                           	callstack 0
   676                           
   677                           ; 2 bytes @ 0x3B
   678   00003C                     	ds	2
   679   00003E                     dtoa@s:
   680                           	callstack 0
   681                           
   682                           ; 1 bytes @ 0x3D
   683   00003E                     	ds	1
   684   00003F                     vfpfcnvrt@fp:
   685                           	callstack 0
   686                           
   687                           ; 2 bytes @ 0x3E
   688   00003F                     	ds	2
   689   000041                     vfpfcnvrt@fmt:
   690                           	callstack 0
   691                           
   692                           ; 2 bytes @ 0x40
   693   000041                     	ds	2
   694   000043                     vfpfcnvrt@ap:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0x42
   698   000043                     	ds	2
   699   000045                     ??_vfpfcnvrt:
   700                           
   701                           ; 1 bytes @ 0x44
   702   000045                     	ds	2
   703   000047                     vfpfcnvrt@convarg:
   704                           	callstack 0
   705                           
   706                           ; 8 bytes @ 0x46
   707   000047                     	ds	8
   708   00004F                     vfpfcnvrt@cp:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0x4E
   712   00004F                     	ds	2
   713   000051                     ?_vfprintf:
   714                           	callstack 0
   715   000051                     vfprintf@fp:
   716                           	callstack 0
   717                           
   718                           ; 2 bytes @ 0x50
   719   000051                     	ds	2
   720   000053                     vfprintf@fmt:
   721                           	callstack 0
   722                           
   723                           ; 2 bytes @ 0x52
   724   000053                     	ds	2
   725   000055                     vfprintf@ap:
   726                           	callstack 0
   727                           
   728                           ; 2 bytes @ 0x54
   729   000055                     	ds	2
   730   000057                     vfprintf@cfmt:
   731                           	callstack 0
   732                           
   733                           ; 2 bytes @ 0x56
   734   000057                     	ds	2
   735   000059                     ??_main:
   736                           
   737                           ; 1 bytes @ 0x58
   738   000059                     	ds	2
   739   00005B                     main@color_flag:
   740                           	callstack 0
   741                           
   742                           ; 2 bytes @ 0x5A
   743   00005B                     	ds	2
   744   00005D                     main@time_return:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x5C
   748   00005D                     	ds	2
   749                           
   750 ;;
   751 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   752 ;;
   753 ;; *************** function _main *****************
   754 ;; Defined at:
   755 ;;		line 20 in file "../main.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;		None
   758 ;; Auto vars:     Size  Location     Type
   759 ;;  readout3      100    0[BANK1 ] unsigned char [100]
   760 ;;  readout2      100   27[BANK0 ] unsigned char [100]
   761 ;;  k               2  196[BANK1 ] int 
   762 ;;  i               2  198[BANK1 ] int 
   763 ;;  color_calibr   64  130[BANK1 ] int [32]
   764 ;;  time_path      30  100[BANK1 ] unsigned int [15]
   765 ;;  color_path     30  127[BANK0 ] unsigned int [15]
   766 ;;  motorR          9  225[BANK1 ] struct DC_motor
   767 ;;  motorL          9  216[BANK1 ] struct DC_motor
   768 ;;  RGB_calibrat    8  208[BANK1 ] struct RGB_val
   769 ;;  RGB_recorded    8  200[BANK1 ] struct RGB_val
   770 ;;  distance_cal    8    0        struct RGB_val
   771 ;;  color_name      2  194[BANK1 ] unsigned int 
   772 ;;  j               2  157[BANK0 ] int 
   773 ;;  time_return     2   92[COMRAM] unsigned int 
   774 ;;  home            2    0        unsigned int 
   775 ;;  color_flag      2   90[COMRAM] unsigned int 
   776 ;;  time_flag       2    0        unsigned int 
   777 ;;  PWMcycle        1    0        unsigned char 
   778 ;; Return value:  Size  Location     Type
   779 ;;                  1    wreg      void 
   780 ;; Registers used:
   781 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   788 ;;      Locals:         4     132     234       0       0       0       0       0       0       0       0       0       
      +0       0       0
   789 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   790 ;;      Totals:         6     132     234       0       0       0       0       0       0       0       0       0       
      +0       0       0
   791 ;;Total ram usage:      372 bytes
   792 ;; Hardware stack levels required when called: 9
   793 ;; This function calls:
   794 ;;		_I2C_2_Master_Init
   795 ;;		_Interrupts_init
   796 ;;		_Timer0_init
   797 ;;		_color_click_init
   798 ;;		_color_processor_easy
   799 ;;		_color_read
   800 ;;		_forward
   801 ;;		_initDCmotorsPWM
   802 ;;		_initUSART4
   803 ;;		_motor_action
   804 ;;		_sendStringSerial4
   805 ;;		_setMotorPWM
   806 ;;		_spin_180
   807 ;;		_sprintf
   808 ;;		_stop
   809 ;; This function is called by:
   810 ;;		Startup code after reset
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           	psect	text0
   815   000E14                     __ptext0:
   816                           	callstack 0
   817   000E14                     _main:
   818                           	callstack 22
   819   000E14                     
   820                           ;../main.c: 22:     color_click_init();
   821   000E14  EC72  F012         	call	_color_click_init	;wreg free
   822   000E18                     
   823                           ;../main.c: 23:     initDCmotorsPWM(20);
   824   000E18  0E00               	movlw	0
   825   000E1A  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   826   000E1C  0E14               	movlw	20
   827   000E1E  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   828   000E20  ECB3  F013         	call	_initDCmotorsPWM	;wreg free
   829   000E24                     
   830                           ;../main.c: 24:     Interrupts_init();
   831   000E24  ECB7  F014         	call	_Interrupts_init	;wreg free
   832   000E28                     
   833                           ;../main.c: 25:     Timer0_init();
   834   000E28  EC8C  F014         	call	_Timer0_init	;wreg free
   835   000E2C                     
   836                           ;../main.c: 26:     I2C_2_Master_Init();
   837   000E2C  EC2D  F014         	call	_I2C_2_Master_Init	;wreg free
   838   000E30                     
   839                           ;../main.c: 27:     initUSART4();
   840   000E30  EC9C  F014         	call	_initUSART4	;wreg free
   841   000E34                     
   842                           ;../main.c: 32:     motorL.power = 0;
   843   000E34  0E00               	movlw	0
   844   000E36  0101               	movlb	1	; () banked
   845   000E38  6FD8               	movwf	main@motorL& (0+255),b
   846   000E3A                     
   847                           ; BSR set to: 1
   848                           ;../main.c: 33:     motorL.direction = 0;
   849   000E3A  0E00               	movlw	0
   850   000E3C  6FD9               	movwf	(main@motorL+1)& (0+255),b
   851   000E3E                     
   852                           ; BSR set to: 1
   853                           ;../main.c: 34:     motorL.dutyHighByte = (unsigned char *)(&PWM6DCH);
   854   000E3E  0EA3               	movlw	163
   855   000E40  6FDA               	movwf	(main@motorL+2)& (0+255),b
   856   000E42  0E0F               	movlw	15
   857   000E44  6FDB               	movwf	(main@motorL+3)& (0+255),b
   858   000E46                     
   859                           ; BSR set to: 1
   860                           ;../main.c: 35:     motorL.dir_LAT = (unsigned char *)(&LATE);
   861   000E46  0E7D               	movlw	125
   862   000E48  6FDC               	movwf	(main@motorL+4)& (0+255),b
   863   000E4A  0E0F               	movlw	15
   864   000E4C  6FDD               	movwf	(main@motorL+5)& (0+255),b
   865   000E4E                     
   866                           ; BSR set to: 1
   867                           ;../main.c: 36:     motorL.dir_pin = 4;
   868   000E4E  0E04               	movlw	4
   869   000E50  6FDE               	movwf	(main@motorL+6)& (0+255),b
   870   000E52                     
   871                           ; BSR set to: 1
   872                           ;../main.c: 37:     motorL.PWMperiod = PWMcycle;
   873   000E52  0E00               	movlw	0
   874   000E54  6FE0               	movwf	(main@motorL+8)& (0+255),b
   875   000E56  0EC8               	movlw	200
   876   000E58  6FDF               	movwf	(main@motorL+7)& (0+255),b
   877   000E5A                     
   878                           ; BSR set to: 1
   879                           ;../main.c: 38:     motorR.power = 0;
   880   000E5A  0E00               	movlw	0
   881   000E5C  6FE1               	movwf	main@motorR& (0+255),b
   882   000E5E                     
   883                           ; BSR set to: 1
   884                           ;../main.c: 39:     motorR.direction = 0;
   885   000E5E  0E00               	movlw	0
   886   000E60  6FE2               	movwf	(main@motorR+1)& (0+255),b
   887                           
   888                           ;../main.c: 40:     motorR.dutyHighByte = (unsigned char *)(&PWM7DCH);
   889   000E62  0EA0               	movlw	160
   890   000E64  6FE3               	movwf	(main@motorR+2)& (0+255),b
   891   000E66  0E0F               	movlw	15
   892   000E68  6FE4               	movwf	(main@motorR+3)& (0+255),b
   893                           
   894                           ;../main.c: 41:     motorR.dir_LAT = (unsigned char *)(&LATG);
   895   000E6A  0E7F               	movlw	127
   896   000E6C  6FE5               	movwf	(main@motorR+4)& (0+255),b
   897   000E6E  0E0F               	movlw	15
   898   000E70  6FE6               	movwf	(main@motorR+5)& (0+255),b
   899   000E72                     
   900                           ; BSR set to: 1
   901                           ;../main.c: 42:     motorR.dir_pin = 6;
   902   000E72  0E06               	movlw	6
   903   000E74  6FE7               	movwf	(main@motorR+6)& (0+255),b
   904   000E76                     
   905                           ; BSR set to: 1
   906                           ;../main.c: 43:     motorR.PWMperiod = PWMcycle;
   907   000E76  0E00               	movlw	0
   908   000E78  6FE9               	movwf	(main@motorR+8)& (0+255),b
   909   000E7A  0EC8               	movlw	200
   910   000E7C  6FE8               	movwf	(main@motorR+7)& (0+255),b
   911   000E7E                     
   912                           ; BSR set to: 1
   913                           ;../main.c: 44:     setMotorPWM(&motorL);
   914   000E7E  0ED8               	movlw	low main@motorL
   915   000E80  6E0F               	movwf	setMotorPWM@m^0,c
   916   000E82  0E01               	movlw	high main@motorL
   917   000E84  6E10               	movwf	(setMotorPWM@m+1)^0,c
   918   000E86  ECA4  F00A         	call	_setMotorPWM	;wreg free
   919   000E8A                     
   920                           ;../main.c: 45:     setMotorPWM(&motorR);
   921   000E8A  0EE1               	movlw	low main@motorR
   922   000E8C  6E0F               	movwf	setMotorPWM@m^0,c
   923   000E8E  0E01               	movlw	high main@motorR
   924   000E90  6E10               	movwf	(setMotorPWM@m+1)^0,c
   925   000E92  ECA4  F00A         	call	_setMotorPWM	;wreg free
   926   000E96                     l190:
   927   000E96  B68E               	btfsc	142,3,c	;volatile
   928   000E98  EF50  F007         	goto	u1561
   929   000E9C  EF52  F007         	goto	u1560
   930   000EA0                     u1561:
   931   000EA0  EF4B  F007         	goto	l190
   932   000EA4                     u1560:
   933   000EA4                     
   934                           ;../main.c: 81:         for (int i=0;i<8;i++){
   935   000EA4  0E00               	movlw	0
   936   000EA6  0101               	movlb	1	; () banked
   937   000EA8  6FC7               	movwf	(main@i+1)& (0+255),b
   938   000EAA  0E00               	movlw	0
   939   000EAC  6FC6               	movwf	main@i& (0+255),b
   940   000EAE                     l2840:
   941                           
   942                           ; BSR set to: 1
   943                           ;../main.c: 82:             color_read(&RGB_calibrated);
   944   000EAE  0ED0               	movlw	low main@RGB_calibrated
   945   000EB0  6E0C               	movwf	color_read@rgb^0,c
   946   000EB2  0E01               	movlw	high main@RGB_calibrated
   947   000EB4  6E0D               	movwf	(color_read@rgb+1)^0,c
   948   000EB6  EC6E  F00F         	call	_color_read	;wreg free
   949   000EBA                     
   950                           ;../main.c: 83:             color_calibrated[4*i] = RGB_calibrated.L;
   951   000EBA  C1C6  F059         	movff	main@i,??_main
   952   000EBE  C1C7  F05A         	movff	main@i+1,??_main+1
   953   000EC2  90D8               	bcf	status,0,c
   954   000EC4  3659               	rlcf	??_main^0,f,c
   955   000EC6  365A               	rlcf	(??_main+1)^0,f,c
   956   000EC8  90D8               	bcf	status,0,c
   957   000ECA  3659               	rlcf	??_main^0,f,c
   958   000ECC  365A               	rlcf	(??_main+1)^0,f,c
   959   000ECE  90D8               	bcf	status,0,c
   960   000ED0  3659               	rlcf	??_main^0,f,c
   961   000ED2  365A               	rlcf	(??_main+1)^0,f,c
   962   000ED4  0E82               	movlw	low main@color_calibrated
   963   000ED6  2459               	addwf	??_main^0,w,c
   964   000ED8  6ED9               	movwf	fsr2l,c
   965   000EDA  0E01               	movlw	high main@color_calibrated
   966   000EDC  205A               	addwfc	(??_main+1)^0,w,c
   967   000EDE  6EDA               	movwf	fsr2h,c
   968   000EE0  C1D0  FFDE         	movff	main@RGB_calibrated,postinc2
   969   000EE4  C1D1  FFDD         	movff	main@RGB_calibrated+1,postdec2
   970   000EE8                     
   971                           ;../main.c: 84:             color_calibrated[4*i+1] = RGB_calibrated.R;
   972   000EE8  C1C6  F059         	movff	main@i,??_main
   973   000EEC  C1C7  F05A         	movff	main@i+1,??_main+1
   974   000EF0  90D8               	bcf	status,0,c
   975   000EF2  3659               	rlcf	??_main^0,f,c
   976   000EF4  365A               	rlcf	(??_main+1)^0,f,c
   977   000EF6  90D8               	bcf	status,0,c
   978   000EF8  3659               	rlcf	??_main^0,f,c
   979   000EFA  365A               	rlcf	(??_main+1)^0,f,c
   980   000EFC  90D8               	bcf	status,0,c
   981   000EFE  3659               	rlcf	??_main^0,f,c
   982   000F00  365A               	rlcf	(??_main+1)^0,f,c
   983   000F02  0E02               	movlw	2
   984   000F04  2659               	addwf	??_main^0,f,c
   985   000F06  0E00               	movlw	0
   986   000F08  225A               	addwfc	(??_main+1)^0,f,c
   987   000F0A  0E82               	movlw	low main@color_calibrated
   988   000F0C  2459               	addwf	??_main^0,w,c
   989   000F0E  6ED9               	movwf	fsr2l,c
   990   000F10  0E01               	movlw	high main@color_calibrated
   991   000F12  205A               	addwfc	(??_main+1)^0,w,c
   992   000F14  6EDA               	movwf	fsr2h,c
   993   000F16  C1D2  FFDE         	movff	main@RGB_calibrated+2,postinc2
   994   000F1A  C1D3  FFDD         	movff	main@RGB_calibrated+3,postdec2
   995   000F1E                     
   996                           ;../main.c: 85:             color_calibrated[4*i+2] = RGB_calibrated.G;
   997   000F1E  C1C6  F059         	movff	main@i,??_main
   998   000F22  C1C7  F05A         	movff	main@i+1,??_main+1
   999   000F26  90D8               	bcf	status,0,c
  1000   000F28  3659               	rlcf	??_main^0,f,c
  1001   000F2A  365A               	rlcf	(??_main+1)^0,f,c
  1002   000F2C  90D8               	bcf	status,0,c
  1003   000F2E  3659               	rlcf	??_main^0,f,c
  1004   000F30  365A               	rlcf	(??_main+1)^0,f,c
  1005   000F32  90D8               	bcf	status,0,c
  1006   000F34  3659               	rlcf	??_main^0,f,c
  1007   000F36  365A               	rlcf	(??_main+1)^0,f,c
  1008   000F38  0E04               	movlw	4
  1009   000F3A  2659               	addwf	??_main^0,f,c
  1010   000F3C  0E00               	movlw	0
  1011   000F3E  225A               	addwfc	(??_main+1)^0,f,c
  1012   000F40  0E82               	movlw	low main@color_calibrated
  1013   000F42  2459               	addwf	??_main^0,w,c
  1014   000F44  6ED9               	movwf	fsr2l,c
  1015   000F46  0E01               	movlw	high main@color_calibrated
  1016   000F48  205A               	addwfc	(??_main+1)^0,w,c
  1017   000F4A  6EDA               	movwf	fsr2h,c
  1018   000F4C  C1D4  FFDE         	movff	main@RGB_calibrated+4,postinc2
  1019   000F50  C1D5  FFDD         	movff	main@RGB_calibrated+5,postdec2
  1020   000F54                     
  1021                           ;../main.c: 86:             color_calibrated[4*i+3] = RGB_calibrated.B;
  1022   000F54  C1C6  F059         	movff	main@i,??_main
  1023   000F58  C1C7  F05A         	movff	main@i+1,??_main+1
  1024   000F5C  90D8               	bcf	status,0,c
  1025   000F5E  3659               	rlcf	??_main^0,f,c
  1026   000F60  365A               	rlcf	(??_main+1)^0,f,c
  1027   000F62  90D8               	bcf	status,0,c
  1028   000F64  3659               	rlcf	??_main^0,f,c
  1029   000F66  365A               	rlcf	(??_main+1)^0,f,c
  1030   000F68  90D8               	bcf	status,0,c
  1031   000F6A  3659               	rlcf	??_main^0,f,c
  1032   000F6C  365A               	rlcf	(??_main+1)^0,f,c
  1033   000F6E  0E06               	movlw	6
  1034   000F70  2659               	addwf	??_main^0,f,c
  1035   000F72  0E00               	movlw	0
  1036   000F74  225A               	addwfc	(??_main+1)^0,f,c
  1037   000F76  0E82               	movlw	low main@color_calibrated
  1038   000F78  2459               	addwf	??_main^0,w,c
  1039   000F7A  6ED9               	movwf	fsr2l,c
  1040   000F7C  0E01               	movlw	high main@color_calibrated
  1041   000F7E  205A               	addwfc	(??_main+1)^0,w,c
  1042   000F80  6EDA               	movwf	fsr2h,c
  1043   000F82  C1D6  FFDE         	movff	main@RGB_calibrated+6,postinc2
  1044   000F86  C1D7  FFDD         	movff	main@RGB_calibrated+7,postdec2
  1045   000F8A                     
  1046                           ;../main.c: 87:             LATHbits.LATH3 = 1;
  1047   000F8A  8680               	bsf	128,3,c	;volatile
  1048   000F8C                     
  1049                           ;../main.c: 89:             char readout2[100];;../main.c: 90:             sprintf(reado
      +                          ut2,"%d %d %d %d \r\n", RGB_calibrated.L,RGB_calibrated.R,RGB_calibrated.G,RGB_calibrate
      +                          d.B);
  1050   000F8C  0E7B               	movlw	low main@readout2
  1051   000F8E  0100               	movlb	0	; () banked
  1052   000F90  6F60               	movwf	sprintf@s& (0+255),b
  1053   000F92  0E00               	movlw	high main@readout2
  1054   000F94  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1055   000F96  0E04               	movlw	low (STR_2+3)
  1056   000F98  6F62               	movwf	sprintf@fmt& (0+255),b
  1057   000F9A  0E0E               	movlw	high (STR_2+3)
  1058   000F9C  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1059   000F9E  C1D0  F064         	movff	main@RGB_calibrated,?_sprintf+4
  1060   000FA2  C1D1  F065         	movff	main@RGB_calibrated+1,?_sprintf+5
  1061   000FA6  C1D2  F066         	movff	main@RGB_calibrated+2,?_sprintf+6
  1062   000FAA  C1D3  F067         	movff	main@RGB_calibrated+3,?_sprintf+7
  1063   000FAE  C1D4  F068         	movff	main@RGB_calibrated+4,?_sprintf+8
  1064   000FB2  C1D5  F069         	movff	main@RGB_calibrated+5,?_sprintf+9
  1065   000FB6  C1D6  F06A         	movff	main@RGB_calibrated+6,?_sprintf+10
  1066   000FBA  C1D7  F06B         	movff	main@RGB_calibrated+7,?_sprintf+11
  1067   000FBE  EC9F  F012         	call	_sprintf	;wreg free
  1068   000FC2                     
  1069                           ;../main.c: 91:             sendStringSerial4(readout2);
  1070   000FC2  0E7B               	movlw	low main@readout2
  1071   000FC4  6E02               	movwf	sendStringSerial4@string^0,c
  1072   000FC6  0E00               	movlw	high main@readout2
  1073   000FC8  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1074   000FCA  EC15  F014         	call	_sendStringSerial4	;wreg free
  1075   000FCE                     
  1076                           ;../main.c: 92:             _delay((unsigned long)((2000)*(64000000/4000.0)));
  1077   000FCE  0EA3               	movlw	163
  1078   000FD0  6E5A               	movwf	(??_main+1)^0,c
  1079   000FD2  0E57               	movlw	87
  1080   000FD4  6E59               	movwf	??_main^0,c
  1081   000FD6  0E02               	movlw	2
  1082   000FD8                     u1687:
  1083   000FD8  2EE8               	decfsz	wreg,f,c
  1084   000FDA  D7FE               	bra	u1687
  1085   000FDC  2E59               	decfsz	??_main^0,f,c
  1086   000FDE  D7FC               	bra	u1687
  1087   000FE0  2E5A               	decfsz	(??_main+1)^0,f,c
  1088   000FE2  D7FA               	bra	u1687
  1089   000FE4  D000               	nop2	
  1090   000FE6                     
  1091                           ;../main.c: 93:             LATHbits.LATH3 = 0;
  1092   000FE6  9680               	bcf	128,3,c	;volatile
  1093   000FE8                     
  1094                           ;../main.c: 94:             _delay((unsigned long)((2000)*(64000000/4000.0)));
  1095   000FE8  0EA3               	movlw	163
  1096   000FEA  6E5A               	movwf	(??_main+1)^0,c
  1097   000FEC  0E57               	movlw	87
  1098   000FEE  6E59               	movwf	??_main^0,c
  1099   000FF0  0E02               	movlw	2
  1100   000FF2                     u1697:
  1101   000FF2  2EE8               	decfsz	wreg,f,c
  1102   000FF4  D7FE               	bra	u1697
  1103   000FF6  2E59               	decfsz	??_main^0,f,c
  1104   000FF8  D7FC               	bra	u1697
  1105   000FFA  2E5A               	decfsz	(??_main+1)^0,f,c
  1106   000FFC  D7FA               	bra	u1697
  1107   000FFE  D000               	nop2	
  1108   001000                     
  1109                           ;../main.c: 95:         }
  1110   001000  0101               	movlb	1	; () banked
  1111   001002  4BC6               	infsnz	main@i& (0+255),f,b
  1112   001004  2BC7               	incf	(main@i+1)& (0+255),f,b
  1113   001006                     
  1114                           ; BSR set to: 1
  1115   001006  BFC7               	btfsc	(main@i+1)& (0+255),7,b
  1116   001008  EF0F  F008         	goto	u1571
  1117   00100C  51C7               	movf	(main@i+1)& (0+255),w,b
  1118   00100E  E109               	bnz	u1570
  1119   001010  0E08               	movlw	8
  1120   001012  5DC6               	subwf	main@i& (0+255),w,b
  1121   001014  A0D8               	btfss	status,0,c
  1122   001016  EF0F  F008         	goto	u1571
  1123   00101A  EF11  F008         	goto	u1570
  1124   00101E                     u1571:
  1125   00101E  EF57  F007         	goto	l2840
  1126   001022                     u1570:
  1127   001022                     l2866:
  1128   001022  0E01               	movlw	1
  1129   001024  A68E               	btfss	142,3,c	;volatile
  1130   001026  0E00               	movlw	0
  1131   001028  A48E               	btfss	142,2,c	;volatile
  1132   00102A  0E00               	movlw	0
  1133   00102C  B0E8               	btfsc	wreg,0,c
  1134   00102E  EF1B  F008         	goto	u1581
  1135   001032  EF1F  F008         	goto	u1580
  1136   001036                     u1581:
  1137   001036  6A59               	clrf	??_main^0,c
  1138   001038  2A59               	incf	??_main^0,f,c
  1139   00103A  EF20  F008         	goto	u1588
  1140   00103E                     u1580:
  1141   00103E  6A59               	clrf	??_main^0,c
  1142   001040                     u1588:
  1143   001040  5059               	movf	??_main^0,w,c
  1144   001042  A4D8               	btfss	status,2,c
  1145   001044  EF26  F008         	goto	u1591
  1146   001048  EF28  F008         	goto	u1590
  1147   00104C                     u1591:
  1148   00104C  EF11  F008         	goto	l2866
  1149   001050                     u1590:
  1150   001050                     
  1151                           ;../main.c: 99:         if (!PORTFbits.RF2){LATDbits.LATD7 = 1;}
  1152   001050  B48E               	btfsc	142,2,c	;volatile
  1153   001052  EF2D  F008         	goto	u1601
  1154   001056  EF2F  F008         	goto	u1600
  1155   00105A                     u1601:
  1156   00105A  EF32  F008         	goto	l198
  1157   00105E                     u1600:
  1158   00105E  8E7C               	bsf	124,7,c	;volatile
  1159   001060  EFDF  F008         	goto	l2904
  1160   001064                     l198:
  1161   001064  8680               	bsf	128,3,c	;volatile
  1162   001066  EFDF  F008         	goto	l2904
  1163   00106A                     l2870:
  1164                           
  1165                           ; BSR set to: 1
  1166                           ;../main.c: 104:             time = 0;
  1167   00106A  0E00               	movlw	0
  1168   00106C  6FEF               	movwf	(_time+1)& (0+255),b
  1169   00106E  0E00               	movlw	0
  1170   001070  6FEE               	movwf	_time& (0+255),b
  1171   001072                     
  1172                           ; BSR set to: 1
  1173                           ;../main.c: 105:             forward(&motorL,&motorR);
  1174   001072  0ED8               	movlw	low main@motorL
  1175   001074  6E1A               	movwf	forward@mL^0,c
  1176   001076  0E01               	movlw	high main@motorL
  1177   001078  6E1B               	movwf	(forward@mL+1)^0,c
  1178   00107A  0EE1               	movlw	low main@motorR
  1179   00107C  6E1C               	movwf	forward@mR^0,c
  1180   00107E  0E01               	movlw	high main@motorR
  1181   001080  6E1D               	movwf	(forward@mR+1)^0,c
  1182   001082  ECF0  F011         	call	_forward	;wreg free
  1183   001086                     
  1184                           ;../main.c: 106:             color_read(&RGB_recorded);
  1185   001086  0EC8               	movlw	low main@RGB_recorded
  1186   001088  6E0C               	movwf	color_read@rgb^0,c
  1187   00108A  0E01               	movlw	high main@RGB_recorded
  1188   00108C  6E0D               	movwf	(color_read@rgb+1)^0,c
  1189   00108E  EC6E  F00F         	call	_color_read	;wreg free
  1190   001092                     
  1191                           ;../main.c: 107:             if (&RGB_recorded.L>color_calibrated[8]){
  1192   001092  0EC8               	movlw	low main@RGB_recorded
  1193   001094  6E59               	movwf	??_main^0,c
  1194   001096  0E01               	movlw	high main@RGB_recorded
  1195   001098  6E5A               	movwf	(??_main+1)^0,c
  1196   00109A  5059               	movf	??_main^0,w,c
  1197   00109C  0101               	movlb	1	; () banked
  1198   00109E  5D92               	subwf	(main@color_calibrated+16)& (0+255),w,b
  1199   0010A0  505A               	movf	(??_main+1)^0,w,c
  1200   0010A2  5993               	subwfb	(main@color_calibrated+17)& (0+255),w,b
  1201   0010A4  B0D8               	btfsc	status,0,c
  1202   0010A6  EF57  F008         	goto	u1611
  1203   0010AA  EF59  F008         	goto	u1610
  1204   0010AE                     u1611:
  1205   0010AE  EFD3  F008         	goto	l2902
  1206   0010B2                     u1610:
  1207   0010B2                     
  1208                           ; BSR set to: 1
  1209                           ;../main.c: 108:                 stop(&motorL,&motorR);
  1210   0010B2  0ED8               	movlw	low main@motorL
  1211   0010B4  6E1A               	movwf	stop@mL^0,c
  1212   0010B6  0E01               	movlw	high main@motorL
  1213   0010B8  6E1B               	movwf	(stop@mL+1)^0,c
  1214   0010BA  0EE1               	movlw	low main@motorR
  1215   0010BC  6E1C               	movwf	stop@mR^0,c
  1216   0010BE  0E01               	movlw	high main@motorR
  1217   0010C0  6E1D               	movwf	(stop@mR+1)^0,c
  1218   0010C2  ECA9  F011         	call	_stop	;wreg free
  1219   0010C6                     
  1220                           ;../main.c: 109:                 color_read(&RGB_recorded);
  1221   0010C6  0EC8               	movlw	low main@RGB_recorded
  1222   0010C8  6E0C               	movwf	color_read@rgb^0,c
  1223   0010CA  0E01               	movlw	high main@RGB_recorded
  1224   0010CC  6E0D               	movwf	(color_read@rgb+1)^0,c
  1225   0010CE  EC6E  F00F         	call	_color_read	;wreg free
  1226   0010D2                     
  1227                           ;../main.c: 110:                 if (LATDbits.LATD7){color_name = color_processor_easy(&
      +                          RGB_recorded);}
  1228   0010D2  AE7C               	btfss	124,7,c	;volatile
  1229   0010D4  EF6E  F008         	goto	u1621
  1230   0010D8  EF70  F008         	goto	u1620
  1231   0010DC                     u1621:
  1232   0010DC  EF7A  F008         	goto	l2886
  1233   0010E0                     u1620:
  1234   0010E0  0EC8               	movlw	low main@RGB_recorded
  1235   0010E2  6E01               	movwf	color_processor_easy@rgb^0,c
  1236   0010E4  0E01               	movlw	high main@RGB_recorded
  1237   0010E6  6E02               	movwf	(color_processor_easy@rgb+1)^0,c
  1238   0010E8  EC0F  F00F         	call	_color_processor_easy	;wreg free
  1239   0010EC  C001  F1C2         	movff	?_color_processor_easy,main@color_name
  1240   0010F0  C002  F1C3         	movff	?_color_processor_easy+1,main@color_name+1
  1241   0010F4                     l2886:
  1242                           
  1243                           ;../main.c: 112:                 color_path[j] = color_name;
  1244   0010F4  90D8               	bcf	status,0,c
  1245   0010F6  0100               	movlb	0	; () banked
  1246   0010F8  35FD               	rlcf	main@j& (0+255),w,b
  1247   0010FA  6ED9               	movwf	fsr2l,c
  1248   0010FC  35FE               	rlcf	(main@j+1)& (0+255),w,b
  1249   0010FE  6EDA               	movwf	fsr2h,c
  1250   001100  0EDF               	movlw	low main@color_path
  1251   001102  26D9               	addwf	fsr2l,f,c
  1252   001104  0E00               	movlw	high main@color_path
  1253   001106  22DA               	addwfc	fsr2h,f,c
  1254   001108  C1C2  FFDE         	movff	main@color_name,postinc2
  1255   00110C  C1C3  FFDD         	movff	main@color_name+1,postdec2
  1256   001110                     
  1257                           ; BSR set to: 0
  1258                           ;../main.c: 113:                 time_path[j] = time;
  1259   001110  90D8               	bcf	status,0,c
  1260   001112  35FD               	rlcf	main@j& (0+255),w,b
  1261   001114  6ED9               	movwf	fsr2l,c
  1262   001116  35FE               	rlcf	(main@j+1)& (0+255),w,b
  1263   001118  6EDA               	movwf	fsr2h,c
  1264   00111A  0E64               	movlw	low main@time_path
  1265   00111C  26D9               	addwf	fsr2l,f,c
  1266   00111E  0E01               	movlw	high main@time_path
  1267   001120  22DA               	addwfc	fsr2h,f,c
  1268   001122  C1EE  FFDE         	movff	_time,postinc2
  1269   001126  C1EF  FFDD         	movff	_time+1,postdec2
  1270   00112A                     
  1271                           ; BSR set to: 0
  1272                           ;../main.c: 116:                 char readout3[100];;../main.c: 117:                 spr
      +                          intf(readout3,"%d %d %d %d %d \r\n", color_name,RGB_recorded.L,RGB_recorded.R,RGB_record
      +                          ed.G,RGB_recorded.B);
  1273   00112A  0E00               	movlw	low main@readout3
  1274   00112C  6F60               	movwf	sprintf@s& (0+255),b
  1275   00112E  0E01               	movlw	high main@readout3
  1276   001130  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1277   001132  0E01               	movlw	low STR_2
  1278   001134  6F62               	movwf	sprintf@fmt& (0+255),b
  1279   001136  0E0E               	movlw	high STR_2
  1280   001138  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1281   00113A  C1C2  F064         	movff	main@color_name,?_sprintf+4
  1282   00113E  C1C3  F065         	movff	main@color_name+1,?_sprintf+5
  1283   001142  C1C8  F066         	movff	main@RGB_recorded,?_sprintf+6
  1284   001146  C1C9  F067         	movff	main@RGB_recorded+1,?_sprintf+7
  1285   00114A  C1CA  F068         	movff	main@RGB_recorded+2,?_sprintf+8
  1286   00114E  C1CB  F069         	movff	main@RGB_recorded+3,?_sprintf+9
  1287   001152  C1CC  F06A         	movff	main@RGB_recorded+4,?_sprintf+10
  1288   001156  C1CD  F06B         	movff	main@RGB_recorded+5,?_sprintf+11
  1289   00115A  C1CE  F06C         	movff	main@RGB_recorded+6,?_sprintf+12
  1290   00115E  C1CF  F06D         	movff	main@RGB_recorded+7,?_sprintf+13
  1291   001162  EC9F  F012         	call	_sprintf	;wreg free
  1292   001166                     
  1293                           ;../main.c: 118:                 sendStringSerial4(readout3);
  1294   001166  0E00               	movlw	low main@readout3
  1295   001168  6E02               	movwf	sendStringSerial4@string^0,c
  1296   00116A  0E01               	movlw	high main@readout3
  1297   00116C  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1298   00116E  EC15  F014         	call	_sendStringSerial4	;wreg free
  1299   001172                     
  1300                           ;../main.c: 120:                 motor_action(color_name,&motorL,&motorR);
  1301   001172  C1C2  F022         	movff	main@color_name,motor_action@color
  1302   001176  C1C3  F023         	movff	main@color_name+1,motor_action@color+1
  1303   00117A  0ED8               	movlw	low main@motorL
  1304   00117C  6E24               	movwf	motor_action@l^0,c
  1305   00117E  0E01               	movlw	high main@motorL
  1306   001180  6E25               	movwf	(motor_action@l+1)^0,c
  1307   001182  0EE1               	movlw	low main@motorR
  1308   001184  6E26               	movwf	motor_action@r^0,c
  1309   001186  0E01               	movlw	high main@motorR
  1310   001188  6E27               	movwf	(motor_action@r+1)^0,c
  1311   00118A  ECB3  F00D         	call	_motor_action	;wreg free
  1312   00118E                     
  1313                           ;../main.c: 122:                 j++;
  1314   00118E  0100               	movlb	0	; () banked
  1315   001190  4BFD               	infsnz	main@j& (0+255),f,b
  1316   001192  2BFE               	incf	(main@j+1)& (0+255),f,b
  1317   001194                     
  1318                           ; BSR set to: 0
  1319                           ;../main.c: 123:                 time = 0;
  1320   001194  0E00               	movlw	0
  1321   001196  0101               	movlb	1	; () banked
  1322   001198  6FEF               	movwf	(_time+1)& (0+255),b
  1323   00119A  0E00               	movlw	0
  1324   00119C  6FEE               	movwf	_time& (0+255),b
  1325   00119E                     
  1326                           ; BSR set to: 1
  1327                           ;../main.c: 124:                 color_flag = 0;
  1328   00119E  0E00               	movlw	0
  1329   0011A0  6E5C               	movwf	(main@color_flag+1)^0,c
  1330   0011A2  0E00               	movlw	0
  1331   0011A4  6E5B               	movwf	main@color_flag^0,c
  1332   0011A6                     l2902:
  1333                           
  1334                           ; BSR set to: 1
  1335                           ;../main.c: 126:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1336   0011A6  0E11               	movlw	17
  1337   0011A8  6E5A               	movwf	(??_main+1)^0,c
  1338   0011AA  0E3C               	movlw	60
  1339   0011AC  6E59               	movwf	??_main^0,c
  1340   0011AE  0ECB               	movlw	203
  1341   0011B0                     u1707:
  1342   0011B0  2EE8               	decfsz	wreg,f,c
  1343   0011B2  D7FE               	bra	u1707
  1344   0011B4  2E59               	decfsz	??_main^0,f,c
  1345   0011B6  D7FC               	bra	u1707
  1346   0011B8  2E5A               	decfsz	(??_main+1)^0,f,c
  1347   0011BA  D7FA               	bra	u1707
  1348   0011BC  F000               	nop	
  1349   0011BE                     l2904:
  1350                           
  1351                           ;../main.c: 103:         while (color_name != 8){
  1352   0011BE  0E08               	movlw	8
  1353   0011C0  0101               	movlb	1	; () banked
  1354   0011C2  19C2               	xorwf	main@color_name& (0+255),w,b
  1355   0011C4  11C3               	iorwf	(main@color_name+1)& (0+255),w,b
  1356   0011C6  A4D8               	btfss	status,2,c
  1357   0011C8  EFE8  F008         	goto	u1631
  1358   0011CC  EFEA  F008         	goto	u1630
  1359   0011D0                     u1631:
  1360   0011D0  EF35  F008         	goto	l2870
  1361   0011D4                     u1630:
  1362   0011D4                     
  1363                           ; BSR set to: 1
  1364                           ;../main.c: 130:         spin_180(&motorL,&motorR);
  1365   0011D4  0ED8               	movlw	low main@motorL
  1366   0011D6  6E1A               	movwf	spin_180@mL^0,c
  1367   0011D8  0E01               	movlw	high main@motorL
  1368   0011DA  6E1B               	movwf	(spin_180@mL+1)^0,c
  1369   0011DC  0EE1               	movlw	low main@motorR
  1370   0011DE  6E1C               	movwf	spin_180@mR^0,c
  1371   0011E0  0E01               	movlw	high main@motorR
  1372   0011E2  6E1D               	movwf	(spin_180@mR+1)^0,c
  1373   0011E4  EC65  F010         	call	_spin_180	;wreg free
  1374   0011E8                     
  1375                           ;../main.c: 131:         for (int k=0;k<15;k++){
  1376   0011E8  0E00               	movlw	0
  1377   0011EA  0101               	movlb	1	; () banked
  1378   0011EC  6FC5               	movwf	(main@k+1)& (0+255),b
  1379   0011EE  0E00               	movlw	0
  1380   0011F0  6FC4               	movwf	main@k& (0+255),b
  1381   0011F2                     l2910:
  1382                           
  1383                           ; BSR set to: 1
  1384   0011F2  BFC5               	btfsc	(main@k+1)& (0+255),7,b
  1385   0011F4  EF05  F009         	goto	u1641
  1386   0011F8  51C5               	movf	(main@k+1)& (0+255),w,b
  1387   0011FA  E109               	bnz	u1640
  1388   0011FC  0E0F               	movlw	15
  1389   0011FE  5DC4               	subwf	main@k& (0+255),w,b
  1390   001200  A0D8               	btfss	status,0,c
  1391   001202  EF05  F009         	goto	u1641
  1392   001206  EF07  F009         	goto	u1640
  1393   00120A                     u1641:
  1394   00120A  EF09  F009         	goto	l205
  1395   00120E                     u1640:
  1396   00120E  EF4B  F007         	goto	l190
  1397   001212                     l205:
  1398                           
  1399                           ; BSR set to: 1
  1400                           ;../main.c: 132:             INTCONbits.GIE = 0;
  1401   001212  9EF2               	bcf	242,7,c	;volatile
  1402   001214                     
  1403                           ; BSR set to: 1
  1404                           ;../main.c: 133:             time_return = 0;
  1405   001214  0E00               	movlw	0
  1406   001216  6E5E               	movwf	(main@time_return+1)^0,c
  1407   001218  0E00               	movlw	0
  1408   00121A  6E5D               	movwf	main@time_return^0,c
  1409   00121C                     
  1410                           ; BSR set to: 1
  1411                           ;../main.c: 134:             motor_action(color_path[k],&motorL,&motorR);
  1412   00121C  90D8               	bcf	status,0,c
  1413   00121E  35C4               	rlcf	main@k& (0+255),w,b
  1414   001220  6ED9               	movwf	fsr2l,c
  1415   001222  35C5               	rlcf	(main@k+1)& (0+255),w,b
  1416   001224  6EDA               	movwf	fsr2h,c
  1417   001226  0EDF               	movlw	low main@color_path
  1418   001228  26D9               	addwf	fsr2l,f,c
  1419   00122A  0E00               	movlw	high main@color_path
  1420   00122C  22DA               	addwfc	fsr2h,f,c
  1421   00122E  CFDE F022          	movff	postinc2,motor_action@color
  1422   001232  CFDD F023          	movff	postdec2,motor_action@color+1
  1423   001236  0ED8               	movlw	low main@motorL
  1424   001238  6E24               	movwf	motor_action@l^0,c
  1425   00123A  0E01               	movlw	high main@motorL
  1426   00123C  6E25               	movwf	(motor_action@l+1)^0,c
  1427   00123E  0EE1               	movlw	low main@motorR
  1428   001240  6E26               	movwf	motor_action@r^0,c
  1429   001242  0E01               	movlw	high main@motorR
  1430   001244  6E27               	movwf	(motor_action@r+1)^0,c
  1431   001246  ECB3  F00D         	call	_motor_action	;wreg free
  1432   00124A                     
  1433                           ;../main.c: 135:             forward(&motorL,&motorR);
  1434   00124A  0ED8               	movlw	low main@motorL
  1435   00124C  6E1A               	movwf	forward@mL^0,c
  1436   00124E  0E01               	movlw	high main@motorL
  1437   001250  6E1B               	movwf	(forward@mL+1)^0,c
  1438   001252  0EE1               	movlw	low main@motorR
  1439   001254  6E1C               	movwf	forward@mR^0,c
  1440   001256  0E01               	movlw	high main@motorR
  1441   001258  6E1D               	movwf	(forward@mR+1)^0,c
  1442   00125A  ECF0  F011         	call	_forward	;wreg free
  1443                           
  1444                           ;../main.c: 136:             while (time_return < time_path[k]) {
  1445   00125E  EF3F  F009         	goto	l2924
  1446   001262                     l2920:
  1447                           
  1448                           ; BSR set to: 1
  1449                           ;../main.c: 137:                 _delay((unsigned long)((50)*(64000000/4000.0)));
  1450   001262  0E05               	movlw	5
  1451   001264  6E5A               	movwf	(??_main+1)^0,c
  1452   001266  0E0F               	movlw	15
  1453   001268  6E59               	movwf	??_main^0,c
  1454   00126A  0EF1               	movlw	241
  1455   00126C                     u1717:
  1456   00126C  2EE8               	decfsz	wreg,f,c
  1457   00126E  D7FE               	bra	u1717
  1458   001270  2E59               	decfsz	??_main^0,f,c
  1459   001272  D7FC               	bra	u1717
  1460   001274  2E5A               	decfsz	(??_main+1)^0,f,c
  1461   001276  D7FA               	bra	u1717
  1462   001278  F000               	nop	
  1463   00127A                     
  1464                           ;../main.c: 138:                 time_return++;
  1465   00127A  4A5D               	infsnz	main@time_return^0,f,c
  1466   00127C  2A5E               	incf	(main@time_return+1)^0,f,c
  1467   00127E                     l2924:
  1468                           
  1469                           ;../main.c: 136:             while (time_return < time_path[k]) {
  1470   00127E  90D8               	bcf	status,0,c
  1471   001280  0101               	movlb	1	; () banked
  1472   001282  35C4               	rlcf	main@k& (0+255),w,b
  1473   001284  6ED9               	movwf	fsr2l,c
  1474   001286  35C5               	rlcf	(main@k+1)& (0+255),w,b
  1475   001288  6EDA               	movwf	fsr2h,c
  1476   00128A  0E64               	movlw	low main@time_path
  1477   00128C  26D9               	addwf	fsr2l,f,c
  1478   00128E  0E01               	movlw	high main@time_path
  1479   001290  22DA               	addwfc	fsr2h,f,c
  1480   001292  50DE               	movf	postinc2,w,c
  1481   001294  5C5D               	subwf	main@time_return^0,w,c
  1482   001296  50DE               	movf	postinc2,w,c
  1483   001298  585E               	subwfb	(main@time_return+1)^0,w,c
  1484   00129A  A0D8               	btfss	status,0,c
  1485   00129C  EF52  F009         	goto	u1651
  1486   0012A0  EF54  F009         	goto	u1650
  1487   0012A4                     u1651:
  1488   0012A4  EF31  F009         	goto	l2920
  1489   0012A8                     u1650:
  1490   0012A8                     
  1491                           ; BSR set to: 1
  1492                           ;../main.c: 140:             stop(&motorL,&motorR);
  1493   0012A8  0ED8               	movlw	low main@motorL
  1494   0012AA  6E1A               	movwf	stop@mL^0,c
  1495   0012AC  0E01               	movlw	high main@motorL
  1496   0012AE  6E1B               	movwf	(stop@mL+1)^0,c
  1497   0012B0  0EE1               	movlw	low main@motorR
  1498   0012B2  6E1C               	movwf	stop@mR^0,c
  1499   0012B4  0E01               	movlw	high main@motorR
  1500   0012B6  6E1D               	movwf	(stop@mR+1)^0,c
  1501   0012B8  ECA9  F011         	call	_stop	;wreg free
  1502   0012BC                     
  1503                           ;../main.c: 142:         }
  1504   0012BC  0101               	movlb	1	; () banked
  1505   0012BE  4BC4               	infsnz	main@k& (0+255),f,b
  1506   0012C0  2BC5               	incf	(main@k+1)& (0+255),f,b
  1507   0012C2  EFF9  F008         	goto	l2910
  1508   0012C6  EF1F  F000         	goto	start
  1509   0012CA                     __end_of_main:
  1510                           	callstack 0
  1511                           
  1512 ;; *************** function _stop *****************
  1513 ;; Defined at:
  1514 ;;		line 61 in file "../dc_motor.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  1517 ;;		 -> main@motorL(9), 
  1518 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  1519 ;;		 -> main@motorR(9), 
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;  i               2   30[COMRAM] int 
  1522 ;; Return value:  Size  Location     Type
  1523 ;;                  1    wreg      void 
  1524 ;; Registers used:
  1525 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1531 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1532 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1534 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1535 ;;Total ram usage:        7 bytes
  1536 ;; Hardware stack levels used: 1
  1537 ;; Hardware stack levels required when called: 3
  1538 ;; This function calls:
  1539 ;;		_setMotorPWM
  1540 ;; This function is called by:
  1541 ;;		_main
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           	psect	text1
  1546   002352                     __ptext1:
  1547                           	callstack 0
  1548   002352                     _stop:
  1549                           	callstack 27
  1550   002352                     
  1551                           ;../dc_motor.c: 61: void stop(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c: 6
      +                          2: {;../dc_motor.c: 63:     mL->direction = 0;
  1552   002352  EE20 F001          	lfsr	2,1
  1553   002356  501A               	movf	stop@mL^0,w,c
  1554   002358  26D9               	addwf	fsr2l,f,c
  1555   00235A  501B               	movf	(stop@mL+1)^0,w,c
  1556   00235C  22DA               	addwfc	fsr2h,f,c
  1557   00235E  0E00               	movlw	0
  1558   002360  6EDF               	movwf	indf2,c
  1559                           
  1560                           ;../dc_motor.c: 64:     mR->direction = 0;
  1561   002362  EE20 F001          	lfsr	2,1
  1562   002366  501C               	movf	stop@mR^0,w,c
  1563   002368  26D9               	addwf	fsr2l,f,c
  1564   00236A  501D               	movf	(stop@mR+1)^0,w,c
  1565   00236C  22DA               	addwfc	fsr2h,f,c
  1566   00236E  0E00               	movlw	0
  1567   002370  6EDF               	movwf	indf2,c
  1568   002372                     
  1569                           ;../dc_motor.c: 65:     for (int i = 5;i>0;i = i - 1)
  1570   002372  0E00               	movlw	0
  1571   002374  6E20               	movwf	(stop@i+1)^0,c
  1572   002376  0E05               	movlw	5
  1573   002378  6E1F               	movwf	stop@i^0,c
  1574   00237A                     l2758:
  1575                           
  1576                           ;../dc_motor.c: 66:     {;../dc_motor.c: 67:         mL->power = i;
  1577   00237A  C01A  FFD9         	movff	stop@mL,fsr2l
  1578   00237E  C01B  FFDA         	movff	stop@mL+1,fsr2h
  1579   002382  C01F  FFDF         	movff	stop@i,indf2
  1580                           
  1581                           ;../dc_motor.c: 68:         mR->power = i;
  1582   002386  C01C  FFD9         	movff	stop@mR,fsr2l
  1583   00238A  C01D  FFDA         	movff	stop@mR+1,fsr2h
  1584   00238E  C01F  FFDF         	movff	stop@i,indf2
  1585   002392                     
  1586                           ;../dc_motor.c: 69:         setMotorPWM(mL);
  1587   002392  C01A  F00F         	movff	stop@mL,setMotorPWM@m
  1588   002396  C01B  F010         	movff	stop@mL+1,setMotorPWM@m+1
  1589   00239A  ECA4  F00A         	call	_setMotorPWM	;wreg free
  1590   00239E                     
  1591                           ;../dc_motor.c: 70:         setMotorPWM(mR);
  1592   00239E  C01C  F00F         	movff	stop@mR,setMotorPWM@m
  1593   0023A2  C01D  F010         	movff	stop@mR+1,setMotorPWM@m+1
  1594   0023A6  ECA4  F00A         	call	_setMotorPWM	;wreg free
  1595   0023AA                     
  1596                           ;../dc_motor.c: 71:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1597   0023AA  0ED0               	movlw	208
  1598   0023AC  6E1E               	movwf	??_stop^0,c
  1599   0023AE  0ECA               	movlw	202
  1600   0023B0                     u1727:
  1601   0023B0  2EE8               	decfsz	wreg,f,c
  1602   0023B2  D7FE               	bra	u1727
  1603   0023B4  2E1E               	decfsz	??_stop^0,f,c
  1604   0023B6  D7FC               	bra	u1727
  1605   0023B8                     
  1606                           ;../dc_motor.c: 72:     }
  1607   0023B8  0EFF               	movlw	255
  1608   0023BA  241F               	addwf	stop@i^0,w,c
  1609   0023BC  6E1F               	movwf	stop@i^0,c
  1610   0023BE  0EFF               	movlw	255
  1611   0023C0  2020               	addwfc	(stop@i+1)^0,w,c
  1612   0023C2  6E20               	movwf	(stop@i+1)^0,c
  1613   0023C4  BE20               	btfsc	(stop@i+1)^0,7,c
  1614   0023C6  EFEF  F011         	goto	u1550
  1615   0023CA  5020               	movf	(stop@i+1)^0,w,c
  1616   0023CC  E106               	bnz	u1551
  1617   0023CE  041F               	decf	stop@i^0,w,c
  1618   0023D0  B0D8               	btfsc	status,0,c
  1619   0023D2  EFED  F011         	goto	u1551
  1620   0023D6  EFEF  F011         	goto	u1550
  1621   0023DA                     u1551:
  1622   0023DA  EFBD  F011         	goto	l2758
  1623   0023DE                     u1550:
  1624   0023DE  0012               	return		;funcret
  1625   0023E0                     __end_of_stop:
  1626                           	callstack 0
  1627                           
  1628 ;; *************** function _sprintf *****************
  1629 ;; Defined at:
  1630 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  s               2    0[BANK0 ] PTR unsigned char 
  1633 ;;		 -> main@readout3(100), main@readout2(100), 
  1634 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1635 ;;		 -> STR_2(18), STR_1(15), 
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;  f              11   16[BANK0 ] struct _IO_FILE
  1638 ;;  ap              2   14[BANK0 ] PTR void [1]
  1639 ;;		 -> ?_sprintf(2), 
  1640 ;;  ret             2    0        int 
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  2    0[BANK0 ] int 
  1643 ;; Registers used:
  1644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1650 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1651 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1653 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1654 ;;Total ram usage:       27 bytes
  1655 ;; Hardware stack levels used: 1
  1656 ;; Hardware stack levels required when called: 8
  1657 ;; This function calls:
  1658 ;;		_vfprintf
  1659 ;; This function is called by:
  1660 ;;		_main
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           	psect	text2
  1665   00253E                     __ptext2:
  1666                           	callstack 0
  1667   00253E                     _sprintf:
  1668                           	callstack 22
  1669   00253E  0E64               	movlw	low (?_sprintf+4)
  1670   002540  0100               	movlb	0	; () banked
  1671   002542  6F6E               	movwf	sprintf@ap& (0+255),b
  1672   002544  0E00               	movlw	high (?_sprintf+4)
  1673   002546  6F6F               	movwf	(sprintf@ap+1)& (0+255),b
  1674   002548  C060  F070         	movff	sprintf@s,sprintf@f
  1675   00254C  C061  F071         	movff	sprintf@s+1,sprintf@f+1
  1676   002550                     
  1677                           ; BSR set to: 0
  1678   002550  0E00               	movlw	0
  1679   002552  6F74               	movwf	(sprintf@f+4)& (0+255),b
  1680   002554  0E00               	movlw	0
  1681   002556  6F73               	movwf	(sprintf@f+3)& (0+255),b
  1682   002558                     
  1683                           ; BSR set to: 0
  1684   002558  0E00               	movlw	0
  1685   00255A  6F7A               	movwf	(sprintf@f+10)& (0+255),b
  1686   00255C  0E00               	movlw	0
  1687   00255E  6F79               	movwf	(sprintf@f+9)& (0+255),b
  1688   002560                     
  1689                           ; BSR set to: 0
  1690   002560  0E70               	movlw	low sprintf@f
  1691   002562  6E51               	movwf	vfprintf@fp^0,c
  1692   002564  0E00               	movlw	high sprintf@f
  1693   002566  6E52               	movwf	(vfprintf@fp+1)^0,c
  1694   002568  C062  F053         	movff	sprintf@fmt,vfprintf@fmt
  1695   00256C  C063  F054         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1696   002570  0E6E               	movlw	low sprintf@ap
  1697   002572  6E55               	movwf	vfprintf@ap^0,c
  1698   002574  0E00               	movlw	high sprintf@ap
  1699   002576  6E56               	movwf	(vfprintf@ap+1)^0,c
  1700   002578  ECC8  F012         	call	_vfprintf	;wreg free
  1701   00257C  0100               	movlb	0	; () banked
  1702   00257E  5173               	movf	(sprintf@f+3)& (0+255),w,b
  1703   002580  2560               	addwf	sprintf@s& (0+255),w,b
  1704   002582  6ED9               	movwf	fsr2l,c
  1705   002584  5174               	movf	(sprintf@f+4)& (0+255),w,b
  1706   002586  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  1707   002588  6EDA               	movwf	fsr2h,c
  1708   00258A  0E00               	movlw	0
  1709   00258C  6EDF               	movwf	indf2,c
  1710   00258E                     
  1711                           ; BSR set to: 0
  1712   00258E  0012               	return		;funcret
  1713   002590                     __end_of_sprintf:
  1714                           	callstack 0
  1715                           
  1716 ;; *************** function _vfprintf *****************
  1717 ;; Defined at:
  1718 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
  1721 ;;		 -> sprintf@f(11), 
  1722 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
  1723 ;;		 -> STR_2(18), STR_1(15), 
  1724 ;;  ap              2   84[COMRAM] PTR PTR void 
  1725 ;;		 -> sprintf@ap(2), 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  cfmt            2   86[COMRAM] PTR unsigned char 
  1728 ;;		 -> STR_2(18), STR_1(15), 
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  2   80[COMRAM] int 
  1731 ;; Registers used:
  1732 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1738 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1739 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1741 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1742 ;;Total ram usage:        8 bytes
  1743 ;; Hardware stack levels used: 1
  1744 ;; Hardware stack levels required when called: 7
  1745 ;; This function calls:
  1746 ;;		_vfpfcnvrt
  1747 ;; This function is called by:
  1748 ;;		_sprintf
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text3
  1753   002590                     __ptext3:
  1754                           	callstack 0
  1755   002590                     _vfprintf:
  1756                           	callstack 22
  1757   002590                     
  1758                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  1759   002590  C053  F057         	movff	vfprintf@fmt,vfprintf@cfmt
  1760   002594  C054  F058         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1761                           
  1762                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1763   002598  EFDC  F012         	goto	l2594
  1764   00259C                     l2592:
  1765                           
  1766                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1767   00259C  C051  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1768   0025A0  C052  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1769   0025A4  0E57               	movlw	low vfprintf@cfmt
  1770   0025A6  6E41               	movwf	vfpfcnvrt@fmt^0,c
  1771   0025A8  0E00               	movlw	high vfprintf@cfmt
  1772   0025AA  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1773   0025AC  C055  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
  1774   0025B0  C056  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1775   0025B4  EC04  F00D         	call	_vfpfcnvrt	;wreg free
  1776   0025B8                     l2594:
  1777                           
  1778                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1779   0025B8  C057  FFF6         	movff	vfprintf@cfmt,tblptrl
  1780   0025BC  C058  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1781   0025C0                     	if	0	;tblptru may be non-zero
  1782   0025C0                     	endif
  1783   0025C0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1784   0025C0  0E00               	movlw	low (__mediumconst shr (0+16))
  1785   0025C2  6EF8               	movwf	tblptru,c
  1786   0025C4                     	endif
  1787   0025C4  0008               	tblrd		*
  1788   0025C6  50F5               	movf	tablat,w,c
  1789   0025C8  0900               	iorlw	0
  1790   0025CA  A4D8               	btfss	status,2,c
  1791   0025CC  EFEA  F012         	goto	u1481
  1792   0025D0  EFEC  F012         	goto	u1480
  1793   0025D4                     u1481:
  1794   0025D4  EFCE  F012         	goto	l2592
  1795   0025D8                     u1480:
  1796   0025D8                     
  1797                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  1798   0025D8  0E00               	movlw	0
  1799   0025DA  6E52               	movwf	(?_vfprintf+1)^0,c
  1800   0025DC  0E00               	movlw	0
  1801   0025DE  6E51               	movwf	?_vfprintf^0,c
  1802   0025E0  0012               	return		;funcret
  1803   0025E2                     __end_of_vfprintf:
  1804                           	callstack 0
  1805                           
  1806 ;; *************** function _vfpfcnvrt *****************
  1807 ;; Defined at:
  1808 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
  1811 ;;		 -> sprintf@f(11), 
  1812 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
  1813 ;;		 -> vfprintf@cfmt(2), 
  1814 ;;  ap              2   66[COMRAM] PTR PTR void 
  1815 ;;		 -> sprintf@ap(2), 
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;  convarg         8   70[COMRAM] struct .
  1818 ;;  cp              2   78[COMRAM] PTR unsigned char 
  1819 ;;		 -> STR_2(18), STR_1(15), 
  1820 ;;  i               2    0        int 
  1821 ;;  done            2    0        int 
  1822 ;;  c               1    0        unsigned char 
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  1    wreg      void 
  1825 ;; Registers used:
  1826 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1832 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1833 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1834 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1835 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1836 ;;Total ram usage:       18 bytes
  1837 ;; Hardware stack levels used: 1
  1838 ;; Hardware stack levels required when called: 6
  1839 ;; This function calls:
  1840 ;;		_dtoa
  1841 ;;		_fputc
  1842 ;; This function is called by:
  1843 ;;		_vfprintf
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text4
  1848   001A08                     __ptext4:
  1849                           	callstack 0
  1850   001A08                     _vfpfcnvrt:
  1851                           	callstack 22
  1852   001A08                     
  1853                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  1854   001A08  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1855   001A0C  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1856   001A10  CFDE FFF6          	movff	postinc2,tblptrl
  1857   001A14  CFDD FFF7          	movff	postdec2,tblptrh
  1858   001A18                     	if	0	;tblptru may be non-zero
  1859   001A18                     	endif
  1860   001A18                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1861   001A18  0E00               	movlw	low (__mediumconst shr (0+16))
  1862   001A1A  6EF8               	movwf	tblptru,c
  1863   001A1C                     	endif
  1864   001A1C  0008               	tblrd		*
  1865   001A1E  50F5               	movf	tablat,w,c
  1866   001A20  0A25               	xorlw	37
  1867   001A22  A4D8               	btfss	status,2,c
  1868   001A24  EF16  F00D         	goto	u1381
  1869   001A28  EF18  F00D         	goto	u1380
  1870   001A2C                     u1381:
  1871   001A2C  EF9C  F00D         	goto	l2400
  1872   001A30                     u1380:
  1873   001A30                     
  1874                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  1875   001A30  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1876   001A34  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1877   001A38  2ADE               	incf	postinc2,f,c
  1878   001A3A  0E00               	movlw	0
  1879   001A3C  22DD               	addwfc	postdec2,f,c
  1880   001A3E                     
  1881                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  1882   001A3E  0E00               	movlw	0
  1883   001A40  0101               	movlb	1	; () banked
  1884   001A42  6FEB               	movwf	(_width+1)& (0+255),b
  1885   001A44  0E00               	movlw	0
  1886   001A46  6FEA               	movwf	_width& (0+255),b
  1887   001A48  C1EA  F1F4         	movff	_width,_flags
  1888   001A4C                     
  1889                           ; BSR set to: 1
  1890                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  1891   001A4C  69EC               	setf	_prec& (0+255),b
  1892   001A4E  69ED               	setf	(_prec+1)& (0+255),b
  1893   001A50                     
  1894                           ; BSR set to: 1
  1895                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1896   001A50  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1897   001A54  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1898   001A58  CFDE F04F          	movff	postinc2,vfpfcnvrt@cp
  1899   001A5C  CFDD F050          	movff	postdec2,vfpfcnvrt@cp+1
  1900   001A60                     
  1901                           ; BSR set to: 1
  1902                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1903   001A60  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1904   001A64  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1905   001A68                     	if	0	;tblptru may be non-zero
  1906   001A68                     	endif
  1907   001A68                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1908   001A68  0E00               	movlw	low (__mediumconst shr (0+16))
  1909   001A6A  6EF8               	movwf	tblptru,c
  1910   001A6C                     	endif
  1911   001A6C  0008               	tblrd		*
  1912   001A6E  50F5               	movf	tablat,w,c
  1913   001A70  0A64               	xorlw	100
  1914   001A72  B4D8               	btfsc	status,2,c
  1915   001A74  EF3E  F00D         	goto	u1391
  1916   001A78  EF40  F00D         	goto	u1390
  1917   001A7C                     u1391:
  1918   001A7C  EF50  F00D         	goto	l2390
  1919   001A80                     u1390:
  1920   001A80                     
  1921                           ; BSR set to: 1
  1922   001A80  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1923   001A84  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1924   001A88                     	if	0	;tblptru may be non-zero
  1925   001A88                     	endif
  1926   001A88                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1927   001A88  0E00               	movlw	low (__mediumconst shr (0+16))
  1928   001A8A  6EF8               	movwf	tblptru,c
  1929   001A8C                     	endif
  1930   001A8C  0008               	tblrd		*
  1931   001A8E  50F5               	movf	tablat,w,c
  1932   001A90  0A69               	xorlw	105
  1933   001A92  A4D8               	btfss	status,2,c
  1934   001A94  EF4E  F00D         	goto	u1401
  1935   001A98  EF50  F00D         	goto	u1400
  1936   001A9C                     u1401:
  1937   001A9C  EF93  F00D         	goto	l2396
  1938   001AA0                     u1400:
  1939   001AA0                     l2390:
  1940                           
  1941                           ; BSR set to: 1
  1942                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1943   001AA0  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1944   001AA4  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1945   001AA8  CFDF F045          	movff	indf2,??_vfpfcnvrt
  1946   001AAC  0E02               	movlw	2
  1947   001AAE  26DE               	addwf	postinc2,f,c
  1948   001AB0  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  1949   001AB4  0E00               	movlw	0
  1950   001AB6  22DD               	addwfc	postdec2,f,c
  1951   001AB8  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1952   001ABC  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1953   001AC0  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg
  1954   001AC4  CFDD F048          	movff	postdec2,vfpfcnvrt@convarg+1
  1955   001AC8  0E00               	movlw	0
  1956   001ACA  BE48               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1957   001ACC  0EFF               	movlw	-1
  1958   001ACE  6E49               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1959   001AD0  6E4A               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1960   001AD2  6E4B               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1961   001AD4  6E4C               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1962   001AD6  6E4D               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1963   001AD8  6E4E               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1964                           
  1965                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1966   001ADA  0E01               	movlw	1
  1967   001ADC  244F               	addwf	vfpfcnvrt@cp^0,w,c
  1968   001ADE  6E45               	movwf	??_vfpfcnvrt^0,c
  1969   001AE0  0E00               	movlw	0
  1970   001AE2  2050               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1971   001AE4  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  1972   001AE6  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1973   001AEA  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1974   001AEE  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  1975   001AF2  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1976   001AF6                     
  1977                           ; BSR set to: 1
  1978                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1979   001AF6  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1980   001AFA  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1981   001AFE  C047  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  1982   001B02  C048  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1983   001B06  C049  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1984   001B0A  C04A  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1985   001B0E  C04B  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1986   001B12  C04C  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1987   001B16  C04D  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1988   001B1A  C04E  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1989   001B1E  EC65  F009         	call	_dtoa	;wreg free
  1990   001B22  EFB2  F00D         	goto	l1148
  1991   001B26                     l2396:
  1992                           
  1993                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1994   001B26  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1995   001B2A  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1996   001B2E  2ADE               	incf	postinc2,f,c
  1997   001B30  0E00               	movlw	0
  1998   001B32  22DD               	addwfc	postdec2,f,c
  1999   001B34  EFB2  F00D         	goto	l1148
  2000   001B38                     l2400:
  2001                           
  2002                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2003   001B38  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2004   001B3C  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2005   001B40  CFDE FFF6          	movff	postinc2,tblptrl
  2006   001B44  CFDD FFF7          	movff	postdec2,tblptrh
  2007   001B48                     	if	0	;tblptru may be non-zero
  2008   001B48                     	endif
  2009   001B48                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2010   001B48  0E00               	movlw	low (__mediumconst shr (0+16))
  2011   001B4A  6EF8               	movwf	tblptru,c
  2012   001B4C                     	endif
  2013   001B4C  0008               	tblrd		*
  2014   001B4E  50F5               	movf	tablat,w,c
  2015   001B50  6E01               	movwf	fputc@c^0,c
  2016   001B52  6A02               	clrf	(fputc@c+1)^0,c
  2017   001B54  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2018   001B58  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2019   001B5C  EC48  F00E         	call	_fputc	;wreg free
  2020   001B60  EF93  F00D         	goto	l2396
  2021   001B64                     l1148:
  2022   001B64  0012               	return		;funcret
  2023   001B66                     __end_of_vfpfcnvrt:
  2024                           	callstack 0
  2025                           
  2026 ;; *************** function _dtoa *****************
  2027 ;; Defined at:
  2028 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2031 ;;		 -> sprintf@f(11), 
  2032 ;;  d               8   29[COMRAM] long long 
  2033 ;; Auto vars:     Size  Location     Type
  2034 ;;  n               8   51[COMRAM] long long 
  2035 ;;  i               2   59[COMRAM] int 
  2036 ;;  w               2   49[COMRAM] int 
  2037 ;;  p               2   47[COMRAM] int 
  2038 ;;  s               1   61[COMRAM] unsigned char 
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  1    wreg      void 
  2041 ;; Registers used:
  2042 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2048 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2049 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2050 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2051 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2052 ;;Total ram usage:       35 bytes
  2053 ;; Hardware stack levels used: 1
  2054 ;; Hardware stack levels required when called: 5
  2055 ;; This function calls:
  2056 ;;		___aodiv
  2057 ;;		___aomod
  2058 ;;		_abs
  2059 ;;		_pad
  2060 ;; This function is called by:
  2061 ;;		_vfpfcnvrt
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           	psect	text5
  2066   0012CA                     __ptext5:
  2067                           	callstack 0
  2068   0012CA                     _dtoa:
  2069                           	callstack 22
  2070   0012CA                     
  2071                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2072   0012CA  C01E  F034         	movff	dtoa@d,dtoa@n
  2073   0012CE  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  2074   0012D2  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  2075   0012D6  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  2076   0012DA  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  2077   0012DE  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  2078   0012E2  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  2079   0012E6  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  2080   0012EA                     
  2081                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2082   0012EA  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  2083   0012EC  EF7A  F009         	goto	u1221
  2084   0012F0  EF7D  F009         	goto	u1220
  2085   0012F4                     u1221:
  2086   0012F4  0E01               	movlw	1
  2087   0012F6  EF7E  F009         	goto	u1230
  2088   0012FA                     u1220:
  2089   0012FA  0E00               	movlw	0
  2090   0012FC                     u1230:
  2091   0012FC  6E3E               	movwf	dtoa@s^0,c
  2092   0012FE                     
  2093                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2094   0012FE  503E               	movf	dtoa@s^0,w,c
  2095   001300  B4D8               	btfsc	status,2,c
  2096   001302  EF85  F009         	goto	u1241
  2097   001306  EF87  F009         	goto	u1240
  2098   00130A                     u1241:
  2099   00130A  EF97  F009         	goto	l2288
  2100   00130E                     u1240:
  2101   00130E                     
  2102                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2103   00130E  1E3B               	comf	(dtoa@n+7)^0,f,c
  2104   001310  1E3A               	comf	(dtoa@n+6)^0,f,c
  2105   001312  1E39               	comf	(dtoa@n+5)^0,f,c
  2106   001314  1E38               	comf	(dtoa@n+4)^0,f,c
  2107   001316  1E37               	comf	(dtoa@n+3)^0,f,c
  2108   001318  1E36               	comf	(dtoa@n+2)^0,f,c
  2109   00131A  1E35               	comf	(dtoa@n+1)^0,f,c
  2110   00131C  6C34               	negf	dtoa@n^0,c
  2111   00131E  0E00               	movlw	0
  2112   001320  2235               	addwfc	(dtoa@n+1)^0,f,c
  2113   001322  2236               	addwfc	(dtoa@n+2)^0,f,c
  2114   001324  2237               	addwfc	(dtoa@n+3)^0,f,c
  2115   001326  2238               	addwfc	(dtoa@n+4)^0,f,c
  2116   001328  2239               	addwfc	(dtoa@n+5)^0,f,c
  2117   00132A  223A               	addwfc	(dtoa@n+6)^0,f,c
  2118   00132C  223B               	addwfc	(dtoa@n+7)^0,f,c
  2119   00132E                     l2288:
  2120                           
  2121                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2122   00132E  0101               	movlb	1	; () banked
  2123   001330  BFED               	btfsc	(_prec+1)& (0+255),7,b
  2124   001332  EFA5  F009         	goto	u1250
  2125   001336  51ED               	movf	(_prec+1)& (0+255),w,b
  2126   001338  E106               	bnz	u1251
  2127   00133A  05EC               	decf	_prec& (0+255),w,b
  2128   00133C  B0D8               	btfsc	status,0,c
  2129   00133E  EFA3  F009         	goto	u1251
  2130   001342  EFA5  F009         	goto	u1250
  2131   001346                     u1251:
  2132   001346  EFAB  F009         	goto	l1127
  2133   00134A                     u1250:
  2134   00134A                     
  2135                           ; BSR set to: 1
  2136   00134A  0E00               	movlw	0
  2137   00134C  6E31               	movwf	(dtoa@p+1)^0,c
  2138   00134E  0E01               	movlw	1
  2139   001350  6E30               	movwf	dtoa@p^0,c
  2140   001352  EFAF  F009         	goto	l1129
  2141   001356                     l1127:
  2142                           
  2143                           ; BSR set to: 1
  2144   001356  C1EC  F030         	movff	_prec,dtoa@p
  2145   00135A  C1ED  F031         	movff	_prec+1,dtoa@p+1
  2146   00135E                     l1129:
  2147                           
  2148                           ; BSR set to: 1
  2149                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2150   00135E  C1EA  F032         	movff	_width,dtoa@w
  2151   001362  C1EB  F033         	movff	_width+1,dtoa@w+1
  2152   001366                     
  2153                           ; BSR set to: 1
  2154                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2155   001366  503E               	movf	dtoa@s^0,w,c
  2156   001368  B4D8               	btfsc	status,2,c
  2157   00136A  EFB9  F009         	goto	u1261
  2158   00136E  EFBB  F009         	goto	u1260
  2159   001372                     u1261:
  2160   001372  EFD2  F009         	goto	l1130
  2161   001376                     u1260:
  2162   001376                     
  2163                           ; BSR set to: 1
  2164                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2165   001376  0632               	decf	dtoa@w^0,f,c
  2166   001378  A0D8               	btfss	status,0,c
  2167   00137A  0633               	decf	(dtoa@w+1)^0,f,c
  2168   00137C                     
  2169                           ; BSR set to: 1
  2170                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2171   00137C  503E               	movf	dtoa@s^0,w,c
  2172   00137E  A4D8               	btfss	status,2,c
  2173   001380  EFC4  F009         	goto	u1271
  2174   001384  EFC6  F009         	goto	u1270
  2175   001388                     u1271:
  2176   001388  EFCC  F009         	goto	l2300
  2177   00138C                     u1270:
  2178   00138C                     
  2179                           ; BSR set to: 1
  2180   00138C  0E00               	movlw	0
  2181   00138E  6E2F               	movwf	(_dtoa$2399+1)^0,c
  2182   001390  0E2B               	movlw	43
  2183   001392  6E2E               	movwf	_dtoa$2399^0,c
  2184   001394  EFD0  F009         	goto	l2302
  2185   001398                     l2300:
  2186                           
  2187                           ; BSR set to: 1
  2188   001398  0E00               	movlw	0
  2189   00139A  6E2F               	movwf	(_dtoa$2399+1)^0,c
  2190   00139C  0E2D               	movlw	45
  2191   00139E  6E2E               	movwf	_dtoa$2399^0,c
  2192   0013A0                     l2302:
  2193                           
  2194                           ; BSR set to: 1
  2195   0013A0  C02E  F03E         	movff	_dtoa$2399,dtoa@s
  2196   0013A4                     l1130:
  2197                           
  2198                           ; BSR set to: 1
  2199                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2200   0013A4  0E00               	movlw	0
  2201   0013A6  6E3D               	movwf	(dtoa@i+1)^0,c
  2202   0013A8  0E1F               	movlw	31
  2203   0013AA  6E3C               	movwf	dtoa@i^0,c
  2204   0013AC                     
  2205                           ; BSR set to: 1
  2206                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2207   0013AC  0E00               	movlw	0
  2208   0013AE  0102               	movlb	2	; () banked
  2209   0013B0  6F6F               	movwf	(_dbuf+31)& (0+255),b
  2210                           
  2211                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2212   0013B2  EF57  F00A         	goto	l2316
  2213   0013B6                     l2306:
  2214                           
  2215                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2216   0013B6  063C               	decf	dtoa@i^0,f,c
  2217   0013B8  A0D8               	btfss	status,0,c
  2218   0013BA  063D               	decf	(dtoa@i+1)^0,f,c
  2219   0013BC                     
  2220                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2221   0013BC  0E50               	movlw	low _dbuf
  2222   0013BE  243C               	addwf	dtoa@i^0,w,c
  2223   0013C0  6ED9               	movwf	fsr2l,c
  2224   0013C2  0E02               	movlw	high _dbuf
  2225   0013C4  203D               	addwfc	(dtoa@i+1)^0,w,c
  2226   0013C6  6EDA               	movwf	fsr2h,c
  2227   0013C8  C034  F001         	movff	dtoa@n,___aomod@dividend
  2228   0013CC  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  2229   0013D0  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  2230   0013D4  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  2231   0013D8  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  2232   0013DC  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  2233   0013E0  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  2234   0013E4  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  2235   0013E8  0E0A               	movlw	10
  2236   0013EA  6E09               	movwf	___aomod@divisor^0,c
  2237   0013EC  0E00               	movlw	0
  2238   0013EE  6E0A               	movwf	(___aomod@divisor+1)^0,c
  2239   0013F0  0E00               	movlw	0
  2240   0013F2  6E0B               	movwf	(___aomod@divisor+2)^0,c
  2241   0013F4  0E00               	movlw	0
  2242   0013F6  6E0C               	movwf	(___aomod@divisor+3)^0,c
  2243   0013F8  0E00               	movlw	0
  2244   0013FA  6E0D               	movwf	(___aomod@divisor+4)^0,c
  2245   0013FC  0E00               	movlw	0
  2246   0013FE  6E0E               	movwf	(___aomod@divisor+5)^0,c
  2247   001400  0E00               	movlw	0
  2248   001402  6E0F               	movwf	(___aomod@divisor+6)^0,c
  2249   001404  0E00               	movlw	0
  2250   001406  6E10               	movwf	(___aomod@divisor+7)^0,c
  2251   001408  EC52  F00C         	call	___aomod	;wreg free
  2252   00140C  C001  F026         	movff	?___aomod,??_dtoa
  2253   001410  C002  F027         	movff	?___aomod+1,??_dtoa+1
  2254   001414  C003  F028         	movff	?___aomod+2,??_dtoa+2
  2255   001418  C004  F029         	movff	?___aomod+3,??_dtoa+3
  2256   00141C  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  2257   001420  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  2258   001424  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  2259   001428  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  2260   00142C  C026  F013         	movff	??_dtoa,abs@a
  2261   001430  C027  F014         	movff	??_dtoa+1,abs@a+1
  2262   001434  ECF5  F013         	call	_abs	;wreg free
  2263   001438  5013               	movf	?_abs^0,w,c
  2264   00143A  0F30               	addlw	48
  2265   00143C  6EDF               	movwf	indf2,c
  2266   00143E                     
  2267                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2268   00143E  0630               	decf	dtoa@p^0,f,c
  2269   001440  A0D8               	btfss	status,0,c
  2270   001442  0631               	decf	(dtoa@p+1)^0,f,c
  2271   001444                     
  2272                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2273   001444  0632               	decf	dtoa@w^0,f,c
  2274   001446  A0D8               	btfss	status,0,c
  2275   001448  0633               	decf	(dtoa@w+1)^0,f,c
  2276   00144A                     
  2277                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2278   00144A  C034  F001         	movff	dtoa@n,___aodiv@dividend
  2279   00144E  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  2280   001452  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  2281   001456  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  2282   00145A  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  2283   00145E  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  2284   001462  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  2285   001466  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  2286   00146A  0E0A               	movlw	10
  2287   00146C  6E09               	movwf	___aodiv@divisor^0,c
  2288   00146E  0E00               	movlw	0
  2289   001470  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  2290   001472  0E00               	movlw	0
  2291   001474  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  2292   001476  0E00               	movlw	0
  2293   001478  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  2294   00147A  0E00               	movlw	0
  2295   00147C  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  2296   00147E  0E00               	movlw	0
  2297   001480  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  2298   001482  0E00               	movlw	0
  2299   001484  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  2300   001486  0E00               	movlw	0
  2301   001488  6E10               	movwf	(___aodiv@divisor+7)^0,c
  2302   00148A  EC8E  F00B         	call	___aodiv	;wreg free
  2303   00148E  C001  F034         	movff	?___aodiv,dtoa@n
  2304   001492  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  2305   001496  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  2306   00149A  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  2307   00149E  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  2308   0014A2  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  2309   0014A6  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  2310   0014AA  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  2311   0014AE                     l2316:
  2312                           
  2313                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2314   0014AE  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  2315   0014B0  EF62  F00A         	goto	u1281
  2316   0014B4  503D               	movf	(dtoa@i+1)^0,w,c
  2317   0014B6  E108               	bnz	u1280
  2318   0014B8  043C               	decf	dtoa@i^0,w,c
  2319   0014BA  A0D8               	btfss	status,0,c
  2320   0014BC  EF62  F00A         	goto	u1281
  2321   0014C0  EF64  F00A         	goto	u1280
  2322   0014C4                     u1281:
  2323   0014C4  EF80  F00A         	goto	l2322
  2324   0014C8                     u1280:
  2325   0014C8  5034               	movf	dtoa@n^0,w,c
  2326   0014CA  1035               	iorwf	(dtoa@n+1)^0,w,c
  2327   0014CC  1036               	iorwf	(dtoa@n+2)^0,w,c
  2328   0014CE  1037               	iorwf	(dtoa@n+3)^0,w,c
  2329   0014D0  1038               	iorwf	(dtoa@n+4)^0,w,c
  2330   0014D2  1039               	iorwf	(dtoa@n+5)^0,w,c
  2331   0014D4  103A               	iorwf	(dtoa@n+6)^0,w,c
  2332   0014D6  103B               	iorwf	(dtoa@n+7)^0,w,c
  2333   0014D8  A4D8               	btfss	status,2,c
  2334   0014DA  EF71  F00A         	goto	u1291
  2335   0014DE  EF73  F00A         	goto	u1290
  2336   0014E2                     u1291:
  2337   0014E2  EFDB  F009         	goto	l2306
  2338   0014E6                     u1290:
  2339   0014E6  BE31               	btfsc	(dtoa@p+1)^0,7,c
  2340   0014E8  EF80  F00A         	goto	u1300
  2341   0014EC  5031               	movf	(dtoa@p+1)^0,w,c
  2342   0014EE  E106               	bnz	u1301
  2343   0014F0  0430               	decf	dtoa@p^0,w,c
  2344   0014F2  B0D8               	btfsc	status,0,c
  2345   0014F4  EF7E  F00A         	goto	u1301
  2346   0014F8  EF80  F00A         	goto	u1300
  2347   0014FC                     u1301:
  2348   0014FC  EFDB  F009         	goto	l2306
  2349   001500                     u1300:
  2350   001500                     l2322:
  2351                           
  2352                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2353   001500  503E               	movf	dtoa@s^0,w,c
  2354   001502  B4D8               	btfsc	status,2,c
  2355   001504  EF86  F00A         	goto	u1311
  2356   001508  EF88  F00A         	goto	u1310
  2357   00150C                     u1311:
  2358   00150C  EF93  F00A         	goto	l2328
  2359   001510                     u1310:
  2360   001510                     
  2361                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2362   001510  063C               	decf	dtoa@i^0,f,c
  2363   001512  A0D8               	btfss	status,0,c
  2364   001514  063D               	decf	(dtoa@i+1)^0,f,c
  2365   001516                     
  2366                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2367   001516  0E50               	movlw	low _dbuf
  2368   001518  243C               	addwf	dtoa@i^0,w,c
  2369   00151A  6ED9               	movwf	fsr2l,c
  2370   00151C  0E02               	movlw	high _dbuf
  2371   00151E  203D               	addwfc	(dtoa@i+1)^0,w,c
  2372   001520  6EDA               	movwf	fsr2h,c
  2373   001522  C03E  FFDF         	movff	dtoa@s,indf2
  2374   001526                     l2328:
  2375                           
  2376                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2377   001526  C01C  F011         	movff	dtoa@fp,pad@fp
  2378   00152A  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  2379   00152E  0E50               	movlw	low _dbuf
  2380   001530  243C               	addwf	dtoa@i^0,w,c
  2381   001532  6E13               	movwf	pad@buf^0,c
  2382   001534  0E02               	movlw	high _dbuf
  2383   001536  203D               	addwfc	(dtoa@i+1)^0,w,c
  2384   001538  6E14               	movwf	(pad@buf+1)^0,c
  2385   00153A  C032  F015         	movff	dtoa@w,pad@p
  2386   00153E  C033  F016         	movff	dtoa@w+1,pad@p+1
  2387   001542  EC35  F012         	call	_pad	;wreg free
  2388   001546  0012               	return		;funcret
  2389   001548                     __end_of_dtoa:
  2390                           	callstack 0
  2391                           
  2392 ;; *************** function _pad *****************
  2393 ;; Defined at:
  2394 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  2397 ;;		 -> sprintf@f(11), 
  2398 ;;  buf             2   18[COMRAM] PTR unsigned char 
  2399 ;;		 -> dbuf(32), 
  2400 ;;  p               2   20[COMRAM] int 
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;  w               2   25[COMRAM] int 
  2403 ;;  i               2   23[COMRAM] int 
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2413 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2414 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2415 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2416 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2417 ;;Total ram usage:       11 bytes
  2418 ;; Hardware stack levels used: 1
  2419 ;; Hardware stack levels required when called: 4
  2420 ;; This function calls:
  2421 ;;		_fputc
  2422 ;;		_fputs
  2423 ;; This function is called by:
  2424 ;;		_dtoa
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           	psect	text6
  2429   00246A                     __ptext6:
  2430                           	callstack 0
  2431   00246A                     _pad:
  2432                           	callstack 22
  2433   00246A                     
  2434                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  2435   00246A  BE16               	btfsc	(pad@p+1)^0,7,c
  2436   00246C  EF3A  F012         	goto	u1111
  2437   002470  EF3C  F012         	goto	u1110
  2438   002474                     u1111:
  2439   002474  EF42  F012         	goto	l2212
  2440   002478                     u1110:
  2441   002478  C015  F01A         	movff	pad@p,pad@w
  2442   00247C  C016  F01B         	movff	pad@p+1,pad@w+1
  2443   002480  EF46  F012         	goto	l1118
  2444   002484                     l2212:
  2445   002484  0E00               	movlw	0
  2446   002486  6E1B               	movwf	(pad@w+1)^0,c
  2447   002488  0E00               	movlw	0
  2448   00248A  6E1A               	movwf	pad@w^0,c
  2449   00248C                     l1118:
  2450                           
  2451                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  2452   00248C  0E00               	movlw	0
  2453   00248E  6E19               	movwf	(pad@i+1)^0,c
  2454   002490  0E00               	movlw	0
  2455   002492  6E18               	movwf	pad@i^0,c
  2456                           
  2457                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2458   002494  EF58  F012         	goto	l2218
  2459   002498                     l2214:
  2460                           
  2461                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  2462   002498  0E00               	movlw	0
  2463   00249A  6E02               	movwf	(fputc@c+1)^0,c
  2464   00249C  0E20               	movlw	32
  2465   00249E  6E01               	movwf	fputc@c^0,c
  2466   0024A0  C011  F003         	movff	pad@fp,fputc@fp
  2467   0024A4  C012  F004         	movff	pad@fp+1,fputc@fp+1
  2468   0024A8  EC48  F00E         	call	_fputc	;wreg free
  2469   0024AC                     
  2470                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  2471   0024AC  4A18               	infsnz	pad@i^0,f,c
  2472   0024AE  2A19               	incf	(pad@i+1)^0,f,c
  2473   0024B0                     l2218:
  2474                           
  2475                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2476   0024B0  501A               	movf	pad@w^0,w,c
  2477   0024B2  5C18               	subwf	pad@i^0,w,c
  2478   0024B4  5019               	movf	(pad@i+1)^0,w,c
  2479   0024B6  0A80               	xorlw	128
  2480   0024B8  6E17               	movwf	??_pad^0,c
  2481   0024BA  501B               	movf	(pad@w+1)^0,w,c
  2482   0024BC  0A80               	xorlw	128
  2483   0024BE  5817               	subwfb	??_pad^0,w,c
  2484   0024C0  A0D8               	btfss	status,0,c
  2485   0024C2  EF65  F012         	goto	u1121
  2486   0024C6  EF67  F012         	goto	u1120
  2487   0024CA                     u1121:
  2488   0024CA  EF4C  F012         	goto	l2214
  2489   0024CE                     u1120:
  2490   0024CE                     
  2491                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  2492   0024CE  C013  F00A         	movff	pad@buf,fputs@s
  2493   0024D2  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2494   0024D6  C011  F00C         	movff	pad@fp,fputs@fp
  2495   0024DA  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2496   0024DE  EC91  F013         	call	_fputs	;wreg free
  2497   0024E2  0012               	return		;funcret
  2498   0024E4                     __end_of_pad:
  2499                           	callstack 0
  2500                           
  2501 ;; *************** function _fputs *****************
  2502 ;; Defined at:
  2503 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  2504 ;; Parameters:    Size  Location     Type
  2505 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2506 ;;		 -> dbuf(32), 
  2507 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  2508 ;;		 -> sprintf@f(11), 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  i               2   14[COMRAM] int 
  2511 ;;  c               1   13[COMRAM] unsigned char 
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  2    9[COMRAM] int 
  2514 ;; Registers used:
  2515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2521 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2522 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2524 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2525 ;;Total ram usage:        7 bytes
  2526 ;; Hardware stack levels used: 1
  2527 ;; Hardware stack levels required when called: 3
  2528 ;; This function calls:
  2529 ;;		_fputc
  2530 ;; This function is called by:
  2531 ;;		_pad
  2532 ;; This function uses a non-reentrant model
  2533 ;;
  2534                           
  2535                           	psect	text7
  2536   002722                     __ptext7:
  2537                           	callstack 0
  2538   002722                     _fputs:
  2539                           	callstack 22
  2540   002722  0E00               	movlw	0
  2541   002724  6E10               	movwf	(fputs@i+1)^0,c
  2542   002726  0E00               	movlw	0
  2543   002728  6E0F               	movwf	fputs@i^0,c
  2544   00272A  EFA2  F013         	goto	l2126
  2545   00272E                     l2122:
  2546   00272E  C00E  F001         	movff	fputs@c,fputc@c
  2547   002732  6A02               	clrf	(fputc@c+1)^0,c
  2548   002734  C00C  F003         	movff	fputs@fp,fputc@fp
  2549   002738  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  2550   00273C  EC48  F00E         	call	_fputc	;wreg free
  2551   002740  4A0F               	infsnz	fputs@i^0,f,c
  2552   002742  2A10               	incf	(fputs@i+1)^0,f,c
  2553   002744                     l2126:
  2554   002744  500F               	movf	fputs@i^0,w,c
  2555   002746  240A               	addwf	fputs@s^0,w,c
  2556   002748  6ED9               	movwf	fsr2l,c
  2557   00274A  5010               	movf	(fputs@i+1)^0,w,c
  2558   00274C  200B               	addwfc	(fputs@s+1)^0,w,c
  2559   00274E  6EDA               	movwf	fsr2h,c
  2560   002750  50DF               	movf	indf2,w,c
  2561   002752  6E0E               	movwf	fputs@c^0,c
  2562   002754  500E               	movf	fputs@c^0,w,c
  2563   002756  A4D8               	btfss	status,2,c
  2564   002758  EFB0  F013         	goto	u971
  2565   00275C  EFB2  F013         	goto	u970
  2566   002760                     u971:
  2567   002760  EF97  F013         	goto	l2122
  2568   002764                     u970:
  2569   002764  0012               	return		;funcret
  2570   002766                     __end_of_fputs:
  2571                           	callstack 0
  2572                           
  2573 ;; *************** function _fputc *****************
  2574 ;; Defined at:
  2575 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;  c               2    0[COMRAM] int 
  2578 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  2579 ;;		 -> sprintf@f(11), 
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;		None
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  2    0[COMRAM] int 
  2584 ;; Registers used:
  2585 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2591 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2593 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2594 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2595 ;;Total ram usage:        9 bytes
  2596 ;; Hardware stack levels used: 1
  2597 ;; Hardware stack levels required when called: 2
  2598 ;; This function calls:
  2599 ;;		_putch
  2600 ;; This function is called by:
  2601 ;;		_pad
  2602 ;;		_vfpfcnvrt
  2603 ;;		_fputs
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606                           
  2607                           	psect	text8
  2608   001C90                     __ptext8:
  2609                           	callstack 0
  2610   001C90                     _fputc:
  2611                           	callstack 25
  2612   001C90  5003               	movf	fputc@fp^0,w,c
  2613   001C92  1004               	iorwf	(fputc@fp+1)^0,w,c
  2614   001C94  B4D8               	btfsc	status,2,c
  2615   001C96  EF4F  F00E         	goto	u931
  2616   001C9A  EF51  F00E         	goto	u930
  2617   001C9E                     u931:
  2618   001C9E  EF5A  F00E         	goto	l2110
  2619   001CA2                     u930:
  2620   001CA2  5003               	movf	fputc@fp^0,w,c
  2621   001CA4  1004               	iorwf	(fputc@fp+1)^0,w,c
  2622   001CA6  A4D8               	btfss	status,2,c
  2623   001CA8  EF58  F00E         	goto	u941
  2624   001CAC  EF5A  F00E         	goto	u940
  2625   001CB0                     u941:
  2626   001CB0  EF5F  F00E         	goto	l2112
  2627   001CB4                     u940:
  2628   001CB4                     l2110:
  2629   001CB4  5001               	movf	fputc@c^0,w,c
  2630   001CB6  ECD7  F014         	call	_putch
  2631   001CBA  EFAC  F00E         	goto	l1173
  2632   001CBE                     l2112:
  2633   001CBE  EE20 F009          	lfsr	2,9
  2634   001CC2  5003               	movf	fputc@fp^0,w,c
  2635   001CC4  26D9               	addwf	fsr2l,f,c
  2636   001CC6  5004               	movf	(fputc@fp+1)^0,w,c
  2637   001CC8  22DA               	addwfc	fsr2h,f,c
  2638   001CCA  50DE               	movf	postinc2,w,c
  2639   001CCC  10DE               	iorwf	postinc2,w,c
  2640   001CCE  B4D8               	btfsc	status,2,c
  2641   001CD0  EF6C  F00E         	goto	u951
  2642   001CD4  EF6E  F00E         	goto	u950
  2643   001CD8                     u951:
  2644   001CD8  EF89  F00E         	goto	l2116
  2645   001CDC                     u950:
  2646   001CDC  EE20 F009          	lfsr	2,9
  2647   001CE0  5003               	movf	fputc@fp^0,w,c
  2648   001CE2  26D9               	addwf	fsr2l,f,c
  2649   001CE4  5004               	movf	(fputc@fp+1)^0,w,c
  2650   001CE6  22DA               	addwfc	fsr2h,f,c
  2651   001CE8  EE10 F003          	lfsr	1,3
  2652   001CEC  5003               	movf	fputc@fp^0,w,c
  2653   001CEE  26E1               	addwf	fsr1l,f,c
  2654   001CF0  5004               	movf	(fputc@fp+1)^0,w,c
  2655   001CF2  22E2               	addwfc	fsr1h,f,c
  2656   001CF4  50DE               	movf	postinc2,w,c
  2657   001CF6  5CE6               	subwf	postinc1,w,c
  2658   001CF8  50E6               	movf	postinc1,w,c
  2659   001CFA  0A80               	xorlw	128
  2660   001CFC  6E09               	movwf	(??_fputc+4)^0,c
  2661   001CFE  50DE               	movf	postinc2,w,c
  2662   001D00  0A80               	xorlw	128
  2663   001D02  5809               	subwfb	(??_fputc+4)^0,w,c
  2664   001D04  B0D8               	btfsc	status,0,c
  2665   001D06  EF87  F00E         	goto	u961
  2666   001D0A  EF89  F00E         	goto	u960
  2667   001D0E                     u961:
  2668   001D0E  EFAC  F00E         	goto	l1173
  2669   001D12                     u960:
  2670   001D12                     l2116:
  2671   001D12  EE20 F003          	lfsr	2,3
  2672   001D16  5003               	movf	fputc@fp^0,w,c
  2673   001D18  26D9               	addwf	fsr2l,f,c
  2674   001D1A  5004               	movf	(fputc@fp+1)^0,w,c
  2675   001D1C  22DA               	addwfc	fsr2h,f,c
  2676   001D1E  CFDE F005          	movff	postinc2,??_fputc
  2677   001D22  CFDD F006          	movff	postdec2,??_fputc+1
  2678   001D26  C003  FFD9         	movff	fputc@fp,fsr2l
  2679   001D2A  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2680   001D2E  CFDE F007          	movff	postinc2,??_fputc+2
  2681   001D32  CFDD F008          	movff	postdec2,??_fputc+3
  2682   001D36  5005               	movf	??_fputc^0,w,c
  2683   001D38  2407               	addwf	(??_fputc+2)^0,w,c
  2684   001D3A  6ED9               	movwf	fsr2l,c
  2685   001D3C  5006               	movf	(??_fputc+1)^0,w,c
  2686   001D3E  2008               	addwfc	(??_fputc+3)^0,w,c
  2687   001D40  6EDA               	movwf	fsr2h,c
  2688   001D42  C001  FFDF         	movff	fputc@c,indf2
  2689   001D46  EE20 F003          	lfsr	2,3
  2690   001D4A  5003               	movf	fputc@fp^0,w,c
  2691   001D4C  26D9               	addwf	fsr2l,f,c
  2692   001D4E  5004               	movf	(fputc@fp+1)^0,w,c
  2693   001D50  22DA               	addwfc	fsr2h,f,c
  2694   001D52  2ADE               	incf	postinc2,f,c
  2695   001D54  0E00               	movlw	0
  2696   001D56  22DD               	addwfc	postdec2,f,c
  2697   001D58                     l1173:
  2698   001D58  0012               	return		;funcret
  2699   001D5A                     __end_of_fputc:
  2700                           	callstack 0
  2701                           
  2702 ;; *************** function _putch *****************
  2703 ;; Defined at:
  2704 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;  c               1    wreg     unsigned char 
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;  c               1    0[COMRAM] unsigned char 
  2709 ;; Return value:  Size  Location     Type
  2710 ;;                  1    wreg      void 
  2711 ;; Registers used:
  2712 ;;		wreg
  2713 ;; Tracked objects:
  2714 ;;		On entry : 0/0
  2715 ;;		On exit  : 0/0
  2716 ;;		Unchanged: 0/0
  2717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2722 ;;Total ram usage:        0 bytes
  2723 ;; Hardware stack levels used: 1
  2724 ;; Hardware stack levels required when called: 1
  2725 ;; This function calls:
  2726 ;;		Nothing
  2727 ;; This function is called by:
  2728 ;;		_fputc
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	text9
  2733   0029AE                     __ptext9:
  2734                           	callstack 0
  2735   0029AE                     _putch:
  2736                           	callstack 25
  2737   0029AE  0012               	return		;funcret
  2738   0029B0                     __end_of_putch:
  2739                           	callstack 0
  2740                           
  2741 ;; *************** function _abs *****************
  2742 ;; Defined at:
  2743 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;  a               2   18[COMRAM] int 
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;		None
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  2   18[COMRAM] int 
  2750 ;; Registers used:
  2751 ;;		wreg, status,2, status,0
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2757 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2759 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2760 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2761 ;;Total ram usage:        4 bytes
  2762 ;; Hardware stack levels used: 1
  2763 ;; Hardware stack levels required when called: 1
  2764 ;; This function calls:
  2765 ;;		Nothing
  2766 ;; This function is called by:
  2767 ;;		_dtoa
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           	psect	text10
  2772   0027EA                     __ptext10:
  2773                           	callstack 0
  2774   0027EA                     _abs:
  2775                           	callstack 25
  2776   0027EA  BE14               	btfsc	(abs@a+1)^0,7,c
  2777   0027EC  EF02  F014         	goto	u1130
  2778   0027F0  5014               	movf	(abs@a+1)^0,w,c
  2779   0027F2  E106               	bnz	u1131
  2780   0027F4  0413               	decf	abs@a^0,w,c
  2781   0027F6  B0D8               	btfsc	status,0,c
  2782   0027F8  EF00  F014         	goto	u1131
  2783   0027FC  EF02  F014         	goto	u1130
  2784   002800                     u1131:
  2785   002800  EF10  F014         	goto	l1158
  2786   002804                     u1130:
  2787   002804  C013  F015         	movff	abs@a,??_abs
  2788   002808  C014  F016         	movff	abs@a+1,??_abs+1
  2789   00280C  1E15               	comf	??_abs^0,f,c
  2790   00280E  1E16               	comf	(??_abs+1)^0,f,c
  2791   002810  4A15               	infsnz	??_abs^0,f,c
  2792   002812  2A16               	incf	(??_abs+1)^0,f,c
  2793   002814  C015  F013         	movff	??_abs,?_abs
  2794   002818  C016  F014         	movff	??_abs+1,?_abs+1
  2795   00281C  EF14  F014         	goto	l1161
  2796   002820                     l1158:
  2797   002820  C013  F013         	movff	abs@a,?_abs
  2798   002824  C014  F014         	movff	abs@a+1,?_abs+1
  2799   002828                     l1161:
  2800   002828  0012               	return		;funcret
  2801   00282A                     __end_of_abs:
  2802                           	callstack 0
  2803                           
  2804 ;; *************** function ___aomod *****************
  2805 ;; Defined at:
  2806 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  dividend        8    0[COMRAM] long long 
  2809 ;;  divisor         8    8[COMRAM] long long 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  sign            1   17[COMRAM] unsigned char 
  2812 ;;  counter         1   16[COMRAM] unsigned char 
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  8    0[COMRAM] long long 
  2815 ;; Registers used:
  2816 ;;		wreg, status,2, status,0
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2822 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2823 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2825 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2826 ;;Total ram usage:       18 bytes
  2827 ;; Hardware stack levels used: 1
  2828 ;; Hardware stack levels required when called: 1
  2829 ;; This function calls:
  2830 ;;		Nothing
  2831 ;; This function is called by:
  2832 ;;		_dtoa
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text11
  2837   0018A4                     __ptext11:
  2838                           	callstack 0
  2839   0018A4                     ___aomod:
  2840                           	callstack 25
  2841   0018A4  0E00               	movlw	0
  2842   0018A6  6E12               	movwf	___aomod@sign^0,c
  2843   0018A8  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2844   0018AA  EF5B  F00C         	goto	u1050
  2845   0018AE  EF59  F00C         	goto	u1051
  2846   0018B2                     u1051:
  2847   0018B2  EF6D  F00C         	goto	l2180
  2848   0018B6                     u1050:
  2849   0018B6  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2850   0018B8  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2851   0018BA  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2852   0018BC  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2853   0018BE  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2854   0018C0  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2855   0018C2  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2856   0018C4  6C01               	negf	___aomod@dividend^0,c
  2857   0018C6  0E00               	movlw	0
  2858   0018C8  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2859   0018CA  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2860   0018CC  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2861   0018CE  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2862   0018D0  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2863   0018D2  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2864   0018D4  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2865   0018D6  0E01               	movlw	1
  2866   0018D8  6E12               	movwf	___aomod@sign^0,c
  2867   0018DA                     l2180:
  2868   0018DA  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2869   0018DC  EF74  F00C         	goto	u1060
  2870   0018E0  EF72  F00C         	goto	u1061
  2871   0018E4                     u1061:
  2872   0018E4  EF84  F00C         	goto	l2184
  2873   0018E8                     u1060:
  2874   0018E8  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2875   0018EA  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2876   0018EC  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2877   0018EE  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2878   0018F0  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2879   0018F2  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2880   0018F4  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2881   0018F6  6C09               	negf	___aomod@divisor^0,c
  2882   0018F8  0E00               	movlw	0
  2883   0018FA  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2884   0018FC  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2885   0018FE  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2886   001900  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2887   001902  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2888   001904  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2889   001906  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2890   001908                     l2184:
  2891   001908  5009               	movf	___aomod@divisor^0,w,c
  2892   00190A  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2893   00190C  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2894   00190E  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2895   001910  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2896   001912  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2897   001914  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2898   001916  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2899   001918  B4D8               	btfsc	status,2,c
  2900   00191A  EF91  F00C         	goto	u1071
  2901   00191E  EF93  F00C         	goto	u1070
  2902   001922                     u1071:
  2903   001922  EFDB  F00C         	goto	l2200
  2904   001926                     u1070:
  2905   001926  0E01               	movlw	1
  2906   001928  6E11               	movwf	___aomod@counter^0,c
  2907   00192A  EFA1  F00C         	goto	l2190
  2908   00192E                     l2188:
  2909   00192E  90D8               	bcf	status,0,c
  2910   001930  3609               	rlcf	___aomod@divisor^0,f,c
  2911   001932  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2912   001934  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2913   001936  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2914   001938  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2915   00193A  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2916   00193C  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2917   00193E  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2918   001940  2A11               	incf	___aomod@counter^0,f,c
  2919   001942                     l2190:
  2920   001942  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2921   001944  EFA6  F00C         	goto	u1081
  2922   001948  EFA8  F00C         	goto	u1080
  2923   00194C                     u1081:
  2924   00194C  EF97  F00C         	goto	l2188
  2925   001950                     u1080:
  2926   001950                     l2192:
  2927   001950  5009               	movf	___aomod@divisor^0,w,c
  2928   001952  5C01               	subwf	___aomod@dividend^0,w,c
  2929   001954  500A               	movf	(___aomod@divisor+1)^0,w,c
  2930   001956  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2931   001958  500B               	movf	(___aomod@divisor+2)^0,w,c
  2932   00195A  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2933   00195C  500C               	movf	(___aomod@divisor+3)^0,w,c
  2934   00195E  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2935   001960  500D               	movf	(___aomod@divisor+4)^0,w,c
  2936   001962  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2937   001964  500E               	movf	(___aomod@divisor+5)^0,w,c
  2938   001966  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2939   001968  500F               	movf	(___aomod@divisor+6)^0,w,c
  2940   00196A  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2941   00196C  5010               	movf	(___aomod@divisor+7)^0,w,c
  2942   00196E  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2943   001970  A0D8               	btfss	status,0,c
  2944   001972  EFBD  F00C         	goto	u1091
  2945   001976  EFBF  F00C         	goto	u1090
  2946   00197A                     u1091:
  2947   00197A  EFCF  F00C         	goto	l2196
  2948   00197E                     u1090:
  2949   00197E  5009               	movf	___aomod@divisor^0,w,c
  2950   001980  5E01               	subwf	___aomod@dividend^0,f,c
  2951   001982  500A               	movf	(___aomod@divisor+1)^0,w,c
  2952   001984  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2953   001986  500B               	movf	(___aomod@divisor+2)^0,w,c
  2954   001988  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2955   00198A  500C               	movf	(___aomod@divisor+3)^0,w,c
  2956   00198C  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2957   00198E  500D               	movf	(___aomod@divisor+4)^0,w,c
  2958   001990  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2959   001992  500E               	movf	(___aomod@divisor+5)^0,w,c
  2960   001994  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2961   001996  500F               	movf	(___aomod@divisor+6)^0,w,c
  2962   001998  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2963   00199A  5010               	movf	(___aomod@divisor+7)^0,w,c
  2964   00199C  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2965   00199E                     l2196:
  2966   00199E  90D8               	bcf	status,0,c
  2967   0019A0  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2968   0019A2  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2969   0019A4  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2970   0019A6  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2971   0019A8  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2972   0019AA  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2973   0019AC  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2974   0019AE  3209               	rrcf	___aomod@divisor^0,f,c
  2975   0019B0  2E11               	decfsz	___aomod@counter^0,f,c
  2976   0019B2  EFA8  F00C         	goto	l2192
  2977   0019B6                     l2200:
  2978   0019B6  5012               	movf	___aomod@sign^0,w,c
  2979   0019B8  B4D8               	btfsc	status,2,c
  2980   0019BA  EFE1  F00C         	goto	u1101
  2981   0019BE  EFE3  F00C         	goto	u1100
  2982   0019C2                     u1101:
  2983   0019C2  EFF3  F00C         	goto	l2204
  2984   0019C6                     u1100:
  2985   0019C6  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2986   0019C8  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2987   0019CA  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2988   0019CC  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2989   0019CE  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2990   0019D0  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2991   0019D2  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2992   0019D4  6C01               	negf	___aomod@dividend^0,c
  2993   0019D6  0E00               	movlw	0
  2994   0019D8  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2995   0019DA  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2996   0019DC  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2997   0019DE  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2998   0019E0  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2999   0019E2  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  3000   0019E4  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  3001   0019E6                     l2204:
  3002   0019E6  C001  F001         	movff	___aomod@dividend,?___aomod
  3003   0019EA  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  3004   0019EE  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  3005   0019F2  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  3006   0019F6  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  3007   0019FA  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  3008   0019FE  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  3009   001A02  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  3010   001A06  0012               	return		;funcret
  3011   001A08                     __end_of___aomod:
  3012                           	callstack 0
  3013                           
  3014 ;; *************** function ___aodiv *****************
  3015 ;; Defined at:
  3016 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;  dividend        8    0[COMRAM] long long 
  3019 ;;  divisor         8    8[COMRAM] long long 
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  quotient        8   18[COMRAM] long long 
  3022 ;;  sign            1   17[COMRAM] unsigned char 
  3023 ;;  counter         1   16[COMRAM] unsigned char 
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  8    0[COMRAM] long long 
  3026 ;; Registers used:
  3027 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3033 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3034 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3036 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3037 ;;Total ram usage:       26 bytes
  3038 ;; Hardware stack levels used: 1
  3039 ;; Hardware stack levels required when called: 1
  3040 ;; This function calls:
  3041 ;;		Nothing
  3042 ;; This function is called by:
  3043 ;;		_dtoa
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text12
  3048   00171C                     __ptext12:
  3049                           	callstack 0
  3050   00171C                     ___aodiv:
  3051                           	callstack 25
  3052   00171C  0E00               	movlw	0
  3053   00171E  6E12               	movwf	___aodiv@sign^0,c
  3054   001720  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  3055   001722  EF97  F00B         	goto	u980
  3056   001726  EF95  F00B         	goto	u981
  3057   00172A                     u981:
  3058   00172A  EFA9  F00B         	goto	l2136
  3059   00172E                     u980:
  3060   00172E  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  3061   001730  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  3062   001732  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  3063   001734  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  3064   001736  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  3065   001738  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  3066   00173A  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  3067   00173C  6C09               	negf	___aodiv@divisor^0,c
  3068   00173E  0E00               	movlw	0
  3069   001740  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  3070   001742  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  3071   001744  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  3072   001746  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  3073   001748  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  3074   00174A  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  3075   00174C  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  3076   00174E  0E01               	movlw	1
  3077   001750  6E12               	movwf	___aodiv@sign^0,c
  3078   001752                     l2136:
  3079   001752  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  3080   001754  EFB0  F00B         	goto	u990
  3081   001758  EFAE  F00B         	goto	u991
  3082   00175C                     u991:
  3083   00175C  EFC2  F00B         	goto	l2142
  3084   001760                     u990:
  3085   001760  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  3086   001762  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  3087   001764  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  3088   001766  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  3089   001768  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  3090   00176A  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  3091   00176C  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  3092   00176E  6C01               	negf	___aodiv@dividend^0,c
  3093   001770  0E00               	movlw	0
  3094   001772  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  3095   001774  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  3096   001776  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  3097   001778  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  3098   00177A  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  3099   00177C  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  3100   00177E  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  3101   001780  0E01               	movlw	1
  3102   001782  1A12               	xorwf	___aodiv@sign^0,f,c
  3103   001784                     l2142:
  3104   001784  EE20  F013         	lfsr	2,___aodiv@quotient
  3105   001788  0E07               	movlw	7
  3106   00178A                     u1001:
  3107   00178A  6ADE               	clrf	postinc2,c
  3108   00178C  06E8               	decf	wreg,f,c
  3109   00178E  E2FD               	bc	u1001
  3110   001790  5009               	movf	___aodiv@divisor^0,w,c
  3111   001792  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  3112   001794  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  3113   001796  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  3114   001798  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  3115   00179A  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  3116   00179C  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  3117   00179E  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  3118   0017A0  B4D8               	btfsc	status,2,c
  3119   0017A2  EFD5  F00B         	goto	u1011
  3120   0017A6  EFD7  F00B         	goto	u1010
  3121   0017AA                     u1011:
  3122   0017AA  EF29  F00C         	goto	l2164
  3123   0017AE                     u1010:
  3124   0017AE  0E01               	movlw	1
  3125   0017B0  6E11               	movwf	___aodiv@counter^0,c
  3126   0017B2  EFE5  F00B         	goto	l2150
  3127   0017B6                     l2148:
  3128   0017B6  90D8               	bcf	status,0,c
  3129   0017B8  3609               	rlcf	___aodiv@divisor^0,f,c
  3130   0017BA  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  3131   0017BC  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  3132   0017BE  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  3133   0017C0  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  3134   0017C2  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  3135   0017C4  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  3136   0017C6  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  3137   0017C8  2A11               	incf	___aodiv@counter^0,f,c
  3138   0017CA                     l2150:
  3139   0017CA  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  3140   0017CC  EFEA  F00B         	goto	u1021
  3141   0017D0  EFEC  F00B         	goto	u1020
  3142   0017D4                     u1021:
  3143   0017D4  EFDB  F00B         	goto	l2148
  3144   0017D8                     u1020:
  3145   0017D8                     l2152:
  3146   0017D8  90D8               	bcf	status,0,c
  3147   0017DA  3613               	rlcf	___aodiv@quotient^0,f,c
  3148   0017DC  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  3149   0017DE  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  3150   0017E0  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  3151   0017E2  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  3152   0017E4  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  3153   0017E6  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  3154   0017E8  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  3155   0017EA  5009               	movf	___aodiv@divisor^0,w,c
  3156   0017EC  5C01               	subwf	___aodiv@dividend^0,w,c
  3157   0017EE  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3158   0017F0  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  3159   0017F2  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3160   0017F4  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  3161   0017F6  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3162   0017F8  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  3163   0017FA  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3164   0017FC  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  3165   0017FE  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3166   001800  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  3167   001802  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3168   001804  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  3169   001806  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3170   001808  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  3171   00180A  A0D8               	btfss	status,0,c
  3172   00180C  EF0A  F00C         	goto	u1031
  3173   001810  EF0C  F00C         	goto	u1030
  3174   001814                     u1031:
  3175   001814  EF1D  F00C         	goto	l2160
  3176   001818                     u1030:
  3177   001818  5009               	movf	___aodiv@divisor^0,w,c
  3178   00181A  5E01               	subwf	___aodiv@dividend^0,f,c
  3179   00181C  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3180   00181E  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  3181   001820  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3182   001822  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  3183   001824  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3184   001826  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  3185   001828  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3186   00182A  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  3187   00182C  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3188   00182E  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  3189   001830  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3190   001832  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  3191   001834  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3192   001836  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  3193   001838  8013               	bsf	___aodiv@quotient^0,0,c
  3194   00183A                     l2160:
  3195   00183A  90D8               	bcf	status,0,c
  3196   00183C  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  3197   00183E  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  3198   001840  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  3199   001842  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  3200   001844  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  3201   001846  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  3202   001848  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  3203   00184A  3209               	rrcf	___aodiv@divisor^0,f,c
  3204   00184C  2E11               	decfsz	___aodiv@counter^0,f,c
  3205   00184E  EFEC  F00B         	goto	l2152
  3206   001852                     l2164:
  3207   001852  5012               	movf	___aodiv@sign^0,w,c
  3208   001854  B4D8               	btfsc	status,2,c
  3209   001856  EF2F  F00C         	goto	u1041
  3210   00185A  EF31  F00C         	goto	u1040
  3211   00185E                     u1041:
  3212   00185E  EF41  F00C         	goto	l2168
  3213   001862                     u1040:
  3214   001862  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  3215   001864  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  3216   001866  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  3217   001868  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  3218   00186A  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  3219   00186C  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  3220   00186E  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  3221   001870  6C13               	negf	___aodiv@quotient^0,c
  3222   001872  0E00               	movlw	0
  3223   001874  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  3224   001876  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  3225   001878  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  3226   00187A  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  3227   00187C  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  3228   00187E  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  3229   001880  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  3230   001882                     l2168:
  3231   001882  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3232   001886  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3233   00188A  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3234   00188E  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3235   001892  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3236   001896  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3237   00189A  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3238   00189E  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3239   0018A2  0012               	return		;funcret
  3240   0018A4                     __end_of___aodiv:
  3241                           	callstack 0
  3242                           
  3243 ;; *************** function _sendStringSerial4 *****************
  3244 ;; Defined at:
  3245 ;;		line 37 in file "../serial.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  string          2    1[COMRAM] PTR unsigned char 
  3248 ;;		 -> main@readout3(100), main@readout2(100), 
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3263 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3264 ;;Total ram usage:        2 bytes
  3265 ;; Hardware stack levels used: 1
  3266 ;; Hardware stack levels required when called: 2
  3267 ;; This function calls:
  3268 ;;		_sendCharSerial4
  3269 ;; This function is called by:
  3270 ;;		_main
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	text13
  3275   00282A                     __ptext13:
  3276                           	callstack 0
  3277   00282A                     _sendStringSerial4:
  3278                           	callstack 28
  3279   00282A                     
  3280                           ;../serial.c: 40:     while (*string != 0)
  3281   00282A  EF20  F014         	goto	l2728
  3282   00282E                     l2724:
  3283                           
  3284                           ;../serial.c: 41:     {;../serial.c: 42:         sendCharSerial4(*string++);
  3285   00282E  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3286   002832  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3287   002836  50DF               	movf	indf2,w,c
  3288   002838  ECAB  F014         	call	_sendCharSerial4
  3289   00283C  4A02               	infsnz	sendStringSerial4@string^0,f,c
  3290   00283E  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  3291   002840                     l2728:
  3292                           
  3293                           ;../serial.c: 40:     while (*string != 0)
  3294   002840  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3295   002844  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3296   002848  50DF               	movf	indf2,w,c
  3297   00284A  A4D8               	btfss	status,2,c
  3298   00284C  EF2A  F014         	goto	u1531
  3299   002850  EF2C  F014         	goto	u1530
  3300   002854                     u1531:
  3301   002854  EF17  F014         	goto	l2724
  3302   002858                     u1530:
  3303   002858  0012               	return		;funcret
  3304   00285A                     __end_of_sendStringSerial4:
  3305                           	callstack 0
  3306                           
  3307 ;; *************** function _sendCharSerial4 *****************
  3308 ;; Defined at:
  3309 ;;		line 30 in file "../serial.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  charToSend      1    wreg     unsigned char 
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;  charToSend      1    0[COMRAM] unsigned char 
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  1    wreg      void 
  3316 ;; Registers used:
  3317 ;;		wreg
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3324 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3326 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3327 ;;Total ram usage:        1 bytes
  3328 ;; Hardware stack levels used: 1
  3329 ;; Hardware stack levels required when called: 1
  3330 ;; This function calls:
  3331 ;;		Nothing
  3332 ;; This function is called by:
  3333 ;;		_sendStringSerial4
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           	psect	text14
  3338   002956                     __ptext14:
  3339                           	callstack 0
  3340   002956                     _sendCharSerial4:
  3341                           	callstack 28
  3342                           
  3343                           ;incstack = 0
  3344                           ;sendCharSerial4@charToSend stored from wreg
  3345   002956  6E01               	movwf	sendCharSerial4@charToSend^0,c
  3346   002958                     l406:
  3347   002958  010E               	movlb	14	; () banked
  3348   00295A  A537               	btfss	55,2,b	;volatile
  3349   00295C  EFB2  F014         	goto	u1471
  3350   002960  EFB4  F014         	goto	u1470
  3351   002964                     u1471:
  3352   002964  EFAC  F014         	goto	l406
  3353   002968                     u1470:
  3354   002968                     
  3355                           ; BSR set to: 14
  3356                           ;../serial.c: 32:     TX4REG = charToSend;
  3357   002968  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3358   00296C                     
  3359                           ; BSR set to: 14
  3360   00296C  0012               	return		;funcret
  3361   00296E                     __end_of_sendCharSerial4:
  3362                           	callstack 0
  3363                           
  3364 ;; *************** function _motor_action *****************
  3365 ;; Defined at:
  3366 ;;		line 181 in file "../dc_motor.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  color           2   33[COMRAM] unsigned int 
  3369 ;;  l               2   35[COMRAM] PTR struct DC_motor
  3370 ;;		 -> main@motorL(9), 
  3371 ;;  r               2   37[COMRAM] PTR struct DC_motor
  3372 ;;		 -> main@motorR(9), 
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;		None
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  1    wreg      void 
  3377 ;; Registers used:
  3378 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3384 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3386 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3387 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3388 ;;Total ram usage:        8 bytes
  3389 ;; Hardware stack levels used: 1
  3390 ;; Hardware stack levels required when called: 4
  3391 ;; This function calls:
  3392 ;;		_left_135
  3393 ;;		_left_90
  3394 ;;		_reverse
  3395 ;;		_right_135
  3396 ;;		_right_90
  3397 ;;		_spin_180
  3398 ;; This function is called by:
  3399 ;;		_main
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           	psect	text15
  3404   001B66                     __ptext15:
  3405                           	callstack 0
  3406   001B66                     _motor_action:
  3407                           	callstack 26
  3408   001B66                     
  3409                           ;../dc_motor.c: 181: void motor_action(unsigned int color, struct DC_motor *l, struct DC
      +                          _motor *r);../dc_motor.c: 182: {;../dc_motor.c: 183:     switch (color){
  3410   001B66  EF1D  F00E         	goto	l2788
  3411   001B6A                     l2772:
  3412                           
  3413                           ;../dc_motor.c: 185:             right_90(l,r);
  3414   001B6A  C024  F01A         	movff	motor_action@l,right_90@mL
  3415   001B6E  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3416   001B72  C026  F01C         	movff	motor_action@r,right_90@mR
  3417   001B76  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3418   001B7A  ECC1  F00F         	call	_right_90	;wreg free
  3419                           
  3420                           ;../dc_motor.c: 186:             break;
  3421   001B7E  EF47  F00E         	goto	l312
  3422   001B82                     l2774:
  3423                           
  3424                           ;../dc_motor.c: 188:             left_90(l,r);
  3425   001B82  C024  F01A         	movff	motor_action@l,left_90@mL
  3426   001B86  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3427   001B8A  C026  F01C         	movff	motor_action@r,left_90@mR
  3428   001B8E  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3429   001B92  EC13  F010         	call	_left_90	;wreg free
  3430                           
  3431                           ;../dc_motor.c: 189:             break;
  3432   001B96  EF47  F00E         	goto	l312
  3433   001B9A                     l2776:
  3434                           
  3435                           ;../dc_motor.c: 191:             spin_180(l,r);
  3436   001B9A  C024  F01A         	movff	motor_action@l,spin_180@mL
  3437   001B9E  C025  F01B         	movff	motor_action@l+1,spin_180@mL+1
  3438   001BA2  C026  F01C         	movff	motor_action@r,spin_180@mR
  3439   001BA6  C027  F01D         	movff	motor_action@r+1,spin_180@mR+1
  3440   001BAA  EC65  F010         	call	_spin_180	;wreg free
  3441                           
  3442                           ;../dc_motor.c: 192:             break;
  3443   001BAE  EF47  F00E         	goto	l312
  3444   001BB2                     l2778:
  3445                           
  3446                           ;../dc_motor.c: 194:             reverse(l,r);
  3447   001BB2  C024  F01A         	movff	motor_action@l,reverse@mL
  3448   001BB6  C025  F01B         	movff	motor_action@l+1,reverse@mL+1
  3449   001BBA  C026  F01C         	movff	motor_action@r,reverse@mR
  3450   001BBE  C027  F01D         	movff	motor_action@r+1,reverse@mR+1
  3451   001BC2  EC07  F011         	call	_reverse	;wreg free
  3452                           
  3453                           ;../dc_motor.c: 195:             right_90(l,r);
  3454   001BC6  C024  F01A         	movff	motor_action@l,right_90@mL
  3455   001BCA  C025  F01B         	movff	motor_action@l+1,right_90@mL+1
  3456   001BCE  C026  F01C         	movff	motor_action@r,right_90@mR
  3457   001BD2  C027  F01D         	movff	motor_action@r+1,right_90@mR+1
  3458   001BD6  ECC1  F00F         	call	_right_90	;wreg free
  3459                           
  3460                           ;../dc_motor.c: 196:             break;
  3461   001BDA  EF47  F00E         	goto	l312
  3462   001BDE                     l2780:
  3463                           
  3464                           ;../dc_motor.c: 198:             reverse(l,r);
  3465   001BDE  C024  F01A         	movff	motor_action@l,reverse@mL
  3466   001BE2  C025  F01B         	movff	motor_action@l+1,reverse@mL+1
  3467   001BE6  C026  F01C         	movff	motor_action@r,reverse@mR
  3468   001BEA  C027  F01D         	movff	motor_action@r+1,reverse@mR+1
  3469   001BEE  EC07  F011         	call	_reverse	;wreg free
  3470                           
  3471                           ;../dc_motor.c: 199:             left_90(l,r);
  3472   001BF2  C024  F01A         	movff	motor_action@l,left_90@mL
  3473   001BF6  C025  F01B         	movff	motor_action@l+1,left_90@mL+1
  3474   001BFA  C026  F01C         	movff	motor_action@r,left_90@mR
  3475   001BFE  C027  F01D         	movff	motor_action@r+1,left_90@mR+1
  3476   001C02  EC13  F010         	call	_left_90	;wreg free
  3477                           
  3478                           ;../dc_motor.c: 200:             break;
  3479   001C06  EF47  F00E         	goto	l312
  3480   001C0A                     l2782:
  3481                           
  3482                           ;../dc_motor.c: 202:             right_135(l,r);
  3483   001C0A  C024  F01A         	movff	motor_action@l,right_135@mL
  3484   001C0E  C025  F01B         	movff	motor_action@l+1,right_135@mL+1
  3485   001C12  C026  F01C         	movff	motor_action@r,right_135@mR
  3486   001C16  C027  F01D         	movff	motor_action@r+1,right_135@mR+1
  3487   001C1A  ECB6  F010         	call	_right_135	;wreg free
  3488                           
  3489                           ;../dc_motor.c: 203:             break;
  3490   001C1E  EF47  F00E         	goto	l312
  3491   001C22                     l2784:
  3492                           
  3493                           ;../dc_motor.c: 205:             left_135(l,r);
  3494   001C22  C024  F01A         	movff	motor_action@l,left_135@mL
  3495   001C26  C025  F01B         	movff	motor_action@l+1,left_135@mL+1
  3496   001C2A  C026  F01C         	movff	motor_action@r,left_135@mR
  3497   001C2E  C027  F01D         	movff	motor_action@r+1,left_135@mR+1
  3498   001C32  EC58  F011         	call	_left_135	;wreg free
  3499                           
  3500                           ;../dc_motor.c: 206:             break;
  3501   001C36  EF47  F00E         	goto	l312
  3502   001C3A                     l2788:
  3503   001C3A  C022  F028         	movff	motor_action@color,??_motor_action
  3504   001C3E  C023  F029         	movff	motor_action@color+1,??_motor_action+1
  3505                           
  3506                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3507                           ; Switch size 1, requested type "simple"
  3508                           ; Number of cases is 1, Range of values is 0 to 0
  3509                           ; switch strategies available:
  3510                           ; Name         Instructions Cycles
  3511                           ; simple_byte            4     3 (average)
  3512                           ;	Chosen strategy is simple_byte
  3513   001C42  5029               	movf	(??_motor_action+1)^0,w,c
  3514   001C44  0A00               	xorlw	0	; case 0
  3515   001C46  B4D8               	btfsc	status,2,c
  3516   001C48  EF28  F00E         	goto	l2966
  3517   001C4C  EF47  F00E         	goto	l312
  3518   001C50                     l2966:
  3519                           
  3520                           ; Switch size 1, requested type "simple"
  3521                           ; Number of cases is 7, Range of values is 1 to 7
  3522                           ; switch strategies available:
  3523                           ; Name         Instructions Cycles
  3524                           ; simple_byte           22    12 (average)
  3525                           ;	Chosen strategy is simple_byte
  3526   001C50  5028               	movf	??_motor_action^0,w,c
  3527   001C52  0A01               	xorlw	1	; case 1
  3528   001C54  B4D8               	btfsc	status,2,c
  3529   001C56  EFB5  F00D         	goto	l2772
  3530   001C5A  0A03               	xorlw	3	; case 2
  3531   001C5C  B4D8               	btfsc	status,2,c
  3532   001C5E  EFC1  F00D         	goto	l2774
  3533   001C62  0A01               	xorlw	1	; case 3
  3534   001C64  B4D8               	btfsc	status,2,c
  3535   001C66  EFCD  F00D         	goto	l2776
  3536   001C6A  0A07               	xorlw	7	; case 4
  3537   001C6C  B4D8               	btfsc	status,2,c
  3538   001C6E  EFD9  F00D         	goto	l2778
  3539   001C72  0A01               	xorlw	1	; case 5
  3540   001C74  B4D8               	btfsc	status,2,c
  3541   001C76  EFEF  F00D         	goto	l2780
  3542   001C7A  0A03               	xorlw	3	; case 6
  3543   001C7C  B4D8               	btfsc	status,2,c
  3544   001C7E  EF05  F00E         	goto	l2782
  3545   001C82  0A01               	xorlw	1	; case 7
  3546   001C84  B4D8               	btfsc	status,2,c
  3547   001C86  EF11  F00E         	goto	l2784
  3548   001C8A  EF47  F00E         	goto	l312
  3549   001C8E                     l312:
  3550   001C8E  0012               	return		;funcret
  3551   001C90                     __end_of_motor_action:
  3552                           	callstack 0
  3553                           
  3554 ;; *************** function _spin_180 *****************
  3555 ;; Defined at:
  3556 ;;		line 136 in file "../dc_motor.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3559 ;;		 -> main@motorL(9), 
  3560 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3561 ;;		 -> main@motorR(9), 
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  i               2   31[COMRAM] int 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  1    wreg      void 
  3566 ;; Registers used:
  3567 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3575 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3576 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3577 ;;Total ram usage:        8 bytes
  3578 ;; Hardware stack levels used: 1
  3579 ;; Hardware stack levels required when called: 3
  3580 ;; This function calls:
  3581 ;;		_setMotorPWM
  3582 ;; This function is called by:
  3583 ;;		_main
  3584 ;;		_motor_action
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           	psect	text16
  3589   0020CA                     __ptext16:
  3590                           	callstack 0
  3591   0020CA                     _spin_180:
  3592                           	callstack 27
  3593   0020CA                     
  3594                           ;../dc_motor.c: 136: void spin_180(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 137: {;../dc_motor.c: 138:     mL->direction = 1;
  3595   0020CA  EE20 F001          	lfsr	2,1
  3596   0020CE  501A               	movf	spin_180@mL^0,w,c
  3597   0020D0  26D9               	addwf	fsr2l,f,c
  3598   0020D2  501B               	movf	(spin_180@mL+1)^0,w,c
  3599   0020D4  22DA               	addwfc	fsr2h,f,c
  3600   0020D6  0E01               	movlw	1
  3601   0020D8  6EDF               	movwf	indf2,c
  3602                           
  3603                           ;../dc_motor.c: 139:     mR->direction = 0;
  3604   0020DA  EE20 F001          	lfsr	2,1
  3605   0020DE  501C               	movf	spin_180@mR^0,w,c
  3606   0020E0  26D9               	addwf	fsr2l,f,c
  3607   0020E2  501D               	movf	(spin_180@mR+1)^0,w,c
  3608   0020E4  22DA               	addwfc	fsr2h,f,c
  3609   0020E6  0E00               	movlw	0
  3610   0020E8  6EDF               	movwf	indf2,c
  3611   0020EA                     
  3612                           ;../dc_motor.c: 140:     for (int i = 0;i<50;i = i + 2)
  3613   0020EA  0E00               	movlw	0
  3614   0020EC  6E21               	movwf	(spin_180@i+1)^0,c
  3615   0020EE  0E00               	movlw	0
  3616   0020F0  6E20               	movwf	spin_180@i^0,c
  3617   0020F2                     l2452:
  3618                           
  3619                           ;../dc_motor.c: 141:     {;../dc_motor.c: 142:         mL->power = i;
  3620   0020F2  C01A  FFD9         	movff	spin_180@mL,fsr2l
  3621   0020F6  C01B  FFDA         	movff	spin_180@mL+1,fsr2h
  3622   0020FA  C020  FFDF         	movff	spin_180@i,indf2
  3623   0020FE                     
  3624                           ;../dc_motor.c: 143:         mR->power = 50 + i;
  3625   0020FE  5020               	movf	spin_180@i^0,w,c
  3626   002100  0F32               	addlw	50
  3627   002102  C01C  FFD9         	movff	spin_180@mR,fsr2l
  3628   002106  C01D  FFDA         	movff	spin_180@mR+1,fsr2h
  3629   00210A  6EDF               	movwf	indf2,c
  3630   00210C                     
  3631                           ;../dc_motor.c: 144:         setMotorPWM(mL);
  3632   00210C  C01A  F00F         	movff	spin_180@mL,setMotorPWM@m
  3633   002110  C01B  F010         	movff	spin_180@mL+1,setMotorPWM@m+1
  3634   002114  ECA4  F00A         	call	_setMotorPWM	;wreg free
  3635   002118                     
  3636                           ;../dc_motor.c: 145:         setMotorPWM(mR);
  3637   002118  C01C  F00F         	movff	spin_180@mR,setMotorPWM@m
  3638   00211C  C01D  F010         	movff	spin_180@mR+1,setMotorPWM@m+1
  3639   002120  ECA4  F00A         	call	_setMotorPWM	;wreg free
  3640   002124                     
  3641                           ;../dc_motor.c: 146:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3642   002124  0E35               	movlw	53
  3643   002126                     u1737:
  3644   002126  2EE8               	decfsz	wreg,f,c
  3645   002128  D7FE               	bra	u1737
  3646   00212A  F000               	nop	
  3647   00212C                     
  3648                           ;../dc_motor.c: 147:     }
  3649   00212C  0E02               	movlw	2
  3650   00212E  2420               	addwf	spin_180@i^0,w,c
  3651   002130  6E20               	movwf	spin_180@i^0,c
  3652   002132  0E00               	movlw	0
  3653   002134  2021               	addwfc	(spin_180@i+1)^0,w,c
  3654   002136  6E21               	movwf	(spin_180@i+1)^0,c
  3655   002138  BE21               	btfsc	(spin_180@i+1)^0,7,c
  3656   00213A  EFA8  F010         	goto	u1411
  3657   00213E  5021               	movf	(spin_180@i+1)^0,w,c
  3658   002140  E109               	bnz	u1410
  3659   002142  0E32               	movlw	50
  3660   002144  5C20               	subwf	spin_180@i^0,w,c
  3661   002146  A0D8               	btfss	status,0,c
  3662   002148  EFA8  F010         	goto	u1411
  3663   00214C  EFAA  F010         	goto	u1410
  3664   002150                     u1411:
  3665   002150  EF79  F010         	goto	l2452
  3666   002154                     u1410:
  3667   002154                     
  3668                           ;../dc_motor.c: 148:     _delay((unsigned long)((290)*(64000000/4000.0)));
  3669   002154  0E18               	movlw	24
  3670   002156  6E1F               	movwf	(??_spin_180+1)^0,c
  3671   002158  0E8A               	movlw	138
  3672   00215A  6E1E               	movwf	??_spin_180^0,c
  3673   00215C  0EE8               	movlw	232
  3674   00215E                     u1747:
  3675   00215E  2EE8               	decfsz	wreg,f,c
  3676   002160  D7FE               	bra	u1747
  3677   002162  2E1E               	decfsz	??_spin_180^0,f,c
  3678   002164  D7FC               	bra	u1747
  3679   002166  2E1F               	decfsz	(??_spin_180+1)^0,f,c
  3680   002168  D7FA               	bra	u1747
  3681   00216A  0012               	return		;funcret
  3682   00216C                     __end_of_spin_180:
  3683                           	callstack 0
  3684                           
  3685 ;; *************** function _right_90 *****************
  3686 ;; Defined at:
  3687 ;;		line 106 in file "../dc_motor.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3690 ;;		 -> main@motorL(9), 
  3691 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3692 ;;		 -> main@motorR(9), 
  3693 ;; Auto vars:     Size  Location     Type
  3694 ;;  i               2   31[COMRAM] int 
  3695 ;; Return value:  Size  Location     Type
  3696 ;;                  1    wreg      void 
  3697 ;; Registers used:
  3698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3699 ;; Tracked objects:
  3700 ;;		On entry : 0/0
  3701 ;;		On exit  : 0/0
  3702 ;;		Unchanged: 0/0
  3703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3704 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3705 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3706 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3707 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3708 ;;Total ram usage:        8 bytes
  3709 ;; Hardware stack levels used: 1
  3710 ;; Hardware stack levels required when called: 3
  3711 ;; This function calls:
  3712 ;;		_setMotorPWM
  3713 ;; This function is called by:
  3714 ;;		_motor_action
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           	psect	text17
  3719   001F82                     __ptext17:
  3720                           	callstack 0
  3721   001F82                     _right_90:
  3722                           	callstack 26
  3723   001F82                     
  3724                           ;../dc_motor.c: 106: void right_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 107: {;../dc_motor.c: 108:     mL->direction = 1;
  3725   001F82  EE20 F001          	lfsr	2,1
  3726   001F86  501A               	movf	right_90@mL^0,w,c
  3727   001F88  26D9               	addwf	fsr2l,f,c
  3728   001F8A  501B               	movf	(right_90@mL+1)^0,w,c
  3729   001F8C  22DA               	addwfc	fsr2h,f,c
  3730   001F8E  0E01               	movlw	1
  3731   001F90  6EDF               	movwf	indf2,c
  3732                           
  3733                           ;../dc_motor.c: 109:     mR->direction = 0;
  3734   001F92  EE20 F001          	lfsr	2,1
  3735   001F96  501C               	movf	right_90@mR^0,w,c
  3736   001F98  26D9               	addwf	fsr2l,f,c
  3737   001F9A  501D               	movf	(right_90@mR+1)^0,w,c
  3738   001F9C  22DA               	addwfc	fsr2h,f,c
  3739   001F9E  0E00               	movlw	0
  3740   001FA0  6EDF               	movwf	indf2,c
  3741   001FA2                     
  3742                           ;../dc_motor.c: 110:     for (int i = 0;i<50;i = i + 2)
  3743   001FA2  0E00               	movlw	0
  3744   001FA4  6E21               	movwf	(right_90@i+1)^0,c
  3745   001FA6  0E00               	movlw	0
  3746   001FA8  6E20               	movwf	right_90@i^0,c
  3747   001FAA                     l2498:
  3748                           
  3749                           ;../dc_motor.c: 111:     {;../dc_motor.c: 112:         mL->power = i;
  3750   001FAA  C01A  FFD9         	movff	right_90@mL,fsr2l
  3751   001FAE  C01B  FFDA         	movff	right_90@mL+1,fsr2h
  3752   001FB2  C020  FFDF         	movff	right_90@i,indf2
  3753   001FB6                     
  3754                           ;../dc_motor.c: 113:         mR->power = 50 + i;
  3755   001FB6  5020               	movf	right_90@i^0,w,c
  3756   001FB8  0F32               	addlw	50
  3757   001FBA  C01C  FFD9         	movff	right_90@mR,fsr2l
  3758   001FBE  C01D  FFDA         	movff	right_90@mR+1,fsr2h
  3759   001FC2  6EDF               	movwf	indf2,c
  3760   001FC4                     
  3761                           ;../dc_motor.c: 114:         setMotorPWM(mL);
  3762   001FC4  C01A  F00F         	movff	right_90@mL,setMotorPWM@m
  3763   001FC8  C01B  F010         	movff	right_90@mL+1,setMotorPWM@m+1
  3764   001FCC  ECA4  F00A         	call	_setMotorPWM	;wreg free
  3765   001FD0                     
  3766                           ;../dc_motor.c: 115:         setMotorPWM(mR);
  3767   001FD0  C01C  F00F         	movff	right_90@mR,setMotorPWM@m
  3768   001FD4  C01D  F010         	movff	right_90@mR+1,setMotorPWM@m+1
  3769   001FD8  ECA4  F00A         	call	_setMotorPWM	;wreg free
  3770   001FDC                     
  3771                           ;../dc_motor.c: 116:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3772   001FDC  0E35               	movlw	53
  3773   001FDE                     u1757:
  3774   001FDE  2EE8               	decfsz	wreg,f,c
  3775   001FE0  D7FE               	bra	u1757
  3776   001FE2  F000               	nop	
  3777   001FE4                     
  3778                           ;../dc_motor.c: 117:     }
  3779   001FE4  0E02               	movlw	2
  3780   001FE6  2420               	addwf	right_90@i^0,w,c
  3781   001FE8  6E20               	movwf	right_90@i^0,c
  3782   001FEA  0E00               	movlw	0
  3783   001FEC  2021               	addwfc	(right_90@i+1)^0,w,c
  3784   001FEE  6E21               	movwf	(right_90@i+1)^0,c
  3785   001FF0  BE21               	btfsc	(right_90@i+1)^0,7,c
  3786   001FF2  EF04  F010         	goto	u1431
  3787   001FF6  5021               	movf	(right_90@i+1)^0,w,c
  3788   001FF8  E109               	bnz	u1430
  3789   001FFA  0E32               	movlw	50
  3790   001FFC  5C20               	subwf	right_90@i^0,w,c
  3791   001FFE  A0D8               	btfss	status,0,c
  3792   002000  EF04  F010         	goto	u1431
  3793   002004  EF06  F010         	goto	u1430
  3794   002008                     u1431:
  3795   002008  EFD5  F00F         	goto	l2498
  3796   00200C                     u1430:
  3797   00200C                     
  3798                           ;../dc_motor.c: 118:     _delay((unsigned long)((165)*(64000000/4000.0)));
  3799   00200C  0E0E               	movlw	14
  3800   00200E  6E1F               	movwf	(??_right_90+1)^0,c
  3801   002010  0E65               	movlw	101
  3802   002012  6E1E               	movwf	??_right_90^0,c
  3803   002014  0E87               	movlw	135
  3804   002016                     u1767:
  3805   002016  2EE8               	decfsz	wreg,f,c
  3806   002018  D7FE               	bra	u1767
  3807   00201A  2E1E               	decfsz	??_right_90^0,f,c
  3808   00201C  D7FC               	bra	u1767
  3809   00201E  2E1F               	decfsz	(??_right_90+1)^0,f,c
  3810   002020  D7FA               	bra	u1767
  3811   002022  F000               	nop	
  3812   002024  0012               	return		;funcret
  3813   002026                     __end_of_right_90:
  3814                           	callstack 0
  3815                           
  3816 ;; *************** function _right_135 *****************
  3817 ;; Defined at:
  3818 ;;		line 151 in file "../dc_motor.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3821 ;;		 -> main@motorL(9), 
  3822 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3823 ;;		 -> main@motorR(9), 
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;  i               2   31[COMRAM] int 
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  1    wreg      void 
  3828 ;; Registers used:
  3829 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3835 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3836 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3837 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3838 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3839 ;;Total ram usage:        8 bytes
  3840 ;; Hardware stack levels used: 1
  3841 ;; Hardware stack levels required when called: 3
  3842 ;; This function calls:
  3843 ;;		_setMotorPWM
  3844 ;; This function is called by:
  3845 ;;		_motor_action
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           	psect	text18
  3850   00216C                     __ptext18:
  3851                           	callstack 0
  3852   00216C                     _right_135:
  3853                           	callstack 26
  3854   00216C                     
  3855                           ;../dc_motor.c: 151: void right_135(struct DC_motor *mL, struct DC_motor *mR);../dc_moto
      +                          r.c: 152: {;../dc_motor.c: 153:     mL->direction = 1;
  3856   00216C  EE20 F001          	lfsr	2,1
  3857   002170  501A               	movf	right_135@mL^0,w,c
  3858   002172  26D9               	addwf	fsr2l,f,c
  3859   002174  501B               	movf	(right_135@mL+1)^0,w,c
  3860   002176  22DA               	addwfc	fsr2h,f,c
  3861   002178  0E01               	movlw	1
  3862   00217A  6EDF               	movwf	indf2,c
  3863                           
  3864                           ;../dc_motor.c: 154:     mR->direction = 0;
  3865   00217C  EE20 F001          	lfsr	2,1
  3866   002180  501C               	movf	right_135@mR^0,w,c
  3867   002182  26D9               	addwf	fsr2l,f,c
  3868   002184  501D               	movf	(right_135@mR+1)^0,w,c
  3869   002186  22DA               	addwfc	fsr2h,f,c
  3870   002188  0E00               	movlw	0
  3871   00218A  6EDF               	movwf	indf2,c
  3872   00218C                     
  3873                           ;../dc_motor.c: 155:     for (int i = 0;i<50;i = i + 2)
  3874   00218C  0E00               	movlw	0
  3875   00218E  6E21               	movwf	(right_135@i+1)^0,c
  3876   002190  0E00               	movlw	0
  3877   002192  6E20               	movwf	right_135@i^0,c
  3878   002194                     l2546:
  3879                           
  3880                           ;../dc_motor.c: 156:     {;../dc_motor.c: 157:         mL->power = i;
  3881   002194  C01A  FFD9         	movff	right_135@mL,fsr2l
  3882   002198  C01B  FFDA         	movff	right_135@mL+1,fsr2h
  3883   00219C  C020  FFDF         	movff	right_135@i,indf2
  3884   0021A0                     
  3885                           ;../dc_motor.c: 158:         mR->power = 50 + i;
  3886   0021A0  5020               	movf	right_135@i^0,w,c
  3887   0021A2  0F32               	addlw	50
  3888   0021A4  C01C  FFD9         	movff	right_135@mR,fsr2l
  3889   0021A8  C01D  FFDA         	movff	right_135@mR+1,fsr2h
  3890   0021AC  6EDF               	movwf	indf2,c
  3891   0021AE                     
  3892                           ;../dc_motor.c: 159:         setMotorPWM(mL);
  3893   0021AE  C01A  F00F         	movff	right_135@mL,setMotorPWM@m
  3894   0021B2  C01B  F010         	movff	right_135@mL+1,setMotorPWM@m+1
  3895   0021B6  ECA4  F00A         	call	_setMotorPWM	;wreg free
  3896   0021BA                     
  3897                           ;../dc_motor.c: 160:         setMotorPWM(mR);
  3898   0021BA  C01C  F00F         	movff	right_135@mR,setMotorPWM@m
  3899   0021BE  C01D  F010         	movff	right_135@mR+1,setMotorPWM@m+1
  3900   0021C2  ECA4  F00A         	call	_setMotorPWM	;wreg free
  3901   0021C6                     
  3902                           ;../dc_motor.c: 161:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3903   0021C6  0E35               	movlw	53
  3904   0021C8                     u1777:
  3905   0021C8  2EE8               	decfsz	wreg,f,c
  3906   0021CA  D7FE               	bra	u1777
  3907   0021CC  F000               	nop	
  3908   0021CE                     
  3909                           ;../dc_motor.c: 162:     }
  3910   0021CE  0E02               	movlw	2
  3911   0021D0  2420               	addwf	right_135@i^0,w,c
  3912   0021D2  6E20               	movwf	right_135@i^0,c
  3913   0021D4  0E00               	movlw	0
  3914   0021D6  2021               	addwfc	(right_135@i+1)^0,w,c
  3915   0021D8  6E21               	movwf	(right_135@i+1)^0,c
  3916   0021DA  BE21               	btfsc	(right_135@i+1)^0,7,c
  3917   0021DC  EFF9  F010         	goto	u1451
  3918   0021E0  5021               	movf	(right_135@i+1)^0,w,c
  3919   0021E2  E109               	bnz	u1450
  3920   0021E4  0E32               	movlw	50
  3921   0021E6  5C20               	subwf	right_135@i^0,w,c
  3922   0021E8  A0D8               	btfss	status,0,c
  3923   0021EA  EFF9  F010         	goto	u1451
  3924   0021EE  EFFB  F010         	goto	u1450
  3925   0021F2                     u1451:
  3926   0021F2  EFCA  F010         	goto	l2546
  3927   0021F6                     u1450:
  3928   0021F6                     
  3929                           ;../dc_motor.c: 163:     _delay((unsigned long)((230)*(64000000/4000.0)));
  3930   0021F6  0E13               	movlw	19
  3931   0021F8  6E1F               	movwf	(??_right_135+1)^0,c
  3932   0021FA  0EAC               	movlw	172
  3933   0021FC  6E1E               	movwf	??_right_135^0,c
  3934   0021FE  0E2A               	movlw	42
  3935   002200                     u1787:
  3936   002200  2EE8               	decfsz	wreg,f,c
  3937   002202  D7FE               	bra	u1787
  3938   002204  2E1E               	decfsz	??_right_135^0,f,c
  3939   002206  D7FC               	bra	u1787
  3940   002208  2E1F               	decfsz	(??_right_135+1)^0,f,c
  3941   00220A  D7FA               	bra	u1787
  3942   00220C  0012               	return		;funcret
  3943   00220E                     __end_of_right_135:
  3944                           	callstack 0
  3945                           
  3946 ;; *************** function _reverse *****************
  3947 ;; Defined at:
  3948 ;;		line 91 in file "../dc_motor.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3951 ;;		 -> main@motorL(9), 
  3952 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3953 ;;		 -> main@motorR(9), 
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;  i               2   31[COMRAM] int 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      void 
  3958 ;; Registers used:
  3959 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3965 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3966 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3967 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3968 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3969 ;;Total ram usage:        8 bytes
  3970 ;; Hardware stack levels used: 1
  3971 ;; Hardware stack levels required when called: 3
  3972 ;; This function calls:
  3973 ;;		_setMotorPWM
  3974 ;; This function is called by:
  3975 ;;		_motor_action
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text19
  3980   00220E                     __ptext19:
  3981                           	callstack 0
  3982   00220E                     _reverse:
  3983                           	callstack 26
  3984   00220E                     
  3985                           ;../dc_motor.c: 91: void reverse (struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 92: {;../dc_motor.c: 93:     mL->direction = 0;
  3986   00220E  EE20 F001          	lfsr	2,1
  3987   002212  501A               	movf	reverse@mL^0,w,c
  3988   002214  26D9               	addwf	fsr2l,f,c
  3989   002216  501B               	movf	(reverse@mL+1)^0,w,c
  3990   002218  22DA               	addwfc	fsr2h,f,c
  3991   00221A  0E00               	movlw	0
  3992   00221C  6EDF               	movwf	indf2,c
  3993                           
  3994                           ;../dc_motor.c: 94:     mR->direction = 0;
  3995   00221E  EE20 F001          	lfsr	2,1
  3996   002222  501C               	movf	reverse@mR^0,w,c
  3997   002224  26D9               	addwf	fsr2l,f,c
  3998   002226  501D               	movf	(reverse@mR+1)^0,w,c
  3999   002228  22DA               	addwfc	fsr2h,f,c
  4000   00222A  0E00               	movlw	0
  4001   00222C  6EDF               	movwf	indf2,c
  4002   00222E                     
  4003                           ;../dc_motor.c: 95:     for (int i=0;i<51;i=i + 2)
  4004   00222E  0E00               	movlw	0
  4005   002230  6E21               	movwf	(reverse@i+1)^0,c
  4006   002232  0E00               	movlw	0
  4007   002234  6E20               	movwf	reverse@i^0,c
  4008   002236                     l2476:
  4009                           
  4010                           ;../dc_motor.c: 96:     {;../dc_motor.c: 97:         mL->power = i;
  4011   002236  C01A  FFD9         	movff	reverse@mL,fsr2l
  4012   00223A  C01B  FFDA         	movff	reverse@mL+1,fsr2h
  4013   00223E  C020  FFDF         	movff	reverse@i,indf2
  4014                           
  4015                           ;../dc_motor.c: 98:         mR->power = i;
  4016   002242  C01C  FFD9         	movff	reverse@mR,fsr2l
  4017   002246  C01D  FFDA         	movff	reverse@mR+1,fsr2h
  4018   00224A  C020  FFDF         	movff	reverse@i,indf2
  4019   00224E                     
  4020                           ;../dc_motor.c: 99:         setMotorPWM(mL);
  4021   00224E  C01A  F00F         	movff	reverse@mL,setMotorPWM@m
  4022   002252  C01B  F010         	movff	reverse@mL+1,setMotorPWM@m+1
  4023   002256  ECA4  F00A         	call	_setMotorPWM	;wreg free
  4024   00225A                     
  4025                           ;../dc_motor.c: 100:         setMotorPWM(mR);
  4026   00225A  C01C  F00F         	movff	reverse@mR,setMotorPWM@m
  4027   00225E  C01D  F010         	movff	reverse@mR+1,setMotorPWM@m+1
  4028   002262  ECA4  F00A         	call	_setMotorPWM	;wreg free
  4029   002266                     
  4030                           ;../dc_motor.c: 101:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4031   002266  0E35               	movlw	53
  4032   002268                     u1797:
  4033   002268  2EE8               	decfsz	wreg,f,c
  4034   00226A  D7FE               	bra	u1797
  4035   00226C  F000               	nop	
  4036   00226E                     
  4037                           ;../dc_motor.c: 102:     }
  4038   00226E  0E02               	movlw	2
  4039   002270  2420               	addwf	reverse@i^0,w,c
  4040   002272  6E20               	movwf	reverse@i^0,c
  4041   002274  0E00               	movlw	0
  4042   002276  2021               	addwfc	(reverse@i+1)^0,w,c
  4043   002278  6E21               	movwf	(reverse@i+1)^0,c
  4044   00227A  BE21               	btfsc	(reverse@i+1)^0,7,c
  4045   00227C  EF49  F011         	goto	u1421
  4046   002280  5021               	movf	(reverse@i+1)^0,w,c
  4047   002282  E109               	bnz	u1420
  4048   002284  0E33               	movlw	51
  4049   002286  5C20               	subwf	reverse@i^0,w,c
  4050   002288  A0D8               	btfss	status,0,c
  4051   00228A  EF49  F011         	goto	u1421
  4052   00228E  EF4B  F011         	goto	u1420
  4053   002292                     u1421:
  4054   002292  EF1B  F011         	goto	l2476
  4055   002296                     u1420:
  4056   002296                     
  4057                           ;../dc_motor.c: 103:     _delay((unsigned long)((1100)*(64000000/4000.0)));
  4058   002296  0E5A               	movlw	90
  4059   002298  6E1F               	movwf	(??_reverse+1)^0,c
  4060   00229A  0E49               	movlw	73
  4061   00229C  6E1E               	movwf	??_reverse^0,c
  4062   00229E  0EE7               	movlw	231
  4063   0022A0                     u1807:
  4064   0022A0  2EE8               	decfsz	wreg,f,c
  4065   0022A2  D7FE               	bra	u1807
  4066   0022A4  2E1E               	decfsz	??_reverse^0,f,c
  4067   0022A6  D7FC               	bra	u1807
  4068   0022A8  2E1F               	decfsz	(??_reverse+1)^0,f,c
  4069   0022AA  D7FA               	bra	u1807
  4070   0022AC  F000               	nop	
  4071   0022AE  0012               	return		;funcret
  4072   0022B0                     __end_of_reverse:
  4073                           	callstack 0
  4074                           
  4075 ;; *************** function _left_90 *****************
  4076 ;; Defined at:
  4077 ;;		line 121 in file "../dc_motor.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4080 ;;		 -> main@motorL(9), 
  4081 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4082 ;;		 -> main@motorR(9), 
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;  i               2   31[COMRAM] int 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  1    wreg      void 
  4087 ;; Registers used:
  4088 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4094 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4095 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4096 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4097 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4098 ;;Total ram usage:        8 bytes
  4099 ;; Hardware stack levels used: 1
  4100 ;; Hardware stack levels required when called: 3
  4101 ;; This function calls:
  4102 ;;		_setMotorPWM
  4103 ;; This function is called by:
  4104 ;;		_motor_action
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           	psect	text20
  4109   002026                     __ptext20:
  4110                           	callstack 0
  4111   002026                     _left_90:
  4112                           	callstack 26
  4113   002026                     
  4114                           ;../dc_motor.c: 121: void left_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 122: {;../dc_motor.c: 123:     mL->direction = 0;
  4115   002026  EE20 F001          	lfsr	2,1
  4116   00202A  501A               	movf	left_90@mL^0,w,c
  4117   00202C  26D9               	addwf	fsr2l,f,c
  4118   00202E  501B               	movf	(left_90@mL+1)^0,w,c
  4119   002030  22DA               	addwfc	fsr2h,f,c
  4120   002032  0E00               	movlw	0
  4121   002034  6EDF               	movwf	indf2,c
  4122                           
  4123                           ;../dc_motor.c: 124:     mR->direction = 1;
  4124   002036  EE20 F001          	lfsr	2,1
  4125   00203A  501C               	movf	left_90@mR^0,w,c
  4126   00203C  26D9               	addwf	fsr2l,f,c
  4127   00203E  501D               	movf	(left_90@mR+1)^0,w,c
  4128   002040  22DA               	addwfc	fsr2h,f,c
  4129   002042  0E01               	movlw	1
  4130   002044  6EDF               	movwf	indf2,c
  4131   002046                     
  4132                           ;../dc_motor.c: 125:     for (int i = 0;i<50;i = i + 2)
  4133   002046  0E00               	movlw	0
  4134   002048  6E21               	movwf	(left_90@i+1)^0,c
  4135   00204A  0E00               	movlw	0
  4136   00204C  6E20               	movwf	left_90@i^0,c
  4137   00204E                     l2522:
  4138                           
  4139                           ;../dc_motor.c: 126:     {;../dc_motor.c: 127:         mL->power = 50 + i;
  4140   00204E  5020               	movf	left_90@i^0,w,c
  4141   002050  0F32               	addlw	50
  4142   002052  C01A  FFD9         	movff	left_90@mL,fsr2l
  4143   002056  C01B  FFDA         	movff	left_90@mL+1,fsr2h
  4144   00205A  6EDF               	movwf	indf2,c
  4145   00205C                     
  4146                           ;../dc_motor.c: 128:         mR->power = i;
  4147   00205C  C01C  FFD9         	movff	left_90@mR,fsr2l
  4148   002060  C01D  FFDA         	movff	left_90@mR+1,fsr2h
  4149   002064  C020  FFDF         	movff	left_90@i,indf2
  4150   002068                     
  4151                           ;../dc_motor.c: 129:         setMotorPWM(mL);
  4152   002068  C01A  F00F         	movff	left_90@mL,setMotorPWM@m
  4153   00206C  C01B  F010         	movff	left_90@mL+1,setMotorPWM@m+1
  4154   002070  ECA4  F00A         	call	_setMotorPWM	;wreg free
  4155   002074                     
  4156                           ;../dc_motor.c: 130:         setMotorPWM(mR);
  4157   002074  C01C  F00F         	movff	left_90@mR,setMotorPWM@m
  4158   002078  C01D  F010         	movff	left_90@mR+1,setMotorPWM@m+1
  4159   00207C  ECA4  F00A         	call	_setMotorPWM	;wreg free
  4160   002080                     
  4161                           ;../dc_motor.c: 131:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4162   002080  0E35               	movlw	53
  4163   002082                     u1817:
  4164   002082  2EE8               	decfsz	wreg,f,c
  4165   002084  D7FE               	bra	u1817
  4166   002086  F000               	nop	
  4167   002088                     
  4168                           ;../dc_motor.c: 132:     }
  4169   002088  0E02               	movlw	2
  4170   00208A  2420               	addwf	left_90@i^0,w,c
  4171   00208C  6E20               	movwf	left_90@i^0,c
  4172   00208E  0E00               	movlw	0
  4173   002090  2021               	addwfc	(left_90@i+1)^0,w,c
  4174   002092  6E21               	movwf	(left_90@i+1)^0,c
  4175   002094  BE21               	btfsc	(left_90@i+1)^0,7,c
  4176   002096  EF56  F010         	goto	u1441
  4177   00209A  5021               	movf	(left_90@i+1)^0,w,c
  4178   00209C  E109               	bnz	u1440
  4179   00209E  0E32               	movlw	50
  4180   0020A0  5C20               	subwf	left_90@i^0,w,c
  4181   0020A2  A0D8               	btfss	status,0,c
  4182   0020A4  EF56  F010         	goto	u1441
  4183   0020A8  EF58  F010         	goto	u1440
  4184   0020AC                     u1441:
  4185   0020AC  EF27  F010         	goto	l2522
  4186   0020B0                     u1440:
  4187   0020B0                     
  4188                           ;../dc_motor.c: 133:     _delay((unsigned long)((165)*(64000000/4000.0)));
  4189   0020B0  0E0E               	movlw	14
  4190   0020B2  6E1F               	movwf	(??_left_90+1)^0,c
  4191   0020B4  0E65               	movlw	101
  4192   0020B6  6E1E               	movwf	??_left_90^0,c
  4193   0020B8  0E87               	movlw	135
  4194   0020BA                     u1827:
  4195   0020BA  2EE8               	decfsz	wreg,f,c
  4196   0020BC  D7FE               	bra	u1827
  4197   0020BE  2E1E               	decfsz	??_left_90^0,f,c
  4198   0020C0  D7FC               	bra	u1827
  4199   0020C2  2E1F               	decfsz	(??_left_90+1)^0,f,c
  4200   0020C4  D7FA               	bra	u1827
  4201   0020C6  F000               	nop	
  4202   0020C8  0012               	return		;funcret
  4203   0020CA                     __end_of_left_90:
  4204                           	callstack 0
  4205                           
  4206 ;; *************** function _left_135 *****************
  4207 ;; Defined at:
  4208 ;;		line 166 in file "../dc_motor.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4211 ;;		 -> main@motorL(9), 
  4212 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4213 ;;		 -> main@motorR(9), 
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;  i               2   31[COMRAM] int 
  4216 ;; Return value:  Size  Location     Type
  4217 ;;                  1    wreg      void 
  4218 ;; Registers used:
  4219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4225 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4226 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4228 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4229 ;;Total ram usage:        8 bytes
  4230 ;; Hardware stack levels used: 1
  4231 ;; Hardware stack levels required when called: 3
  4232 ;; This function calls:
  4233 ;;		_setMotorPWM
  4234 ;; This function is called by:
  4235 ;;		_motor_action
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           	psect	text21
  4240   0022B0                     __ptext21:
  4241                           	callstack 0
  4242   0022B0                     _left_135:
  4243                           	callstack 26
  4244   0022B0                     
  4245                           ;../dc_motor.c: 166: void left_135(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 167: {;../dc_motor.c: 168:     mL->direction = 0;
  4246   0022B0  EE20 F001          	lfsr	2,1
  4247   0022B4  501A               	movf	left_135@mL^0,w,c
  4248   0022B6  26D9               	addwf	fsr2l,f,c
  4249   0022B8  501B               	movf	(left_135@mL+1)^0,w,c
  4250   0022BA  22DA               	addwfc	fsr2h,f,c
  4251   0022BC  0E00               	movlw	0
  4252   0022BE  6EDF               	movwf	indf2,c
  4253                           
  4254                           ;../dc_motor.c: 169:     mR->direction = 1;
  4255   0022C0  EE20 F001          	lfsr	2,1
  4256   0022C4  501C               	movf	left_135@mR^0,w,c
  4257   0022C6  26D9               	addwf	fsr2l,f,c
  4258   0022C8  501D               	movf	(left_135@mR+1)^0,w,c
  4259   0022CA  22DA               	addwfc	fsr2h,f,c
  4260   0022CC  0E01               	movlw	1
  4261   0022CE  6EDF               	movwf	indf2,c
  4262   0022D0                     
  4263                           ;../dc_motor.c: 170:     for (int i = 0;i<50;i = i + 2)
  4264   0022D0  0E00               	movlw	0
  4265   0022D2  6E21               	movwf	(left_135@i+1)^0,c
  4266   0022D4  0E00               	movlw	0
  4267   0022D6  6E20               	movwf	left_135@i^0,c
  4268   0022D8                     l2570:
  4269                           
  4270                           ;../dc_motor.c: 171:     {;../dc_motor.c: 172:         mL->power = 50 + i;
  4271   0022D8  5020               	movf	left_135@i^0,w,c
  4272   0022DA  0F32               	addlw	50
  4273   0022DC  C01A  FFD9         	movff	left_135@mL,fsr2l
  4274   0022E0  C01B  FFDA         	movff	left_135@mL+1,fsr2h
  4275   0022E4  6EDF               	movwf	indf2,c
  4276   0022E6                     
  4277                           ;../dc_motor.c: 173:         mR->power = i;
  4278   0022E6  C01C  FFD9         	movff	left_135@mR,fsr2l
  4279   0022EA  C01D  FFDA         	movff	left_135@mR+1,fsr2h
  4280   0022EE  C020  FFDF         	movff	left_135@i,indf2
  4281   0022F2                     
  4282                           ;../dc_motor.c: 174:         setMotorPWM(mL);
  4283   0022F2  C01A  F00F         	movff	left_135@mL,setMotorPWM@m
  4284   0022F6  C01B  F010         	movff	left_135@mL+1,setMotorPWM@m+1
  4285   0022FA  ECA4  F00A         	call	_setMotorPWM	;wreg free
  4286   0022FE                     
  4287                           ;../dc_motor.c: 175:         setMotorPWM(mR);
  4288   0022FE  C01C  F00F         	movff	left_135@mR,setMotorPWM@m
  4289   002302  C01D  F010         	movff	left_135@mR+1,setMotorPWM@m+1
  4290   002306  ECA4  F00A         	call	_setMotorPWM	;wreg free
  4291   00230A                     
  4292                           ;../dc_motor.c: 176:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4293   00230A  0E35               	movlw	53
  4294   00230C                     u1837:
  4295   00230C  2EE8               	decfsz	wreg,f,c
  4296   00230E  D7FE               	bra	u1837
  4297   002310  F000               	nop	
  4298   002312                     
  4299                           ;../dc_motor.c: 177:     }
  4300   002312  0E02               	movlw	2
  4301   002314  2420               	addwf	left_135@i^0,w,c
  4302   002316  6E20               	movwf	left_135@i^0,c
  4303   002318  0E00               	movlw	0
  4304   00231A  2021               	addwfc	(left_135@i+1)^0,w,c
  4305   00231C  6E21               	movwf	(left_135@i+1)^0,c
  4306   00231E  BE21               	btfsc	(left_135@i+1)^0,7,c
  4307   002320  EF9B  F011         	goto	u1461
  4308   002324  5021               	movf	(left_135@i+1)^0,w,c
  4309   002326  E109               	bnz	u1460
  4310   002328  0E32               	movlw	50
  4311   00232A  5C20               	subwf	left_135@i^0,w,c
  4312   00232C  A0D8               	btfss	status,0,c
  4313   00232E  EF9B  F011         	goto	u1461
  4314   002332  EF9D  F011         	goto	u1460
  4315   002336                     u1461:
  4316   002336  EF6C  F011         	goto	l2570
  4317   00233A                     u1460:
  4318   00233A                     
  4319                           ;../dc_motor.c: 178:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4320   00233A  0E13               	movlw	19
  4321   00233C  6E1F               	movwf	(??_left_135+1)^0,c
  4322   00233E  0EAC               	movlw	172
  4323   002340  6E1E               	movwf	??_left_135^0,c
  4324   002342  0E2A               	movlw	42
  4325   002344                     u1847:
  4326   002344  2EE8               	decfsz	wreg,f,c
  4327   002346  D7FE               	bra	u1847
  4328   002348  2E1E               	decfsz	??_left_135^0,f,c
  4329   00234A  D7FC               	bra	u1847
  4330   00234C  2E1F               	decfsz	(??_left_135+1)^0,f,c
  4331   00234E  D7FA               	bra	u1847
  4332   002350  0012               	return		;funcret
  4333   002352                     __end_of_left_135:
  4334                           	callstack 0
  4335                           
  4336 ;; *************** function _initUSART4 *****************
  4337 ;; Defined at:
  4338 ;;		line 5 in file "../serial.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  1    wreg      void 
  4345 ;; Registers used:
  4346 ;;		wreg, status,2
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4356 ;;Total ram usage:        0 bytes
  4357 ;; Hardware stack levels used: 1
  4358 ;; Hardware stack levels required when called: 1
  4359 ;; This function calls:
  4360 ;;		Nothing
  4361 ;; This function is called by:
  4362 ;;		_main
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text22
  4367   002938                     __ptext22:
  4368                           	callstack 0
  4369   002938                     _initUSART4:
  4370                           	callstack 29
  4371   002938                     
  4372                           ;../serial.c: 9:     RC0PPS = 0x12;
  4373   002938  0E12               	movlw	18
  4374   00293A  010E               	movlb	14	; () banked
  4375   00293C  6F62               	movwf	98,b	;volatile
  4376                           
  4377                           ;../serial.c: 10:     RX4PPS = 0x11;
  4378   00293E  0E11               	movlw	17
  4379   002940  6F15               	movwf	21,b	;volatile
  4380   002942                     
  4381                           ; BSR set to: 14
  4382                           ;../serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  4383   002942  97E9               	bcf	233,3,b	;volatile
  4384   002944                     
  4385                           ; BSR set to: 14
  4386                           ;../serial.c: 13:     TX4STAbits.BRGH = 0;
  4387   002944  95E8               	bcf	232,2,b	;volatile
  4388                           
  4389                           ;../serial.c: 14:     SP4BRGL = 103;
  4390   002946  0E67               	movlw	103
  4391   002948  6FE5               	movwf	229,b	;volatile
  4392                           
  4393                           ;../serial.c: 15:     SP4BRGH = 0;
  4394   00294A  0E00               	movlw	0
  4395   00294C  6FE6               	movwf	230,b	;volatile
  4396   00294E                     
  4397                           ; BSR set to: 14
  4398                           ;../serial.c: 17:     RC4STAbits.CREN = 1;
  4399   00294E  89E7               	bsf	231,4,b	;volatile
  4400   002950                     
  4401                           ; BSR set to: 14
  4402                           ;../serial.c: 18:     TX4STAbits.TXEN = 1;
  4403   002950  8BE8               	bsf	232,5,b	;volatile
  4404   002952                     
  4405                           ; BSR set to: 14
  4406                           ;../serial.c: 19:     RC4STAbits.SPEN = 1;
  4407   002952  8FE7               	bsf	231,7,b	;volatile
  4408   002954                     
  4409                           ; BSR set to: 14
  4410   002954  0012               	return		;funcret
  4411   002956                     __end_of_initUSART4:
  4412                           	callstack 0
  4413                           
  4414 ;; *************** function _initDCmotorsPWM *****************
  4415 ;; Defined at:
  4416 ;;		line 5 in file "../dc_motor.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;  PWMperiod       2    0[COMRAM] int 
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;		None
  4421 ;; Return value:  Size  Location     Type
  4422 ;;                  1    wreg      void 
  4423 ;; Registers used:
  4424 ;;		wreg, status,2
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4430 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4434 ;;Total ram usage:        2 bytes
  4435 ;; Hardware stack levels used: 1
  4436 ;; Hardware stack levels required when called: 1
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_main
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           	psect	text23
  4445   002766                     __ptext23:
  4446                           	callstack 0
  4447   002766                     _initDCmotorsPWM:
  4448                           	callstack 29
  4449   002766                     
  4450                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  4451   002766  9485               	bcf	133,2,c	;volatile
  4452                           
  4453                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  4454   002768  9885               	bcf	133,4,c	;volatile
  4455                           
  4456                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  4457   00276A  9E83               	bcf	131,7,c	;volatile
  4458                           
  4459                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  4460   00276C  9C87               	bcf	135,6,c	;volatile
  4461                           
  4462                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  4463   00276E  947D               	bcf	125,2,c	;volatile
  4464                           
  4465                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  4466   002770  987D               	bcf	125,4,c	;volatile
  4467                           
  4468                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  4469   002772  9E7B               	bcf	123,7,c	;volatile
  4470                           
  4471                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  4472   002774  9C7F               	bcf	127,6,c	;volatile
  4473   002776                     
  4474                           ;../dc_motor.c: 17:     T2CONbits.CKPS=0b0011;
  4475   002776  50BD               	movf	189,w,c	;volatile
  4476   002778  0B8F               	andlw	-113
  4477   00277A  0930               	iorlw	48
  4478   00277C  6EBD               	movwf	189,c	;volatile
  4479                           
  4480                           ;../dc_motor.c: 18:     T2HLTbits.MODE=0b00000;
  4481   00277E  0EE0               	movlw	-32
  4482   002780  16BE               	andwf	190,f,c	;volatile
  4483                           
  4484                           ;../dc_motor.c: 19:     T2CLKCONbits.CS=0b0001;
  4485   002782  50BF               	movf	191,w,c	;volatile
  4486   002784  0BF0               	andlw	-16
  4487   002786  0901               	iorlw	1
  4488   002788  6EBF               	movwf	191,c	;volatile
  4489   00278A                     
  4490                           ;../dc_motor.c: 23:     T2PR=PWMperiod;
  4491   00278A  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4492   00278E                     
  4493                           ;../dc_motor.c: 24:     T2CONbits.ON=1;
  4494   00278E  8EBD               	bsf	189,7,c	;volatile
  4495                           
  4496                           ;../dc_motor.c: 26:     RE2PPS=0x0A;
  4497   002790  0E0A               	movlw	10
  4498   002792  010E               	movlb	14	; () banked
  4499   002794  6F74               	movwf	116,b	;volatile
  4500                           
  4501                           ;../dc_motor.c: 27:     RC7PPS=0x0B;
  4502   002796  0E0B               	movlw	11
  4503   002798  6F69               	movwf	105,b	;volatile
  4504                           
  4505                           ;../dc_motor.c: 29:     PWM6DCH=0;
  4506   00279A  0E00               	movlw	0
  4507   00279C  6EA3               	movwf	163,c	;volatile
  4508                           
  4509                           ;../dc_motor.c: 30:     PWM7DCH=0;
  4510   00279E  0E00               	movlw	0
  4511   0027A0  6EA0               	movwf	160,c	;volatile
  4512   0027A2                     
  4513                           ; BSR set to: 14
  4514                           ;../dc_motor.c: 32:     PWM6CONbits.EN = 1;
  4515   0027A2  8EA4               	bsf	164,7,c	;volatile
  4516   0027A4                     
  4517                           ; BSR set to: 14
  4518                           ;../dc_motor.c: 33:     PWM7CONbits.EN = 1;
  4519   0027A4  8EA1               	bsf	161,7,c	;volatile
  4520   0027A6                     
  4521                           ; BSR set to: 14
  4522   0027A6  0012               	return		;funcret
  4523   0027A8                     __end_of_initDCmotorsPWM:
  4524                           	callstack 0
  4525                           
  4526 ;; *************** function _forward *****************
  4527 ;; Defined at:
  4528 ;;		line 77 in file "../dc_motor.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  4531 ;;		 -> main@motorL(9), 
  4532 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  4533 ;;		 -> main@motorR(9), 
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;  i               2   29[COMRAM] int 
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4545 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4546 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4548 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4549 ;;Total ram usage:        6 bytes
  4550 ;; Hardware stack levels used: 1
  4551 ;; Hardware stack levels required when called: 3
  4552 ;; This function calls:
  4553 ;;		_setMotorPWM
  4554 ;; This function is called by:
  4555 ;;		_main
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text24
  4560   0023E0                     __ptext24:
  4561                           	callstack 0
  4562   0023E0                     _forward:
  4563                           	callstack 27
  4564   0023E0                     
  4565                           ;../dc_motor.c: 77: void forward(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c
      +                          : 78: {;../dc_motor.c: 79:     mL->direction = 1;
  4566   0023E0  EE20 F001          	lfsr	2,1
  4567   0023E4  501A               	movf	forward@mL^0,w,c
  4568   0023E6  26D9               	addwf	fsr2l,f,c
  4569   0023E8  501B               	movf	(forward@mL+1)^0,w,c
  4570   0023EA  22DA               	addwfc	fsr2h,f,c
  4571   0023EC  0E01               	movlw	1
  4572   0023EE  6EDF               	movwf	indf2,c
  4573                           
  4574                           ;../dc_motor.c: 80:     mR->direction = 1;
  4575   0023F0  EE20 F001          	lfsr	2,1
  4576   0023F4  501C               	movf	forward@mR^0,w,c
  4577   0023F6  26D9               	addwf	fsr2l,f,c
  4578   0023F8  501D               	movf	(forward@mR+1)^0,w,c
  4579   0023FA  22DA               	addwfc	fsr2h,f,c
  4580   0023FC  0E01               	movlw	1
  4581   0023FE  6EDF               	movwf	indf2,c
  4582   002400                     
  4583                           ;../dc_motor.c: 81:     for (int i=0;i<31;i = i+2)
  4584   002400  0E00               	movlw	0
  4585   002402  6E1F               	movwf	(forward@i+1)^0,c
  4586   002404  0E00               	movlw	0
  4587   002406  6E1E               	movwf	forward@i^0,c
  4588   002408                     l2738:
  4589                           
  4590                           ;../dc_motor.c: 82:     {;../dc_motor.c: 83:         mL->power = i;
  4591   002408  C01A  FFD9         	movff	forward@mL,fsr2l
  4592   00240C  C01B  FFDA         	movff	forward@mL+1,fsr2h
  4593   002410  C01E  FFDF         	movff	forward@i,indf2
  4594                           
  4595                           ;../dc_motor.c: 84:         mR->power = i;
  4596   002414  C01C  FFD9         	movff	forward@mR,fsr2l
  4597   002418  C01D  FFDA         	movff	forward@mR+1,fsr2h
  4598   00241C  C01E  FFDF         	movff	forward@i,indf2
  4599   002420                     
  4600                           ;../dc_motor.c: 85:         setMotorPWM(mL);
  4601   002420  C01A  F00F         	movff	forward@mL,setMotorPWM@m
  4602   002424  C01B  F010         	movff	forward@mL+1,setMotorPWM@m+1
  4603   002428  ECA4  F00A         	call	_setMotorPWM	;wreg free
  4604   00242C                     
  4605                           ;../dc_motor.c: 86:         setMotorPWM(mR);
  4606   00242C  C01C  F00F         	movff	forward@mR,setMotorPWM@m
  4607   002430  C01D  F010         	movff	forward@mR+1,setMotorPWM@m+1
  4608   002434  ECA4  F00A         	call	_setMotorPWM	;wreg free
  4609   002438                     
  4610                           ;../dc_motor.c: 87:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4611   002438  0E6A               	movlw	106
  4612   00243A                     u1857:
  4613   00243A  2EE8               	decfsz	wreg,f,c
  4614   00243C  D7FE               	bra	u1857
  4615   00243E  D000               	nop2	
  4616   002440                     
  4617                           ;../dc_motor.c: 88:     }
  4618   002440  0E02               	movlw	2
  4619   002442  241E               	addwf	forward@i^0,w,c
  4620   002444  6E1E               	movwf	forward@i^0,c
  4621   002446  0E00               	movlw	0
  4622   002448  201F               	addwfc	(forward@i+1)^0,w,c
  4623   00244A  6E1F               	movwf	(forward@i+1)^0,c
  4624   00244C  BE1F               	btfsc	(forward@i+1)^0,7,c
  4625   00244E  EF32  F012         	goto	u1541
  4626   002452  501F               	movf	(forward@i+1)^0,w,c
  4627   002454  E109               	bnz	u1540
  4628   002456  0E1F               	movlw	31
  4629   002458  5C1E               	subwf	forward@i^0,w,c
  4630   00245A  A0D8               	btfss	status,0,c
  4631   00245C  EF32  F012         	goto	u1541
  4632   002460  EF34  F012         	goto	u1540
  4633   002464                     u1541:
  4634   002464  EF04  F012         	goto	l2738
  4635   002468                     u1540:
  4636   002468  0012               	return		;funcret
  4637   00246A                     __end_of_forward:
  4638                           	callstack 0
  4639                           
  4640 ;; *************** function _setMotorPWM *****************
  4641 ;; Defined at:
  4642 ;;		line 38 in file "../dc_motor.c"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;  m               2   14[COMRAM] PTR struct DC_motor
  4645 ;;		 -> main@motorR(9), main@motorL(9), 
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;  PWMduty         2   23[COMRAM] int 
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4657 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4658 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4659 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4660 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4661 ;;Total ram usage:       11 bytes
  4662 ;; Hardware stack levels used: 1
  4663 ;; Hardware stack levels required when called: 2
  4664 ;; This function calls:
  4665 ;;		___awdiv
  4666 ;;		___wmul
  4667 ;; This function is called by:
  4668 ;;		_main
  4669 ;;		_stop
  4670 ;;		_forward
  4671 ;;		_reverse
  4672 ;;		_right_90
  4673 ;;		_left_90
  4674 ;;		_spin_180
  4675 ;;		_right_135
  4676 ;;		_left_135
  4677 ;; This function uses a non-reentrant model
  4678 ;;
  4679                           
  4680                           	psect	text25
  4681   001548                     __ptext25:
  4682                           	callstack 0
  4683   001548                     _setMotorPWM:
  4684                           	callstack 27
  4685   001548                     
  4686                           ;../dc_motor.c: 38: void setMotorPWM(struct DC_motor *m);../dc_motor.c: 39: {;../dc_moto
      +                          r.c: 40:  int PWMduty;;../dc_motor.c: 42:  if (m->direction){
  4687   001548  EE20 F001          	lfsr	2,1
  4688   00154C  500F               	movf	setMotorPWM@m^0,w,c
  4689   00154E  26D9               	addwf	fsr2l,f,c
  4690   001550  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4691   001552  22DA               	addwfc	fsr2h,f,c
  4692   001554  50DF               	movf	indf2,w,c
  4693   001556  B4D8               	btfsc	status,2,c
  4694   001558  EFB0  F00A         	goto	u1341
  4695   00155C  EFB2  F00A         	goto	u1340
  4696   001560                     u1341:
  4697   001560  EFE3  F00A         	goto	l2366
  4698   001564                     u1340:
  4699   001564                     
  4700                           ;../dc_motor.c: 44:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  4701   001564  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  4702   001568  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4703   00156C  50DF               	movf	indf2,w,c
  4704   00156E  6E11               	movwf	??_setMotorPWM^0,c
  4705   001570  5011               	movf	??_setMotorPWM^0,w,c
  4706   001572  6E01               	movwf	___wmul@multiplier^0,c
  4707   001574  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4708   001576  EE20 F007          	lfsr	2,7
  4709   00157A  500F               	movf	setMotorPWM@m^0,w,c
  4710   00157C  26D9               	addwf	fsr2l,f,c
  4711   00157E  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4712   001580  22DA               	addwfc	fsr2h,f,c
  4713   001582  CFDE F003          	movff	postinc2,___wmul@multiplicand
  4714   001586  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  4715   00158A  EC69  F014         	call	___wmul	;wreg free
  4716   00158E  C001  F007         	movff	?___wmul,___awdiv@dividend
  4717   001592  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  4718   001596  0E00               	movlw	0
  4719   001598  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  4720   00159A  0E64               	movlw	100
  4721   00159C  6E09               	movwf	___awdiv@divisor^0,c
  4722   00159E  ECAD  F00E         	call	___awdiv	;wreg free
  4723   0015A2  EE20 F007          	lfsr	2,7
  4724   0015A6  500F               	movf	setMotorPWM@m^0,w,c
  4725   0015A8  26D9               	addwf	fsr2l,f,c
  4726   0015AA  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4727   0015AC  22DA               	addwfc	fsr2h,f,c
  4728   0015AE  CFDE F012          	movff	postinc2,??_setMotorPWM+1
  4729   0015B2  CFDD F013          	movff	postdec2,??_setMotorPWM+2
  4730   0015B6  5007               	movf	?___awdiv^0,w,c
  4731   0015B8  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  4732   0015BA  6E18               	movwf	setMotorPWM@PWMduty^0,c
  4733   0015BC  5008               	movf	(?___awdiv+1)^0,w,c
  4734   0015BE  5813               	subwfb	(??_setMotorPWM+2)^0,w,c
  4735   0015C0  6E19               	movwf	(setMotorPWM@PWMduty+1)^0,c
  4736                           
  4737                           ;../dc_motor.c: 45:  }
  4738   0015C2  EF06  F00B         	goto	l2368
  4739   0015C6                     l2366:
  4740                           
  4741                           ;../dc_motor.c: 48:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  4742   0015C6  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  4743   0015CA  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4744   0015CE  50DF               	movf	indf2,w,c
  4745   0015D0  6E11               	movwf	??_setMotorPWM^0,c
  4746   0015D2  5011               	movf	??_setMotorPWM^0,w,c
  4747   0015D4  6E01               	movwf	___wmul@multiplier^0,c
  4748   0015D6  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4749   0015D8  EE20 F007          	lfsr	2,7
  4750   0015DC  500F               	movf	setMotorPWM@m^0,w,c
  4751   0015DE  26D9               	addwf	fsr2l,f,c
  4752   0015E0  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4753   0015E2  22DA               	addwfc	fsr2h,f,c
  4754   0015E4  CFDE F003          	movff	postinc2,___wmul@multiplicand
  4755   0015E8  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  4756   0015EC  EC69  F014         	call	___wmul	;wreg free
  4757   0015F0  C001  F007         	movff	?___wmul,___awdiv@dividend
  4758   0015F4  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  4759   0015F8  0E00               	movlw	0
  4760   0015FA  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  4761   0015FC  0E64               	movlw	100
  4762   0015FE  6E09               	movwf	___awdiv@divisor^0,c
  4763   001600  ECAD  F00E         	call	___awdiv	;wreg free
  4764   001604  C007  F018         	movff	?___awdiv,setMotorPWM@PWMduty
  4765   001608  C008  F019         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4766   00160C                     l2368:
  4767                           
  4768                           ;../dc_motor.c: 51:  *(m->dutyHighByte) = PWMduty;
  4769   00160C  EE20 F002          	lfsr	2,2
  4770   001610  500F               	movf	setMotorPWM@m^0,w,c
  4771   001612  26D9               	addwf	fsr2l,f,c
  4772   001614  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4773   001616  22DA               	addwfc	fsr2h,f,c
  4774   001618  CFDE F011          	movff	postinc2,??_setMotorPWM
  4775   00161C  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  4776   001620  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  4777   001624  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4778   001628  C018  FFDF         	movff	setMotorPWM@PWMduty,indf2
  4779   00162C                     
  4780                           ;../dc_motor.c: 53:  if (m->direction){
  4781   00162C  EE20 F001          	lfsr	2,1
  4782   001630  500F               	movf	setMotorPWM@m^0,w,c
  4783   001632  26D9               	addwf	fsr2l,f,c
  4784   001634  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4785   001636  22DA               	addwfc	fsr2h,f,c
  4786   001638  50DF               	movf	indf2,w,c
  4787   00163A  B4D8               	btfsc	status,2,c
  4788   00163C  EF22  F00B         	goto	u1351
  4789   001640  EF24  F00B         	goto	u1350
  4790   001644                     u1351:
  4791   001644  EF59  F00B         	goto	l2374
  4792   001648                     u1350:
  4793   001648                     
  4794                           ;../dc_motor.c: 54:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  4795   001648  EE20 F004          	lfsr	2,4
  4796   00164C  500F               	movf	setMotorPWM@m^0,w,c
  4797   00164E  26D9               	addwf	fsr2l,f,c
  4798   001650  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4799   001652  22DA               	addwfc	fsr2h,f,c
  4800   001654  CFDE F011          	movff	postinc2,??_setMotorPWM
  4801   001658  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  4802   00165C  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  4803   001660  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4804   001664  EE10 F004          	lfsr	1,4
  4805   001668  500F               	movf	setMotorPWM@m^0,w,c
  4806   00166A  26E1               	addwf	fsr1l,f,c
  4807   00166C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4808   00166E  22E2               	addwfc	fsr1h,f,c
  4809   001670  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  4810   001674  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  4811   001678  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  4812   00167C  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  4813   001680  50E7               	movf	indf1,w,c
  4814   001682  6E15               	movwf	(??_setMotorPWM+4)^0,c
  4815   001684  EE10 F006          	lfsr	1,6
  4816   001688  500F               	movf	setMotorPWM@m^0,w,c
  4817   00168A  26E1               	addwf	fsr1l,f,c
  4818   00168C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4819   00168E  22E2               	addwfc	fsr1h,f,c
  4820   001690  50E7               	movf	indf1,w,c
  4821   001692  6E16               	movwf	(??_setMotorPWM+5)^0,c
  4822   001694  0E01               	movlw	1
  4823   001696  6E17               	movwf	(??_setMotorPWM+6)^0,c
  4824   001698  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  4825   00169A  EF51  F00B         	goto	u1364
  4826   00169E                     u1365:
  4827   00169E  90D8               	bcf	status,0,c
  4828   0016A0  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  4829   0016A2                     u1364:
  4830   0016A2  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  4831   0016A4  EF4F  F00B         	goto	u1365
  4832   0016A8  5017               	movf	(??_setMotorPWM+6)^0,w,c
  4833   0016AA  1015               	iorwf	(??_setMotorPWM+4)^0,w,c
  4834   0016AC  6EDF               	movwf	indf2,c
  4835                           
  4836                           ;../dc_motor.c: 55:  } else {
  4837   0016AE  EF8D  F00B         	goto	l259
  4838   0016B2                     l2374:
  4839                           
  4840                           ;../dc_motor.c: 56:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  4841   0016B2  EE20 F004          	lfsr	2,4
  4842   0016B6  500F               	movf	setMotorPWM@m^0,w,c
  4843   0016B8  26D9               	addwf	fsr2l,f,c
  4844   0016BA  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4845   0016BC  22DA               	addwfc	fsr2h,f,c
  4846   0016BE  CFDE F011          	movff	postinc2,??_setMotorPWM
  4847   0016C2  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  4848   0016C6  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  4849   0016CA  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4850   0016CE  EE10 F004          	lfsr	1,4
  4851   0016D2  500F               	movf	setMotorPWM@m^0,w,c
  4852   0016D4  26E1               	addwf	fsr1l,f,c
  4853   0016D6  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4854   0016D8  22E2               	addwfc	fsr1h,f,c
  4855   0016DA  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  4856   0016DE  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  4857   0016E2  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  4858   0016E6  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  4859   0016EA  50E7               	movf	indf1,w,c
  4860   0016EC  6E15               	movwf	(??_setMotorPWM+4)^0,c
  4861   0016EE  EE10 F006          	lfsr	1,6
  4862   0016F2  500F               	movf	setMotorPWM@m^0,w,c
  4863   0016F4  26E1               	addwf	fsr1l,f,c
  4864   0016F6  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4865   0016F8  22E2               	addwfc	fsr1h,f,c
  4866   0016FA  50E7               	movf	indf1,w,c
  4867   0016FC  6E16               	movwf	(??_setMotorPWM+5)^0,c
  4868   0016FE  0E01               	movlw	1
  4869   001700  6E17               	movwf	(??_setMotorPWM+6)^0,c
  4870   001702  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  4871   001704  EF86  F00B         	goto	u1374
  4872   001708                     u1375:
  4873   001708  90D8               	bcf	status,0,c
  4874   00170A  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  4875   00170C                     u1374:
  4876   00170C  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  4877   00170E  EF84  F00B         	goto	u1375
  4878   001712  5017               	movf	(??_setMotorPWM+6)^0,w,c
  4879   001714  0AFF               	xorlw	255
  4880   001716  1415               	andwf	(??_setMotorPWM+4)^0,w,c
  4881   001718  6EDF               	movwf	indf2,c
  4882   00171A                     l259:
  4883   00171A  0012               	return		;funcret
  4884   00171C                     __end_of_setMotorPWM:
  4885                           	callstack 0
  4886                           
  4887 ;; *************** function ___wmul *****************
  4888 ;; Defined at:
  4889 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  multiplier      2    0[COMRAM] unsigned int 
  4892 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  product         2    4[COMRAM] unsigned int 
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  2    0[COMRAM] unsigned int 
  4897 ;; Registers used:
  4898 ;;		wreg, status,2, status,0, prodl, prodh
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4904 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4905 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4907 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4908 ;;Total ram usage:        6 bytes
  4909 ;; Hardware stack levels used: 1
  4910 ;; Hardware stack levels required when called: 1
  4911 ;; This function calls:
  4912 ;;		Nothing
  4913 ;; This function is called by:
  4914 ;;		_setMotorPWM
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           	psect	text26
  4919   0028D2                     __ptext26:
  4920                           	callstack 0
  4921   0028D2                     ___wmul:
  4922                           	callstack 27
  4923   0028D2  5001               	movf	___wmul@multiplier^0,w,c
  4924   0028D4  0203               	mulwf	___wmul@multiplicand^0,c
  4925   0028D6  CFF3 F005          	movff	prodl,___wmul@product
  4926   0028DA  CFF4 F006          	movff	prodh,___wmul@product+1
  4927   0028DE  5001               	movf	___wmul@multiplier^0,w,c
  4928   0028E0  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  4929   0028E2  50F3               	movf	243,w,c
  4930   0028E4  2606               	addwf	(___wmul@product+1)^0,f,c
  4931   0028E6  5002               	movf	(___wmul@multiplier+1)^0,w,c
  4932   0028E8  0203               	mulwf	___wmul@multiplicand^0,c
  4933   0028EA  50F3               	movf	243,w,c
  4934   0028EC  2606               	addwf	(___wmul@product+1)^0,f,c
  4935   0028EE  C005  F001         	movff	___wmul@product,?___wmul
  4936   0028F2  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4937   0028F6  0012               	return		;funcret
  4938   0028F8                     __end_of___wmul:
  4939                           	callstack 0
  4940                           
  4941 ;; *************** function ___awdiv *****************
  4942 ;; Defined at:
  4943 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;  dividend        2    6[COMRAM] int 
  4946 ;;  divisor         2    8[COMRAM] int 
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;  quotient        2   12[COMRAM] int 
  4949 ;;  sign            1   11[COMRAM] unsigned char 
  4950 ;;  counter         1   10[COMRAM] unsigned char 
  4951 ;; Return value:  Size  Location     Type
  4952 ;;                  2    6[COMRAM] int 
  4953 ;; Registers used:
  4954 ;;		wreg, status,2, status,0
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4960 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4961 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4963 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4964 ;;Total ram usage:        8 bytes
  4965 ;; Hardware stack levels used: 1
  4966 ;; Hardware stack levels required when called: 1
  4967 ;; This function calls:
  4968 ;;		Nothing
  4969 ;; This function is called by:
  4970 ;;		_setMotorPWM
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           	psect	text27
  4975   001D5A                     __ptext27:
  4976                           	callstack 0
  4977   001D5A                     ___awdiv:
  4978                           	callstack 27
  4979   001D5A  0E00               	movlw	0
  4980   001D5C  6E0C               	movwf	___awdiv@sign^0,c
  4981   001D5E  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
  4982   001D60  EFB6  F00E         	goto	u1160
  4983   001D64  EFB4  F00E         	goto	u1161
  4984   001D68                     u1161:
  4985   001D68  EFBC  F00E         	goto	l2244
  4986   001D6C                     u1160:
  4987   001D6C  6C09               	negf	___awdiv@divisor^0,c
  4988   001D6E  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  4989   001D70  B0D8               	btfsc	status,0,c
  4990   001D72  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  4991   001D74  0E01               	movlw	1
  4992   001D76  6E0C               	movwf	___awdiv@sign^0,c
  4993   001D78                     l2244:
  4994   001D78  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
  4995   001D7A  EFC3  F00E         	goto	u1170
  4996   001D7E  EFC1  F00E         	goto	u1171
  4997   001D82                     u1171:
  4998   001D82  EFC9  F00E         	goto	l2250
  4999   001D86                     u1170:
  5000   001D86  6C07               	negf	___awdiv@dividend^0,c
  5001   001D88  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  5002   001D8A  B0D8               	btfsc	status,0,c
  5003   001D8C  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  5004   001D8E  0E01               	movlw	1
  5005   001D90  1A0C               	xorwf	___awdiv@sign^0,f,c
  5006   001D92                     l2250:
  5007   001D92  0E00               	movlw	0
  5008   001D94  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  5009   001D96  0E00               	movlw	0
  5010   001D98  6E0D               	movwf	___awdiv@quotient^0,c
  5011   001D9A  5009               	movf	___awdiv@divisor^0,w,c
  5012   001D9C  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  5013   001D9E  B4D8               	btfsc	status,2,c
  5014   001DA0  EFD4  F00E         	goto	u1181
  5015   001DA4  EFD6  F00E         	goto	u1180
  5016   001DA8                     u1181:
  5017   001DA8  EFFE  F00E         	goto	l2272
  5018   001DAC                     u1180:
  5019   001DAC  0E01               	movlw	1
  5020   001DAE  6E0B               	movwf	___awdiv@counter^0,c
  5021   001DB0  EFDE  F00E         	goto	l2258
  5022   001DB4                     l2256:
  5023   001DB4  90D8               	bcf	status,0,c
  5024   001DB6  3609               	rlcf	___awdiv@divisor^0,f,c
  5025   001DB8  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  5026   001DBA  2A0B               	incf	___awdiv@counter^0,f,c
  5027   001DBC                     l2258:
  5028   001DBC  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  5029   001DBE  EFE3  F00E         	goto	u1191
  5030   001DC2  EFE5  F00E         	goto	u1190
  5031   001DC6                     u1191:
  5032   001DC6  EFDA  F00E         	goto	l2256
  5033   001DCA                     u1190:
  5034   001DCA                     l2260:
  5035   001DCA  90D8               	bcf	status,0,c
  5036   001DCC  360D               	rlcf	___awdiv@quotient^0,f,c
  5037   001DCE  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  5038   001DD0  5009               	movf	___awdiv@divisor^0,w,c
  5039   001DD2  5C07               	subwf	___awdiv@dividend^0,w,c
  5040   001DD4  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5041   001DD6  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  5042   001DD8  A0D8               	btfss	status,0,c
  5043   001DDA  EFF1  F00E         	goto	u1201
  5044   001DDE  EFF3  F00E         	goto	u1200
  5045   001DE2                     u1201:
  5046   001DE2  EFF8  F00E         	goto	l2268
  5047   001DE6                     u1200:
  5048   001DE6  5009               	movf	___awdiv@divisor^0,w,c
  5049   001DE8  5E07               	subwf	___awdiv@dividend^0,f,c
  5050   001DEA  500A               	movf	(___awdiv@divisor+1)^0,w,c
  5051   001DEC  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  5052   001DEE  800D               	bsf	___awdiv@quotient^0,0,c
  5053   001DF0                     l2268:
  5054   001DF0  90D8               	bcf	status,0,c
  5055   001DF2  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  5056   001DF4  3209               	rrcf	___awdiv@divisor^0,f,c
  5057   001DF6  2E0B               	decfsz	___awdiv@counter^0,f,c
  5058   001DF8  EFE5  F00E         	goto	l2260
  5059   001DFC                     l2272:
  5060   001DFC  500C               	movf	___awdiv@sign^0,w,c
  5061   001DFE  B4D8               	btfsc	status,2,c
  5062   001E00  EF04  F00F         	goto	u1211
  5063   001E04  EF06  F00F         	goto	u1210
  5064   001E08                     u1211:
  5065   001E08  EF0A  F00F         	goto	l2276
  5066   001E0C                     u1210:
  5067   001E0C  6C0D               	negf	___awdiv@quotient^0,c
  5068   001E0E  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  5069   001E10  B0D8               	btfsc	status,0,c
  5070   001E12  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  5071   001E14                     l2276:
  5072   001E14  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  5073   001E18  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  5074   001E1C  0012               	return		;funcret
  5075   001E1E                     __end_of___awdiv:
  5076                           	callstack 0
  5077                           
  5078 ;; *************** function _color_read *****************
  5079 ;; Defined at:
  5080 ;;		line 111 in file "../color.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;  rgb             2   11[COMRAM] PTR struct RGB_val
  5083 ;;		 -> main@RGB_recorded(8), main@RGB_calibrated(8), 
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;		None
  5086 ;; Return value:  Size  Location     Type
  5087 ;;                  1    wreg      void 
  5088 ;; Registers used:
  5089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5095 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5097 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5098 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5099 ;;Total ram usage:        4 bytes
  5100 ;; Hardware stack levels used: 1
  5101 ;; Hardware stack levels required when called: 4
  5102 ;; This function calls:
  5103 ;;		_color_read_Blue
  5104 ;;		_color_read_Green
  5105 ;;		_color_read_Luminosity
  5106 ;;		_color_read_Red
  5107 ;; This function is called by:
  5108 ;;		_main
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           	psect	text28
  5113   001EDC                     __ptext28:
  5114                           	callstack 0
  5115   001EDC                     _color_read:
  5116                           	callstack 26
  5117   001EDC                     
  5118                           ;../color.c: 111: void color_read(struct RGB_val *rgb);../color.c: 112: {;../color.c: 11
      +                          3:     rgb->L = color_read_Luminosity();
  5119   001EDC  EC19  F013         	call	_color_read_Luminosity	;wreg free
  5120   001EE0  C00C  FFD9         	movff	color_read@rgb,fsr2l
  5121   001EE4  C00D  FFDA         	movff	color_read@rgb+1,fsr2h
  5122   001EE8  C005  FFDE         	movff	?_color_read_Luminosity,postinc2
  5123   001EEC  C006  FFDD         	movff	?_color_read_Luminosity+1,postdec2
  5124   001EF0                     
  5125                           ;../color.c: 114:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5126   001EF0  0E09               	movlw	9
  5127   001EF2  6E0F               	movwf	(??_color_read+1)^0,c
  5128   001EF4  0E1E               	movlw	30
  5129   001EF6  6E0E               	movwf	??_color_read^0,c
  5130   001EF8  0EE4               	movlw	228
  5131   001EFA                     u1867:
  5132   001EFA  2EE8               	decfsz	wreg,f,c
  5133   001EFC  D7FE               	bra	u1867
  5134   001EFE  2E0E               	decfsz	??_color_read^0,f,c
  5135   001F00  D7FC               	bra	u1867
  5136   001F02  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5137   001F04  D7FA               	bra	u1867
  5138   001F06  D000               	nop2	
  5139   001F08                     
  5140                           ;../color.c: 115:     rgb->R = color_read_Red();
  5141   001F08  ECF1  F012         	call	_color_read_Red	;wreg free
  5142   001F0C  EE20 F002          	lfsr	2,2
  5143   001F10  500C               	movf	color_read@rgb^0,w,c
  5144   001F12  26D9               	addwf	fsr2l,f,c
  5145   001F14  500D               	movf	(color_read@rgb+1)^0,w,c
  5146   001F16  22DA               	addwfc	fsr2h,f,c
  5147   001F18  C005  FFDE         	movff	?_color_read_Red,postinc2
  5148   001F1C  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  5149                           
  5150                           ;../color.c: 116:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5151   001F20  0E09               	movlw	9
  5152   001F22  6E0F               	movwf	(??_color_read+1)^0,c
  5153   001F24  0E1E               	movlw	30
  5154   001F26  6E0E               	movwf	??_color_read^0,c
  5155   001F28  0EE4               	movlw	228
  5156   001F2A                     u1877:
  5157   001F2A  2EE8               	decfsz	wreg,f,c
  5158   001F2C  D7FE               	bra	u1877
  5159   001F2E  2E0E               	decfsz	??_color_read^0,f,c
  5160   001F30  D7FC               	bra	u1877
  5161   001F32  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5162   001F34  D7FA               	bra	u1877
  5163   001F36  D000               	nop2	
  5164   001F38                     
  5165                           ;../color.c: 117:     rgb->G = color_read_Green();
  5166   001F38  EC41  F013         	call	_color_read_Green	;wreg free
  5167   001F3C  EE20 F004          	lfsr	2,4
  5168   001F40  500C               	movf	color_read@rgb^0,w,c
  5169   001F42  26D9               	addwf	fsr2l,f,c
  5170   001F44  500D               	movf	(color_read@rgb+1)^0,w,c
  5171   001F46  22DA               	addwfc	fsr2h,f,c
  5172   001F48  C005  FFDE         	movff	?_color_read_Green,postinc2
  5173   001F4C  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  5174   001F50                     
  5175                           ;../color.c: 118:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5176   001F50  0E09               	movlw	9
  5177   001F52  6E0F               	movwf	(??_color_read+1)^0,c
  5178   001F54  0E1E               	movlw	30
  5179   001F56  6E0E               	movwf	??_color_read^0,c
  5180   001F58  0EE4               	movlw	228
  5181   001F5A                     u1887:
  5182   001F5A  2EE8               	decfsz	wreg,f,c
  5183   001F5C  D7FE               	bra	u1887
  5184   001F5E  2E0E               	decfsz	??_color_read^0,f,c
  5185   001F60  D7FC               	bra	u1887
  5186   001F62  2E0F               	decfsz	(??_color_read+1)^0,f,c
  5187   001F64  D7FA               	bra	u1887
  5188   001F66  D000               	nop2	
  5189                           
  5190                           ;../color.c: 119:     rgb->B = color_read_Blue();
  5191   001F68  EC69  F013         	call	_color_read_Blue	;wreg free
  5192   001F6C  EE20 F006          	lfsr	2,6
  5193   001F70  500C               	movf	color_read@rgb^0,w,c
  5194   001F72  26D9               	addwf	fsr2l,f,c
  5195   001F74  500D               	movf	(color_read@rgb+1)^0,w,c
  5196   001F76  22DA               	addwfc	fsr2h,f,c
  5197   001F78  C005  FFDE         	movff	?_color_read_Blue,postinc2
  5198   001F7C  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  5199   001F80  0012               	return		;funcret
  5200   001F82                     __end_of_color_read:
  5201                           	callstack 0
  5202                           
  5203 ;; *************** function _color_read_Red *****************
  5204 ;; Defined at:
  5205 ;;		line 69 in file "../color.c"
  5206 ;; Parameters:    Size  Location     Type
  5207 ;;		None
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;  tmp             2    9[COMRAM] unsigned int 
  5210 ;; Return value:  Size  Location     Type
  5211 ;;                  2    4[COMRAM] unsigned int 
  5212 ;; Registers used:
  5213 ;;		wreg, status,2, status,0, cstack
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5219 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5221 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5222 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5223 ;;Total ram usage:        7 bytes
  5224 ;; Hardware stack levels used: 1
  5225 ;; Hardware stack levels required when called: 3
  5226 ;; This function calls:
  5227 ;;		_I2C_2_Master_Read
  5228 ;;		_I2C_2_Master_RepStart
  5229 ;;		_I2C_2_Master_Start
  5230 ;;		_I2C_2_Master_Stop
  5231 ;;		_I2C_2_Master_Write
  5232 ;; This function is called by:
  5233 ;;		_color_read
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           	psect	text29
  5238   0025E2                     __ptext29:
  5239                           	callstack 0
  5240   0025E2                     _color_read_Red:
  5241                           	callstack 26
  5242   0025E2                     
  5243                           ;../color.c: 71:  unsigned int tmp;;../color.c: 72:  I2C_2_Master_Start();
  5244   0025E2  ECD2  F014         	call	_I2C_2_Master_Start	;wreg free
  5245                           
  5246                           ;../color.c: 73:  I2C_2_Master_Write(0x52 | 0x00);
  5247   0025E6  0E52               	movlw	82
  5248   0025E8  ECC2  F014         	call	_I2C_2_Master_Write
  5249                           
  5250                           ;../color.c: 74:  I2C_2_Master_Write(0xA0 | 0x16);
  5251   0025EC  0EB6               	movlw	182
  5252   0025EE  ECC2  F014         	call	_I2C_2_Master_Write
  5253                           
  5254                           ;../color.c: 75:  I2C_2_Master_RepStart();
  5255   0025F2  ECC8  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5256                           
  5257                           ;../color.c: 76:  I2C_2_Master_Write(0x52 | 0x01);
  5258   0025F6  0E53               	movlw	83
  5259   0025F8  ECC2  F014         	call	_I2C_2_Master_Write
  5260                           
  5261                           ;../color.c: 77:  tmp=I2C_2_Master_Read(1);
  5262   0025FC  0E01               	movlw	1
  5263   0025FE  ECD4  F013         	call	_I2C_2_Master_Read
  5264   002602  6E07               	movwf	??_color_read_Red^0,c
  5265   002604  5007               	movf	??_color_read_Red^0,w,c
  5266   002606  6E0A               	movwf	color_read_Red@tmp^0,c
  5267   002608  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  5268                           
  5269                           ;../color.c: 78:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5270   00260A  0E00               	movlw	0
  5271   00260C  ECD4  F013         	call	_I2C_2_Master_Read
  5272   002610  6E07               	movwf	??_color_read_Red^0,c
  5273   002612  5007               	movf	??_color_read_Red^0,w,c
  5274   002614  6E09               	movwf	(??_color_read_Red+2)^0,c
  5275   002616  6A08               	clrf	(??_color_read_Red+1)^0,c
  5276   002618  500A               	movf	color_read_Red@tmp^0,w,c
  5277   00261A  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  5278   00261C  6E0A               	movwf	color_read_Red@tmp^0,c
  5279   00261E  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  5280   002620  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  5281   002622  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5282                           
  5283                           ;../color.c: 79:  I2C_2_Master_Stop();
  5284   002624  ECCD  F014         	call	_I2C_2_Master_Stop	;wreg free
  5285   002628                     
  5286                           ;../color.c: 80:  return tmp;
  5287   002628  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5288   00262C  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5289   002630  0012               	return		;funcret
  5290   002632                     __end_of_color_read_Red:
  5291                           	callstack 0
  5292                           
  5293 ;; *************** function _color_read_Luminosity *****************
  5294 ;; Defined at:
  5295 ;;		line 55 in file "../color.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;		None
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;  tmp             2    9[COMRAM] unsigned int 
  5300 ;; Return value:  Size  Location     Type
  5301 ;;                  2    4[COMRAM] unsigned int 
  5302 ;; Registers used:
  5303 ;;		wreg, status,2, status,0, cstack
  5304 ;; Tracked objects:
  5305 ;;		On entry : 0/0
  5306 ;;		On exit  : 0/0
  5307 ;;		Unchanged: 0/0
  5308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5309 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5310 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5311 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5312 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5313 ;;Total ram usage:        7 bytes
  5314 ;; Hardware stack levels used: 1
  5315 ;; Hardware stack levels required when called: 3
  5316 ;; This function calls:
  5317 ;;		_I2C_2_Master_Read
  5318 ;;		_I2C_2_Master_RepStart
  5319 ;;		_I2C_2_Master_Start
  5320 ;;		_I2C_2_Master_Stop
  5321 ;;		_I2C_2_Master_Write
  5322 ;; This function is called by:
  5323 ;;		_color_read
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           	psect	text30
  5328   002632                     __ptext30:
  5329                           	callstack 0
  5330   002632                     _color_read_Luminosity:
  5331                           	callstack 26
  5332   002632                     
  5333                           ;../color.c: 57:  unsigned int tmp;;../color.c: 58:  I2C_2_Master_Start();
  5334   002632  ECD2  F014         	call	_I2C_2_Master_Start	;wreg free
  5335                           
  5336                           ;../color.c: 59:  I2C_2_Master_Write(0x52 | 0x00);
  5337   002636  0E52               	movlw	82
  5338   002638  ECC2  F014         	call	_I2C_2_Master_Write
  5339                           
  5340                           ;../color.c: 60:  I2C_2_Master_Write(0xA0 | 0x14);
  5341   00263C  0EB4               	movlw	180
  5342   00263E  ECC2  F014         	call	_I2C_2_Master_Write
  5343                           
  5344                           ;../color.c: 61:  I2C_2_Master_RepStart();
  5345   002642  ECC8  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5346                           
  5347                           ;../color.c: 62:  I2C_2_Master_Write(0x52 | 0x01);
  5348   002646  0E53               	movlw	83
  5349   002648  ECC2  F014         	call	_I2C_2_Master_Write
  5350                           
  5351                           ;../color.c: 63:  tmp=I2C_2_Master_Read(1);
  5352   00264C  0E01               	movlw	1
  5353   00264E  ECD4  F013         	call	_I2C_2_Master_Read
  5354   002652  6E07               	movwf	??_color_read_Luminosity^0,c
  5355   002654  5007               	movf	??_color_read_Luminosity^0,w,c
  5356   002656  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5357   002658  6A0B               	clrf	(color_read_Luminosity@tmp+1)^0,c
  5358                           
  5359                           ;../color.c: 64:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5360   00265A  0E00               	movlw	0
  5361   00265C  ECD4  F013         	call	_I2C_2_Master_Read
  5362   002660  6E07               	movwf	??_color_read_Luminosity^0,c
  5363   002662  5007               	movf	??_color_read_Luminosity^0,w,c
  5364   002664  6E09               	movwf	(??_color_read_Luminosity+2)^0,c
  5365   002666  6A08               	clrf	(??_color_read_Luminosity+1)^0,c
  5366   002668  500A               	movf	color_read_Luminosity@tmp^0,w,c
  5367   00266A  1008               	iorwf	(??_color_read_Luminosity+1)^0,w,c
  5368   00266C  6E0A               	movwf	color_read_Luminosity@tmp^0,c
  5369   00266E  500B               	movf	(color_read_Luminosity@tmp+1)^0,w,c
  5370   002670  1009               	iorwf	(??_color_read_Luminosity+2)^0,w,c
  5371   002672  6E0B               	movwf	(color_read_Luminosity@tmp+1)^0,c
  5372                           
  5373                           ;../color.c: 65:  I2C_2_Master_Stop();
  5374   002674  ECCD  F014         	call	_I2C_2_Master_Stop	;wreg free
  5375   002678                     
  5376                           ;../color.c: 66:  return tmp;
  5377   002678  C00A  F005         	movff	color_read_Luminosity@tmp,?_color_read_Luminosity
  5378   00267C  C00B  F006         	movff	color_read_Luminosity@tmp+1,?_color_read_Luminosity+1
  5379   002680  0012               	return		;funcret
  5380   002682                     __end_of_color_read_Luminosity:
  5381                           	callstack 0
  5382                           
  5383 ;; *************** function _color_read_Green *****************
  5384 ;; Defined at:
  5385 ;;		line 83 in file "../color.c"
  5386 ;; Parameters:    Size  Location     Type
  5387 ;;		None
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;  tmp             2    9[COMRAM] unsigned int 
  5390 ;; Return value:  Size  Location     Type
  5391 ;;                  2    4[COMRAM] unsigned int 
  5392 ;; Registers used:
  5393 ;;		wreg, status,2, status,0, cstack
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 0/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5399 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5400 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5401 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5402 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5403 ;;Total ram usage:        7 bytes
  5404 ;; Hardware stack levels used: 1
  5405 ;; Hardware stack levels required when called: 3
  5406 ;; This function calls:
  5407 ;;		_I2C_2_Master_Read
  5408 ;;		_I2C_2_Master_RepStart
  5409 ;;		_I2C_2_Master_Start
  5410 ;;		_I2C_2_Master_Stop
  5411 ;;		_I2C_2_Master_Write
  5412 ;; This function is called by:
  5413 ;;		_color_read
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           	psect	text31
  5418   002682                     __ptext31:
  5419                           	callstack 0
  5420   002682                     _color_read_Green:
  5421                           	callstack 26
  5422   002682                     
  5423                           ;../color.c: 85:  unsigned int tmp;;../color.c: 86:  I2C_2_Master_Start();
  5424   002682  ECD2  F014         	call	_I2C_2_Master_Start	;wreg free
  5425                           
  5426                           ;../color.c: 87:  I2C_2_Master_Write(0x52 | 0x00);
  5427   002686  0E52               	movlw	82
  5428   002688  ECC2  F014         	call	_I2C_2_Master_Write
  5429                           
  5430                           ;../color.c: 88:  I2C_2_Master_Write(0xA0 | 0x18);
  5431   00268C  0EB8               	movlw	184
  5432   00268E  ECC2  F014         	call	_I2C_2_Master_Write
  5433                           
  5434                           ;../color.c: 89:  I2C_2_Master_RepStart();
  5435   002692  ECC8  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5436                           
  5437                           ;../color.c: 90:  I2C_2_Master_Write(0x52 | 0x01);
  5438   002696  0E53               	movlw	83
  5439   002698  ECC2  F014         	call	_I2C_2_Master_Write
  5440                           
  5441                           ;../color.c: 91:  tmp=I2C_2_Master_Read(1);
  5442   00269C  0E01               	movlw	1
  5443   00269E  ECD4  F013         	call	_I2C_2_Master_Read
  5444   0026A2  6E07               	movwf	??_color_read_Green^0,c
  5445   0026A4  5007               	movf	??_color_read_Green^0,w,c
  5446   0026A6  6E0A               	movwf	color_read_Green@tmp^0,c
  5447   0026A8  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5448                           
  5449                           ;../color.c: 92:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5450   0026AA  0E00               	movlw	0
  5451   0026AC  ECD4  F013         	call	_I2C_2_Master_Read
  5452   0026B0  6E07               	movwf	??_color_read_Green^0,c
  5453   0026B2  5007               	movf	??_color_read_Green^0,w,c
  5454   0026B4  6E09               	movwf	(??_color_read_Green+2)^0,c
  5455   0026B6  6A08               	clrf	(??_color_read_Green+1)^0,c
  5456   0026B8  500A               	movf	color_read_Green@tmp^0,w,c
  5457   0026BA  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5458   0026BC  6E0A               	movwf	color_read_Green@tmp^0,c
  5459   0026BE  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5460   0026C0  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5461   0026C2  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5462                           
  5463                           ;../color.c: 93:  I2C_2_Master_Stop();
  5464   0026C4  ECCD  F014         	call	_I2C_2_Master_Stop	;wreg free
  5465   0026C8                     
  5466                           ;../color.c: 94:  return tmp;
  5467   0026C8  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5468   0026CC  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5469   0026D0  0012               	return		;funcret
  5470   0026D2                     __end_of_color_read_Green:
  5471                           	callstack 0
  5472                           
  5473 ;; *************** function _color_read_Blue *****************
  5474 ;; Defined at:
  5475 ;;		line 97 in file "../color.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;		None
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;  tmp             2    9[COMRAM] unsigned int 
  5480 ;; Return value:  Size  Location     Type
  5481 ;;                  2    4[COMRAM] unsigned int 
  5482 ;; Registers used:
  5483 ;;		wreg, status,2, status,0, cstack
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5489 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5490 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5491 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5492 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5493 ;;Total ram usage:        7 bytes
  5494 ;; Hardware stack levels used: 1
  5495 ;; Hardware stack levels required when called: 3
  5496 ;; This function calls:
  5497 ;;		_I2C_2_Master_Read
  5498 ;;		_I2C_2_Master_RepStart
  5499 ;;		_I2C_2_Master_Start
  5500 ;;		_I2C_2_Master_Stop
  5501 ;;		_I2C_2_Master_Write
  5502 ;; This function is called by:
  5503 ;;		_color_read
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           	psect	text32
  5508   0026D2                     __ptext32:
  5509                           	callstack 0
  5510   0026D2                     _color_read_Blue:
  5511                           	callstack 26
  5512   0026D2                     
  5513                           ;../color.c: 99:  unsigned int tmp;;../color.c: 100:  I2C_2_Master_Start();
  5514   0026D2  ECD2  F014         	call	_I2C_2_Master_Start	;wreg free
  5515                           
  5516                           ;../color.c: 101:  I2C_2_Master_Write(0x52 | 0x00);
  5517   0026D6  0E52               	movlw	82
  5518   0026D8  ECC2  F014         	call	_I2C_2_Master_Write
  5519                           
  5520                           ;../color.c: 102:  I2C_2_Master_Write(0xA0 | 0x1A);
  5521   0026DC  0EBA               	movlw	186
  5522   0026DE  ECC2  F014         	call	_I2C_2_Master_Write
  5523                           
  5524                           ;../color.c: 103:  I2C_2_Master_RepStart();
  5525   0026E2  ECC8  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5526                           
  5527                           ;../color.c: 104:  I2C_2_Master_Write(0x52 | 0x01);
  5528   0026E6  0E53               	movlw	83
  5529   0026E8  ECC2  F014         	call	_I2C_2_Master_Write
  5530                           
  5531                           ;../color.c: 105:  tmp=I2C_2_Master_Read(1);
  5532   0026EC  0E01               	movlw	1
  5533   0026EE  ECD4  F013         	call	_I2C_2_Master_Read
  5534   0026F2  6E07               	movwf	??_color_read_Blue^0,c
  5535   0026F4  5007               	movf	??_color_read_Blue^0,w,c
  5536   0026F6  6E0A               	movwf	color_read_Blue@tmp^0,c
  5537   0026F8  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5538                           
  5539                           ;../color.c: 106:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5540   0026FA  0E00               	movlw	0
  5541   0026FC  ECD4  F013         	call	_I2C_2_Master_Read
  5542   002700  6E07               	movwf	??_color_read_Blue^0,c
  5543   002702  5007               	movf	??_color_read_Blue^0,w,c
  5544   002704  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5545   002706  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5546   002708  500A               	movf	color_read_Blue@tmp^0,w,c
  5547   00270A  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5548   00270C  6E0A               	movwf	color_read_Blue@tmp^0,c
  5549   00270E  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5550   002710  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5551   002712  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5552                           
  5553                           ;../color.c: 107:  I2C_2_Master_Stop();
  5554   002714  ECCD  F014         	call	_I2C_2_Master_Stop	;wreg free
  5555   002718                     
  5556                           ;../color.c: 108:  return tmp;
  5557   002718  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5558   00271C  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5559   002720  0012               	return		;funcret
  5560   002722                     __end_of_color_read_Blue:
  5561                           	callstack 0
  5562                           
  5563 ;; *************** function _I2C_2_Master_RepStart *****************
  5564 ;; Defined at:
  5565 ;;		line 33 in file "../i2c.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;		None
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      void 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2, status,0, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5583 ;;Total ram usage:        0 bytes
  5584 ;; Hardware stack levels used: 1
  5585 ;; Hardware stack levels required when called: 2
  5586 ;; This function calls:
  5587 ;;		_I2C_2_Master_Idle
  5588 ;; This function is called by:
  5589 ;;		_color_read_Luminosity
  5590 ;;		_color_read_Red
  5591 ;;		_color_read_Green
  5592 ;;		_color_read_Blue
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           	psect	text33
  5597   002990                     __ptext33:
  5598                           	callstack 0
  5599   002990                     _I2C_2_Master_RepStart:
  5600                           	callstack 26
  5601   002990                     
  5602                           ;../i2c.c: 35:   I2C_2_Master_Idle();
  5603   002990  EC42  F014         	call	_I2C_2_Master_Idle	;wreg free
  5604   002994                     
  5605                           ;../i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5606   002994  010E               	movlb	14	; () banked
  5607   002996  83DA               	bsf	218,1,b	;volatile
  5608   002998                     
  5609                           ; BSR set to: 14
  5610   002998  0012               	return		;funcret
  5611   00299A                     __end_of_I2C_2_Master_RepStart:
  5612                           	callstack 0
  5613                           
  5614 ;; *************** function _I2C_2_Master_Read *****************
  5615 ;; Defined at:
  5616 ;;		line 51 in file "../i2c.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;  ack             1    wreg     unsigned char 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;  ack             1    2[COMRAM] unsigned char 
  5621 ;;  tmp             1    3[COMRAM] unsigned char 
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  1    wreg      unsigned char 
  5624 ;; Registers used:
  5625 ;;		wreg, status,2, status,0, cstack
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5632 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5633 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5634 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5635 ;;Total ram usage:        3 bytes
  5636 ;; Hardware stack levels used: 1
  5637 ;; Hardware stack levels required when called: 2
  5638 ;; This function calls:
  5639 ;;		_I2C_2_Master_Idle
  5640 ;; This function is called by:
  5641 ;;		_color_read_Luminosity
  5642 ;;		_color_read_Red
  5643 ;;		_color_read_Green
  5644 ;;		_color_read_Blue
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           	psect	text34
  5649   0027A8                     __ptext34:
  5650                           	callstack 0
  5651   0027A8                     _I2C_2_Master_Read:
  5652                           	callstack 26
  5653                           
  5654                           ; BSR set to: 14
  5655                           ;incstack = 0
  5656                           ;I2C_2_Master_Read@ack stored from wreg
  5657   0027A8  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  5658   0027AA                     
  5659                           ;../i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);../i2c.c: 52: {;../i2c
      +                          .c: 53:   unsigned char tmp;;../i2c.c: 54:   I2C_2_Master_Idle();
  5660   0027AA  EC42  F014         	call	_I2C_2_Master_Idle	;wreg free
  5661   0027AE                     
  5662                           ;../i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5663   0027AE  010E               	movlb	14	; () banked
  5664   0027B0  87DA               	bsf	218,3,b	;volatile
  5665                           
  5666                           ;../i2c.c: 56:   I2C_2_Master_Idle();
  5667   0027B2  EC42  F014         	call	_I2C_2_Master_Idle	;wreg free
  5668   0027B6                     
  5669                           ;../i2c.c: 57:   tmp = SSP2BUF;
  5670   0027B6  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5671                           
  5672                           ;../i2c.c: 58:   I2C_2_Master_Idle();
  5673   0027BA  EC42  F014         	call	_I2C_2_Master_Idle	;wreg free
  5674   0027BE                     
  5675                           ;../i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5676   0027BE  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  5677   0027C0  B4D8               	btfsc	status,2,c
  5678   0027C2  EFE5  F013         	goto	u1321
  5679   0027C6  EFE9  F013         	goto	u1320
  5680   0027CA                     u1321:
  5681   0027CA  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5682   0027CC  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  5683   0027CE  EFEA  F013         	goto	u1338
  5684   0027D2                     u1320:
  5685   0027D2  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5686   0027D4                     u1338:
  5687   0027D4  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  5688   0027D6  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  5689   0027D8  010E               	movlb	14	; () banked
  5690   0027DA  51DA               	movf	218,w,b	;volatile
  5691   0027DC  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5692   0027DE  0BDF               	andlw	-33
  5693   0027E0  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5694   0027E2  6FDA               	movwf	218,b	;volatile
  5695   0027E4                     
  5696                           ; BSR set to: 14
  5697                           ;../i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5698   0027E4  89DA               	bsf	218,4,b	;volatile
  5699   0027E6                     
  5700                           ; BSR set to: 14
  5701                           ;../i2c.c: 61:   return tmp;
  5702   0027E6  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  5703   0027E8                     
  5704                           ; BSR set to: 14
  5705   0027E8  0012               	return		;funcret
  5706   0027EA                     __end_of_I2C_2_Master_Read:
  5707                           	callstack 0
  5708                           
  5709 ;; *************** function _color_processor_easy *****************
  5710 ;; Defined at:
  5711 ;;		line 134 in file "../color.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;  rgb             2    0[COMRAM] PTR struct RGB_val
  5714 ;;		 -> main@RGB_recorded(8), 
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;  b               2    8[COMRAM] unsigned int 
  5717 ;;  a               2    6[COMRAM] unsigned int 
  5718 ;;  c               2    4[COMRAM] unsigned int 
  5719 ;;  color           2    2[COMRAM] unsigned int 
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  2    0[COMRAM] unsigned int 
  5722 ;; Registers used:
  5723 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5729 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5730 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5732 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5733 ;;Total ram usage:       10 bytes
  5734 ;; Hardware stack levels used: 1
  5735 ;; Hardware stack levels required when called: 1
  5736 ;; This function calls:
  5737 ;;		Nothing
  5738 ;; This function is called by:
  5739 ;;		_main
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           	psect	text35
  5744   001E1E                     __ptext35:
  5745                           	callstack 0
  5746   001E1E                     _color_processor_easy:
  5747                           	callstack 29
  5748   001E1E                     
  5749                           ;../color.c: 134: unsigned int color_processor_easy(struct RGB_val *rgb);../color.c: 135
      +                          : {;../color.c: 136:     unsigned int a = rgb->R;
  5750   001E1E  EE20 F002          	lfsr	2,2
  5751   001E22  5001               	movf	color_processor_easy@rgb^0,w,c
  5752   001E24  26D9               	addwf	fsr2l,f,c
  5753   001E26  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  5754   001E28  22DA               	addwfc	fsr2h,f,c
  5755   001E2A  CFDE F007          	movff	postinc2,color_processor_easy@a
  5756   001E2E  CFDD F008          	movff	postdec2,color_processor_easy@a+1
  5757                           
  5758                           ;../color.c: 137:     unsigned int b = rgb->G;
  5759   001E32  EE20 F004          	lfsr	2,4
  5760   001E36  5001               	movf	color_processor_easy@rgb^0,w,c
  5761   001E38  26D9               	addwf	fsr2l,f,c
  5762   001E3A  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  5763   001E3C  22DA               	addwfc	fsr2h,f,c
  5764   001E3E  CFDE F009          	movff	postinc2,color_processor_easy@b
  5765   001E42  CFDD F00A          	movff	postdec2,color_processor_easy@b+1
  5766                           
  5767                           ;../color.c: 138:     unsigned int c = rgb->B;
  5768   001E46  EE20 F006          	lfsr	2,6
  5769   001E4A  5001               	movf	color_processor_easy@rgb^0,w,c
  5770   001E4C  26D9               	addwf	fsr2l,f,c
  5771   001E4E  5002               	movf	(color_processor_easy@rgb+1)^0,w,c
  5772   001E50  22DA               	addwfc	fsr2h,f,c
  5773   001E52  CFDE F005          	movff	postinc2,color_processor_easy@c
  5774   001E56  CFDD F006          	movff	postdec2,color_processor_easy@c+1
  5775   001E5A                     
  5776                           ;../color.c: 139:     unsigned int color;;../color.c: 140:     if (a>=b & a>=c){color=1;
      +                          }
  5777   001E5A  5009               	movf	color_processor_easy@b^0,w,c
  5778   001E5C  5C07               	subwf	color_processor_easy@a^0,w,c
  5779   001E5E  500A               	movf	(color_processor_easy@b+1)^0,w,c
  5780   001E60  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  5781   001E62  A0D8               	btfss	status,0,c
  5782   001E64  EF36  F00F         	goto	u1491
  5783   001E68  EF38  F00F         	goto	u1490
  5784   001E6C                     u1491:
  5785   001E6C  EF49  F00F         	goto	l2664
  5786   001E70                     u1490:
  5787   001E70  5005               	movf	color_processor_easy@c^0,w,c
  5788   001E72  5C07               	subwf	color_processor_easy@a^0,w,c
  5789   001E74  5006               	movf	(color_processor_easy@c+1)^0,w,c
  5790   001E76  5808               	subwfb	(color_processor_easy@a+1)^0,w,c
  5791   001E78  A0D8               	btfss	status,0,c
  5792   001E7A  EF41  F00F         	goto	u1501
  5793   001E7E  EF43  F00F         	goto	u1500
  5794   001E82                     u1501:
  5795   001E82  EF49  F00F         	goto	l2664
  5796   001E86                     u1500:
  5797   001E86  0E00               	movlw	0
  5798   001E88  6E04               	movwf	(color_processor_easy@color+1)^0,c
  5799   001E8A  0E01               	movlw	1
  5800   001E8C  6E03               	movwf	color_processor_easy@color^0,c
  5801   001E8E  EF69  F00F         	goto	l2672
  5802   001E92                     l2664:
  5803   001E92  5007               	movf	color_processor_easy@a^0,w,c
  5804   001E94  5C09               	subwf	color_processor_easy@b^0,w,c
  5805   001E96  5008               	movf	(color_processor_easy@a+1)^0,w,c
  5806   001E98  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  5807   001E9A  A0D8               	btfss	status,0,c
  5808   001E9C  EF52  F00F         	goto	u1511
  5809   001EA0  EF54  F00F         	goto	u1510
  5810   001EA4                     u1511:
  5811   001EA4  EF65  F00F         	goto	l2670
  5812   001EA8                     u1510:
  5813   001EA8  5005               	movf	color_processor_easy@c^0,w,c
  5814   001EAA  5C09               	subwf	color_processor_easy@b^0,w,c
  5815   001EAC  5006               	movf	(color_processor_easy@c+1)^0,w,c
  5816   001EAE  580A               	subwfb	(color_processor_easy@b+1)^0,w,c
  5817   001EB0  A0D8               	btfss	status,0,c
  5818   001EB2  EF5D  F00F         	goto	u1521
  5819   001EB6  EF5F  F00F         	goto	u1520
  5820   001EBA                     u1521:
  5821   001EBA  EF65  F00F         	goto	l2670
  5822   001EBE                     u1520:
  5823   001EBE  0E00               	movlw	0
  5824   001EC0  6E04               	movwf	(color_processor_easy@color+1)^0,c
  5825   001EC2  0E02               	movlw	2
  5826   001EC4  6E03               	movwf	color_processor_easy@color^0,c
  5827   001EC6  EF69  F00F         	goto	l2672
  5828   001ECA                     l2670:
  5829   001ECA  0E00               	movlw	0
  5830   001ECC  6E04               	movwf	(color_processor_easy@color+1)^0,c
  5831   001ECE  0E03               	movlw	3
  5832   001ED0  6E03               	movwf	color_processor_easy@color^0,c
  5833   001ED2                     l2672:
  5834                           
  5835                           ;../color.c: 143:     return color;
  5836   001ED2  C003  F001         	movff	color_processor_easy@color,?_color_processor_easy
  5837   001ED6  C004  F002         	movff	color_processor_easy@color+1,?_color_processor_easy+1
  5838   001EDA  0012               	return		;funcret
  5839   001EDC                     __end_of_color_processor_easy:
  5840                           	callstack 0
  5841                           
  5842 ;; *************** function _color_click_init *****************
  5843 ;; Defined at:
  5844 ;;		line 6 in file "../color.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;		None
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;		None
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  1    wreg      void 
  5851 ;; Registers used:
  5852 ;;		wreg, status,2, status,0, cstack
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5860 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5861 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5862 ;;Total ram usage:        1 bytes
  5863 ;; Hardware stack levels used: 1
  5864 ;; Hardware stack levels required when called: 4
  5865 ;; This function calls:
  5866 ;;		_I2C_2_Master_Init
  5867 ;;		_color_writetoaddr
  5868 ;; This function is called by:
  5869 ;;		_main
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           	psect	text36
  5874   0024E4                     __ptext36:
  5875                           	callstack 0
  5876   0024E4                     _color_click_init:
  5877                           	callstack 26
  5878   0024E4                     
  5879                           ;../color.c: 9:     I2C_2_Master_Init();
  5880   0024E4  EC2D  F014         	call	_I2C_2_Master_Init	;wreg free
  5881   0024E8                     
  5882                           ;../color.c: 12:   color_writetoaddr(0x00, 0x01);
  5883   0024E8  0E01               	movlw	1
  5884   0024EA  6E03               	movwf	color_writetoaddr@value^0,c
  5885   0024EC  0E00               	movlw	0
  5886   0024EE  EC7C  F014         	call	_color_writetoaddr
  5887   0024F2                     
  5888                           ;../color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  5889   0024F2  0E3F               	movlw	63
  5890   0024F4  6E05               	movwf	??_color_click_init^0,c
  5891   0024F6  0E55               	movlw	85
  5892   0024F8                     u1897:
  5893   0024F8  2EE8               	decfsz	wreg,f,c
  5894   0024FA  D7FE               	bra	u1897
  5895   0024FC  2E05               	decfsz	??_color_click_init^0,f,c
  5896   0024FE  D7FC               	bra	u1897
  5897   002500  F000               	nop	
  5898   002502                     
  5899                           ;../color.c: 16:  color_writetoaddr(0x00, 0x03);
  5900   002502  0E03               	movlw	3
  5901   002504  6E03               	movwf	color_writetoaddr@value^0,c
  5902   002506  0E00               	movlw	0
  5903   002508  EC7C  F014         	call	_color_writetoaddr
  5904   00250C                     
  5905                           ;../color.c: 19:  color_writetoaddr(0x01, 0xD5);
  5906   00250C  0ED5               	movlw	213
  5907   00250E  6E03               	movwf	color_writetoaddr@value^0,c
  5908   002510  0E01               	movlw	1
  5909   002512  EC7C  F014         	call	_color_writetoaddr
  5910   002516                     
  5911                           ;../color.c: 22:     TRISHbits.TRISH1 = 0;
  5912   002516  9288               	bcf	136,1,c	;volatile
  5913   002518                     
  5914                           ;../color.c: 23:     TRISDbits.TRISD3 = 0;
  5915   002518  9684               	bcf	132,3,c	;volatile
  5916   00251A                     
  5917                           ;../color.c: 24:     TRISDbits.TRISD4 = 0;
  5918   00251A  9884               	bcf	132,4,c	;volatile
  5919   00251C                     
  5920                           ;../color.c: 25:     TRISHbits.TRISH0 = 0;
  5921   00251C  9088               	bcf	136,0,c	;volatile
  5922   00251E                     
  5923                           ;../color.c: 26:     TRISFbits.TRISF0 = 0;
  5924   00251E  9086               	bcf	134,0,c	;volatile
  5925   002520                     
  5926                           ;../color.c: 28:     LATHbits.LATH1 = 1;
  5927   002520  8280               	bsf	128,1,c	;volatile
  5928   002522                     
  5929                           ;../color.c: 29:     LATDbits.LATD3 = 1;
  5930   002522  867C               	bsf	124,3,c	;volatile
  5931   002524                     
  5932                           ;../color.c: 30:     LATDbits.LATD4 = 0;
  5933   002524  987C               	bcf	124,4,c	;volatile
  5934   002526                     
  5935                           ;../color.c: 31:     LATHbits.LATH0 = 0;
  5936   002526  9080               	bcf	128,0,c	;volatile
  5937   002528                     
  5938                           ;../color.c: 32:     LATFbits.LATF0 = 0;
  5939   002528  907E               	bcf	126,0,c	;volatile
  5940   00252A                     
  5941                           ;../color.c: 35:     LATDbits.LATD7=0;
  5942   00252A  9E7C               	bcf	124,7,c	;volatile
  5943   00252C                     
  5944                           ;../color.c: 36:     LATHbits.LATH3=0;
  5945   00252C  9680               	bcf	128,3,c	;volatile
  5946   00252E                     
  5947                           ;../color.c: 37:     TRISDbits.TRISD7=0;
  5948   00252E  9E84               	bcf	132,7,c	;volatile
  5949   002530                     
  5950                           ;../color.c: 38:     TRISHbits.TRISH3=0;
  5951   002530  9688               	bcf	136,3,c	;volatile
  5952   002532                     
  5953                           ;../color.c: 40:     TRISFbits.TRISF2=1;
  5954   002532  8486               	bsf	134,2,c	;volatile
  5955   002534                     
  5956                           ;../color.c: 41:     ANSELFbits.ANSELF2=0;
  5957   002534  010E               	movlb	14	; () banked
  5958   002536  95B4               	bcf	180,2,b	;volatile
  5959   002538                     
  5960                           ; BSR set to: 14
  5961                           ;../color.c: 42:     TRISFbits.TRISF3=1;
  5962   002538  8686               	bsf	134,3,c	;volatile
  5963   00253A                     
  5964                           ; BSR set to: 14
  5965                           ;../color.c: 43:     ANSELFbits.ANSELF3=0;
  5966   00253A  97B4               	bcf	180,3,b	;volatile
  5967   00253C                     
  5968                           ; BSR set to: 14
  5969   00253C  0012               	return		;funcret
  5970   00253E                     __end_of_color_click_init:
  5971                           	callstack 0
  5972                           
  5973 ;; *************** function _color_writetoaddr *****************
  5974 ;; Defined at:
  5975 ;;		line 46 in file "../color.c"
  5976 ;; Parameters:    Size  Location     Type
  5977 ;;  address         1    wreg     unsigned char 
  5978 ;;  value           1    2[COMRAM] unsigned char 
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;  address         1    3[COMRAM] unsigned char 
  5981 ;; Return value:  Size  Location     Type
  5982 ;;                  1    wreg      void 
  5983 ;; Registers used:
  5984 ;;		wreg, status,2, status,0, cstack
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5990 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5991 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5993 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5994 ;;Total ram usage:        2 bytes
  5995 ;; Hardware stack levels used: 1
  5996 ;; Hardware stack levels required when called: 3
  5997 ;; This function calls:
  5998 ;;		_I2C_2_Master_Start
  5999 ;;		_I2C_2_Master_Stop
  6000 ;;		_I2C_2_Master_Write
  6001 ;; This function is called by:
  6002 ;;		_color_click_init
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text37
  6007   0028F8                     __ptext37:
  6008                           	callstack 0
  6009   0028F8                     _color_writetoaddr:
  6010                           	callstack 26
  6011                           
  6012                           ; BSR set to: 14
  6013                           ;incstack = 0
  6014                           ;color_writetoaddr@address stored from wreg
  6015   0028F8  6E04               	movwf	color_writetoaddr@address^0,c
  6016   0028FA                     
  6017                           ;../color.c: 46: void color_writetoaddr(char address, char value);../color.c: 47: {;../c
      +                          olor.c: 48:     I2C_2_Master_Start();
  6018   0028FA  ECD2  F014         	call	_I2C_2_Master_Start	;wreg free
  6019                           
  6020                           ;../color.c: 49:     I2C_2_Master_Write(0x52 | 0x00);
  6021   0028FE  0E52               	movlw	82
  6022   002900  ECC2  F014         	call	_I2C_2_Master_Write
  6023                           
  6024                           ;../color.c: 50:     I2C_2_Master_Write(0x80 | address);
  6025   002904  5004               	movf	color_writetoaddr@address^0,w,c
  6026   002906  0980               	iorlw	128
  6027   002908  ECC2  F014         	call	_I2C_2_Master_Write
  6028                           
  6029                           ;../color.c: 51:     I2C_2_Master_Write(value);
  6030   00290C  5003               	movf	color_writetoaddr@value^0,w,c
  6031   00290E  ECC2  F014         	call	_I2C_2_Master_Write
  6032                           
  6033                           ;../color.c: 52:     I2C_2_Master_Stop();
  6034   002912  ECCD  F014         	call	_I2C_2_Master_Stop	;wreg free
  6035   002916  0012               	return		;funcret
  6036   002918                     __end_of_color_writetoaddr:
  6037                           	callstack 0
  6038                           
  6039 ;; *************** function _I2C_2_Master_Write *****************
  6040 ;; Defined at:
  6041 ;;		line 45 in file "../i2c.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;  data_byte       1    wreg     unsigned char 
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;  data_byte       1    1[COMRAM] unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;                  1    wreg      void 
  6048 ;; Registers used:
  6049 ;;		wreg, status,2, status,0, cstack
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6058 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6059 ;;Total ram usage:        1 bytes
  6060 ;; Hardware stack levels used: 1
  6061 ;; Hardware stack levels required when called: 2
  6062 ;; This function calls:
  6063 ;;		_I2C_2_Master_Idle
  6064 ;; This function is called by:
  6065 ;;		_color_writetoaddr
  6066 ;;		_color_read_Luminosity
  6067 ;;		_color_read_Red
  6068 ;;		_color_read_Green
  6069 ;;		_color_read_Blue
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text38
  6074   002984                     __ptext38:
  6075                           	callstack 0
  6076   002984                     _I2C_2_Master_Write:
  6077                           	callstack 26
  6078                           
  6079                           ;incstack = 0
  6080                           ;I2C_2_Master_Write@data_byte stored from wreg
  6081   002984  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6082   002986                     
  6083                           ;../i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);../i2c.c: 46: {;../i2c.c
      +                          : 47:   I2C_2_Master_Idle();
  6084   002986  EC42  F014         	call	_I2C_2_Master_Idle	;wreg free
  6085   00298A                     
  6086                           ;../i2c.c: 48:   SSP2BUF = data_byte;
  6087   00298A  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6088   00298E  0012               	return		;funcret
  6089   002990                     __end_of_I2C_2_Master_Write:
  6090                           	callstack 0
  6091                           
  6092 ;; *************** function _I2C_2_Master_Stop *****************
  6093 ;; Defined at:
  6094 ;;		line 39 in file "../i2c.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;		None
  6097 ;; Auto vars:     Size  Location     Type
  6098 ;;		None
  6099 ;; Return value:  Size  Location     Type
  6100 ;;                  1    wreg      void 
  6101 ;; Registers used:
  6102 ;;		wreg, status,2, status,0, cstack
  6103 ;; Tracked objects:
  6104 ;;		On entry : 0/0
  6105 ;;		On exit  : 0/0
  6106 ;;		Unchanged: 0/0
  6107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6112 ;;Total ram usage:        0 bytes
  6113 ;; Hardware stack levels used: 1
  6114 ;; Hardware stack levels required when called: 2
  6115 ;; This function calls:
  6116 ;;		_I2C_2_Master_Idle
  6117 ;; This function is called by:
  6118 ;;		_color_writetoaddr
  6119 ;;		_color_read_Luminosity
  6120 ;;		_color_read_Red
  6121 ;;		_color_read_Green
  6122 ;;		_color_read_Blue
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           	psect	text39
  6127   00299A                     __ptext39:
  6128                           	callstack 0
  6129   00299A                     _I2C_2_Master_Stop:
  6130                           	callstack 26
  6131   00299A                     
  6132                           ;../i2c.c: 41:   I2C_2_Master_Idle();
  6133   00299A  EC42  F014         	call	_I2C_2_Master_Idle	;wreg free
  6134   00299E                     
  6135                           ;../i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6136   00299E  010E               	movlb	14	; () banked
  6137   0029A0  85DA               	bsf	218,2,b	;volatile
  6138   0029A2                     
  6139                           ; BSR set to: 14
  6140   0029A2  0012               	return		;funcret
  6141   0029A4                     __end_of_I2C_2_Master_Stop:
  6142                           	callstack 0
  6143                           
  6144 ;; *************** function _I2C_2_Master_Start *****************
  6145 ;; Defined at:
  6146 ;;		line 27 in file "../i2c.c"
  6147 ;; Parameters:    Size  Location     Type
  6148 ;;		None
  6149 ;; Auto vars:     Size  Location     Type
  6150 ;;		None
  6151 ;; Return value:  Size  Location     Type
  6152 ;;                  1    wreg      void 
  6153 ;; Registers used:
  6154 ;;		wreg, status,2, status,0, cstack
  6155 ;; Tracked objects:
  6156 ;;		On entry : 0/0
  6157 ;;		On exit  : 0/0
  6158 ;;		Unchanged: 0/0
  6159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6164 ;;Total ram usage:        0 bytes
  6165 ;; Hardware stack levels used: 1
  6166 ;; Hardware stack levels required when called: 2
  6167 ;; This function calls:
  6168 ;;		_I2C_2_Master_Idle
  6169 ;; This function is called by:
  6170 ;;		_color_writetoaddr
  6171 ;;		_color_read_Luminosity
  6172 ;;		_color_read_Red
  6173 ;;		_color_read_Green
  6174 ;;		_color_read_Blue
  6175 ;; This function uses a non-reentrant model
  6176 ;;
  6177                           
  6178                           	psect	text40
  6179   0029A4                     __ptext40:
  6180                           	callstack 0
  6181   0029A4                     _I2C_2_Master_Start:
  6182                           	callstack 26
  6183   0029A4                     
  6184                           ;../i2c.c: 29:   I2C_2_Master_Idle();
  6185   0029A4  EC42  F014         	call	_I2C_2_Master_Idle	;wreg free
  6186   0029A8                     
  6187                           ;../i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6188   0029A8  010E               	movlb	14	; () banked
  6189   0029AA  81DA               	bsf	218,0,b	;volatile
  6190   0029AC                     
  6191                           ; BSR set to: 14
  6192   0029AC  0012               	return		;funcret
  6193   0029AE                     __end_of_I2C_2_Master_Start:
  6194                           	callstack 0
  6195                           
  6196 ;; *************** function _I2C_2_Master_Idle *****************
  6197 ;; Defined at:
  6198 ;;		line 22 in file "../i2c.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;		None
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;		None
  6203 ;; Return value:  Size  Location     Type
  6204 ;;                  1    wreg      void 
  6205 ;; Registers used:
  6206 ;;		wreg, status,2, status,0
  6207 ;; Tracked objects:
  6208 ;;		On entry : 0/0
  6209 ;;		On exit  : 0/0
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6214 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6215 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6216 ;;Total ram usage:        1 bytes
  6217 ;; Hardware stack levels used: 1
  6218 ;; Hardware stack levels required when called: 1
  6219 ;; This function calls:
  6220 ;;		Nothing
  6221 ;; This function is called by:
  6222 ;;		_I2C_2_Master_Start
  6223 ;;		_I2C_2_Master_RepStart
  6224 ;;		_I2C_2_Master_Stop
  6225 ;;		_I2C_2_Master_Write
  6226 ;;		_I2C_2_Master_Read
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           	psect	text41
  6231   002884                     __ptext41:
  6232                           	callstack 0
  6233   002884                     _I2C_2_Master_Idle:
  6234                           	callstack 26
  6235   002884                     l100:
  6236   002884  010E               	movlb	14	; () banked
  6237   002886  B5D8               	btfsc	216,2,b	;volatile
  6238   002888  EF48  F014         	goto	u1141
  6239   00288C  EF4A  F014         	goto	u1140
  6240   002890                     u1141:
  6241   002890  EF42  F014         	goto	l100
  6242   002894                     u1140:
  6243   002894                     
  6244                           ; BSR set to: 14
  6245   002894  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6246   002898  0E1F               	movlw	31
  6247   00289A  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  6248   00289C  A4D8               	btfss	status,2,c
  6249   00289E  EF53  F014         	goto	u1151
  6250   0028A2  EF55  F014         	goto	u1150
  6251   0028A6                     u1151:
  6252   0028A6  EF42  F014         	goto	l100
  6253   0028AA                     u1150:
  6254   0028AA                     
  6255                           ; BSR set to: 14
  6256   0028AA  0012               	return		;funcret
  6257   0028AC                     __end_of_I2C_2_Master_Idle:
  6258                           	callstack 0
  6259                           
  6260 ;; *************** function _I2C_2_Master_Init *****************
  6261 ;; Defined at:
  6262 ;;		line 4 in file "../i2c.c"
  6263 ;; Parameters:    Size  Location     Type
  6264 ;;		None
  6265 ;; Auto vars:     Size  Location     Type
  6266 ;;		None
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  1    wreg      void 
  6269 ;; Registers used:
  6270 ;;		wreg, status,2
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6280 ;;Total ram usage:        0 bytes
  6281 ;; Hardware stack levels used: 1
  6282 ;; Hardware stack levels required when called: 1
  6283 ;; This function calls:
  6284 ;;		Nothing
  6285 ;; This function is called by:
  6286 ;;		_color_click_init
  6287 ;;		_main
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           	psect	text42
  6292   00285A                     __ptext42:
  6293                           	callstack 0
  6294   00285A                     _I2C_2_Master_Init:
  6295                           	callstack 28
  6296   00285A                     
  6297                           ;../i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6298   00285A  010E               	movlb	14	; () banked
  6299   00285C  51D9               	movf	217,w,b	;volatile
  6300   00285E  0BF0               	andlw	-16
  6301   002860  0908               	iorlw	8
  6302   002862  6FD9               	movwf	217,b	;volatile
  6303   002864                     
  6304                           ; BSR set to: 14
  6305                           ;../i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6306   002864  8BD9               	bsf	217,5,b	;volatile
  6307                           
  6308                           ;../i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6309   002866  0E9F               	movlw	159
  6310   002868  6FD6               	movwf	214,b	;volatile
  6311   00286A                     
  6312                           ; BSR set to: 14
  6313                           ;../i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6314   00286A  8A84               	bsf	132,5,c	;volatile
  6315   00286C                     
  6316                           ; BSR set to: 14
  6317                           ;../i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6318   00286C  8C84               	bsf	132,6,c	;volatile
  6319   00286E                     
  6320                           ; BSR set to: 14
  6321                           ;../i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6322   00286E  9BA7               	bcf	167,5,b	;volatile
  6323   002870                     
  6324                           ; BSR set to: 14
  6325                           ;../i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6326   002870  9DA7               	bcf	167,6,b	;volatile
  6327                           
  6328                           ;../i2c.c: 16:   SSP2DATPPS=0x1D;
  6329   002872  0E1D               	movlw	29
  6330   002874  6F1D               	movwf	29,b	;volatile
  6331                           
  6332                           ;../i2c.c: 17:   SSP2CLKPPS=0x1E;
  6333   002876  0E1E               	movlw	30
  6334   002878  6F1C               	movwf	28,b	;volatile
  6335                           
  6336                           ;../i2c.c: 18:   RD5PPS=0x1C;
  6337   00287A  0E1C               	movlw	28
  6338   00287C  6F6F               	movwf	111,b	;volatile
  6339                           
  6340                           ;../i2c.c: 19:   RD6PPS=0x1B;
  6341   00287E  0E1B               	movlw	27
  6342   002880  6F70               	movwf	112,b	;volatile
  6343   002882                     
  6344                           ; BSR set to: 14
  6345   002882  0012               	return		;funcret
  6346   002884                     __end_of_I2C_2_Master_Init:
  6347                           	callstack 0
  6348                           
  6349 ;; *************** function _Timer0_init *****************
  6350 ;; Defined at:
  6351 ;;		line 62 in file "../rc_servo.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;		None
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;		None
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  1    wreg      void 
  6358 ;; Registers used:
  6359 ;;		wreg, status,2
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6369 ;;Total ram usage:        0 bytes
  6370 ;; Hardware stack levels used: 1
  6371 ;; Hardware stack levels required when called: 1
  6372 ;; This function calls:
  6373 ;;		Nothing
  6374 ;; This function is called by:
  6375 ;;		_main
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           	psect	text43
  6380   002918                     __ptext43:
  6381                           	callstack 0
  6382   002918                     _Timer0_init:
  6383                           	callstack 29
  6384   002918                     
  6385                           ;../rc_servo.c: 64:     T0CON1bits.T0CS=0b010;
  6386   002918  50D6               	movf	214,w,c	;volatile
  6387   00291A  0B1F               	andlw	-225
  6388   00291C  0940               	iorlw	64
  6389   00291E  6ED6               	movwf	214,c	;volatile
  6390   002920                     
  6391                           ;../rc_servo.c: 65:     T0CON1bits.T0ASYNC=1;
  6392   002920  88D6               	bsf	214,4,c	;volatile
  6393                           
  6394                           ;../rc_servo.c: 66:     T0CON1bits.T0CKPS=0b0111;
  6395   002922  50D6               	movf	214,w,c	;volatile
  6396   002924  0BF0               	andlw	-16
  6397   002926  0907               	iorlw	7
  6398   002928  6ED6               	movwf	214,c	;volatile
  6399   00292A                     
  6400                           ;../rc_servo.c: 68:     T0CON0bits.T016BIT=1;
  6401   00292A  88D5               	bsf	213,4,c	;volatile
  6402                           
  6403                           ;../rc_servo.c: 71:     TMR0H=(65535-2500)>>8;
  6404   00292C  0EF6               	movlw	246
  6405   00292E  6ED4               	movwf	212,c	;volatile
  6406                           
  6407                           ;../rc_servo.c: 72:     TMR0L=(unsigned char)(65535-2500);
  6408   002930  0E3B               	movlw	59
  6409   002932  6ED3               	movwf	211,c	;volatile
  6410   002934                     
  6411                           ;../rc_servo.c: 73:     T0CON0bits.T0EN=1;
  6412   002934  8ED5               	bsf	213,7,c	;volatile
  6413   002936  0012               	return		;funcret
  6414   002938                     __end_of_Timer0_init:
  6415                           	callstack 0
  6416                           
  6417 ;; *************** function _Interrupts_init *****************
  6418 ;; Defined at:
  6419 ;;		line 8 in file "../rc_servo.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;		None
  6422 ;; Auto vars:     Size  Location     Type
  6423 ;;		None
  6424 ;; Return value:  Size  Location     Type
  6425 ;;                  1    wreg      void 
  6426 ;; Registers used:
  6427 ;;		None
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6437 ;;Total ram usage:        0 bytes
  6438 ;; Hardware stack levels used: 1
  6439 ;; Hardware stack levels required when called: 1
  6440 ;; This function calls:
  6441 ;;		Nothing
  6442 ;; This function is called by:
  6443 ;;		_main
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           	psect	text44
  6448   00296E                     __ptext44:
  6449                           	callstack 0
  6450   00296E                     _Interrupts_init:
  6451                           	callstack 29
  6452   00296E                     
  6453                           ;../rc_servo.c: 12:     INTCONbits.IPEN = 1;
  6454   00296E  8AF2               	bsf	242,5,c	;volatile
  6455                           
  6456                           ;../rc_servo.c: 13:     INTCONbits.PEIE = 1;
  6457   002970  8CF2               	bsf	242,6,c	;volatile
  6458                           
  6459                           ;../rc_servo.c: 16:     PIE0bits.TMR0IE = 1;
  6460   002972  010E               	movlb	14	; () banked
  6461   002974  8B29               	bsf	41,5,b	;volatile
  6462                           
  6463                           ;../rc_servo.c: 17:     IPR0bits.TMR0IP = 1;
  6464   002976  8B1F               	bsf	31,5,b	;volatile
  6465                           
  6466                           ;../rc_servo.c: 18:     PIR0bits.TMR0IF = 0;
  6467   002978  9B33               	bcf	51,5,b	;volatile
  6468                           
  6469                           ;../rc_servo.c: 20:     PIE2bits.C1IE=1;
  6470   00297A  812B               	bsf	43,0,b	;volatile
  6471                           
  6472                           ;../rc_servo.c: 21:     IPR2bits.C1IP=0;
  6473   00297C  9121               	bcf	33,0,b	;volatile
  6474                           
  6475                           ;../rc_servo.c: 22:     PIR2bits.C1IF=0;
  6476   00297E  9135               	bcf	53,0,b	;volatile
  6477                           
  6478                           ;../rc_servo.c: 24:     INTCONbits.GIE = 1;
  6479   002980  8EF2               	bsf	242,7,c	;volatile
  6480   002982                     
  6481                           ; BSR set to: 14
  6482   002982  0012               	return		;funcret
  6483   002984                     __end_of_Interrupts_init:
  6484                           	callstack 0
  6485                           
  6486 ;; *************** function _HighISR *****************
  6487 ;; Defined at:
  6488 ;;		line 31 in file "../rc_servo.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;		None
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;		None
  6493 ;; Return value:  Size  Location     Type
  6494 ;;                  1    wreg      void 
  6495 ;; Registers used:
  6496 ;;		wreg, status,2, status,0
  6497 ;; Tracked objects:
  6498 ;;		On entry : 0/0
  6499 ;;		On exit  : 0/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6506 ;;Total ram usage:        0 bytes
  6507 ;; Hardware stack levels used: 1
  6508 ;; This function calls:
  6509 ;;		Nothing
  6510 ;; This function is called by:
  6511 ;;		Interrupt level 2
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	intcode
  6516   000008                     __pintcode:
  6517                           	callstack 0
  6518   000008                     _HighISR:
  6519                           	callstack 22
  6520                           
  6521                           ; BSR set to: 14
  6522                           ;incstack = 0
  6523   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6524   00000A                     
  6525                           ;../rc_servo.c: 33:     if(PIR0bits.TMR0IF||!PORTFbits.RF2){
  6526   00000A  010E               	movlb	14	; () banked
  6527   00000C  BB33               	btfsc	51,5,b	;volatile
  6528   00000E  EF0B  F000         	goto	i2u166_41
  6529   000012  EF0D  F000         	goto	i2u166_40
  6530   000016                     i2u166_41:
  6531   000016  EF14  F000         	goto	i2l2936
  6532   00001A                     i2u166_40:
  6533   00001A                     
  6534                           ; BSR set to: 14
  6535   00001A  B48E               	btfsc	142,2,c	;volatile
  6536   00001C  EF12  F000         	goto	i2u167_41
  6537   000020  EF14  F000         	goto	i2u167_40
  6538   000024                     i2u167_41:
  6539   000024  EF1D  F000         	goto	i2l353
  6540   000028                     i2u167_40:
  6541   000028                     i2l2936:
  6542                           
  6543                           ; BSR set to: 14
  6544                           ;../rc_servo.c: 36:         time++;
  6545   000028  0101               	movlb	1	; () banked
  6546   00002A  4BEE               	infsnz	_time& (0+255),f,b
  6547   00002C  2BEF               	incf	(_time+1)& (0+255),f,b
  6548   00002E                     
  6549                           ; BSR set to: 1
  6550                           ;../rc_servo.c: 39:         TMR0L = 0b11011011;
  6551   00002E  0EDB               	movlw	219
  6552   000030  6ED3               	movwf	211,c	;volatile
  6553   000032                     
  6554                           ; BSR set to: 1
  6555                           ;../rc_servo.c: 40:         TMR0H = 0b00001011;
  6556   000032  0E0B               	movlw	11
  6557   000034  6ED4               	movwf	212,c	;volatile
  6558   000036                     
  6559                           ; BSR set to: 1
  6560                           ;../rc_servo.c: 42:         PIR0bits.TMR0IF=0;
  6561   000036  010E               	movlb	14	; () banked
  6562   000038  9B33               	bcf	51,5,b	;volatile
  6563   00003A                     i2l353:
  6564                           
  6565                           ; BSR set to: 14
  6566   00003A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6567   00003C  0011               	retfie		f
  6568   00003E                     __end_of_HighISR:
  6569                           	callstack 0
  6570                           
  6571                           	psect	rparam
  6572   000000                     
  6573                           	psect	temp
  6574   00005F                     btemp:
  6575                           	callstack 0
  6576   00005F                     	ds	1
  6577   000000                     int$flags	set	btemp
  6578   000000                     wtemp8	set	btemp+1
  6579   000000                     ttemp5	set	btemp+1
  6580   000000                     ttemp6	set	btemp+4
  6581   000000                     ttemp7	set	btemp+8
  6582                           
  6583                           	psect	idloc
  6584                           
  6585                           ;Config register IDLOC0 @ 0x200000
  6586                           ;	unspecified, using default values
  6587   200000                     	org	2097152
  6588   200000  0FFF               	dw	4095
  6589                           
  6590                           ;Config register IDLOC1 @ 0x200002
  6591                           ;	unspecified, using default values
  6592   200002                     	org	2097154
  6593   200002  0FFF               	dw	4095
  6594                           
  6595                           ;Config register IDLOC2 @ 0x200004
  6596                           ;	unspecified, using default values
  6597   200004                     	org	2097156
  6598   200004  0FFF               	dw	4095
  6599                           
  6600                           ;Config register IDLOC3 @ 0x200006
  6601                           ;	unspecified, using default values
  6602   200006                     	org	2097158
  6603   200006  0FFF               	dw	4095
  6604                           
  6605                           ;Config register IDLOC4 @ 0x200008
  6606                           ;	unspecified, using default values
  6607   200008                     	org	2097160
  6608   200008  0FFF               	dw	4095
  6609                           
  6610                           ;Config register IDLOC5 @ 0x20000A
  6611                           ;	unspecified, using default values
  6612   20000A                     	org	2097162
  6613   20000A  0FFF               	dw	4095
  6614                           
  6615                           ;Config register IDLOC6 @ 0x20000C
  6616                           ;	unspecified, using default values
  6617   20000C                     	org	2097164
  6618   20000C  0FFF               	dw	4095
  6619                           
  6620                           ;Config register IDLOC7 @ 0x20000E
  6621                           ;	unspecified, using default values
  6622   20000E                     	org	2097166
  6623   20000E  0FFF               	dw	4095
  6624                           
  6625                           	psect	config
  6626                           
  6627                           ;Config register CONFIG1L @ 0x300000
  6628                           ;	External Oscillator mode Selection bits
  6629                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6630                           ;	Power-up default value for COSC bits
  6631                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6632   300000                     	org	3145728
  6633   300000  AA                 	db	170
  6634                           
  6635                           ;Config register CONFIG1H @ 0x300001
  6636                           ;	unspecified, using default values
  6637                           ;	Clock Out Enable bit
  6638                           ;	CLKOUTEN = 0x1, unprogrammed default
  6639                           ;	Clock Switch Enable bit
  6640                           ;	CSWEN = 0x1, unprogrammed default
  6641                           ;	Fail-Safe Clock Monitor Enable bit
  6642                           ;	FCMEN = 0x1, unprogrammed default
  6643   300001                     	org	3145729
  6644   300001  FF                 	db	255
  6645                           
  6646                           ;Config register CONFIG2L @ 0x300002
  6647                           ;	unspecified, using default values
  6648                           ;	Master Clear Enable bit
  6649                           ;	MCLRE = 0x1, unprogrammed default
  6650                           ;	Power-up Timer Enable bit
  6651                           ;	PWRTE = 0x1, unprogrammed default
  6652                           ;	Low-power BOR enable bit
  6653                           ;	LPBOREN = 0x1, unprogrammed default
  6654                           ;	Brown-out Reset Enable bits
  6655                           ;	BOREN = 0x3, unprogrammed default
  6656   300002                     	org	3145730
  6657   300002  FF                 	db	255
  6658                           
  6659                           ;Config register CONFIG2H @ 0x300003
  6660                           ;	unspecified, using default values
  6661                           ;	Brown Out Reset Voltage selection bits
  6662                           ;	BORV = 0x3, unprogrammed default
  6663                           ;	ZCD Disable bit
  6664                           ;	ZCD = 0x1, unprogrammed default
  6665                           ;	PPSLOCK bit One-Way Set Enable bit
  6666                           ;	PPS1WAY = 0x1, unprogrammed default
  6667                           ;	Stack Full/Underflow Reset Enable bit
  6668                           ;	STVREN = 0x1, unprogrammed default
  6669                           ;	Debugger Enable bit
  6670                           ;	DEBUG = 0x1, unprogrammed default
  6671                           ;	Extended Instruction Set Enable bit
  6672                           ;	XINST = 0x1, unprogrammed default
  6673   300003                     	org	3145731
  6674   300003  FF                 	db	255
  6675                           
  6676                           ;Config register CONFIG3L @ 0x300004
  6677                           ;	WDT Period Select bits
  6678                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6679                           ;	WDT operating mode
  6680                           ;	WDTE = OFF, WDT Disabled
  6681   300004                     	org	3145732
  6682   300004  9F                 	db	159
  6683                           
  6684                           ;Config register CONFIG3H @ 0x300005
  6685                           ;	unspecified, using default values
  6686                           ;	WDT Window Select bits
  6687                           ;	WDTCWS = 0x7, unprogrammed default
  6688                           ;	WDT input clock selector
  6689                           ;	WDTCCS = 0x7, unprogrammed default
  6690   300005                     	org	3145733
  6691   300005  FF                 	db	255
  6692                           
  6693                           ;Config register CONFIG4L @ 0x300006
  6694                           ;	unspecified, using default values
  6695                           ;	Write Protection Block 0
  6696                           ;	WRT0 = 0x1, unprogrammed default
  6697                           ;	Write Protection Block 1
  6698                           ;	WRT1 = 0x1, unprogrammed default
  6699                           ;	Write Protection Block 2
  6700                           ;	WRT2 = 0x1, unprogrammed default
  6701                           ;	Write Protection Block 3
  6702                           ;	WRT3 = 0x1, unprogrammed default
  6703                           ;	Write Protection Block 3
  6704                           ;	WRT4 = 0x1, unprogrammed default
  6705                           ;	Write Protection Block 3
  6706                           ;	WRT5 = 0x1, unprogrammed default
  6707                           ;	Write Protection Block 3
  6708                           ;	WRT6 = 0x1, unprogrammed default
  6709                           ;	Write Protection Block 3
  6710                           ;	WRT7 = 0x1, unprogrammed default
  6711   300006                     	org	3145734
  6712   300006  FF                 	db	255
  6713                           
  6714                           ;Config register CONFIG4H @ 0x300007
  6715                           ;	unspecified, using default values
  6716                           ;	Configuration Register Write Protection bit
  6717                           ;	WRTC = 0x1, unprogrammed default
  6718                           ;	Boot Block Write Protection bit
  6719                           ;	WRTB = 0x1, unprogrammed default
  6720                           ;	Data EEPROM Write Protection bit
  6721                           ;	WRTD = 0x1, unprogrammed default
  6722                           ;	Scanner Enable bit
  6723                           ;	SCANE = 0x1, unprogrammed default
  6724                           ;	Low Voltage Programming Enable bit
  6725                           ;	LVP = 0x1, unprogrammed default
  6726   300007                     	org	3145735
  6727   300007  FF                 	db	255
  6728                           
  6729                           ;Config register CONFIG5L @ 0x300008
  6730                           ;	unspecified, using default values
  6731                           ;	UserNVM Program Memory Code Protection bit
  6732                           ;	CP = 0x1, unprogrammed default
  6733                           ;	DataNVM Memory Code Protection bit
  6734                           ;	CPD = 0x1, unprogrammed default
  6735   300008                     	org	3145736
  6736   300008  FF                 	db	255
  6737                           
  6738                           ;Config register CONFIG5H @ 0x300009
  6739                           ;	unspecified, using default values
  6740   300009                     	org	3145737
  6741   300009  FF                 	db	255
  6742                           
  6743                           ;Config register CONFIG6L @ 0x30000A
  6744                           ;	unspecified, using default values
  6745                           ;	Table Read Protection Block 0
  6746                           ;	EBTR0 = 0x1, unprogrammed default
  6747                           ;	Table Read Protection Block 1
  6748                           ;	EBTR1 = 0x1, unprogrammed default
  6749                           ;	Table Read Protection Block 2
  6750                           ;	EBTR2 = 0x1, unprogrammed default
  6751                           ;	Table Read Protection Block 3
  6752                           ;	EBTR3 = 0x1, unprogrammed default
  6753                           ;	Table Read Protection Block 4
  6754                           ;	EBTR4 = 0x1, unprogrammed default
  6755                           ;	Table Read Protection Block 5
  6756                           ;	EBTR5 = 0x1, unprogrammed default
  6757                           ;	Table Read Protection Block 6
  6758                           ;	EBTR6 = 0x1, unprogrammed default
  6759                           ;	Table Read Protection Block 7
  6760                           ;	EBTR7 = 0x1, unprogrammed default
  6761   30000A                     	org	3145738
  6762   30000A  FF                 	db	255
  6763                           
  6764                           ;Config register CONFIG6H @ 0x30000B
  6765                           ;	unspecified, using default values
  6766                           ;	Boot Block Table Read Protection bit
  6767                           ;	EBTRB = 0x1, unprogrammed default
  6768   30000B                     	org	3145739
  6769   30000B  FF                 	db	255
  6770                           tosu	equ	0xFFF
  6771                           tosh	equ	0xFFE
  6772                           tosl	equ	0xFFD
  6773                           stkptr	equ	0xFFC
  6774                           pclatu	equ	0xFFB
  6775                           pclath	equ	0xFFA
  6776                           pcl	equ	0xFF9
  6777                           tblptru	equ	0xFF8
  6778                           tblptrh	equ	0xFF7
  6779                           tblptrl	equ	0xFF6
  6780                           tablat	equ	0xFF5
  6781                           prodh	equ	0xFF4
  6782                           prodl	equ	0xFF3
  6783                           indf0	equ	0xFEF
  6784                           postinc0	equ	0xFEE
  6785                           postdec0	equ	0xFED
  6786                           preinc0	equ	0xFEC
  6787                           plusw0	equ	0xFEB
  6788                           fsr0h	equ	0xFEA
  6789                           fsr0l	equ	0xFE9
  6790                           wreg	equ	0xFE8
  6791                           indf1	equ	0xFE7
  6792                           postinc1	equ	0xFE6
  6793                           postdec1	equ	0xFE5
  6794                           preinc1	equ	0xFE4
  6795                           plusw1	equ	0xFE3
  6796                           fsr1h	equ	0xFE2
  6797                           fsr1l	equ	0xFE1
  6798                           bsr	equ	0xFE0
  6799                           indf2	equ	0xFDF
  6800                           postinc2	equ	0xFDE
  6801                           postdec2	equ	0xFDD
  6802                           preinc2	equ	0xFDC
  6803                           plusw2	equ	0xFDB
  6804                           fsr2h	equ	0xFDA
  6805                           fsr2l	equ	0xFD9
  6806                           status	equ	0xFD8

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160    159     160
    BANK1           256    234     248
    BANK2           256      0     112
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2371$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2318$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2318$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 100
		 -> main@readout3(BANK1[100]), main@readout2(BANK0[100]), 

    motor_action@r	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_action@l	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    spin_180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    spin_180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    S593DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    S593DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    color_processor_easy@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_read@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), main@RGB_calibrated(BANK1[8]), 


Critical Paths under _main in COMRAM

    _stop->_setMotorPWM
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _motor_action->_left_135
    _motor_action->_left_90
    _motor_action->_reverse
    _motor_action->_right_135
    _motor_action->_right_90
    _motor_action->_spin_180
    _spin_180->_setMotorPWM
    _right_90->_setMotorPWM
    _right_135->_setMotorPWM
    _reverse->_setMotorPWM
    _left_90->_setMotorPWM
    _left_135->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _color_read->_color_read_Blue
    _color_read->_color_read_Green
    _color_read->_color_read_Luminosity
    _color_read->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Luminosity->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               385   385      0   40289
                                             88 COMRAM     6     6      0
                                             27 BANK0    132   132      0
                                              0 BANK1    234   234      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
               _color_processor_easy
                         _color_read
                            _forward
                    _initDCmotorsPWM
                         _initUSART4
                       _motor_action
                  _sendStringSerial4
                        _setMotorPWM
                           _spin_180
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 7     3      4    3099
                                             25 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    5722
                                              0 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5219
                                             80 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    4869
                                             62 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3649
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     219
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _motor_action                                         8     2      6   19164
                                             33 COMRAM     8     2      6
                           _left_135
                            _left_90
                            _reverse
                          _right_135
                           _right_90
                           _spin_180
 ---------------------------------------------------------------------------------
 (1) _spin_180                                             8     4      4    3099
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_90                                             8     4      4    3099
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_135                                            8     4      4    2947
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse                                              8     4      4    3099
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_90                                              8     4      4    3099
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_135                                             8     4      4    2947
                                             25 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                              6     2      4    3099
                                             25 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    2551
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read                                           4     2      2     768
                                             11 COMRAM     4     2      2
                    _color_read_Blue
                   _color_read_Green
              _color_read_Luminosity
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Luminosity                                7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_processor_easy                                10     8      2     346
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_processor_easy
   _color_read
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Luminosity
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _motor_action
     _left_135
       _setMotorPWM
     _left_90
       _setMotorPWM
     _reverse
       _setMotorPWM
     _right_135
       _setMotorPWM
     _right_90
       _setMotorPWM
     _spin_180
       _setMotorPWM
   _sendStringSerial4
     _sendCharSerial4
   _setMotorPWM
   _spin_180
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
   _stop
     _setMotorPWM

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      60        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      70       9       43.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     EA      F8       7       96.9%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      A0       5      100.0%
BITBIGSFRllllhh     91      0       0      40        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITBIGSFRllllll     32      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      49        0.0%
BITBIGSFRllllll     26      0       0      58        0.0%
BITBIGSFRllllhl     20      0       0      43        0.0%
BITBIGSFRhhlhhh     1B      0       0      33        0.0%
BITBIGSFRhhll       17      0       0      35        0.0%
BITBIGSFRhhlhl      13      0       0      34        0.0%
BITBIGSFRhllh       11      0       0      37        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      44        0.0%
BITBIGSFRllllhh      8      0       0      41        0.0%
BITBIGSFRllllll      7      0       0      54        0.0%
BITBIGSFRllllll      7      0       0      52        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRllllll      6      0       0      48        0.0%
BITBIGSFRllllll      5      0       0      47        0.0%
BITBIGSFRhlll        5      0       0      38        0.0%
BITBIGSFRllllll      3      0       0      46        0.0%
BITBIGSFRllh         2      0       0      39        0.0%
BITBIGSFRllllll      1      0       0      50        0.0%
BITBIGSFRllllll      1      0       0      51        0.0%
BITBIGSFRllllll      1      0       0      55        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      56        0.0%
BITBIGSFRllllhl      1      0       0      42        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     266      59        0.0%
DATA                 0      0     266       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Dec 10 16:35:58 2022

               _color_read_Red 25E2                _color_read_Blue 26D2                             l33 253C  
                           l42 2630                             l51 1F80                             l36 2916  
                           l45 26D0                             l39 2680                             l48 2720  
                           l58 1EDA                             l97 2882                   ___awdiv@sign 000C  
          ___wmul@multiplicand 0003               _color_read_Green 2682              ??_Interrupts_init 0001  
                          l100 2884                            l103 28AA                            l112 29A2  
                          l106 29AC                            l115 298E                            l109 2998  
                          l205 1212                            l118 27E8                            l312 1C8E  
                          l252 27A6                            l406 2958                            l190 0E96  
                          l415 2858                            l264 23DE                            l345 2982  
                          l409 296C                            l418 28F6                            l274 22AE  
                          l259 171A                            l356 2936                            l284 20C8  
                          l532 18A2                            l269 2468                            l197 1050  
                          l294 220C                            l198 1064                            l279 2024  
                          l289 216A                            l545 1A06                            l299 2350  
                          l397 2954                            l649 1E1C              motor_action@color 0022  
                          u930 1CA2                            u931 1C9E                            u940 1CB4  
                          u941 1CB0                            u950 1CDC                            u951 1CD8  
                          u960 1D12                            u961 1D0E                            u970 2764  
                          u971 2760                            u980 172E                            u981 172A  
                          u990 1760                            u991 175C                            _abs 27EA  
                          _pad 246A                            wreg 000FE8                           l1122 24E2  
                         l1130 13A4                           ?_abs 0013                           l1141 1546  
                         l2110 1CB4                           l1118 248C                           l1127 1356  
                         l2200 19B6                           l2112 1CBE                           l2120 2722  
                         l1161 2828                           l1129 135E                           l2130 1720  
                         l2202 19C6                           l2114 1CDC                           l2106 1C90  
                         l2122 272E                           l2210 2478                           l1154 25E0  
                         l2140 1780                           l2132 172E                           l2204 19E6  
                         l2116 1D12                           l2108 1CA2                           l2124 2740  
                         l2220 24CE                           l2212 2484                           l2300 1398  
                         l1148 1B64                           l1173 1D58                           l1181 2764  
                         l2230 28D2                           l2150 17CA                           l2142 1784  
                         l2134 174E                           l1158 2820                           l2222 27EA  
                         l2126 2744                           l2214 2498                           l2310 143E  
                         l2302 13A0                           l2240 1D6C                           l2232 28EE  
                         l2160 183A                           l2152 17D8                           l2144 1790  
                         l2136 1752                           l2128 171C                           l2224 2804  
                         l1184 29AE                           l2216 24AC                           l2208 246A  
                         l2320 14E6                           l2312 1444                           l2304 13AC  
                         l2400 1B38                           l1096 258E                           l2410 286A  
                         l2226 2884                           l2250 1D92                           l2242 1D74  
                         l2162 184C                           l2154 17EA                           l2146 17AE  
                         l2138 1760                           l2218 24B0                           l2322 1500  
                         l2314 144A                           l2306 13B6                           l2412 286C  
                         l2228 2894                           l2332 29A4                           l2340 299A  
                         l2420 2632                           l2260 1DCA                           l2252 1D9A  
                         l2244 1D78                           l2236 1D5A                           l2500 1FB6  
                         l2156 1818                           l2148 17B6                           l2164 1852  
                         l2180 18DA                           l2172 18A4                           l2324 1510  
                         l2308 13BC                           l2316 14AE                           l2414 286E  
                         l2406 285A                           l2334 29A8                           l2342 299E  
                         l2350 27AE                           l2422 2678                           l2270 1DF6  
                         l2262 1DD0                           l2254 1DAC                           l2246 1D86  
                         l2238 1D5E                           l2510 1FF0                           l2502 1FC4  
                         l2166 1862                           l2158 1838                           l2190 1942  
                         l2182 18E8                           l2174 18A8                           l2326 1516  
                         l2318 14C8                           l2416 2870                           l2408 2864  
                         l2336 2986                           l2600 24E4                           l2352 27B6  
                         l2344 2990                           l2440 2718                           l2432 2682  
                         l2264 1DE6                           l2256 1DB4                           l2272 1DFC  
                         l2248 1D8E                           l2512 200C                           l2504 1FD0  
                         l2168 1882                           l2192 1950                           l2184 1908  
                         l2176 18B6                           l2328 1526                           l2280 12CA  
                         l2338 298A                           l2418 28FA                           l2610 2516  
                         l2602 24E8                           l2354 27BE                           l2346 2994  
                         l2434 26C8                           l2426 25E2                           l2274 1E0C  
                         l2266 1DEE                           l2258 1DBC                           l2370 162C  
                         l2362 1548                           l2530 2080                           l2522 204E  
                         l2514 2026                           l2506 1FDC                           l2194 197E  
                         l2186 1926                           l2178 18D6                           l2290 134A  
                         l2282 12EA                           l2620 2520                           l2612 2518  
                         l2604 24F2                           l2356 27E4                           l2348 27AA  
                         l2428 2628                           l2276 1E14                           l2268 1DF0  
                         l2372 1648                           l2364 1564                           l2700 2942  
                         l2532 2088                           l2524 205C                           l2516 2046  
                         l2540 218C                           l2508 1FE4                           l2460 2124  
                         l2452 20F2                           l2444 20CA                           l2196 199E  
                         l2188 192E                           l2292 1366                           l2284 12FE  
                         l2380 1A3E                           l2630 252A                           l2622 2522  
                         l2614 251A                           l2606 2502                           l2358 27E6  
                         l2438 26D2                           l2374 16B2                           l2366 15C6  
                         l2702 2944                           l2534 2094                           l2526 2068  
                         l2470 222E                           l2550 21AE                           l2462 212C  
                         l2454 20FE                           l2446 20EA                           l2198 19B0  
                         l2294 1376                           l2286 130E                           l2390 1AA0  
                         l2382 1A4C                           l2710 253E                           l2640 2534  
                         l2632 252C                           l2624 2524                           l2616 251C  
                         l2608 250C                           l2368 160C                           l2704 294E  
                         l2536 20B0                           l2528 2074                           l2480 225A  
                         l2560 21F6                           l2552 21BA                           l2464 2138  
                         l2456 210C                           l2296 137C                           l2288 132E  
                         l2392 1AF6                           l2384 1A50                           l2376 1A08  
                         l2712 2550                           l2800 0E28                           l2642 2538  
                         l2634 252E                           l2626 2526                           l2618 251E  
                         l2650 1F08                           l2730 23E0                           l2706 2950  
                         l2570 22D8                           l2562 22B0                           l2482 2266  
                         l2554 21C6                           l2546 2194                           l2538 216C  
                         l2490 1F82                           l2466 2154                           l2458 2118  
                         l2722 282A                           l2298 138C                           l2386 1A60  
                         l2378 1A30                           l2714 2558                           l2810 0E3A  
                         l2802 0E2C                           l2644 253A                           l2636 2530  
                         l2628 2528                           l2660 1E70                           l2652 1F38  
                         l2740 2420                           l2732 2400                           l2708 2952  
                         l2580 2312                           l2572 22E6                           l2564 22D0  
                         l2484 226E                           l2476 2236                           l2468 220E  
                         l2556 21CE                           l2548 21A0                           l2492 1FA2  
                         l2724 282E                           l2396 1B26                           l2388 1A80  
                         l2716 2560                           l2900 119E                           l2820 0E5A  
                         l2812 0E3E                           l2804 0E30                           l2638 2532  
                         l2670 1ECA                           l2662 1E86                           l2654 1F50  
                         l2646 1EDC                           l2742 242C                           l2582 231E  
                         l2574 22F2                           l2486 227A                           l2478 224E  
                         l2558 21DA                           l2726 283C                           l2590 2590  
                         l2718 257C                           l2750 2352                           l2910 11F2  
                         l2902 11A6                           l2830 0E8A                           l2822 0E5E  
                         l2814 0E46                           l2806 0E34                           l2672 1ED2  
                         l2664 1E92                           l2656 1E1E                           l2648 1EF0  
                         l2744 2438                           l2680 278A                           l2584 233A  
                         l2576 22FE                           l2488 2296                           l2728 2840  
                         l2592 259C                           l2760 2392                           l2752 2372  
                         l2920 1262                           l2904 11BE                           l2840 0EAE  
                         l2832 0E96                           l2824 0E72                           l2816 0E4E  
                         l2808 0E34                           l2690 2918                           l2666 1EA8  
                         l2658 1E5A                           l2746 2440                           l2738 2408  
                         l2682 278E                           l2578 230A                           l2498 1FAA  
                         l2770 1B66                           l2586 2958                           l2594 25B8  
                         l2762 239E                           l2922 127A                           l2914 1214  
                         l2906 11D4                           l2850 0F8A                           l2842 0EBA  
                         l2834 0EA4                           l2826 0E76                           l2818 0E52  
                         l2692 2920                           l2668 1EBE                           l2748 244C  
                         l2684 27A2                           l2676 2766                           l2780 1BDE  
                         l2772 1B6A                           l2588 2968                           l2596 25D8  
                         l2764 23AA                           l2924 127E                           l2916 121C  
                         l2908 11E8                           l2860 0FE8                           l2852 0F8C  
                         l2844 0EE8                           l2828 0E7E                           l2694 292A  
                         l2686 27A4                           l2678 2776                           l2782 1C0A  
                         l2774 1B82                           l2766 23B8                           l2758 237A  
                         l2926 12A8                           l2918 124A                           l2870 106A  
                         l2862 1000                           l2854 0FC2                           l2846 0F1E  
                         ?_pad 0011                           l2688 296E                           l2696 2934  
                         l2784 1C22                           l2776 1B9A                           l2768 23C4  
                         l2928 12BC                           l2880 10C6                           l2872 1072  
                         l2864 1006                           l2856 0FCE                           l2848 0F54  
                         l2698 2938                           l2778 1BB2                           l2890 112A  
                         l2882 10D2                           l2874 1086                           l2866 1022  
                         l2858 0FE6                           l2794 0E14                           l2788 1C3A  
                         l2892 1166                           l2884 10E0                           l2876 1092  
                         l2868 105E                           l2796 0E18                           l2966 1C50  
                         l2894 1172                           l2886 10F4                           l2878 10B2  
                         l2798 0E24                           l2896 118E                           l2888 1110  
                         l2898 1194                           STR_1 0E04                           STR_2 0E01  
                         u1001 178A                           u1010 17AE                           u1011 17AA  
                         u1020 17D8                           u1100 19C6                           u1021 17D4  
                         u1101 19C2                           u1030 1818                           u1110 2478  
                         u1031 1814                           u1111 2474                           u1200 1DE6  
                         u1040 1862                           u1120 24CE                           u1201 1DE2  
                         u1041 185E                           u1121 24CA                           u1210 1E0C  
                         u1050 18B6                           u1130 2804                           u1211 1E08  
                         u1051 18B2                           u1131 2800                           u1140 2894  
                         u1060 18E8                           u1300 1500                           u1220 12FA  
                         u1141 2890                           u1061 18E4                           u1301 14FC  
                         u1221 12F4                           u1150 28AA                           u1070 1926  
                         u1310 1510                           u1230 12FC                           u1151 28A6  
                         u1071 1922                           u1311 150C                           u1320 27D2  
                         u1160 1D6C                           u1080 1950                           u1240 130E  
                         u1400 1AA0                           u1321 27CA                           u1161 1D68  
                         u1081 194C                           u1241 130A                           u1401 1A9C  
                         u1170 1D86                           u1410 2154                           u1090 197E  
                         u1250 134A                           u1171 1D82                           u1411 2150  
                         u1091 197A                           u1251 1346                           u1500 1E86  
                         u1180 1DAC                           u1340 1564                           u1420 2296  
                         u1260 1376                           u1501 1E82                           u1181 1DA8  
                         u1341 1560                           u1421 2292                           u1261 1372  
                         u1510 1EA8                           u1190 1DCA                           u1350 1648  
                         u1430 200C                           u1270 138C                           u1511 1EA4  
                         u1191 1DC6                           u1351 1644                           u1431 2008  
                         u1271 1388                           u1520 1EBE                           u1440 20B0  
                         u1280 14C8                           u1600 105E                   _BAUD4CONbits 000EE9  
                         u1521 1EBA                           u1441 20AC                           u1281 14C4  
                         u1601 105A                           _LATE 000F7D                           u1338 27D4  
                         u1450 21F6                           u1530 2858                           u1290 14E6  
                         u1610 10B2                           u1451 21F2                           u1531 2854  
                         u1291 14E2                           u1611 10AE                           _LATG 000F7F  
                         u1364 16A2                           u1540 2468                           u1460 233A  
                         u1380 1A30                           u1620 10E0                           u1365 169E  
                         u1541 2464                           u1461 2336                           u1381 1A2C  
                         u1621 10DC                           u1374 170C                           u1470 2968  
                         u1390 1A80                           u1550 23DE                           u1630 11D4  
                         u1375 1708                           u1471 2964                           u1391 1A7C  
                         u1551 23DA                           u1631 11D0                           u1480 25D8  
                         u1640 120E                           u1560 0EA4                           u1481 25D4  
                         u1641 120A                           u1561 0EA0                           u1490 1E70  
                         u1650 12A8                           u1570 1022                           _T2PR 000FBC  
                         u1491 1E6C                           u1651 12A4                           u1707 11B0  
                         u1571 101E                           u1580 103E                           u1717 126C  
                         u1581 1036                           u1590 1050                           u1807 22A0  
                         u1727 23B0                           u1591 104C                           u1817 2082  
                         u1737 2126                           u1827 20BA                           u1747 215E  
                         u1588 1040                           u1837 230C                           u1757 1FDE  
                         u1847 2344                           u1767 2016                           u1687 0FD8  
                         u1857 243A                           u1777 21C8                           u1697 0FF2  
                         u1867 1EFA                           u1787 2200                           u1877 1F2A  
                         u1797 2268                           u1887 1F5A                           u1897 24F8  
                         abs@a 0013                           _dbuf 0250                           _main 0E14  
                         _dtoa 12CA                           _prec 01EC                           _time 01EE  
                         pad@i 0018                           pad@p 0015                           fsr1h 000FE2  
                         fsr2h 000FDA                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           pad@w 001A                           fsr2l 000FD9  
                         btemp 005F                           _stop 2352                           prodh 000FF4  
                         prodl 000FF3                           start 003E         __end_of_color_read_Red 2632  
              __end_of_HighISR 003E                   ___param_bank 000000                          ??_abs 0015  
                        ??_pad 0017                __end_of___aodiv 18A4                          ?_main 0001  
                        ?_dtoa 001C                __end_of___aomod 1A08                __end_of___awdiv 1E1E  
      ??_color_read_Luminosity 0007                          ?_stop 001A                ___awdiv@divisor 0009  
                        i2l353 003A                ___awdiv@counter 000B                   vfpfcnvrt@fmt 0041  
                        _TMR0H 000FD4                          _TMR0L 000FD3                   main@readout2 007B  
                 main@readout3 0100        __end_of_sendCharSerial4 296E     __end_of_I2C_2_Master_Start 29AE  
   __end_of_I2C_2_Master_Write 2990                __end_of_left_90 20CA                          _flags 01F4  
                        _fputc 1C90                __end_of_forward 246A                          _fputs 2722  
                        pad@fp 0011                          _width 01EA                          _putch 29AE  
                        main@i 01C6                          main@j 00FD                          main@k 01C4  
                        dtoa@d 001E                          dtoa@i 003C                          dtoa@n 0034  
                        dtoa@p 0030                          dtoa@s 003E                          dtoa@w 0032  
                        tablat 000FF5                __end_of_reverse 22B0                          ttemp5 0060  
                        ttemp6 0063                          ttemp7 0067                          stop@i 001F  
                        status 000FD8                          wtemp8 0060                __end_of_sprintf 2590  
      __end_of_color_read_Blue 2722          _I2C_2_Master_RepStart 2990                ?_color_read_Red 0005  
              __initialization 28AC                   __end_of_main 12CA                   __end_of_dtoa 1548  
                 __end_of_stop 23E0                         ??_main 0059                         ??_dtoa 0026  
                       ??_stop 001E                  __activetblptr 000003                   ?_setMotorPWM 000F  
                       ?_fputc 0001                         ?_fputs 000A               ___awdiv@dividend 0007  
                       ?_putch 0001                         _RC0PPS 000E62                         _RC4REG 000EE3  
                       _RE2PPS 000E74                         _RD5PPS 000E6F                         _RC7PPS 000E69  
                       _RD6PPS 000E70                         i2l2940 0032                         i2l2932 000A  
                       i2l2942 0036                         i2l2934 001A                         i2l2936 0028  
                       i2l2938 002E                      ??_HighISR 0001       __end_of_color_click_init 253E  
                       _RX4PPS 000E15                         _TX4REG 000EE4                  ??_Timer0_init 0001  
    color_processor_easy@color 0003                   vfprintf@cfmt 0057               __end_of_left_135 2352  
                    ??___aodiv 0011                      ??___aomod 0011                         ___wmul 28D2  
                    ??___awdiv 000B                         clear_0 28B2                         clear_1 28BE  
             ___awdiv@quotient 000D                         isa$std 000001                         pad@buf 0013  
                       dtoa@fp 001C                      ??_left_90 001E               __end_of_right_90 2026  
                main@time_path 0164                         fputc@c 0001                         fputs@c 000E  
                       fputs@i 000F                         fputs@s 000A                      ??_forward 001E  
             __end_of_spin_180 216C                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8               ?_sendCharSerial4 0001  
                    ??_reverse 001E                         putch@c 0001               __end_of_vfprintf 25E2  
                       stop@mL 001A                         stop@mR 001C              ??_initDCmotorsPWM 0003  
                    ??_sprintf 0059                     __accesstop 0060        __end_of__initialization 28C8  
     __end_of_color_read_Green 26D2         ?_I2C_2_Master_RepStart 0001                  ___rparam_used 000001  
             ?_color_read_Blue 0005                _Interrupts_init 296E                 __pcstackCOMRAM 0001  
                color_read@rgb 000C                  __end_of_fputc 1D5A                  __end_of_fputs 2766  
                __end_of_putch 29B0            __end_of_Timer0_init 2938                        ??_fputc 0005  
                      ??_fputs 000E                        ??_putch 0001                     __pbssBANK0 00FF  
                   __pbssBANK1 01EA                     __pbssBANK2 0200              _color_writetoaddr 28F8  
                 _T2CLKCONbits 000FBF             ?_color_writetoaddr 0003                        ?___wmul 0001  
               main@color_flag 005B                 main@color_name 01C2                 main@color_path 00DF  
                  right_135@mL 001A                    right_135@mR 001C            ??_color_writetoaddr 0004  
__end_of_color_read_Luminosity 2682                        _SP4BRGH 000EE6                        _SP4BRGL 000EE5  
                      _PWM6DCH 000FA3                        _PWM7DCH 000FA0                        _SSP2ADD 000ED6  
                      _SSP2BUF 000ED5                      ?_left_135 001A                     _color_read 1EDC  
      __end_of_Interrupts_init 2984         color_writetoaddr@value 0003               ??_color_read_Red 0007  
                      _HighISR 0008      __end_of_color_writetoaddr 2918       color_read_Luminosity@tmp 000A  
           _I2C_2_Master_Start 29A4                     _initUSART4 2938             _I2C_2_Master_Write 2984  
                    ?_right_90 001A                        __Hparam 0000                        __Lparam 0000  
            color_read_Red@tmp 000A                    _Timer0_init 2918                      ?_spin_180 001A  
      sendStringSerial4@string 0002                        ___aodiv 171C                        ___aomod 18A4  
                      ___awdiv 1D5A            ?_I2C_2_Master_Start 0001            ?_I2C_2_Master_Write 0001  
                   _off_period 01F0                      ?_vfprintf 0051                   __psmallconst 0E00  
                      __pcinit 28AC                        __ramtop 0E00                        __ptext0 0E14  
                      __ptext1 2352                        __ptext2 253E                        __ptext3 2590  
                      __ptext4 1A08                        __ptext5 12CA                        __ptext6 246A  
                      __ptext7 2722                        __ptext8 1C90                        __ptext9 29AE  
                      _left_90 2026                      _T2CONbits 000FBD                        _forward 23E0  
                    _T2HLTbits 000FBE                  ?_motor_action 0022                        _reverse 220E  
                _RxBufWriteCnt 00FF                        _sprintf 253E           ??_I2C_2_Master_Start 0002  
                   ??_left_135 001E           ??_I2C_2_Master_Write 0002           end_of_initialization 28C8  
            __end_of_right_135 220E             setMotorPWM@PWMduty 0018                        fputc@fp 0003  
                      fputs@fp 000C              ?_color_click_init 0001   __end_of_color_processor_easy 1EDC  
                   ??_right_90 001E             ??_color_click_init 0005              __end_of_vfpfcnvrt 1B66  
                   ??_spin_180 001E                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
             vfpfcnvrt@convarg 0047                     ??_vfprintf 0057                _initDCmotorsPWM 2766  
                    _PORTFbits 000F8E                 ??_motor_action 0028                      _TRISCbits 000F83  
                    _TRISDbits 000F84                      _TRISEbits 000F85                      _TRISFbits 000F86  
                    _TRISGbits 000F87                      _TRISHbits 000F88                    ?_color_read 000C  
     color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002               ?_Interrupts_init 0001  
                   left_135@mL 001A                     left_135@mR 001C                   _EUSART4RXbuf 023C  
                 _EUSART4TXbuf 0200              ?_color_read_Green 0005                    ?_initUSART4 0001  
    sendCharSerial4@charToSend 0001                     main@motorL 01D8                     main@motorR 01E1  
           ??_color_read_Green 0007                    vfpfcnvrt@ap 0043                    vfpfcnvrt@cp 004F  
                  vfpfcnvrt@fp 003F                 __end_of___wmul 28F8            start_initialization 28AC  
                  __end_of_abs 282A                    __end_of_pad 24E4                  _TxBufWriteCnt 01F6  
          color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 27A8                    vfprintf@fmt 0053  
                     ??___wmul 0005           _color_processor_easy 1E1E                  __pcstackBANK0 0060  
                __pcstackBANK1 0100               ___aodiv@dividend 0001             main@RGB_calibrated 01D0  
                     ?_HighISR 0001        color_processor_easy@rgb 0001          color_processor_easy@a 0007  
        color_processor_easy@b 0009          color_processor_easy@c 0005                      _dtoa$2399 002E  
         __end_of_motor_action 1C90                   ?_Timer0_init 0001                      __pintcode 0008  
                     ?___aodiv 0001                       ?___aomod 0001                       ?___awdiv 0007  
             ___aodiv@quotient 0013                     right_135@i 0020                     right_90@mL 001A  
                   right_90@mR 001C           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
                     ?_left_90 001A                    __smallconst 0E00                       ?_forward 001A  
            _I2C_2_Master_Idle 2884          ?_color_processor_easy 0001               main@RGB_recorded 01C8  
            _I2C_2_Master_Init 285A              _I2C_2_Master_Read 27A8              _I2C_2_Master_Stop 299A  
                 _RxBufReadCnt 01F7                       ?_reverse 001A             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0011  
        _color_read_Luminosity 2632             ?_I2C_2_Master_Stop 0001       initDCmotorsPWM@PWMperiod 0001  
                     ?_sprintf 0060              _sendStringSerial4 282A            ??_I2C_2_Master_Idle 0001  
          ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002                 ___wmul@product 0005  
          ??_I2C_2_Master_Stop 0002                       _LATCbits 000F7B                       _LATDbits 000F7C  
                     _LATEbits 000F7D                       _LATFbits 000F7E                      _on_period 01F2  
                     _LATGbits 000F7F                       _LATHbits 000F80                      _right_135 216C  
                     _IPR0bits 000E1F                       _IPR2bits 000E21                       _PIE0bits 000E29  
                     _PIE2bits 000E2B             ?_sendStringSerial4 0002                     spin_180@mL 001A  
                   spin_180@mR 001C                       i2u166_40 001A                       i2u166_41 0016  
                     i2u167_40 0028                       i2u167_41 0024                       _PIR0bits 000E33  
                     _PIR2bits 000E35                       _PIR4bits 000E37               ?_initDCmotorsPWM 0001  
            ??_sendCharSerial4 0001                       _SSP2CON2 000EDA            ??_sendStringSerial4 0004  
                     _SSP2STAT 000ED8                      _vfpfcnvrt 1A08      __end_of_I2C_2_Master_Idle 28AC  
    __end_of_I2C_2_Master_Init 2884      __end_of_I2C_2_Master_Read 27EA              ___wmul@multiplier 0001  
    __end_of_I2C_2_Master_Stop 29A4                   setMotorPWM@m 000F    I2C_2_Master_Write@data_byte 0002  
                    left_135@i 0020                      left_90@mL 001A                      left_90@mR 001C  
         main@color_calibrated 0182              ??_color_read_Blue 0007                   _TxBufReadCnt 01F5  
                 ??_color_read 000E      __end_of_sendStringSerial4 285A  __end_of_I2C_2_Master_RepStart 299A  
           color_read_Blue@tmp 000A            __end_of_setMotorPWM 171C                     ?_right_135 001A  
                 ??_initUSART4 0001                       __Hrparam 0000                     vfprintf@ap 0055  
                     __Lrparam 0000                     vfprintf@fp 0051                      forward@mL 001A  
                    forward@mR 001C                     ?_vfpfcnvrt 003F             __end_of_color_read 1F82  
              ___aodiv@divisor 0009                ___aodiv@counter 0011                     _ANSELDbits 000EA7  
       ??_color_processor_easy 0003                     _ANSELFbits 000EB4                     sprintf@fmt 0062  
                   _T0CON0bits 000FD5                     _T0CON1bits 000FD6         ?_color_read_Luminosity 0005  
           __end_of_initUSART4 2956                       __ptext10 27EA                       __ptext11 18A4  
                     __ptext20 2026                       __ptext12 171C                       __ptext21 22B0  
                     __ptext13 282A                       __ptext30 2632                       __ptext22 2938  
                     __ptext14 2956                       __ptext31 2682                       __ptext23 2766  
                     __ptext15 1B66                       __ptext40 29A4                       __ptext32 26D2  
                     __ptext24 23E0                       __ptext16 20CA                       __ptext41 2884  
                     __ptext33 2990                       __ptext25 1548                       __ptext17 1F82  
                     __ptext42 285A                       __ptext34 27A8                       __ptext26 28D2  
                     __ptext18 216C                       __ptext43 2918                       __ptext35 1E1E  
                     __ptext27 1D5A                       __ptext19 220E                       __ptext44 296E  
                     __ptext36 24E4                       __ptext28 1EDC                       __ptext37 28F8  
                     __ptext29 25E2                       __ptext38 2984                       __ptext39 299A  
                    right_90@i 0020                       _left_135 22B0                   _SSP2CON1bits 000ED9  
                 _SSP2CON2bits 000EDA                       _right_90 1F82                      reverse@mL 001A  
                    reverse@mR 001C                      spin_180@i 0020                       _spin_180 20CA  
                     isa$xinst 000000                     _RC4STAbits 000EE7                       int$flags 005F  
                motor_action@l 0024                  motor_action@r 0026                       _vfprintf 2590  
                     left_90@i 0020               ___aomod@dividend 0001                main@time_return 005D  
                   _INTCONbits 000FF2                   _motor_action 1B66                       forward@i 001E  
                  _setMotorPWM 1548                    _PWM6CONbits 000FA4                    _PWM7CONbits 000FA1  
                     intlevel2 0000                      sprintf@ap 006E                    ??_right_135 001E  
                     reverse@i 0020                ___aomod@divisor 0009                    ??_vfpfcnvrt 0045  
              ___aomod@counter 0011               _color_click_init 24E4                       sprintf@f 0070  
                     sprintf@s 0060                     _SSP2DATPPS 000E1D                     _SSP2CLKPPS 000E1C  
                   _TX4STAbits 000EE8                   ___aodiv@sign 0012                _sendCharSerial4 2956  
                 ___aomod@sign 0012  
