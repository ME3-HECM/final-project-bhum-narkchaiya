

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Dec 10 13:14:05 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Version 2.35
    67                           ; Generated 05/05/2021 GMT
    68                           ; 
    69                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution. Publication is not required when
    83                           ;        this file is used in an embedded application.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F67K40 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101   000000                     _TX4REG	set	3812
   102   000000                     _RC4STAbits	set	3815
   103   000000                     _SP4BRGH	set	3814
   104   000000                     _TRISGbits	set	3975
   105   000000                     _TRISEbits	set	3973
   106   000000                     _LATFbits	set	3966
   107   000000                     _TRISFbits	set	3974
   108   000000                     _LATG	set	3967
   109   000000                     _LATE	set	3965
   110   000000                     _SSP2CON2bits	set	3802
   111   000000                     _LATGbits	set	3967
   112   000000                     _LATEbits	set	3965
   113   000000                     _RX4PPS	set	3605
   114   000000                     _SSP2CLKPPS	set	3612
   115   000000                     _SSP2DATPPS	set	3613
   116   000000                     _ANSELDbits	set	3751
   117   000000                     _ANSELFbits	set	3764
   118   000000                     _LATDbits	set	3964
   119   000000                     _LATHbits	set	3968
   120   000000                     _TRISDbits	set	3972
   121   000000                     _TRISHbits	set	3976
   122   000000                     _PORTFbits	set	3982
   123   000000                     _PWM7DCH	set	4000
   124   000000                     _PWM6DCH	set	4003
   125   000000                     _TRISCbits	set	3971
   126   000000                     _SSP2BUF	set	3797
   127   000000                     _SSP2ADD	set	3798
   128   000000                     _SSP2CON1bits	set	3801
   129   000000                     _RC4REG	set	3811
   130   000000                     _SP4BRGL	set	3813
   131   000000                     _TX4STAbits	set	3816
   132   000000                     _BAUD4CONbits	set	3817
   133   000000                     _LATCbits	set	3963
   134   000000                     _SSP2CON2	set	3802
   135   000000                     _SSP2STAT	set	3800
   136   000000                     _PIE0bits	set	3625
   137   000000                     _RC7PPS	set	3689
   138   000000                     _RD5PPS	set	3695
   139   000000                     _RE2PPS	set	3700
   140   000000                     _RD6PPS	set	3696
   141   000000                     _PWM6CONbits	set	4004
   142   000000                     _T2PR	set	4028
   143   000000                     _T2CONbits	set	4029
   144   000000                     _PWM7CONbits	set	4001
   145   000000                     _TMR0L	set	4051
   146   000000                     _TMR0H	set	4052
   147   000000                     _T0CON0bits	set	4053
   148   000000                     _T0CON1bits	set	4054
   149   000000                     _INTCONbits	set	4082
   150   000000                     _T2CLKCONbits	set	4031
   151   000000                     _T2HLTbits	set	4030
   152   000000                     _PIR0bits	set	3635
   153   000000                     _PIR4bits	set	3639
   154   000000                     _RC0PPS	set	3682
   155                           
   156                           	psect	smallconst
   157   000E00                     __psmallconst:
   158                           	callstack 0
   159   000E00  00                 	db	0
   160   000E01                     STR_1:
   161   000E01  25                 	db	37
   162   000E02  64                 	db	100	;'d'
   163   000E03  20                 	db	32
   164   000E04  25                 	db	37
   165   000E05  64                 	db	100	;'d'
   166   000E06  20                 	db	32
   167   000E07  25                 	db	37
   168   000E08  64                 	db	100	;'d'
   169   000E09  20                 	db	32
   170   000E0A  25                 	db	37
   171   000E0B  64                 	db	100	;'d'
   172   000E0C  20                 	db	32
   173   000E0D  0D                 	db	13
   174   000E0E  0A                 	db	10
   175   000E0F  00                 	db	0
   176   000E10  00                 	db	0	; dummy byte at the end
   177   000000                     
   178                           ; #config settings
   179                           
   180                           	psect	cinit
   181   002838                     __pcinit:
   182                           	callstack 0
   183   002838                     start_initialization:
   184                           	callstack 0
   185   002838                     __initialization:
   186                           	callstack 0
   187                           
   188                           ; Clear objects allocated to BANK0 (123 bytes)
   189   002838  EE00  F060         	lfsr	0,__pbssBANK0
   190   00283C  0E7B               	movlw	123
   191   00283E                     clear_0:
   192   00283E  6AEE               	clrf	postinc0,c
   193   002840  06E8               	decf	wreg,f,c
   194   002842  E1FD               	bnz	clear_0
   195                           
   196                           ; Clear objects allocated to COMRAM (2 bytes)
   197   002844  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   198   002846  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   199   002848                     end_of_initialization:
   200                           	callstack 0
   201   002848                     __end_of__initialization:
   202                           	callstack 0
   203   002848  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   204   00284A  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   205   00284C  0100               	movlb	0
   206   00284E  EF09  F007         	goto	_main	;jump to C main() function
   207                           
   208                           	psect	bssCOMRAM
   209   00005B                     __pbssCOMRAM:
   210                           	callstack 0
   211   00005B                     _RxBufReadCnt:
   212                           	callstack 0
   213   00005B                     	ds	1
   214   00005C                     _RxBufWriteCnt:
   215                           	callstack 0
   216   00005C                     	ds	1
   217                           
   218                           	psect	bssBANK0
   219   000060                     __pbssBANK0:
   220                           	callstack 0
   221   000060                     _EUSART4TXbuf:
   222                           	callstack 0
   223   000060                     	ds	60
   224   00009C                     _EUSART4RXbuf:
   225                           	callstack 0
   226   00009C                     	ds	20
   227   0000B0                     _width:
   228                           	callstack 0
   229   0000B0                     	ds	2
   230   0000B2                     _prec:
   231                           	callstack 0
   232   0000B2                     	ds	2
   233   0000B4                     _off_period:
   234                           	callstack 0
   235   0000B4                     	ds	2
   236   0000B6                     _on_period:
   237                           	callstack 0
   238   0000B6                     	ds	2
   239   0000B8                     _flags:
   240                           	callstack 0
   241   0000B8                     	ds	1
   242   0000B9                     _TxBufReadCnt:
   243                           	callstack 0
   244   0000B9                     	ds	1
   245   0000BA                     _TxBufWriteCnt:
   246                           	callstack 0
   247   0000BA                     	ds	1
   248   0000BB                     _dbuf:
   249                           	callstack 0
   250   0000BB                     	ds	32
   251                           
   252                           	psect	cstackBANK1
   253   000100                     __pcstackBANK1:
   254                           	callstack 0
   255   000100                     main@readout:
   256                           	callstack 0
   257                           
   258                           ; 50 bytes @ 0x0
   259   000100                     	ds	50
   260   000132                     main@color_path:
   261                           	callstack 0
   262                           
   263                           ; 30 bytes @ 0x32
   264   000132                     	ds	30
   265   000150                     main@time_path:
   266                           	callstack 0
   267                           
   268                           ; 30 bytes @ 0x50
   269   000150                     	ds	30
   270   00016E                     main@color_flag:
   271                           	callstack 0
   272                           
   273                           ; 2 bytes @ 0x6E
   274   00016E                     	ds	2
   275   000170                     main@time_return:
   276                           	callstack 0
   277                           
   278                           ; 2 bytes @ 0x70
   279   000170                     	ds	2
   280   000172                     main@time_flag:
   281                           	callstack 0
   282                           
   283                           ; 2 bytes @ 0x72
   284   000172                     	ds	2
   285   000174                     main@time:
   286                           	callstack 0
   287                           
   288                           ; 2 bytes @ 0x74
   289   000174                     	ds	2
   290   000176                     main@j:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x76
   294   000176                     	ds	2
   295   000178                     main@color_name:
   296                           	callstack 0
   297                           
   298                           ; 2 bytes @ 0x78
   299   000178                     	ds	2
   300   00017A                     main@k:
   301                           	callstack 0
   302                           
   303                           ; 2 bytes @ 0x7A
   304   00017A                     	ds	2
   305   00017C                     main@RGB_recorded:
   306                           	callstack 0
   307                           
   308                           ; 8 bytes @ 0x7C
   309   00017C                     	ds	8
   310   000184                     main@RGB_calibrated:
   311                           	callstack 0
   312                           
   313                           ; 8 bytes @ 0x84
   314   000184                     	ds	8
   315   00018C                     main@motorL:
   316                           	callstack 0
   317                           
   318                           ; 9 bytes @ 0x8C
   319   00018C                     	ds	9
   320   000195                     main@motorR:
   321                           	callstack 0
   322                           
   323                           ; 9 bytes @ 0x95
   324   000195                     	ds	9
   325                           
   326                           	psect	cstackBANK0
   327   0000DB                     __pcstackBANK0:
   328                           	callstack 0
   329   0000DB                     ?_sprintf:
   330                           	callstack 0
   331   0000DB                     sprintf@s:
   332                           	callstack 0
   333                           
   334                           ; 2 bytes @ 0x0
   335   0000DB                     	ds	2
   336   0000DD                     sprintf@fmt:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0x2
   340   0000DD                     	ds	10
   341   0000E7                     sprintf@ap:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0xC
   345   0000E7                     	ds	2
   346   0000E9                     sprintf@f:
   347                           	callstack 0
   348                           
   349                           ; 11 bytes @ 0xE
   350   0000E9                     	ds	11
   351   0000F4                     ??_main:
   352                           
   353                           ; 1 bytes @ 0x19
   354   0000F4                     	ds	2
   355                           
   356                           	psect	cstackCOMRAM
   357   000001                     __pcstackCOMRAM:
   358                           	callstack 0
   359   000001                     write16bitTMR0val@tmp:
   360                           	callstack 0
   361                           
   362                           ; 2 bytes @ 0x0
   363   000001                     	ds	2
   364   000003                     ??_I2C_2_Master_Idle:
   365   000003                     ?_color_processor_easy:
   366                           	callstack 0
   367   000003                     ?_color_processor_hard:
   368                           	callstack 0
   369   000003                     ?___wmul:
   370                           	callstack 0
   371   000003                     ?___aodiv:
   372                           	callstack 0
   373   000003                     ?___aomod:
   374                           	callstack 0
   375   000003                     sendCharSerial4@charToSend:
   376                           	callstack 0
   377   000003                     color_processor_easy@rgb:
   378                           	callstack 0
   379   000003                     color_processor_hard@rgb:
   380                           	callstack 0
   381   000003                     initDCmotorsPWM@PWMperiod:
   382                           	callstack 0
   383   000003                     ___wmul@multiplier:
   384                           	callstack 0
   385   000003                     fputc@c:
   386                           	callstack 0
   387   000003                     ___aodiv@dividend:
   388                           	callstack 0
   389   000003                     ___aomod@dividend:
   390                           	callstack 0
   391                           
   392                           ; 8 bytes @ 0x2
   393   000003                     	ds	1
   394   000004                     ??_I2C_2_Master_Read:
   395   000004                     I2C_2_Master_Write@data_byte:
   396                           	callstack 0
   397   000004                     sendStringSerial4@string:
   398                           	callstack 0
   399                           
   400                           ; 2 bytes @ 0x3
   401   000004                     	ds	1
   402   000005                     color_writetoaddr@value:
   403                           	callstack 0
   404   000005                     I2C_2_Master_Read@ack:
   405                           	callstack 0
   406   000005                     color_processor_easy@color:
   407                           	callstack 0
   408   000005                     color_processor_hard@color:
   409                           	callstack 0
   410   000005                     ___wmul@multiplicand:
   411                           	callstack 0
   412   000005                     fputc@fp:
   413                           	callstack 0
   414                           
   415                           ; 2 bytes @ 0x4
   416   000005                     	ds	1
   417   000006                     color_writetoaddr@address:
   418                           	callstack 0
   419   000006                     I2C_2_Master_Read@tmp:
   420                           	callstack 0
   421                           
   422                           ; 1 bytes @ 0x5
   423   000006                     	ds	1
   424   000007                     ??_fputc:
   425   000007                     ??_color_click_init:
   426   000007                     ?_color_read_Luminosity:
   427                           	callstack 0
   428   000007                     ?_color_read_Red:
   429                           	callstack 0
   430   000007                     ?_color_read_Green:
   431                           	callstack 0
   432   000007                     ?_color_read_Blue:
   433                           	callstack 0
   434   000007                     color_processor_easy@c:
   435                           	callstack 0
   436   000007                     color_processor_hard@c:
   437                           	callstack 0
   438   000007                     ___wmul@product:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0x6
   442   000007                     	ds	2
   443   000009                     ??_color_read_Luminosity:
   444   000009                     ??_color_read_Red:
   445   000009                     ??_color_read_Green:
   446   000009                     ??_color_read_Blue:
   447   000009                     ?___awdiv:
   448                           	callstack 0
   449   000009                     color_processor_easy@a:
   450                           	callstack 0
   451   000009                     color_processor_hard@a:
   452                           	callstack 0
   453   000009                     ___awdiv@dividend:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0x8
   457   000009                     	ds	2
   458   00000B                     color_processor_easy@b:
   459                           	callstack 0
   460   00000B                     color_processor_hard@b:
   461                           	callstack 0
   462   00000B                     ___awdiv@divisor:
   463                           	callstack 0
   464   00000B                     ___aodiv@divisor:
   465                           	callstack 0
   466   00000B                     ___aomod@divisor:
   467                           	callstack 0
   468                           
   469                           ; 8 bytes @ 0xA
   470   00000B                     	ds	1
   471   00000C                     color_read_Luminosity@tmp:
   472                           	callstack 0
   473   00000C                     color_read_Red@tmp:
   474                           	callstack 0
   475   00000C                     color_read_Green@tmp:
   476                           	callstack 0
   477   00000C                     color_read_Blue@tmp:
   478                           	callstack 0
   479   00000C                     fputs@s:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0xB
   483   00000C                     	ds	1
   484   00000D                     ___awdiv@counter:
   485                           	callstack 0
   486                           
   487                           ; 1 bytes @ 0xC
   488   00000D                     	ds	1
   489   00000E                     ___awdiv@sign:
   490                           	callstack 0
   491   00000E                     color_read@rgb:
   492                           	callstack 0
   493   00000E                     fputs@fp:
   494                           	callstack 0
   495                           
   496                           ; 2 bytes @ 0xD
   497   00000E                     	ds	1
   498   00000F                     ___awdiv@quotient:
   499                           	callstack 0
   500                           
   501                           ; 2 bytes @ 0xE
   502   00000F                     	ds	1
   503   000010                     ??_color_read:
   504   000010                     fputs@c:
   505                           	callstack 0
   506                           
   507                           ; 1 bytes @ 0xF
   508   000010                     	ds	1
   509   000011                     setMotorPWM@m:
   510                           	callstack 0
   511   000011                     fputs@i:
   512                           	callstack 0
   513                           
   514                           ; 2 bytes @ 0x10
   515   000011                     	ds	2
   516   000013                     ??_setMotorPWM:
   517   000013                     ___aodiv@counter:
   518                           	callstack 0
   519   000013                     ___aomod@counter:
   520                           	callstack 0
   521   000013                     pad@fp:
   522                           	callstack 0
   523                           
   524                           ; 2 bytes @ 0x12
   525   000013                     	ds	1
   526   000014                     ___aodiv@sign:
   527                           	callstack 0
   528   000014                     ___aomod@sign:
   529                           	callstack 0
   530                           
   531                           ; 1 bytes @ 0x13
   532   000014                     	ds	1
   533   000015                     ?_abs:
   534                           	callstack 0
   535   000015                     pad@buf:
   536                           	callstack 0
   537   000015                     abs@a:
   538                           	callstack 0
   539   000015                     ___aodiv@quotient:
   540                           	callstack 0
   541                           
   542                           ; 8 bytes @ 0x14
   543   000015                     	ds	2
   544   000017                     ??_abs:
   545   000017                     pad@p:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0x16
   549   000017                     	ds	2
   550   000019                     ??_pad:
   551                           
   552                           ; 1 bytes @ 0x18
   553   000019                     	ds	1
   554   00001A                     setMotorPWM@PWMduty:
   555                           	callstack 0
   556   00001A                     pad@i:
   557                           	callstack 0
   558                           
   559                           ; 2 bytes @ 0x19
   560   00001A                     	ds	2
   561   00001C                     stop@mL:
   562                           	callstack 0
   563   00001C                     forward@mL:
   564                           	callstack 0
   565   00001C                     reverse@mL:
   566                           	callstack 0
   567   00001C                     right_90@mL:
   568                           	callstack 0
   569   00001C                     left_90@mL:
   570                           	callstack 0
   571   00001C                     spin_180@mL:
   572                           	callstack 0
   573   00001C                     right_135@mL:
   574                           	callstack 0
   575   00001C                     left_135@mL:
   576                           	callstack 0
   577   00001C                     pad@w:
   578                           	callstack 0
   579                           
   580                           ; 2 bytes @ 0x1B
   581   00001C                     	ds	2
   582   00001E                     stop@mR:
   583                           	callstack 0
   584   00001E                     forward@mR:
   585                           	callstack 0
   586   00001E                     reverse@mR:
   587                           	callstack 0
   588   00001E                     right_90@mR:
   589                           	callstack 0
   590   00001E                     left_90@mR:
   591                           	callstack 0
   592   00001E                     spin_180@mR:
   593                           	callstack 0
   594   00001E                     right_135@mR:
   595                           	callstack 0
   596   00001E                     left_135@mR:
   597                           	callstack 0
   598   00001E                     dtoa@fp:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x1D
   602   00001E                     	ds	2
   603   000020                     ??_stop:
   604   000020                     ??_reverse:
   605   000020                     ??_right_90:
   606   000020                     ??_left_90:
   607   000020                     ??_spin_180:
   608   000020                     ??_right_135:
   609   000020                     ??_left_135:
   610   000020                     forward@i:
   611                           	callstack 0
   612   000020                     dtoa@d:
   613                           	callstack 0
   614                           
   615                           ; 8 bytes @ 0x1F
   616   000020                     	ds	1
   617   000021                     stop@i:
   618                           	callstack 0
   619                           
   620                           ; 2 bytes @ 0x20
   621   000021                     	ds	1
   622   000022                     reverse@i:
   623                           	callstack 0
   624   000022                     right_90@i:
   625                           	callstack 0
   626   000022                     left_90@i:
   627                           	callstack 0
   628   000022                     spin_180@i:
   629                           	callstack 0
   630   000022                     right_135@i:
   631                           	callstack 0
   632   000022                     left_135@i:
   633                           	callstack 0
   634                           
   635                           ; 2 bytes @ 0x21
   636   000022                     	ds	2
   637   000024                     motor_action@color:
   638                           	callstack 0
   639                           
   640                           ; 2 bytes @ 0x23
   641   000024                     	ds	2
   642   000026                     motor_action@l:
   643                           	callstack 0
   644                           
   645                           ; 2 bytes @ 0x25
   646   000026                     	ds	2
   647   000028                     ??_dtoa:
   648   000028                     motor_action@r:
   649                           	callstack 0
   650                           
   651                           ; 2 bytes @ 0x27
   652   000028                     	ds	2
   653   00002A                     ??_motor_action:
   654                           
   655                           ; 1 bytes @ 0x29
   656   00002A                     	ds	6
   657   000030                     _dtoa$2247:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0x2F
   661   000030                     	ds	2
   662   000032                     dtoa@p:
   663                           	callstack 0
   664                           
   665                           ; 2 bytes @ 0x31
   666   000032                     	ds	2
   667   000034                     dtoa@w:
   668                           	callstack 0
   669                           
   670                           ; 2 bytes @ 0x33
   671   000034                     	ds	2
   672   000036                     dtoa@n:
   673                           	callstack 0
   674                           
   675                           ; 8 bytes @ 0x35
   676   000036                     	ds	8
   677   00003E                     dtoa@i:
   678                           	callstack 0
   679                           
   680                           ; 2 bytes @ 0x3D
   681   00003E                     	ds	2
   682   000040                     dtoa@s:
   683                           	callstack 0
   684                           
   685                           ; 1 bytes @ 0x3F
   686   000040                     	ds	1
   687   000041                     vfpfcnvrt@fp:
   688                           	callstack 0
   689                           
   690                           ; 2 bytes @ 0x40
   691   000041                     	ds	2
   692   000043                     vfpfcnvrt@fmt:
   693                           	callstack 0
   694                           
   695                           ; 2 bytes @ 0x42
   696   000043                     	ds	2
   697   000045                     vfpfcnvrt@ap:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x44
   701   000045                     	ds	2
   702   000047                     ??_vfpfcnvrt:
   703                           
   704                           ; 1 bytes @ 0x46
   705   000047                     	ds	2
   706   000049                     vfpfcnvrt@convarg:
   707                           	callstack 0
   708                           
   709                           ; 8 bytes @ 0x48
   710   000049                     	ds	8
   711   000051                     vfpfcnvrt@cp:
   712                           	callstack 0
   713                           
   714                           ; 2 bytes @ 0x50
   715   000051                     	ds	2
   716   000053                     ?_vfprintf:
   717                           	callstack 0
   718   000053                     vfprintf@fp:
   719                           	callstack 0
   720                           
   721                           ; 2 bytes @ 0x52
   722   000053                     	ds	2
   723   000055                     vfprintf@fmt:
   724                           	callstack 0
   725                           
   726                           ; 2 bytes @ 0x54
   727   000055                     	ds	2
   728   000057                     vfprintf@ap:
   729                           	callstack 0
   730                           
   731                           ; 2 bytes @ 0x56
   732   000057                     	ds	2
   733   000059                     vfprintf@cfmt:
   734                           	callstack 0
   735                           
   736                           ; 2 bytes @ 0x58
   737   000059                     	ds	2
   738   00005B                     
   739                           ; 1 bytes @ 0x5A
   740 ;;
   741 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   742 ;;
   743 ;; *************** function _main *****************
   744 ;; Defined at:
   745 ;;		line 20 in file "../main.c"
   746 ;; Parameters:    Size  Location     Type
   747 ;;		None
   748 ;; Auto vars:     Size  Location     Type
   749 ;;  k               2  122[BANK1 ] int 
   750 ;;  readout        50    0[BANK1 ] unsigned char [50]
   751 ;;  color_calibr   48    0        unsigned int [24]
   752 ;;  time_path      30   80[BANK1 ] unsigned int [15]
   753 ;;  color_path     30   50[BANK1 ] unsigned int [15]
   754 ;;  motorR          9  149[BANK1 ] struct DC_motor
   755 ;;  motorL          9  140[BANK1 ] struct DC_motor
   756 ;;  RGB_calibrat    8  132[BANK1 ] struct RGB_val
   757 ;;  RGB_recorded    8  124[BANK1 ] struct RGB_val
   758 ;;  color_name      2  120[BANK1 ] unsigned int 
   759 ;;  j               2  118[BANK1 ] int 
   760 ;;  time            2  116[BANK1 ] unsigned int 
   761 ;;  time_flag       2  114[BANK1 ] unsigned int 
   762 ;;  time_return     2  112[BANK1 ] unsigned int 
   763 ;;  color_flag      2  110[BANK1 ] unsigned int 
   764 ;;  home            2    0        unsigned int 
   765 ;;  PWMcycle        1    0        unsigned char 
   766 ;; Return value:  Size  Location     Type
   767 ;;                  1    wreg      void 
   768 ;; Registers used:
   769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   770 ;; Tracked objects:
   771 ;;		On entry : 0/0
   772 ;;		On exit  : 0/0
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   776 ;;      Locals:         0       0     158       0       0       0       0       0       0       0       0       0       
      +0       0       0
   777 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   778 ;;      Totals:         0       2     158       0       0       0       0       0       0       0       0       0       
      +0       0       0
   779 ;;Total ram usage:      160 bytes
   780 ;; Hardware stack levels required when called: 10
   781 ;; This function calls:
   782 ;;		_I2C_2_Master_Init
   783 ;;		_Interrupts_init
   784 ;;		_Timer0_init
   785 ;;		_color_click_init
   786 ;;		_color_processor_easy
   787 ;;		_color_processor_hard
   788 ;;		_color_read
   789 ;;		_forward
   790 ;;		_initDCmotorsPWM
   791 ;;		_initUSART4
   792 ;;		_motor_action
   793 ;;		_sendStringSerial4
   794 ;;		_setMotorPWM
   795 ;;		_sprintf
   796 ;;		_stop
   797 ;; This function is called by:
   798 ;;		Startup code after reset
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text0
   803   000E12                     __ptext0:
   804                           	callstack 0
   805   000E12                     _main:
   806                           	callstack 21
   807   000E12                     
   808                           ;../main.c: 22:     color_click_init();
   809   000E12  ECF6  F011         	call	_color_click_init	;wreg free
   810   000E16                     
   811                           ;../main.c: 23:     initDCmotorsPWM(20);
   812   000E16  0E00               	movlw	0
   813   000E18  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   814   000E1A  0E14               	movlw	20
   815   000E1C  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   816   000E1E  EC37  F013         	call	_initDCmotorsPWM	;wreg free
   817   000E22                     
   818                           ;../main.c: 24:     Interrupts_init();
   819   000E22  EC3B  F014         	call	_Interrupts_init	;wreg free
   820   000E26                     
   821                           ;../main.c: 25:     Timer0_init();
   822   000E26  ECFD  F013         	call	_Timer0_init	;wreg free
   823   000E2A                     
   824                           ;../main.c: 26:     I2C_2_Master_Init();
   825   000E2A  ECB1  F013         	call	_I2C_2_Master_Init	;wreg free
   826   000E2E                     
   827                           ;../main.c: 27:     initUSART4();
   828   000E2E  EC0D  F014         	call	_initUSART4	;wreg free
   829   000E32                     
   830                           ;../main.c: 32:     motorL.power = 0;
   831   000E32  0E00               	movlw	0
   832   000E34  0101               	movlb	1	; () banked
   833   000E36  6F8C               	movwf	main@motorL& (0+255),b
   834   000E38                     
   835                           ; BSR set to: 1
   836                           ;../main.c: 33:     motorL.direction = 0;
   837   000E38  0E00               	movlw	0
   838   000E3A  6F8D               	movwf	(main@motorL+1)& (0+255),b
   839   000E3C                     
   840                           ; BSR set to: 1
   841                           ;../main.c: 34:     motorL.dutyHighByte = (unsigned char *)(&PWM6DCH);
   842   000E3C  0EA3               	movlw	163
   843   000E3E  6F8E               	movwf	(main@motorL+2)& (0+255),b
   844   000E40  0E0F               	movlw	15
   845   000E42  6F8F               	movwf	(main@motorL+3)& (0+255),b
   846   000E44                     
   847                           ; BSR set to: 1
   848                           ;../main.c: 35:     motorL.dir_LAT = (unsigned char *)(&LATE);
   849   000E44  0E7D               	movlw	125
   850   000E46  6F90               	movwf	(main@motorL+4)& (0+255),b
   851   000E48  0E0F               	movlw	15
   852   000E4A  6F91               	movwf	(main@motorL+5)& (0+255),b
   853   000E4C                     
   854                           ; BSR set to: 1
   855                           ;../main.c: 36:     motorL.dir_pin = 4;
   856   000E4C  0E04               	movlw	4
   857   000E4E  6F92               	movwf	(main@motorL+6)& (0+255),b
   858   000E50                     
   859                           ; BSR set to: 1
   860                           ;../main.c: 37:     motorL.PWMperiod = PWMcycle;
   861   000E50  0E00               	movlw	0
   862   000E52  6F94               	movwf	(main@motorL+8)& (0+255),b
   863   000E54  0EC8               	movlw	200
   864   000E56  6F93               	movwf	(main@motorL+7)& (0+255),b
   865   000E58                     
   866                           ; BSR set to: 1
   867                           ;../main.c: 38:     motorR.power = 0;
   868   000E58  0E00               	movlw	0
   869   000E5A  6F95               	movwf	main@motorR& (0+255),b
   870   000E5C                     
   871                           ; BSR set to: 1
   872                           ;../main.c: 39:     motorR.direction = 0;
   873   000E5C  0E00               	movlw	0
   874   000E5E  6F96               	movwf	(main@motorR+1)& (0+255),b
   875                           
   876                           ;../main.c: 40:     motorR.dutyHighByte = (unsigned char *)(&PWM7DCH);
   877   000E60  0EA0               	movlw	160
   878   000E62  6F97               	movwf	(main@motorR+2)& (0+255),b
   879   000E64  0E0F               	movlw	15
   880   000E66  6F98               	movwf	(main@motorR+3)& (0+255),b
   881                           
   882                           ;../main.c: 41:     motorR.dir_LAT = (unsigned char *)(&LATG);
   883   000E68  0E7F               	movlw	127
   884   000E6A  6F99               	movwf	(main@motorR+4)& (0+255),b
   885   000E6C  0E0F               	movlw	15
   886   000E6E  6F9A               	movwf	(main@motorR+5)& (0+255),b
   887   000E70                     
   888                           ; BSR set to: 1
   889                           ;../main.c: 42:     motorR.dir_pin = 6;
   890   000E70  0E06               	movlw	6
   891   000E72  6F9B               	movwf	(main@motorR+6)& (0+255),b
   892   000E74                     
   893                           ; BSR set to: 1
   894                           ;../main.c: 43:     motorR.PWMperiod = PWMcycle;
   895   000E74  0E00               	movlw	0
   896   000E76  6F9D               	movwf	(main@motorR+8)& (0+255),b
   897   000E78  0EC8               	movlw	200
   898   000E7A  6F9C               	movwf	(main@motorR+7)& (0+255),b
   899   000E7C                     
   900                           ; BSR set to: 1
   901                           ;../main.c: 44:     setMotorPWM(&motorL);
   902   000E7C  0E8C               	movlw	low main@motorL
   903   000E7E  6E11               	movwf	setMotorPWM@m^0,c
   904   000E80  0E01               	movlw	high main@motorL
   905   000E82  6E12               	movwf	(setMotorPWM@m+1)^0,c
   906   000E84  ECC9  F009         	call	_setMotorPWM	;wreg free
   907   000E88                     
   908                           ;../main.c: 45:     setMotorPWM(&motorR);
   909   000E88  0E95               	movlw	low main@motorR
   910   000E8A  6E11               	movwf	setMotorPWM@m^0,c
   911   000E8C  0E01               	movlw	high main@motorR
   912   000E8E  6E12               	movwf	(setMotorPWM@m+1)^0,c
   913   000E90  ECC9  F009         	call	_setMotorPWM	;wreg free
   914   000E94                     
   915                           ;../main.c: 60:     unsigned int color_calibrated[24];;../main.c: 61:     struct RGB_val
      +                           RGB_calibrated;;../main.c: 64:     color_read(&RGB_calibrated);
   916   000E94  0E84               	movlw	low main@RGB_calibrated
   917   000E96  6E0E               	movwf	color_read@rgb^0,c
   918   000E98  0E01               	movlw	high main@RGB_calibrated
   919   000E9A  6E0F               	movwf	(color_read@rgb+1)^0,c
   920   000E9C  ECF2  F00E         	call	_color_read	;wreg free
   921   000EA0                     
   922                           ;../main.c: 65:     char readout[50];;../main.c: 66:     sprintf(readout,"%d %d %d %d \r
      +                          \n", RGB_calibrated.L,RGB_calibrated.R,RGB_calibrated.G,RGB_calibrated.B);
   923   000EA0  0E00               	movlw	low main@readout
   924   000EA2  0100               	movlb	0	; () banked
   925   000EA4  6FDB               	movwf	sprintf@s& (0+255),b
   926   000EA6  0E01               	movlw	high main@readout
   927   000EA8  6FDC               	movwf	(sprintf@s+1)& (0+255),b
   928   000EAA  0E01               	movlw	low STR_1
   929   000EAC  6FDD               	movwf	sprintf@fmt& (0+255),b
   930   000EAE  0E0E               	movlw	high STR_1
   931   000EB0  6FDE               	movwf	(sprintf@fmt+1)& (0+255),b
   932   000EB2  C184  F0DF         	movff	main@RGB_calibrated,?_sprintf+4
   933   000EB6  C185  F0E0         	movff	main@RGB_calibrated+1,?_sprintf+5
   934   000EBA  C186  F0E1         	movff	main@RGB_calibrated+2,?_sprintf+6
   935   000EBE  C187  F0E2         	movff	main@RGB_calibrated+3,?_sprintf+7
   936   000EC2  C188  F0E3         	movff	main@RGB_calibrated+4,?_sprintf+8
   937   000EC6  C189  F0E4         	movff	main@RGB_calibrated+5,?_sprintf+9
   938   000ECA  C18A  F0E5         	movff	main@RGB_calibrated+6,?_sprintf+10
   939   000ECE  C18B  F0E6         	movff	main@RGB_calibrated+7,?_sprintf+11
   940   000ED2  EC23  F012         	call	_sprintf	;wreg free
   941   000ED6                     
   942                           ;../main.c: 67:     sendStringSerial4(readout);
   943   000ED6  0E00               	movlw	low main@readout
   944   000ED8  6E04               	movwf	sendStringSerial4@string^0,c
   945   000EDA  0E01               	movlw	high main@readout
   946   000EDC  6E05               	movwf	(sendStringSerial4@string+1)^0,c
   947   000EDE  EC99  F013         	call	_sendStringSerial4	;wreg free
   948   000EE2                     l2922:
   949                           
   950                           ;../main.c: 77:         if (time_flag==1){
   951   000EE2  0101               	movlb	1	; () banked
   952   000EE4  0572               	decf	main@time_flag& (0+255),w,b
   953   000EE6  1173               	iorwf	(main@time_flag+1)& (0+255),w,b
   954   000EE8  A4D8               	btfss	status,2,c
   955   000EEA  EF79  F007         	goto	u1581
   956   000EEE  EF7B  F007         	goto	u1580
   957   000EF2                     u1581:
   958   000EF2  EF81  F007         	goto	l2928
   959   000EF6                     u1580:
   960   000EF6                     
   961                           ; BSR set to: 1
   962                           ;../main.c: 78:             time++;
   963   000EF6  4B74               	infsnz	main@time& (0+255),f,b
   964   000EF8  2B75               	incf	(main@time+1)& (0+255),f,b
   965   000EFA                     
   966                           ; BSR set to: 1
   967                           ;../main.c: 79:             time_flag = 0;
   968   000EFA  0E00               	movlw	0
   969   000EFC  6F73               	movwf	(main@time_flag+1)& (0+255),b
   970   000EFE  0E00               	movlw	0
   971   000F00  6F72               	movwf	main@time_flag& (0+255),b
   972   000F02                     l2928:
   973   000F02  0E01               	movlw	1
   974   000F04  A68E               	btfss	142,3,c	;volatile
   975   000F06  0E00               	movlw	0
   976   000F08  A48E               	btfss	142,2,c	;volatile
   977   000F0A  0E00               	movlw	0
   978   000F0C  B0E8               	btfsc	wreg,0,c
   979   000F0E  EF8B  F007         	goto	u1591
   980   000F12  EF90  F007         	goto	u1590
   981   000F16                     u1591:
   982   000F16  0100               	movlb	0	; () banked
   983   000F18  6BF4               	clrf	??_main& (0+255),b
   984   000F1A  2BF4               	incf	??_main& (0+255),f,b
   985   000F1C  EF92  F007         	goto	u1598
   986   000F20                     u1590:
   987   000F20  0100               	movlb	0	; () banked
   988   000F22  6BF4               	clrf	??_main& (0+255),b
   989   000F24                     u1598:
   990   000F24  51F4               	movf	??_main& (0+255),w,b
   991   000F26  A4D8               	btfss	status,2,c
   992   000F28  EF98  F007         	goto	u1601
   993   000F2C  EF9A  F007         	goto	u1600
   994   000F30                     u1601:
   995   000F30  EF81  F007         	goto	l2928
   996   000F34                     u1600:
   997   000F34                     
   998                           ; BSR set to: 0
   999                           ;../main.c: 84:         if (!PORTFbits.RF2){LATDbits.LATD7 = 1;}
  1000   000F34  B48E               	btfsc	142,2,c	;volatile
  1001   000F36  EF9F  F007         	goto	u1611
  1002   000F3A  EFA1  F007         	goto	u1610
  1003   000F3E                     u1611:
  1004   000F3E  EFA4  F007         	goto	l185
  1005   000F42                     u1610:
  1006   000F42                     
  1007                           ; BSR set to: 0
  1008   000F42  8E7C               	bsf	124,7,c	;volatile
  1009   000F44  EF28  F008         	goto	l2960
  1010   000F48                     l185:
  1011                           
  1012                           ; BSR set to: 0
  1013   000F48  8680               	bsf	128,3,c	;volatile
  1014   000F4A  EF28  F008         	goto	l2960
  1015   000F4E                     l2932:
  1016                           
  1017                           ; BSR set to: 1
  1018                           ;../main.c: 89:             forward(&motorL,&motorR);
  1019   000F4E  0E8C               	movlw	low main@motorL
  1020   000F50  6E1C               	movwf	forward@mL^0,c
  1021   000F52  0E01               	movlw	high main@motorL
  1022   000F54  6E1D               	movwf	(forward@mL+1)^0,c
  1023   000F56  0E95               	movlw	low main@motorR
  1024   000F58  6E1E               	movwf	forward@mR^0,c
  1025   000F5A  0E01               	movlw	high main@motorR
  1026   000F5C  6E1F               	movwf	(forward@mR+1)^0,c
  1027   000F5E  EC74  F011         	call	_forward	;wreg free
  1028   000F62                     
  1029                           ;../main.c: 90:             if (color_flag){
  1030   000F62  0101               	movlb	1	; () banked
  1031   000F64  516E               	movf	main@color_flag& (0+255),w,b
  1032   000F66  116F               	iorwf	(main@color_flag+1)& (0+255),w,b
  1033   000F68  B4D8               	btfsc	status,2,c
  1034   000F6A  EFB9  F007         	goto	u1621
  1035   000F6E  EFBB  F007         	goto	u1620
  1036   000F72                     u1621:
  1037   000F72  EF1C  F008         	goto	l2958
  1038   000F76                     u1620:
  1039   000F76                     
  1040                           ; BSR set to: 1
  1041                           ;../main.c: 91:                 stop(&motorL,&motorR);
  1042   000F76  0E8C               	movlw	low main@motorL
  1043   000F78  6E1C               	movwf	stop@mL^0,c
  1044   000F7A  0E01               	movlw	high main@motorL
  1045   000F7C  6E1D               	movwf	(stop@mL+1)^0,c
  1046   000F7E  0E95               	movlw	low main@motorR
  1047   000F80  6E1E               	movwf	stop@mR^0,c
  1048   000F82  0E01               	movlw	high main@motorR
  1049   000F84  6E1F               	movwf	(stop@mR+1)^0,c
  1050   000F86  EC2D  F011         	call	_stop	;wreg free
  1051   000F8A                     
  1052                           ;../main.c: 92:                 color_read(&RGB_recorded);
  1053   000F8A  0E7C               	movlw	low main@RGB_recorded
  1054   000F8C  6E0E               	movwf	color_read@rgb^0,c
  1055   000F8E  0E01               	movlw	high main@RGB_recorded
  1056   000F90  6E0F               	movwf	(color_read@rgb+1)^0,c
  1057   000F92  ECF2  F00E         	call	_color_read	;wreg free
  1058   000F96                     
  1059                           ;../main.c: 93:                 if (LATDbits.LATD7){color_name = color_processor_easy(&R
      +                          GB_recorded);}
  1060   000F96  AE7C               	btfss	124,7,c	;volatile
  1061   000F98  EFD0  F007         	goto	u1631
  1062   000F9C  EFD2  F007         	goto	u1630
  1063   000FA0                     u1631:
  1064   000FA0  EFDE  F007         	goto	l2944
  1065   000FA4                     u1630:
  1066   000FA4  0E7C               	movlw	low main@RGB_recorded
  1067   000FA6  6E03               	movwf	color_processor_easy@rgb^0,c
  1068   000FA8  0E01               	movlw	high main@RGB_recorded
  1069   000FAA  6E04               	movwf	(color_processor_easy@rgb+1)^0,c
  1070   000FAC  EC93  F00E         	call	_color_processor_easy	;wreg free
  1071   000FB0  C003  F178         	movff	?_color_processor_easy,main@color_name
  1072   000FB4  C004  F179         	movff	?_color_processor_easy+1,main@color_name+1
  1073   000FB8  EFE8  F007         	goto	l2946
  1074   000FBC                     l2944:
  1075   000FBC  0E7C               	movlw	low main@RGB_recorded
  1076   000FBE  6E03               	movwf	color_processor_hard@rgb^0,c
  1077   000FC0  0E01               	movlw	high main@RGB_recorded
  1078   000FC2  6E04               	movwf	(color_processor_hard@rgb+1)^0,c
  1079   000FC4  EC34  F00E         	call	_color_processor_hard	;wreg free
  1080   000FC8  C003  F178         	movff	?_color_processor_hard,main@color_name
  1081   000FCC  C004  F179         	movff	?_color_processor_hard+1,main@color_name+1
  1082   000FD0                     l2946:
  1083                           
  1084                           ;../main.c: 95:                 color_path[j] = color_name;
  1085   000FD0  90D8               	bcf	status,0,c
  1086   000FD2  0101               	movlb	1	; () banked
  1087   000FD4  3576               	rlcf	main@j& (0+255),w,b
  1088   000FD6  6ED9               	movwf	fsr2l,c
  1089   000FD8  3577               	rlcf	(main@j+1)& (0+255),w,b
  1090   000FDA  6EDA               	movwf	fsr2h,c
  1091   000FDC  0E32               	movlw	low main@color_path
  1092   000FDE  26D9               	addwf	fsr2l,f,c
  1093   000FE0  0E01               	movlw	high main@color_path
  1094   000FE2  22DA               	addwfc	fsr2h,f,c
  1095   000FE4  C178  FFDE         	movff	main@color_name,postinc2
  1096   000FE8  C179  FFDD         	movff	main@color_name+1,postdec2
  1097   000FEC                     
  1098                           ; BSR set to: 1
  1099                           ;../main.c: 96:                 time_path[j] = time;
  1100   000FEC  90D8               	bcf	status,0,c
  1101   000FEE  3576               	rlcf	main@j& (0+255),w,b
  1102   000FF0  6ED9               	movwf	fsr2l,c
  1103   000FF2  3577               	rlcf	(main@j+1)& (0+255),w,b
  1104   000FF4  6EDA               	movwf	fsr2h,c
  1105   000FF6  0E50               	movlw	low main@time_path
  1106   000FF8  26D9               	addwf	fsr2l,f,c
  1107   000FFA  0E01               	movlw	high main@time_path
  1108   000FFC  22DA               	addwfc	fsr2h,f,c
  1109   000FFE  C174  FFDE         	movff	main@time,postinc2
  1110   001002  C175  FFDD         	movff	main@time+1,postdec2
  1111   001006                     
  1112                           ; BSR set to: 1
  1113                           ;../main.c: 97:                 motor_action(color_name,&motorL,&motorR);
  1114   001006  C178  F024         	movff	main@color_name,motor_action@color
  1115   00100A  C179  F025         	movff	main@color_name+1,motor_action@color+1
  1116   00100E  0E8C               	movlw	low main@motorL
  1117   001010  6E26               	movwf	motor_action@l^0,c
  1118   001012  0E01               	movlw	high main@motorL
  1119   001014  6E27               	movwf	(motor_action@l+1)^0,c
  1120   001016  0E95               	movlw	low main@motorR
  1121   001018  6E28               	movwf	motor_action@r^0,c
  1122   00101A  0E01               	movlw	high main@motorR
  1123   00101C  6E29               	movwf	(motor_action@r+1)^0,c
  1124   00101E  ECD8  F00C         	call	_motor_action	;wreg free
  1125   001022                     
  1126                           ;../main.c: 99:                 j++;
  1127   001022  0101               	movlb	1	; () banked
  1128   001024  4B76               	infsnz	main@j& (0+255),f,b
  1129   001026  2B77               	incf	(main@j+1)& (0+255),f,b
  1130   001028                     
  1131                           ; BSR set to: 1
  1132                           ;../main.c: 100:                 time = 0;
  1133   001028  0E00               	movlw	0
  1134   00102A  6F75               	movwf	(main@time+1)& (0+255),b
  1135   00102C  0E00               	movlw	0
  1136   00102E  6F74               	movwf	main@time& (0+255),b
  1137   001030                     
  1138                           ; BSR set to: 1
  1139                           ;../main.c: 101:                 color_flag = 0;
  1140   001030  0E00               	movlw	0
  1141   001032  6F6F               	movwf	(main@color_flag+1)& (0+255),b
  1142   001034  0E00               	movlw	0
  1143   001036  6F6E               	movwf	main@color_flag& (0+255),b
  1144   001038                     l2958:
  1145                           
  1146                           ; BSR set to: 1
  1147                           ;../main.c: 103:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1148   001038  0E11               	movlw	17
  1149   00103A  0100               	movlb	0	; () banked
  1150   00103C  6FF5               	movwf	(??_main+1)& (0+255),b
  1151   00103E  0E3C               	movlw	60
  1152   001040  6FF4               	movwf	??_main& (0+255),b
  1153   001042  0ECB               	movlw	203
  1154   001044                     u1677:
  1155   001044  2EE8               	decfsz	wreg,f,c
  1156   001046  D7FE               	bra	u1677
  1157   001048  2FF4               	decfsz	??_main& (0+255),f,b
  1158   00104A  D7FC               	bra	u1677
  1159   00104C  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  1160   00104E  D7FA               	bra	u1677
  1161   001050                     l2960:
  1162                           
  1163                           ;../main.c: 88:         while (color_name != 8){
  1164   001050  0E08               	movlw	8
  1165   001052  0101               	movlb	1	; () banked
  1166   001054  1978               	xorwf	main@color_name& (0+255),w,b
  1167   001056  1179               	iorwf	(main@color_name+1)& (0+255),w,b
  1168   001058  A4D8               	btfss	status,2,c
  1169   00105A  EF31  F008         	goto	u1641
  1170   00105E  EF33  F008         	goto	u1640
  1171   001062                     u1641:
  1172   001062  EFA7  F007         	goto	l2932
  1173   001066                     u1640:
  1174   001066                     
  1175                           ; BSR set to: 1
  1176                           ;../main.c: 107:         for (int k=0;k<15;k++){
  1177   001066  0E00               	movlw	0
  1178   001068  6F7B               	movwf	(main@k+1)& (0+255),b
  1179   00106A  0E00               	movlw	0
  1180   00106C  6F7A               	movwf	main@k& (0+255),b
  1181   00106E                     l2964:
  1182                           
  1183                           ; BSR set to: 1
  1184   00106E  BF7B               	btfsc	(main@k+1)& (0+255),7,b
  1185   001070  EF43  F008         	goto	u1651
  1186   001074  517B               	movf	(main@k+1)& (0+255),w,b
  1187   001076  E109               	bnz	u1650
  1188   001078  0E0F               	movlw	15
  1189   00107A  5D7A               	subwf	main@k& (0+255),w,b
  1190   00107C  A0D8               	btfss	status,0,c
  1191   00107E  EF43  F008         	goto	u1651
  1192   001082  EF45  F008         	goto	u1650
  1193   001086                     u1651:
  1194   001086  EF47  F008         	goto	l2968
  1195   00108A                     u1650:
  1196   00108A  EF71  F007         	goto	l2922
  1197   00108E                     l2968:
  1198                           
  1199                           ; BSR set to: 1
  1200                           ;../main.c: 108:             motor_action(color_path[k],&motorL,&motorR);
  1201   00108E  90D8               	bcf	status,0,c
  1202   001090  357A               	rlcf	main@k& (0+255),w,b
  1203   001092  6ED9               	movwf	fsr2l,c
  1204   001094  357B               	rlcf	(main@k+1)& (0+255),w,b
  1205   001096  6EDA               	movwf	fsr2h,c
  1206   001098  0E32               	movlw	low main@color_path
  1207   00109A  26D9               	addwf	fsr2l,f,c
  1208   00109C  0E01               	movlw	high main@color_path
  1209   00109E  22DA               	addwfc	fsr2h,f,c
  1210   0010A0  CFDE F024          	movff	postinc2,motor_action@color
  1211   0010A4  CFDD F025          	movff	postdec2,motor_action@color+1
  1212   0010A8  0E8C               	movlw	low main@motorL
  1213   0010AA  6E26               	movwf	motor_action@l^0,c
  1214   0010AC  0E01               	movlw	high main@motorL
  1215   0010AE  6E27               	movwf	(motor_action@l+1)^0,c
  1216   0010B0  0E95               	movlw	low main@motorR
  1217   0010B2  6E28               	movwf	motor_action@r^0,c
  1218   0010B4  0E01               	movlw	high main@motorR
  1219   0010B6  6E29               	movwf	(motor_action@r+1)^0,c
  1220   0010B8  ECD8  F00C         	call	_motor_action	;wreg free
  1221                           
  1222                           ;../main.c: 109:             while (time_return < time_path[k]) {
  1223   0010BC  EF70  F008         	goto	l2974
  1224   0010C0                     l2970:
  1225                           
  1226                           ; BSR set to: 1
  1227                           ;../main.c: 110:                 _delay((unsigned long)((87)*(64000000/4000.0)));
  1228   0010C0  0E08               	movlw	8
  1229   0010C2  0100               	movlb	0	; () banked
  1230   0010C4  6FF5               	movwf	(??_main+1)& (0+255),b
  1231   0010C6  0E10               	movlw	16
  1232   0010C8  6FF4               	movwf	??_main& (0+255),b
  1233   0010CA  0EC3               	movlw	195
  1234   0010CC                     u1687:
  1235   0010CC  2EE8               	decfsz	wreg,f,c
  1236   0010CE  D7FE               	bra	u1687
  1237   0010D0  2FF4               	decfsz	??_main& (0+255),f,b
  1238   0010D2  D7FC               	bra	u1687
  1239   0010D4  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  1240   0010D6  D7FA               	bra	u1687
  1241   0010D8  D000               	nop2	
  1242   0010DA                     
  1243                           ;../main.c: 111:                 time_return++;
  1244   0010DA  0101               	movlb	1	; () banked
  1245   0010DC  4B70               	infsnz	main@time_return& (0+255),f,b
  1246   0010DE  2B71               	incf	(main@time_return+1)& (0+255),f,b
  1247   0010E0                     l2974:
  1248                           
  1249                           ;../main.c: 109:             while (time_return < time_path[k]) {
  1250   0010E0  90D8               	bcf	status,0,c
  1251   0010E2  0101               	movlb	1	; () banked
  1252   0010E4  357A               	rlcf	main@k& (0+255),w,b
  1253   0010E6  6ED9               	movwf	fsr2l,c
  1254   0010E8  357B               	rlcf	(main@k+1)& (0+255),w,b
  1255   0010EA  6EDA               	movwf	fsr2h,c
  1256   0010EC  0E50               	movlw	low main@time_path
  1257   0010EE  26D9               	addwf	fsr2l,f,c
  1258   0010F0  0E01               	movlw	high main@time_path
  1259   0010F2  22DA               	addwfc	fsr2h,f,c
  1260   0010F4  50DE               	movf	postinc2,w,c
  1261   0010F6  5D70               	subwf	main@time_return& (0+255),w,b
  1262   0010F8  50DE               	movf	postinc2,w,c
  1263   0010FA  5971               	subwfb	(main@time_return+1)& (0+255),w,b
  1264   0010FC  A0D8               	btfss	status,0,c
  1265   0010FE  EF83  F008         	goto	u1661
  1266   001102  EF85  F008         	goto	u1660
  1267   001106                     u1661:
  1268   001106  EF60  F008         	goto	l2970
  1269   00110A                     u1660:
  1270   00110A                     
  1271                           ; BSR set to: 1
  1272                           ;../main.c: 113:         }
  1273   00110A  4B7A               	infsnz	main@k& (0+255),f,b
  1274   00110C  2B7B               	incf	(main@k+1)& (0+255),f,b
  1275   00110E  EF37  F008         	goto	l2964
  1276   001112  EF2A  F000         	goto	start
  1277   001116                     __end_of_main:
  1278                           	callstack 0
  1279                           
  1280 ;; *************** function _stop *****************
  1281 ;; Defined at:
  1282 ;;		line 61 in file "../dc_motor.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  1285 ;;		 -> main@motorL(9), 
  1286 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  1287 ;;		 -> main@motorR(9), 
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;  i               2   32[COMRAM] int 
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  1    wreg      void 
  1292 ;; Registers used:
  1293 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1299 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1300 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1302 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1303 ;;Total ram usage:        7 bytes
  1304 ;; Hardware stack levels used: 1
  1305 ;; Hardware stack levels required when called: 4
  1306 ;; This function calls:
  1307 ;;		_setMotorPWM
  1308 ;; This function is called by:
  1309 ;;		_main
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           	psect	text1
  1314   00225A                     __ptext1:
  1315                           	callstack 0
  1316   00225A                     _stop:
  1317                           	callstack 26
  1318   00225A                     
  1319                           ;../dc_motor.c: 61: void stop(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c: 6
      +                          2: {;../dc_motor.c: 63:     mL->direction = 0;
  1320   00225A  EE20 F001          	lfsr	2,1
  1321   00225E  501C               	movf	stop@mL^0,w,c
  1322   002260  26D9               	addwf	fsr2l,f,c
  1323   002262  501D               	movf	(stop@mL+1)^0,w,c
  1324   002264  22DA               	addwfc	fsr2h,f,c
  1325   002266  0E00               	movlw	0
  1326   002268  6EDF               	movwf	indf2,c
  1327                           
  1328                           ;../dc_motor.c: 64:     mR->direction = 0;
  1329   00226A  EE20 F001          	lfsr	2,1
  1330   00226E  501E               	movf	stop@mR^0,w,c
  1331   002270  26D9               	addwf	fsr2l,f,c
  1332   002272  501F               	movf	(stop@mR+1)^0,w,c
  1333   002274  22DA               	addwfc	fsr2h,f,c
  1334   002276  0E00               	movlw	0
  1335   002278  6EDF               	movwf	indf2,c
  1336   00227A                     
  1337                           ;../dc_motor.c: 65:     for (int i = 5;i>0;i = i - 1)
  1338   00227A  0E00               	movlw	0
  1339   00227C  6E22               	movwf	(stop@i+1)^0,c
  1340   00227E  0E05               	movlw	5
  1341   002280  6E21               	movwf	stop@i^0,c
  1342   002282                     l2696:
  1343                           
  1344                           ;../dc_motor.c: 66:     {;../dc_motor.c: 67:         mL->power = i;
  1345   002282  C01C  FFD9         	movff	stop@mL,fsr2l
  1346   002286  C01D  FFDA         	movff	stop@mL+1,fsr2h
  1347   00228A  C021  FFDF         	movff	stop@i,indf2
  1348                           
  1349                           ;../dc_motor.c: 68:         mR->power = i;
  1350   00228E  C01E  FFD9         	movff	stop@mR,fsr2l
  1351   002292  C01F  FFDA         	movff	stop@mR+1,fsr2h
  1352   002296  C021  FFDF         	movff	stop@i,indf2
  1353   00229A                     
  1354                           ;../dc_motor.c: 69:         setMotorPWM(mL);
  1355   00229A  C01C  F011         	movff	stop@mL,setMotorPWM@m
  1356   00229E  C01D  F012         	movff	stop@mL+1,setMotorPWM@m+1
  1357   0022A2  ECC9  F009         	call	_setMotorPWM	;wreg free
  1358   0022A6                     
  1359                           ;../dc_motor.c: 70:         setMotorPWM(mR);
  1360   0022A6  C01E  F011         	movff	stop@mR,setMotorPWM@m
  1361   0022AA  C01F  F012         	movff	stop@mR+1,setMotorPWM@m+1
  1362   0022AE  ECC9  F009         	call	_setMotorPWM	;wreg free
  1363   0022B2                     
  1364                           ;../dc_motor.c: 71:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1365   0022B2  0ED0               	movlw	208
  1366   0022B4  6E20               	movwf	??_stop^0,c
  1367   0022B6  0ECA               	movlw	202
  1368   0022B8                     u1697:
  1369   0022B8  2EE8               	decfsz	wreg,f,c
  1370   0022BA  D7FE               	bra	u1697
  1371   0022BC  2E20               	decfsz	??_stop^0,f,c
  1372   0022BE  D7FC               	bra	u1697
  1373   0022C0                     
  1374                           ;../dc_motor.c: 72:     }
  1375   0022C0  0EFF               	movlw	255
  1376   0022C2  2421               	addwf	stop@i^0,w,c
  1377   0022C4  6E21               	movwf	stop@i^0,c
  1378   0022C6  0EFF               	movlw	255
  1379   0022C8  2022               	addwfc	(stop@i+1)^0,w,c
  1380   0022CA  6E22               	movwf	(stop@i+1)^0,c
  1381   0022CC  BE22               	btfsc	(stop@i+1)^0,7,c
  1382   0022CE  EF73  F011         	goto	u1460
  1383   0022D2  5022               	movf	(stop@i+1)^0,w,c
  1384   0022D4  E106               	bnz	u1461
  1385   0022D6  0421               	decf	stop@i^0,w,c
  1386   0022D8  B0D8               	btfsc	status,0,c
  1387   0022DA  EF71  F011         	goto	u1461
  1388   0022DE  EF73  F011         	goto	u1460
  1389   0022E2                     u1461:
  1390   0022E2  EF41  F011         	goto	l2696
  1391   0022E6                     u1460:
  1392   0022E6  0012               	return		;funcret
  1393   0022E8                     __end_of_stop:
  1394                           	callstack 0
  1395                           
  1396 ;; *************** function _sprintf *****************
  1397 ;; Defined at:
  1398 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  s               2    0[BANK0 ] PTR unsigned char 
  1401 ;;		 -> main@readout(50), 
  1402 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1403 ;;		 -> STR_1(15), 
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  f              11   14[BANK0 ] struct _IO_FILE
  1406 ;;  ap              2   12[BANK0 ] PTR void [1]
  1407 ;;		 -> ?_sprintf(2), 
  1408 ;;  ret             2    0        int 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  2    0[BANK0 ] int 
  1411 ;; Registers used:
  1412 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1418 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1419 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1421 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1422 ;;Total ram usage:       25 bytes
  1423 ;; Hardware stack levels used: 1
  1424 ;; Hardware stack levels required when called: 9
  1425 ;; This function calls:
  1426 ;;		_vfprintf
  1427 ;; This function is called by:
  1428 ;;		_main
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text2
  1433   002446                     __ptext2:
  1434                           	callstack 0
  1435   002446                     _sprintf:
  1436                           	callstack 21
  1437   002446  0EDF               	movlw	low (?_sprintf+4)
  1438   002448  0100               	movlb	0	; () banked
  1439   00244A  6FE7               	movwf	sprintf@ap& (0+255),b
  1440   00244C  0E00               	movlw	high (?_sprintf+4)
  1441   00244E  6FE8               	movwf	(sprintf@ap+1)& (0+255),b
  1442   002450  C0DB  F0E9         	movff	sprintf@s,sprintf@f
  1443   002454  C0DC  F0EA         	movff	sprintf@s+1,sprintf@f+1
  1444   002458                     
  1445                           ; BSR set to: 0
  1446   002458  0E00               	movlw	0
  1447   00245A  6FED               	movwf	(sprintf@f+4)& (0+255),b
  1448   00245C  0E00               	movlw	0
  1449   00245E  6FEC               	movwf	(sprintf@f+3)& (0+255),b
  1450   002460                     
  1451                           ; BSR set to: 0
  1452   002460  0E00               	movlw	0
  1453   002462  6FF3               	movwf	(sprintf@f+10)& (0+255),b
  1454   002464  0E00               	movlw	0
  1455   002466  6FF2               	movwf	(sprintf@f+9)& (0+255),b
  1456   002468                     
  1457                           ; BSR set to: 0
  1458   002468  0EE9               	movlw	low sprintf@f
  1459   00246A  6E53               	movwf	vfprintf@fp^0,c
  1460   00246C  0E00               	movlw	high sprintf@f
  1461   00246E  6E54               	movwf	(vfprintf@fp+1)^0,c
  1462   002470  C0DD  F055         	movff	sprintf@fmt,vfprintf@fmt
  1463   002474  C0DE  F056         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1464   002478  0EE7               	movlw	low sprintf@ap
  1465   00247A  6E57               	movwf	vfprintf@ap^0,c
  1466   00247C  0E00               	movlw	high sprintf@ap
  1467   00247E  6E58               	movwf	(vfprintf@ap+1)^0,c
  1468   002480  EC4C  F012         	call	_vfprintf	;wreg free
  1469   002484  0100               	movlb	0	; () banked
  1470   002486  51EC               	movf	(sprintf@f+3)& (0+255),w,b
  1471   002488  25DB               	addwf	sprintf@s& (0+255),w,b
  1472   00248A  6ED9               	movwf	fsr2l,c
  1473   00248C  51ED               	movf	(sprintf@f+4)& (0+255),w,b
  1474   00248E  21DC               	addwfc	(sprintf@s+1)& (0+255),w,b
  1475   002490  6EDA               	movwf	fsr2h,c
  1476   002492  0E00               	movlw	0
  1477   002494  6EDF               	movwf	indf2,c
  1478   002496                     
  1479                           ; BSR set to: 0
  1480   002496  0012               	return		;funcret
  1481   002498                     __end_of_sprintf:
  1482                           	callstack 0
  1483                           
  1484 ;; *************** function _vfprintf *****************
  1485 ;; Defined at:
  1486 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  fp              2   82[COMRAM] PTR struct _IO_FILE
  1489 ;;		 -> sprintf@f(11), 
  1490 ;;  fmt             2   84[COMRAM] PTR const unsigned char 
  1491 ;;		 -> STR_1(15), 
  1492 ;;  ap              2   86[COMRAM] PTR PTR void 
  1493 ;;		 -> sprintf@ap(2), 
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;  cfmt            2   88[COMRAM] PTR unsigned char 
  1496 ;;		 -> STR_1(15), 
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  2   82[COMRAM] int 
  1499 ;; Registers used:
  1500 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1506 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1507 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1509 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1510 ;;Total ram usage:        8 bytes
  1511 ;; Hardware stack levels used: 1
  1512 ;; Hardware stack levels required when called: 8
  1513 ;; This function calls:
  1514 ;;		_vfpfcnvrt
  1515 ;; This function is called by:
  1516 ;;		_sprintf
  1517 ;; This function uses a non-reentrant model
  1518 ;;
  1519                           
  1520                           	psect	text3
  1521   002498                     __ptext3:
  1522                           	callstack 0
  1523   002498                     _vfprintf:
  1524                           	callstack 21
  1525   002498                     
  1526                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  1527   002498  C055  F059         	movff	vfprintf@fmt,vfprintf@cfmt
  1528   00249C  C056  F05A         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1529                           
  1530                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1531   0024A0  EF60  F012         	goto	l2512
  1532   0024A4                     l2510:
  1533                           
  1534                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1535   0024A4  C053  F041         	movff	vfprintf@fp,vfpfcnvrt@fp
  1536   0024A8  C054  F042         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1537   0024AC  0E59               	movlw	low vfprintf@cfmt
  1538   0024AE  6E43               	movwf	vfpfcnvrt@fmt^0,c
  1539   0024B0  0E00               	movlw	high vfprintf@cfmt
  1540   0024B2  6E44               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1541   0024B4  C057  F045         	movff	vfprintf@ap,vfpfcnvrt@ap
  1542   0024B8  C058  F046         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1543   0024BC  EC29  F00C         	call	_vfpfcnvrt	;wreg free
  1544   0024C0                     l2512:
  1545                           
  1546                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1547   0024C0  C059  FFF6         	movff	vfprintf@cfmt,tblptrl
  1548   0024C4  C05A  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1549   0024C8                     	if	0	;tblptru may be non-zero
  1550   0024C8                     	endif
  1551   0024C8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1552   0024C8  0E00               	movlw	low (__mediumconst shr (0+16))
  1553   0024CA  6EF8               	movwf	tblptru,c
  1554   0024CC                     	endif
  1555   0024CC  0008               	tblrd		*
  1556   0024CE  50F5               	movf	tablat,w,c
  1557   0024D0  0900               	iorlw	0
  1558   0024D2  A4D8               	btfss	status,2,c
  1559   0024D4  EF6E  F012         	goto	u1351
  1560   0024D8  EF70  F012         	goto	u1350
  1561   0024DC                     u1351:
  1562   0024DC  EF52  F012         	goto	l2510
  1563   0024E0                     u1350:
  1564   0024E0                     
  1565                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  1566   0024E0  0E00               	movlw	0
  1567   0024E2  6E54               	movwf	(?_vfprintf+1)^0,c
  1568   0024E4  0E00               	movlw	0
  1569   0024E6  6E53               	movwf	?_vfprintf^0,c
  1570   0024E8  0012               	return		;funcret
  1571   0024EA                     __end_of_vfprintf:
  1572                           	callstack 0
  1573                           
  1574 ;; *************** function _vfpfcnvrt *****************
  1575 ;; Defined at:
  1576 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;  fp              2   64[COMRAM] PTR struct _IO_FILE
  1579 ;;		 -> sprintf@f(11), 
  1580 ;;  fmt             2   66[COMRAM] PTR PTR unsigned char 
  1581 ;;		 -> vfprintf@cfmt(2), 
  1582 ;;  ap              2   68[COMRAM] PTR PTR void 
  1583 ;;		 -> sprintf@ap(2), 
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  convarg         8   72[COMRAM] struct .
  1586 ;;  cp              2   80[COMRAM] PTR unsigned char 
  1587 ;;		 -> STR_1(15), 
  1588 ;;  i               2    0        int 
  1589 ;;  done            2    0        int 
  1590 ;;  c               1    0        unsigned char 
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  1    wreg      void 
  1593 ;; Registers used:
  1594 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1600 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1601 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1602 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1603 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1604 ;;Total ram usage:       18 bytes
  1605 ;; Hardware stack levels used: 1
  1606 ;; Hardware stack levels required when called: 7
  1607 ;; This function calls:
  1608 ;;		_dtoa
  1609 ;;		_fputc
  1610 ;; This function is called by:
  1611 ;;		_vfprintf
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615                           	psect	text4
  1616   001852                     __ptext4:
  1617                           	callstack 0
  1618   001852                     _vfpfcnvrt:
  1619                           	callstack 21
  1620   001852                     
  1621                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  1622   001852  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1623   001856  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1624   00185A  CFDE FFF6          	movff	postinc2,tblptrl
  1625   00185E  CFDD FFF7          	movff	postdec2,tblptrh
  1626   001862                     	if	0	;tblptru may be non-zero
  1627   001862                     	endif
  1628   001862                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1629   001862  0E00               	movlw	low (__mediumconst shr (0+16))
  1630   001864  6EF8               	movwf	tblptru,c
  1631   001866                     	endif
  1632   001866  0008               	tblrd		*
  1633   001868  50F5               	movf	tablat,w,c
  1634   00186A  0A25               	xorlw	37
  1635   00186C  A4D8               	btfss	status,2,c
  1636   00186E  EF3B  F00C         	goto	u1251
  1637   001872  EF3D  F00C         	goto	u1250
  1638   001876                     u1251:
  1639   001876  EFC1  F00C         	goto	l2318
  1640   00187A                     u1250:
  1641   00187A                     
  1642                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  1643   00187A  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1644   00187E  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1645   001882  2ADE               	incf	postinc2,f,c
  1646   001884  0E00               	movlw	0
  1647   001886  22DD               	addwfc	postdec2,f,c
  1648   001888                     
  1649                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  1650   001888  0E00               	movlw	0
  1651   00188A  0100               	movlb	0	; () banked
  1652   00188C  6FB1               	movwf	(_width+1)& (0+255),b
  1653   00188E  0E00               	movlw	0
  1654   001890  6FB0               	movwf	_width& (0+255),b
  1655   001892  C0B0  F0B8         	movff	_width,_flags
  1656   001896                     
  1657                           ; BSR set to: 0
  1658                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  1659   001896  69B2               	setf	_prec& (0+255),b
  1660   001898  69B3               	setf	(_prec+1)& (0+255),b
  1661   00189A                     
  1662                           ; BSR set to: 0
  1663                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1664   00189A  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1665   00189E  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1666   0018A2  CFDE F051          	movff	postinc2,vfpfcnvrt@cp
  1667   0018A6  CFDD F052          	movff	postdec2,vfpfcnvrt@cp+1
  1668   0018AA                     
  1669                           ; BSR set to: 0
  1670                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1671   0018AA  C051  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1672   0018AE  C052  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1673   0018B2                     	if	0	;tblptru may be non-zero
  1674   0018B2                     	endif
  1675   0018B2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1676   0018B2  0E00               	movlw	low (__mediumconst shr (0+16))
  1677   0018B4  6EF8               	movwf	tblptru,c
  1678   0018B6                     	endif
  1679   0018B6  0008               	tblrd		*
  1680   0018B8  50F5               	movf	tablat,w,c
  1681   0018BA  0A64               	xorlw	100
  1682   0018BC  B4D8               	btfsc	status,2,c
  1683   0018BE  EF63  F00C         	goto	u1261
  1684   0018C2  EF65  F00C         	goto	u1260
  1685   0018C6                     u1261:
  1686   0018C6  EF75  F00C         	goto	l2308
  1687   0018CA                     u1260:
  1688   0018CA                     
  1689                           ; BSR set to: 0
  1690   0018CA  C051  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1691   0018CE  C052  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1692   0018D2                     	if	0	;tblptru may be non-zero
  1693   0018D2                     	endif
  1694   0018D2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1695   0018D2  0E00               	movlw	low (__mediumconst shr (0+16))
  1696   0018D4  6EF8               	movwf	tblptru,c
  1697   0018D6                     	endif
  1698   0018D6  0008               	tblrd		*
  1699   0018D8  50F5               	movf	tablat,w,c
  1700   0018DA  0A69               	xorlw	105
  1701   0018DC  A4D8               	btfss	status,2,c
  1702   0018DE  EF73  F00C         	goto	u1271
  1703   0018E2  EF75  F00C         	goto	u1270
  1704   0018E6                     u1271:
  1705   0018E6  EFB8  F00C         	goto	l2314
  1706   0018EA                     u1270:
  1707   0018EA                     l2308:
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1711   0018EA  C045  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1712   0018EE  C046  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1713   0018F2  CFDF F047          	movff	indf2,??_vfpfcnvrt
  1714   0018F6  0E02               	movlw	2
  1715   0018F8  26DE               	addwf	postinc2,f,c
  1716   0018FA  CFDF F048          	movff	indf2,??_vfpfcnvrt+1
  1717   0018FE  0E00               	movlw	0
  1718   001900  22DD               	addwfc	postdec2,f,c
  1719   001902  C047  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1720   001906  C048  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1721   00190A  CFDE F049          	movff	postinc2,vfpfcnvrt@convarg
  1722   00190E  CFDD F04A          	movff	postdec2,vfpfcnvrt@convarg+1
  1723   001912  0E00               	movlw	0
  1724   001914  BE4A               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1725   001916  0EFF               	movlw	-1
  1726   001918  6E4B               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1727   00191A  6E4C               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1728   00191C  6E4D               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1729   00191E  6E4E               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1730   001920  6E4F               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1731   001922  6E50               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1732                           
  1733                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1734   001924  0E01               	movlw	1
  1735   001926  2451               	addwf	vfpfcnvrt@cp^0,w,c
  1736   001928  6E47               	movwf	??_vfpfcnvrt^0,c
  1737   00192A  0E00               	movlw	0
  1738   00192C  2052               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1739   00192E  6E48               	movwf	(??_vfpfcnvrt+1)^0,c
  1740   001930  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1741   001934  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1742   001938  C047  FFDE         	movff	??_vfpfcnvrt,postinc2
  1743   00193C  C048  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1744   001940                     
  1745                           ; BSR set to: 0
  1746                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1747   001940  C041  F01E         	movff	vfpfcnvrt@fp,dtoa@fp
  1748   001944  C042  F01F         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1749   001948  C049  F020         	movff	vfpfcnvrt@convarg,dtoa@d
  1750   00194C  C04A  F021         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1751   001950  C04B  F022         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1752   001954  C04C  F023         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1753   001958  C04D  F024         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1754   00195C  C04E  F025         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1755   001960  C04F  F026         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1756   001964  C050  F027         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1757   001968  EC8B  F008         	call	_dtoa	;wreg free
  1758   00196C  EFD7  F00C         	goto	l1128
  1759   001970                     l2314:
  1760                           
  1761                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1762   001970  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1763   001974  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1764   001978  2ADE               	incf	postinc2,f,c
  1765   00197A  0E00               	movlw	0
  1766   00197C  22DD               	addwfc	postdec2,f,c
  1767   00197E  EFD7  F00C         	goto	l1128
  1768   001982                     l2318:
  1769                           
  1770                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1771   001982  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1772   001986  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1773   00198A  CFDE FFF6          	movff	postinc2,tblptrl
  1774   00198E  CFDD FFF7          	movff	postdec2,tblptrh
  1775   001992                     	if	0	;tblptru may be non-zero
  1776   001992                     	endif
  1777   001992                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1778   001992  0E00               	movlw	low (__mediumconst shr (0+16))
  1779   001994  6EF8               	movwf	tblptru,c
  1780   001996                     	endif
  1781   001996  0008               	tblrd		*
  1782   001998  50F5               	movf	tablat,w,c
  1783   00199A  6E03               	movwf	fputc@c^0,c
  1784   00199C  6A04               	clrf	(fputc@c+1)^0,c
  1785   00199E  C041  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1786   0019A2  C042  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1787   0019A6  EC6D  F00D         	call	_fputc	;wreg free
  1788   0019AA  EFB8  F00C         	goto	l2314
  1789   0019AE                     l1128:
  1790   0019AE  0012               	return		;funcret
  1791   0019B0                     __end_of_vfpfcnvrt:
  1792                           	callstack 0
  1793                           
  1794 ;; *************** function _dtoa *****************
  1795 ;; Defined at:
  1796 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  fp              2   29[COMRAM] PTR struct _IO_FILE
  1799 ;;		 -> sprintf@f(11), 
  1800 ;;  d               8   31[COMRAM] long long 
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;  n               8   53[COMRAM] long long 
  1803 ;;  i               2   61[COMRAM] int 
  1804 ;;  w               2   51[COMRAM] int 
  1805 ;;  p               2   49[COMRAM] int 
  1806 ;;  s               1   63[COMRAM] unsigned char 
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      void 
  1809 ;; Registers used:
  1810 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1816 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1817 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1818 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1819 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1820 ;;Total ram usage:       35 bytes
  1821 ;; Hardware stack levels used: 1
  1822 ;; Hardware stack levels required when called: 6
  1823 ;; This function calls:
  1824 ;;		___aodiv
  1825 ;;		___aomod
  1826 ;;		_abs
  1827 ;;		_pad
  1828 ;; This function is called by:
  1829 ;;		_vfpfcnvrt
  1830 ;; This function uses a non-reentrant model
  1831 ;;
  1832                           
  1833                           	psect	text5
  1834   001116                     __ptext5:
  1835                           	callstack 0
  1836   001116                     _dtoa:
  1837                           	callstack 21
  1838   001116                     
  1839                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  1840   001116  C020  F036         	movff	dtoa@d,dtoa@n
  1841   00111A  C021  F037         	movff	dtoa@d+1,dtoa@n+1
  1842   00111E  C022  F038         	movff	dtoa@d+2,dtoa@n+2
  1843   001122  C023  F039         	movff	dtoa@d+3,dtoa@n+3
  1844   001126  C024  F03A         	movff	dtoa@d+4,dtoa@n+4
  1845   00112A  C025  F03B         	movff	dtoa@d+5,dtoa@n+5
  1846   00112E  C026  F03C         	movff	dtoa@d+6,dtoa@n+6
  1847   001132  C027  F03D         	movff	dtoa@d+7,dtoa@n+7
  1848   001136                     
  1849                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  1850   001136  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1851   001138  EFA0  F008         	goto	u1091
  1852   00113C  EFA3  F008         	goto	u1090
  1853   001140                     u1091:
  1854   001140  0E01               	movlw	1
  1855   001142  EFA4  F008         	goto	u1100
  1856   001146                     u1090:
  1857   001146  0E00               	movlw	0
  1858   001148                     u1100:
  1859   001148  6E40               	movwf	dtoa@s^0,c
  1860   00114A                     
  1861                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  1862   00114A  5040               	movf	dtoa@s^0,w,c
  1863   00114C  B4D8               	btfsc	status,2,c
  1864   00114E  EFAB  F008         	goto	u1111
  1865   001152  EFAD  F008         	goto	u1110
  1866   001156                     u1111:
  1867   001156  EFBD  F008         	goto	l2206
  1868   00115A                     u1110:
  1869   00115A                     
  1870                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  1871   00115A  1E3D               	comf	(dtoa@n+7)^0,f,c
  1872   00115C  1E3C               	comf	(dtoa@n+6)^0,f,c
  1873   00115E  1E3B               	comf	(dtoa@n+5)^0,f,c
  1874   001160  1E3A               	comf	(dtoa@n+4)^0,f,c
  1875   001162  1E39               	comf	(dtoa@n+3)^0,f,c
  1876   001164  1E38               	comf	(dtoa@n+2)^0,f,c
  1877   001166  1E37               	comf	(dtoa@n+1)^0,f,c
  1878   001168  6C36               	negf	dtoa@n^0,c
  1879   00116A  0E00               	movlw	0
  1880   00116C  2237               	addwfc	(dtoa@n+1)^0,f,c
  1881   00116E  2238               	addwfc	(dtoa@n+2)^0,f,c
  1882   001170  2239               	addwfc	(dtoa@n+3)^0,f,c
  1883   001172  223A               	addwfc	(dtoa@n+4)^0,f,c
  1884   001174  223B               	addwfc	(dtoa@n+5)^0,f,c
  1885   001176  223C               	addwfc	(dtoa@n+6)^0,f,c
  1886   001178  223D               	addwfc	(dtoa@n+7)^0,f,c
  1887   00117A                     l2206:
  1888                           
  1889                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  1890   00117A  0100               	movlb	0	; () banked
  1891   00117C  BFB3               	btfsc	(_prec+1)& (0+255),7,b
  1892   00117E  EFCB  F008         	goto	u1120
  1893   001182  51B3               	movf	(_prec+1)& (0+255),w,b
  1894   001184  E106               	bnz	u1121
  1895   001186  05B2               	decf	_prec& (0+255),w,b
  1896   001188  B0D8               	btfsc	status,0,c
  1897   00118A  EFC9  F008         	goto	u1121
  1898   00118E  EFCB  F008         	goto	u1120
  1899   001192                     u1121:
  1900   001192  EFD1  F008         	goto	l1107
  1901   001196                     u1120:
  1902   001196                     
  1903                           ; BSR set to: 0
  1904   001196  0E00               	movlw	0
  1905   001198  6E33               	movwf	(dtoa@p+1)^0,c
  1906   00119A  0E01               	movlw	1
  1907   00119C  6E32               	movwf	dtoa@p^0,c
  1908   00119E  EFD5  F008         	goto	l1109
  1909   0011A2                     l1107:
  1910                           
  1911                           ; BSR set to: 0
  1912   0011A2  C0B2  F032         	movff	_prec,dtoa@p
  1913   0011A6  C0B3  F033         	movff	_prec+1,dtoa@p+1
  1914   0011AA                     l1109:
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  1918   0011AA  C0B0  F034         	movff	_width,dtoa@w
  1919   0011AE  C0B1  F035         	movff	_width+1,dtoa@w+1
  1920   0011B2                     
  1921                           ; BSR set to: 0
  1922                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  1923   0011B2  5040               	movf	dtoa@s^0,w,c
  1924   0011B4  B4D8               	btfsc	status,2,c
  1925   0011B6  EFDF  F008         	goto	u1131
  1926   0011BA  EFE1  F008         	goto	u1130
  1927   0011BE                     u1131:
  1928   0011BE  EFF8  F008         	goto	l1110
  1929   0011C2                     u1130:
  1930   0011C2                     
  1931                           ; BSR set to: 0
  1932                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  1933   0011C2  0634               	decf	dtoa@w^0,f,c
  1934   0011C4  A0D8               	btfss	status,0,c
  1935   0011C6  0635               	decf	(dtoa@w+1)^0,f,c
  1936   0011C8                     
  1937                           ; BSR set to: 0
  1938                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  1939   0011C8  5040               	movf	dtoa@s^0,w,c
  1940   0011CA  A4D8               	btfss	status,2,c
  1941   0011CC  EFEA  F008         	goto	u1141
  1942   0011D0  EFEC  F008         	goto	u1140
  1943   0011D4                     u1141:
  1944   0011D4  EFF2  F008         	goto	l2218
  1945   0011D8                     u1140:
  1946   0011D8                     
  1947                           ; BSR set to: 0
  1948   0011D8  0E00               	movlw	0
  1949   0011DA  6E31               	movwf	(_dtoa$2247+1)^0,c
  1950   0011DC  0E2B               	movlw	43
  1951   0011DE  6E30               	movwf	_dtoa$2247^0,c
  1952   0011E0  EFF6  F008         	goto	l2220
  1953   0011E4                     l2218:
  1954                           
  1955                           ; BSR set to: 0
  1956   0011E4  0E00               	movlw	0
  1957   0011E6  6E31               	movwf	(_dtoa$2247+1)^0,c
  1958   0011E8  0E2D               	movlw	45
  1959   0011EA  6E30               	movwf	_dtoa$2247^0,c
  1960   0011EC                     l2220:
  1961                           
  1962                           ; BSR set to: 0
  1963   0011EC  C030  F040         	movff	_dtoa$2247,dtoa@s
  1964   0011F0                     l1110:
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  1968   0011F0  0E00               	movlw	0
  1969   0011F2  6E3F               	movwf	(dtoa@i+1)^0,c
  1970   0011F4  0E1F               	movlw	31
  1971   0011F6  6E3E               	movwf	dtoa@i^0,c
  1972   0011F8                     
  1973                           ; BSR set to: 0
  1974                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  1975   0011F8  0E00               	movlw	0
  1976   0011FA  6FDA               	movwf	(_dbuf+31)& (0+255),b
  1977                           
  1978                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1979   0011FC  EF7C  F009         	goto	l2234
  1980   001200                     l2224:
  1981                           
  1982                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  1983   001200  063E               	decf	dtoa@i^0,f,c
  1984   001202  A0D8               	btfss	status,0,c
  1985   001204  063F               	decf	(dtoa@i+1)^0,f,c
  1986   001206                     
  1987                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1988   001206  0EBB               	movlw	low _dbuf
  1989   001208  243E               	addwf	dtoa@i^0,w,c
  1990   00120A  6ED9               	movwf	fsr2l,c
  1991   00120C  0E00               	movlw	high _dbuf
  1992   00120E  203F               	addwfc	(dtoa@i+1)^0,w,c
  1993   001210  6EDA               	movwf	fsr2h,c
  1994   001212  C036  F003         	movff	dtoa@n,___aomod@dividend
  1995   001216  C037  F004         	movff	dtoa@n+1,___aomod@dividend+1
  1996   00121A  C038  F005         	movff	dtoa@n+2,___aomod@dividend+2
  1997   00121E  C039  F006         	movff	dtoa@n+3,___aomod@dividend+3
  1998   001222  C03A  F007         	movff	dtoa@n+4,___aomod@dividend+4
  1999   001226  C03B  F008         	movff	dtoa@n+5,___aomod@dividend+5
  2000   00122A  C03C  F009         	movff	dtoa@n+6,___aomod@dividend+6
  2001   00122E  C03D  F00A         	movff	dtoa@n+7,___aomod@dividend+7
  2002   001232  0E0A               	movlw	10
  2003   001234  6E0B               	movwf	___aomod@divisor^0,c
  2004   001236  0E00               	movlw	0
  2005   001238  6E0C               	movwf	(___aomod@divisor+1)^0,c
  2006   00123A  0E00               	movlw	0
  2007   00123C  6E0D               	movwf	(___aomod@divisor+2)^0,c
  2008   00123E  0E00               	movlw	0
  2009   001240  6E0E               	movwf	(___aomod@divisor+3)^0,c
  2010   001242  0E00               	movlw	0
  2011   001244  6E0F               	movwf	(___aomod@divisor+4)^0,c
  2012   001246  0E00               	movlw	0
  2013   001248  6E10               	movwf	(___aomod@divisor+5)^0,c
  2014   00124A  0E00               	movlw	0
  2015   00124C  6E11               	movwf	(___aomod@divisor+6)^0,c
  2016   00124E  0E00               	movlw	0
  2017   001250  6E12               	movwf	(___aomod@divisor+7)^0,c
  2018   001252  EC77  F00B         	call	___aomod	;wreg free
  2019   001256  C003  F028         	movff	?___aomod,??_dtoa
  2020   00125A  C004  F029         	movff	?___aomod+1,??_dtoa+1
  2021   00125E  C005  F02A         	movff	?___aomod+2,??_dtoa+2
  2022   001262  C006  F02B         	movff	?___aomod+3,??_dtoa+3
  2023   001266  C007  F02C         	movff	?___aomod+4,??_dtoa+4
  2024   00126A  C008  F02D         	movff	?___aomod+5,??_dtoa+5
  2025   00126E  C009  F02E         	movff	?___aomod+6,??_dtoa+6
  2026   001272  C00A  F02F         	movff	?___aomod+7,??_dtoa+7
  2027   001276  C028  F015         	movff	??_dtoa,abs@a
  2028   00127A  C029  F016         	movff	??_dtoa+1,abs@a+1
  2029   00127E  EC79  F013         	call	_abs	;wreg free
  2030   001282  5015               	movf	?_abs^0,w,c
  2031   001284  0F30               	addlw	48
  2032   001286  6EDF               	movwf	indf2,c
  2033   001288                     
  2034                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2035   001288  0632               	decf	dtoa@p^0,f,c
  2036   00128A  A0D8               	btfss	status,0,c
  2037   00128C  0633               	decf	(dtoa@p+1)^0,f,c
  2038   00128E                     
  2039                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2040   00128E  0634               	decf	dtoa@w^0,f,c
  2041   001290  A0D8               	btfss	status,0,c
  2042   001292  0635               	decf	(dtoa@w+1)^0,f,c
  2043   001294                     
  2044                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2045   001294  C036  F003         	movff	dtoa@n,___aodiv@dividend
  2046   001298  C037  F004         	movff	dtoa@n+1,___aodiv@dividend+1
  2047   00129C  C038  F005         	movff	dtoa@n+2,___aodiv@dividend+2
  2048   0012A0  C039  F006         	movff	dtoa@n+3,___aodiv@dividend+3
  2049   0012A4  C03A  F007         	movff	dtoa@n+4,___aodiv@dividend+4
  2050   0012A8  C03B  F008         	movff	dtoa@n+5,___aodiv@dividend+5
  2051   0012AC  C03C  F009         	movff	dtoa@n+6,___aodiv@dividend+6
  2052   0012B0  C03D  F00A         	movff	dtoa@n+7,___aodiv@dividend+7
  2053   0012B4  0E0A               	movlw	10
  2054   0012B6  6E0B               	movwf	___aodiv@divisor^0,c
  2055   0012B8  0E00               	movlw	0
  2056   0012BA  6E0C               	movwf	(___aodiv@divisor+1)^0,c
  2057   0012BC  0E00               	movlw	0
  2058   0012BE  6E0D               	movwf	(___aodiv@divisor+2)^0,c
  2059   0012C0  0E00               	movlw	0
  2060   0012C2  6E0E               	movwf	(___aodiv@divisor+3)^0,c
  2061   0012C4  0E00               	movlw	0
  2062   0012C6  6E0F               	movwf	(___aodiv@divisor+4)^0,c
  2063   0012C8  0E00               	movlw	0
  2064   0012CA  6E10               	movwf	(___aodiv@divisor+5)^0,c
  2065   0012CC  0E00               	movlw	0
  2066   0012CE  6E11               	movwf	(___aodiv@divisor+6)^0,c
  2067   0012D0  0E00               	movlw	0
  2068   0012D2  6E12               	movwf	(___aodiv@divisor+7)^0,c
  2069   0012D4  ECB3  F00A         	call	___aodiv	;wreg free
  2070   0012D8  C003  F036         	movff	?___aodiv,dtoa@n
  2071   0012DC  C004  F037         	movff	?___aodiv+1,dtoa@n+1
  2072   0012E0  C005  F038         	movff	?___aodiv+2,dtoa@n+2
  2073   0012E4  C006  F039         	movff	?___aodiv+3,dtoa@n+3
  2074   0012E8  C007  F03A         	movff	?___aodiv+4,dtoa@n+4
  2075   0012EC  C008  F03B         	movff	?___aodiv+5,dtoa@n+5
  2076   0012F0  C009  F03C         	movff	?___aodiv+6,dtoa@n+6
  2077   0012F4  C00A  F03D         	movff	?___aodiv+7,dtoa@n+7
  2078   0012F8                     l2234:
  2079                           
  2080                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2081   0012F8  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  2082   0012FA  EF87  F009         	goto	u1151
  2083   0012FE  503F               	movf	(dtoa@i+1)^0,w,c
  2084   001300  E108               	bnz	u1150
  2085   001302  043E               	decf	dtoa@i^0,w,c
  2086   001304  A0D8               	btfss	status,0,c
  2087   001306  EF87  F009         	goto	u1151
  2088   00130A  EF89  F009         	goto	u1150
  2089   00130E                     u1151:
  2090   00130E  EFA5  F009         	goto	l2240
  2091   001312                     u1150:
  2092   001312  5036               	movf	dtoa@n^0,w,c
  2093   001314  1037               	iorwf	(dtoa@n+1)^0,w,c
  2094   001316  1038               	iorwf	(dtoa@n+2)^0,w,c
  2095   001318  1039               	iorwf	(dtoa@n+3)^0,w,c
  2096   00131A  103A               	iorwf	(dtoa@n+4)^0,w,c
  2097   00131C  103B               	iorwf	(dtoa@n+5)^0,w,c
  2098   00131E  103C               	iorwf	(dtoa@n+6)^0,w,c
  2099   001320  103D               	iorwf	(dtoa@n+7)^0,w,c
  2100   001322  A4D8               	btfss	status,2,c
  2101   001324  EF96  F009         	goto	u1161
  2102   001328  EF98  F009         	goto	u1160
  2103   00132C                     u1161:
  2104   00132C  EF00  F009         	goto	l2224
  2105   001330                     u1160:
  2106   001330  BE33               	btfsc	(dtoa@p+1)^0,7,c
  2107   001332  EFA5  F009         	goto	u1170
  2108   001336  5033               	movf	(dtoa@p+1)^0,w,c
  2109   001338  E106               	bnz	u1171
  2110   00133A  0432               	decf	dtoa@p^0,w,c
  2111   00133C  B0D8               	btfsc	status,0,c
  2112   00133E  EFA3  F009         	goto	u1171
  2113   001342  EFA5  F009         	goto	u1170
  2114   001346                     u1171:
  2115   001346  EF00  F009         	goto	l2224
  2116   00134A                     u1170:
  2117   00134A                     l2240:
  2118                           
  2119                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2120   00134A  5040               	movf	dtoa@s^0,w,c
  2121   00134C  B4D8               	btfsc	status,2,c
  2122   00134E  EFAB  F009         	goto	u1181
  2123   001352  EFAD  F009         	goto	u1180
  2124   001356                     u1181:
  2125   001356  EFB8  F009         	goto	l2246
  2126   00135A                     u1180:
  2127   00135A                     
  2128                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2129   00135A  063E               	decf	dtoa@i^0,f,c
  2130   00135C  A0D8               	btfss	status,0,c
  2131   00135E  063F               	decf	(dtoa@i+1)^0,f,c
  2132   001360                     
  2133                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2134   001360  0EBB               	movlw	low _dbuf
  2135   001362  243E               	addwf	dtoa@i^0,w,c
  2136   001364  6ED9               	movwf	fsr2l,c
  2137   001366  0E00               	movlw	high _dbuf
  2138   001368  203F               	addwfc	(dtoa@i+1)^0,w,c
  2139   00136A  6EDA               	movwf	fsr2h,c
  2140   00136C  C040  FFDF         	movff	dtoa@s,indf2
  2141   001370                     l2246:
  2142                           
  2143                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2144   001370  C01E  F013         	movff	dtoa@fp,pad@fp
  2145   001374  C01F  F014         	movff	dtoa@fp+1,pad@fp+1
  2146   001378  0EBB               	movlw	low _dbuf
  2147   00137A  243E               	addwf	dtoa@i^0,w,c
  2148   00137C  6E15               	movwf	pad@buf^0,c
  2149   00137E  0E00               	movlw	high _dbuf
  2150   001380  203F               	addwfc	(dtoa@i+1)^0,w,c
  2151   001382  6E16               	movwf	(pad@buf+1)^0,c
  2152   001384  C034  F017         	movff	dtoa@w,pad@p
  2153   001388  C035  F018         	movff	dtoa@w+1,pad@p+1
  2154   00138C  ECB9  F011         	call	_pad	;wreg free
  2155   001390  0012               	return		;funcret
  2156   001392                     __end_of_dtoa:
  2157                           	callstack 0
  2158                           
  2159 ;; *************** function _pad *****************
  2160 ;; Defined at:
  2161 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
  2164 ;;		 -> sprintf@f(11), 
  2165 ;;  buf             2   20[COMRAM] PTR unsigned char 
  2166 ;;		 -> dbuf(32), 
  2167 ;;  p               2   22[COMRAM] int 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  w               2   27[COMRAM] int 
  2170 ;;  i               2   25[COMRAM] int 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2180 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2181 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2182 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2183 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2184 ;;Total ram usage:       11 bytes
  2185 ;; Hardware stack levels used: 1
  2186 ;; Hardware stack levels required when called: 5
  2187 ;; This function calls:
  2188 ;;		_fputc
  2189 ;;		_fputs
  2190 ;; This function is called by:
  2191 ;;		_dtoa
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text6
  2196   002372                     __ptext6:
  2197                           	callstack 0
  2198   002372                     _pad:
  2199                           	callstack 21
  2200   002372                     
  2201                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  2202   002372  BE18               	btfsc	(pad@p+1)^0,7,c
  2203   002374  EFBE  F011         	goto	u981
  2204   002378  EFC0  F011         	goto	u980
  2205   00237C                     u981:
  2206   00237C  EFC6  F011         	goto	l2130
  2207   002380                     u980:
  2208   002380  C017  F01C         	movff	pad@p,pad@w
  2209   002384  C018  F01D         	movff	pad@p+1,pad@w+1
  2210   002388  EFCA  F011         	goto	l1098
  2211   00238C                     l2130:
  2212   00238C  0E00               	movlw	0
  2213   00238E  6E1D               	movwf	(pad@w+1)^0,c
  2214   002390  0E00               	movlw	0
  2215   002392  6E1C               	movwf	pad@w^0,c
  2216   002394                     l1098:
  2217                           
  2218                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  2219   002394  0E00               	movlw	0
  2220   002396  6E1B               	movwf	(pad@i+1)^0,c
  2221   002398  0E00               	movlw	0
  2222   00239A  6E1A               	movwf	pad@i^0,c
  2223                           
  2224                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2225   00239C  EFDC  F011         	goto	l2136
  2226   0023A0                     l2132:
  2227                           
  2228                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  2229   0023A0  0E00               	movlw	0
  2230   0023A2  6E04               	movwf	(fputc@c+1)^0,c
  2231   0023A4  0E20               	movlw	32
  2232   0023A6  6E03               	movwf	fputc@c^0,c
  2233   0023A8  C013  F005         	movff	pad@fp,fputc@fp
  2234   0023AC  C014  F006         	movff	pad@fp+1,fputc@fp+1
  2235   0023B0  EC6D  F00D         	call	_fputc	;wreg free
  2236   0023B4                     
  2237                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  2238   0023B4  4A1A               	infsnz	pad@i^0,f,c
  2239   0023B6  2A1B               	incf	(pad@i+1)^0,f,c
  2240   0023B8                     l2136:
  2241                           
  2242                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2243   0023B8  501C               	movf	pad@w^0,w,c
  2244   0023BA  5C1A               	subwf	pad@i^0,w,c
  2245   0023BC  501B               	movf	(pad@i+1)^0,w,c
  2246   0023BE  0A80               	xorlw	128
  2247   0023C0  6E19               	movwf	??_pad^0,c
  2248   0023C2  501D               	movf	(pad@w+1)^0,w,c
  2249   0023C4  0A80               	xorlw	128
  2250   0023C6  5819               	subwfb	??_pad^0,w,c
  2251   0023C8  A0D8               	btfss	status,0,c
  2252   0023CA  EFE9  F011         	goto	u991
  2253   0023CE  EFEB  F011         	goto	u990
  2254   0023D2                     u991:
  2255   0023D2  EFD0  F011         	goto	l2132
  2256   0023D6                     u990:
  2257   0023D6                     
  2258                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  2259   0023D6  C015  F00C         	movff	pad@buf,fputs@s
  2260   0023DA  C016  F00D         	movff	pad@buf+1,fputs@s+1
  2261   0023DE  C013  F00E         	movff	pad@fp,fputs@fp
  2262   0023E2  C014  F00F         	movff	pad@fp+1,fputs@fp+1
  2263   0023E6  EC15  F013         	call	_fputs	;wreg free
  2264   0023EA  0012               	return		;funcret
  2265   0023EC                     __end_of_pad:
  2266                           	callstack 0
  2267                           
  2268 ;; *************** function _fputs *****************
  2269 ;; Defined at:
  2270 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;  s               2   11[COMRAM] PTR const unsigned char 
  2273 ;;		 -> dbuf(32), 
  2274 ;;  fp              2   13[COMRAM] PTR struct _IO_FILE
  2275 ;;		 -> sprintf@f(11), 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;  i               2   16[COMRAM] int 
  2278 ;;  c               1   15[COMRAM] unsigned char 
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  2   11[COMRAM] int 
  2281 ;; Registers used:
  2282 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2288 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2289 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2291 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2292 ;;Total ram usage:        7 bytes
  2293 ;; Hardware stack levels used: 1
  2294 ;; Hardware stack levels required when called: 4
  2295 ;; This function calls:
  2296 ;;		_fputc
  2297 ;; This function is called by:
  2298 ;;		_pad
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302                           	psect	text7
  2303   00262A                     __ptext7:
  2304                           	callstack 0
  2305   00262A                     _fputs:
  2306                           	callstack 21
  2307   00262A  0E00               	movlw	0
  2308   00262C  6E12               	movwf	(fputs@i+1)^0,c
  2309   00262E  0E00               	movlw	0
  2310   002630  6E11               	movwf	fputs@i^0,c
  2311   002632  EF26  F013         	goto	l2044
  2312   002636                     l2040:
  2313   002636  C010  F003         	movff	fputs@c,fputc@c
  2314   00263A  6A04               	clrf	(fputc@c+1)^0,c
  2315   00263C  C00E  F005         	movff	fputs@fp,fputc@fp
  2316   002640  C00F  F006         	movff	fputs@fp+1,fputc@fp+1
  2317   002644  EC6D  F00D         	call	_fputc	;wreg free
  2318   002648  4A11               	infsnz	fputs@i^0,f,c
  2319   00264A  2A12               	incf	(fputs@i+1)^0,f,c
  2320   00264C                     l2044:
  2321   00264C  5011               	movf	fputs@i^0,w,c
  2322   00264E  240C               	addwf	fputs@s^0,w,c
  2323   002650  6ED9               	movwf	fsr2l,c
  2324   002652  5012               	movf	(fputs@i+1)^0,w,c
  2325   002654  200D               	addwfc	(fputs@s+1)^0,w,c
  2326   002656  6EDA               	movwf	fsr2h,c
  2327   002658  50DF               	movf	indf2,w,c
  2328   00265A  6E10               	movwf	fputs@c^0,c
  2329   00265C  5010               	movf	fputs@c^0,w,c
  2330   00265E  A4D8               	btfss	status,2,c
  2331   002660  EF34  F013         	goto	u841
  2332   002664  EF36  F013         	goto	u840
  2333   002668                     u841:
  2334   002668  EF1B  F013         	goto	l2040
  2335   00266C                     u840:
  2336   00266C  0012               	return		;funcret
  2337   00266E                     __end_of_fputs:
  2338                           	callstack 0
  2339                           
  2340 ;; *************** function _fputc *****************
  2341 ;; Defined at:
  2342 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  c               2    2[COMRAM] int 
  2345 ;;  fp              2    4[COMRAM] PTR struct _IO_FILE
  2346 ;;		 -> sprintf@f(11), 
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;		None
  2349 ;; Return value:  Size  Location     Type
  2350 ;;                  2    2[COMRAM] int 
  2351 ;; Registers used:
  2352 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2353 ;; Tracked objects:
  2354 ;;		On entry : 0/0
  2355 ;;		On exit  : 0/0
  2356 ;;		Unchanged: 0/0
  2357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2358 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2360 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2361 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2362 ;;Total ram usage:        9 bytes
  2363 ;; Hardware stack levels used: 1
  2364 ;; Hardware stack levels required when called: 3
  2365 ;; This function calls:
  2366 ;;		_putch
  2367 ;; This function is called by:
  2368 ;;		_pad
  2369 ;;		_vfpfcnvrt
  2370 ;;		_fputs
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	text8
  2375   001ADA                     __ptext8:
  2376                           	callstack 0
  2377   001ADA                     _fputc:
  2378                           	callstack 24
  2379   001ADA  5005               	movf	fputc@fp^0,w,c
  2380   001ADC  1006               	iorwf	(fputc@fp+1)^0,w,c
  2381   001ADE  B4D8               	btfsc	status,2,c
  2382   001AE0  EF74  F00D         	goto	u801
  2383   001AE4  EF76  F00D         	goto	u800
  2384   001AE8                     u801:
  2385   001AE8  EF7F  F00D         	goto	l2028
  2386   001AEC                     u800:
  2387   001AEC  5005               	movf	fputc@fp^0,w,c
  2388   001AEE  1006               	iorwf	(fputc@fp+1)^0,w,c
  2389   001AF0  A4D8               	btfss	status,2,c
  2390   001AF2  EF7D  F00D         	goto	u811
  2391   001AF6  EF7F  F00D         	goto	u810
  2392   001AFA                     u811:
  2393   001AFA  EF84  F00D         	goto	l2030
  2394   001AFE                     u810:
  2395   001AFE                     l2028:
  2396   001AFE  5003               	movf	fputc@c^0,w,c
  2397   001B00  EC55  F014         	call	_putch
  2398   001B04  EFD1  F00D         	goto	l1153
  2399   001B08                     l2030:
  2400   001B08  EE20 F009          	lfsr	2,9
  2401   001B0C  5005               	movf	fputc@fp^0,w,c
  2402   001B0E  26D9               	addwf	fsr2l,f,c
  2403   001B10  5006               	movf	(fputc@fp+1)^0,w,c
  2404   001B12  22DA               	addwfc	fsr2h,f,c
  2405   001B14  50DE               	movf	postinc2,w,c
  2406   001B16  10DE               	iorwf	postinc2,w,c
  2407   001B18  B4D8               	btfsc	status,2,c
  2408   001B1A  EF91  F00D         	goto	u821
  2409   001B1E  EF93  F00D         	goto	u820
  2410   001B22                     u821:
  2411   001B22  EFAE  F00D         	goto	l2034
  2412   001B26                     u820:
  2413   001B26  EE20 F009          	lfsr	2,9
  2414   001B2A  5005               	movf	fputc@fp^0,w,c
  2415   001B2C  26D9               	addwf	fsr2l,f,c
  2416   001B2E  5006               	movf	(fputc@fp+1)^0,w,c
  2417   001B30  22DA               	addwfc	fsr2h,f,c
  2418   001B32  EE10 F003          	lfsr	1,3
  2419   001B36  5005               	movf	fputc@fp^0,w,c
  2420   001B38  26E1               	addwf	fsr1l,f,c
  2421   001B3A  5006               	movf	(fputc@fp+1)^0,w,c
  2422   001B3C  22E2               	addwfc	fsr1h,f,c
  2423   001B3E  50DE               	movf	postinc2,w,c
  2424   001B40  5CE6               	subwf	postinc1,w,c
  2425   001B42  50E6               	movf	postinc1,w,c
  2426   001B44  0A80               	xorlw	128
  2427   001B46  6E0B               	movwf	(??_fputc+4)^0,c
  2428   001B48  50DE               	movf	postinc2,w,c
  2429   001B4A  0A80               	xorlw	128
  2430   001B4C  580B               	subwfb	(??_fputc+4)^0,w,c
  2431   001B4E  B0D8               	btfsc	status,0,c
  2432   001B50  EFAC  F00D         	goto	u831
  2433   001B54  EFAE  F00D         	goto	u830
  2434   001B58                     u831:
  2435   001B58  EFD1  F00D         	goto	l1153
  2436   001B5C                     u830:
  2437   001B5C                     l2034:
  2438   001B5C  EE20 F003          	lfsr	2,3
  2439   001B60  5005               	movf	fputc@fp^0,w,c
  2440   001B62  26D9               	addwf	fsr2l,f,c
  2441   001B64  5006               	movf	(fputc@fp+1)^0,w,c
  2442   001B66  22DA               	addwfc	fsr2h,f,c
  2443   001B68  CFDE F007          	movff	postinc2,??_fputc
  2444   001B6C  CFDD F008          	movff	postdec2,??_fputc+1
  2445   001B70  C005  FFD9         	movff	fputc@fp,fsr2l
  2446   001B74  C006  FFDA         	movff	fputc@fp+1,fsr2h
  2447   001B78  CFDE F009          	movff	postinc2,??_fputc+2
  2448   001B7C  CFDD F00A          	movff	postdec2,??_fputc+3
  2449   001B80  5007               	movf	??_fputc^0,w,c
  2450   001B82  2409               	addwf	(??_fputc+2)^0,w,c
  2451   001B84  6ED9               	movwf	fsr2l,c
  2452   001B86  5008               	movf	(??_fputc+1)^0,w,c
  2453   001B88  200A               	addwfc	(??_fputc+3)^0,w,c
  2454   001B8A  6EDA               	movwf	fsr2h,c
  2455   001B8C  C003  FFDF         	movff	fputc@c,indf2
  2456   001B90  EE20 F003          	lfsr	2,3
  2457   001B94  5005               	movf	fputc@fp^0,w,c
  2458   001B96  26D9               	addwf	fsr2l,f,c
  2459   001B98  5006               	movf	(fputc@fp+1)^0,w,c
  2460   001B9A  22DA               	addwfc	fsr2h,f,c
  2461   001B9C  2ADE               	incf	postinc2,f,c
  2462   001B9E  0E00               	movlw	0
  2463   001BA0  22DD               	addwfc	postdec2,f,c
  2464   001BA2                     l1153:
  2465   001BA2  0012               	return		;funcret
  2466   001BA4                     __end_of_fputc:
  2467                           	callstack 0
  2468                           
  2469 ;; *************** function _putch *****************
  2470 ;; Defined at:
  2471 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;  c               1    wreg     unsigned char 
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;  c               1    0[COMRAM] unsigned char 
  2476 ;; Return value:  Size  Location     Type
  2477 ;;                  1    wreg      void 
  2478 ;; Registers used:
  2479 ;;		wreg
  2480 ;; Tracked objects:
  2481 ;;		On entry : 0/0
  2482 ;;		On exit  : 0/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2489 ;;Total ram usage:        0 bytes
  2490 ;; Hardware stack levels used: 1
  2491 ;; Hardware stack levels required when called: 2
  2492 ;; This function calls:
  2493 ;;		Nothing
  2494 ;; This function is called by:
  2495 ;;		_fputc
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498                           
  2499                           	psect	text9
  2500   0028AA                     __ptext9:
  2501                           	callstack 0
  2502   0028AA                     _putch:
  2503                           	callstack 24
  2504   0028AA  0012               	return		;funcret
  2505   0028AC                     __end_of_putch:
  2506                           	callstack 0
  2507                           
  2508 ;; *************** function _abs *****************
  2509 ;; Defined at:
  2510 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;  a               2   20[COMRAM] int 
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;		None
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  2   20[COMRAM] int 
  2517 ;; Registers used:
  2518 ;;		wreg, status,2, status,0
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2524 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2526 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2527 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2528 ;;Total ram usage:        4 bytes
  2529 ;; Hardware stack levels used: 1
  2530 ;; Hardware stack levels required when called: 2
  2531 ;; This function calls:
  2532 ;;		Nothing
  2533 ;; This function is called by:
  2534 ;;		_dtoa
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text10
  2539   0026F2                     __ptext10:
  2540                           	callstack 0
  2541   0026F2                     _abs:
  2542                           	callstack 24
  2543   0026F2  BE16               	btfsc	(abs@a+1)^0,7,c
  2544   0026F4  EF86  F013         	goto	u1000
  2545   0026F8  5016               	movf	(abs@a+1)^0,w,c
  2546   0026FA  E106               	bnz	u1001
  2547   0026FC  0415               	decf	abs@a^0,w,c
  2548   0026FE  B0D8               	btfsc	status,0,c
  2549   002700  EF84  F013         	goto	u1001
  2550   002704  EF86  F013         	goto	u1000
  2551   002708                     u1001:
  2552   002708  EF94  F013         	goto	l1138
  2553   00270C                     u1000:
  2554   00270C  C015  F017         	movff	abs@a,??_abs
  2555   002710  C016  F018         	movff	abs@a+1,??_abs+1
  2556   002714  1E17               	comf	??_abs^0,f,c
  2557   002716  1E18               	comf	(??_abs+1)^0,f,c
  2558   002718  4A17               	infsnz	??_abs^0,f,c
  2559   00271A  2A18               	incf	(??_abs+1)^0,f,c
  2560   00271C  C017  F015         	movff	??_abs,?_abs
  2561   002720  C018  F016         	movff	??_abs+1,?_abs+1
  2562   002724  EF98  F013         	goto	l1141
  2563   002728                     l1138:
  2564   002728  C015  F015         	movff	abs@a,?_abs
  2565   00272C  C016  F016         	movff	abs@a+1,?_abs+1
  2566   002730                     l1141:
  2567   002730  0012               	return		;funcret
  2568   002732                     __end_of_abs:
  2569                           	callstack 0
  2570                           
  2571 ;; *************** function ___aomod *****************
  2572 ;; Defined at:
  2573 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  dividend        8    2[COMRAM] long long 
  2576 ;;  divisor         8   10[COMRAM] long long 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;  sign            1   19[COMRAM] unsigned char 
  2579 ;;  counter         1   18[COMRAM] unsigned char 
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  8    2[COMRAM] long long 
  2582 ;; Registers used:
  2583 ;;		wreg, status,2, status,0
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2589 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2592 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2593 ;;Total ram usage:       18 bytes
  2594 ;; Hardware stack levels used: 1
  2595 ;; Hardware stack levels required when called: 2
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		_dtoa
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text11
  2604   0016EE                     __ptext11:
  2605                           	callstack 0
  2606   0016EE                     ___aomod:
  2607                           	callstack 24
  2608   0016EE  0E00               	movlw	0
  2609   0016F0  6E14               	movwf	___aomod@sign^0,c
  2610   0016F2  BE0A               	btfsc	(___aomod@dividend+7)^0,7,c
  2611   0016F4  EF80  F00B         	goto	u920
  2612   0016F8  EF7E  F00B         	goto	u921
  2613   0016FC                     u921:
  2614   0016FC  EF92  F00B         	goto	l2098
  2615   001700                     u920:
  2616   001700  1E0A               	comf	(___aomod@dividend+7)^0,f,c
  2617   001702  1E09               	comf	(___aomod@dividend+6)^0,f,c
  2618   001704  1E08               	comf	(___aomod@dividend+5)^0,f,c
  2619   001706  1E07               	comf	(___aomod@dividend+4)^0,f,c
  2620   001708  1E06               	comf	(___aomod@dividend+3)^0,f,c
  2621   00170A  1E05               	comf	(___aomod@dividend+2)^0,f,c
  2622   00170C  1E04               	comf	(___aomod@dividend+1)^0,f,c
  2623   00170E  6C03               	negf	___aomod@dividend^0,c
  2624   001710  0E00               	movlw	0
  2625   001712  2204               	addwfc	(___aomod@dividend+1)^0,f,c
  2626   001714  2205               	addwfc	(___aomod@dividend+2)^0,f,c
  2627   001716  2206               	addwfc	(___aomod@dividend+3)^0,f,c
  2628   001718  2207               	addwfc	(___aomod@dividend+4)^0,f,c
  2629   00171A  2208               	addwfc	(___aomod@dividend+5)^0,f,c
  2630   00171C  2209               	addwfc	(___aomod@dividend+6)^0,f,c
  2631   00171E  220A               	addwfc	(___aomod@dividend+7)^0,f,c
  2632   001720  0E01               	movlw	1
  2633   001722  6E14               	movwf	___aomod@sign^0,c
  2634   001724                     l2098:
  2635   001724  BE12               	btfsc	(___aomod@divisor+7)^0,7,c
  2636   001726  EF99  F00B         	goto	u930
  2637   00172A  EF97  F00B         	goto	u931
  2638   00172E                     u931:
  2639   00172E  EFA9  F00B         	goto	l2102
  2640   001732                     u930:
  2641   001732  1E12               	comf	(___aomod@divisor+7)^0,f,c
  2642   001734  1E11               	comf	(___aomod@divisor+6)^0,f,c
  2643   001736  1E10               	comf	(___aomod@divisor+5)^0,f,c
  2644   001738  1E0F               	comf	(___aomod@divisor+4)^0,f,c
  2645   00173A  1E0E               	comf	(___aomod@divisor+3)^0,f,c
  2646   00173C  1E0D               	comf	(___aomod@divisor+2)^0,f,c
  2647   00173E  1E0C               	comf	(___aomod@divisor+1)^0,f,c
  2648   001740  6C0B               	negf	___aomod@divisor^0,c
  2649   001742  0E00               	movlw	0
  2650   001744  220C               	addwfc	(___aomod@divisor+1)^0,f,c
  2651   001746  220D               	addwfc	(___aomod@divisor+2)^0,f,c
  2652   001748  220E               	addwfc	(___aomod@divisor+3)^0,f,c
  2653   00174A  220F               	addwfc	(___aomod@divisor+4)^0,f,c
  2654   00174C  2210               	addwfc	(___aomod@divisor+5)^0,f,c
  2655   00174E  2211               	addwfc	(___aomod@divisor+6)^0,f,c
  2656   001750  2212               	addwfc	(___aomod@divisor+7)^0,f,c
  2657   001752                     l2102:
  2658   001752  500B               	movf	___aomod@divisor^0,w,c
  2659   001754  100C               	iorwf	(___aomod@divisor+1)^0,w,c
  2660   001756  100D               	iorwf	(___aomod@divisor+2)^0,w,c
  2661   001758  100E               	iorwf	(___aomod@divisor+3)^0,w,c
  2662   00175A  100F               	iorwf	(___aomod@divisor+4)^0,w,c
  2663   00175C  1010               	iorwf	(___aomod@divisor+5)^0,w,c
  2664   00175E  1011               	iorwf	(___aomod@divisor+6)^0,w,c
  2665   001760  1012               	iorwf	(___aomod@divisor+7)^0,w,c
  2666   001762  B4D8               	btfsc	status,2,c
  2667   001764  EFB6  F00B         	goto	u941
  2668   001768  EFB8  F00B         	goto	u940
  2669   00176C                     u941:
  2670   00176C  EF00  F00C         	goto	l2118
  2671   001770                     u940:
  2672   001770  0E01               	movlw	1
  2673   001772  6E13               	movwf	___aomod@counter^0,c
  2674   001774  EFC6  F00B         	goto	l2108
  2675   001778                     l2106:
  2676   001778  90D8               	bcf	status,0,c
  2677   00177A  360B               	rlcf	___aomod@divisor^0,f,c
  2678   00177C  360C               	rlcf	(___aomod@divisor+1)^0,f,c
  2679   00177E  360D               	rlcf	(___aomod@divisor+2)^0,f,c
  2680   001780  360E               	rlcf	(___aomod@divisor+3)^0,f,c
  2681   001782  360F               	rlcf	(___aomod@divisor+4)^0,f,c
  2682   001784  3610               	rlcf	(___aomod@divisor+5)^0,f,c
  2683   001786  3611               	rlcf	(___aomod@divisor+6)^0,f,c
  2684   001788  3612               	rlcf	(___aomod@divisor+7)^0,f,c
  2685   00178A  2A13               	incf	___aomod@counter^0,f,c
  2686   00178C                     l2108:
  2687   00178C  AE12               	btfss	(___aomod@divisor+7)^0,7,c
  2688   00178E  EFCB  F00B         	goto	u951
  2689   001792  EFCD  F00B         	goto	u950
  2690   001796                     u951:
  2691   001796  EFBC  F00B         	goto	l2106
  2692   00179A                     u950:
  2693   00179A                     l2110:
  2694   00179A  500B               	movf	___aomod@divisor^0,w,c
  2695   00179C  5C03               	subwf	___aomod@dividend^0,w,c
  2696   00179E  500C               	movf	(___aomod@divisor+1)^0,w,c
  2697   0017A0  5804               	subwfb	(___aomod@dividend+1)^0,w,c
  2698   0017A2  500D               	movf	(___aomod@divisor+2)^0,w,c
  2699   0017A4  5805               	subwfb	(___aomod@dividend+2)^0,w,c
  2700   0017A6  500E               	movf	(___aomod@divisor+3)^0,w,c
  2701   0017A8  5806               	subwfb	(___aomod@dividend+3)^0,w,c
  2702   0017AA  500F               	movf	(___aomod@divisor+4)^0,w,c
  2703   0017AC  5807               	subwfb	(___aomod@dividend+4)^0,w,c
  2704   0017AE  5010               	movf	(___aomod@divisor+5)^0,w,c
  2705   0017B0  5808               	subwfb	(___aomod@dividend+5)^0,w,c
  2706   0017B2  5011               	movf	(___aomod@divisor+6)^0,w,c
  2707   0017B4  5809               	subwfb	(___aomod@dividend+6)^0,w,c
  2708   0017B6  5012               	movf	(___aomod@divisor+7)^0,w,c
  2709   0017B8  580A               	subwfb	(___aomod@dividend+7)^0,w,c
  2710   0017BA  A0D8               	btfss	status,0,c
  2711   0017BC  EFE2  F00B         	goto	u961
  2712   0017C0  EFE4  F00B         	goto	u960
  2713   0017C4                     u961:
  2714   0017C4  EFF4  F00B         	goto	l2114
  2715   0017C8                     u960:
  2716   0017C8  500B               	movf	___aomod@divisor^0,w,c
  2717   0017CA  5E03               	subwf	___aomod@dividend^0,f,c
  2718   0017CC  500C               	movf	(___aomod@divisor+1)^0,w,c
  2719   0017CE  5A04               	subwfb	(___aomod@dividend+1)^0,f,c
  2720   0017D0  500D               	movf	(___aomod@divisor+2)^0,w,c
  2721   0017D2  5A05               	subwfb	(___aomod@dividend+2)^0,f,c
  2722   0017D4  500E               	movf	(___aomod@divisor+3)^0,w,c
  2723   0017D6  5A06               	subwfb	(___aomod@dividend+3)^0,f,c
  2724   0017D8  500F               	movf	(___aomod@divisor+4)^0,w,c
  2725   0017DA  5A07               	subwfb	(___aomod@dividend+4)^0,f,c
  2726   0017DC  5010               	movf	(___aomod@divisor+5)^0,w,c
  2727   0017DE  5A08               	subwfb	(___aomod@dividend+5)^0,f,c
  2728   0017E0  5011               	movf	(___aomod@divisor+6)^0,w,c
  2729   0017E2  5A09               	subwfb	(___aomod@dividend+6)^0,f,c
  2730   0017E4  5012               	movf	(___aomod@divisor+7)^0,w,c
  2731   0017E6  5A0A               	subwfb	(___aomod@dividend+7)^0,f,c
  2732   0017E8                     l2114:
  2733   0017E8  90D8               	bcf	status,0,c
  2734   0017EA  3212               	rrcf	(___aomod@divisor+7)^0,f,c
  2735   0017EC  3211               	rrcf	(___aomod@divisor+6)^0,f,c
  2736   0017EE  3210               	rrcf	(___aomod@divisor+5)^0,f,c
  2737   0017F0  320F               	rrcf	(___aomod@divisor+4)^0,f,c
  2738   0017F2  320E               	rrcf	(___aomod@divisor+3)^0,f,c
  2739   0017F4  320D               	rrcf	(___aomod@divisor+2)^0,f,c
  2740   0017F6  320C               	rrcf	(___aomod@divisor+1)^0,f,c
  2741   0017F8  320B               	rrcf	___aomod@divisor^0,f,c
  2742   0017FA  2E13               	decfsz	___aomod@counter^0,f,c
  2743   0017FC  EFCD  F00B         	goto	l2110
  2744   001800                     l2118:
  2745   001800  5014               	movf	___aomod@sign^0,w,c
  2746   001802  B4D8               	btfsc	status,2,c
  2747   001804  EF06  F00C         	goto	u971
  2748   001808  EF08  F00C         	goto	u970
  2749   00180C                     u971:
  2750   00180C  EF18  F00C         	goto	l2122
  2751   001810                     u970:
  2752   001810  1E0A               	comf	(___aomod@dividend+7)^0,f,c
  2753   001812  1E09               	comf	(___aomod@dividend+6)^0,f,c
  2754   001814  1E08               	comf	(___aomod@dividend+5)^0,f,c
  2755   001816  1E07               	comf	(___aomod@dividend+4)^0,f,c
  2756   001818  1E06               	comf	(___aomod@dividend+3)^0,f,c
  2757   00181A  1E05               	comf	(___aomod@dividend+2)^0,f,c
  2758   00181C  1E04               	comf	(___aomod@dividend+1)^0,f,c
  2759   00181E  6C03               	negf	___aomod@dividend^0,c
  2760   001820  0E00               	movlw	0
  2761   001822  2204               	addwfc	(___aomod@dividend+1)^0,f,c
  2762   001824  2205               	addwfc	(___aomod@dividend+2)^0,f,c
  2763   001826  2206               	addwfc	(___aomod@dividend+3)^0,f,c
  2764   001828  2207               	addwfc	(___aomod@dividend+4)^0,f,c
  2765   00182A  2208               	addwfc	(___aomod@dividend+5)^0,f,c
  2766   00182C  2209               	addwfc	(___aomod@dividend+6)^0,f,c
  2767   00182E  220A               	addwfc	(___aomod@dividend+7)^0,f,c
  2768   001830                     l2122:
  2769   001830  C003  F003         	movff	___aomod@dividend,?___aomod
  2770   001834  C004  F004         	movff	___aomod@dividend+1,?___aomod+1
  2771   001838  C005  F005         	movff	___aomod@dividend+2,?___aomod+2
  2772   00183C  C006  F006         	movff	___aomod@dividend+3,?___aomod+3
  2773   001840  C007  F007         	movff	___aomod@dividend+4,?___aomod+4
  2774   001844  C008  F008         	movff	___aomod@dividend+5,?___aomod+5
  2775   001848  C009  F009         	movff	___aomod@dividend+6,?___aomod+6
  2776   00184C  C00A  F00A         	movff	___aomod@dividend+7,?___aomod+7
  2777   001850  0012               	return		;funcret
  2778   001852                     __end_of___aomod:
  2779                           	callstack 0
  2780                           
  2781 ;; *************** function ___aodiv *****************
  2782 ;; Defined at:
  2783 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  dividend        8    2[COMRAM] long long 
  2786 ;;  divisor         8   10[COMRAM] long long 
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;  quotient        8   20[COMRAM] long long 
  2789 ;;  sign            1   19[COMRAM] unsigned char 
  2790 ;;  counter         1   18[COMRAM] unsigned char 
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  8    2[COMRAM] long long 
  2793 ;; Registers used:
  2794 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2800 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2801 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2803 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2804 ;;Total ram usage:       26 bytes
  2805 ;; Hardware stack levels used: 1
  2806 ;; Hardware stack levels required when called: 2
  2807 ;; This function calls:
  2808 ;;		Nothing
  2809 ;; This function is called by:
  2810 ;;		_dtoa
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814                           	psect	text12
  2815   001566                     __ptext12:
  2816                           	callstack 0
  2817   001566                     ___aodiv:
  2818                           	callstack 24
  2819   001566  0E00               	movlw	0
  2820   001568  6E14               	movwf	___aodiv@sign^0,c
  2821   00156A  BE12               	btfsc	(___aodiv@divisor+7)^0,7,c
  2822   00156C  EFBC  F00A         	goto	u850
  2823   001570  EFBA  F00A         	goto	u851
  2824   001574                     u851:
  2825   001574  EFCE  F00A         	goto	l2054
  2826   001578                     u850:
  2827   001578  1E12               	comf	(___aodiv@divisor+7)^0,f,c
  2828   00157A  1E11               	comf	(___aodiv@divisor+6)^0,f,c
  2829   00157C  1E10               	comf	(___aodiv@divisor+5)^0,f,c
  2830   00157E  1E0F               	comf	(___aodiv@divisor+4)^0,f,c
  2831   001580  1E0E               	comf	(___aodiv@divisor+3)^0,f,c
  2832   001582  1E0D               	comf	(___aodiv@divisor+2)^0,f,c
  2833   001584  1E0C               	comf	(___aodiv@divisor+1)^0,f,c
  2834   001586  6C0B               	negf	___aodiv@divisor^0,c
  2835   001588  0E00               	movlw	0
  2836   00158A  220C               	addwfc	(___aodiv@divisor+1)^0,f,c
  2837   00158C  220D               	addwfc	(___aodiv@divisor+2)^0,f,c
  2838   00158E  220E               	addwfc	(___aodiv@divisor+3)^0,f,c
  2839   001590  220F               	addwfc	(___aodiv@divisor+4)^0,f,c
  2840   001592  2210               	addwfc	(___aodiv@divisor+5)^0,f,c
  2841   001594  2211               	addwfc	(___aodiv@divisor+6)^0,f,c
  2842   001596  2212               	addwfc	(___aodiv@divisor+7)^0,f,c
  2843   001598  0E01               	movlw	1
  2844   00159A  6E14               	movwf	___aodiv@sign^0,c
  2845   00159C                     l2054:
  2846   00159C  BE0A               	btfsc	(___aodiv@dividend+7)^0,7,c
  2847   00159E  EFD5  F00A         	goto	u860
  2848   0015A2  EFD3  F00A         	goto	u861
  2849   0015A6                     u861:
  2850   0015A6  EFE7  F00A         	goto	l2060
  2851   0015AA                     u860:
  2852   0015AA  1E0A               	comf	(___aodiv@dividend+7)^0,f,c
  2853   0015AC  1E09               	comf	(___aodiv@dividend+6)^0,f,c
  2854   0015AE  1E08               	comf	(___aodiv@dividend+5)^0,f,c
  2855   0015B0  1E07               	comf	(___aodiv@dividend+4)^0,f,c
  2856   0015B2  1E06               	comf	(___aodiv@dividend+3)^0,f,c
  2857   0015B4  1E05               	comf	(___aodiv@dividend+2)^0,f,c
  2858   0015B6  1E04               	comf	(___aodiv@dividend+1)^0,f,c
  2859   0015B8  6C03               	negf	___aodiv@dividend^0,c
  2860   0015BA  0E00               	movlw	0
  2861   0015BC  2204               	addwfc	(___aodiv@dividend+1)^0,f,c
  2862   0015BE  2205               	addwfc	(___aodiv@dividend+2)^0,f,c
  2863   0015C0  2206               	addwfc	(___aodiv@dividend+3)^0,f,c
  2864   0015C2  2207               	addwfc	(___aodiv@dividend+4)^0,f,c
  2865   0015C4  2208               	addwfc	(___aodiv@dividend+5)^0,f,c
  2866   0015C6  2209               	addwfc	(___aodiv@dividend+6)^0,f,c
  2867   0015C8  220A               	addwfc	(___aodiv@dividend+7)^0,f,c
  2868   0015CA  0E01               	movlw	1
  2869   0015CC  1A14               	xorwf	___aodiv@sign^0,f,c
  2870   0015CE                     l2060:
  2871   0015CE  EE20  F015         	lfsr	2,___aodiv@quotient
  2872   0015D2  0E07               	movlw	7
  2873   0015D4                     u871:
  2874   0015D4  6ADE               	clrf	postinc2,c
  2875   0015D6  06E8               	decf	wreg,f,c
  2876   0015D8  E2FD               	bc	u871
  2877   0015DA  500B               	movf	___aodiv@divisor^0,w,c
  2878   0015DC  100C               	iorwf	(___aodiv@divisor+1)^0,w,c
  2879   0015DE  100D               	iorwf	(___aodiv@divisor+2)^0,w,c
  2880   0015E0  100E               	iorwf	(___aodiv@divisor+3)^0,w,c
  2881   0015E2  100F               	iorwf	(___aodiv@divisor+4)^0,w,c
  2882   0015E4  1010               	iorwf	(___aodiv@divisor+5)^0,w,c
  2883   0015E6  1011               	iorwf	(___aodiv@divisor+6)^0,w,c
  2884   0015E8  1012               	iorwf	(___aodiv@divisor+7)^0,w,c
  2885   0015EA  B4D8               	btfsc	status,2,c
  2886   0015EC  EFFA  F00A         	goto	u881
  2887   0015F0  EFFC  F00A         	goto	u880
  2888   0015F4                     u881:
  2889   0015F4  EF4E  F00B         	goto	l2082
  2890   0015F8                     u880:
  2891   0015F8  0E01               	movlw	1
  2892   0015FA  6E13               	movwf	___aodiv@counter^0,c
  2893   0015FC  EF0A  F00B         	goto	l2068
  2894   001600                     l2066:
  2895   001600  90D8               	bcf	status,0,c
  2896   001602  360B               	rlcf	___aodiv@divisor^0,f,c
  2897   001604  360C               	rlcf	(___aodiv@divisor+1)^0,f,c
  2898   001606  360D               	rlcf	(___aodiv@divisor+2)^0,f,c
  2899   001608  360E               	rlcf	(___aodiv@divisor+3)^0,f,c
  2900   00160A  360F               	rlcf	(___aodiv@divisor+4)^0,f,c
  2901   00160C  3610               	rlcf	(___aodiv@divisor+5)^0,f,c
  2902   00160E  3611               	rlcf	(___aodiv@divisor+6)^0,f,c
  2903   001610  3612               	rlcf	(___aodiv@divisor+7)^0,f,c
  2904   001612  2A13               	incf	___aodiv@counter^0,f,c
  2905   001614                     l2068:
  2906   001614  AE12               	btfss	(___aodiv@divisor+7)^0,7,c
  2907   001616  EF0F  F00B         	goto	u891
  2908   00161A  EF11  F00B         	goto	u890
  2909   00161E                     u891:
  2910   00161E  EF00  F00B         	goto	l2066
  2911   001622                     u890:
  2912   001622                     l2070:
  2913   001622  90D8               	bcf	status,0,c
  2914   001624  3615               	rlcf	___aodiv@quotient^0,f,c
  2915   001626  3616               	rlcf	(___aodiv@quotient+1)^0,f,c
  2916   001628  3617               	rlcf	(___aodiv@quotient+2)^0,f,c
  2917   00162A  3618               	rlcf	(___aodiv@quotient+3)^0,f,c
  2918   00162C  3619               	rlcf	(___aodiv@quotient+4)^0,f,c
  2919   00162E  361A               	rlcf	(___aodiv@quotient+5)^0,f,c
  2920   001630  361B               	rlcf	(___aodiv@quotient+6)^0,f,c
  2921   001632  361C               	rlcf	(___aodiv@quotient+7)^0,f,c
  2922   001634  500B               	movf	___aodiv@divisor^0,w,c
  2923   001636  5C03               	subwf	___aodiv@dividend^0,w,c
  2924   001638  500C               	movf	(___aodiv@divisor+1)^0,w,c
  2925   00163A  5804               	subwfb	(___aodiv@dividend+1)^0,w,c
  2926   00163C  500D               	movf	(___aodiv@divisor+2)^0,w,c
  2927   00163E  5805               	subwfb	(___aodiv@dividend+2)^0,w,c
  2928   001640  500E               	movf	(___aodiv@divisor+3)^0,w,c
  2929   001642  5806               	subwfb	(___aodiv@dividend+3)^0,w,c
  2930   001644  500F               	movf	(___aodiv@divisor+4)^0,w,c
  2931   001646  5807               	subwfb	(___aodiv@dividend+4)^0,w,c
  2932   001648  5010               	movf	(___aodiv@divisor+5)^0,w,c
  2933   00164A  5808               	subwfb	(___aodiv@dividend+5)^0,w,c
  2934   00164C  5011               	movf	(___aodiv@divisor+6)^0,w,c
  2935   00164E  5809               	subwfb	(___aodiv@dividend+6)^0,w,c
  2936   001650  5012               	movf	(___aodiv@divisor+7)^0,w,c
  2937   001652  580A               	subwfb	(___aodiv@dividend+7)^0,w,c
  2938   001654  A0D8               	btfss	status,0,c
  2939   001656  EF2F  F00B         	goto	u901
  2940   00165A  EF31  F00B         	goto	u900
  2941   00165E                     u901:
  2942   00165E  EF42  F00B         	goto	l2078
  2943   001662                     u900:
  2944   001662  500B               	movf	___aodiv@divisor^0,w,c
  2945   001664  5E03               	subwf	___aodiv@dividend^0,f,c
  2946   001666  500C               	movf	(___aodiv@divisor+1)^0,w,c
  2947   001668  5A04               	subwfb	(___aodiv@dividend+1)^0,f,c
  2948   00166A  500D               	movf	(___aodiv@divisor+2)^0,w,c
  2949   00166C  5A05               	subwfb	(___aodiv@dividend+2)^0,f,c
  2950   00166E  500E               	movf	(___aodiv@divisor+3)^0,w,c
  2951   001670  5A06               	subwfb	(___aodiv@dividend+3)^0,f,c
  2952   001672  500F               	movf	(___aodiv@divisor+4)^0,w,c
  2953   001674  5A07               	subwfb	(___aodiv@dividend+4)^0,f,c
  2954   001676  5010               	movf	(___aodiv@divisor+5)^0,w,c
  2955   001678  5A08               	subwfb	(___aodiv@dividend+5)^0,f,c
  2956   00167A  5011               	movf	(___aodiv@divisor+6)^0,w,c
  2957   00167C  5A09               	subwfb	(___aodiv@dividend+6)^0,f,c
  2958   00167E  5012               	movf	(___aodiv@divisor+7)^0,w,c
  2959   001680  5A0A               	subwfb	(___aodiv@dividend+7)^0,f,c
  2960   001682  8015               	bsf	___aodiv@quotient^0,0,c
  2961   001684                     l2078:
  2962   001684  90D8               	bcf	status,0,c
  2963   001686  3212               	rrcf	(___aodiv@divisor+7)^0,f,c
  2964   001688  3211               	rrcf	(___aodiv@divisor+6)^0,f,c
  2965   00168A  3210               	rrcf	(___aodiv@divisor+5)^0,f,c
  2966   00168C  320F               	rrcf	(___aodiv@divisor+4)^0,f,c
  2967   00168E  320E               	rrcf	(___aodiv@divisor+3)^0,f,c
  2968   001690  320D               	rrcf	(___aodiv@divisor+2)^0,f,c
  2969   001692  320C               	rrcf	(___aodiv@divisor+1)^0,f,c
  2970   001694  320B               	rrcf	___aodiv@divisor^0,f,c
  2971   001696  2E13               	decfsz	___aodiv@counter^0,f,c
  2972   001698  EF11  F00B         	goto	l2070
  2973   00169C                     l2082:
  2974   00169C  5014               	movf	___aodiv@sign^0,w,c
  2975   00169E  B4D8               	btfsc	status,2,c
  2976   0016A0  EF54  F00B         	goto	u911
  2977   0016A4  EF56  F00B         	goto	u910
  2978   0016A8                     u911:
  2979   0016A8  EF66  F00B         	goto	l2086
  2980   0016AC                     u910:
  2981   0016AC  1E1C               	comf	(___aodiv@quotient+7)^0,f,c
  2982   0016AE  1E1B               	comf	(___aodiv@quotient+6)^0,f,c
  2983   0016B0  1E1A               	comf	(___aodiv@quotient+5)^0,f,c
  2984   0016B2  1E19               	comf	(___aodiv@quotient+4)^0,f,c
  2985   0016B4  1E18               	comf	(___aodiv@quotient+3)^0,f,c
  2986   0016B6  1E17               	comf	(___aodiv@quotient+2)^0,f,c
  2987   0016B8  1E16               	comf	(___aodiv@quotient+1)^0,f,c
  2988   0016BA  6C15               	negf	___aodiv@quotient^0,c
  2989   0016BC  0E00               	movlw	0
  2990   0016BE  2216               	addwfc	(___aodiv@quotient+1)^0,f,c
  2991   0016C0  2217               	addwfc	(___aodiv@quotient+2)^0,f,c
  2992   0016C2  2218               	addwfc	(___aodiv@quotient+3)^0,f,c
  2993   0016C4  2219               	addwfc	(___aodiv@quotient+4)^0,f,c
  2994   0016C6  221A               	addwfc	(___aodiv@quotient+5)^0,f,c
  2995   0016C8  221B               	addwfc	(___aodiv@quotient+6)^0,f,c
  2996   0016CA  221C               	addwfc	(___aodiv@quotient+7)^0,f,c
  2997   0016CC                     l2086:
  2998   0016CC  C015  F003         	movff	___aodiv@quotient,?___aodiv
  2999   0016D0  C016  F004         	movff	___aodiv@quotient+1,?___aodiv+1
  3000   0016D4  C017  F005         	movff	___aodiv@quotient+2,?___aodiv+2
  3001   0016D8  C018  F006         	movff	___aodiv@quotient+3,?___aodiv+3
  3002   0016DC  C019  F007         	movff	___aodiv@quotient+4,?___aodiv+4
  3003   0016E0  C01A  F008         	movff	___aodiv@quotient+5,?___aodiv+5
  3004   0016E4  C01B  F009         	movff	___aodiv@quotient+6,?___aodiv+6
  3005   0016E8  C01C  F00A         	movff	___aodiv@quotient+7,?___aodiv+7
  3006   0016EC  0012               	return		;funcret
  3007   0016EE                     __end_of___aodiv:
  3008                           	callstack 0
  3009                           
  3010 ;; *************** function _sendStringSerial4 *****************
  3011 ;; Defined at:
  3012 ;;		line 37 in file "../serial.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  string          2    3[COMRAM] PTR unsigned char 
  3015 ;;		 -> main@readout(50), 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;		None
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  1    wreg      void 
  3020 ;; Registers used:
  3021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3027 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3030 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3031 ;;Total ram usage:        2 bytes
  3032 ;; Hardware stack levels used: 1
  3033 ;; Hardware stack levels required when called: 3
  3034 ;; This function calls:
  3035 ;;		_sendCharSerial4
  3036 ;; This function is called by:
  3037 ;;		_main
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text13
  3042   002732                     __ptext13:
  3043                           	callstack 0
  3044   002732                     _sendStringSerial4:
  3045                           	callstack 27
  3046   002732                     
  3047                           ;../serial.c: 40:     while (*string != 0)
  3048   002732  EFA4  F013         	goto	l2666
  3049   002736                     l2662:
  3050                           
  3051                           ;../serial.c: 41:     {;../serial.c: 42:         sendCharSerial4(*string++);
  3052   002736  C004  FFD9         	movff	sendStringSerial4@string,fsr2l
  3053   00273A  C005  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3054   00273E  50DF               	movf	indf2,w,c
  3055   002740  EC29  F014         	call	_sendCharSerial4
  3056   002744  4A04               	infsnz	sendStringSerial4@string^0,f,c
  3057   002746  2A05               	incf	(sendStringSerial4@string+1)^0,f,c
  3058   002748                     l2666:
  3059                           
  3060                           ;../serial.c: 40:     while (*string != 0)
  3061   002748  C004  FFD9         	movff	sendStringSerial4@string,fsr2l
  3062   00274C  C005  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3063   002750  50DF               	movf	indf2,w,c
  3064   002752  A4D8               	btfss	status,2,c
  3065   002754  EFAE  F013         	goto	u1441
  3066   002758  EFB0  F013         	goto	u1440
  3067   00275C                     u1441:
  3068   00275C  EF9B  F013         	goto	l2662
  3069   002760                     u1440:
  3070   002760  0012               	return		;funcret
  3071   002762                     __end_of_sendStringSerial4:
  3072                           	callstack 0
  3073                           
  3074 ;; *************** function _sendCharSerial4 *****************
  3075 ;; Defined at:
  3076 ;;		line 30 in file "../serial.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  charToSend      1    wreg     unsigned char 
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;  charToSend      1    2[COMRAM] unsigned char 
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  1    wreg      void 
  3083 ;; Registers used:
  3084 ;;		wreg
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3091 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3093 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3094 ;;Total ram usage:        1 bytes
  3095 ;; Hardware stack levels used: 1
  3096 ;; Hardware stack levels required when called: 2
  3097 ;; This function calls:
  3098 ;;		Nothing
  3099 ;; This function is called by:
  3100 ;;		_sendStringSerial4
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           	psect	text14
  3105   002852                     __ptext14:
  3106                           	callstack 0
  3107   002852                     _sendCharSerial4:
  3108                           	callstack 27
  3109                           
  3110                           ;incstack = 0
  3111                           ;sendCharSerial4@charToSend stored from wreg
  3112   002852  6E03               	movwf	sendCharSerial4@charToSend^0,c
  3113   002854                     l386:
  3114   002854  010E               	movlb	14	; () banked
  3115   002856  A537               	btfss	55,2,b	;volatile
  3116   002858  EF30  F014         	goto	u1341
  3117   00285C  EF32  F014         	goto	u1340
  3118   002860                     u1341:
  3119   002860  EF2A  F014         	goto	l386
  3120   002864                     u1340:
  3121   002864                     
  3122                           ; BSR set to: 14
  3123                           ;../serial.c: 32:     TX4REG = charToSend;
  3124   002864  C003  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3125   002868                     
  3126                           ; BSR set to: 14
  3127   002868  0012               	return		;funcret
  3128   00286A                     __end_of_sendCharSerial4:
  3129                           	callstack 0
  3130                           
  3131 ;; *************** function _motor_action *****************
  3132 ;; Defined at:
  3133 ;;		line 181 in file "../dc_motor.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  color           2   35[COMRAM] unsigned int 
  3136 ;;  l               2   37[COMRAM] PTR struct DC_motor
  3137 ;;		 -> main@motorL(9), 
  3138 ;;  r               2   39[COMRAM] PTR struct DC_motor
  3139 ;;		 -> main@motorR(9), 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;		None
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      void 
  3144 ;; Registers used:
  3145 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3151 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3153 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3154 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3155 ;;Total ram usage:        8 bytes
  3156 ;; Hardware stack levels used: 1
  3157 ;; Hardware stack levels required when called: 5
  3158 ;; This function calls:
  3159 ;;		_left_135
  3160 ;;		_left_90
  3161 ;;		_reverse
  3162 ;;		_right_135
  3163 ;;		_right_90
  3164 ;;		_spin_180
  3165 ;; This function is called by:
  3166 ;;		_main
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text15
  3171   0019B0                     __ptext15:
  3172                           	callstack 0
  3173   0019B0                     _motor_action:
  3174                           	callstack 25
  3175   0019B0                     
  3176                           ;../dc_motor.c: 181: void motor_action(unsigned int color, struct DC_motor *l, struct DC
      +                          _motor *r);../dc_motor.c: 182: {;../dc_motor.c: 183:     switch (color){
  3177   0019B0  EF42  F00D         	goto	l2726
  3178   0019B4                     l2710:
  3179                           
  3180                           ;../dc_motor.c: 185:             right_90(l,r);
  3181   0019B4  C026  F01C         	movff	motor_action@l,right_90@mL
  3182   0019B8  C027  F01D         	movff	motor_action@l+1,right_90@mL+1
  3183   0019BC  C028  F01E         	movff	motor_action@r,right_90@mR
  3184   0019C0  C029  F01F         	movff	motor_action@r+1,right_90@mR+1
  3185   0019C4  EC45  F00F         	call	_right_90	;wreg free
  3186                           
  3187                           ;../dc_motor.c: 186:             break;
  3188   0019C8  EF6C  F00D         	goto	l300
  3189   0019CC                     l2712:
  3190                           
  3191                           ;../dc_motor.c: 188:             left_90(l,r);
  3192   0019CC  C026  F01C         	movff	motor_action@l,left_90@mL
  3193   0019D0  C027  F01D         	movff	motor_action@l+1,left_90@mL+1
  3194   0019D4  C028  F01E         	movff	motor_action@r,left_90@mR
  3195   0019D8  C029  F01F         	movff	motor_action@r+1,left_90@mR+1
  3196   0019DC  EC97  F00F         	call	_left_90	;wreg free
  3197                           
  3198                           ;../dc_motor.c: 189:             break;
  3199   0019E0  EF6C  F00D         	goto	l300
  3200   0019E4                     l2714:
  3201                           
  3202                           ;../dc_motor.c: 191:             spin_180(l,r);
  3203   0019E4  C026  F01C         	movff	motor_action@l,spin_180@mL
  3204   0019E8  C027  F01D         	movff	motor_action@l+1,spin_180@mL+1
  3205   0019EC  C028  F01E         	movff	motor_action@r,spin_180@mR
  3206   0019F0  C029  F01F         	movff	motor_action@r+1,spin_180@mR+1
  3207   0019F4  ECE9  F00F         	call	_spin_180	;wreg free
  3208                           
  3209                           ;../dc_motor.c: 192:             break;
  3210   0019F8  EF6C  F00D         	goto	l300
  3211   0019FC                     l2716:
  3212                           
  3213                           ;../dc_motor.c: 194:             reverse(l,r);
  3214   0019FC  C026  F01C         	movff	motor_action@l,reverse@mL
  3215   001A00  C027  F01D         	movff	motor_action@l+1,reverse@mL+1
  3216   001A04  C028  F01E         	movff	motor_action@r,reverse@mR
  3217   001A08  C029  F01F         	movff	motor_action@r+1,reverse@mR+1
  3218   001A0C  EC8B  F010         	call	_reverse	;wreg free
  3219                           
  3220                           ;../dc_motor.c: 195:             right_90(l,r);
  3221   001A10  C026  F01C         	movff	motor_action@l,right_90@mL
  3222   001A14  C027  F01D         	movff	motor_action@l+1,right_90@mL+1
  3223   001A18  C028  F01E         	movff	motor_action@r,right_90@mR
  3224   001A1C  C029  F01F         	movff	motor_action@r+1,right_90@mR+1
  3225   001A20  EC45  F00F         	call	_right_90	;wreg free
  3226                           
  3227                           ;../dc_motor.c: 196:             break;
  3228   001A24  EF6C  F00D         	goto	l300
  3229   001A28                     l2718:
  3230                           
  3231                           ;../dc_motor.c: 198:             reverse(l,r);
  3232   001A28  C026  F01C         	movff	motor_action@l,reverse@mL
  3233   001A2C  C027  F01D         	movff	motor_action@l+1,reverse@mL+1
  3234   001A30  C028  F01E         	movff	motor_action@r,reverse@mR
  3235   001A34  C029  F01F         	movff	motor_action@r+1,reverse@mR+1
  3236   001A38  EC8B  F010         	call	_reverse	;wreg free
  3237                           
  3238                           ;../dc_motor.c: 199:             left_90(l,r);
  3239   001A3C  C026  F01C         	movff	motor_action@l,left_90@mL
  3240   001A40  C027  F01D         	movff	motor_action@l+1,left_90@mL+1
  3241   001A44  C028  F01E         	movff	motor_action@r,left_90@mR
  3242   001A48  C029  F01F         	movff	motor_action@r+1,left_90@mR+1
  3243   001A4C  EC97  F00F         	call	_left_90	;wreg free
  3244                           
  3245                           ;../dc_motor.c: 200:             break;
  3246   001A50  EF6C  F00D         	goto	l300
  3247   001A54                     l2720:
  3248                           
  3249                           ;../dc_motor.c: 202:             right_135(l,r);
  3250   001A54  C026  F01C         	movff	motor_action@l,right_135@mL
  3251   001A58  C027  F01D         	movff	motor_action@l+1,right_135@mL+1
  3252   001A5C  C028  F01E         	movff	motor_action@r,right_135@mR
  3253   001A60  C029  F01F         	movff	motor_action@r+1,right_135@mR+1
  3254   001A64  EC3A  F010         	call	_right_135	;wreg free
  3255                           
  3256                           ;../dc_motor.c: 203:             break;
  3257   001A68  EF6C  F00D         	goto	l300
  3258   001A6C                     l2722:
  3259                           
  3260                           ;../dc_motor.c: 205:             left_135(l,r);
  3261   001A6C  C026  F01C         	movff	motor_action@l,left_135@mL
  3262   001A70  C027  F01D         	movff	motor_action@l+1,left_135@mL+1
  3263   001A74  C028  F01E         	movff	motor_action@r,left_135@mR
  3264   001A78  C029  F01F         	movff	motor_action@r+1,left_135@mR+1
  3265   001A7C  ECDC  F010         	call	_left_135	;wreg free
  3266                           
  3267                           ;../dc_motor.c: 206:             break;
  3268   001A80  EF6C  F00D         	goto	l300
  3269   001A84                     l2726:
  3270   001A84  C024  F02A         	movff	motor_action@color,??_motor_action
  3271   001A88  C025  F02B         	movff	motor_action@color+1,??_motor_action+1
  3272                           
  3273                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3274                           ; Switch size 1, requested type "simple"
  3275                           ; Number of cases is 1, Range of values is 0 to 0
  3276                           ; switch strategies available:
  3277                           ; Name         Instructions Cycles
  3278                           ; simple_byte            4     3 (average)
  3279                           ;	Chosen strategy is simple_byte
  3280   001A8C  502B               	movf	(??_motor_action+1)^0,w,c
  3281   001A8E  0A00               	xorlw	0	; case 0
  3282   001A90  B4D8               	btfsc	status,2,c
  3283   001A92  EF4D  F00D         	goto	l3000
  3284   001A96  EF6C  F00D         	goto	l300
  3285   001A9A                     l3000:
  3286                           
  3287                           ; Switch size 1, requested type "simple"
  3288                           ; Number of cases is 7, Range of values is 1 to 7
  3289                           ; switch strategies available:
  3290                           ; Name         Instructions Cycles
  3291                           ; simple_byte           22    12 (average)
  3292                           ;	Chosen strategy is simple_byte
  3293   001A9A  502A               	movf	??_motor_action^0,w,c
  3294   001A9C  0A01               	xorlw	1	; case 1
  3295   001A9E  B4D8               	btfsc	status,2,c
  3296   001AA0  EFDA  F00C         	goto	l2710
  3297   001AA4  0A03               	xorlw	3	; case 2
  3298   001AA6  B4D8               	btfsc	status,2,c
  3299   001AA8  EFE6  F00C         	goto	l2712
  3300   001AAC  0A01               	xorlw	1	; case 3
  3301   001AAE  B4D8               	btfsc	status,2,c
  3302   001AB0  EFF2  F00C         	goto	l2714
  3303   001AB4  0A07               	xorlw	7	; case 4
  3304   001AB6  B4D8               	btfsc	status,2,c
  3305   001AB8  EFFE  F00C         	goto	l2716
  3306   001ABC  0A01               	xorlw	1	; case 5
  3307   001ABE  B4D8               	btfsc	status,2,c
  3308   001AC0  EF14  F00D         	goto	l2718
  3309   001AC4  0A03               	xorlw	3	; case 6
  3310   001AC6  B4D8               	btfsc	status,2,c
  3311   001AC8  EF2A  F00D         	goto	l2720
  3312   001ACC  0A01               	xorlw	1	; case 7
  3313   001ACE  B4D8               	btfsc	status,2,c
  3314   001AD0  EF36  F00D         	goto	l2722
  3315   001AD4  EF6C  F00D         	goto	l300
  3316   001AD8                     l300:
  3317   001AD8  0012               	return		;funcret
  3318   001ADA                     __end_of_motor_action:
  3319                           	callstack 0
  3320                           
  3321 ;; *************** function _spin_180 *****************
  3322 ;; Defined at:
  3323 ;;		line 136 in file "../dc_motor.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3326 ;;		 -> main@motorL(9), 
  3327 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3328 ;;		 -> main@motorR(9), 
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;  i               2   33[COMRAM] int 
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  1    wreg      void 
  3333 ;; Registers used:
  3334 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3340 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3341 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3342 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3343 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3344 ;;Total ram usage:        8 bytes
  3345 ;; Hardware stack levels used: 1
  3346 ;; Hardware stack levels required when called: 4
  3347 ;; This function calls:
  3348 ;;		_setMotorPWM
  3349 ;; This function is called by:
  3350 ;;		_motor_action
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text16
  3355   001FD2                     __ptext16:
  3356                           	callstack 0
  3357   001FD2                     _spin_180:
  3358                           	callstack 25
  3359   001FD2                     
  3360                           ;../dc_motor.c: 136: void spin_180(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 137: {;../dc_motor.c: 138:     mL->direction = 1;
  3361   001FD2  EE20 F001          	lfsr	2,1
  3362   001FD6  501C               	movf	spin_180@mL^0,w,c
  3363   001FD8  26D9               	addwf	fsr2l,f,c
  3364   001FDA  501D               	movf	(spin_180@mL+1)^0,w,c
  3365   001FDC  22DA               	addwfc	fsr2h,f,c
  3366   001FDE  0E01               	movlw	1
  3367   001FE0  6EDF               	movwf	indf2,c
  3368                           
  3369                           ;../dc_motor.c: 139:     mR->direction = 0;
  3370   001FE2  EE20 F001          	lfsr	2,1
  3371   001FE6  501E               	movf	spin_180@mR^0,w,c
  3372   001FE8  26D9               	addwf	fsr2l,f,c
  3373   001FEA  501F               	movf	(spin_180@mR+1)^0,w,c
  3374   001FEC  22DA               	addwfc	fsr2h,f,c
  3375   001FEE  0E00               	movlw	0
  3376   001FF0  6EDF               	movwf	indf2,c
  3377   001FF2                     
  3378                           ;../dc_motor.c: 140:     for (int i = 0;i<50;i = i + 2)
  3379   001FF2  0E00               	movlw	0
  3380   001FF4  6E23               	movwf	(spin_180@i+1)^0,c
  3381   001FF6  0E00               	movlw	0
  3382   001FF8  6E22               	movwf	spin_180@i^0,c
  3383   001FFA                     l2440:
  3384                           
  3385                           ;../dc_motor.c: 141:     {;../dc_motor.c: 142:         mL->power = i;
  3386   001FFA  C01C  FFD9         	movff	spin_180@mL,fsr2l
  3387   001FFE  C01D  FFDA         	movff	spin_180@mL+1,fsr2h
  3388   002002  C022  FFDF         	movff	spin_180@i,indf2
  3389   002006                     
  3390                           ;../dc_motor.c: 143:         mR->power = 50 + i;
  3391   002006  5022               	movf	spin_180@i^0,w,c
  3392   002008  0F32               	addlw	50
  3393   00200A  C01E  FFD9         	movff	spin_180@mR,fsr2l
  3394   00200E  C01F  FFDA         	movff	spin_180@mR+1,fsr2h
  3395   002012  6EDF               	movwf	indf2,c
  3396   002014                     
  3397                           ;../dc_motor.c: 144:         setMotorPWM(mL);
  3398   002014  C01C  F011         	movff	spin_180@mL,setMotorPWM@m
  3399   002018  C01D  F012         	movff	spin_180@mL+1,setMotorPWM@m+1
  3400   00201C  ECC9  F009         	call	_setMotorPWM	;wreg free
  3401   002020                     
  3402                           ;../dc_motor.c: 145:         setMotorPWM(mR);
  3403   002020  C01E  F011         	movff	spin_180@mR,setMotorPWM@m
  3404   002024  C01F  F012         	movff	spin_180@mR+1,setMotorPWM@m+1
  3405   002028  ECC9  F009         	call	_setMotorPWM	;wreg free
  3406   00202C                     
  3407                           ;../dc_motor.c: 146:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3408   00202C  0E35               	movlw	53
  3409   00202E                     u1707:
  3410   00202E  2EE8               	decfsz	wreg,f,c
  3411   002030  D7FE               	bra	u1707
  3412   002032  F000               	nop	
  3413   002034                     
  3414                           ;../dc_motor.c: 147:     }
  3415   002034  0E02               	movlw	2
  3416   002036  2422               	addwf	spin_180@i^0,w,c
  3417   002038  6E22               	movwf	spin_180@i^0,c
  3418   00203A  0E00               	movlw	0
  3419   00203C  2023               	addwfc	(spin_180@i+1)^0,w,c
  3420   00203E  6E23               	movwf	(spin_180@i+1)^0,c
  3421   002040  BE23               	btfsc	(spin_180@i+1)^0,7,c
  3422   002042  EF2C  F010         	goto	u1311
  3423   002046  5023               	movf	(spin_180@i+1)^0,w,c
  3424   002048  E109               	bnz	u1310
  3425   00204A  0E32               	movlw	50
  3426   00204C  5C22               	subwf	spin_180@i^0,w,c
  3427   00204E  A0D8               	btfss	status,0,c
  3428   002050  EF2C  F010         	goto	u1311
  3429   002054  EF2E  F010         	goto	u1310
  3430   002058                     u1311:
  3431   002058  EFFD  F00F         	goto	l2440
  3432   00205C                     u1310:
  3433   00205C                     
  3434                           ;../dc_motor.c: 148:     _delay((unsigned long)((290)*(64000000/4000.0)));
  3435   00205C  0E18               	movlw	24
  3436   00205E  6E21               	movwf	(??_spin_180+1)^0,c
  3437   002060  0E8A               	movlw	138
  3438   002062  6E20               	movwf	??_spin_180^0,c
  3439   002064  0EE8               	movlw	232
  3440   002066                     u1717:
  3441   002066  2EE8               	decfsz	wreg,f,c
  3442   002068  D7FE               	bra	u1717
  3443   00206A  2E20               	decfsz	??_spin_180^0,f,c
  3444   00206C  D7FC               	bra	u1717
  3445   00206E  2E21               	decfsz	(??_spin_180+1)^0,f,c
  3446   002070  D7FA               	bra	u1717
  3447   002072  0012               	return		;funcret
  3448   002074                     __end_of_spin_180:
  3449                           	callstack 0
  3450                           
  3451 ;; *************** function _right_90 *****************
  3452 ;; Defined at:
  3453 ;;		line 106 in file "../dc_motor.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3456 ;;		 -> main@motorL(9), 
  3457 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3458 ;;		 -> main@motorR(9), 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;  i               2   33[COMRAM] int 
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  1    wreg      void 
  3463 ;; Registers used:
  3464 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3470 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3471 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3472 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3473 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3474 ;;Total ram usage:        8 bytes
  3475 ;; Hardware stack levels used: 1
  3476 ;; Hardware stack levels required when called: 4
  3477 ;; This function calls:
  3478 ;;		_setMotorPWM
  3479 ;; This function is called by:
  3480 ;;		_motor_action
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           	psect	text17
  3485   001E8A                     __ptext17:
  3486                           	callstack 0
  3487   001E8A                     _right_90:
  3488                           	callstack 25
  3489   001E8A                     
  3490                           ;../dc_motor.c: 106: void right_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 107: {;../dc_motor.c: 108:     mL->direction = 1;
  3491   001E8A  EE20 F001          	lfsr	2,1
  3492   001E8E  501C               	movf	right_90@mL^0,w,c
  3493   001E90  26D9               	addwf	fsr2l,f,c
  3494   001E92  501D               	movf	(right_90@mL+1)^0,w,c
  3495   001E94  22DA               	addwfc	fsr2h,f,c
  3496   001E96  0E01               	movlw	1
  3497   001E98  6EDF               	movwf	indf2,c
  3498                           
  3499                           ;../dc_motor.c: 109:     mR->direction = 0;
  3500   001E9A  EE20 F001          	lfsr	2,1
  3501   001E9E  501E               	movf	right_90@mR^0,w,c
  3502   001EA0  26D9               	addwf	fsr2l,f,c
  3503   001EA2  501F               	movf	(right_90@mR+1)^0,w,c
  3504   001EA4  22DA               	addwfc	fsr2h,f,c
  3505   001EA6  0E00               	movlw	0
  3506   001EA8  6EDF               	movwf	indf2,c
  3507   001EAA                     
  3508                           ;../dc_motor.c: 110:     for (int i = 0;i<50;i = i + 2)
  3509   001EAA  0E00               	movlw	0
  3510   001EAC  6E23               	movwf	(right_90@i+1)^0,c
  3511   001EAE  0E00               	movlw	0
  3512   001EB0  6E22               	movwf	right_90@i^0,c
  3513   001EB2                     l2392:
  3514                           
  3515                           ;../dc_motor.c: 111:     {;../dc_motor.c: 112:         mL->power = i;
  3516   001EB2  C01C  FFD9         	movff	right_90@mL,fsr2l
  3517   001EB6  C01D  FFDA         	movff	right_90@mL+1,fsr2h
  3518   001EBA  C022  FFDF         	movff	right_90@i,indf2
  3519   001EBE                     
  3520                           ;../dc_motor.c: 113:         mR->power = 50 + i;
  3521   001EBE  5022               	movf	right_90@i^0,w,c
  3522   001EC0  0F32               	addlw	50
  3523   001EC2  C01E  FFD9         	movff	right_90@mR,fsr2l
  3524   001EC6  C01F  FFDA         	movff	right_90@mR+1,fsr2h
  3525   001ECA  6EDF               	movwf	indf2,c
  3526   001ECC                     
  3527                           ;../dc_motor.c: 114:         setMotorPWM(mL);
  3528   001ECC  C01C  F011         	movff	right_90@mL,setMotorPWM@m
  3529   001ED0  C01D  F012         	movff	right_90@mL+1,setMotorPWM@m+1
  3530   001ED4  ECC9  F009         	call	_setMotorPWM	;wreg free
  3531   001ED8                     
  3532                           ;../dc_motor.c: 115:         setMotorPWM(mR);
  3533   001ED8  C01E  F011         	movff	right_90@mR,setMotorPWM@m
  3534   001EDC  C01F  F012         	movff	right_90@mR+1,setMotorPWM@m+1
  3535   001EE0  ECC9  F009         	call	_setMotorPWM	;wreg free
  3536   001EE4                     
  3537                           ;../dc_motor.c: 116:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3538   001EE4  0E35               	movlw	53
  3539   001EE6                     u1727:
  3540   001EE6  2EE8               	decfsz	wreg,f,c
  3541   001EE8  D7FE               	bra	u1727
  3542   001EEA  F000               	nop	
  3543   001EEC                     
  3544                           ;../dc_motor.c: 117:     }
  3545   001EEC  0E02               	movlw	2
  3546   001EEE  2422               	addwf	right_90@i^0,w,c
  3547   001EF0  6E22               	movwf	right_90@i^0,c
  3548   001EF2  0E00               	movlw	0
  3549   001EF4  2023               	addwfc	(right_90@i+1)^0,w,c
  3550   001EF6  6E23               	movwf	(right_90@i+1)^0,c
  3551   001EF8  BE23               	btfsc	(right_90@i+1)^0,7,c
  3552   001EFA  EF88  F00F         	goto	u1291
  3553   001EFE  5023               	movf	(right_90@i+1)^0,w,c
  3554   001F00  E109               	bnz	u1290
  3555   001F02  0E32               	movlw	50
  3556   001F04  5C22               	subwf	right_90@i^0,w,c
  3557   001F06  A0D8               	btfss	status,0,c
  3558   001F08  EF88  F00F         	goto	u1291
  3559   001F0C  EF8A  F00F         	goto	u1290
  3560   001F10                     u1291:
  3561   001F10  EF59  F00F         	goto	l2392
  3562   001F14                     u1290:
  3563   001F14                     
  3564                           ;../dc_motor.c: 118:     _delay((unsigned long)((165)*(64000000/4000.0)));
  3565   001F14  0E0E               	movlw	14
  3566   001F16  6E21               	movwf	(??_right_90+1)^0,c
  3567   001F18  0E65               	movlw	101
  3568   001F1A  6E20               	movwf	??_right_90^0,c
  3569   001F1C  0E87               	movlw	135
  3570   001F1E                     u1737:
  3571   001F1E  2EE8               	decfsz	wreg,f,c
  3572   001F20  D7FE               	bra	u1737
  3573   001F22  2E20               	decfsz	??_right_90^0,f,c
  3574   001F24  D7FC               	bra	u1737
  3575   001F26  2E21               	decfsz	(??_right_90+1)^0,f,c
  3576   001F28  D7FA               	bra	u1737
  3577   001F2A  F000               	nop	
  3578   001F2C  0012               	return		;funcret
  3579   001F2E                     __end_of_right_90:
  3580                           	callstack 0
  3581                           
  3582 ;; *************** function _right_135 *****************
  3583 ;; Defined at:
  3584 ;;		line 151 in file "../dc_motor.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3587 ;;		 -> main@motorL(9), 
  3588 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3589 ;;		 -> main@motorR(9), 
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;  i               2   33[COMRAM] int 
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  1    wreg      void 
  3594 ;; Registers used:
  3595 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3601 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3602 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3603 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3604 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3605 ;;Total ram usage:        8 bytes
  3606 ;; Hardware stack levels used: 1
  3607 ;; Hardware stack levels required when called: 4
  3608 ;; This function calls:
  3609 ;;		_setMotorPWM
  3610 ;; This function is called by:
  3611 ;;		_motor_action
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           	psect	text18
  3616   002074                     __ptext18:
  3617                           	callstack 0
  3618   002074                     _right_135:
  3619                           	callstack 25
  3620   002074                     
  3621                           ;../dc_motor.c: 151: void right_135(struct DC_motor *mL, struct DC_motor *mR);../dc_moto
      +                          r.c: 152: {;../dc_motor.c: 153:     mL->direction = 1;
  3622   002074  EE20 F001          	lfsr	2,1
  3623   002078  501C               	movf	right_135@mL^0,w,c
  3624   00207A  26D9               	addwf	fsr2l,f,c
  3625   00207C  501D               	movf	(right_135@mL+1)^0,w,c
  3626   00207E  22DA               	addwfc	fsr2h,f,c
  3627   002080  0E01               	movlw	1
  3628   002082  6EDF               	movwf	indf2,c
  3629                           
  3630                           ;../dc_motor.c: 154:     mR->direction = 0;
  3631   002084  EE20 F001          	lfsr	2,1
  3632   002088  501E               	movf	right_135@mR^0,w,c
  3633   00208A  26D9               	addwf	fsr2l,f,c
  3634   00208C  501F               	movf	(right_135@mR+1)^0,w,c
  3635   00208E  22DA               	addwfc	fsr2h,f,c
  3636   002090  0E00               	movlw	0
  3637   002092  6EDF               	movwf	indf2,c
  3638   002094                     
  3639                           ;../dc_motor.c: 155:     for (int i = 0;i<50;i = i + 2)
  3640   002094  0E00               	movlw	0
  3641   002096  6E23               	movwf	(right_135@i+1)^0,c
  3642   002098  0E00               	movlw	0
  3643   00209A  6E22               	movwf	right_135@i^0,c
  3644   00209C                     l2464:
  3645                           
  3646                           ;../dc_motor.c: 156:     {;../dc_motor.c: 157:         mL->power = i;
  3647   00209C  C01C  FFD9         	movff	right_135@mL,fsr2l
  3648   0020A0  C01D  FFDA         	movff	right_135@mL+1,fsr2h
  3649   0020A4  C022  FFDF         	movff	right_135@i,indf2
  3650   0020A8                     
  3651                           ;../dc_motor.c: 158:         mR->power = 50 + i;
  3652   0020A8  5022               	movf	right_135@i^0,w,c
  3653   0020AA  0F32               	addlw	50
  3654   0020AC  C01E  FFD9         	movff	right_135@mR,fsr2l
  3655   0020B0  C01F  FFDA         	movff	right_135@mR+1,fsr2h
  3656   0020B4  6EDF               	movwf	indf2,c
  3657   0020B6                     
  3658                           ;../dc_motor.c: 159:         setMotorPWM(mL);
  3659   0020B6  C01C  F011         	movff	right_135@mL,setMotorPWM@m
  3660   0020BA  C01D  F012         	movff	right_135@mL+1,setMotorPWM@m+1
  3661   0020BE  ECC9  F009         	call	_setMotorPWM	;wreg free
  3662   0020C2                     
  3663                           ;../dc_motor.c: 160:         setMotorPWM(mR);
  3664   0020C2  C01E  F011         	movff	right_135@mR,setMotorPWM@m
  3665   0020C6  C01F  F012         	movff	right_135@mR+1,setMotorPWM@m+1
  3666   0020CA  ECC9  F009         	call	_setMotorPWM	;wreg free
  3667   0020CE                     
  3668                           ;../dc_motor.c: 161:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3669   0020CE  0E35               	movlw	53
  3670   0020D0                     u1747:
  3671   0020D0  2EE8               	decfsz	wreg,f,c
  3672   0020D2  D7FE               	bra	u1747
  3673   0020D4  F000               	nop	
  3674   0020D6                     
  3675                           ;../dc_motor.c: 162:     }
  3676   0020D6  0E02               	movlw	2
  3677   0020D8  2422               	addwf	right_135@i^0,w,c
  3678   0020DA  6E22               	movwf	right_135@i^0,c
  3679   0020DC  0E00               	movlw	0
  3680   0020DE  2023               	addwfc	(right_135@i+1)^0,w,c
  3681   0020E0  6E23               	movwf	(right_135@i+1)^0,c
  3682   0020E2  BE23               	btfsc	(right_135@i+1)^0,7,c
  3683   0020E4  EF7D  F010         	goto	u1321
  3684   0020E8  5023               	movf	(right_135@i+1)^0,w,c
  3685   0020EA  E109               	bnz	u1320
  3686   0020EC  0E32               	movlw	50
  3687   0020EE  5C22               	subwf	right_135@i^0,w,c
  3688   0020F0  A0D8               	btfss	status,0,c
  3689   0020F2  EF7D  F010         	goto	u1321
  3690   0020F6  EF7F  F010         	goto	u1320
  3691   0020FA                     u1321:
  3692   0020FA  EF4E  F010         	goto	l2464
  3693   0020FE                     u1320:
  3694   0020FE                     
  3695                           ;../dc_motor.c: 163:     _delay((unsigned long)((230)*(64000000/4000.0)));
  3696   0020FE  0E13               	movlw	19
  3697   002100  6E21               	movwf	(??_right_135+1)^0,c
  3698   002102  0EAC               	movlw	172
  3699   002104  6E20               	movwf	??_right_135^0,c
  3700   002106  0E2A               	movlw	42
  3701   002108                     u1757:
  3702   002108  2EE8               	decfsz	wreg,f,c
  3703   00210A  D7FE               	bra	u1757
  3704   00210C  2E20               	decfsz	??_right_135^0,f,c
  3705   00210E  D7FC               	bra	u1757
  3706   002110  2E21               	decfsz	(??_right_135+1)^0,f,c
  3707   002112  D7FA               	bra	u1757
  3708   002114  0012               	return		;funcret
  3709   002116                     __end_of_right_135:
  3710                           	callstack 0
  3711                           
  3712 ;; *************** function _reverse *****************
  3713 ;; Defined at:
  3714 ;;		line 91 in file "../dc_motor.c"
  3715 ;; Parameters:    Size  Location     Type
  3716 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3717 ;;		 -> main@motorL(9), 
  3718 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3719 ;;		 -> main@motorR(9), 
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;  i               2   33[COMRAM] int 
  3722 ;; Return value:  Size  Location     Type
  3723 ;;                  1    wreg      void 
  3724 ;; Registers used:
  3725 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3726 ;; Tracked objects:
  3727 ;;		On entry : 0/0
  3728 ;;		On exit  : 0/0
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3731 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3732 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3733 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3734 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3735 ;;Total ram usage:        8 bytes
  3736 ;; Hardware stack levels used: 1
  3737 ;; Hardware stack levels required when called: 4
  3738 ;; This function calls:
  3739 ;;		_setMotorPWM
  3740 ;; This function is called by:
  3741 ;;		_motor_action
  3742 ;; This function uses a non-reentrant model
  3743 ;;
  3744                           
  3745                           	psect	text19
  3746   002116                     __ptext19:
  3747                           	callstack 0
  3748   002116                     _reverse:
  3749                           	callstack 25
  3750   002116                     
  3751                           ;../dc_motor.c: 91: void reverse (struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 92: {;../dc_motor.c: 93:     mL->direction = 0;
  3752   002116  EE20 F001          	lfsr	2,1
  3753   00211A  501C               	movf	reverse@mL^0,w,c
  3754   00211C  26D9               	addwf	fsr2l,f,c
  3755   00211E  501D               	movf	(reverse@mL+1)^0,w,c
  3756   002120  22DA               	addwfc	fsr2h,f,c
  3757   002122  0E00               	movlw	0
  3758   002124  6EDF               	movwf	indf2,c
  3759                           
  3760                           ;../dc_motor.c: 94:     mR->direction = 0;
  3761   002126  EE20 F001          	lfsr	2,1
  3762   00212A  501E               	movf	reverse@mR^0,w,c
  3763   00212C  26D9               	addwf	fsr2l,f,c
  3764   00212E  501F               	movf	(reverse@mR+1)^0,w,c
  3765   002130  22DA               	addwfc	fsr2h,f,c
  3766   002132  0E00               	movlw	0
  3767   002134  6EDF               	movwf	indf2,c
  3768   002136                     
  3769                           ;../dc_motor.c: 95:     for (int i=0;i<51;i=i + 2)
  3770   002136  0E00               	movlw	0
  3771   002138  6E23               	movwf	(reverse@i+1)^0,c
  3772   00213A  0E00               	movlw	0
  3773   00213C  6E22               	movwf	reverse@i^0,c
  3774   00213E                     l2370:
  3775                           
  3776                           ;../dc_motor.c: 96:     {;../dc_motor.c: 97:         mL->power = i;
  3777   00213E  C01C  FFD9         	movff	reverse@mL,fsr2l
  3778   002142  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  3779   002146  C022  FFDF         	movff	reverse@i,indf2
  3780                           
  3781                           ;../dc_motor.c: 98:         mR->power = i;
  3782   00214A  C01E  FFD9         	movff	reverse@mR,fsr2l
  3783   00214E  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  3784   002152  C022  FFDF         	movff	reverse@i,indf2
  3785   002156                     
  3786                           ;../dc_motor.c: 99:         setMotorPWM(mL);
  3787   002156  C01C  F011         	movff	reverse@mL,setMotorPWM@m
  3788   00215A  C01D  F012         	movff	reverse@mL+1,setMotorPWM@m+1
  3789   00215E  ECC9  F009         	call	_setMotorPWM	;wreg free
  3790   002162                     
  3791                           ;../dc_motor.c: 100:         setMotorPWM(mR);
  3792   002162  C01E  F011         	movff	reverse@mR,setMotorPWM@m
  3793   002166  C01F  F012         	movff	reverse@mR+1,setMotorPWM@m+1
  3794   00216A  ECC9  F009         	call	_setMotorPWM	;wreg free
  3795   00216E                     
  3796                           ;../dc_motor.c: 101:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3797   00216E  0E35               	movlw	53
  3798   002170                     u1767:
  3799   002170  2EE8               	decfsz	wreg,f,c
  3800   002172  D7FE               	bra	u1767
  3801   002174  F000               	nop	
  3802   002176                     
  3803                           ;../dc_motor.c: 102:     }
  3804   002176  0E02               	movlw	2
  3805   002178  2422               	addwf	reverse@i^0,w,c
  3806   00217A  6E22               	movwf	reverse@i^0,c
  3807   00217C  0E00               	movlw	0
  3808   00217E  2023               	addwfc	(reverse@i+1)^0,w,c
  3809   002180  6E23               	movwf	(reverse@i+1)^0,c
  3810   002182  BE23               	btfsc	(reverse@i+1)^0,7,c
  3811   002184  EFCD  F010         	goto	u1281
  3812   002188  5023               	movf	(reverse@i+1)^0,w,c
  3813   00218A  E109               	bnz	u1280
  3814   00218C  0E33               	movlw	51
  3815   00218E  5C22               	subwf	reverse@i^0,w,c
  3816   002190  A0D8               	btfss	status,0,c
  3817   002192  EFCD  F010         	goto	u1281
  3818   002196  EFCF  F010         	goto	u1280
  3819   00219A                     u1281:
  3820   00219A  EF9F  F010         	goto	l2370
  3821   00219E                     u1280:
  3822   00219E                     
  3823                           ;../dc_motor.c: 103:     _delay((unsigned long)((1100)*(64000000/4000.0)));
  3824   00219E  0E5A               	movlw	90
  3825   0021A0  6E21               	movwf	(??_reverse+1)^0,c
  3826   0021A2  0E49               	movlw	73
  3827   0021A4  6E20               	movwf	??_reverse^0,c
  3828   0021A6  0EE7               	movlw	231
  3829   0021A8                     u1777:
  3830   0021A8  2EE8               	decfsz	wreg,f,c
  3831   0021AA  D7FE               	bra	u1777
  3832   0021AC  2E20               	decfsz	??_reverse^0,f,c
  3833   0021AE  D7FC               	bra	u1777
  3834   0021B0  2E21               	decfsz	(??_reverse+1)^0,f,c
  3835   0021B2  D7FA               	bra	u1777
  3836   0021B4  F000               	nop	
  3837   0021B6  0012               	return		;funcret
  3838   0021B8                     __end_of_reverse:
  3839                           	callstack 0
  3840                           
  3841 ;; *************** function _left_90 *****************
  3842 ;; Defined at:
  3843 ;;		line 121 in file "../dc_motor.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3846 ;;		 -> main@motorL(9), 
  3847 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3848 ;;		 -> main@motorR(9), 
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;  i               2   33[COMRAM] int 
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3860 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3861 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3862 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3863 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3864 ;;Total ram usage:        8 bytes
  3865 ;; Hardware stack levels used: 1
  3866 ;; Hardware stack levels required when called: 4
  3867 ;; This function calls:
  3868 ;;		_setMotorPWM
  3869 ;; This function is called by:
  3870 ;;		_motor_action
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           	psect	text20
  3875   001F2E                     __ptext20:
  3876                           	callstack 0
  3877   001F2E                     _left_90:
  3878                           	callstack 25
  3879   001F2E                     
  3880                           ;../dc_motor.c: 121: void left_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 122: {;../dc_motor.c: 123:     mL->direction = 0;
  3881   001F2E  EE20 F001          	lfsr	2,1
  3882   001F32  501C               	movf	left_90@mL^0,w,c
  3883   001F34  26D9               	addwf	fsr2l,f,c
  3884   001F36  501D               	movf	(left_90@mL+1)^0,w,c
  3885   001F38  22DA               	addwfc	fsr2h,f,c
  3886   001F3A  0E00               	movlw	0
  3887   001F3C  6EDF               	movwf	indf2,c
  3888                           
  3889                           ;../dc_motor.c: 124:     mR->direction = 1;
  3890   001F3E  EE20 F001          	lfsr	2,1
  3891   001F42  501E               	movf	left_90@mR^0,w,c
  3892   001F44  26D9               	addwf	fsr2l,f,c
  3893   001F46  501F               	movf	(left_90@mR+1)^0,w,c
  3894   001F48  22DA               	addwfc	fsr2h,f,c
  3895   001F4A  0E01               	movlw	1
  3896   001F4C  6EDF               	movwf	indf2,c
  3897   001F4E                     
  3898                           ;../dc_motor.c: 125:     for (int i = 0;i<50;i = i + 2)
  3899   001F4E  0E00               	movlw	0
  3900   001F50  6E23               	movwf	(left_90@i+1)^0,c
  3901   001F52  0E00               	movlw	0
  3902   001F54  6E22               	movwf	left_90@i^0,c
  3903   001F56                     l2416:
  3904                           
  3905                           ;../dc_motor.c: 126:     {;../dc_motor.c: 127:         mL->power = 50 + i;
  3906   001F56  5022               	movf	left_90@i^0,w,c
  3907   001F58  0F32               	addlw	50
  3908   001F5A  C01C  FFD9         	movff	left_90@mL,fsr2l
  3909   001F5E  C01D  FFDA         	movff	left_90@mL+1,fsr2h
  3910   001F62  6EDF               	movwf	indf2,c
  3911   001F64                     
  3912                           ;../dc_motor.c: 128:         mR->power = i;
  3913   001F64  C01E  FFD9         	movff	left_90@mR,fsr2l
  3914   001F68  C01F  FFDA         	movff	left_90@mR+1,fsr2h
  3915   001F6C  C022  FFDF         	movff	left_90@i,indf2
  3916   001F70                     
  3917                           ;../dc_motor.c: 129:         setMotorPWM(mL);
  3918   001F70  C01C  F011         	movff	left_90@mL,setMotorPWM@m
  3919   001F74  C01D  F012         	movff	left_90@mL+1,setMotorPWM@m+1
  3920   001F78  ECC9  F009         	call	_setMotorPWM	;wreg free
  3921   001F7C                     
  3922                           ;../dc_motor.c: 130:         setMotorPWM(mR);
  3923   001F7C  C01E  F011         	movff	left_90@mR,setMotorPWM@m
  3924   001F80  C01F  F012         	movff	left_90@mR+1,setMotorPWM@m+1
  3925   001F84  ECC9  F009         	call	_setMotorPWM	;wreg free
  3926   001F88                     
  3927                           ;../dc_motor.c: 131:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3928   001F88  0E35               	movlw	53
  3929   001F8A                     u1787:
  3930   001F8A  2EE8               	decfsz	wreg,f,c
  3931   001F8C  D7FE               	bra	u1787
  3932   001F8E  F000               	nop	
  3933   001F90                     
  3934                           ;../dc_motor.c: 132:     }
  3935   001F90  0E02               	movlw	2
  3936   001F92  2422               	addwf	left_90@i^0,w,c
  3937   001F94  6E22               	movwf	left_90@i^0,c
  3938   001F96  0E00               	movlw	0
  3939   001F98  2023               	addwfc	(left_90@i+1)^0,w,c
  3940   001F9A  6E23               	movwf	(left_90@i+1)^0,c
  3941   001F9C  BE23               	btfsc	(left_90@i+1)^0,7,c
  3942   001F9E  EFDA  F00F         	goto	u1301
  3943   001FA2  5023               	movf	(left_90@i+1)^0,w,c
  3944   001FA4  E109               	bnz	u1300
  3945   001FA6  0E32               	movlw	50
  3946   001FA8  5C22               	subwf	left_90@i^0,w,c
  3947   001FAA  A0D8               	btfss	status,0,c
  3948   001FAC  EFDA  F00F         	goto	u1301
  3949   001FB0  EFDC  F00F         	goto	u1300
  3950   001FB4                     u1301:
  3951   001FB4  EFAB  F00F         	goto	l2416
  3952   001FB8                     u1300:
  3953   001FB8                     
  3954                           ;../dc_motor.c: 133:     _delay((unsigned long)((165)*(64000000/4000.0)));
  3955   001FB8  0E0E               	movlw	14
  3956   001FBA  6E21               	movwf	(??_left_90+1)^0,c
  3957   001FBC  0E65               	movlw	101
  3958   001FBE  6E20               	movwf	??_left_90^0,c
  3959   001FC0  0E87               	movlw	135
  3960   001FC2                     u1797:
  3961   001FC2  2EE8               	decfsz	wreg,f,c
  3962   001FC4  D7FE               	bra	u1797
  3963   001FC6  2E20               	decfsz	??_left_90^0,f,c
  3964   001FC8  D7FC               	bra	u1797
  3965   001FCA  2E21               	decfsz	(??_left_90+1)^0,f,c
  3966   001FCC  D7FA               	bra	u1797
  3967   001FCE  F000               	nop	
  3968   001FD0  0012               	return		;funcret
  3969   001FD2                     __end_of_left_90:
  3970                           	callstack 0
  3971                           
  3972 ;; *************** function _left_135 *****************
  3973 ;; Defined at:
  3974 ;;		line 166 in file "../dc_motor.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3977 ;;		 -> main@motorL(9), 
  3978 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3979 ;;		 -> main@motorR(9), 
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  i               2   33[COMRAM] int 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  1    wreg      void 
  3984 ;; Registers used:
  3985 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3991 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3992 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3993 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3994 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3995 ;;Total ram usage:        8 bytes
  3996 ;; Hardware stack levels used: 1
  3997 ;; Hardware stack levels required when called: 4
  3998 ;; This function calls:
  3999 ;;		_setMotorPWM
  4000 ;; This function is called by:
  4001 ;;		_motor_action
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text21
  4006   0021B8                     __ptext21:
  4007                           	callstack 0
  4008   0021B8                     _left_135:
  4009                           	callstack 25
  4010   0021B8                     
  4011                           ;../dc_motor.c: 166: void left_135(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 167: {;../dc_motor.c: 168:     mL->direction = 0;
  4012   0021B8  EE20 F001          	lfsr	2,1
  4013   0021BC  501C               	movf	left_135@mL^0,w,c
  4014   0021BE  26D9               	addwf	fsr2l,f,c
  4015   0021C0  501D               	movf	(left_135@mL+1)^0,w,c
  4016   0021C2  22DA               	addwfc	fsr2h,f,c
  4017   0021C4  0E00               	movlw	0
  4018   0021C6  6EDF               	movwf	indf2,c
  4019                           
  4020                           ;../dc_motor.c: 169:     mR->direction = 1;
  4021   0021C8  EE20 F001          	lfsr	2,1
  4022   0021CC  501E               	movf	left_135@mR^0,w,c
  4023   0021CE  26D9               	addwf	fsr2l,f,c
  4024   0021D0  501F               	movf	(left_135@mR+1)^0,w,c
  4025   0021D2  22DA               	addwfc	fsr2h,f,c
  4026   0021D4  0E01               	movlw	1
  4027   0021D6  6EDF               	movwf	indf2,c
  4028   0021D8                     
  4029                           ;../dc_motor.c: 170:     for (int i = 0;i<50;i = i + 2)
  4030   0021D8  0E00               	movlw	0
  4031   0021DA  6E23               	movwf	(left_135@i+1)^0,c
  4032   0021DC  0E00               	movlw	0
  4033   0021DE  6E22               	movwf	left_135@i^0,c
  4034   0021E0                     l2488:
  4035                           
  4036                           ;../dc_motor.c: 171:     {;../dc_motor.c: 172:         mL->power = 50 + i;
  4037   0021E0  5022               	movf	left_135@i^0,w,c
  4038   0021E2  0F32               	addlw	50
  4039   0021E4  C01C  FFD9         	movff	left_135@mL,fsr2l
  4040   0021E8  C01D  FFDA         	movff	left_135@mL+1,fsr2h
  4041   0021EC  6EDF               	movwf	indf2,c
  4042   0021EE                     
  4043                           ;../dc_motor.c: 173:         mR->power = i;
  4044   0021EE  C01E  FFD9         	movff	left_135@mR,fsr2l
  4045   0021F2  C01F  FFDA         	movff	left_135@mR+1,fsr2h
  4046   0021F6  C022  FFDF         	movff	left_135@i,indf2
  4047   0021FA                     
  4048                           ;../dc_motor.c: 174:         setMotorPWM(mL);
  4049   0021FA  C01C  F011         	movff	left_135@mL,setMotorPWM@m
  4050   0021FE  C01D  F012         	movff	left_135@mL+1,setMotorPWM@m+1
  4051   002202  ECC9  F009         	call	_setMotorPWM	;wreg free
  4052   002206                     
  4053                           ;../dc_motor.c: 175:         setMotorPWM(mR);
  4054   002206  C01E  F011         	movff	left_135@mR,setMotorPWM@m
  4055   00220A  C01F  F012         	movff	left_135@mR+1,setMotorPWM@m+1
  4056   00220E  ECC9  F009         	call	_setMotorPWM	;wreg free
  4057   002212                     
  4058                           ;../dc_motor.c: 176:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4059   002212  0E35               	movlw	53
  4060   002214                     u1807:
  4061   002214  2EE8               	decfsz	wreg,f,c
  4062   002216  D7FE               	bra	u1807
  4063   002218  F000               	nop	
  4064   00221A                     
  4065                           ;../dc_motor.c: 177:     }
  4066   00221A  0E02               	movlw	2
  4067   00221C  2422               	addwf	left_135@i^0,w,c
  4068   00221E  6E22               	movwf	left_135@i^0,c
  4069   002220  0E00               	movlw	0
  4070   002222  2023               	addwfc	(left_135@i+1)^0,w,c
  4071   002224  6E23               	movwf	(left_135@i+1)^0,c
  4072   002226  BE23               	btfsc	(left_135@i+1)^0,7,c
  4073   002228  EF1F  F011         	goto	u1331
  4074   00222C  5023               	movf	(left_135@i+1)^0,w,c
  4075   00222E  E109               	bnz	u1330
  4076   002230  0E32               	movlw	50
  4077   002232  5C22               	subwf	left_135@i^0,w,c
  4078   002234  A0D8               	btfss	status,0,c
  4079   002236  EF1F  F011         	goto	u1331
  4080   00223A  EF21  F011         	goto	u1330
  4081   00223E                     u1331:
  4082   00223E  EFF0  F010         	goto	l2488
  4083   002242                     u1330:
  4084   002242                     
  4085                           ;../dc_motor.c: 178:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4086   002242  0E13               	movlw	19
  4087   002244  6E21               	movwf	(??_left_135+1)^0,c
  4088   002246  0EAC               	movlw	172
  4089   002248  6E20               	movwf	??_left_135^0,c
  4090   00224A  0E2A               	movlw	42
  4091   00224C                     u1817:
  4092   00224C  2EE8               	decfsz	wreg,f,c
  4093   00224E  D7FE               	bra	u1817
  4094   002250  2E20               	decfsz	??_left_135^0,f,c
  4095   002252  D7FC               	bra	u1817
  4096   002254  2E21               	decfsz	(??_left_135+1)^0,f,c
  4097   002256  D7FA               	bra	u1817
  4098   002258  0012               	return		;funcret
  4099   00225A                     __end_of_left_135:
  4100                           	callstack 0
  4101                           
  4102 ;; *************** function _initUSART4 *****************
  4103 ;; Defined at:
  4104 ;;		line 5 in file "../serial.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;		None
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;		None
  4109 ;; Return value:  Size  Location     Type
  4110 ;;                  1    wreg      void 
  4111 ;; Registers used:
  4112 ;;		wreg, status,2
  4113 ;; Tracked objects:
  4114 ;;		On entry : 0/0
  4115 ;;		On exit  : 0/0
  4116 ;;		Unchanged: 0/0
  4117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4122 ;;Total ram usage:        0 bytes
  4123 ;; Hardware stack levels used: 1
  4124 ;; Hardware stack levels required when called: 2
  4125 ;; This function calls:
  4126 ;;		Nothing
  4127 ;; This function is called by:
  4128 ;;		_main
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text22
  4133   00281A                     __ptext22:
  4134                           	callstack 0
  4135   00281A                     _initUSART4:
  4136                           	callstack 28
  4137   00281A                     
  4138                           ;../serial.c: 9:     RC0PPS = 0x12;
  4139   00281A  0E12               	movlw	18
  4140   00281C  010E               	movlb	14	; () banked
  4141   00281E  6F62               	movwf	98,b	;volatile
  4142                           
  4143                           ;../serial.c: 10:     RX4PPS = 0x11;
  4144   002820  0E11               	movlw	17
  4145   002822  6F15               	movwf	21,b	;volatile
  4146   002824                     
  4147                           ; BSR set to: 14
  4148                           ;../serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  4149   002824  97E9               	bcf	233,3,b	;volatile
  4150   002826                     
  4151                           ; BSR set to: 14
  4152                           ;../serial.c: 13:     TX4STAbits.BRGH = 0;
  4153   002826  95E8               	bcf	232,2,b	;volatile
  4154                           
  4155                           ;../serial.c: 14:     SP4BRGL = 103;
  4156   002828  0E67               	movlw	103
  4157   00282A  6FE5               	movwf	229,b	;volatile
  4158                           
  4159                           ;../serial.c: 15:     SP4BRGH = 0;
  4160   00282C  0E00               	movlw	0
  4161   00282E  6FE6               	movwf	230,b	;volatile
  4162   002830                     
  4163                           ; BSR set to: 14
  4164                           ;../serial.c: 17:     RC4STAbits.CREN = 1;
  4165   002830  89E7               	bsf	231,4,b	;volatile
  4166   002832                     
  4167                           ; BSR set to: 14
  4168                           ;../serial.c: 18:     TX4STAbits.TXEN = 1;
  4169   002832  8BE8               	bsf	232,5,b	;volatile
  4170   002834                     
  4171                           ; BSR set to: 14
  4172                           ;../serial.c: 19:     RC4STAbits.SPEN = 1;
  4173   002834  8FE7               	bsf	231,7,b	;volatile
  4174   002836                     
  4175                           ; BSR set to: 14
  4176   002836  0012               	return		;funcret
  4177   002838                     __end_of_initUSART4:
  4178                           	callstack 0
  4179                           
  4180 ;; *************** function _initDCmotorsPWM *****************
  4181 ;; Defined at:
  4182 ;;		line 5 in file "../dc_motor.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;  PWMperiod       2    2[COMRAM] int 
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  1    wreg      void 
  4189 ;; Registers used:
  4190 ;;		wreg, status,2
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4196 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4199 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4200 ;;Total ram usage:        2 bytes
  4201 ;; Hardware stack levels used: 1
  4202 ;; Hardware stack levels required when called: 2
  4203 ;; This function calls:
  4204 ;;		Nothing
  4205 ;; This function is called by:
  4206 ;;		_main
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           	psect	text23
  4211   00266E                     __ptext23:
  4212                           	callstack 0
  4213   00266E                     _initDCmotorsPWM:
  4214                           	callstack 28
  4215   00266E                     
  4216                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  4217   00266E  9485               	bcf	133,2,c	;volatile
  4218                           
  4219                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  4220   002670  9885               	bcf	133,4,c	;volatile
  4221                           
  4222                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  4223   002672  9E83               	bcf	131,7,c	;volatile
  4224                           
  4225                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  4226   002674  9C87               	bcf	135,6,c	;volatile
  4227                           
  4228                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  4229   002676  947D               	bcf	125,2,c	;volatile
  4230                           
  4231                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  4232   002678  987D               	bcf	125,4,c	;volatile
  4233                           
  4234                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  4235   00267A  9E7B               	bcf	123,7,c	;volatile
  4236                           
  4237                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  4238   00267C  9C7F               	bcf	127,6,c	;volatile
  4239   00267E                     
  4240                           ;../dc_motor.c: 17:     T2CONbits.CKPS=0b0011;
  4241   00267E  50BD               	movf	189,w,c	;volatile
  4242   002680  0B8F               	andlw	-113
  4243   002682  0930               	iorlw	48
  4244   002684  6EBD               	movwf	189,c	;volatile
  4245                           
  4246                           ;../dc_motor.c: 18:     T2HLTbits.MODE=0b00000;
  4247   002686  0EE0               	movlw	-32
  4248   002688  16BE               	andwf	190,f,c	;volatile
  4249                           
  4250                           ;../dc_motor.c: 19:     T2CLKCONbits.CS=0b0001;
  4251   00268A  50BF               	movf	191,w,c	;volatile
  4252   00268C  0BF0               	andlw	-16
  4253   00268E  0901               	iorlw	1
  4254   002690  6EBF               	movwf	191,c	;volatile
  4255   002692                     
  4256                           ;../dc_motor.c: 23:     T2PR=PWMperiod;
  4257   002692  C003  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4258   002696                     
  4259                           ;../dc_motor.c: 24:     T2CONbits.ON=1;
  4260   002696  8EBD               	bsf	189,7,c	;volatile
  4261                           
  4262                           ;../dc_motor.c: 26:     RE2PPS=0x0A;
  4263   002698  0E0A               	movlw	10
  4264   00269A  010E               	movlb	14	; () banked
  4265   00269C  6F74               	movwf	116,b	;volatile
  4266                           
  4267                           ;../dc_motor.c: 27:     RC7PPS=0x0B;
  4268   00269E  0E0B               	movlw	11
  4269   0026A0  6F69               	movwf	105,b	;volatile
  4270                           
  4271                           ;../dc_motor.c: 29:     PWM6DCH=0;
  4272   0026A2  0E00               	movlw	0
  4273   0026A4  6EA3               	movwf	163,c	;volatile
  4274                           
  4275                           ;../dc_motor.c: 30:     PWM7DCH=0;
  4276   0026A6  0E00               	movlw	0
  4277   0026A8  6EA0               	movwf	160,c	;volatile
  4278   0026AA                     
  4279                           ; BSR set to: 14
  4280                           ;../dc_motor.c: 32:     PWM6CONbits.EN = 1;
  4281   0026AA  8EA4               	bsf	164,7,c	;volatile
  4282   0026AC                     
  4283                           ; BSR set to: 14
  4284                           ;../dc_motor.c: 33:     PWM7CONbits.EN = 1;
  4285   0026AC  8EA1               	bsf	161,7,c	;volatile
  4286   0026AE                     
  4287                           ; BSR set to: 14
  4288   0026AE  0012               	return		;funcret
  4289   0026B0                     __end_of_initDCmotorsPWM:
  4290                           	callstack 0
  4291                           
  4292 ;; *************** function _forward *****************
  4293 ;; Defined at:
  4294 ;;		line 77 in file "../dc_motor.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4297 ;;		 -> main@motorL(9), 
  4298 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4299 ;;		 -> main@motorR(9), 
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;  i               2   31[COMRAM] int 
  4302 ;; Return value:  Size  Location     Type
  4303 ;;                  1    wreg      void 
  4304 ;; Registers used:
  4305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4311 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4312 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4314 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4315 ;;Total ram usage:        6 bytes
  4316 ;; Hardware stack levels used: 1
  4317 ;; Hardware stack levels required when called: 4
  4318 ;; This function calls:
  4319 ;;		_setMotorPWM
  4320 ;; This function is called by:
  4321 ;;		_main
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           	psect	text24
  4326   0022E8                     __ptext24:
  4327                           	callstack 0
  4328   0022E8                     _forward:
  4329                           	callstack 26
  4330   0022E8                     
  4331                           ;../dc_motor.c: 77: void forward(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c
      +                          : 78: {;../dc_motor.c: 79:     mL->direction = 1;
  4332   0022E8  EE20 F001          	lfsr	2,1
  4333   0022EC  501C               	movf	forward@mL^0,w,c
  4334   0022EE  26D9               	addwf	fsr2l,f,c
  4335   0022F0  501D               	movf	(forward@mL+1)^0,w,c
  4336   0022F2  22DA               	addwfc	fsr2h,f,c
  4337   0022F4  0E01               	movlw	1
  4338   0022F6  6EDF               	movwf	indf2,c
  4339                           
  4340                           ;../dc_motor.c: 80:     mR->direction = 1;
  4341   0022F8  EE20 F001          	lfsr	2,1
  4342   0022FC  501E               	movf	forward@mR^0,w,c
  4343   0022FE  26D9               	addwf	fsr2l,f,c
  4344   002300  501F               	movf	(forward@mR+1)^0,w,c
  4345   002302  22DA               	addwfc	fsr2h,f,c
  4346   002304  0E01               	movlw	1
  4347   002306  6EDF               	movwf	indf2,c
  4348   002308                     
  4349                           ;../dc_motor.c: 81:     for (int i=0;i<31;i = i+2)
  4350   002308  0E00               	movlw	0
  4351   00230A  6E21               	movwf	(forward@i+1)^0,c
  4352   00230C  0E00               	movlw	0
  4353   00230E  6E20               	movwf	forward@i^0,c
  4354   002310                     l2676:
  4355                           
  4356                           ;../dc_motor.c: 82:     {;../dc_motor.c: 83:         mL->power = i;
  4357   002310  C01C  FFD9         	movff	forward@mL,fsr2l
  4358   002314  C01D  FFDA         	movff	forward@mL+1,fsr2h
  4359   002318  C020  FFDF         	movff	forward@i,indf2
  4360                           
  4361                           ;../dc_motor.c: 84:         mR->power = i;
  4362   00231C  C01E  FFD9         	movff	forward@mR,fsr2l
  4363   002320  C01F  FFDA         	movff	forward@mR+1,fsr2h
  4364   002324  C020  FFDF         	movff	forward@i,indf2
  4365   002328                     
  4366                           ;../dc_motor.c: 85:         setMotorPWM(mL);
  4367   002328  C01C  F011         	movff	forward@mL,setMotorPWM@m
  4368   00232C  C01D  F012         	movff	forward@mL+1,setMotorPWM@m+1
  4369   002330  ECC9  F009         	call	_setMotorPWM	;wreg free
  4370   002334                     
  4371                           ;../dc_motor.c: 86:         setMotorPWM(mR);
  4372   002334  C01E  F011         	movff	forward@mR,setMotorPWM@m
  4373   002338  C01F  F012         	movff	forward@mR+1,setMotorPWM@m+1
  4374   00233C  ECC9  F009         	call	_setMotorPWM	;wreg free
  4375   002340                     
  4376                           ;../dc_motor.c: 87:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4377   002340  0E6A               	movlw	106
  4378   002342                     u1827:
  4379   002342  2EE8               	decfsz	wreg,f,c
  4380   002344  D7FE               	bra	u1827
  4381   002346  D000               	nop2	
  4382   002348                     
  4383                           ;../dc_motor.c: 88:     }
  4384   002348  0E02               	movlw	2
  4385   00234A  2420               	addwf	forward@i^0,w,c
  4386   00234C  6E20               	movwf	forward@i^0,c
  4387   00234E  0E00               	movlw	0
  4388   002350  2021               	addwfc	(forward@i+1)^0,w,c
  4389   002352  6E21               	movwf	(forward@i+1)^0,c
  4390   002354  BE21               	btfsc	(forward@i+1)^0,7,c
  4391   002356  EFB6  F011         	goto	u1451
  4392   00235A  5021               	movf	(forward@i+1)^0,w,c
  4393   00235C  E109               	bnz	u1450
  4394   00235E  0E1F               	movlw	31
  4395   002360  5C20               	subwf	forward@i^0,w,c
  4396   002362  A0D8               	btfss	status,0,c
  4397   002364  EFB6  F011         	goto	u1451
  4398   002368  EFB8  F011         	goto	u1450
  4399   00236C                     u1451:
  4400   00236C  EF88  F011         	goto	l2676
  4401   002370                     u1450:
  4402   002370  0012               	return		;funcret
  4403   002372                     __end_of_forward:
  4404                           	callstack 0
  4405                           
  4406 ;; *************** function _setMotorPWM *****************
  4407 ;; Defined at:
  4408 ;;		line 38 in file "../dc_motor.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;  m               2   16[COMRAM] PTR struct DC_motor
  4411 ;;		 -> main@motorR(9), main@motorL(9), 
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;  PWMduty         2   25[COMRAM] int 
  4414 ;; Return value:  Size  Location     Type
  4415 ;;                  1    wreg      void 
  4416 ;; Registers used:
  4417 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4418 ;; Tracked objects:
  4419 ;;		On entry : 0/0
  4420 ;;		On exit  : 0/0
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4423 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4424 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4425 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4426 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4427 ;;Total ram usage:       11 bytes
  4428 ;; Hardware stack levels used: 1
  4429 ;; Hardware stack levels required when called: 3
  4430 ;; This function calls:
  4431 ;;		___awdiv
  4432 ;;		___wmul
  4433 ;; This function is called by:
  4434 ;;		_main
  4435 ;;		_stop
  4436 ;;		_forward
  4437 ;;		_reverse
  4438 ;;		_right_90
  4439 ;;		_left_90
  4440 ;;		_spin_180
  4441 ;;		_right_135
  4442 ;;		_left_135
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           	psect	text25
  4447   001392                     __ptext25:
  4448                           	callstack 0
  4449   001392                     _setMotorPWM:
  4450                           	callstack 26
  4451   001392                     
  4452                           ;../dc_motor.c: 38: void setMotorPWM(struct DC_motor *m);../dc_motor.c: 39: {;../dc_moto
      +                          r.c: 40:  int PWMduty;;../dc_motor.c: 42:  if (m->direction){
  4453   001392  EE20 F001          	lfsr	2,1
  4454   001396  5011               	movf	setMotorPWM@m^0,w,c
  4455   001398  26D9               	addwf	fsr2l,f,c
  4456   00139A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4457   00139C  22DA               	addwfc	fsr2h,f,c
  4458   00139E  50DF               	movf	indf2,w,c
  4459   0013A0  B4D8               	btfsc	status,2,c
  4460   0013A2  EFD5  F009         	goto	u1211
  4461   0013A6  EFD7  F009         	goto	u1210
  4462   0013AA                     u1211:
  4463   0013AA  EF08  F00A         	goto	l2284
  4464   0013AE                     u1210:
  4465   0013AE                     
  4466                           ;../dc_motor.c: 44:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  4467   0013AE  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  4468   0013B2  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4469   0013B6  50DF               	movf	indf2,w,c
  4470   0013B8  6E13               	movwf	??_setMotorPWM^0,c
  4471   0013BA  5013               	movf	??_setMotorPWM^0,w,c
  4472   0013BC  6E03               	movwf	___wmul@multiplier^0,c
  4473   0013BE  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4474   0013C0  EE20 F007          	lfsr	2,7
  4475   0013C4  5011               	movf	setMotorPWM@m^0,w,c
  4476   0013C6  26D9               	addwf	fsr2l,f,c
  4477   0013C8  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4478   0013CA  22DA               	addwfc	fsr2h,f,c
  4479   0013CC  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4480   0013D0  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4481   0013D4  ECDA  F013         	call	___wmul	;wreg free
  4482   0013D8  C003  F009         	movff	?___wmul,___awdiv@dividend
  4483   0013DC  C004  F00A         	movff	?___wmul+1,___awdiv@dividend+1
  4484   0013E0  0E00               	movlw	0
  4485   0013E2  6E0C               	movwf	(___awdiv@divisor+1)^0,c
  4486   0013E4  0E64               	movlw	100
  4487   0013E6  6E0B               	movwf	___awdiv@divisor^0,c
  4488   0013E8  ECD2  F00D         	call	___awdiv	;wreg free
  4489   0013EC  EE20 F007          	lfsr	2,7
  4490   0013F0  5011               	movf	setMotorPWM@m^0,w,c
  4491   0013F2  26D9               	addwf	fsr2l,f,c
  4492   0013F4  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4493   0013F6  22DA               	addwfc	fsr2h,f,c
  4494   0013F8  CFDE F014          	movff	postinc2,??_setMotorPWM+1
  4495   0013FC  CFDD F015          	movff	postdec2,??_setMotorPWM+2
  4496   001400  5009               	movf	?___awdiv^0,w,c
  4497   001402  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  4498   001404  6E1A               	movwf	setMotorPWM@PWMduty^0,c
  4499   001406  500A               	movf	(?___awdiv+1)^0,w,c
  4500   001408  5815               	subwfb	(??_setMotorPWM+2)^0,w,c
  4501   00140A  6E1B               	movwf	(setMotorPWM@PWMduty+1)^0,c
  4502                           
  4503                           ;../dc_motor.c: 45:  }
  4504   00140C  EF2B  F00A         	goto	l2286
  4505   001410                     l2284:
  4506                           
  4507                           ;../dc_motor.c: 48:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  4508   001410  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  4509   001414  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4510   001418  50DF               	movf	indf2,w,c
  4511   00141A  6E13               	movwf	??_setMotorPWM^0,c
  4512   00141C  5013               	movf	??_setMotorPWM^0,w,c
  4513   00141E  6E03               	movwf	___wmul@multiplier^0,c
  4514   001420  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4515   001422  EE20 F007          	lfsr	2,7
  4516   001426  5011               	movf	setMotorPWM@m^0,w,c
  4517   001428  26D9               	addwf	fsr2l,f,c
  4518   00142A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4519   00142C  22DA               	addwfc	fsr2h,f,c
  4520   00142E  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4521   001432  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4522   001436  ECDA  F013         	call	___wmul	;wreg free
  4523   00143A  C003  F009         	movff	?___wmul,___awdiv@dividend
  4524   00143E  C004  F00A         	movff	?___wmul+1,___awdiv@dividend+1
  4525   001442  0E00               	movlw	0
  4526   001444  6E0C               	movwf	(___awdiv@divisor+1)^0,c
  4527   001446  0E64               	movlw	100
  4528   001448  6E0B               	movwf	___awdiv@divisor^0,c
  4529   00144A  ECD2  F00D         	call	___awdiv	;wreg free
  4530   00144E  C009  F01A         	movff	?___awdiv,setMotorPWM@PWMduty
  4531   001452  C00A  F01B         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4532   001456                     l2286:
  4533                           
  4534                           ;../dc_motor.c: 51:  *(m->dutyHighByte) = PWMduty;
  4535   001456  EE20 F002          	lfsr	2,2
  4536   00145A  5011               	movf	setMotorPWM@m^0,w,c
  4537   00145C  26D9               	addwf	fsr2l,f,c
  4538   00145E  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4539   001460  22DA               	addwfc	fsr2h,f,c
  4540   001462  CFDE F013          	movff	postinc2,??_setMotorPWM
  4541   001466  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4542   00146A  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4543   00146E  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4544   001472  C01A  FFDF         	movff	setMotorPWM@PWMduty,indf2
  4545   001476                     
  4546                           ;../dc_motor.c: 53:  if (m->direction){
  4547   001476  EE20 F001          	lfsr	2,1
  4548   00147A  5011               	movf	setMotorPWM@m^0,w,c
  4549   00147C  26D9               	addwf	fsr2l,f,c
  4550   00147E  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4551   001480  22DA               	addwfc	fsr2h,f,c
  4552   001482  50DF               	movf	indf2,w,c
  4553   001484  B4D8               	btfsc	status,2,c
  4554   001486  EF47  F00A         	goto	u1221
  4555   00148A  EF49  F00A         	goto	u1220
  4556   00148E                     u1221:
  4557   00148E  EF7E  F00A         	goto	l2292
  4558   001492                     u1220:
  4559   001492                     
  4560                           ;../dc_motor.c: 54:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  4561   001492  EE20 F004          	lfsr	2,4
  4562   001496  5011               	movf	setMotorPWM@m^0,w,c
  4563   001498  26D9               	addwf	fsr2l,f,c
  4564   00149A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4565   00149C  22DA               	addwfc	fsr2h,f,c
  4566   00149E  CFDE F013          	movff	postinc2,??_setMotorPWM
  4567   0014A2  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4568   0014A6  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4569   0014AA  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4570   0014AE  EE10 F004          	lfsr	1,4
  4571   0014B2  5011               	movf	setMotorPWM@m^0,w,c
  4572   0014B4  26E1               	addwf	fsr1l,f,c
  4573   0014B6  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4574   0014B8  22E2               	addwfc	fsr1h,f,c
  4575   0014BA  CFE6 F015          	movff	postinc1,??_setMotorPWM+2
  4576   0014BE  CFE5 F016          	movff	postdec1,??_setMotorPWM+3
  4577   0014C2  C015  FFE1         	movff	??_setMotorPWM+2,fsr1l
  4578   0014C6  C016  FFE2         	movff	??_setMotorPWM+3,fsr1h
  4579   0014CA  50E7               	movf	indf1,w,c
  4580   0014CC  6E17               	movwf	(??_setMotorPWM+4)^0,c
  4581   0014CE  EE10 F006          	lfsr	1,6
  4582   0014D2  5011               	movf	setMotorPWM@m^0,w,c
  4583   0014D4  26E1               	addwf	fsr1l,f,c
  4584   0014D6  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4585   0014D8  22E2               	addwfc	fsr1h,f,c
  4586   0014DA  50E7               	movf	indf1,w,c
  4587   0014DC  6E18               	movwf	(??_setMotorPWM+5)^0,c
  4588   0014DE  0E01               	movlw	1
  4589   0014E0  6E19               	movwf	(??_setMotorPWM+6)^0,c
  4590   0014E2  2A18               	incf	(??_setMotorPWM+5)^0,f,c
  4591   0014E4  EF76  F00A         	goto	u1234
  4592   0014E8                     u1235:
  4593   0014E8  90D8               	bcf	status,0,c
  4594   0014EA  3619               	rlcf	(??_setMotorPWM+6)^0,f,c
  4595   0014EC                     u1234:
  4596   0014EC  2E18               	decfsz	(??_setMotorPWM+5)^0,f,c
  4597   0014EE  EF74  F00A         	goto	u1235
  4598   0014F2  5019               	movf	(??_setMotorPWM+6)^0,w,c
  4599   0014F4  1017               	iorwf	(??_setMotorPWM+4)^0,w,c
  4600   0014F6  6EDF               	movwf	indf2,c
  4601                           
  4602                           ;../dc_motor.c: 55:  } else {
  4603   0014F8  EFB2  F00A         	goto	l247
  4604   0014FC                     l2292:
  4605                           
  4606                           ;../dc_motor.c: 56:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  4607   0014FC  EE20 F004          	lfsr	2,4
  4608   001500  5011               	movf	setMotorPWM@m^0,w,c
  4609   001502  26D9               	addwf	fsr2l,f,c
  4610   001504  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4611   001506  22DA               	addwfc	fsr2h,f,c
  4612   001508  CFDE F013          	movff	postinc2,??_setMotorPWM
  4613   00150C  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4614   001510  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4615   001514  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4616   001518  EE10 F004          	lfsr	1,4
  4617   00151C  5011               	movf	setMotorPWM@m^0,w,c
  4618   00151E  26E1               	addwf	fsr1l,f,c
  4619   001520  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4620   001522  22E2               	addwfc	fsr1h,f,c
  4621   001524  CFE6 F015          	movff	postinc1,??_setMotorPWM+2
  4622   001528  CFE5 F016          	movff	postdec1,??_setMotorPWM+3
  4623   00152C  C015  FFE1         	movff	??_setMotorPWM+2,fsr1l
  4624   001530  C016  FFE2         	movff	??_setMotorPWM+3,fsr1h
  4625   001534  50E7               	movf	indf1,w,c
  4626   001536  6E17               	movwf	(??_setMotorPWM+4)^0,c
  4627   001538  EE10 F006          	lfsr	1,6
  4628   00153C  5011               	movf	setMotorPWM@m^0,w,c
  4629   00153E  26E1               	addwf	fsr1l,f,c
  4630   001540  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4631   001542  22E2               	addwfc	fsr1h,f,c
  4632   001544  50E7               	movf	indf1,w,c
  4633   001546  6E18               	movwf	(??_setMotorPWM+5)^0,c
  4634   001548  0E01               	movlw	1
  4635   00154A  6E19               	movwf	(??_setMotorPWM+6)^0,c
  4636   00154C  2A18               	incf	(??_setMotorPWM+5)^0,f,c
  4637   00154E  EFAB  F00A         	goto	u1244
  4638   001552                     u1245:
  4639   001552  90D8               	bcf	status,0,c
  4640   001554  3619               	rlcf	(??_setMotorPWM+6)^0,f,c
  4641   001556                     u1244:
  4642   001556  2E18               	decfsz	(??_setMotorPWM+5)^0,f,c
  4643   001558  EFA9  F00A         	goto	u1245
  4644   00155C  5019               	movf	(??_setMotorPWM+6)^0,w,c
  4645   00155E  0AFF               	xorlw	255
  4646   001560  1417               	andwf	(??_setMotorPWM+4)^0,w,c
  4647   001562  6EDF               	movwf	indf2,c
  4648   001564                     l247:
  4649   001564  0012               	return		;funcret
  4650   001566                     __end_of_setMotorPWM:
  4651                           	callstack 0
  4652                           
  4653 ;; *************** function ___wmul *****************
  4654 ;; Defined at:
  4655 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;  multiplier      2    2[COMRAM] unsigned int 
  4658 ;;  multiplicand    2    4[COMRAM] unsigned int 
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;  product         2    6[COMRAM] unsigned int 
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  2    2[COMRAM] unsigned int 
  4663 ;; Registers used:
  4664 ;;		wreg, status,2, status,0, prodl, prodh
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4670 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4673 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4674 ;;Total ram usage:        6 bytes
  4675 ;; Hardware stack levels used: 1
  4676 ;; Hardware stack levels required when called: 2
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_setMotorPWM
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           	psect	text26
  4685   0027B4                     __ptext26:
  4686                           	callstack 0
  4687   0027B4                     ___wmul:
  4688                           	callstack 26
  4689   0027B4  5003               	movf	___wmul@multiplier^0,w,c
  4690   0027B6  0205               	mulwf	___wmul@multiplicand^0,c
  4691   0027B8  CFF3 F007          	movff	prodl,___wmul@product
  4692   0027BC  CFF4 F008          	movff	prodh,___wmul@product+1
  4693   0027C0  5003               	movf	___wmul@multiplier^0,w,c
  4694   0027C2  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  4695   0027C4  50F3               	movf	243,w,c
  4696   0027C6  2608               	addwf	(___wmul@product+1)^0,f,c
  4697   0027C8  5004               	movf	(___wmul@multiplier+1)^0,w,c
  4698   0027CA  0205               	mulwf	___wmul@multiplicand^0,c
  4699   0027CC  50F3               	movf	243,w,c
  4700   0027CE  2608               	addwf	(___wmul@product+1)^0,f,c
  4701   0027D0  C007  F003         	movff	___wmul@product,?___wmul
  4702   0027D4  C008  F004         	movff	___wmul@product+1,?___wmul+1
  4703   0027D8  0012               	return		;funcret
  4704   0027DA                     __end_of___wmul:
  4705                           	callstack 0
  4706                           
  4707 ;; *************** function ___awdiv *****************
  4708 ;; Defined at:
  4709 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;  dividend        2    8[COMRAM] int 
  4712 ;;  divisor         2   10[COMRAM] int 
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;  quotient        2   14[COMRAM] int 
  4715 ;;  sign            1   13[COMRAM] unsigned char 
  4716 ;;  counter         1   12[COMRAM] unsigned char 
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  2    8[COMRAM] int 
  4719 ;; Registers used:
  4720 ;;		wreg, status,2, status,0
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4726 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4727 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4729 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4730 ;;Total ram usage:        8 bytes
  4731 ;; Hardware stack levels used: 1
  4732 ;; Hardware stack levels required when called: 2
  4733 ;; This function calls:
  4734 ;;		Nothing
  4735 ;; This function is called by:
  4736 ;;		_setMotorPWM
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           	psect	text27
  4741   001BA4                     __ptext27:
  4742                           	callstack 0
  4743   001BA4                     ___awdiv:
  4744                           	callstack 26
  4745   001BA4  0E00               	movlw	0
  4746   001BA6  6E0E               	movwf	___awdiv@sign^0,c
  4747   001BA8  BE0C               	btfsc	(___awdiv@divisor+1)^0,7,c
  4748   001BAA  EFDB  F00D         	goto	u1030
  4749   001BAE  EFD9  F00D         	goto	u1031
  4750   001BB2                     u1031:
  4751   001BB2  EFE1  F00D         	goto	l2162
  4752   001BB6                     u1030:
  4753   001BB6  6C0B               	negf	___awdiv@divisor^0,c
  4754   001BB8  1E0C               	comf	(___awdiv@divisor+1)^0,f,c
  4755   001BBA  B0D8               	btfsc	status,0,c
  4756   001BBC  2A0C               	incf	(___awdiv@divisor+1)^0,f,c
  4757   001BBE  0E01               	movlw	1
  4758   001BC0  6E0E               	movwf	___awdiv@sign^0,c
  4759   001BC2                     l2162:
  4760   001BC2  BE0A               	btfsc	(___awdiv@dividend+1)^0,7,c
  4761   001BC4  EFE8  F00D         	goto	u1040
  4762   001BC8  EFE6  F00D         	goto	u1041
  4763   001BCC                     u1041:
  4764   001BCC  EFEE  F00D         	goto	l2168
  4765   001BD0                     u1040:
  4766   001BD0  6C09               	negf	___awdiv@dividend^0,c
  4767   001BD2  1E0A               	comf	(___awdiv@dividend+1)^0,f,c
  4768   001BD4  B0D8               	btfsc	status,0,c
  4769   001BD6  2A0A               	incf	(___awdiv@dividend+1)^0,f,c
  4770   001BD8  0E01               	movlw	1
  4771   001BDA  1A0E               	xorwf	___awdiv@sign^0,f,c
  4772   001BDC                     l2168:
  4773   001BDC  0E00               	movlw	0
  4774   001BDE  6E10               	movwf	(___awdiv@quotient+1)^0,c
  4775   001BE0  0E00               	movlw	0
  4776   001BE2  6E0F               	movwf	___awdiv@quotient^0,c
  4777   001BE4  500B               	movf	___awdiv@divisor^0,w,c
  4778   001BE6  100C               	iorwf	(___awdiv@divisor+1)^0,w,c
  4779   001BE8  B4D8               	btfsc	status,2,c
  4780   001BEA  EFF9  F00D         	goto	u1051
  4781   001BEE  EFFB  F00D         	goto	u1050
  4782   001BF2                     u1051:
  4783   001BF2  EF23  F00E         	goto	l2190
  4784   001BF6                     u1050:
  4785   001BF6  0E01               	movlw	1
  4786   001BF8  6E0D               	movwf	___awdiv@counter^0,c
  4787   001BFA  EF03  F00E         	goto	l2176
  4788   001BFE                     l2174:
  4789   001BFE  90D8               	bcf	status,0,c
  4790   001C00  360B               	rlcf	___awdiv@divisor^0,f,c
  4791   001C02  360C               	rlcf	(___awdiv@divisor+1)^0,f,c
  4792   001C04  2A0D               	incf	___awdiv@counter^0,f,c
  4793   001C06                     l2176:
  4794   001C06  AE0C               	btfss	(___awdiv@divisor+1)^0,7,c
  4795   001C08  EF08  F00E         	goto	u1061
  4796   001C0C  EF0A  F00E         	goto	u1060
  4797   001C10                     u1061:
  4798   001C10  EFFF  F00D         	goto	l2174
  4799   001C14                     u1060:
  4800   001C14                     l2178:
  4801   001C14  90D8               	bcf	status,0,c
  4802   001C16  360F               	rlcf	___awdiv@quotient^0,f,c
  4803   001C18  3610               	rlcf	(___awdiv@quotient+1)^0,f,c
  4804   001C1A  500B               	movf	___awdiv@divisor^0,w,c
  4805   001C1C  5C09               	subwf	___awdiv@dividend^0,w,c
  4806   001C1E  500C               	movf	(___awdiv@divisor+1)^0,w,c
  4807   001C20  580A               	subwfb	(___awdiv@dividend+1)^0,w,c
  4808   001C22  A0D8               	btfss	status,0,c
  4809   001C24  EF16  F00E         	goto	u1071
  4810   001C28  EF18  F00E         	goto	u1070
  4811   001C2C                     u1071:
  4812   001C2C  EF1D  F00E         	goto	l2186
  4813   001C30                     u1070:
  4814   001C30  500B               	movf	___awdiv@divisor^0,w,c
  4815   001C32  5E09               	subwf	___awdiv@dividend^0,f,c
  4816   001C34  500C               	movf	(___awdiv@divisor+1)^0,w,c
  4817   001C36  5A0A               	subwfb	(___awdiv@dividend+1)^0,f,c
  4818   001C38  800F               	bsf	___awdiv@quotient^0,0,c
  4819   001C3A                     l2186:
  4820   001C3A  90D8               	bcf	status,0,c
  4821   001C3C  320C               	rrcf	(___awdiv@divisor+1)^0,f,c
  4822   001C3E  320B               	rrcf	___awdiv@divisor^0,f,c
  4823   001C40  2E0D               	decfsz	___awdiv@counter^0,f,c
  4824   001C42  EF0A  F00E         	goto	l2178
  4825   001C46                     l2190:
  4826   001C46  500E               	movf	___awdiv@sign^0,w,c
  4827   001C48  B4D8               	btfsc	status,2,c
  4828   001C4A  EF29  F00E         	goto	u1081
  4829   001C4E  EF2B  F00E         	goto	u1080
  4830   001C52                     u1081:
  4831   001C52  EF2F  F00E         	goto	l2194
  4832   001C56                     u1080:
  4833   001C56  6C0F               	negf	___awdiv@quotient^0,c
  4834   001C58  1E10               	comf	(___awdiv@quotient+1)^0,f,c
  4835   001C5A  B0D8               	btfsc	status,0,c
  4836   001C5C  2A10               	incf	(___awdiv@quotient+1)^0,f,c
  4837   001C5E                     l2194:
  4838   001C5E  C00F  F009         	movff	___awdiv@quotient,?___awdiv
  4839   001C62  C010  F00A         	movff	___awdiv@quotient+1,?___awdiv+1
  4840   001C66  0012               	return		;funcret
  4841   001C68                     __end_of___awdiv:
  4842                           	callstack 0
  4843                           
  4844 ;; *************** function _color_read *****************
  4845 ;; Defined at:
  4846 ;;		line 110 in file "../color.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;  rgb             2   13[COMRAM] PTR struct RGB_val
  4849 ;;		 -> main@RGB_recorded(8), main@RGB_calibrated(8), 
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;		None
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  1    wreg      void 
  4854 ;; Registers used:
  4855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4861 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4863 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4864 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4865 ;;Total ram usage:        4 bytes
  4866 ;; Hardware stack levels used: 1
  4867 ;; Hardware stack levels required when called: 5
  4868 ;; This function calls:
  4869 ;;		_color_read_Blue
  4870 ;;		_color_read_Green
  4871 ;;		_color_read_Luminosity
  4872 ;;		_color_read_Red
  4873 ;; This function is called by:
  4874 ;;		_main
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           	psect	text28
  4879   001DE4                     __ptext28:
  4880                           	callstack 0
  4881   001DE4                     _color_read:
  4882                           	callstack 25
  4883   001DE4                     
  4884                           ;../color.c: 110: void color_read(struct RGB_val *rgb);../color.c: 111: {;../color.c: 11
      +                          2:     rgb->L = color_read_Luminosity();
  4885   001DE4  EC9D  F012         	call	_color_read_Luminosity	;wreg free
  4886   001DE8  C00E  FFD9         	movff	color_read@rgb,fsr2l
  4887   001DEC  C00F  FFDA         	movff	color_read@rgb+1,fsr2h
  4888   001DF0  C007  FFDE         	movff	?_color_read_Luminosity,postinc2
  4889   001DF4  C008  FFDD         	movff	?_color_read_Luminosity+1,postdec2
  4890   001DF8                     
  4891                           ;../color.c: 113:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4892   001DF8  0E09               	movlw	9
  4893   001DFA  6E11               	movwf	(??_color_read+1)^0,c
  4894   001DFC  0E1E               	movlw	30
  4895   001DFE  6E10               	movwf	??_color_read^0,c
  4896   001E00  0EE4               	movlw	228
  4897   001E02                     u1837:
  4898   001E02  2EE8               	decfsz	wreg,f,c
  4899   001E04  D7FE               	bra	u1837
  4900   001E06  2E10               	decfsz	??_color_read^0,f,c
  4901   001E08  D7FC               	bra	u1837
  4902   001E0A  2E11               	decfsz	(??_color_read+1)^0,f,c
  4903   001E0C  D7FA               	bra	u1837
  4904   001E0E  D000               	nop2	
  4905   001E10                     
  4906                           ;../color.c: 114:     rgb->R = color_read_Red();
  4907   001E10  EC75  F012         	call	_color_read_Red	;wreg free
  4908   001E14  EE20 F002          	lfsr	2,2
  4909   001E18  500E               	movf	color_read@rgb^0,w,c
  4910   001E1A  26D9               	addwf	fsr2l,f,c
  4911   001E1C  500F               	movf	(color_read@rgb+1)^0,w,c
  4912   001E1E  22DA               	addwfc	fsr2h,f,c
  4913   001E20  C007  FFDE         	movff	?_color_read_Red,postinc2
  4914   001E24  C008  FFDD         	movff	?_color_read_Red+1,postdec2
  4915                           
  4916                           ;../color.c: 115:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4917   001E28  0E09               	movlw	9
  4918   001E2A  6E11               	movwf	(??_color_read+1)^0,c
  4919   001E2C  0E1E               	movlw	30
  4920   001E2E  6E10               	movwf	??_color_read^0,c
  4921   001E30  0EE4               	movlw	228
  4922   001E32                     u1847:
  4923   001E32  2EE8               	decfsz	wreg,f,c
  4924   001E34  D7FE               	bra	u1847
  4925   001E36  2E10               	decfsz	??_color_read^0,f,c
  4926   001E38  D7FC               	bra	u1847
  4927   001E3A  2E11               	decfsz	(??_color_read+1)^0,f,c
  4928   001E3C  D7FA               	bra	u1847
  4929   001E3E  D000               	nop2	
  4930   001E40                     
  4931                           ;../color.c: 116:     rgb->G = color_read_Green();
  4932   001E40  ECC5  F012         	call	_color_read_Green	;wreg free
  4933   001E44  EE20 F004          	lfsr	2,4
  4934   001E48  500E               	movf	color_read@rgb^0,w,c
  4935   001E4A  26D9               	addwf	fsr2l,f,c
  4936   001E4C  500F               	movf	(color_read@rgb+1)^0,w,c
  4937   001E4E  22DA               	addwfc	fsr2h,f,c
  4938   001E50  C007  FFDE         	movff	?_color_read_Green,postinc2
  4939   001E54  C008  FFDD         	movff	?_color_read_Green+1,postdec2
  4940   001E58                     
  4941                           ;../color.c: 117:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4942   001E58  0E09               	movlw	9
  4943   001E5A  6E11               	movwf	(??_color_read+1)^0,c
  4944   001E5C  0E1E               	movlw	30
  4945   001E5E  6E10               	movwf	??_color_read^0,c
  4946   001E60  0EE4               	movlw	228
  4947   001E62                     u1857:
  4948   001E62  2EE8               	decfsz	wreg,f,c
  4949   001E64  D7FE               	bra	u1857
  4950   001E66  2E10               	decfsz	??_color_read^0,f,c
  4951   001E68  D7FC               	bra	u1857
  4952   001E6A  2E11               	decfsz	(??_color_read+1)^0,f,c
  4953   001E6C  D7FA               	bra	u1857
  4954   001E6E  D000               	nop2	
  4955                           
  4956                           ;../color.c: 118:     rgb->B = color_read_Blue();
  4957   001E70  ECED  F012         	call	_color_read_Blue	;wreg free
  4958   001E74  EE20 F006          	lfsr	2,6
  4959   001E78  500E               	movf	color_read@rgb^0,w,c
  4960   001E7A  26D9               	addwf	fsr2l,f,c
  4961   001E7C  500F               	movf	(color_read@rgb+1)^0,w,c
  4962   001E7E  22DA               	addwfc	fsr2h,f,c
  4963   001E80  C007  FFDE         	movff	?_color_read_Blue,postinc2
  4964   001E84  C008  FFDD         	movff	?_color_read_Blue+1,postdec2
  4965   001E88  0012               	return		;funcret
  4966   001E8A                     __end_of_color_read:
  4967                           	callstack 0
  4968                           
  4969 ;; *************** function _color_read_Red *****************
  4970 ;; Defined at:
  4971 ;;		line 68 in file "../color.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;		None
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  tmp             2   11[COMRAM] unsigned int 
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  2    6[COMRAM] unsigned int 
  4978 ;; Registers used:
  4979 ;;		wreg, status,2, status,0, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4985 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4986 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4987 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4988 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4989 ;;Total ram usage:        7 bytes
  4990 ;; Hardware stack levels used: 1
  4991 ;; Hardware stack levels required when called: 4
  4992 ;; This function calls:
  4993 ;;		_I2C_2_Master_Read
  4994 ;;		_I2C_2_Master_RepStart
  4995 ;;		_I2C_2_Master_Start
  4996 ;;		_I2C_2_Master_Stop
  4997 ;;		_I2C_2_Master_Write
  4998 ;; This function is called by:
  4999 ;;		_color_read
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           	psect	text29
  5004   0024EA                     __ptext29:
  5005                           	callstack 0
  5006   0024EA                     _color_read_Red:
  5007                           	callstack 25
  5008   0024EA                     
  5009                           ;../color.c: 70:  unsigned int tmp;;../color.c: 71:  I2C_2_Master_Start();
  5010   0024EA  EC4B  F014         	call	_I2C_2_Master_Start	;wreg free
  5011                           
  5012                           ;../color.c: 72:  I2C_2_Master_Write(0x52 | 0x00);
  5013   0024EE  0E52               	movlw	82
  5014   0024F0  EC35  F014         	call	_I2C_2_Master_Write
  5015                           
  5016                           ;../color.c: 73:  I2C_2_Master_Write(0xA0 | 0x16);
  5017   0024F4  0EB6               	movlw	182
  5018   0024F6  EC35  F014         	call	_I2C_2_Master_Write
  5019                           
  5020                           ;../color.c: 74:  I2C_2_Master_RepStart();
  5021   0024FA  EC41  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5022                           
  5023                           ;../color.c: 75:  I2C_2_Master_Write(0x52 | 0x01);
  5024   0024FE  0E53               	movlw	83
  5025   002500  EC35  F014         	call	_I2C_2_Master_Write
  5026                           
  5027                           ;../color.c: 76:  tmp=I2C_2_Master_Read(1);
  5028   002504  0E01               	movlw	1
  5029   002506  EC58  F013         	call	_I2C_2_Master_Read
  5030   00250A  6E09               	movwf	??_color_read_Red^0,c
  5031   00250C  5009               	movf	??_color_read_Red^0,w,c
  5032   00250E  6E0C               	movwf	color_read_Red@tmp^0,c
  5033   002510  6A0D               	clrf	(color_read_Red@tmp+1)^0,c
  5034                           
  5035                           ;../color.c: 77:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5036   002512  0E00               	movlw	0
  5037   002514  EC58  F013         	call	_I2C_2_Master_Read
  5038   002518  6E09               	movwf	??_color_read_Red^0,c
  5039   00251A  5009               	movf	??_color_read_Red^0,w,c
  5040   00251C  6E0B               	movwf	(??_color_read_Red+2)^0,c
  5041   00251E  6A0A               	clrf	(??_color_read_Red+1)^0,c
  5042   002520  500C               	movf	color_read_Red@tmp^0,w,c
  5043   002522  100A               	iorwf	(??_color_read_Red+1)^0,w,c
  5044   002524  6E0C               	movwf	color_read_Red@tmp^0,c
  5045   002526  500D               	movf	(color_read_Red@tmp+1)^0,w,c
  5046   002528  100B               	iorwf	(??_color_read_Red+2)^0,w,c
  5047   00252A  6E0D               	movwf	(color_read_Red@tmp+1)^0,c
  5048                           
  5049                           ;../color.c: 78:  I2C_2_Master_Stop();
  5050   00252C  EC46  F014         	call	_I2C_2_Master_Stop	;wreg free
  5051   002530                     
  5052                           ;../color.c: 79:  return tmp;
  5053   002530  C00C  F007         	movff	color_read_Red@tmp,?_color_read_Red
  5054   002534  C00D  F008         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5055   002538  0012               	return		;funcret
  5056   00253A                     __end_of_color_read_Red:
  5057                           	callstack 0
  5058                           
  5059 ;; *************** function _color_read_Luminosity *****************
  5060 ;; Defined at:
  5061 ;;		line 54 in file "../color.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;		None
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;  tmp             2   11[COMRAM] unsigned int 
  5066 ;; Return value:  Size  Location     Type
  5067 ;;                  2    6[COMRAM] unsigned int 
  5068 ;; Registers used:
  5069 ;;		wreg, status,2, status,0, cstack
  5070 ;; Tracked objects:
  5071 ;;		On entry : 0/0
  5072 ;;		On exit  : 0/0
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5075 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5076 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5077 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5078 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5079 ;;Total ram usage:        7 bytes
  5080 ;; Hardware stack levels used: 1
  5081 ;; Hardware stack levels required when called: 4
  5082 ;; This function calls:
  5083 ;;		_I2C_2_Master_Read
  5084 ;;		_I2C_2_Master_RepStart
  5085 ;;		_I2C_2_Master_Start
  5086 ;;		_I2C_2_Master_Stop
  5087 ;;		_I2C_2_Master_Write
  5088 ;; This function is called by:
  5089 ;;		_color_read
  5090 ;; This function uses a non-reentrant model
  5091 ;;
  5092                           
  5093                           	psect	text30
  5094   00253A                     __ptext30:
  5095                           	callstack 0
  5096   00253A                     _color_read_Luminosity:
  5097                           	callstack 25
  5098   00253A                     
  5099                           ;../color.c: 56:  unsigned int tmp;;../color.c: 57:  I2C_2_Master_Start();
  5100   00253A  EC4B  F014         	call	_I2C_2_Master_Start	;wreg free
  5101                           
  5102                           ;../color.c: 58:  I2C_2_Master_Write(0x52 | 0x00);
  5103   00253E  0E52               	movlw	82
  5104   002540  EC35  F014         	call	_I2C_2_Master_Write
  5105                           
  5106                           ;../color.c: 59:  I2C_2_Master_Write(0xA0 | 0x14);
  5107   002544  0EB4               	movlw	180
  5108   002546  EC35  F014         	call	_I2C_2_Master_Write
  5109                           
  5110                           ;../color.c: 60:  I2C_2_Master_RepStart();
  5111   00254A  EC41  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5112                           
  5113                           ;../color.c: 61:  I2C_2_Master_Write(0x52 | 0x01);
  5114   00254E  0E53               	movlw	83
  5115   002550  EC35  F014         	call	_I2C_2_Master_Write
  5116                           
  5117                           ;../color.c: 62:  tmp=I2C_2_Master_Read(1);
  5118   002554  0E01               	movlw	1
  5119   002556  EC58  F013         	call	_I2C_2_Master_Read
  5120   00255A  6E09               	movwf	??_color_read_Luminosity^0,c
  5121   00255C  5009               	movf	??_color_read_Luminosity^0,w,c
  5122   00255E  6E0C               	movwf	color_read_Luminosity@tmp^0,c
  5123   002560  6A0D               	clrf	(color_read_Luminosity@tmp+1)^0,c
  5124                           
  5125                           ;../color.c: 63:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5126   002562  0E00               	movlw	0
  5127   002564  EC58  F013         	call	_I2C_2_Master_Read
  5128   002568  6E09               	movwf	??_color_read_Luminosity^0,c
  5129   00256A  5009               	movf	??_color_read_Luminosity^0,w,c
  5130   00256C  6E0B               	movwf	(??_color_read_Luminosity+2)^0,c
  5131   00256E  6A0A               	clrf	(??_color_read_Luminosity+1)^0,c
  5132   002570  500C               	movf	color_read_Luminosity@tmp^0,w,c
  5133   002572  100A               	iorwf	(??_color_read_Luminosity+1)^0,w,c
  5134   002574  6E0C               	movwf	color_read_Luminosity@tmp^0,c
  5135   002576  500D               	movf	(color_read_Luminosity@tmp+1)^0,w,c
  5136   002578  100B               	iorwf	(??_color_read_Luminosity+2)^0,w,c
  5137   00257A  6E0D               	movwf	(color_read_Luminosity@tmp+1)^0,c
  5138                           
  5139                           ;../color.c: 64:  I2C_2_Master_Stop();
  5140   00257C  EC46  F014         	call	_I2C_2_Master_Stop	;wreg free
  5141   002580                     
  5142                           ;../color.c: 65:  return tmp;
  5143   002580  C00C  F007         	movff	color_read_Luminosity@tmp,?_color_read_Luminosity
  5144   002584  C00D  F008         	movff	color_read_Luminosity@tmp+1,?_color_read_Luminosity+1
  5145   002588  0012               	return		;funcret
  5146   00258A                     __end_of_color_read_Luminosity:
  5147                           	callstack 0
  5148                           
  5149 ;; *************** function _color_read_Green *****************
  5150 ;; Defined at:
  5151 ;;		line 82 in file "../color.c"
  5152 ;; Parameters:    Size  Location     Type
  5153 ;;		None
  5154 ;; Auto vars:     Size  Location     Type
  5155 ;;  tmp             2   11[COMRAM] unsigned int 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  2    6[COMRAM] unsigned int 
  5158 ;; Registers used:
  5159 ;;		wreg, status,2, status,0, cstack
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5165 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5166 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5167 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5168 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5169 ;;Total ram usage:        7 bytes
  5170 ;; Hardware stack levels used: 1
  5171 ;; Hardware stack levels required when called: 4
  5172 ;; This function calls:
  5173 ;;		_I2C_2_Master_Read
  5174 ;;		_I2C_2_Master_RepStart
  5175 ;;		_I2C_2_Master_Start
  5176 ;;		_I2C_2_Master_Stop
  5177 ;;		_I2C_2_Master_Write
  5178 ;; This function is called by:
  5179 ;;		_color_read
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           	psect	text31
  5184   00258A                     __ptext31:
  5185                           	callstack 0
  5186   00258A                     _color_read_Green:
  5187                           	callstack 25
  5188   00258A                     
  5189                           ;../color.c: 84:  unsigned int tmp;;../color.c: 85:  I2C_2_Master_Start();
  5190   00258A  EC4B  F014         	call	_I2C_2_Master_Start	;wreg free
  5191                           
  5192                           ;../color.c: 86:  I2C_2_Master_Write(0x52 | 0x00);
  5193   00258E  0E52               	movlw	82
  5194   002590  EC35  F014         	call	_I2C_2_Master_Write
  5195                           
  5196                           ;../color.c: 87:  I2C_2_Master_Write(0xA0 | 0x18);
  5197   002594  0EB8               	movlw	184
  5198   002596  EC35  F014         	call	_I2C_2_Master_Write
  5199                           
  5200                           ;../color.c: 88:  I2C_2_Master_RepStart();
  5201   00259A  EC41  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5202                           
  5203                           ;../color.c: 89:  I2C_2_Master_Write(0x52 | 0x01);
  5204   00259E  0E53               	movlw	83
  5205   0025A0  EC35  F014         	call	_I2C_2_Master_Write
  5206                           
  5207                           ;../color.c: 90:  tmp=I2C_2_Master_Read(1);
  5208   0025A4  0E01               	movlw	1
  5209   0025A6  EC58  F013         	call	_I2C_2_Master_Read
  5210   0025AA  6E09               	movwf	??_color_read_Green^0,c
  5211   0025AC  5009               	movf	??_color_read_Green^0,w,c
  5212   0025AE  6E0C               	movwf	color_read_Green@tmp^0,c
  5213   0025B0  6A0D               	clrf	(color_read_Green@tmp+1)^0,c
  5214                           
  5215                           ;../color.c: 91:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5216   0025B2  0E00               	movlw	0
  5217   0025B4  EC58  F013         	call	_I2C_2_Master_Read
  5218   0025B8  6E09               	movwf	??_color_read_Green^0,c
  5219   0025BA  5009               	movf	??_color_read_Green^0,w,c
  5220   0025BC  6E0B               	movwf	(??_color_read_Green+2)^0,c
  5221   0025BE  6A0A               	clrf	(??_color_read_Green+1)^0,c
  5222   0025C0  500C               	movf	color_read_Green@tmp^0,w,c
  5223   0025C2  100A               	iorwf	(??_color_read_Green+1)^0,w,c
  5224   0025C4  6E0C               	movwf	color_read_Green@tmp^0,c
  5225   0025C6  500D               	movf	(color_read_Green@tmp+1)^0,w,c
  5226   0025C8  100B               	iorwf	(??_color_read_Green+2)^0,w,c
  5227   0025CA  6E0D               	movwf	(color_read_Green@tmp+1)^0,c
  5228                           
  5229                           ;../color.c: 92:  I2C_2_Master_Stop();
  5230   0025CC  EC46  F014         	call	_I2C_2_Master_Stop	;wreg free
  5231   0025D0                     
  5232                           ;../color.c: 93:  return tmp;
  5233   0025D0  C00C  F007         	movff	color_read_Green@tmp,?_color_read_Green
  5234   0025D4  C00D  F008         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5235   0025D8  0012               	return		;funcret
  5236   0025DA                     __end_of_color_read_Green:
  5237                           	callstack 0
  5238                           
  5239 ;; *************** function _color_read_Blue *****************
  5240 ;; Defined at:
  5241 ;;		line 96 in file "../color.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;		None
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;  tmp             2   11[COMRAM] unsigned int 
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  2    6[COMRAM] unsigned int 
  5248 ;; Registers used:
  5249 ;;		wreg, status,2, status,0, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5255 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5256 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5257 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5258 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5259 ;;Total ram usage:        7 bytes
  5260 ;; Hardware stack levels used: 1
  5261 ;; Hardware stack levels required when called: 4
  5262 ;; This function calls:
  5263 ;;		_I2C_2_Master_Read
  5264 ;;		_I2C_2_Master_RepStart
  5265 ;;		_I2C_2_Master_Start
  5266 ;;		_I2C_2_Master_Stop
  5267 ;;		_I2C_2_Master_Write
  5268 ;; This function is called by:
  5269 ;;		_color_read
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text32
  5274   0025DA                     __ptext32:
  5275                           	callstack 0
  5276   0025DA                     _color_read_Blue:
  5277                           	callstack 25
  5278   0025DA                     
  5279                           ;../color.c: 98:  unsigned int tmp;;../color.c: 99:  I2C_2_Master_Start();
  5280   0025DA  EC4B  F014         	call	_I2C_2_Master_Start	;wreg free
  5281                           
  5282                           ;../color.c: 100:  I2C_2_Master_Write(0x52 | 0x00);
  5283   0025DE  0E52               	movlw	82
  5284   0025E0  EC35  F014         	call	_I2C_2_Master_Write
  5285                           
  5286                           ;../color.c: 101:  I2C_2_Master_Write(0xA0 | 0x1A);
  5287   0025E4  0EBA               	movlw	186
  5288   0025E6  EC35  F014         	call	_I2C_2_Master_Write
  5289                           
  5290                           ;../color.c: 102:  I2C_2_Master_RepStart();
  5291   0025EA  EC41  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5292                           
  5293                           ;../color.c: 103:  I2C_2_Master_Write(0x52 | 0x01);
  5294   0025EE  0E53               	movlw	83
  5295   0025F0  EC35  F014         	call	_I2C_2_Master_Write
  5296                           
  5297                           ;../color.c: 104:  tmp=I2C_2_Master_Read(1);
  5298   0025F4  0E01               	movlw	1
  5299   0025F6  EC58  F013         	call	_I2C_2_Master_Read
  5300   0025FA  6E09               	movwf	??_color_read_Blue^0,c
  5301   0025FC  5009               	movf	??_color_read_Blue^0,w,c
  5302   0025FE  6E0C               	movwf	color_read_Blue@tmp^0,c
  5303   002600  6A0D               	clrf	(color_read_Blue@tmp+1)^0,c
  5304                           
  5305                           ;../color.c: 105:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5306   002602  0E00               	movlw	0
  5307   002604  EC58  F013         	call	_I2C_2_Master_Read
  5308   002608  6E09               	movwf	??_color_read_Blue^0,c
  5309   00260A  5009               	movf	??_color_read_Blue^0,w,c
  5310   00260C  6E0B               	movwf	(??_color_read_Blue+2)^0,c
  5311   00260E  6A0A               	clrf	(??_color_read_Blue+1)^0,c
  5312   002610  500C               	movf	color_read_Blue@tmp^0,w,c
  5313   002612  100A               	iorwf	(??_color_read_Blue+1)^0,w,c
  5314   002614  6E0C               	movwf	color_read_Blue@tmp^0,c
  5315   002616  500D               	movf	(color_read_Blue@tmp+1)^0,w,c
  5316   002618  100B               	iorwf	(??_color_read_Blue+2)^0,w,c
  5317   00261A  6E0D               	movwf	(color_read_Blue@tmp+1)^0,c
  5318                           
  5319                           ;../color.c: 106:  I2C_2_Master_Stop();
  5320   00261C  EC46  F014         	call	_I2C_2_Master_Stop	;wreg free
  5321   002620                     
  5322                           ;../color.c: 107:  return tmp;
  5323   002620  C00C  F007         	movff	color_read_Blue@tmp,?_color_read_Blue
  5324   002624  C00D  F008         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5325   002628  0012               	return		;funcret
  5326   00262A                     __end_of_color_read_Blue:
  5327                           	callstack 0
  5328                           
  5329 ;; *************** function _I2C_2_Master_RepStart *****************
  5330 ;; Defined at:
  5331 ;;		line 33 in file "../i2c.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;		None
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;		None
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  1    wreg      void 
  5338 ;; Registers used:
  5339 ;;		wreg, status,2, status,0, cstack
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5349 ;;Total ram usage:        0 bytes
  5350 ;; Hardware stack levels used: 1
  5351 ;; Hardware stack levels required when called: 3
  5352 ;; This function calls:
  5353 ;;		_I2C_2_Master_Idle
  5354 ;; This function is called by:
  5355 ;;		_color_read_Luminosity
  5356 ;;		_color_read_Red
  5357 ;;		_color_read_Green
  5358 ;;		_color_read_Blue
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           	psect	text33
  5363   002882                     __ptext33:
  5364                           	callstack 0
  5365   002882                     _I2C_2_Master_RepStart:
  5366                           	callstack 25
  5367   002882                     
  5368                           ;../i2c.c: 35:   I2C_2_Master_Idle();
  5369   002882  ECC6  F013         	call	_I2C_2_Master_Idle	;wreg free
  5370   002886                     
  5371                           ;../i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5372   002886  010E               	movlb	14	; () banked
  5373   002888  83DA               	bsf	218,1,b	;volatile
  5374   00288A                     
  5375                           ; BSR set to: 14
  5376   00288A  0012               	return		;funcret
  5377   00288C                     __end_of_I2C_2_Master_RepStart:
  5378                           	callstack 0
  5379                           
  5380 ;; *************** function _I2C_2_Master_Read *****************
  5381 ;; Defined at:
  5382 ;;		line 51 in file "../i2c.c"
  5383 ;; Parameters:    Size  Location     Type
  5384 ;;  ack             1    wreg     unsigned char 
  5385 ;; Auto vars:     Size  Location     Type
  5386 ;;  ack             1    4[COMRAM] unsigned char 
  5387 ;;  tmp             1    5[COMRAM] unsigned char 
  5388 ;; Return value:  Size  Location     Type
  5389 ;;                  1    wreg      unsigned char 
  5390 ;; Registers used:
  5391 ;;		wreg, status,2, status,0, cstack
  5392 ;; Tracked objects:
  5393 ;;		On entry : 0/0
  5394 ;;		On exit  : 0/0
  5395 ;;		Unchanged: 0/0
  5396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5398 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5399 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5400 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5401 ;;Total ram usage:        3 bytes
  5402 ;; Hardware stack levels used: 1
  5403 ;; Hardware stack levels required when called: 3
  5404 ;; This function calls:
  5405 ;;		_I2C_2_Master_Idle
  5406 ;; This function is called by:
  5407 ;;		_color_read_Luminosity
  5408 ;;		_color_read_Red
  5409 ;;		_color_read_Green
  5410 ;;		_color_read_Blue
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           	psect	text34
  5415   0026B0                     __ptext34:
  5416                           	callstack 0
  5417   0026B0                     _I2C_2_Master_Read:
  5418                           	callstack 25
  5419                           
  5420                           ; BSR set to: 14
  5421                           ;incstack = 0
  5422                           ;I2C_2_Master_Read@ack stored from wreg
  5423   0026B0  6E05               	movwf	I2C_2_Master_Read@ack^0,c
  5424   0026B2                     
  5425                           ;../i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);../i2c.c: 52: {;../i2c
      +                          .c: 53:   unsigned char tmp;;../i2c.c: 54:   I2C_2_Master_Idle();
  5426   0026B2  ECC6  F013         	call	_I2C_2_Master_Idle	;wreg free
  5427   0026B6                     
  5428                           ;../i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5429   0026B6  010E               	movlb	14	; () banked
  5430   0026B8  87DA               	bsf	218,3,b	;volatile
  5431                           
  5432                           ;../i2c.c: 56:   I2C_2_Master_Idle();
  5433   0026BA  ECC6  F013         	call	_I2C_2_Master_Idle	;wreg free
  5434   0026BE                     
  5435                           ;../i2c.c: 57:   tmp = SSP2BUF;
  5436   0026BE  CED5 F006          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5437                           
  5438                           ;../i2c.c: 58:   I2C_2_Master_Idle();
  5439   0026C2  ECC6  F013         	call	_I2C_2_Master_Idle	;wreg free
  5440   0026C6                     
  5441                           ;../i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5442   0026C6  5005               	movf	I2C_2_Master_Read@ack^0,w,c
  5443   0026C8  B4D8               	btfsc	status,2,c
  5444   0026CA  EF69  F013         	goto	u1191
  5445   0026CE  EF6D  F013         	goto	u1190
  5446   0026D2                     u1191:
  5447   0026D2  6A04               	clrf	??_I2C_2_Master_Read^0,c
  5448   0026D4  2A04               	incf	??_I2C_2_Master_Read^0,f,c
  5449   0026D6  EF6E  F013         	goto	u1208
  5450   0026DA                     u1190:
  5451   0026DA  6A04               	clrf	??_I2C_2_Master_Read^0,c
  5452   0026DC                     u1208:
  5453   0026DC  3A04               	swapf	??_I2C_2_Master_Read^0,f,c
  5454   0026DE  4604               	rlncf	??_I2C_2_Master_Read^0,f,c
  5455   0026E0  010E               	movlb	14	; () banked
  5456   0026E2  51DA               	movf	218,w,b	;volatile
  5457   0026E4  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  5458   0026E6  0BDF               	andlw	-33
  5459   0026E8  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  5460   0026EA  6FDA               	movwf	218,b	;volatile
  5461   0026EC                     
  5462                           ; BSR set to: 14
  5463                           ;../i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5464   0026EC  89DA               	bsf	218,4,b	;volatile
  5465   0026EE                     
  5466                           ; BSR set to: 14
  5467                           ;../i2c.c: 61:   return tmp;
  5468   0026EE  5006               	movf	I2C_2_Master_Read@tmp^0,w,c
  5469   0026F0                     
  5470                           ; BSR set to: 14
  5471   0026F0  0012               	return		;funcret
  5472   0026F2                     __end_of_I2C_2_Master_Read:
  5473                           	callstack 0
  5474                           
  5475 ;; *************** function _color_processor_hard *****************
  5476 ;; Defined at:
  5477 ;;		line 145 in file "../color.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  rgb             2    2[COMRAM] PTR struct RGB_val
  5480 ;;		 -> main@RGB_recorded(8), 
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;  b               2   10[COMRAM] unsigned int 
  5483 ;;  a               2    8[COMRAM] unsigned int 
  5484 ;;  c               2    6[COMRAM] unsigned int 
  5485 ;;  color           2    4[COMRAM] unsigned int 
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  2    2[COMRAM] unsigned int 
  5488 ;; Registers used:
  5489 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5495 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5496 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5498 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5499 ;;Total ram usage:       10 bytes
  5500 ;; Hardware stack levels used: 1
  5501 ;; Hardware stack levels required when called: 2
  5502 ;; This function calls:
  5503 ;;		Nothing
  5504 ;; This function is called by:
  5505 ;;		_main
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           	psect	text35
  5510   001C68                     __ptext35:
  5511                           	callstack 0
  5512   001C68                     _color_processor_hard:
  5513                           	callstack 28
  5514   001C68                     
  5515                           ;../color.c: 145: unsigned int color_processor_hard(struct RGB_val *rgb);../color.c: 146
      +                          : {;../color.c: 147:     unsigned int a = rgb->R;
  5516   001C68  EE20 F002          	lfsr	2,2
  5517   001C6C  5003               	movf	color_processor_hard@rgb^0,w,c
  5518   001C6E  26D9               	addwf	fsr2l,f,c
  5519   001C70  5004               	movf	(color_processor_hard@rgb+1)^0,w,c
  5520   001C72  22DA               	addwfc	fsr2h,f,c
  5521   001C74  CFDE F009          	movff	postinc2,color_processor_hard@a
  5522   001C78  CFDD F00A          	movff	postdec2,color_processor_hard@a+1
  5523                           
  5524                           ;../color.c: 148:     unsigned int b = rgb->G;
  5525   001C7C  EE20 F004          	lfsr	2,4
  5526   001C80  5003               	movf	color_processor_hard@rgb^0,w,c
  5527   001C82  26D9               	addwf	fsr2l,f,c
  5528   001C84  5004               	movf	(color_processor_hard@rgb+1)^0,w,c
  5529   001C86  22DA               	addwfc	fsr2h,f,c
  5530   001C88  CFDE F00B          	movff	postinc2,color_processor_hard@b
  5531   001C8C  CFDD F00C          	movff	postdec2,color_processor_hard@b+1
  5532                           
  5533                           ;../color.c: 149:     unsigned int c = rgb->B;
  5534   001C90  EE20 F006          	lfsr	2,6
  5535   001C94  5003               	movf	color_processor_hard@rgb^0,w,c
  5536   001C96  26D9               	addwf	fsr2l,f,c
  5537   001C98  5004               	movf	(color_processor_hard@rgb+1)^0,w,c
  5538   001C9A  22DA               	addwfc	fsr2h,f,c
  5539   001C9C  CFDE F007          	movff	postinc2,color_processor_hard@c
  5540   001CA0  CFDD F008          	movff	postdec2,color_processor_hard@c+1
  5541   001CA4                     
  5542                           ;../color.c: 150:     unsigned int color;;../color.c: 151:     if (a>=b & a>=c){color=1;
      +                          }
  5543   001CA4  500B               	movf	color_processor_hard@b^0,w,c
  5544   001CA6  5C09               	subwf	color_processor_hard@a^0,w,c
  5545   001CA8  500C               	movf	(color_processor_hard@b+1)^0,w,c
  5546   001CAA  580A               	subwfb	(color_processor_hard@a+1)^0,w,c
  5547   001CAC  A0D8               	btfss	status,0,c
  5548   001CAE  EF5B  F00E         	goto	u1401
  5549   001CB2  EF5D  F00E         	goto	u1400
  5550   001CB6                     u1401:
  5551   001CB6  EF6E  F00E         	goto	l2602
  5552   001CBA                     u1400:
  5553   001CBA  5007               	movf	color_processor_hard@c^0,w,c
  5554   001CBC  5C09               	subwf	color_processor_hard@a^0,w,c
  5555   001CBE  5008               	movf	(color_processor_hard@c+1)^0,w,c
  5556   001CC0  580A               	subwfb	(color_processor_hard@a+1)^0,w,c
  5557   001CC2  A0D8               	btfss	status,0,c
  5558   001CC4  EF66  F00E         	goto	u1411
  5559   001CC8  EF68  F00E         	goto	u1410
  5560   001CCC                     u1411:
  5561   001CCC  EF6E  F00E         	goto	l2602
  5562   001CD0                     u1410:
  5563   001CD0  0E00               	movlw	0
  5564   001CD2  6E06               	movwf	(color_processor_hard@color+1)^0,c
  5565   001CD4  0E01               	movlw	1
  5566   001CD6  6E05               	movwf	color_processor_hard@color^0,c
  5567   001CD8  EF8E  F00E         	goto	l2610
  5568   001CDC                     l2602:
  5569   001CDC  5009               	movf	color_processor_hard@a^0,w,c
  5570   001CDE  5C0B               	subwf	color_processor_hard@b^0,w,c
  5571   001CE0  500A               	movf	(color_processor_hard@a+1)^0,w,c
  5572   001CE2  580C               	subwfb	(color_processor_hard@b+1)^0,w,c
  5573   001CE4  A0D8               	btfss	status,0,c
  5574   001CE6  EF77  F00E         	goto	u1421
  5575   001CEA  EF79  F00E         	goto	u1420
  5576   001CEE                     u1421:
  5577   001CEE  EF8A  F00E         	goto	l2608
  5578   001CF2                     u1420:
  5579   001CF2  5007               	movf	color_processor_hard@c^0,w,c
  5580   001CF4  5C0B               	subwf	color_processor_hard@b^0,w,c
  5581   001CF6  5008               	movf	(color_processor_hard@c+1)^0,w,c
  5582   001CF8  580C               	subwfb	(color_processor_hard@b+1)^0,w,c
  5583   001CFA  A0D8               	btfss	status,0,c
  5584   001CFC  EF82  F00E         	goto	u1431
  5585   001D00  EF84  F00E         	goto	u1430
  5586   001D04                     u1431:
  5587   001D04  EF8A  F00E         	goto	l2608
  5588   001D08                     u1430:
  5589   001D08  0E00               	movlw	0
  5590   001D0A  6E06               	movwf	(color_processor_hard@color+1)^0,c
  5591   001D0C  0E02               	movlw	2
  5592   001D0E  6E05               	movwf	color_processor_hard@color^0,c
  5593   001D10  EF8E  F00E         	goto	l2610
  5594   001D14                     l2608:
  5595   001D14  0E00               	movlw	0
  5596   001D16  6E06               	movwf	(color_processor_hard@color+1)^0,c
  5597   001D18  0E03               	movlw	3
  5598   001D1A  6E05               	movwf	color_processor_hard@color^0,c
  5599   001D1C                     l2610:
  5600                           
  5601                           ;../color.c: 154:     return color;
  5602   001D1C  C005  F003         	movff	color_processor_hard@color,?_color_processor_hard
  5603   001D20  C006  F004         	movff	color_processor_hard@color+1,?_color_processor_hard+1
  5604   001D24  0012               	return		;funcret
  5605   001D26                     __end_of_color_processor_hard:
  5606                           	callstack 0
  5607                           
  5608 ;; *************** function _color_processor_easy *****************
  5609 ;; Defined at:
  5610 ;;		line 133 in file "../color.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  rgb             2    2[COMRAM] PTR struct RGB_val
  5613 ;;		 -> main@RGB_recorded(8), 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  b               2   10[COMRAM] unsigned int 
  5616 ;;  a               2    8[COMRAM] unsigned int 
  5617 ;;  c               2    6[COMRAM] unsigned int 
  5618 ;;  color           2    4[COMRAM] unsigned int 
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  2    2[COMRAM] unsigned int 
  5621 ;; Registers used:
  5622 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5628 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5629 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5631 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5632 ;;Total ram usage:       10 bytes
  5633 ;; Hardware stack levels used: 1
  5634 ;; Hardware stack levels required when called: 2
  5635 ;; This function calls:
  5636 ;;		Nothing
  5637 ;; This function is called by:
  5638 ;;		_main
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           	psect	text36
  5643   001D26                     __ptext36:
  5644                           	callstack 0
  5645   001D26                     _color_processor_easy:
  5646                           	callstack 28
  5647   001D26                     
  5648                           ;../color.c: 133: unsigned int color_processor_easy(struct RGB_val *rgb);../color.c: 134
      +                          : {;../color.c: 135:     unsigned int a = rgb->R;
  5649   001D26  EE20 F002          	lfsr	2,2
  5650   001D2A  5003               	movf	color_processor_easy@rgb^0,w,c
  5651   001D2C  26D9               	addwf	fsr2l,f,c
  5652   001D2E  5004               	movf	(color_processor_easy@rgb+1)^0,w,c
  5653   001D30  22DA               	addwfc	fsr2h,f,c
  5654   001D32  CFDE F009          	movff	postinc2,color_processor_easy@a
  5655   001D36  CFDD F00A          	movff	postdec2,color_processor_easy@a+1
  5656                           
  5657                           ;../color.c: 136:     unsigned int b = rgb->G;
  5658   001D3A  EE20 F004          	lfsr	2,4
  5659   001D3E  5003               	movf	color_processor_easy@rgb^0,w,c
  5660   001D40  26D9               	addwf	fsr2l,f,c
  5661   001D42  5004               	movf	(color_processor_easy@rgb+1)^0,w,c
  5662   001D44  22DA               	addwfc	fsr2h,f,c
  5663   001D46  CFDE F00B          	movff	postinc2,color_processor_easy@b
  5664   001D4A  CFDD F00C          	movff	postdec2,color_processor_easy@b+1
  5665                           
  5666                           ;../color.c: 137:     unsigned int c = rgb->B;
  5667   001D4E  EE20 F006          	lfsr	2,6
  5668   001D52  5003               	movf	color_processor_easy@rgb^0,w,c
  5669   001D54  26D9               	addwf	fsr2l,f,c
  5670   001D56  5004               	movf	(color_processor_easy@rgb+1)^0,w,c
  5671   001D58  22DA               	addwfc	fsr2h,f,c
  5672   001D5A  CFDE F007          	movff	postinc2,color_processor_easy@c
  5673   001D5E  CFDD F008          	movff	postdec2,color_processor_easy@c+1
  5674   001D62                     
  5675                           ;../color.c: 138:     unsigned int color;;../color.c: 139:     if (a>=b & a>=c){color=1;
      +                          }
  5676   001D62  500B               	movf	color_processor_easy@b^0,w,c
  5677   001D64  5C09               	subwf	color_processor_easy@a^0,w,c
  5678   001D66  500C               	movf	(color_processor_easy@b+1)^0,w,c
  5679   001D68  580A               	subwfb	(color_processor_easy@a+1)^0,w,c
  5680   001D6A  A0D8               	btfss	status,0,c
  5681   001D6C  EFBA  F00E         	goto	u1361
  5682   001D70  EFBC  F00E         	goto	u1360
  5683   001D74                     u1361:
  5684   001D74  EFCD  F00E         	goto	l2582
  5685   001D78                     u1360:
  5686   001D78  5007               	movf	color_processor_easy@c^0,w,c
  5687   001D7A  5C09               	subwf	color_processor_easy@a^0,w,c
  5688   001D7C  5008               	movf	(color_processor_easy@c+1)^0,w,c
  5689   001D7E  580A               	subwfb	(color_processor_easy@a+1)^0,w,c
  5690   001D80  A0D8               	btfss	status,0,c
  5691   001D82  EFC5  F00E         	goto	u1371
  5692   001D86  EFC7  F00E         	goto	u1370
  5693   001D8A                     u1371:
  5694   001D8A  EFCD  F00E         	goto	l2582
  5695   001D8E                     u1370:
  5696   001D8E  0E00               	movlw	0
  5697   001D90  6E06               	movwf	(color_processor_easy@color+1)^0,c
  5698   001D92  0E01               	movlw	1
  5699   001D94  6E05               	movwf	color_processor_easy@color^0,c
  5700   001D96  EFED  F00E         	goto	l2590
  5701   001D9A                     l2582:
  5702   001D9A  5009               	movf	color_processor_easy@a^0,w,c
  5703   001D9C  5C0B               	subwf	color_processor_easy@b^0,w,c
  5704   001D9E  500A               	movf	(color_processor_easy@a+1)^0,w,c
  5705   001DA0  580C               	subwfb	(color_processor_easy@b+1)^0,w,c
  5706   001DA2  A0D8               	btfss	status,0,c
  5707   001DA4  EFD6  F00E         	goto	u1381
  5708   001DA8  EFD8  F00E         	goto	u1380
  5709   001DAC                     u1381:
  5710   001DAC  EFE9  F00E         	goto	l2588
  5711   001DB0                     u1380:
  5712   001DB0  5007               	movf	color_processor_easy@c^0,w,c
  5713   001DB2  5C0B               	subwf	color_processor_easy@b^0,w,c
  5714   001DB4  5008               	movf	(color_processor_easy@c+1)^0,w,c
  5715   001DB6  580C               	subwfb	(color_processor_easy@b+1)^0,w,c
  5716   001DB8  A0D8               	btfss	status,0,c
  5717   001DBA  EFE1  F00E         	goto	u1391
  5718   001DBE  EFE3  F00E         	goto	u1390
  5719   001DC2                     u1391:
  5720   001DC2  EFE9  F00E         	goto	l2588
  5721   001DC6                     u1390:
  5722   001DC6  0E00               	movlw	0
  5723   001DC8  6E06               	movwf	(color_processor_easy@color+1)^0,c
  5724   001DCA  0E02               	movlw	2
  5725   001DCC  6E05               	movwf	color_processor_easy@color^0,c
  5726   001DCE  EFED  F00E         	goto	l2590
  5727   001DD2                     l2588:
  5728   001DD2  0E00               	movlw	0
  5729   001DD4  6E06               	movwf	(color_processor_easy@color+1)^0,c
  5730   001DD6  0E03               	movlw	3
  5731   001DD8  6E05               	movwf	color_processor_easy@color^0,c
  5732   001DDA                     l2590:
  5733                           
  5734                           ;../color.c: 142:     return color;
  5735   001DDA  C005  F003         	movff	color_processor_easy@color,?_color_processor_easy
  5736   001DDE  C006  F004         	movff	color_processor_easy@color+1,?_color_processor_easy+1
  5737   001DE2  0012               	return		;funcret
  5738   001DE4                     __end_of_color_processor_easy:
  5739                           	callstack 0
  5740                           
  5741 ;; *************** function _color_click_init *****************
  5742 ;; Defined at:
  5743 ;;		line 5 in file "../color.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;		None
  5746 ;; Auto vars:     Size  Location     Type
  5747 ;;		None
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  1    wreg      void 
  5750 ;; Registers used:
  5751 ;;		wreg, status,2, status,0, cstack
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5759 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5760 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5761 ;;Total ram usage:        1 bytes
  5762 ;; Hardware stack levels used: 1
  5763 ;; Hardware stack levels required when called: 5
  5764 ;; This function calls:
  5765 ;;		_I2C_2_Master_Init
  5766 ;;		_color_writetoaddr
  5767 ;; This function is called by:
  5768 ;;		_main
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           	psect	text37
  5773   0023EC                     __ptext37:
  5774                           	callstack 0
  5775   0023EC                     _color_click_init:
  5776                           	callstack 25
  5777   0023EC                     
  5778                           ;../color.c: 8:     I2C_2_Master_Init();
  5779   0023EC  ECB1  F013         	call	_I2C_2_Master_Init	;wreg free
  5780   0023F0                     
  5781                           ;../color.c: 11:   color_writetoaddr(0x00, 0x01);
  5782   0023F0  0E01               	movlw	1
  5783   0023F2  6E05               	movwf	color_writetoaddr@value^0,c
  5784   0023F4  0E00               	movlw	0
  5785   0023F6  ECED  F013         	call	_color_writetoaddr
  5786   0023FA                     
  5787                           ;../color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  5788   0023FA  0E3F               	movlw	63
  5789   0023FC  6E07               	movwf	??_color_click_init^0,c
  5790   0023FE  0E55               	movlw	85
  5791   002400                     u1867:
  5792   002400  2EE8               	decfsz	wreg,f,c
  5793   002402  D7FE               	bra	u1867
  5794   002404  2E07               	decfsz	??_color_click_init^0,f,c
  5795   002406  D7FC               	bra	u1867
  5796   002408  F000               	nop	
  5797   00240A                     
  5798                           ;../color.c: 15:  color_writetoaddr(0x00, 0x03);
  5799   00240A  0E03               	movlw	3
  5800   00240C  6E05               	movwf	color_writetoaddr@value^0,c
  5801   00240E  0E00               	movlw	0
  5802   002410  ECED  F013         	call	_color_writetoaddr
  5803   002414                     
  5804                           ;../color.c: 18:  color_writetoaddr(0x01, 0xD5);
  5805   002414  0ED5               	movlw	213
  5806   002416  6E05               	movwf	color_writetoaddr@value^0,c
  5807   002418  0E01               	movlw	1
  5808   00241A  ECED  F013         	call	_color_writetoaddr
  5809   00241E                     
  5810                           ;../color.c: 21:     TRISHbits.TRISH1 = 0;
  5811   00241E  9288               	bcf	136,1,c	;volatile
  5812   002420                     
  5813                           ;../color.c: 22:     TRISDbits.TRISD3 = 0;
  5814   002420  9684               	bcf	132,3,c	;volatile
  5815   002422                     
  5816                           ;../color.c: 23:     TRISDbits.TRISD4 = 0;
  5817   002422  9884               	bcf	132,4,c	;volatile
  5818   002424                     
  5819                           ;../color.c: 24:     TRISHbits.TRISH0 = 0;
  5820   002424  9088               	bcf	136,0,c	;volatile
  5821   002426                     
  5822                           ;../color.c: 25:     TRISFbits.TRISF0 = 0;
  5823   002426  9086               	bcf	134,0,c	;volatile
  5824   002428                     
  5825                           ;../color.c: 27:     LATHbits.LATH1 = 1;
  5826   002428  8280               	bsf	128,1,c	;volatile
  5827   00242A                     
  5828                           ;../color.c: 28:     LATDbits.LATD3 = 1;
  5829   00242A  867C               	bsf	124,3,c	;volatile
  5830   00242C                     
  5831                           ;../color.c: 29:     LATDbits.LATD4 = 1;
  5832   00242C  887C               	bsf	124,4,c	;volatile
  5833   00242E                     
  5834                           ;../color.c: 30:     LATHbits.LATH0 = 1;
  5835   00242E  8080               	bsf	128,0,c	;volatile
  5836   002430                     
  5837                           ;../color.c: 31:     LATFbits.LATF0 = 1;
  5838   002430  807E               	bsf	126,0,c	;volatile
  5839   002432                     
  5840                           ;../color.c: 34:     LATDbits.LATD7=0;
  5841   002432  9E7C               	bcf	124,7,c	;volatile
  5842   002434                     
  5843                           ;../color.c: 35:     LATHbits.LATH3=0;
  5844   002434  9680               	bcf	128,3,c	;volatile
  5845   002436                     
  5846                           ;../color.c: 36:     TRISDbits.TRISD7=0;
  5847   002436  9E84               	bcf	132,7,c	;volatile
  5848   002438                     
  5849                           ;../color.c: 37:     TRISHbits.TRISH3=0;
  5850   002438  9688               	bcf	136,3,c	;volatile
  5851   00243A                     
  5852                           ;../color.c: 39:     TRISFbits.TRISF2=1;
  5853   00243A  8486               	bsf	134,2,c	;volatile
  5854   00243C                     
  5855                           ;../color.c: 40:     ANSELFbits.ANSELF2=0;
  5856   00243C  010E               	movlb	14	; () banked
  5857   00243E  95B4               	bcf	180,2,b	;volatile
  5858   002440                     
  5859                           ; BSR set to: 14
  5860                           ;../color.c: 41:     TRISFbits.TRISF3=1;
  5861   002440  8686               	bsf	134,3,c	;volatile
  5862   002442                     
  5863                           ; BSR set to: 14
  5864                           ;../color.c: 42:     ANSELFbits.ANSELF3=0;
  5865   002442  97B4               	bcf	180,3,b	;volatile
  5866   002444                     
  5867                           ; BSR set to: 14
  5868   002444  0012               	return		;funcret
  5869   002446                     __end_of_color_click_init:
  5870                           	callstack 0
  5871                           
  5872 ;; *************** function _color_writetoaddr *****************
  5873 ;; Defined at:
  5874 ;;		line 45 in file "../color.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;  address         1    wreg     unsigned char 
  5877 ;;  value           1    4[COMRAM] unsigned char 
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  address         1    5[COMRAM] unsigned char 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  1    wreg      void 
  5882 ;; Registers used:
  5883 ;;		wreg, status,2, status,0, cstack
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5889 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5892 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5893 ;;Total ram usage:        2 bytes
  5894 ;; Hardware stack levels used: 1
  5895 ;; Hardware stack levels required when called: 4
  5896 ;; This function calls:
  5897 ;;		_I2C_2_Master_Start
  5898 ;;		_I2C_2_Master_Stop
  5899 ;;		_I2C_2_Master_Write
  5900 ;; This function is called by:
  5901 ;;		_color_click_init
  5902 ;; This function uses a non-reentrant model
  5903 ;;
  5904                           
  5905                           	psect	text38
  5906   0027DA                     __ptext38:
  5907                           	callstack 0
  5908   0027DA                     _color_writetoaddr:
  5909                           	callstack 25
  5910                           
  5911                           ; BSR set to: 14
  5912                           ;incstack = 0
  5913                           ;color_writetoaddr@address stored from wreg
  5914   0027DA  6E06               	movwf	color_writetoaddr@address^0,c
  5915   0027DC                     
  5916                           ;../color.c: 45: void color_writetoaddr(char address, char value);../color.c: 46: {;../c
      +                          olor.c: 47:     I2C_2_Master_Start();
  5917   0027DC  EC4B  F014         	call	_I2C_2_Master_Start	;wreg free
  5918                           
  5919                           ;../color.c: 48:     I2C_2_Master_Write(0x52 | 0x00);
  5920   0027E0  0E52               	movlw	82
  5921   0027E2  EC35  F014         	call	_I2C_2_Master_Write
  5922                           
  5923                           ;../color.c: 49:     I2C_2_Master_Write(0x80 | address);
  5924   0027E6  5006               	movf	color_writetoaddr@address^0,w,c
  5925   0027E8  0980               	iorlw	128
  5926   0027EA  EC35  F014         	call	_I2C_2_Master_Write
  5927                           
  5928                           ;../color.c: 50:     I2C_2_Master_Write(value);
  5929   0027EE  5005               	movf	color_writetoaddr@value^0,w,c
  5930   0027F0  EC35  F014         	call	_I2C_2_Master_Write
  5931                           
  5932                           ;../color.c: 51:     I2C_2_Master_Stop();
  5933   0027F4  EC46  F014         	call	_I2C_2_Master_Stop	;wreg free
  5934   0027F8  0012               	return		;funcret
  5935   0027FA                     __end_of_color_writetoaddr:
  5936                           	callstack 0
  5937                           
  5938 ;; *************** function _I2C_2_Master_Write *****************
  5939 ;; Defined at:
  5940 ;;		line 45 in file "../i2c.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  data_byte       1    wreg     unsigned char 
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;  data_byte       1    3[COMRAM] unsigned char 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, status,2, status,0, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5957 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5958 ;;Total ram usage:        1 bytes
  5959 ;; Hardware stack levels used: 1
  5960 ;; Hardware stack levels required when called: 3
  5961 ;; This function calls:
  5962 ;;		_I2C_2_Master_Idle
  5963 ;; This function is called by:
  5964 ;;		_color_writetoaddr
  5965 ;;		_color_read_Luminosity
  5966 ;;		_color_read_Red
  5967 ;;		_color_read_Green
  5968 ;;		_color_read_Blue
  5969 ;; This function uses a non-reentrant model
  5970 ;;
  5971                           
  5972                           	psect	text39
  5973   00286A                     __ptext39:
  5974                           	callstack 0
  5975   00286A                     _I2C_2_Master_Write:
  5976                           	callstack 25
  5977                           
  5978                           ;incstack = 0
  5979                           ;I2C_2_Master_Write@data_byte stored from wreg
  5980   00286A  6E04               	movwf	I2C_2_Master_Write@data_byte^0,c
  5981   00286C                     
  5982                           ;../i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);../i2c.c: 46: {;../i2c.c
      +                          : 47:   I2C_2_Master_Idle();
  5983   00286C  ECC6  F013         	call	_I2C_2_Master_Idle	;wreg free
  5984   002870                     
  5985                           ;../i2c.c: 48:   SSP2BUF = data_byte;
  5986   002870  C004  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5987   002874  0012               	return		;funcret
  5988   002876                     __end_of_I2C_2_Master_Write:
  5989                           	callstack 0
  5990                           
  5991 ;; *************** function _I2C_2_Master_Stop *****************
  5992 ;; Defined at:
  5993 ;;		line 39 in file "../i2c.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  1    wreg      void 
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6011 ;;Total ram usage:        0 bytes
  6012 ;; Hardware stack levels used: 1
  6013 ;; Hardware stack levels required when called: 3
  6014 ;; This function calls:
  6015 ;;		_I2C_2_Master_Idle
  6016 ;; This function is called by:
  6017 ;;		_color_writetoaddr
  6018 ;;		_color_read_Luminosity
  6019 ;;		_color_read_Red
  6020 ;;		_color_read_Green
  6021 ;;		_color_read_Blue
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           	psect	text40
  6026   00288C                     __ptext40:
  6027                           	callstack 0
  6028   00288C                     _I2C_2_Master_Stop:
  6029                           	callstack 25
  6030   00288C                     
  6031                           ;../i2c.c: 41:   I2C_2_Master_Idle();
  6032   00288C  ECC6  F013         	call	_I2C_2_Master_Idle	;wreg free
  6033   002890                     
  6034                           ;../i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6035   002890  010E               	movlb	14	; () banked
  6036   002892  85DA               	bsf	218,2,b	;volatile
  6037   002894                     
  6038                           ; BSR set to: 14
  6039   002894  0012               	return		;funcret
  6040   002896                     __end_of_I2C_2_Master_Stop:
  6041                           	callstack 0
  6042                           
  6043 ;; *************** function _I2C_2_Master_Start *****************
  6044 ;; Defined at:
  6045 ;;		line 27 in file "../i2c.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;		None
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;		None
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  1    wreg      void 
  6052 ;; Registers used:
  6053 ;;		wreg, status,2, status,0, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6063 ;;Total ram usage:        0 bytes
  6064 ;; Hardware stack levels used: 1
  6065 ;; Hardware stack levels required when called: 3
  6066 ;; This function calls:
  6067 ;;		_I2C_2_Master_Idle
  6068 ;; This function is called by:
  6069 ;;		_color_writetoaddr
  6070 ;;		_color_read_Luminosity
  6071 ;;		_color_read_Red
  6072 ;;		_color_read_Green
  6073 ;;		_color_read_Blue
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           	psect	text41
  6078   002896                     __ptext41:
  6079                           	callstack 0
  6080   002896                     _I2C_2_Master_Start:
  6081                           	callstack 25
  6082   002896                     
  6083                           ;../i2c.c: 29:   I2C_2_Master_Idle();
  6084   002896  ECC6  F013         	call	_I2C_2_Master_Idle	;wreg free
  6085   00289A                     
  6086                           ;../i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6087   00289A  010E               	movlb	14	; () banked
  6088   00289C  81DA               	bsf	218,0,b	;volatile
  6089   00289E                     
  6090                           ; BSR set to: 14
  6091   00289E  0012               	return		;funcret
  6092   0028A0                     __end_of_I2C_2_Master_Start:
  6093                           	callstack 0
  6094                           
  6095 ;; *************** function _I2C_2_Master_Idle *****************
  6096 ;; Defined at:
  6097 ;;		line 22 in file "../i2c.c"
  6098 ;; Parameters:    Size  Location     Type
  6099 ;;		None
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;		None
  6102 ;; Return value:  Size  Location     Type
  6103 ;;                  1    wreg      void 
  6104 ;; Registers used:
  6105 ;;		wreg, status,2, status,0
  6106 ;; Tracked objects:
  6107 ;;		On entry : 0/0
  6108 ;;		On exit  : 0/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6113 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6114 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6115 ;;Total ram usage:        1 bytes
  6116 ;; Hardware stack levels used: 1
  6117 ;; Hardware stack levels required when called: 2
  6118 ;; This function calls:
  6119 ;;		Nothing
  6120 ;; This function is called by:
  6121 ;;		_I2C_2_Master_Start
  6122 ;;		_I2C_2_Master_RepStart
  6123 ;;		_I2C_2_Master_Stop
  6124 ;;		_I2C_2_Master_Write
  6125 ;;		_I2C_2_Master_Read
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           	psect	text42
  6130   00278C                     __ptext42:
  6131                           	callstack 0
  6132   00278C                     _I2C_2_Master_Idle:
  6133                           	callstack 25
  6134   00278C                     l95:
  6135   00278C  010E               	movlb	14	; () banked
  6136   00278E  B5D8               	btfsc	216,2,b	;volatile
  6137   002790  EFCC  F013         	goto	u1011
  6138   002794  EFCE  F013         	goto	u1010
  6139   002798                     u1011:
  6140   002798  EFC6  F013         	goto	l95
  6141   00279C                     u1010:
  6142   00279C                     
  6143                           ; BSR set to: 14
  6144   00279C  CEDA F003          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6145   0027A0  0E1F               	movlw	31
  6146   0027A2  1603               	andwf	??_I2C_2_Master_Idle^0,f,c
  6147   0027A4  A4D8               	btfss	status,2,c
  6148   0027A6  EFD7  F013         	goto	u1021
  6149   0027AA  EFD9  F013         	goto	u1020
  6150   0027AE                     u1021:
  6151   0027AE  EFC6  F013         	goto	l95
  6152   0027B2                     u1020:
  6153   0027B2                     
  6154                           ; BSR set to: 14
  6155   0027B2  0012               	return		;funcret
  6156   0027B4                     __end_of_I2C_2_Master_Idle:
  6157                           	callstack 0
  6158                           
  6159 ;; *************** function _I2C_2_Master_Init *****************
  6160 ;; Defined at:
  6161 ;;		line 4 in file "../i2c.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;		None
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;		None
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  1    wreg      void 
  6168 ;; Registers used:
  6169 ;;		wreg, status,2
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6179 ;;Total ram usage:        0 bytes
  6180 ;; Hardware stack levels used: 1
  6181 ;; Hardware stack levels required when called: 2
  6182 ;; This function calls:
  6183 ;;		Nothing
  6184 ;; This function is called by:
  6185 ;;		_color_click_init
  6186 ;;		_main
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text43
  6191   002762                     __ptext43:
  6192                           	callstack 0
  6193   002762                     _I2C_2_Master_Init:
  6194                           	callstack 27
  6195   002762                     
  6196                           ;../i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6197   002762  010E               	movlb	14	; () banked
  6198   002764  51D9               	movf	217,w,b	;volatile
  6199   002766  0BF0               	andlw	-16
  6200   002768  0908               	iorlw	8
  6201   00276A  6FD9               	movwf	217,b	;volatile
  6202   00276C                     
  6203                           ; BSR set to: 14
  6204                           ;../i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6205   00276C  8BD9               	bsf	217,5,b	;volatile
  6206                           
  6207                           ;../i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6208   00276E  0E9F               	movlw	159
  6209   002770  6FD6               	movwf	214,b	;volatile
  6210   002772                     
  6211                           ; BSR set to: 14
  6212                           ;../i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6213   002772  8A84               	bsf	132,5,c	;volatile
  6214   002774                     
  6215                           ; BSR set to: 14
  6216                           ;../i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6217   002774  8C84               	bsf	132,6,c	;volatile
  6218   002776                     
  6219                           ; BSR set to: 14
  6220                           ;../i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6221   002776  9BA7               	bcf	167,5,b	;volatile
  6222   002778                     
  6223                           ; BSR set to: 14
  6224                           ;../i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6225   002778  9DA7               	bcf	167,6,b	;volatile
  6226                           
  6227                           ;../i2c.c: 16:   SSP2DATPPS=0x1D;
  6228   00277A  0E1D               	movlw	29
  6229   00277C  6F1D               	movwf	29,b	;volatile
  6230                           
  6231                           ;../i2c.c: 17:   SSP2CLKPPS=0x1E;
  6232   00277E  0E1E               	movlw	30
  6233   002780  6F1C               	movwf	28,b	;volatile
  6234                           
  6235                           ;../i2c.c: 18:   RD5PPS=0x1C;
  6236   002782  0E1C               	movlw	28
  6237   002784  6F6F               	movwf	111,b	;volatile
  6238                           
  6239                           ;../i2c.c: 19:   RD6PPS=0x1B;
  6240   002786  0E1B               	movlw	27
  6241   002788  6F70               	movwf	112,b	;volatile
  6242   00278A                     
  6243                           ; BSR set to: 14
  6244   00278A  0012               	return		;funcret
  6245   00278C                     __end_of_I2C_2_Master_Init:
  6246                           	callstack 0
  6247                           
  6248 ;; *************** function _Timer0_init *****************
  6249 ;; Defined at:
  6250 ;;		line 40 in file "../rc_servo.c"
  6251 ;; Parameters:    Size  Location     Type
  6252 ;;		None
  6253 ;; Auto vars:     Size  Location     Type
  6254 ;;		None
  6255 ;; Return value:  Size  Location     Type
  6256 ;;                  1    wreg      void 
  6257 ;; Registers used:
  6258 ;;		wreg, status,2
  6259 ;; Tracked objects:
  6260 ;;		On entry : 0/0
  6261 ;;		On exit  : 0/0
  6262 ;;		Unchanged: 0/0
  6263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6268 ;;Total ram usage:        0 bytes
  6269 ;; Hardware stack levels used: 1
  6270 ;; Hardware stack levels required when called: 2
  6271 ;; This function calls:
  6272 ;;		Nothing
  6273 ;; This function is called by:
  6274 ;;		_main
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           	psect	text44
  6279   0027FA                     __ptext44:
  6280                           	callstack 0
  6281   0027FA                     _Timer0_init:
  6282                           	callstack 28
  6283   0027FA                     
  6284                           ;../rc_servo.c: 42:     T0CON1bits.T0CS=0b010;
  6285   0027FA  50D6               	movf	214,w,c	;volatile
  6286   0027FC  0B1F               	andlw	-225
  6287   0027FE  0940               	iorlw	64
  6288   002800  6ED6               	movwf	214,c	;volatile
  6289   002802                     
  6290                           ;../rc_servo.c: 43:     T0CON1bits.T0ASYNC=1;
  6291   002802  88D6               	bsf	214,4,c	;volatile
  6292                           
  6293                           ;../rc_servo.c: 44:     T0CON1bits.T0CKPS=0b0111;
  6294   002804  50D6               	movf	214,w,c	;volatile
  6295   002806  0BF0               	andlw	-16
  6296   002808  0907               	iorlw	7
  6297   00280A  6ED6               	movwf	214,c	;volatile
  6298   00280C                     
  6299                           ;../rc_servo.c: 46:     T0CON0bits.T016BIT=1;
  6300   00280C  88D5               	bsf	213,4,c	;volatile
  6301                           
  6302                           ;../rc_servo.c: 49:     TMR0H=(65535-2500)>>8;
  6303   00280E  0EF6               	movlw	246
  6304   002810  6ED4               	movwf	212,c	;volatile
  6305                           
  6306                           ;../rc_servo.c: 50:     TMR0L=(unsigned char)(65535-2500);
  6307   002812  0E3B               	movlw	59
  6308   002814  6ED3               	movwf	211,c	;volatile
  6309   002816                     
  6310                           ;../rc_servo.c: 51:     T0CON0bits.T0EN=1;
  6311   002816  8ED5               	bsf	213,7,c	;volatile
  6312   002818  0012               	return		;funcret
  6313   00281A                     __end_of_Timer0_init:
  6314                           	callstack 0
  6315                           
  6316 ;; *************** function _Interrupts_init *****************
  6317 ;; Defined at:
  6318 ;;		line 8 in file "../rc_servo.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;		None
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;		None
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  1    wreg      void 
  6325 ;; Registers used:
  6326 ;;		None
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6336 ;;Total ram usage:        0 bytes
  6337 ;; Hardware stack levels used: 1
  6338 ;; Hardware stack levels required when called: 2
  6339 ;; This function calls:
  6340 ;;		Nothing
  6341 ;; This function is called by:
  6342 ;;		_main
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text45
  6347   002876                     __ptext45:
  6348                           	callstack 0
  6349   002876                     _Interrupts_init:
  6350                           	callstack 28
  6351   002876                     
  6352                           ;../rc_servo.c: 10:     PIE0bits.TMR0IE=1;
  6353   002876  010E               	movlb	14	; () banked
  6354   002878  8B29               	bsf	41,5,b	;volatile
  6355                           
  6356                           ;../rc_servo.c: 11:     INTCONbits.PEIE=1;
  6357   00287A  8CF2               	bsf	242,6,c	;volatile
  6358                           
  6359                           ;../rc_servo.c: 12:     INTCONbits.IPEN=0;
  6360   00287C  9AF2               	bcf	242,5,c	;volatile
  6361                           
  6362                           ;../rc_servo.c: 13:     INTCONbits.GIE=1;
  6363   00287E  8EF2               	bsf	242,7,c	;volatile
  6364   002880                     
  6365                           ; BSR set to: 14
  6366   002880  0012               	return		;funcret
  6367   002882                     __end_of_Interrupts_init:
  6368                           	callstack 0
  6369                           
  6370 ;; *************** function _HighISR *****************
  6371 ;; Defined at:
  6372 ;;		line 20 in file "../rc_servo.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;		None
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;		None
  6377 ;; Return value:  Size  Location     Type
  6378 ;;                  1    wreg      void 
  6379 ;; Registers used:
  6380 ;;		wreg, status,2, status,0, cstack
  6381 ;; Tracked objects:
  6382 ;;		On entry : 0/0
  6383 ;;		On exit  : 0/0
  6384 ;;		Unchanged: 0/0
  6385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6390 ;;Total ram usage:        0 bytes
  6391 ;; Hardware stack levels used: 1
  6392 ;; Hardware stack levels required when called: 1
  6393 ;; This function calls:
  6394 ;;		_write16bitTMR0val
  6395 ;; This function is called by:
  6396 ;;		Interrupt level 2
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400                           	psect	intcode
  6401   000008                     __pintcode:
  6402                           	callstack 0
  6403   000008                     _HighISR:
  6404                           	callstack 21
  6405                           
  6406                           ; BSR set to: 14
  6407                           ;incstack = 0
  6408   000008  825D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6409   00000A                     
  6410                           ;../rc_servo.c: 22:     if (PIR0bits.TMR0IF)
  6411   00000A  010E               	movlb	14	; () banked
  6412   00000C  AB33               	btfss	51,5,b	;volatile
  6413   00000E  EF0B  F000         	goto	i2u156_41
  6414   000012  EF0D  F000         	goto	i2u156_40
  6415   000016                     i2u156_41:
  6416   000016  EF26  F000         	goto	i2l2852
  6417   00001A                     i2u156_40:
  6418   00001A                     
  6419                           ; BSR set to: 14
  6420                           ;../rc_servo.c: 23:     {;../rc_servo.c: 24:         if(LATEbits.LATE2){
  6421   00001A  A47D               	btfss	125,2,c	;volatile
  6422   00001C  EF12  F000         	goto	i2u157_41
  6423   000020  EF14  F000         	goto	i2u157_40
  6424   000024                     i2u157_41:
  6425   000024  EF1E  F000         	goto	i2l2848
  6426   000028                     i2u157_40:
  6427   000028                     
  6428                           ; BSR set to: 14
  6429                           ;../rc_servo.c: 25:             write16bitTMR0val(65535-off_period);
  6430   000028  0100               	movlb	0	; () banked
  6431   00002A  1DB4               	comf	_off_period& (0+255),w,b
  6432   00002C  6E01               	movwf	write16bitTMR0val@tmp^0,c
  6433   00002E  1DB5               	comf	(_off_period+1)& (0+255),w,b
  6434   000030  6E02               	movwf	(write16bitTMR0val@tmp+1)^0,c
  6435   000032  EC50  F014         	call	_write16bitTMR0val	;wreg free
  6436   000036                     
  6437                           ;../rc_servo.c: 26:             LATEbits.LATE2=0;
  6438   000036  947D               	bcf	125,2,c	;volatile
  6439                           
  6440                           ;../rc_servo.c: 28:         } else {
  6441   000038  EF26  F000         	goto	i2l2852
  6442   00003C                     i2l2848:
  6443                           
  6444                           ; BSR set to: 14
  6445                           ;../rc_servo.c: 29:             write16bitTMR0val(65535-on_period);
  6446   00003C  0100               	movlb	0	; () banked
  6447   00003E  1DB6               	comf	_on_period& (0+255),w,b
  6448   000040  6E01               	movwf	write16bitTMR0val@tmp^0,c
  6449   000042  1DB7               	comf	(_on_period+1)& (0+255),w,b
  6450   000044  6E02               	movwf	(write16bitTMR0val@tmp+1)^0,c
  6451   000046  EC50  F014         	call	_write16bitTMR0val	;wreg free
  6452   00004A                     
  6453                           ;../rc_servo.c: 30:             LATEbits.LATE2=1;
  6454   00004A  847D               	bsf	125,2,c	;volatile
  6455   00004C                     i2l2852:
  6456                           
  6457                           ;../rc_servo.c: 34:     PIR0bits.TMR0IF=0;
  6458   00004C  010E               	movlb	14	; () banked
  6459   00004E  9B33               	bcf	51,5,b	;volatile
  6460   000050                     
  6461                           ; BSR set to: 14
  6462   000050  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6463   000052  0011               	retfie		f
  6464   000054                     __end_of_HighISR:
  6465                           	callstack 0
  6466                           
  6467 ;; *************** function _write16bitTMR0val *****************
  6468 ;; Defined at:
  6469 ;;		line 58 in file "../rc_servo.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;  tmp             2    0[COMRAM] unsigned int 
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;		None
  6474 ;; Return value:  Size  Location     Type
  6475 ;;                  1    wreg      void 
  6476 ;; Registers used:
  6477 ;;		wreg, status,2
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6483 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6486 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6487 ;;Total ram usage:        2 bytes
  6488 ;; Hardware stack levels used: 1
  6489 ;; This function calls:
  6490 ;;		Nothing
  6491 ;; This function is called by:
  6492 ;;		_HighISR
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text47
  6497   0028A0                     __ptext47:
  6498                           	callstack 0
  6499   0028A0                     _write16bitTMR0val:
  6500                           	callstack 21
  6501   0028A0                     
  6502                           ;../rc_servo.c: 58: void write16bitTMR0val(unsigned int tmp);../rc_servo.c: 59: {;../rc_
      +                          servo.c: 60:     TMR0H=tmp>>8;
  6503   0028A0  5002               	movf	(write16bitTMR0val@tmp+1)^0,w,c
  6504   0028A2  6ED4               	movwf	212,c	;volatile
  6505   0028A4                     
  6506                           ;../rc_servo.c: 61:     TMR0L=tmp;
  6507   0028A4  C001  FFD3         	movff	write16bitTMR0val@tmp,4051	;volatile
  6508   0028A8  0012               	return		;funcret
  6509   0028AA                     __end_of_write16bitTMR0val:
  6510                           	callstack 0
  6511                           
  6512                           	psect	rparam
  6513   000000                     
  6514                           	psect	temp
  6515   00005D                     btemp:
  6516                           	callstack 0
  6517   00005D                     	ds	1
  6518   000000                     int$flags	set	btemp
  6519   000000                     wtemp8	set	btemp+1
  6520   000000                     ttemp5	set	btemp+1
  6521   000000                     ttemp6	set	btemp+4
  6522   000000                     ttemp7	set	btemp+8
  6523                           
  6524                           	psect	idloc
  6525                           
  6526                           ;Config register IDLOC0 @ 0x200000
  6527                           ;	unspecified, using default values
  6528   200000                     	org	2097152
  6529   200000  0FFF               	dw	4095
  6530                           
  6531                           ;Config register IDLOC1 @ 0x200002
  6532                           ;	unspecified, using default values
  6533   200002                     	org	2097154
  6534   200002  0FFF               	dw	4095
  6535                           
  6536                           ;Config register IDLOC2 @ 0x200004
  6537                           ;	unspecified, using default values
  6538   200004                     	org	2097156
  6539   200004  0FFF               	dw	4095
  6540                           
  6541                           ;Config register IDLOC3 @ 0x200006
  6542                           ;	unspecified, using default values
  6543   200006                     	org	2097158
  6544   200006  0FFF               	dw	4095
  6545                           
  6546                           ;Config register IDLOC4 @ 0x200008
  6547                           ;	unspecified, using default values
  6548   200008                     	org	2097160
  6549   200008  0FFF               	dw	4095
  6550                           
  6551                           ;Config register IDLOC5 @ 0x20000A
  6552                           ;	unspecified, using default values
  6553   20000A                     	org	2097162
  6554   20000A  0FFF               	dw	4095
  6555                           
  6556                           ;Config register IDLOC6 @ 0x20000C
  6557                           ;	unspecified, using default values
  6558   20000C                     	org	2097164
  6559   20000C  0FFF               	dw	4095
  6560                           
  6561                           ;Config register IDLOC7 @ 0x20000E
  6562                           ;	unspecified, using default values
  6563   20000E                     	org	2097166
  6564   20000E  0FFF               	dw	4095
  6565                           
  6566                           	psect	config
  6567                           
  6568                           ;Config register CONFIG1L @ 0x300000
  6569                           ;	External Oscillator mode Selection bits
  6570                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6571                           ;	Power-up default value for COSC bits
  6572                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6573   300000                     	org	3145728
  6574   300000  AA                 	db	170
  6575                           
  6576                           ;Config register CONFIG1H @ 0x300001
  6577                           ;	unspecified, using default values
  6578                           ;	Clock Out Enable bit
  6579                           ;	CLKOUTEN = 0x1, unprogrammed default
  6580                           ;	Clock Switch Enable bit
  6581                           ;	CSWEN = 0x1, unprogrammed default
  6582                           ;	Fail-Safe Clock Monitor Enable bit
  6583                           ;	FCMEN = 0x1, unprogrammed default
  6584   300001                     	org	3145729
  6585   300001  FF                 	db	255
  6586                           
  6587                           ;Config register CONFIG2L @ 0x300002
  6588                           ;	unspecified, using default values
  6589                           ;	Master Clear Enable bit
  6590                           ;	MCLRE = 0x1, unprogrammed default
  6591                           ;	Power-up Timer Enable bit
  6592                           ;	PWRTE = 0x1, unprogrammed default
  6593                           ;	Low-power BOR enable bit
  6594                           ;	LPBOREN = 0x1, unprogrammed default
  6595                           ;	Brown-out Reset Enable bits
  6596                           ;	BOREN = 0x3, unprogrammed default
  6597   300002                     	org	3145730
  6598   300002  FF                 	db	255
  6599                           
  6600                           ;Config register CONFIG2H @ 0x300003
  6601                           ;	unspecified, using default values
  6602                           ;	Brown Out Reset Voltage selection bits
  6603                           ;	BORV = 0x3, unprogrammed default
  6604                           ;	ZCD Disable bit
  6605                           ;	ZCD = 0x1, unprogrammed default
  6606                           ;	PPSLOCK bit One-Way Set Enable bit
  6607                           ;	PPS1WAY = 0x1, unprogrammed default
  6608                           ;	Stack Full/Underflow Reset Enable bit
  6609                           ;	STVREN = 0x1, unprogrammed default
  6610                           ;	Debugger Enable bit
  6611                           ;	DEBUG = 0x1, unprogrammed default
  6612                           ;	Extended Instruction Set Enable bit
  6613                           ;	XINST = 0x1, unprogrammed default
  6614   300003                     	org	3145731
  6615   300003  FF                 	db	255
  6616                           
  6617                           ;Config register CONFIG3L @ 0x300004
  6618                           ;	WDT Period Select bits
  6619                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6620                           ;	WDT operating mode
  6621                           ;	WDTE = OFF, WDT Disabled
  6622   300004                     	org	3145732
  6623   300004  9F                 	db	159
  6624                           
  6625                           ;Config register CONFIG3H @ 0x300005
  6626                           ;	unspecified, using default values
  6627                           ;	WDT Window Select bits
  6628                           ;	WDTCWS = 0x7, unprogrammed default
  6629                           ;	WDT input clock selector
  6630                           ;	WDTCCS = 0x7, unprogrammed default
  6631   300005                     	org	3145733
  6632   300005  FF                 	db	255
  6633                           
  6634                           ;Config register CONFIG4L @ 0x300006
  6635                           ;	unspecified, using default values
  6636                           ;	Write Protection Block 0
  6637                           ;	WRT0 = 0x1, unprogrammed default
  6638                           ;	Write Protection Block 1
  6639                           ;	WRT1 = 0x1, unprogrammed default
  6640                           ;	Write Protection Block 2
  6641                           ;	WRT2 = 0x1, unprogrammed default
  6642                           ;	Write Protection Block 3
  6643                           ;	WRT3 = 0x1, unprogrammed default
  6644                           ;	Write Protection Block 3
  6645                           ;	WRT4 = 0x1, unprogrammed default
  6646                           ;	Write Protection Block 3
  6647                           ;	WRT5 = 0x1, unprogrammed default
  6648                           ;	Write Protection Block 3
  6649                           ;	WRT6 = 0x1, unprogrammed default
  6650                           ;	Write Protection Block 3
  6651                           ;	WRT7 = 0x1, unprogrammed default
  6652   300006                     	org	3145734
  6653   300006  FF                 	db	255
  6654                           
  6655                           ;Config register CONFIG4H @ 0x300007
  6656                           ;	unspecified, using default values
  6657                           ;	Configuration Register Write Protection bit
  6658                           ;	WRTC = 0x1, unprogrammed default
  6659                           ;	Boot Block Write Protection bit
  6660                           ;	WRTB = 0x1, unprogrammed default
  6661                           ;	Data EEPROM Write Protection bit
  6662                           ;	WRTD = 0x1, unprogrammed default
  6663                           ;	Scanner Enable bit
  6664                           ;	SCANE = 0x1, unprogrammed default
  6665                           ;	Low Voltage Programming Enable bit
  6666                           ;	LVP = 0x1, unprogrammed default
  6667   300007                     	org	3145735
  6668   300007  FF                 	db	255
  6669                           
  6670                           ;Config register CONFIG5L @ 0x300008
  6671                           ;	unspecified, using default values
  6672                           ;	UserNVM Program Memory Code Protection bit
  6673                           ;	CP = 0x1, unprogrammed default
  6674                           ;	DataNVM Memory Code Protection bit
  6675                           ;	CPD = 0x1, unprogrammed default
  6676   300008                     	org	3145736
  6677   300008  FF                 	db	255
  6678                           
  6679                           ;Config register CONFIG5H @ 0x300009
  6680                           ;	unspecified, using default values
  6681   300009                     	org	3145737
  6682   300009  FF                 	db	255
  6683                           
  6684                           ;Config register CONFIG6L @ 0x30000A
  6685                           ;	unspecified, using default values
  6686                           ;	Table Read Protection Block 0
  6687                           ;	EBTR0 = 0x1, unprogrammed default
  6688                           ;	Table Read Protection Block 1
  6689                           ;	EBTR1 = 0x1, unprogrammed default
  6690                           ;	Table Read Protection Block 2
  6691                           ;	EBTR2 = 0x1, unprogrammed default
  6692                           ;	Table Read Protection Block 3
  6693                           ;	EBTR3 = 0x1, unprogrammed default
  6694                           ;	Table Read Protection Block 4
  6695                           ;	EBTR4 = 0x1, unprogrammed default
  6696                           ;	Table Read Protection Block 5
  6697                           ;	EBTR5 = 0x1, unprogrammed default
  6698                           ;	Table Read Protection Block 6
  6699                           ;	EBTR6 = 0x1, unprogrammed default
  6700                           ;	Table Read Protection Block 7
  6701                           ;	EBTR7 = 0x1, unprogrammed default
  6702   30000A                     	org	3145738
  6703   30000A  FF                 	db	255
  6704                           
  6705                           ;Config register CONFIG6H @ 0x30000B
  6706                           ;	unspecified, using default values
  6707                           ;	Boot Block Table Read Protection bit
  6708                           ;	EBTRB = 0x1, unprogrammed default
  6709   30000B                     	org	3145739
  6710   30000B  FF                 	db	255
  6711                           tosu	equ	0xFFF
  6712                           tosh	equ	0xFFE
  6713                           tosl	equ	0xFFD
  6714                           stkptr	equ	0xFFC
  6715                           pclatu	equ	0xFFB
  6716                           pclath	equ	0xFFA
  6717                           pcl	equ	0xFF9
  6718                           tblptru	equ	0xFF8
  6719                           tblptrh	equ	0xFF7
  6720                           tblptrl	equ	0xFF6
  6721                           tablat	equ	0xFF5
  6722                           prodh	equ	0xFF4
  6723                           prodl	equ	0xFF3
  6724                           indf0	equ	0xFEF
  6725                           postinc0	equ	0xFEE
  6726                           postdec0	equ	0xFED
  6727                           preinc0	equ	0xFEC
  6728                           plusw0	equ	0xFEB
  6729                           fsr0h	equ	0xFEA
  6730                           fsr0l	equ	0xFE9
  6731                           wreg	equ	0xFE8
  6732                           indf1	equ	0xFE7
  6733                           postinc1	equ	0xFE6
  6734                           postdec1	equ	0xFE5
  6735                           preinc1	equ	0xFE4
  6736                           plusw1	equ	0xFE3
  6737                           fsr1h	equ	0xFE2
  6738                           fsr1l	equ	0xFE1
  6739                           bsr	equ	0xFE0
  6740                           indf2	equ	0xFDF
  6741                           postinc2	equ	0xFDE
  6742                           postdec2	equ	0xFDD
  6743                           preinc2	equ	0xFDC
  6744                           plusw2	equ	0xFDB
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8

Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     90      92
    BANK0           160     27     150
    BANK1           256    158     158
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2219$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 50
		 -> main@readout(BANK1[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2166$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2166$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 50
		 -> main@readout(BANK1[50]), 

    motor_action@r	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_action@l	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    spin_180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    spin_180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    S579DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    S579DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    color_processor_hard@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_processor_easy@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_read@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), main@RGB_calibrated(BANK1[8]), 


Critical Paths under _main in COMRAM

    _stop->_setMotorPWM
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _motor_action->_left_135
    _motor_action->_left_90
    _motor_action->_reverse
    _motor_action->_right_135
    _motor_action->_right_90
    _motor_action->_spin_180
    _spin_180->_setMotorPWM
    _right_90->_setMotorPWM
    _right_135->_setMotorPWM
    _reverse->_setMotorPWM
    _left_90->_setMotorPWM
    _left_135->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _color_read->_color_read_Blue
    _color_read->_color_read_Green
    _color_read->_color_read_Luminosity
    _color_read->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Luminosity->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_write16bitTMR0val

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               211   211      0   36954
                                             25 BANK0      2     2      0
                                              0 BANK1    158   158      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
               _color_processor_easy
               _color_processor_hard
                         _color_read
                            _forward
                    _initDCmotorsPWM
                         _initUSART4
                       _motor_action
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 7     3      4    2947
                                             27 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    15     12    5570
                                              0 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5219
                                             82 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    4869
                                             64 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3649
                                             29 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             18 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                             11 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              2 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             20 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              2 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              2 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     143
                                              3 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _motor_action                                         8     2      6   19012
                                             35 COMRAM     8     2      6
                           _left_135
                            _left_90
                            _reverse
                          _right_135
                           _right_90
                           _spin_180
 ---------------------------------------------------------------------------------
 (2) _spin_180                                             8     4      4    2947
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_90                                             8     4      4    3099
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_135                                            8     4      4    2947
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse                                              8     4      4    3099
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_90                                              8     4      4    3099
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_135                                             8     4      4    2947
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                              6     2      4    2947
                                             27 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    2551
                                             16 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                              8 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read                                           4     2      2     692
                                             13 COMRAM     4     2      2
                    _color_read_Blue
                   _color_read_Green
              _color_read_Luminosity
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Luminosity                                7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              3 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_processor_hard                                10     8      2     346
                                              2 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _color_processor_easy                                10     8      2     346
                                              2 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              4 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              3 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0     196
                  _write16bitTMR0val
 ---------------------------------------------------------------------------------
 (10) _write16bitTMR0val                                   2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_processor_easy
   _color_processor_hard
   _color_read
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Luminosity
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _motor_action
     _left_135
       _setMotorPWM
     _left_90
       _setMotorPWM
     _reverse
       _setMotorPWM
     _right_135
       _setMotorPWM
     _right_90
       _setMotorPWM
     _spin_180
       _setMotorPWM
   _sendStringSerial4
     _sendCharSerial4
   _setMotorPWM
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
   _stop
     _setMotorPWM

 _HighISR (ROOT)
   _write16bitTMR0val

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      56        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     9E      9E       7       61.7%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1B      96       5       93.8%
BITBIGSFRllllhh     91      0       0      40        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5A      5C       1       97.9%
BITBIGSFRllllll     32      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      49        0.0%
BITBIGSFRllllll     26      0       0      54        0.0%
BITBIGSFRllllhl     20      0       0      43        0.0%
BITBIGSFRhhhlh      1B      0       0      33        0.0%
BITBIGSFRhhl        17      0       0      35        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRhllh       11      0       0      37        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      44        0.0%
BITBIGSFRllllll      B      0       0      52        0.0%
BITBIGSFRllllll      9      0       0      51        0.0%
BITBIGSFRllllhh      8      0       0      41        0.0%
BITBIGSFRllllll      6      0       0      53        0.0%
BITBIGSFRllllll      6      0       0      48        0.0%
BITBIGSFRllllll      5      0       0      47        0.0%
BITBIGSFRhlll        5      0       0      38        0.0%
BITBIGSFRllllll      3      0       0      50        0.0%
BITBIGSFRllllll      3      0       0      46        0.0%
BITBIGSFRllh         2      0       0      39        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRllllhl      1      0       0      42        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     190      55        0.0%
DATA                 0      0     190       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Dec 10 13:14:05 2022

               _color_read_Red 24EA                _color_read_Blue 25DA                             l33 2444  
                           l42 2538                             l51 1E88                             l36 27F8  
                           l45 25D8                             l39 2588                             l48 2628  
                           l65 1D24                             l58 1DE2                             l92 278A  
                           l95 278C                             l98 27B2                   ___awdiv@sign 000E  
          ___wmul@multiplicand 0005               _color_read_Green 258A              ??_Interrupts_init 0003  
                          l101 289E                            l110 2874                            l104 288A  
                          l113 26F0                            l107 2894                            l300 1AD8  
                          l240 26AE                            l252 22E6                            l325 2880  
                          l262 21B6                            l247 1564                            l336 2818  
                          l272 1FD0                            l512 16EC                            l184 0F34  
                          l257 2370                            l185 0F48                            l282 2114  
                          l267 1F2C                            l277 2072                            l525 1850  
                          l287 2258                            l377 2836                            l386 2854  
                          l395 2760                            l629 1C66                            l389 2868  
                          l398 27D8              motor_action@color 0024                            u800 1AEC  
                          u801 1AE8                            u810 1AFE                            u811 1AFA  
                          u900 1662                            u820 1B26                            u901 165E  
                          u821 1B22                            u910 16AC                            u830 1B5C  
                          u911 16A8                            u831 1B58                            u920 1700  
                          u840 266C                            u921 16FC                            u841 2668  
                          u850 1578                            u930 1732                            u851 1574  
                          u931 172E                            u860 15AA                            u940 1770  
                          u861 15A6                            u941 176C                            u950 179A  
                          u871 15D4                            u951 1796                            u880 15F8  
                          u960 17C8                            u881 15F4                            u961 17C4  
                          u890 1622                            u970 1810                            u891 161E  
                          u971 180C                            u980 2380                            u981 237C  
                          u990 23D6                            u991 23D2                            _abs 26F2  
                          _pad 2372                            wreg 000FE8                           l1102 23EA  
                         l1110 11F0                           l1121 1390                           l1107 11A2  
                         ?_abs 0015                           l2100 1732                           l1141 2730  
                         l1109 11AA                           l2110 179A                           l2102 1752  
                         l2030 1B08                           l1134 24E8                           l3000 1A9A  
                         l2120 1810                           l2112 17C8                           l2104 1770  
                         l2032 1B26                           l2024 1ADA                           l2040 2636  
                         l2200 1136                           l1128 19AE                           l1153 1BA2  
                         l1161 266C                           l2050 1578                           l2122 1830  
                         l2114 17E8                           l2106 1778                           l1138 2728  
                         l2034 1B5C                           l2026 1AEC                           l2042 2648  
                         l2130 238C                           l2210 11B2                           l2202 114A  
                         l2060 15CE                           l2052 1598                           l2116 17FA  
                         l2108 178C                           l2140 26F2                           l1164 28AA  
                         l2028 1AFE                           l2044 264C                           l2132 23A0  
                         l2220 11EC                           l2212 11C2                           l2204 115A  
                         l2300 1896                           l1076 2496                           l2150 27D0  
                         l2070 1622                           l2062 15DA                           l2054 159C  
                         l2046 1566                           l2118 1800                           l2142 270C  
                         l2038 262A                           l2134 23B4                           l2126 2372  
                         l2230 128E                           l2222 11F8                           l2214 11C8  
                         l2206 117A                           l2310 1940                           l2302 189A  
                         l2144 278C                           l2160 1BBE                           l2400 1EE4  
                         l2080 1696                           l2072 1634                           l2064 15F8  
                         l2056 15AA                           l2048 156A                           l2136 23B8  
                         l2128 2380                           l2240 134A                           l2232 1294  
                         l2224 1200                           l2216 11D8                           l2208 1196  
                         l2304 18AA                           l2330 2774                           l2146 279C  
                         l2250 2896                           l2170 1BE4                           l2162 1BC2  
                         l2154 1BA4                           l2410 1F4E                           l2402 1EEC  
                         l2074 1662                           l2066 1600                           l2082 169C  
                         l2058 15CA                           l2090 16EE                           l2138 23D6  
                         l1098 2394                           l2242 135A                           l2226 1206  
                         l2234 12F8                           l2218 11E4                           l2314 1970  
                         l2306 18CA                           l2332 2776                           l2324 2762  
                         l2252 289A                           l2260 2890                           l2340 2580  
                         l2180 1C1A                           l2172 1BF6                           l2164 1BD0  
                         l2156 1BA8                           l2148 27B4                           l2500 2226  
                         l2420 1F70                           l2404 1EF8                           l2084 16AC  
                         l2076 1682                           l2068 1614                           l2092 16F2  
                         l2244 1360                           l2236 1312                           l2228 1288  
                         l2308 18EA                           l2334 2778                           l2326 276C  
                         l2254 286C                           l2270 26BE                           l2262 2882  
                         l2350 258A                           l2182 1C30                           l2174 1BFE  
                         l2190 1C46                           l2166 1BD8                           l2158 1BB6  
                         l2502 2242                           l2430 1FB8                           l2422 1F7C  
                         l2406 1F14                           l2086 16CC                           l2078 1684  
                         l2094 1700                           l2246 1370                           l2238 1330  
                         l2318 1982                           l2510 24A4                           l2328 2772  
                         l2256 2870                           l2336 27DC                           l2520 23F0  
                         l2600 1CD0                           l2272 26C6                           l2264 2886  
                         l2352 25D0                           l2344 24EA                           l2192 1C56  
                         l2184 1C38                           l2176 1C06                           l2168 1BDC  
                         l2280 1392                           l2424 1F88                           l2416 1F56  
                         l2408 1F2E                           l2440 1FFA                           l2432 1FD2  
                         l2504 2854                           l2096 1720                           l2512 24C0  
                         l2258 288C                           l2530 2420                           l2522 23FA  
                         l2610 1D1C                           l2602 1CDC                           l2274 26EC  
                         l2266 26B2                           l2338 253A                           l2346 2530  
                         l2194 1C5E                           l2186 1C3A                           l2178 1C14  
                         l2290 1492                           l2282 13AE                           l2426 1F90  
                         l2418 1F64                           l2370 213E                           l2362 2116  
                         l2450 2034                           l2442 2006                           l2434 1FF2  
                         l2506 2864                           l2098 1724                           l2514 24E0  
                         l2540 242A                           l2532 2422                           l2524 240A  
                         l2604 1CF2                           l2276 26EE                           l2268 26B6  
                         l2356 25DA                           l2188 1C40                           l2292 14FC  
                         l2284 1410                           l2620 2696                           l2428 1F9C  
                         l2380 2182                           l2372 2156                           l2364 2136  
                         l2452 2040                           l2444 2014                           l2508 2498  
                         l2700 22A6                           l2630 2802                           l2550 2434  
                         l2542 242C                           l2534 2424                           l2526 2414  
                         l2518 23EC                           l2606 1D08                           l2358 2620  
                         l2286 1456                           l2622 26AA                           l2614 266E  
                         l2382 219E                           l2374 2162                           l2470 20C2  
                         l2454 205C                           l2446 2020                           l2710 19B4  
                         l2198 1116                           l2294 1852                           l2702 22B2  
                         l2632 280C                           l2560 2440                           l2552 2436  
                         l2544 242E                           l2536 2426                           l2528 241E  
                         l2608 1D14                           l2288 1476                           l2624 26AC  
                         l2616 267E                           l2640 2826                           l2480 21B8  
                         l2376 216E                           l2472 20CE                           l2464 209C  
                         l2456 2074                           l2392 1EB2                           l2384 1E8A  
                         l2448 202C                           l2720 1A54                           l2712 19CC  
                         l2296 187A                           l2704 22C0                           l2626 2876  
                         l2634 2816                           l2562 2442                           l2554 2438  
                         l2546 2430                           l2538 2428                           l2570 1E40  
                         l2618 2692                           l2642 2830                           l2490 21EE  
                         l2482 21D8                           l2378 2176                           l2474 20D6  
                         l2466 20A8                           l2458 2094                           l2394 1EBE  
                         l2386 1EAA                           l2722 1A6C                           l2714 19E4  
                         l2298 1888                           l2650 2458                           l2706 22CC  
                         l2628 27FA                           l2556 243A                           l2548 2432  
                         l2580 1D8E                           l2572 1E58                           l2564 1DE4  
                         l2644 2832                           l2636 281A                           l2492 21FA  
                         l2476 20E2                           l2468 20B6                           l2396 1ECC  
                         l2716 19FC                           l2708 19B0                           l2660 2732  
                         l2652 2460                           l2900 0E50                           l2558 243C  
                         l2590 1DDA                           l2582 1D9A                           l2574 1D26  
                         l2566 1DF8                           l2670 2308                           l2646 2834  
                         l2638 2824                           l2494 2206                           l2478 20FE  
                         l2398 1ED8                           l2718 1A28                           l2726 1A84  
                         l2662 2736                           l2654 2468                           l2910 0E7C  
                         l2902 0E58                           l2584 1DB0                           l2576 1D62  
                         l2568 1E10                           l2680 2334                           l2496 2212  
                         l2488 21E0                           l2664 2744                           l2656 2484  
                         l2648 2446                           l2920 0ED6                           l2912 0E88  
                         l2904 0E5C                           l2586 1DC6                           l2578 1D78  
                         l2594 1C68                           l2682 2340                           l2498 221A  
                         l2666 2748                           l2690 227A                           l2930 0F42  
                         l2922 0EE2                           l2914 0E94                           l2906 0E70  
                         l2588 1DD2                           l2596 1CA4                           l2684 2348  
                         l2676 2310                           l2668 22E8                           l2940 0F96  
                         l2932 0F4E                           l2924 0EF6                           l2916 0E94  
                         l2908 0E74                           l2598 1CBA                           l2686 2354  
                         l2678 2328                           l2950 1006                           l2942 0FA4  
                         l2934 0F62                           l2926 0EFA                           l2918 0EA0  
                         ?_pad 0013                           l2696 2282                           l2688 225A  
                         l2952 1022                           l2944 0FBC                           l2936 0F76  
                         l2960 1050                           l2928 0F02                           l2880 0E22  
                         l2698 229A                           l2970 10C0                           l2962 1066  
                         l2954 1028                           l2946 0FD0                           l2938 0F8A  
                         l2890 0E32                           l2882 0E26                           l2972 10DA  
                         l2964 106E                           l2956 1030                           l2948 0FEC  
                         l2892 0E38                           l2884 0E2A                           l2876 0E12  
                         l2974 10E0                           l2958 1038                           l2894 0E3C  
                         l2886 0E2E                           l2878 0E16                           l2976 110A  
                         l2968 108E                           l2896 0E44                           l2888 0E32  
                         l2898 0E4C                           STR_1 0E01                           u1000 270C  
                         u1001 2708                           u1010 279C                           u1011 2798  
                         u1020 27B2                           u1100 1148                           u1021 27AE  
                         u1030 1BB6                           u1110 115A                           u1031 1BB2  
                         u1111 1156                           u1040 1BD0                           u1120 1196  
                         u1041 1BCC                           u1121 1192                           u1050 1BF6  
                         u1210 13AE                           u1130 11C2                           u1051 1BF2  
                         u1211 13AA                           u1131 11BE                           u1060 1C14  
                         u1220 1492                           u1300 1FB8                           u1140 11D8  
                         u1061 1C10                           u1221 148E                           u1301 1FB4  
                         u1141 11D4                           u1070 1C30                           u1310 205C  
                         u1150 1312                           u1071 1C2C                           u1311 2058  
                         u1151 130E                           u1400 1CBA                           u1208 26DC  
                         u1080 1C56                           u1320 20FE                           u1160 1330  
                         u1401 1CB6                           u1081 1C52                           u1321 20FA  
                         u1161 132C                           u1410 1CD0                           u1234 14EC  
                         u1330 2242                           u1170 134A                           u1090 1146  
                         u1250 187A                           u1411 1CCC                           u1235 14E8  
                         u1331 223E                           u1171 1346                           u1091 1140  
                         u1251 1876                           u1420 1CF2                           u1244 1556  
                         u1340 2864                           u1180 135A                           u1260 18CA  
                         u1421 1CEE                           u1245 1552                           u1341 2860  
                         u1181 1356                           u1261 18C6                           u1430 1D08  
                         u1190 26DA                           u1270 18EA                           u1350 24E0  
                         u1431 1D04                           u1191 26D2                           u1271 18E6  
                         u1351 24DC                           u1360 1D78                           u1280 219E  
                         u1440 2760                           u1600 0F34                   _BAUD4CONbits 000EE9  
                         u1361 1D74                           u1281 219A                           u1441 275C  
                         u1601 0F30                           _LATE 000F7D                           u1370 1D8E  
                         u1450 2370                           u1290 1F14                           u1610 0F42  
                         u1371 1D8A                           u1451 236C                           u1291 1F10  
                         u1611 0F3E                           _LATG 000F7F                           u1380 1DB0  
                         u1460 22E6                           u1620 0F76                           u1381 1DAC  
                         u1461 22E2                           u1621 0F72                           u1390 1DC6  
                         u1630 0FA4                           u1391 1DC2                           u1631 0FA0  
                         u1640 1066                           u1641 1062                           u1650 108A  
                         _T2PR 000FBC                           u1707 202E                           u1651 1086  
                         u1660 110A                           u1580 0EF6                           u1717 2066  
                         u1661 1106                           u1581 0EF2                           u1590 0F20  
                         u1807 2214                           u1727 1EE6                           u1591 0F16  
                         u1817 224C                           u1737 1F1E                           u1827 2342  
                         u1747 20D0                           u1837 1E02                           u1757 2108  
                         u1677 1044                           u1598 0F24                           u1847 1E32  
                         u1767 2170                           u1687 10CC                           u1857 1E62  
                         u1777 21A8                           u1697 22B8                           u1867 2400  
                         u1787 1F8A                           u1797 1FC2                    main@readout 0100  
                         abs@a 0015                           _dbuf 00BB                           _main 0E12  
                         _dtoa 1116                           _prec 00B2                           pad@i 001A  
                         pad@p 0017                           fsr1h 000FE2                           fsr2h 000FDA  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         pad@w 001C                           fsr2l 000FD9                           btemp 005D  
                         _stop 225A                           prodh 000FF4                           prodl 000FF3  
                         start 0054         __end_of_color_read_Red 253A                __end_of_HighISR 0054  
                 ___param_bank 000000                          ??_abs 0017                          ??_pad 0019  
              __end_of___aodiv 16EE                          ?_main 0001                          ?_dtoa 001E  
              __end_of___aomod 1852                __end_of___awdiv 1C68        ??_color_read_Luminosity 0009  
                        ?_stop 001C                ___awdiv@divisor 000B                          i2l333 0050  
                        i2l339 28A8                ___awdiv@counter 000D                   vfpfcnvrt@fmt 0043  
                        _TMR0H 000FD4                          _TMR0L 000FD3        __end_of_sendCharSerial4 286A  
   __end_of_I2C_2_Master_Start 28A0     __end_of_I2C_2_Master_Write 2876                __end_of_left_90 1FD2  
                        _flags 00B8                          _fputc 1ADA                __end_of_forward 2372  
                        _fputs 262A                          pad@fp 0013                          _width 00B0  
                        _putch 28AA                          main@j 0176                          main@k 017A  
                        dtoa@d 0020                          dtoa@i 003E                          dtoa@n 0036  
                        dtoa@p 0032                          dtoa@s 0040                          dtoa@w 0034  
                        tablat 000FF5                __end_of_reverse 21B8                          ttemp5 005E  
                        ttemp6 0061                          ttemp7 0065                          stop@i 0021  
                        status 000FD8                          wtemp8 005E                __end_of_sprintf 2498  
      __end_of_color_read_Blue 262A          _I2C_2_Master_RepStart 2882                ?_color_read_Red 0007  
              __initialization 2838                   __end_of_main 1116                   __end_of_dtoa 1392  
                 __end_of_stop 22E8                         ??_main 00F4                         ??_dtoa 0028  
                       ??_stop 0020                  __activetblptr 000003                   ?_setMotorPWM 0011  
                       ?_fputc 0003                         ?_fputs 000C               ___awdiv@dividend 0009  
                       ?_putch 0001                         _RC0PPS 000E62                         _RC4REG 000EE3  
                       _RE2PPS 000E74                         _RD5PPS 000E6F                         _RC7PPS 000E69  
                       _RD6PPS 000E70                         i2l2732 28A0                         i2l2734 28A4  
                       i2l2840 000A                         i2l2850 004A                         i2l2842 001A  
                       i2l2844 0028                         i2l2852 004C                         i2l2846 0036  
                       i2l2848 003C                      ??_HighISR 0003       __end_of_color_click_init 2446  
                       _RX4PPS 000E15                         _TX4REG 000EE4                  ??_Timer0_init 0003  
    color_processor_easy@color 0005      color_processor_hard@color 0005                   vfprintf@cfmt 0059  
             __end_of_left_135 225A                      ??___aodiv 0013                      ??___aomod 0013  
                       ___wmul 27B4                      ??___awdiv 000D                         clear_0 283E  
             ___awdiv@quotient 000F                         isa$std 000001                         pad@buf 0015  
                       dtoa@fp 001E                  main@time_flag 0172                      ??_left_90 0020  
             __end_of_right_90 1F2E                  main@time_path 0150                         fputc@c 0003  
                       fputs@c 0010                         fputs@i 0011                         fputs@s 000C  
                    ??_forward 0020               __end_of_spin_180 2074                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
             ?_sendCharSerial4 0001                      ??_reverse 0020                         putch@c 0001  
             __end_of_vfprintf 24EA                         stop@mL 001C                         stop@mR 001E  
            ??_initDCmotorsPWM 0005                      ??_sprintf 005B                     __accesstop 0060  
      __end_of__initialization 2848       __end_of_color_read_Green 25DA         ?_I2C_2_Master_RepStart 0001  
                ___rparam_used 000001               ?_color_read_Blue 0007                _Interrupts_init 2876  
               __pcstackCOMRAM 0001                  color_read@rgb 000E                  __end_of_fputc 1BA4  
                __end_of_fputs 266E                  __end_of_putch 28AC            __end_of_Timer0_init 281A  
                      ??_fputc 0007                        ??_fputs 0010                        ??_putch 0003  
                   __pbssBANK0 0060              _color_writetoaddr 27DA                   _T2CLKCONbits 000FBF  
           ?_color_writetoaddr 0005                        ?___wmul 0003                 main@color_flag 016E  
               main@color_name 0178                 main@color_path 0132                    right_135@mL 001C  
                  right_135@mR 001E            ??_color_writetoaddr 0006  __end_of_color_read_Luminosity 258A  
                      _SP4BRGH 000EE6                        _SP4BRGL 000EE5                        _PWM6DCH 000FA3  
                      _PWM7DCH 000FA0                        _SSP2ADD 000ED6                        _SSP2BUF 000ED5  
                    ?_left_135 001C                     _color_read 1DE4        __end_of_Interrupts_init 2882  
       color_writetoaddr@value 0005               ??_color_read_Red 0009                        _HighISR 0008  
    __end_of_color_writetoaddr 27FA       color_read_Luminosity@tmp 000C             _I2C_2_Master_Start 2896  
                   _initUSART4 281A             _I2C_2_Master_Write 286A                      ?_right_90 001C  
                      __Hparam 0000                        __Lparam 0000              color_read_Red@tmp 000C  
                  _Timer0_init 27FA                      ?_spin_180 001C        sendStringSerial4@string 0004  
                      ___aodiv 1566                        ___aomod 16EE                        ___awdiv 1BA4  
          ?_I2C_2_Master_Start 0001            ?_I2C_2_Master_Write 0001                     _off_period 00B4  
                    ?_vfprintf 0053                   __psmallconst 0E00                        __pcinit 2838  
                      __ramtop 0E00                        __ptext0 0E12                        __ptext1 225A  
                      __ptext2 2446                        __ptext3 2498                        __ptext4 1852  
                      __ptext5 1116                        __ptext6 2372                        __ptext7 262A  
                      __ptext8 1ADA                        __ptext9 28AA                        _left_90 1F2E  
                    _T2CONbits 000FBD                        _forward 22E8                      _T2HLTbits 000FBE  
                ?_motor_action 0024                        _reverse 2116                  _RxBufWriteCnt 005C  
                      _sprintf 2446           ??_I2C_2_Master_Start 0004                     ??_left_135 0020  
         ??_I2C_2_Master_Write 0004           end_of_initialization 2848              __end_of_right_135 2116  
           setMotorPWM@PWMduty 001A                        fputc@fp 0005                        fputs@fp 000E  
            ?_color_click_init 0001   __end_of_color_processor_easy 1DE4   __end_of_color_processor_hard 1D26  
                   ??_right_90 0020             ??_color_click_init 0007              __end_of_vfpfcnvrt 19B0  
                   ??_spin_180 0020                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
             vfpfcnvrt@convarg 0049                     ??_vfprintf 0059                _initDCmotorsPWM 266E  
                    _PORTFbits 000F8E                 ??_motor_action 002A                      _TRISCbits 000F83  
                    _TRISDbits 000F84                      _TRISEbits 000F85                      _TRISFbits 000F86  
                    _TRISGbits 000F87                      _TRISHbits 000F88                    ?_color_read 000E  
     color_writetoaddr@address 0006        ??_I2C_2_Master_RepStart 0004               ?_Interrupts_init 0001  
                   left_135@mL 001C                     left_135@mR 001E                   _EUSART4RXbuf 009C  
                 _EUSART4TXbuf 0060              ?_color_read_Green 0007                    ?_initUSART4 0001  
    sendCharSerial4@charToSend 0003                     main@motorL 018C                     main@motorR 0195  
           ??_color_read_Green 0009                    vfpfcnvrt@ap 0045                    vfpfcnvrt@cp 0051  
                  vfpfcnvrt@fp 0041                 __end_of___wmul 27DA            start_initialization 2838  
                  __end_of_abs 2732                    __end_of_pad 23EC                  _TxBufWriteCnt 00BA  
          color_read_Green@tmp 000C        __end_of_initDCmotorsPWM 26B0                    vfprintf@fmt 0055  
                     ??___wmul 0007                    __pbssCOMRAM 005B           _color_processor_easy 1D26  
         _color_processor_hard 1C68                  __pcstackBANK0 00DB                  __pcstackBANK1 0100  
             ___aodiv@dividend 0003             main@RGB_calibrated 0184                       ?_HighISR 0001  
      color_processor_easy@rgb 0003        color_processor_hard@rgb 0003          color_processor_easy@a 0009  
        color_processor_easy@b 000B          color_processor_easy@c 0007          color_processor_hard@a 0009  
        color_processor_hard@b 000B          color_processor_hard@c 0007                      _dtoa$2247 0030  
         __end_of_motor_action 1ADA                   ?_Timer0_init 0001                      __pintcode 0008  
                     ?___aodiv 0003                       ?___aomod 0003                       ?___awdiv 0009  
             ___aodiv@quotient 0015                     right_135@i 0022                     right_90@mL 001C  
                   right_90@mR 001E           I2C_2_Master_Read@ack 0005           I2C_2_Master_Read@tmp 0006  
                     ?_left_90 001C                    __smallconst 0E00                       ?_forward 001C  
            _I2C_2_Master_Idle 278C          ?_color_processor_easy 0003          ?_color_processor_hard 0003  
             main@RGB_recorded 017C              _I2C_2_Master_Init 2762              _I2C_2_Master_Read 26B0  
            _I2C_2_Master_Stop 288C                   _RxBufReadCnt 005B                       ?_reverse 001C  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 0013          _color_read_Luminosity 253A             ?_I2C_2_Master_Stop 0001  
     initDCmotorsPWM@PWMperiod 0003                       ?_sprintf 00DB              _sendStringSerial4 2732  
          ??_I2C_2_Master_Idle 0003            ??_I2C_2_Master_Init 0003            ??_I2C_2_Master_Read 0004  
               ___wmul@product 0007            ??_I2C_2_Master_Stop 0004                       _LATCbits 000F7B  
                     _LATDbits 000F7C                       _LATEbits 000F7D                       _LATFbits 000F7E  
                    _on_period 00B6                       _LATGbits 000F7F                       _LATHbits 000F80  
                    _right_135 2074                       _PIE0bits 000E29             ?_sendStringSerial4 0004  
                   spin_180@mL 001C                     spin_180@mR 001E                       i2u156_40 001A  
                     i2u156_41 0016                       i2u157_40 0028                       i2u157_41 0024  
                     _PIR0bits 000E33                       _PIR4bits 000E37               ?_initDCmotorsPWM 0003  
            ??_sendCharSerial4 0003                       _SSP2CON2 000EDA            ??_sendStringSerial4 0006  
                     _SSP2STAT 000ED8                      _vfpfcnvrt 1852      __end_of_I2C_2_Master_Idle 27B4  
    __end_of_I2C_2_Master_Init 278C      __end_of_I2C_2_Master_Read 26F2              ___wmul@multiplier 0003  
    __end_of_I2C_2_Master_Stop 2896           write16bitTMR0val@tmp 0001                   setMotorPWM@m 0011  
  I2C_2_Master_Write@data_byte 0004                      left_135@i 0022              _write16bitTMR0val 28A0  
                    left_90@mL 001C                      left_90@mR 001E              ??_color_read_Blue 0009  
                 _TxBufReadCnt 00B9             ?_write16bitTMR0val 0001                   ??_color_read 0010  
    __end_of_sendStringSerial4 2762  __end_of_I2C_2_Master_RepStart 288C             color_read_Blue@tmp 000C  
          ??_write16bitTMR0val 0003            __end_of_setMotorPWM 1566                     ?_right_135 001C  
                 ??_initUSART4 0003                       __Hrparam 0000                     vfprintf@ap 0057  
                     __Lrparam 0000                     vfprintf@fp 0053                      forward@mL 001C  
                    forward@mR 001E                     ?_vfpfcnvrt 0041             __end_of_color_read 1E8A  
              ___aodiv@divisor 000B                ___aodiv@counter 0013      __end_of_write16bitTMR0val 28AA  
                   _ANSELDbits 000EA7         ??_color_processor_easy 0005         ??_color_processor_hard 0005  
                   _ANSELFbits 000EB4                     sprintf@fmt 00DD                     _T0CON0bits 000FD5  
                   _T0CON1bits 000FD6         ?_color_read_Luminosity 0007             __end_of_initUSART4 2838  
                     __ptext10 26F2                       __ptext11 16EE                       __ptext20 1F2E  
                     __ptext12 1566                       __ptext21 21B8                       __ptext13 2732  
                     __ptext30 253A                       __ptext22 281A                       __ptext14 2852  
                     __ptext31 258A                       __ptext23 266E                       __ptext15 19B0  
                     __ptext40 288C                       __ptext32 25DA                       __ptext24 22E8  
                     __ptext16 1FD2                       __ptext41 2896                       __ptext33 2882  
                     __ptext25 1392                       __ptext17 1E8A                       __ptext42 278C  
                     __ptext34 26B0                       __ptext26 27B4                       __ptext18 2074  
                     __ptext43 2762                       __ptext35 1C68                       __ptext27 1BA4  
                     __ptext19 2116                       __ptext44 27FA                       __ptext36 1D26  
                     __ptext28 1DE4                       __ptext45 2876                       __ptext37 23EC  
                     __ptext29 24EA                       __ptext38 27DA                       __ptext47 28A0  
                     __ptext39 286A                      right_90@i 0022                       _left_135 21B8  
                 _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA                       _right_90 1E8A  
                    reverse@mL 001C                      reverse@mR 001E                      spin_180@i 0022  
                     _spin_180 1FD2                       isa$xinst 000000                     _RC4STAbits 000EE7  
                     int$flags 005D                  motor_action@l 0026                  motor_action@r 0028  
                     _vfprintf 2498                       left_90@i 0022                       main@time 0174  
             ___aomod@dividend 0003                main@time_return 0170                     _INTCONbits 000FF2  
                 _motor_action 19B0                       forward@i 0020                    _setMotorPWM 1392  
                  _PWM6CONbits 000FA4                    _PWM7CONbits 000FA1                       intlevel2 0000  
                    sprintf@ap 00E7                    ??_right_135 0020                       reverse@i 0022  
              ___aomod@divisor 000B                    ??_vfpfcnvrt 0047                ___aomod@counter 0013  
             _color_click_init 23EC                       sprintf@f 00E9                       sprintf@s 00DB  
                   _SSP2DATPPS 000E1D                     _SSP2CLKPPS 000E1C                     _TX4STAbits 000EE8  
                 ___aodiv@sign 0014                _sendCharSerial4 2852                   ___aomod@sign 0014  
