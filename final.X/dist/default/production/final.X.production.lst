

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Dec 10 13:08:32 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Version 2.35
    67                           ; Generated 05/05/2021 GMT
    68                           ; 
    69                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution. Publication is not required when
    83                           ;        this file is used in an embedded application.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F67K40 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101   000000                     _TX4REG	set	3812
   102   000000                     _RC4STAbits	set	3815
   103   000000                     _SP4BRGH	set	3814
   104   000000                     _TRISGbits	set	3975
   105   000000                     _TRISEbits	set	3973
   106   000000                     _LATFbits	set	3966
   107   000000                     _TRISFbits	set	3974
   108   000000                     _LATG	set	3967
   109   000000                     _LATE	set	3965
   110   000000                     _SSP2CON2bits	set	3802
   111   000000                     _LATGbits	set	3967
   112   000000                     _LATEbits	set	3965
   113   000000                     _RX4PPS	set	3605
   114   000000                     _SSP2CLKPPS	set	3612
   115   000000                     _SSP2DATPPS	set	3613
   116   000000                     _ANSELDbits	set	3751
   117   000000                     _ANSELFbits	set	3764
   118   000000                     _LATDbits	set	3964
   119   000000                     _LATHbits	set	3968
   120   000000                     _TRISDbits	set	3972
   121   000000                     _TRISHbits	set	3976
   122   000000                     _PORTFbits	set	3982
   123   000000                     _PWM7DCH	set	4000
   124   000000                     _PWM6DCH	set	4003
   125   000000                     _TRISCbits	set	3971
   126   000000                     _SSP2BUF	set	3797
   127   000000                     _SSP2ADD	set	3798
   128   000000                     _SSP2CON1bits	set	3801
   129   000000                     _RC4REG	set	3811
   130   000000                     _SP4BRGL	set	3813
   131   000000                     _TX4STAbits	set	3816
   132   000000                     _BAUD4CONbits	set	3817
   133   000000                     _LATCbits	set	3963
   134   000000                     _SSP2CON2	set	3802
   135   000000                     _SSP2STAT	set	3800
   136   000000                     _PIE0bits	set	3625
   137   000000                     _RC7PPS	set	3689
   138   000000                     _RD5PPS	set	3695
   139   000000                     _RE2PPS	set	3700
   140   000000                     _RD6PPS	set	3696
   141   000000                     _PWM6CONbits	set	4004
   142   000000                     _T2PR	set	4028
   143   000000                     _T2CONbits	set	4029
   144   000000                     _PWM7CONbits	set	4001
   145   000000                     _TMR0L	set	4051
   146   000000                     _TMR0H	set	4052
   147   000000                     _T0CON0bits	set	4053
   148   000000                     _T0CON1bits	set	4054
   149   000000                     _INTCONbits	set	4082
   150   000000                     _T2CLKCONbits	set	4031
   151   000000                     _T2HLTbits	set	4030
   152   000000                     _PIR0bits	set	3635
   153   000000                     _PIR4bits	set	3639
   154   000000                     _RC0PPS	set	3682
   155                           
   156                           	psect	smallconst
   157   000E00                     __psmallconst:
   158                           	callstack 0
   159   000E00  00                 	db	0
   160   000E01                     STR_1:
   161   000E01  25                 	db	37
   162   000E02  64                 	db	100	;'d'
   163   000E03  20                 	db	32
   164   000E04  25                 	db	37
   165   000E05  64                 	db	100	;'d'
   166   000E06  20                 	db	32
   167   000E07  25                 	db	37
   168   000E08  64                 	db	100	;'d'
   169   000E09  20                 	db	32
   170   000E0A  25                 	db	37
   171   000E0B  64                 	db	100	;'d'
   172   000E0C  20                 	db	32
   173   000E0D  0D                 	db	13
   174   000E0E  0A                 	db	10
   175   000E0F  00                 	db	0
   176   000E10  00                 	db	0	; dummy byte at the end
   177   000000                     
   178                           ; #config settings
   179                           
   180                           	psect	cinit
   181   0027E8                     __pcinit:
   182                           	callstack 0
   183   0027E8                     start_initialization:
   184                           	callstack 0
   185   0027E8                     __initialization:
   186                           	callstack 0
   187                           
   188                           ; Clear objects allocated to BANK0 (123 bytes)
   189   0027E8  EE00  F060         	lfsr	0,__pbssBANK0
   190   0027EC  0E7B               	movlw	123
   191   0027EE                     clear_0:
   192   0027EE  6AEE               	clrf	postinc0,c
   193   0027F0  06E8               	decf	wreg,f,c
   194   0027F2  E1FD               	bnz	clear_0
   195                           
   196                           ; Clear objects allocated to COMRAM (2 bytes)
   197   0027F4  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   198   0027F6  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   199   0027F8                     end_of_initialization:
   200                           	callstack 0
   201   0027F8                     __end_of__initialization:
   202                           	callstack 0
   203   0027F8  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   204   0027FA  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   205   0027FC  0100               	movlb	0
   206   0027FE  EF09  F007         	goto	_main	;jump to C main() function
   207                           
   208                           	psect	bssCOMRAM
   209   00005B                     __pbssCOMRAM:
   210                           	callstack 0
   211   00005B                     _RxBufReadCnt:
   212                           	callstack 0
   213   00005B                     	ds	1
   214   00005C                     _RxBufWriteCnt:
   215                           	callstack 0
   216   00005C                     	ds	1
   217                           
   218                           	psect	bssBANK0
   219   000060                     __pbssBANK0:
   220                           	callstack 0
   221   000060                     _EUSART4TXbuf:
   222                           	callstack 0
   223   000060                     	ds	60
   224   00009C                     _EUSART4RXbuf:
   225                           	callstack 0
   226   00009C                     	ds	20
   227   0000B0                     _width:
   228                           	callstack 0
   229   0000B0                     	ds	2
   230   0000B2                     _prec:
   231                           	callstack 0
   232   0000B2                     	ds	2
   233   0000B4                     _off_period:
   234                           	callstack 0
   235   0000B4                     	ds	2
   236   0000B6                     _on_period:
   237                           	callstack 0
   238   0000B6                     	ds	2
   239   0000B8                     _flags:
   240                           	callstack 0
   241   0000B8                     	ds	1
   242   0000B9                     _TxBufReadCnt:
   243                           	callstack 0
   244   0000B9                     	ds	1
   245   0000BA                     _TxBufWriteCnt:
   246                           	callstack 0
   247   0000BA                     	ds	1
   248   0000BB                     _dbuf:
   249                           	callstack 0
   250   0000BB                     	ds	32
   251                           
   252                           	psect	cstackBANK1
   253   000100                     __pcstackBANK1:
   254                           	callstack 0
   255   000100                     main@readout:
   256                           	callstack 0
   257                           
   258                           ; 50 bytes @ 0x0
   259   000100                     	ds	50
   260   000132                     main@time_path:
   261                           	callstack 0
   262                           
   263                           ; 30 bytes @ 0x32
   264   000132                     	ds	30
   265   000150                     main@color_path:
   266                           	callstack 0
   267                           
   268                           ; 30 bytes @ 0x50
   269   000150                     	ds	30
   270   00016E                     main@color_flag:
   271                           	callstack 0
   272                           
   273                           ; 2 bytes @ 0x6E
   274   00016E                     	ds	2
   275   000170                     main@time_flag:
   276                           	callstack 0
   277                           
   278                           ; 2 bytes @ 0x70
   279   000170                     	ds	2
   280   000172                     main@time:
   281                           	callstack 0
   282                           
   283                           ; 2 bytes @ 0x72
   284   000172                     	ds	2
   285   000174                     main@j:
   286                           	callstack 0
   287                           
   288                           ; 2 bytes @ 0x74
   289   000174                     	ds	2
   290   000176                     main@color_name:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x76
   294   000176                     	ds	2
   295   000178                     main@k:
   296                           	callstack 0
   297                           
   298                           ; 2 bytes @ 0x78
   299   000178                     	ds	2
   300   00017A                     main@RGB_recorded:
   301                           	callstack 0
   302                           
   303                           ; 8 bytes @ 0x7A
   304   00017A                     	ds	8
   305   000182                     main@RGB_calibrated:
   306                           	callstack 0
   307                           
   308                           ; 8 bytes @ 0x82
   309   000182                     	ds	8
   310   00018A                     main@motorL:
   311                           	callstack 0
   312                           
   313                           ; 9 bytes @ 0x8A
   314   00018A                     	ds	9
   315   000193                     main@motorR:
   316                           	callstack 0
   317                           
   318                           ; 9 bytes @ 0x93
   319   000193                     	ds	9
   320                           
   321                           	psect	cstackBANK0
   322   0000DB                     __pcstackBANK0:
   323                           	callstack 0
   324   0000DB                     ?_sprintf:
   325                           	callstack 0
   326   0000DB                     sprintf@s:
   327                           	callstack 0
   328                           
   329                           ; 2 bytes @ 0x0
   330   0000DB                     	ds	2
   331   0000DD                     sprintf@fmt:
   332                           	callstack 0
   333                           
   334                           ; 2 bytes @ 0x2
   335   0000DD                     	ds	10
   336   0000E7                     sprintf@ap:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0xC
   340   0000E7                     	ds	2
   341   0000E9                     sprintf@f:
   342                           	callstack 0
   343                           
   344                           ; 11 bytes @ 0xE
   345   0000E9                     	ds	11
   346   0000F4                     ??_main:
   347                           
   348                           ; 1 bytes @ 0x19
   349   0000F4                     	ds	2
   350                           
   351                           	psect	cstackCOMRAM
   352   000001                     __pcstackCOMRAM:
   353                           	callstack 0
   354   000001                     write16bitTMR0val@tmp:
   355                           	callstack 0
   356                           
   357                           ; 2 bytes @ 0x0
   358   000001                     	ds	2
   359   000003                     ??_I2C_2_Master_Idle:
   360   000003                     ?_color_processor_easy:
   361                           	callstack 0
   362   000003                     ?_color_processor_hard:
   363                           	callstack 0
   364   000003                     ?___wmul:
   365                           	callstack 0
   366   000003                     ?___aodiv:
   367                           	callstack 0
   368   000003                     ?___aomod:
   369                           	callstack 0
   370   000003                     sendCharSerial4@charToSend:
   371                           	callstack 0
   372   000003                     color_processor_easy@rgb:
   373                           	callstack 0
   374   000003                     color_processor_hard@rgb:
   375                           	callstack 0
   376   000003                     initDCmotorsPWM@PWMperiod:
   377                           	callstack 0
   378   000003                     ___wmul@multiplier:
   379                           	callstack 0
   380   000003                     fputc@c:
   381                           	callstack 0
   382   000003                     ___aodiv@dividend:
   383                           	callstack 0
   384   000003                     ___aomod@dividend:
   385                           	callstack 0
   386                           
   387                           ; 8 bytes @ 0x2
   388   000003                     	ds	1
   389   000004                     ??_I2C_2_Master_Read:
   390   000004                     I2C_2_Master_Write@data_byte:
   391                           	callstack 0
   392   000004                     sendStringSerial4@string:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0x3
   396   000004                     	ds	1
   397   000005                     color_writetoaddr@value:
   398                           	callstack 0
   399   000005                     I2C_2_Master_Read@ack:
   400                           	callstack 0
   401   000005                     color_processor_easy@color:
   402                           	callstack 0
   403   000005                     color_processor_hard@color:
   404                           	callstack 0
   405   000005                     ___wmul@multiplicand:
   406                           	callstack 0
   407   000005                     fputc@fp:
   408                           	callstack 0
   409                           
   410                           ; 2 bytes @ 0x4
   411   000005                     	ds	1
   412   000006                     color_writetoaddr@address:
   413                           	callstack 0
   414   000006                     I2C_2_Master_Read@tmp:
   415                           	callstack 0
   416                           
   417                           ; 1 bytes @ 0x5
   418   000006                     	ds	1
   419   000007                     ??_fputc:
   420   000007                     ??_color_click_init:
   421   000007                     ?_color_read_Luminosity:
   422                           	callstack 0
   423   000007                     ?_color_read_Red:
   424                           	callstack 0
   425   000007                     ?_color_read_Green:
   426                           	callstack 0
   427   000007                     ?_color_read_Blue:
   428                           	callstack 0
   429   000007                     color_processor_easy@c:
   430                           	callstack 0
   431   000007                     color_processor_hard@c:
   432                           	callstack 0
   433   000007                     ___wmul@product:
   434                           	callstack 0
   435                           
   436                           ; 2 bytes @ 0x6
   437   000007                     	ds	2
   438   000009                     ??_color_read_Luminosity:
   439   000009                     ??_color_read_Red:
   440   000009                     ??_color_read_Green:
   441   000009                     ??_color_read_Blue:
   442   000009                     ?___awdiv:
   443                           	callstack 0
   444   000009                     color_processor_easy@a:
   445                           	callstack 0
   446   000009                     color_processor_hard@a:
   447                           	callstack 0
   448   000009                     ___awdiv@dividend:
   449                           	callstack 0
   450                           
   451                           ; 2 bytes @ 0x8
   452   000009                     	ds	2
   453   00000B                     color_processor_easy@b:
   454                           	callstack 0
   455   00000B                     color_processor_hard@b:
   456                           	callstack 0
   457   00000B                     ___awdiv@divisor:
   458                           	callstack 0
   459   00000B                     ___aodiv@divisor:
   460                           	callstack 0
   461   00000B                     ___aomod@divisor:
   462                           	callstack 0
   463                           
   464                           ; 8 bytes @ 0xA
   465   00000B                     	ds	1
   466   00000C                     color_read_Luminosity@tmp:
   467                           	callstack 0
   468   00000C                     color_read_Red@tmp:
   469                           	callstack 0
   470   00000C                     color_read_Green@tmp:
   471                           	callstack 0
   472   00000C                     color_read_Blue@tmp:
   473                           	callstack 0
   474   00000C                     fputs@s:
   475                           	callstack 0
   476                           
   477                           ; 2 bytes @ 0xB
   478   00000C                     	ds	1
   479   00000D                     ___awdiv@counter:
   480                           	callstack 0
   481                           
   482                           ; 1 bytes @ 0xC
   483   00000D                     	ds	1
   484   00000E                     ___awdiv@sign:
   485                           	callstack 0
   486   00000E                     color_read@rgb:
   487                           	callstack 0
   488   00000E                     fputs@fp:
   489                           	callstack 0
   490                           
   491                           ; 2 bytes @ 0xD
   492   00000E                     	ds	1
   493   00000F                     ___awdiv@quotient:
   494                           	callstack 0
   495                           
   496                           ; 2 bytes @ 0xE
   497   00000F                     	ds	1
   498   000010                     ??_color_read:
   499   000010                     fputs@c:
   500                           	callstack 0
   501                           
   502                           ; 1 bytes @ 0xF
   503   000010                     	ds	1
   504   000011                     setMotorPWM@m:
   505                           	callstack 0
   506   000011                     fputs@i:
   507                           	callstack 0
   508                           
   509                           ; 2 bytes @ 0x10
   510   000011                     	ds	2
   511   000013                     ??_setMotorPWM:
   512   000013                     ___aodiv@counter:
   513                           	callstack 0
   514   000013                     ___aomod@counter:
   515                           	callstack 0
   516   000013                     pad@fp:
   517                           	callstack 0
   518                           
   519                           ; 2 bytes @ 0x12
   520   000013                     	ds	1
   521   000014                     ___aodiv@sign:
   522                           	callstack 0
   523   000014                     ___aomod@sign:
   524                           	callstack 0
   525                           
   526                           ; 1 bytes @ 0x13
   527   000014                     	ds	1
   528   000015                     ?_abs:
   529                           	callstack 0
   530   000015                     pad@buf:
   531                           	callstack 0
   532   000015                     abs@a:
   533                           	callstack 0
   534   000015                     ___aodiv@quotient:
   535                           	callstack 0
   536                           
   537                           ; 8 bytes @ 0x14
   538   000015                     	ds	2
   539   000017                     ??_abs:
   540   000017                     pad@p:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0x16
   544   000017                     	ds	2
   545   000019                     ??_pad:
   546                           
   547                           ; 1 bytes @ 0x18
   548   000019                     	ds	1
   549   00001A                     setMotorPWM@PWMduty:
   550                           	callstack 0
   551   00001A                     pad@i:
   552                           	callstack 0
   553                           
   554                           ; 2 bytes @ 0x19
   555   00001A                     	ds	2
   556   00001C                     stop@mL:
   557                           	callstack 0
   558   00001C                     forward@mL:
   559                           	callstack 0
   560   00001C                     reverse@mL:
   561                           	callstack 0
   562   00001C                     right_90@mL:
   563                           	callstack 0
   564   00001C                     left_90@mL:
   565                           	callstack 0
   566   00001C                     spin_180@mL:
   567                           	callstack 0
   568   00001C                     right_135@mL:
   569                           	callstack 0
   570   00001C                     left_135@mL:
   571                           	callstack 0
   572   00001C                     pad@w:
   573                           	callstack 0
   574                           
   575                           ; 2 bytes @ 0x1B
   576   00001C                     	ds	2
   577   00001E                     stop@mR:
   578                           	callstack 0
   579   00001E                     forward@mR:
   580                           	callstack 0
   581   00001E                     reverse@mR:
   582                           	callstack 0
   583   00001E                     right_90@mR:
   584                           	callstack 0
   585   00001E                     left_90@mR:
   586                           	callstack 0
   587   00001E                     spin_180@mR:
   588                           	callstack 0
   589   00001E                     right_135@mR:
   590                           	callstack 0
   591   00001E                     left_135@mR:
   592                           	callstack 0
   593   00001E                     dtoa@fp:
   594                           	callstack 0
   595                           
   596                           ; 2 bytes @ 0x1D
   597   00001E                     	ds	2
   598   000020                     ??_stop:
   599   000020                     ??_reverse:
   600   000020                     ??_right_90:
   601   000020                     ??_left_90:
   602   000020                     ??_spin_180:
   603   000020                     ??_right_135:
   604   000020                     ??_left_135:
   605   000020                     forward@i:
   606                           	callstack 0
   607   000020                     dtoa@d:
   608                           	callstack 0
   609                           
   610                           ; 8 bytes @ 0x1F
   611   000020                     	ds	1
   612   000021                     stop@i:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x20
   616   000021                     	ds	1
   617   000022                     reverse@i:
   618                           	callstack 0
   619   000022                     right_90@i:
   620                           	callstack 0
   621   000022                     left_90@i:
   622                           	callstack 0
   623   000022                     spin_180@i:
   624                           	callstack 0
   625   000022                     right_135@i:
   626                           	callstack 0
   627   000022                     left_135@i:
   628                           	callstack 0
   629                           
   630                           ; 2 bytes @ 0x21
   631   000022                     	ds	2
   632   000024                     motor_action@color:
   633                           	callstack 0
   634                           
   635                           ; 2 bytes @ 0x23
   636   000024                     	ds	2
   637   000026                     motor_action@l:
   638                           	callstack 0
   639                           
   640                           ; 2 bytes @ 0x25
   641   000026                     	ds	2
   642   000028                     ??_dtoa:
   643   000028                     motor_action@r:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x27
   647   000028                     	ds	2
   648   00002A                     ??_motor_action:
   649                           
   650                           ; 1 bytes @ 0x29
   651   00002A                     	ds	6
   652   000030                     _dtoa$2246:
   653                           	callstack 0
   654                           
   655                           ; 2 bytes @ 0x2F
   656   000030                     	ds	2
   657   000032                     dtoa@p:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0x31
   661   000032                     	ds	2
   662   000034                     dtoa@w:
   663                           	callstack 0
   664                           
   665                           ; 2 bytes @ 0x33
   666   000034                     	ds	2
   667   000036                     dtoa@n:
   668                           	callstack 0
   669                           
   670                           ; 8 bytes @ 0x35
   671   000036                     	ds	8
   672   00003E                     dtoa@i:
   673                           	callstack 0
   674                           
   675                           ; 2 bytes @ 0x3D
   676   00003E                     	ds	2
   677   000040                     dtoa@s:
   678                           	callstack 0
   679                           
   680                           ; 1 bytes @ 0x3F
   681   000040                     	ds	1
   682   000041                     vfpfcnvrt@fp:
   683                           	callstack 0
   684                           
   685                           ; 2 bytes @ 0x40
   686   000041                     	ds	2
   687   000043                     vfpfcnvrt@fmt:
   688                           	callstack 0
   689                           
   690                           ; 2 bytes @ 0x42
   691   000043                     	ds	2
   692   000045                     vfpfcnvrt@ap:
   693                           	callstack 0
   694                           
   695                           ; 2 bytes @ 0x44
   696   000045                     	ds	2
   697   000047                     ??_vfpfcnvrt:
   698                           
   699                           ; 1 bytes @ 0x46
   700   000047                     	ds	2
   701   000049                     vfpfcnvrt@convarg:
   702                           	callstack 0
   703                           
   704                           ; 8 bytes @ 0x48
   705   000049                     	ds	8
   706   000051                     vfpfcnvrt@cp:
   707                           	callstack 0
   708                           
   709                           ; 2 bytes @ 0x50
   710   000051                     	ds	2
   711   000053                     ?_vfprintf:
   712                           	callstack 0
   713   000053                     vfprintf@fp:
   714                           	callstack 0
   715                           
   716                           ; 2 bytes @ 0x52
   717   000053                     	ds	2
   718   000055                     vfprintf@fmt:
   719                           	callstack 0
   720                           
   721                           ; 2 bytes @ 0x54
   722   000055                     	ds	2
   723   000057                     vfprintf@ap:
   724                           	callstack 0
   725                           
   726                           ; 2 bytes @ 0x56
   727   000057                     	ds	2
   728   000059                     vfprintf@cfmt:
   729                           	callstack 0
   730                           
   731                           ; 2 bytes @ 0x58
   732   000059                     	ds	2
   733   00005B                     
   734                           ; 1 bytes @ 0x5A
   735 ;;
   736 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   737 ;;
   738 ;; *************** function _main *****************
   739 ;; Defined at:
   740 ;;		line 20 in file "../main.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;		None
   743 ;; Auto vars:     Size  Location     Type
   744 ;;  k               2  120[BANK1 ] int 
   745 ;;  readout        50    0[BANK1 ] unsigned char [50]
   746 ;;  color_calibr   48    0        unsigned int [24]
   747 ;;  color_path     30   80[BANK1 ] unsigned int [15]
   748 ;;  time_path      30   50[BANK1 ] unsigned int [15]
   749 ;;  motorR          9  147[BANK1 ] struct DC_motor
   750 ;;  motorL          9  138[BANK1 ] struct DC_motor
   751 ;;  RGB_calibrat    8  130[BANK1 ] struct RGB_val
   752 ;;  RGB_recorded    8  122[BANK1 ] struct RGB_val
   753 ;;  color_name      2  118[BANK1 ] unsigned int 
   754 ;;  j               2  116[BANK1 ] int 
   755 ;;  time            2  114[BANK1 ] unsigned int 
   756 ;;  time_flag       2  112[BANK1 ] unsigned int 
   757 ;;  color_flag      2  110[BANK1 ] unsigned int 
   758 ;;  home            2    0        unsigned int 
   759 ;;  PWMcycle        1    0        unsigned char 
   760 ;; Return value:  Size  Location     Type
   761 ;;                  1    wreg      void 
   762 ;; Registers used:
   763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   764 ;; Tracked objects:
   765 ;;		On entry : 0/0
   766 ;;		On exit  : 0/0
   767 ;;		Unchanged: 0/0
   768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   770 ;;      Locals:         0       0     156       0       0       0       0       0       0       0       0       0       
      +0       0       0
   771 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   772 ;;      Totals:         0       2     156       0       0       0       0       0       0       0       0       0       
      +0       0       0
   773 ;;Total ram usage:      158 bytes
   774 ;; Hardware stack levels required when called: 10
   775 ;; This function calls:
   776 ;;		_I2C_2_Master_Init
   777 ;;		_Interrupts_init
   778 ;;		_Timer0_init
   779 ;;		_color_click_init
   780 ;;		_color_processor_easy
   781 ;;		_color_processor_hard
   782 ;;		_color_read
   783 ;;		_forward
   784 ;;		_initDCmotorsPWM
   785 ;;		_initUSART4
   786 ;;		_motor_action
   787 ;;		_sendStringSerial4
   788 ;;		_setMotorPWM
   789 ;;		_sprintf
   790 ;;		_stop
   791 ;; This function is called by:
   792 ;;		Startup code after reset
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           	psect	text0
   797   000E12                     __ptext0:
   798                           	callstack 0
   799   000E12                     _main:
   800                           	callstack 21
   801   000E12                     
   802                           ;../main.c: 22:     color_click_init();
   803   000E12  ECCE  F011         	call	_color_click_init	;wreg free
   804   000E16                     
   805                           ;../main.c: 23:     initDCmotorsPWM(20);
   806   000E16  0E00               	movlw	0
   807   000E18  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   808   000E1A  0E14               	movlw	20
   809   000E1C  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   810   000E1E  EC0F  F013         	call	_initDCmotorsPWM	;wreg free
   811   000E22                     
   812                           ;../main.c: 24:     Interrupts_init();
   813   000E22  EC13  F014         	call	_Interrupts_init	;wreg free
   814   000E26                     
   815                           ;../main.c: 25:     Timer0_init();
   816   000E26  ECD5  F013         	call	_Timer0_init	;wreg free
   817   000E2A                     
   818                           ;../main.c: 26:     I2C_2_Master_Init();
   819   000E2A  EC89  F013         	call	_I2C_2_Master_Init	;wreg free
   820   000E2E                     
   821                           ;../main.c: 27:     initUSART4();
   822   000E2E  ECE5  F013         	call	_initUSART4	;wreg free
   823   000E32                     
   824                           ;../main.c: 32:     motorL.power = 0;
   825   000E32  0E00               	movlw	0
   826   000E34  0101               	movlb	1	; () banked
   827   000E36  6F8A               	movwf	main@motorL& (0+255),b
   828   000E38                     
   829                           ; BSR set to: 1
   830                           ;../main.c: 33:     motorL.direction = 0;
   831   000E38  0E00               	movlw	0
   832   000E3A  6F8B               	movwf	(main@motorL+1)& (0+255),b
   833   000E3C                     
   834                           ; BSR set to: 1
   835                           ;../main.c: 34:     motorL.dutyHighByte = (unsigned char *)(&PWM6DCH);
   836   000E3C  0EA3               	movlw	163
   837   000E3E  6F8C               	movwf	(main@motorL+2)& (0+255),b
   838   000E40  0E0F               	movlw	15
   839   000E42  6F8D               	movwf	(main@motorL+3)& (0+255),b
   840   000E44                     
   841                           ; BSR set to: 1
   842                           ;../main.c: 35:     motorL.dir_LAT = (unsigned char *)(&LATE);
   843   000E44  0E7D               	movlw	125
   844   000E46  6F8E               	movwf	(main@motorL+4)& (0+255),b
   845   000E48  0E0F               	movlw	15
   846   000E4A  6F8F               	movwf	(main@motorL+5)& (0+255),b
   847   000E4C                     
   848                           ; BSR set to: 1
   849                           ;../main.c: 36:     motorL.dir_pin = 4;
   850   000E4C  0E04               	movlw	4
   851   000E4E  6F90               	movwf	(main@motorL+6)& (0+255),b
   852   000E50                     
   853                           ; BSR set to: 1
   854                           ;../main.c: 37:     motorL.PWMperiod = PWMcycle;
   855   000E50  0E00               	movlw	0
   856   000E52  6F92               	movwf	(main@motorL+8)& (0+255),b
   857   000E54  0EC8               	movlw	200
   858   000E56  6F91               	movwf	(main@motorL+7)& (0+255),b
   859   000E58                     
   860                           ; BSR set to: 1
   861                           ;../main.c: 38:     motorR.power = 0;
   862   000E58  0E00               	movlw	0
   863   000E5A  6F93               	movwf	main@motorR& (0+255),b
   864   000E5C                     
   865                           ; BSR set to: 1
   866                           ;../main.c: 39:     motorR.direction = 0;
   867   000E5C  0E00               	movlw	0
   868   000E5E  6F94               	movwf	(main@motorR+1)& (0+255),b
   869                           
   870                           ;../main.c: 40:     motorR.dutyHighByte = (unsigned char *)(&PWM7DCH);
   871   000E60  0EA0               	movlw	160
   872   000E62  6F95               	movwf	(main@motorR+2)& (0+255),b
   873   000E64  0E0F               	movlw	15
   874   000E66  6F96               	movwf	(main@motorR+3)& (0+255),b
   875                           
   876                           ;../main.c: 41:     motorR.dir_LAT = (unsigned char *)(&LATG);
   877   000E68  0E7F               	movlw	127
   878   000E6A  6F97               	movwf	(main@motorR+4)& (0+255),b
   879   000E6C  0E0F               	movlw	15
   880   000E6E  6F98               	movwf	(main@motorR+5)& (0+255),b
   881   000E70                     
   882                           ; BSR set to: 1
   883                           ;../main.c: 42:     motorR.dir_pin = 6;
   884   000E70  0E06               	movlw	6
   885   000E72  6F99               	movwf	(main@motorR+6)& (0+255),b
   886   000E74                     
   887                           ; BSR set to: 1
   888                           ;../main.c: 43:     motorR.PWMperiod = PWMcycle;
   889   000E74  0E00               	movlw	0
   890   000E76  6F9B               	movwf	(main@motorR+8)& (0+255),b
   891   000E78  0EC8               	movlw	200
   892   000E7A  6F9A               	movwf	(main@motorR+7)& (0+255),b
   893   000E7C                     
   894                           ; BSR set to: 1
   895                           ;../main.c: 44:     setMotorPWM(&motorL);
   896   000E7C  0E8A               	movlw	low main@motorL
   897   000E7E  6E11               	movwf	setMotorPWM@m^0,c
   898   000E80  0E01               	movlw	high main@motorL
   899   000E82  6E12               	movwf	(setMotorPWM@m+1)^0,c
   900   000E84  ECA1  F009         	call	_setMotorPWM	;wreg free
   901   000E88                     
   902                           ;../main.c: 45:     setMotorPWM(&motorR);
   903   000E88  0E93               	movlw	low main@motorR
   904   000E8A  6E11               	movwf	setMotorPWM@m^0,c
   905   000E8C  0E01               	movlw	high main@motorR
   906   000E8E  6E12               	movwf	(setMotorPWM@m+1)^0,c
   907   000E90  ECA1  F009         	call	_setMotorPWM	;wreg free
   908   000E94                     
   909                           ;../main.c: 59:     unsigned int color_calibrated[24];;../main.c: 60:     struct RGB_val
      +                           RGB_calibrated;;../main.c: 63:     color_read(&RGB_calibrated);
   910   000E94  0E82               	movlw	low main@RGB_calibrated
   911   000E96  6E0E               	movwf	color_read@rgb^0,c
   912   000E98  0E01               	movlw	high main@RGB_calibrated
   913   000E9A  6E0F               	movwf	(color_read@rgb+1)^0,c
   914   000E9C  ECCA  F00E         	call	_color_read	;wreg free
   915   000EA0                     
   916                           ;../main.c: 64:     char readout[50];;../main.c: 65:     sprintf(readout,"%d %d %d %d \r
      +                          \n", RGB_calibrated.L,RGB_calibrated.R,RGB_calibrated.G,RGB_calibrated.B);
   917   000EA0  0E00               	movlw	low main@readout
   918   000EA2  0100               	movlb	0	; () banked
   919   000EA4  6FDB               	movwf	sprintf@s& (0+255),b
   920   000EA6  0E01               	movlw	high main@readout
   921   000EA8  6FDC               	movwf	(sprintf@s+1)& (0+255),b
   922   000EAA  0E01               	movlw	low STR_1
   923   000EAC  6FDD               	movwf	sprintf@fmt& (0+255),b
   924   000EAE  0E0E               	movlw	high STR_1
   925   000EB0  6FDE               	movwf	(sprintf@fmt+1)& (0+255),b
   926   000EB2  C182  F0DF         	movff	main@RGB_calibrated,?_sprintf+4
   927   000EB6  C183  F0E0         	movff	main@RGB_calibrated+1,?_sprintf+5
   928   000EBA  C184  F0E1         	movff	main@RGB_calibrated+2,?_sprintf+6
   929   000EBE  C185  F0E2         	movff	main@RGB_calibrated+3,?_sprintf+7
   930   000EC2  C186  F0E3         	movff	main@RGB_calibrated+4,?_sprintf+8
   931   000EC6  C187  F0E4         	movff	main@RGB_calibrated+5,?_sprintf+9
   932   000ECA  C188  F0E5         	movff	main@RGB_calibrated+6,?_sprintf+10
   933   000ECE  C189  F0E6         	movff	main@RGB_calibrated+7,?_sprintf+11
   934   000ED2  ECFB  F011         	call	_sprintf	;wreg free
   935   000ED6                     
   936                           ;../main.c: 66:     sendStringSerial4(readout);
   937   000ED6  0E00               	movlw	low main@readout
   938   000ED8  6E04               	movwf	sendStringSerial4@string^0,c
   939   000EDA  0E01               	movlw	high main@readout
   940   000EDC  6E05               	movwf	(sendStringSerial4@string+1)^0,c
   941   000EDE  EC71  F013         	call	_sendStringSerial4	;wreg free
   942   000EE2                     l2907:
   943                           
   944                           ;../main.c: 76:         if (time_flag==1){
   945   000EE2  0101               	movlb	1	; () banked
   946   000EE4  0570               	decf	main@time_flag& (0+255),w,b
   947   000EE6  1171               	iorwf	(main@time_flag+1)& (0+255),w,b
   948   000EE8  A4D8               	btfss	status,2,c
   949   000EEA  EF79  F007         	goto	u1561
   950   000EEE  EF7B  F007         	goto	u1560
   951   000EF2                     u1561:
   952   000EF2  EF81  F007         	goto	l2913
   953   000EF6                     u1560:
   954   000EF6                     
   955                           ; BSR set to: 1
   956                           ;../main.c: 77:             time++;
   957   000EF6  4B72               	infsnz	main@time& (0+255),f,b
   958   000EF8  2B73               	incf	(main@time+1)& (0+255),f,b
   959   000EFA                     
   960                           ; BSR set to: 1
   961                           ;../main.c: 78:             time_flag = 0;
   962   000EFA  0E00               	movlw	0
   963   000EFC  6F71               	movwf	(main@time_flag+1)& (0+255),b
   964   000EFE  0E00               	movlw	0
   965   000F00  6F70               	movwf	main@time_flag& (0+255),b
   966   000F02                     l2913:
   967   000F02  0E01               	movlw	1
   968   000F04  A68E               	btfss	142,3,c	;volatile
   969   000F06  0E00               	movlw	0
   970   000F08  A48E               	btfss	142,2,c	;volatile
   971   000F0A  0E00               	movlw	0
   972   000F0C  B0E8               	btfsc	wreg,0,c
   973   000F0E  EF8B  F007         	goto	u1571
   974   000F12  EF90  F007         	goto	u1570
   975   000F16                     u1571:
   976   000F16  0100               	movlb	0	; () banked
   977   000F18  6BF4               	clrf	??_main& (0+255),b
   978   000F1A  2BF4               	incf	??_main& (0+255),f,b
   979   000F1C  EF92  F007         	goto	u1578
   980   000F20                     u1570:
   981   000F20  0100               	movlb	0	; () banked
   982   000F22  6BF4               	clrf	??_main& (0+255),b
   983   000F24                     u1578:
   984   000F24  51F4               	movf	??_main& (0+255),w,b
   985   000F26  A4D8               	btfss	status,2,c
   986   000F28  EF98  F007         	goto	u1581
   987   000F2C  EF9A  F007         	goto	u1580
   988   000F30                     u1581:
   989   000F30  EF81  F007         	goto	l2913
   990   000F34                     u1580:
   991   000F34                     
   992                           ; BSR set to: 0
   993                           ;../main.c: 83:         if (!PORTFbits.RF2){LATDbits.LATD7 = 1;}
   994   000F34  B48E               	btfsc	142,2,c	;volatile
   995   000F36  EF9F  F007         	goto	u1591
   996   000F3A  EFA1  F007         	goto	u1590
   997   000F3E                     u1591:
   998   000F3E  EFA4  F007         	goto	l185
   999   000F42                     u1590:
  1000   000F42                     
  1001                           ; BSR set to: 0
  1002   000F42  8E7C               	bsf	124,7,c	;volatile
  1003   000F44  EF28  F008         	goto	l2945
  1004   000F48                     l185:
  1005                           
  1006                           ; BSR set to: 0
  1007   000F48  8680               	bsf	128,3,c	;volatile
  1008   000F4A  EF28  F008         	goto	l2945
  1009   000F4E                     l2917:
  1010                           
  1011                           ; BSR set to: 1
  1012                           ;../main.c: 88:             forward(&motorL,&motorR);
  1013   000F4E  0E8A               	movlw	low main@motorL
  1014   000F50  6E1C               	movwf	forward@mL^0,c
  1015   000F52  0E01               	movlw	high main@motorL
  1016   000F54  6E1D               	movwf	(forward@mL+1)^0,c
  1017   000F56  0E93               	movlw	low main@motorR
  1018   000F58  6E1E               	movwf	forward@mR^0,c
  1019   000F5A  0E01               	movlw	high main@motorR
  1020   000F5C  6E1F               	movwf	(forward@mR+1)^0,c
  1021   000F5E  EC4C  F011         	call	_forward	;wreg free
  1022   000F62                     
  1023                           ;../main.c: 89:             if (color_flag){
  1024   000F62  0101               	movlb	1	; () banked
  1025   000F64  516E               	movf	main@color_flag& (0+255),w,b
  1026   000F66  116F               	iorwf	(main@color_flag+1)& (0+255),w,b
  1027   000F68  B4D8               	btfsc	status,2,c
  1028   000F6A  EFB9  F007         	goto	u1601
  1029   000F6E  EFBB  F007         	goto	u1600
  1030   000F72                     u1601:
  1031   000F72  EF1C  F008         	goto	l2943
  1032   000F76                     u1600:
  1033   000F76                     
  1034                           ; BSR set to: 1
  1035                           ;../main.c: 90:                 stop(&motorL,&motorR);
  1036   000F76  0E8A               	movlw	low main@motorL
  1037   000F78  6E1C               	movwf	stop@mL^0,c
  1038   000F7A  0E01               	movlw	high main@motorL
  1039   000F7C  6E1D               	movwf	(stop@mL+1)^0,c
  1040   000F7E  0E93               	movlw	low main@motorR
  1041   000F80  6E1E               	movwf	stop@mR^0,c
  1042   000F82  0E01               	movlw	high main@motorR
  1043   000F84  6E1F               	movwf	(stop@mR+1)^0,c
  1044   000F86  EC05  F011         	call	_stop	;wreg free
  1045   000F8A                     
  1046                           ;../main.c: 91:                 color_read(&RGB_recorded);
  1047   000F8A  0E7A               	movlw	low main@RGB_recorded
  1048   000F8C  6E0E               	movwf	color_read@rgb^0,c
  1049   000F8E  0E01               	movlw	high main@RGB_recorded
  1050   000F90  6E0F               	movwf	(color_read@rgb+1)^0,c
  1051   000F92  ECCA  F00E         	call	_color_read	;wreg free
  1052   000F96                     
  1053                           ;../main.c: 92:                 if (LATDbits.LATD7){color_name = color_processor_easy(&R
      +                          GB_recorded);}
  1054   000F96  AE7C               	btfss	124,7,c	;volatile
  1055   000F98  EFD0  F007         	goto	u1611
  1056   000F9C  EFD2  F007         	goto	u1610
  1057   000FA0                     u1611:
  1058   000FA0  EFDE  F007         	goto	l2929
  1059   000FA4                     u1610:
  1060   000FA4  0E7A               	movlw	low main@RGB_recorded
  1061   000FA6  6E03               	movwf	color_processor_easy@rgb^0,c
  1062   000FA8  0E01               	movlw	high main@RGB_recorded
  1063   000FAA  6E04               	movwf	(color_processor_easy@rgb+1)^0,c
  1064   000FAC  EC6B  F00E         	call	_color_processor_easy	;wreg free
  1065   000FB0  C003  F176         	movff	?_color_processor_easy,main@color_name
  1066   000FB4  C004  F177         	movff	?_color_processor_easy+1,main@color_name+1
  1067   000FB8  EFE8  F007         	goto	l2931
  1068   000FBC                     l2929:
  1069   000FBC  0E7A               	movlw	low main@RGB_recorded
  1070   000FBE  6E03               	movwf	color_processor_hard@rgb^0,c
  1071   000FC0  0E01               	movlw	high main@RGB_recorded
  1072   000FC2  6E04               	movwf	(color_processor_hard@rgb+1)^0,c
  1073   000FC4  EC0C  F00E         	call	_color_processor_hard	;wreg free
  1074   000FC8  C003  F176         	movff	?_color_processor_hard,main@color_name
  1075   000FCC  C004  F177         	movff	?_color_processor_hard+1,main@color_name+1
  1076   000FD0                     l2931:
  1077                           
  1078                           ;../main.c: 94:                 color_path[j] = color_name;
  1079   000FD0  90D8               	bcf	status,0,c
  1080   000FD2  0101               	movlb	1	; () banked
  1081   000FD4  3574               	rlcf	main@j& (0+255),w,b
  1082   000FD6  6ED9               	movwf	fsr2l,c
  1083   000FD8  3575               	rlcf	(main@j+1)& (0+255),w,b
  1084   000FDA  6EDA               	movwf	fsr2h,c
  1085   000FDC  0E50               	movlw	low main@color_path
  1086   000FDE  26D9               	addwf	fsr2l,f,c
  1087   000FE0  0E01               	movlw	high main@color_path
  1088   000FE2  22DA               	addwfc	fsr2h,f,c
  1089   000FE4  C176  FFDE         	movff	main@color_name,postinc2
  1090   000FE8  C177  FFDD         	movff	main@color_name+1,postdec2
  1091   000FEC                     
  1092                           ; BSR set to: 1
  1093                           ;../main.c: 95:                 time_path[j] = time;
  1094   000FEC  90D8               	bcf	status,0,c
  1095   000FEE  3574               	rlcf	main@j& (0+255),w,b
  1096   000FF0  6ED9               	movwf	fsr2l,c
  1097   000FF2  3575               	rlcf	(main@j+1)& (0+255),w,b
  1098   000FF4  6EDA               	movwf	fsr2h,c
  1099   000FF6  0E32               	movlw	low main@time_path
  1100   000FF8  26D9               	addwf	fsr2l,f,c
  1101   000FFA  0E01               	movlw	high main@time_path
  1102   000FFC  22DA               	addwfc	fsr2h,f,c
  1103   000FFE  C172  FFDE         	movff	main@time,postinc2
  1104   001002  C173  FFDD         	movff	main@time+1,postdec2
  1105   001006                     
  1106                           ; BSR set to: 1
  1107                           ;../main.c: 96:                 motor_action(color_name,&motorL,&motorR);
  1108   001006  C176  F024         	movff	main@color_name,motor_action@color
  1109   00100A  C177  F025         	movff	main@color_name+1,motor_action@color+1
  1110   00100E  0E8A               	movlw	low main@motorL
  1111   001010  6E26               	movwf	motor_action@l^0,c
  1112   001012  0E01               	movlw	high main@motorL
  1113   001014  6E27               	movwf	(motor_action@l+1)^0,c
  1114   001016  0E93               	movlw	low main@motorR
  1115   001018  6E28               	movwf	motor_action@r^0,c
  1116   00101A  0E01               	movlw	high main@motorR
  1117   00101C  6E29               	movwf	(motor_action@r+1)^0,c
  1118   00101E  ECB0  F00C         	call	_motor_action	;wreg free
  1119   001022                     
  1120                           ;../main.c: 97:                 j++;
  1121   001022  0101               	movlb	1	; () banked
  1122   001024  4B74               	infsnz	main@j& (0+255),f,b
  1123   001026  2B75               	incf	(main@j+1)& (0+255),f,b
  1124   001028                     
  1125                           ; BSR set to: 1
  1126                           ;../main.c: 98:                 time = 0;
  1127   001028  0E00               	movlw	0
  1128   00102A  6F73               	movwf	(main@time+1)& (0+255),b
  1129   00102C  0E00               	movlw	0
  1130   00102E  6F72               	movwf	main@time& (0+255),b
  1131   001030                     
  1132                           ; BSR set to: 1
  1133                           ;../main.c: 99:                 color_flag = 0;
  1134   001030  0E00               	movlw	0
  1135   001032  6F6F               	movwf	(main@color_flag+1)& (0+255),b
  1136   001034  0E00               	movlw	0
  1137   001036  6F6E               	movwf	main@color_flag& (0+255),b
  1138   001038                     l2943:
  1139                           
  1140                           ; BSR set to: 1
  1141                           ;../main.c: 101:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1142   001038  0E11               	movlw	17
  1143   00103A  0100               	movlb	0	; () banked
  1144   00103C  6FF5               	movwf	(??_main+1)& (0+255),b
  1145   00103E  0E3C               	movlw	60
  1146   001040  6FF4               	movwf	??_main& (0+255),b
  1147   001042  0ECB               	movlw	203
  1148   001044                     u1647:
  1149   001044  2EE8               	decfsz	wreg,f,c
  1150   001046  D7FE               	bra	u1647
  1151   001048  2FF4               	decfsz	??_main& (0+255),f,b
  1152   00104A  D7FC               	bra	u1647
  1153   00104C  2FF5               	decfsz	(??_main+1)& (0+255),f,b
  1154   00104E  D7FA               	bra	u1647
  1155   001050                     l2945:
  1156                           
  1157                           ;../main.c: 87:         while (color_name != 8){
  1158   001050  0E08               	movlw	8
  1159   001052  0101               	movlb	1	; () banked
  1160   001054  1976               	xorwf	main@color_name& (0+255),w,b
  1161   001056  1177               	iorwf	(main@color_name+1)& (0+255),w,b
  1162   001058  A4D8               	btfss	status,2,c
  1163   00105A  EF31  F008         	goto	u1621
  1164   00105E  EF33  F008         	goto	u1620
  1165   001062                     u1621:
  1166   001062  EFA7  F007         	goto	l2917
  1167   001066                     u1620:
  1168   001066                     
  1169                           ; BSR set to: 1
  1170                           ;../main.c: 105:         for (int k=0;k<15;k++){
  1171   001066  0E00               	movlw	0
  1172   001068  6F79               	movwf	(main@k+1)& (0+255),b
  1173   00106A  0E00               	movlw	0
  1174   00106C  6F78               	movwf	main@k& (0+255),b
  1175   00106E                     l2953:
  1176                           
  1177                           ; BSR set to: 1
  1178                           ;../main.c: 106:             motor_action(color_path[k],&motorL,&motorR);
  1179   00106E  90D8               	bcf	status,0,c
  1180   001070  3578               	rlcf	main@k& (0+255),w,b
  1181   001072  6ED9               	movwf	fsr2l,c
  1182   001074  3579               	rlcf	(main@k+1)& (0+255),w,b
  1183   001076  6EDA               	movwf	fsr2h,c
  1184   001078  0E50               	movlw	low main@color_path
  1185   00107A  26D9               	addwf	fsr2l,f,c
  1186   00107C  0E01               	movlw	high main@color_path
  1187   00107E  22DA               	addwfc	fsr2h,f,c
  1188   001080  CFDE F024          	movff	postinc2,motor_action@color
  1189   001084  CFDD F025          	movff	postdec2,motor_action@color+1
  1190   001088  0E8A               	movlw	low main@motorL
  1191   00108A  6E26               	movwf	motor_action@l^0,c
  1192   00108C  0E01               	movlw	high main@motorL
  1193   00108E  6E27               	movwf	(motor_action@l+1)^0,c
  1194   001090  0E93               	movlw	low main@motorR
  1195   001092  6E28               	movwf	motor_action@r^0,c
  1196   001094  0E01               	movlw	high main@motorR
  1197   001096  6E29               	movwf	(motor_action@r+1)^0,c
  1198   001098  ECB0  F00C         	call	_motor_action	;wreg free
  1199   00109C                     
  1200                           ;../main.c: 107:         }
  1201   00109C  0101               	movlb	1	; () banked
  1202   00109E  4B78               	infsnz	main@k& (0+255),f,b
  1203   0010A0  2B79               	incf	(main@k+1)& (0+255),f,b
  1204   0010A2                     
  1205                           ; BSR set to: 1
  1206   0010A2  BF79               	btfsc	(main@k+1)& (0+255),7,b
  1207   0010A4  EF5D  F008         	goto	u1631
  1208   0010A8  5179               	movf	(main@k+1)& (0+255),w,b
  1209   0010AA  E109               	bnz	u1630
  1210   0010AC  0E0F               	movlw	15
  1211   0010AE  5D78               	subwf	main@k& (0+255),w,b
  1212   0010B0  A0D8               	btfss	status,0,c
  1213   0010B2  EF5D  F008         	goto	u1631
  1214   0010B6  EF5F  F008         	goto	u1630
  1215   0010BA                     u1631:
  1216   0010BA  EF37  F008         	goto	l2953
  1217   0010BE                     u1630:
  1218   0010BE  EF71  F007         	goto	l2907
  1219   0010C2  EF2A  F000         	goto	start
  1220   0010C6                     __end_of_main:
  1221                           	callstack 0
  1222                           
  1223 ;; *************** function _stop *****************
  1224 ;; Defined at:
  1225 ;;		line 61 in file "../dc_motor.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  1228 ;;		 -> main@motorL(9), 
  1229 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  1230 ;;		 -> main@motorR(9), 
  1231 ;; Auto vars:     Size  Location     Type
  1232 ;;  i               2   32[COMRAM] int 
  1233 ;; Return value:  Size  Location     Type
  1234 ;;                  1    wreg      void 
  1235 ;; Registers used:
  1236 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1237 ;; Tracked objects:
  1238 ;;		On entry : 0/0
  1239 ;;		On exit  : 0/0
  1240 ;;		Unchanged: 0/0
  1241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1242 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1243 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1244 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1245 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1246 ;;Total ram usage:        7 bytes
  1247 ;; Hardware stack levels used: 1
  1248 ;; Hardware stack levels required when called: 4
  1249 ;; This function calls:
  1250 ;;		_setMotorPWM
  1251 ;; This function is called by:
  1252 ;;		_main
  1253 ;; This function uses a non-reentrant model
  1254 ;;
  1255                           
  1256                           	psect	text1
  1257   00220A                     __ptext1:
  1258                           	callstack 0
  1259   00220A                     _stop:
  1260                           	callstack 26
  1261   00220A                     
  1262                           ;../dc_motor.c: 61: void stop(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c: 6
      +                          2: {;../dc_motor.c: 63:     mL->direction = 0;
  1263   00220A  EE20 F001          	lfsr	2,1
  1264   00220E  501C               	movf	stop@mL^0,w,c
  1265   002210  26D9               	addwf	fsr2l,f,c
  1266   002212  501D               	movf	(stop@mL+1)^0,w,c
  1267   002214  22DA               	addwfc	fsr2h,f,c
  1268   002216  0E00               	movlw	0
  1269   002218  6EDF               	movwf	indf2,c
  1270                           
  1271                           ;../dc_motor.c: 64:     mR->direction = 0;
  1272   00221A  EE20 F001          	lfsr	2,1
  1273   00221E  501E               	movf	stop@mR^0,w,c
  1274   002220  26D9               	addwf	fsr2l,f,c
  1275   002222  501F               	movf	(stop@mR+1)^0,w,c
  1276   002224  22DA               	addwfc	fsr2h,f,c
  1277   002226  0E00               	movlw	0
  1278   002228  6EDF               	movwf	indf2,c
  1279   00222A                     
  1280                           ;../dc_motor.c: 65:     for (int i = 5;i>0;i = i - 1)
  1281   00222A  0E00               	movlw	0
  1282   00222C  6E22               	movwf	(stop@i+1)^0,c
  1283   00222E  0E05               	movlw	5
  1284   002230  6E21               	movwf	stop@i^0,c
  1285   002232                     l2687:
  1286                           
  1287                           ;../dc_motor.c: 66:     {;../dc_motor.c: 67:         mL->power = i;
  1288   002232  C01C  FFD9         	movff	stop@mL,fsr2l
  1289   002236  C01D  FFDA         	movff	stop@mL+1,fsr2h
  1290   00223A  C021  FFDF         	movff	stop@i,indf2
  1291                           
  1292                           ;../dc_motor.c: 68:         mR->power = i;
  1293   00223E  C01E  FFD9         	movff	stop@mR,fsr2l
  1294   002242  C01F  FFDA         	movff	stop@mR+1,fsr2h
  1295   002246  C021  FFDF         	movff	stop@i,indf2
  1296   00224A                     
  1297                           ;../dc_motor.c: 69:         setMotorPWM(mL);
  1298   00224A  C01C  F011         	movff	stop@mL,setMotorPWM@m
  1299   00224E  C01D  F012         	movff	stop@mL+1,setMotorPWM@m+1
  1300   002252  ECA1  F009         	call	_setMotorPWM	;wreg free
  1301   002256                     
  1302                           ;../dc_motor.c: 70:         setMotorPWM(mR);
  1303   002256  C01E  F011         	movff	stop@mR,setMotorPWM@m
  1304   00225A  C01F  F012         	movff	stop@mR+1,setMotorPWM@m+1
  1305   00225E  ECA1  F009         	call	_setMotorPWM	;wreg free
  1306   002262                     
  1307                           ;../dc_motor.c: 71:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1308   002262  0ED0               	movlw	208
  1309   002264  6E20               	movwf	??_stop^0,c
  1310   002266  0ECA               	movlw	202
  1311   002268                     u1657:
  1312   002268  2EE8               	decfsz	wreg,f,c
  1313   00226A  D7FE               	bra	u1657
  1314   00226C  2E20               	decfsz	??_stop^0,f,c
  1315   00226E  D7FC               	bra	u1657
  1316   002270                     
  1317                           ;../dc_motor.c: 72:     }
  1318   002270  0EFF               	movlw	255
  1319   002272  2421               	addwf	stop@i^0,w,c
  1320   002274  6E21               	movwf	stop@i^0,c
  1321   002276  0EFF               	movlw	255
  1322   002278  2022               	addwfc	(stop@i+1)^0,w,c
  1323   00227A  6E22               	movwf	(stop@i+1)^0,c
  1324   00227C  BE22               	btfsc	(stop@i+1)^0,7,c
  1325   00227E  EF4B  F011         	goto	u1450
  1326   002282  5022               	movf	(stop@i+1)^0,w,c
  1327   002284  E106               	bnz	u1451
  1328   002286  0421               	decf	stop@i^0,w,c
  1329   002288  B0D8               	btfsc	status,0,c
  1330   00228A  EF49  F011         	goto	u1451
  1331   00228E  EF4B  F011         	goto	u1450
  1332   002292                     u1451:
  1333   002292  EF19  F011         	goto	l2687
  1334   002296                     u1450:
  1335   002296  0012               	return		;funcret
  1336   002298                     __end_of_stop:
  1337                           	callstack 0
  1338                           
  1339 ;; *************** function _sprintf *****************
  1340 ;; Defined at:
  1341 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  1342 ;; Parameters:    Size  Location     Type
  1343 ;;  s               2    0[BANK0 ] PTR unsigned char 
  1344 ;;		 -> main@readout(50), 
  1345 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1346 ;;		 -> STR_1(15), 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  f              11   14[BANK0 ] struct _IO_FILE
  1349 ;;  ap              2   12[BANK0 ] PTR void [1]
  1350 ;;		 -> ?_sprintf(2), 
  1351 ;;  ret             2    0        int 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  2    0[BANK0 ] int 
  1354 ;; Registers used:
  1355 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1361 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1362 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1364 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1365 ;;Total ram usage:       25 bytes
  1366 ;; Hardware stack levels used: 1
  1367 ;; Hardware stack levels required when called: 9
  1368 ;; This function calls:
  1369 ;;		_vfprintf
  1370 ;; This function is called by:
  1371 ;;		_main
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text2
  1376   0023F6                     __ptext2:
  1377                           	callstack 0
  1378   0023F6                     _sprintf:
  1379                           	callstack 21
  1380   0023F6  0EDF               	movlw	low (?_sprintf+4)
  1381   0023F8  0100               	movlb	0	; () banked
  1382   0023FA  6FE7               	movwf	sprintf@ap& (0+255),b
  1383   0023FC  0E00               	movlw	high (?_sprintf+4)
  1384   0023FE  6FE8               	movwf	(sprintf@ap+1)& (0+255),b
  1385   002400  C0DB  F0E9         	movff	sprintf@s,sprintf@f
  1386   002404  C0DC  F0EA         	movff	sprintf@s+1,sprintf@f+1
  1387   002408                     
  1388                           ; BSR set to: 0
  1389   002408  0E00               	movlw	0
  1390   00240A  6FED               	movwf	(sprintf@f+4)& (0+255),b
  1391   00240C  0E00               	movlw	0
  1392   00240E  6FEC               	movwf	(sprintf@f+3)& (0+255),b
  1393   002410                     
  1394                           ; BSR set to: 0
  1395   002410  0E00               	movlw	0
  1396   002412  6FF3               	movwf	(sprintf@f+10)& (0+255),b
  1397   002414  0E00               	movlw	0
  1398   002416  6FF2               	movwf	(sprintf@f+9)& (0+255),b
  1399   002418                     
  1400                           ; BSR set to: 0
  1401   002418  0EE9               	movlw	low sprintf@f
  1402   00241A  6E53               	movwf	vfprintf@fp^0,c
  1403   00241C  0E00               	movlw	high sprintf@f
  1404   00241E  6E54               	movwf	(vfprintf@fp+1)^0,c
  1405   002420  C0DD  F055         	movff	sprintf@fmt,vfprintf@fmt
  1406   002424  C0DE  F056         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1407   002428  0EE7               	movlw	low sprintf@ap
  1408   00242A  6E57               	movwf	vfprintf@ap^0,c
  1409   00242C  0E00               	movlw	high sprintf@ap
  1410   00242E  6E58               	movwf	(vfprintf@ap+1)^0,c
  1411   002430  EC24  F012         	call	_vfprintf	;wreg free
  1412   002434  0100               	movlb	0	; () banked
  1413   002436  51EC               	movf	(sprintf@f+3)& (0+255),w,b
  1414   002438  25DB               	addwf	sprintf@s& (0+255),w,b
  1415   00243A  6ED9               	movwf	fsr2l,c
  1416   00243C  51ED               	movf	(sprintf@f+4)& (0+255),w,b
  1417   00243E  21DC               	addwfc	(sprintf@s+1)& (0+255),w,b
  1418   002440  6EDA               	movwf	fsr2h,c
  1419   002442  0E00               	movlw	0
  1420   002444  6EDF               	movwf	indf2,c
  1421   002446                     
  1422                           ; BSR set to: 0
  1423   002446  0012               	return		;funcret
  1424   002448                     __end_of_sprintf:
  1425                           	callstack 0
  1426                           
  1427 ;; *************** function _vfprintf *****************
  1428 ;; Defined at:
  1429 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;  fp              2   82[COMRAM] PTR struct _IO_FILE
  1432 ;;		 -> sprintf@f(11), 
  1433 ;;  fmt             2   84[COMRAM] PTR const unsigned char 
  1434 ;;		 -> STR_1(15), 
  1435 ;;  ap              2   86[COMRAM] PTR PTR void 
  1436 ;;		 -> sprintf@ap(2), 
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;  cfmt            2   88[COMRAM] PTR unsigned char 
  1439 ;;		 -> STR_1(15), 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  2   82[COMRAM] int 
  1442 ;; Registers used:
  1443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1449 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1450 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1452 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1453 ;;Total ram usage:        8 bytes
  1454 ;; Hardware stack levels used: 1
  1455 ;; Hardware stack levels required when called: 8
  1456 ;; This function calls:
  1457 ;;		_vfpfcnvrt
  1458 ;; This function is called by:
  1459 ;;		_sprintf
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text3
  1464   002448                     __ptext3:
  1465                           	callstack 0
  1466   002448                     _vfprintf:
  1467                           	callstack 21
  1468   002448                     
  1469                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  1470   002448  C055  F059         	movff	vfprintf@fmt,vfprintf@cfmt
  1471   00244C  C056  F05A         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1472                           
  1473                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1474   002450  EF38  F012         	goto	l2503
  1475   002454                     l2501:
  1476                           
  1477                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1478   002454  C053  F041         	movff	vfprintf@fp,vfpfcnvrt@fp
  1479   002458  C054  F042         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1480   00245C  0E59               	movlw	low vfprintf@cfmt
  1481   00245E  6E43               	movwf	vfpfcnvrt@fmt^0,c
  1482   002460  0E00               	movlw	high vfprintf@cfmt
  1483   002462  6E44               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1484   002464  C057  F045         	movff	vfprintf@ap,vfpfcnvrt@ap
  1485   002468  C058  F046         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1486   00246C  EC01  F00C         	call	_vfpfcnvrt	;wreg free
  1487   002470                     l2503:
  1488                           
  1489                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1490   002470  C059  FFF6         	movff	vfprintf@cfmt,tblptrl
  1491   002474  C05A  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1492   002478                     	if	0	;tblptru may be non-zero
  1493   002478                     	endif
  1494   002478                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1495   002478  0E00               	movlw	low (__mediumconst shr (0+16))
  1496   00247A  6EF8               	movwf	tblptru,c
  1497   00247C                     	endif
  1498   00247C  0008               	tblrd		*
  1499   00247E  50F5               	movf	tablat,w,c
  1500   002480  0900               	iorlw	0
  1501   002482  A4D8               	btfss	status,2,c
  1502   002484  EF46  F012         	goto	u1341
  1503   002488  EF48  F012         	goto	u1340
  1504   00248C                     u1341:
  1505   00248C  EF2A  F012         	goto	l2501
  1506   002490                     u1340:
  1507   002490                     
  1508                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  1509   002490  0E00               	movlw	0
  1510   002492  6E54               	movwf	(?_vfprintf+1)^0,c
  1511   002494  0E00               	movlw	0
  1512   002496  6E53               	movwf	?_vfprintf^0,c
  1513   002498  0012               	return		;funcret
  1514   00249A                     __end_of_vfprintf:
  1515                           	callstack 0
  1516                           
  1517 ;; *************** function _vfpfcnvrt *****************
  1518 ;; Defined at:
  1519 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  fp              2   64[COMRAM] PTR struct _IO_FILE
  1522 ;;		 -> sprintf@f(11), 
  1523 ;;  fmt             2   66[COMRAM] PTR PTR unsigned char 
  1524 ;;		 -> vfprintf@cfmt(2), 
  1525 ;;  ap              2   68[COMRAM] PTR PTR void 
  1526 ;;		 -> sprintf@ap(2), 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;  convarg         8   72[COMRAM] struct .
  1529 ;;  cp              2   80[COMRAM] PTR unsigned char 
  1530 ;;		 -> STR_1(15), 
  1531 ;;  i               2    0        int 
  1532 ;;  done            2    0        int 
  1533 ;;  c               1    0        unsigned char 
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  1    wreg      void 
  1536 ;; Registers used:
  1537 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1543 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1544 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1545 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1546 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1547 ;;Total ram usage:       18 bytes
  1548 ;; Hardware stack levels used: 1
  1549 ;; Hardware stack levels required when called: 7
  1550 ;; This function calls:
  1551 ;;		_dtoa
  1552 ;;		_fputc
  1553 ;; This function is called by:
  1554 ;;		_vfprintf
  1555 ;; This function uses a non-reentrant model
  1556 ;;
  1557                           
  1558                           	psect	text4
  1559   001802                     __ptext4:
  1560                           	callstack 0
  1561   001802                     _vfpfcnvrt:
  1562                           	callstack 21
  1563   001802                     
  1564                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  1565   001802  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1566   001806  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1567   00180A  CFDE FFF6          	movff	postinc2,tblptrl
  1568   00180E  CFDD FFF7          	movff	postdec2,tblptrh
  1569   001812                     	if	0	;tblptru may be non-zero
  1570   001812                     	endif
  1571   001812                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1572   001812  0E00               	movlw	low (__mediumconst shr (0+16))
  1573   001814  6EF8               	movwf	tblptru,c
  1574   001816                     	endif
  1575   001816  0008               	tblrd		*
  1576   001818  50F5               	movf	tablat,w,c
  1577   00181A  0A25               	xorlw	37
  1578   00181C  A4D8               	btfss	status,2,c
  1579   00181E  EF13  F00C         	goto	u1241
  1580   001822  EF15  F00C         	goto	u1240
  1581   001826                     u1241:
  1582   001826  EF99  F00C         	goto	l2309
  1583   00182A                     u1240:
  1584   00182A                     
  1585                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  1586   00182A  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1587   00182E  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1588   001832  2ADE               	incf	postinc2,f,c
  1589   001834  0E00               	movlw	0
  1590   001836  22DD               	addwfc	postdec2,f,c
  1591   001838                     
  1592                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  1593   001838  0E00               	movlw	0
  1594   00183A  0100               	movlb	0	; () banked
  1595   00183C  6FB1               	movwf	(_width+1)& (0+255),b
  1596   00183E  0E00               	movlw	0
  1597   001840  6FB0               	movwf	_width& (0+255),b
  1598   001842  C0B0  F0B8         	movff	_width,_flags
  1599   001846                     
  1600                           ; BSR set to: 0
  1601                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  1602   001846  69B2               	setf	_prec& (0+255),b
  1603   001848  69B3               	setf	(_prec+1)& (0+255),b
  1604   00184A                     
  1605                           ; BSR set to: 0
  1606                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1607   00184A  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1608   00184E  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1609   001852  CFDE F051          	movff	postinc2,vfpfcnvrt@cp
  1610   001856  CFDD F052          	movff	postdec2,vfpfcnvrt@cp+1
  1611   00185A                     
  1612                           ; BSR set to: 0
  1613                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1614   00185A  C051  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1615   00185E  C052  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1616   001862                     	if	0	;tblptru may be non-zero
  1617   001862                     	endif
  1618   001862                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1619   001862  0E00               	movlw	low (__mediumconst shr (0+16))
  1620   001864  6EF8               	movwf	tblptru,c
  1621   001866                     	endif
  1622   001866  0008               	tblrd		*
  1623   001868  50F5               	movf	tablat,w,c
  1624   00186A  0A64               	xorlw	100
  1625   00186C  B4D8               	btfsc	status,2,c
  1626   00186E  EF3B  F00C         	goto	u1251
  1627   001872  EF3D  F00C         	goto	u1250
  1628   001876                     u1251:
  1629   001876  EF4D  F00C         	goto	l2299
  1630   00187A                     u1250:
  1631   00187A                     
  1632                           ; BSR set to: 0
  1633   00187A  C051  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1634   00187E  C052  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1635   001882                     	if	0	;tblptru may be non-zero
  1636   001882                     	endif
  1637   001882                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1638   001882  0E00               	movlw	low (__mediumconst shr (0+16))
  1639   001884  6EF8               	movwf	tblptru,c
  1640   001886                     	endif
  1641   001886  0008               	tblrd		*
  1642   001888  50F5               	movf	tablat,w,c
  1643   00188A  0A69               	xorlw	105
  1644   00188C  A4D8               	btfss	status,2,c
  1645   00188E  EF4B  F00C         	goto	u1261
  1646   001892  EF4D  F00C         	goto	u1260
  1647   001896                     u1261:
  1648   001896  EF90  F00C         	goto	l2305
  1649   00189A                     u1260:
  1650   00189A                     l2299:
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1654   00189A  C045  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1655   00189E  C046  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1656   0018A2  CFDF F047          	movff	indf2,??_vfpfcnvrt
  1657   0018A6  0E02               	movlw	2
  1658   0018A8  26DE               	addwf	postinc2,f,c
  1659   0018AA  CFDF F048          	movff	indf2,??_vfpfcnvrt+1
  1660   0018AE  0E00               	movlw	0
  1661   0018B0  22DD               	addwfc	postdec2,f,c
  1662   0018B2  C047  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1663   0018B6  C048  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1664   0018BA  CFDE F049          	movff	postinc2,vfpfcnvrt@convarg
  1665   0018BE  CFDD F04A          	movff	postdec2,vfpfcnvrt@convarg+1
  1666   0018C2  0E00               	movlw	0
  1667   0018C4  BE4A               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1668   0018C6  0EFF               	movlw	-1
  1669   0018C8  6E4B               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1670   0018CA  6E4C               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1671   0018CC  6E4D               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1672   0018CE  6E4E               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1673   0018D0  6E4F               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1674   0018D2  6E50               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1675                           
  1676                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1677   0018D4  0E01               	movlw	1
  1678   0018D6  2451               	addwf	vfpfcnvrt@cp^0,w,c
  1679   0018D8  6E47               	movwf	??_vfpfcnvrt^0,c
  1680   0018DA  0E00               	movlw	0
  1681   0018DC  2052               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1682   0018DE  6E48               	movwf	(??_vfpfcnvrt+1)^0,c
  1683   0018E0  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1684   0018E4  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1685   0018E8  C047  FFDE         	movff	??_vfpfcnvrt,postinc2
  1686   0018EC  C048  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1687   0018F0                     
  1688                           ; BSR set to: 0
  1689                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1690   0018F0  C041  F01E         	movff	vfpfcnvrt@fp,dtoa@fp
  1691   0018F4  C042  F01F         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1692   0018F8  C049  F020         	movff	vfpfcnvrt@convarg,dtoa@d
  1693   0018FC  C04A  F021         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1694   001900  C04B  F022         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1695   001904  C04C  F023         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1696   001908  C04D  F024         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1697   00190C  C04E  F025         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1698   001910  C04F  F026         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1699   001914  C050  F027         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1700   001918  EC63  F008         	call	_dtoa	;wreg free
  1701   00191C  EFAF  F00C         	goto	l1125
  1702   001920                     l2305:
  1703                           
  1704                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1705   001920  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1706   001924  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1707   001928  2ADE               	incf	postinc2,f,c
  1708   00192A  0E00               	movlw	0
  1709   00192C  22DD               	addwfc	postdec2,f,c
  1710   00192E  EFAF  F00C         	goto	l1125
  1711   001932                     l2309:
  1712                           
  1713                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1714   001932  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1715   001936  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1716   00193A  CFDE FFF6          	movff	postinc2,tblptrl
  1717   00193E  CFDD FFF7          	movff	postdec2,tblptrh
  1718   001942                     	if	0	;tblptru may be non-zero
  1719   001942                     	endif
  1720   001942                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1721   001942  0E00               	movlw	low (__mediumconst shr (0+16))
  1722   001944  6EF8               	movwf	tblptru,c
  1723   001946                     	endif
  1724   001946  0008               	tblrd		*
  1725   001948  50F5               	movf	tablat,w,c
  1726   00194A  6E03               	movwf	fputc@c^0,c
  1727   00194C  6A04               	clrf	(fputc@c+1)^0,c
  1728   00194E  C041  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1729   001952  C042  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1730   001956  EC45  F00D         	call	_fputc	;wreg free
  1731   00195A  EF90  F00C         	goto	l2305
  1732   00195E                     l1125:
  1733   00195E  0012               	return		;funcret
  1734   001960                     __end_of_vfpfcnvrt:
  1735                           	callstack 0
  1736                           
  1737 ;; *************** function _dtoa *****************
  1738 ;; Defined at:
  1739 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  fp              2   29[COMRAM] PTR struct _IO_FILE
  1742 ;;		 -> sprintf@f(11), 
  1743 ;;  d               8   31[COMRAM] long long 
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;  n               8   53[COMRAM] long long 
  1746 ;;  i               2   61[COMRAM] int 
  1747 ;;  w               2   51[COMRAM] int 
  1748 ;;  p               2   49[COMRAM] int 
  1749 ;;  s               1   63[COMRAM] unsigned char 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1759 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1760 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1761 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1762 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1763 ;;Total ram usage:       35 bytes
  1764 ;; Hardware stack levels used: 1
  1765 ;; Hardware stack levels required when called: 6
  1766 ;; This function calls:
  1767 ;;		___aodiv
  1768 ;;		___aomod
  1769 ;;		_abs
  1770 ;;		_pad
  1771 ;; This function is called by:
  1772 ;;		_vfpfcnvrt
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text5
  1777   0010C6                     __ptext5:
  1778                           	callstack 0
  1779   0010C6                     _dtoa:
  1780                           	callstack 21
  1781   0010C6                     
  1782                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  1783   0010C6  C020  F036         	movff	dtoa@d,dtoa@n
  1784   0010CA  C021  F037         	movff	dtoa@d+1,dtoa@n+1
  1785   0010CE  C022  F038         	movff	dtoa@d+2,dtoa@n+2
  1786   0010D2  C023  F039         	movff	dtoa@d+3,dtoa@n+3
  1787   0010D6  C024  F03A         	movff	dtoa@d+4,dtoa@n+4
  1788   0010DA  C025  F03B         	movff	dtoa@d+5,dtoa@n+5
  1789   0010DE  C026  F03C         	movff	dtoa@d+6,dtoa@n+6
  1790   0010E2  C027  F03D         	movff	dtoa@d+7,dtoa@n+7
  1791   0010E6                     
  1792                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  1793   0010E6  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1794   0010E8  EF78  F008         	goto	u1081
  1795   0010EC  EF7B  F008         	goto	u1080
  1796   0010F0                     u1081:
  1797   0010F0  0E01               	movlw	1
  1798   0010F2  EF7C  F008         	goto	u1090
  1799   0010F6                     u1080:
  1800   0010F6  0E00               	movlw	0
  1801   0010F8                     u1090:
  1802   0010F8  6E40               	movwf	dtoa@s^0,c
  1803   0010FA                     
  1804                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  1805   0010FA  5040               	movf	dtoa@s^0,w,c
  1806   0010FC  B4D8               	btfsc	status,2,c
  1807   0010FE  EF83  F008         	goto	u1101
  1808   001102  EF85  F008         	goto	u1100
  1809   001106                     u1101:
  1810   001106  EF95  F008         	goto	l2197
  1811   00110A                     u1100:
  1812   00110A                     
  1813                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  1814   00110A  1E3D               	comf	(dtoa@n+7)^0,f,c
  1815   00110C  1E3C               	comf	(dtoa@n+6)^0,f,c
  1816   00110E  1E3B               	comf	(dtoa@n+5)^0,f,c
  1817   001110  1E3A               	comf	(dtoa@n+4)^0,f,c
  1818   001112  1E39               	comf	(dtoa@n+3)^0,f,c
  1819   001114  1E38               	comf	(dtoa@n+2)^0,f,c
  1820   001116  1E37               	comf	(dtoa@n+1)^0,f,c
  1821   001118  6C36               	negf	dtoa@n^0,c
  1822   00111A  0E00               	movlw	0
  1823   00111C  2237               	addwfc	(dtoa@n+1)^0,f,c
  1824   00111E  2238               	addwfc	(dtoa@n+2)^0,f,c
  1825   001120  2239               	addwfc	(dtoa@n+3)^0,f,c
  1826   001122  223A               	addwfc	(dtoa@n+4)^0,f,c
  1827   001124  223B               	addwfc	(dtoa@n+5)^0,f,c
  1828   001126  223C               	addwfc	(dtoa@n+6)^0,f,c
  1829   001128  223D               	addwfc	(dtoa@n+7)^0,f,c
  1830   00112A                     l2197:
  1831                           
  1832                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  1833   00112A  0100               	movlb	0	; () banked
  1834   00112C  BFB3               	btfsc	(_prec+1)& (0+255),7,b
  1835   00112E  EFA3  F008         	goto	u1110
  1836   001132  51B3               	movf	(_prec+1)& (0+255),w,b
  1837   001134  E106               	bnz	u1111
  1838   001136  05B2               	decf	_prec& (0+255),w,b
  1839   001138  B0D8               	btfsc	status,0,c
  1840   00113A  EFA1  F008         	goto	u1111
  1841   00113E  EFA3  F008         	goto	u1110
  1842   001142                     u1111:
  1843   001142  EFA9  F008         	goto	l1104
  1844   001146                     u1110:
  1845   001146                     
  1846                           ; BSR set to: 0
  1847   001146  0E00               	movlw	0
  1848   001148  6E33               	movwf	(dtoa@p+1)^0,c
  1849   00114A  0E01               	movlw	1
  1850   00114C  6E32               	movwf	dtoa@p^0,c
  1851   00114E  EFAD  F008         	goto	l1106
  1852   001152                     l1104:
  1853                           
  1854                           ; BSR set to: 0
  1855   001152  C0B2  F032         	movff	_prec,dtoa@p
  1856   001156  C0B3  F033         	movff	_prec+1,dtoa@p+1
  1857   00115A                     l1106:
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  1861   00115A  C0B0  F034         	movff	_width,dtoa@w
  1862   00115E  C0B1  F035         	movff	_width+1,dtoa@w+1
  1863   001162                     
  1864                           ; BSR set to: 0
  1865                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  1866   001162  5040               	movf	dtoa@s^0,w,c
  1867   001164  B4D8               	btfsc	status,2,c
  1868   001166  EFB7  F008         	goto	u1121
  1869   00116A  EFB9  F008         	goto	u1120
  1870   00116E                     u1121:
  1871   00116E  EFD0  F008         	goto	l1107
  1872   001172                     u1120:
  1873   001172                     
  1874                           ; BSR set to: 0
  1875                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  1876   001172  0634               	decf	dtoa@w^0,f,c
  1877   001174  A0D8               	btfss	status,0,c
  1878   001176  0635               	decf	(dtoa@w+1)^0,f,c
  1879   001178                     
  1880                           ; BSR set to: 0
  1881                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  1882   001178  5040               	movf	dtoa@s^0,w,c
  1883   00117A  A4D8               	btfss	status,2,c
  1884   00117C  EFC2  F008         	goto	u1131
  1885   001180  EFC4  F008         	goto	u1130
  1886   001184                     u1131:
  1887   001184  EFCA  F008         	goto	l2209
  1888   001188                     u1130:
  1889   001188                     
  1890                           ; BSR set to: 0
  1891   001188  0E00               	movlw	0
  1892   00118A  6E31               	movwf	(_dtoa$2246+1)^0,c
  1893   00118C  0E2B               	movlw	43
  1894   00118E  6E30               	movwf	_dtoa$2246^0,c
  1895   001190  EFCE  F008         	goto	l2211
  1896   001194                     l2209:
  1897                           
  1898                           ; BSR set to: 0
  1899   001194  0E00               	movlw	0
  1900   001196  6E31               	movwf	(_dtoa$2246+1)^0,c
  1901   001198  0E2D               	movlw	45
  1902   00119A  6E30               	movwf	_dtoa$2246^0,c
  1903   00119C                     l2211:
  1904                           
  1905                           ; BSR set to: 0
  1906   00119C  C030  F040         	movff	_dtoa$2246,dtoa@s
  1907   0011A0                     l1107:
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  1911   0011A0  0E00               	movlw	0
  1912   0011A2  6E3F               	movwf	(dtoa@i+1)^0,c
  1913   0011A4  0E1F               	movlw	31
  1914   0011A6  6E3E               	movwf	dtoa@i^0,c
  1915   0011A8                     
  1916                           ; BSR set to: 0
  1917                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  1918   0011A8  0E00               	movlw	0
  1919   0011AA  6FDA               	movwf	(_dbuf+31)& (0+255),b
  1920                           
  1921                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1922   0011AC  EF54  F009         	goto	l2225
  1923   0011B0                     l2215:
  1924                           
  1925                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  1926   0011B0  063E               	decf	dtoa@i^0,f,c
  1927   0011B2  A0D8               	btfss	status,0,c
  1928   0011B4  063F               	decf	(dtoa@i+1)^0,f,c
  1929   0011B6                     
  1930                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1931   0011B6  0EBB               	movlw	low _dbuf
  1932   0011B8  243E               	addwf	dtoa@i^0,w,c
  1933   0011BA  6ED9               	movwf	fsr2l,c
  1934   0011BC  0E00               	movlw	high _dbuf
  1935   0011BE  203F               	addwfc	(dtoa@i+1)^0,w,c
  1936   0011C0  6EDA               	movwf	fsr2h,c
  1937   0011C2  C036  F003         	movff	dtoa@n,___aomod@dividend
  1938   0011C6  C037  F004         	movff	dtoa@n+1,___aomod@dividend+1
  1939   0011CA  C038  F005         	movff	dtoa@n+2,___aomod@dividend+2
  1940   0011CE  C039  F006         	movff	dtoa@n+3,___aomod@dividend+3
  1941   0011D2  C03A  F007         	movff	dtoa@n+4,___aomod@dividend+4
  1942   0011D6  C03B  F008         	movff	dtoa@n+5,___aomod@dividend+5
  1943   0011DA  C03C  F009         	movff	dtoa@n+6,___aomod@dividend+6
  1944   0011DE  C03D  F00A         	movff	dtoa@n+7,___aomod@dividend+7
  1945   0011E2  0E0A               	movlw	10
  1946   0011E4  6E0B               	movwf	___aomod@divisor^0,c
  1947   0011E6  0E00               	movlw	0
  1948   0011E8  6E0C               	movwf	(___aomod@divisor+1)^0,c
  1949   0011EA  0E00               	movlw	0
  1950   0011EC  6E0D               	movwf	(___aomod@divisor+2)^0,c
  1951   0011EE  0E00               	movlw	0
  1952   0011F0  6E0E               	movwf	(___aomod@divisor+3)^0,c
  1953   0011F2  0E00               	movlw	0
  1954   0011F4  6E0F               	movwf	(___aomod@divisor+4)^0,c
  1955   0011F6  0E00               	movlw	0
  1956   0011F8  6E10               	movwf	(___aomod@divisor+5)^0,c
  1957   0011FA  0E00               	movlw	0
  1958   0011FC  6E11               	movwf	(___aomod@divisor+6)^0,c
  1959   0011FE  0E00               	movlw	0
  1960   001200  6E12               	movwf	(___aomod@divisor+7)^0,c
  1961   001202  EC4F  F00B         	call	___aomod	;wreg free
  1962   001206  C003  F028         	movff	?___aomod,??_dtoa
  1963   00120A  C004  F029         	movff	?___aomod+1,??_dtoa+1
  1964   00120E  C005  F02A         	movff	?___aomod+2,??_dtoa+2
  1965   001212  C006  F02B         	movff	?___aomod+3,??_dtoa+3
  1966   001216  C007  F02C         	movff	?___aomod+4,??_dtoa+4
  1967   00121A  C008  F02D         	movff	?___aomod+5,??_dtoa+5
  1968   00121E  C009  F02E         	movff	?___aomod+6,??_dtoa+6
  1969   001222  C00A  F02F         	movff	?___aomod+7,??_dtoa+7
  1970   001226  C028  F015         	movff	??_dtoa,abs@a
  1971   00122A  C029  F016         	movff	??_dtoa+1,abs@a+1
  1972   00122E  EC51  F013         	call	_abs	;wreg free
  1973   001232  5015               	movf	?_abs^0,w,c
  1974   001234  0F30               	addlw	48
  1975   001236  6EDF               	movwf	indf2,c
  1976   001238                     
  1977                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  1978   001238  0632               	decf	dtoa@p^0,f,c
  1979   00123A  A0D8               	btfss	status,0,c
  1980   00123C  0633               	decf	(dtoa@p+1)^0,f,c
  1981   00123E                     
  1982                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  1983   00123E  0634               	decf	dtoa@w^0,f,c
  1984   001240  A0D8               	btfss	status,0,c
  1985   001242  0635               	decf	(dtoa@w+1)^0,f,c
  1986   001244                     
  1987                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  1988   001244  C036  F003         	movff	dtoa@n,___aodiv@dividend
  1989   001248  C037  F004         	movff	dtoa@n+1,___aodiv@dividend+1
  1990   00124C  C038  F005         	movff	dtoa@n+2,___aodiv@dividend+2
  1991   001250  C039  F006         	movff	dtoa@n+3,___aodiv@dividend+3
  1992   001254  C03A  F007         	movff	dtoa@n+4,___aodiv@dividend+4
  1993   001258  C03B  F008         	movff	dtoa@n+5,___aodiv@dividend+5
  1994   00125C  C03C  F009         	movff	dtoa@n+6,___aodiv@dividend+6
  1995   001260  C03D  F00A         	movff	dtoa@n+7,___aodiv@dividend+7
  1996   001264  0E0A               	movlw	10
  1997   001266  6E0B               	movwf	___aodiv@divisor^0,c
  1998   001268  0E00               	movlw	0
  1999   00126A  6E0C               	movwf	(___aodiv@divisor+1)^0,c
  2000   00126C  0E00               	movlw	0
  2001   00126E  6E0D               	movwf	(___aodiv@divisor+2)^0,c
  2002   001270  0E00               	movlw	0
  2003   001272  6E0E               	movwf	(___aodiv@divisor+3)^0,c
  2004   001274  0E00               	movlw	0
  2005   001276  6E0F               	movwf	(___aodiv@divisor+4)^0,c
  2006   001278  0E00               	movlw	0
  2007   00127A  6E10               	movwf	(___aodiv@divisor+5)^0,c
  2008   00127C  0E00               	movlw	0
  2009   00127E  6E11               	movwf	(___aodiv@divisor+6)^0,c
  2010   001280  0E00               	movlw	0
  2011   001282  6E12               	movwf	(___aodiv@divisor+7)^0,c
  2012   001284  EC8B  F00A         	call	___aodiv	;wreg free
  2013   001288  C003  F036         	movff	?___aodiv,dtoa@n
  2014   00128C  C004  F037         	movff	?___aodiv+1,dtoa@n+1
  2015   001290  C005  F038         	movff	?___aodiv+2,dtoa@n+2
  2016   001294  C006  F039         	movff	?___aodiv+3,dtoa@n+3
  2017   001298  C007  F03A         	movff	?___aodiv+4,dtoa@n+4
  2018   00129C  C008  F03B         	movff	?___aodiv+5,dtoa@n+5
  2019   0012A0  C009  F03C         	movff	?___aodiv+6,dtoa@n+6
  2020   0012A4  C00A  F03D         	movff	?___aodiv+7,dtoa@n+7
  2021   0012A8                     l2225:
  2022                           
  2023                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2024   0012A8  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  2025   0012AA  EF5F  F009         	goto	u1141
  2026   0012AE  503F               	movf	(dtoa@i+1)^0,w,c
  2027   0012B0  E108               	bnz	u1140
  2028   0012B2  043E               	decf	dtoa@i^0,w,c
  2029   0012B4  A0D8               	btfss	status,0,c
  2030   0012B6  EF5F  F009         	goto	u1141
  2031   0012BA  EF61  F009         	goto	u1140
  2032   0012BE                     u1141:
  2033   0012BE  EF7D  F009         	goto	l2231
  2034   0012C2                     u1140:
  2035   0012C2  5036               	movf	dtoa@n^0,w,c
  2036   0012C4  1037               	iorwf	(dtoa@n+1)^0,w,c
  2037   0012C6  1038               	iorwf	(dtoa@n+2)^0,w,c
  2038   0012C8  1039               	iorwf	(dtoa@n+3)^0,w,c
  2039   0012CA  103A               	iorwf	(dtoa@n+4)^0,w,c
  2040   0012CC  103B               	iorwf	(dtoa@n+5)^0,w,c
  2041   0012CE  103C               	iorwf	(dtoa@n+6)^0,w,c
  2042   0012D0  103D               	iorwf	(dtoa@n+7)^0,w,c
  2043   0012D2  A4D8               	btfss	status,2,c
  2044   0012D4  EF6E  F009         	goto	u1151
  2045   0012D8  EF70  F009         	goto	u1150
  2046   0012DC                     u1151:
  2047   0012DC  EFD8  F008         	goto	l2215
  2048   0012E0                     u1150:
  2049   0012E0  BE33               	btfsc	(dtoa@p+1)^0,7,c
  2050   0012E2  EF7D  F009         	goto	u1160
  2051   0012E6  5033               	movf	(dtoa@p+1)^0,w,c
  2052   0012E8  E106               	bnz	u1161
  2053   0012EA  0432               	decf	dtoa@p^0,w,c
  2054   0012EC  B0D8               	btfsc	status,0,c
  2055   0012EE  EF7B  F009         	goto	u1161
  2056   0012F2  EF7D  F009         	goto	u1160
  2057   0012F6                     u1161:
  2058   0012F6  EFD8  F008         	goto	l2215
  2059   0012FA                     u1160:
  2060   0012FA                     l2231:
  2061                           
  2062                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2063   0012FA  5040               	movf	dtoa@s^0,w,c
  2064   0012FC  B4D8               	btfsc	status,2,c
  2065   0012FE  EF83  F009         	goto	u1171
  2066   001302  EF85  F009         	goto	u1170
  2067   001306                     u1171:
  2068   001306  EF90  F009         	goto	l2237
  2069   00130A                     u1170:
  2070   00130A                     
  2071                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2072   00130A  063E               	decf	dtoa@i^0,f,c
  2073   00130C  A0D8               	btfss	status,0,c
  2074   00130E  063F               	decf	(dtoa@i+1)^0,f,c
  2075   001310                     
  2076                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2077   001310  0EBB               	movlw	low _dbuf
  2078   001312  243E               	addwf	dtoa@i^0,w,c
  2079   001314  6ED9               	movwf	fsr2l,c
  2080   001316  0E00               	movlw	high _dbuf
  2081   001318  203F               	addwfc	(dtoa@i+1)^0,w,c
  2082   00131A  6EDA               	movwf	fsr2h,c
  2083   00131C  C040  FFDF         	movff	dtoa@s,indf2
  2084   001320                     l2237:
  2085                           
  2086                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2087   001320  C01E  F013         	movff	dtoa@fp,pad@fp
  2088   001324  C01F  F014         	movff	dtoa@fp+1,pad@fp+1
  2089   001328  0EBB               	movlw	low _dbuf
  2090   00132A  243E               	addwf	dtoa@i^0,w,c
  2091   00132C  6E15               	movwf	pad@buf^0,c
  2092   00132E  0E00               	movlw	high _dbuf
  2093   001330  203F               	addwfc	(dtoa@i+1)^0,w,c
  2094   001332  6E16               	movwf	(pad@buf+1)^0,c
  2095   001334  C034  F017         	movff	dtoa@w,pad@p
  2096   001338  C035  F018         	movff	dtoa@w+1,pad@p+1
  2097   00133C  EC91  F011         	call	_pad	;wreg free
  2098   001340  0012               	return		;funcret
  2099   001342                     __end_of_dtoa:
  2100                           	callstack 0
  2101                           
  2102 ;; *************** function _pad *****************
  2103 ;; Defined at:
  2104 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
  2107 ;;		 -> sprintf@f(11), 
  2108 ;;  buf             2   20[COMRAM] PTR unsigned char 
  2109 ;;		 -> dbuf(32), 
  2110 ;;  p               2   22[COMRAM] int 
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;  w               2   27[COMRAM] int 
  2113 ;;  i               2   25[COMRAM] int 
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  1    wreg      void 
  2116 ;; Registers used:
  2117 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2123 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2124 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2125 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2126 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2127 ;;Total ram usage:       11 bytes
  2128 ;; Hardware stack levels used: 1
  2129 ;; Hardware stack levels required when called: 5
  2130 ;; This function calls:
  2131 ;;		_fputc
  2132 ;;		_fputs
  2133 ;; This function is called by:
  2134 ;;		_dtoa
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           	psect	text6
  2139   002322                     __ptext6:
  2140                           	callstack 0
  2141   002322                     _pad:
  2142                           	callstack 21
  2143   002322                     
  2144                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  2145   002322  BE18               	btfsc	(pad@p+1)^0,7,c
  2146   002324  EF96  F011         	goto	u971
  2147   002328  EF98  F011         	goto	u970
  2148   00232C                     u971:
  2149   00232C  EF9E  F011         	goto	l2121
  2150   002330                     u970:
  2151   002330  C017  F01C         	movff	pad@p,pad@w
  2152   002334  C018  F01D         	movff	pad@p+1,pad@w+1
  2153   002338  EFA2  F011         	goto	l1095
  2154   00233C                     l2121:
  2155   00233C  0E00               	movlw	0
  2156   00233E  6E1D               	movwf	(pad@w+1)^0,c
  2157   002340  0E00               	movlw	0
  2158   002342  6E1C               	movwf	pad@w^0,c
  2159   002344                     l1095:
  2160                           
  2161                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  2162   002344  0E00               	movlw	0
  2163   002346  6E1B               	movwf	(pad@i+1)^0,c
  2164   002348  0E00               	movlw	0
  2165   00234A  6E1A               	movwf	pad@i^0,c
  2166                           
  2167                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2168   00234C  EFB4  F011         	goto	l2127
  2169   002350                     l2123:
  2170                           
  2171                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  2172   002350  0E00               	movlw	0
  2173   002352  6E04               	movwf	(fputc@c+1)^0,c
  2174   002354  0E20               	movlw	32
  2175   002356  6E03               	movwf	fputc@c^0,c
  2176   002358  C013  F005         	movff	pad@fp,fputc@fp
  2177   00235C  C014  F006         	movff	pad@fp+1,fputc@fp+1
  2178   002360  EC45  F00D         	call	_fputc	;wreg free
  2179   002364                     
  2180                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  2181   002364  4A1A               	infsnz	pad@i^0,f,c
  2182   002366  2A1B               	incf	(pad@i+1)^0,f,c
  2183   002368                     l2127:
  2184                           
  2185                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2186   002368  501C               	movf	pad@w^0,w,c
  2187   00236A  5C1A               	subwf	pad@i^0,w,c
  2188   00236C  501B               	movf	(pad@i+1)^0,w,c
  2189   00236E  0A80               	xorlw	128
  2190   002370  6E19               	movwf	??_pad^0,c
  2191   002372  501D               	movf	(pad@w+1)^0,w,c
  2192   002374  0A80               	xorlw	128
  2193   002376  5819               	subwfb	??_pad^0,w,c
  2194   002378  A0D8               	btfss	status,0,c
  2195   00237A  EFC1  F011         	goto	u981
  2196   00237E  EFC3  F011         	goto	u980
  2197   002382                     u981:
  2198   002382  EFA8  F011         	goto	l2123
  2199   002386                     u980:
  2200   002386                     
  2201                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  2202   002386  C015  F00C         	movff	pad@buf,fputs@s
  2203   00238A  C016  F00D         	movff	pad@buf+1,fputs@s+1
  2204   00238E  C013  F00E         	movff	pad@fp,fputs@fp
  2205   002392  C014  F00F         	movff	pad@fp+1,fputs@fp+1
  2206   002396  ECED  F012         	call	_fputs	;wreg free
  2207   00239A  0012               	return		;funcret
  2208   00239C                     __end_of_pad:
  2209                           	callstack 0
  2210                           
  2211 ;; *************** function _fputs *****************
  2212 ;; Defined at:
  2213 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  s               2   11[COMRAM] PTR const unsigned char 
  2216 ;;		 -> dbuf(32), 
  2217 ;;  fp              2   13[COMRAM] PTR struct _IO_FILE
  2218 ;;		 -> sprintf@f(11), 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  i               2   16[COMRAM] int 
  2221 ;;  c               1   15[COMRAM] unsigned char 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  2   11[COMRAM] int 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2231 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2232 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2234 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2235 ;;Total ram usage:        7 bytes
  2236 ;; Hardware stack levels used: 1
  2237 ;; Hardware stack levels required when called: 4
  2238 ;; This function calls:
  2239 ;;		_fputc
  2240 ;; This function is called by:
  2241 ;;		_pad
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	text7
  2246   0025DA                     __ptext7:
  2247                           	callstack 0
  2248   0025DA                     _fputs:
  2249                           	callstack 21
  2250   0025DA  0E00               	movlw	0
  2251   0025DC  6E12               	movwf	(fputs@i+1)^0,c
  2252   0025DE  0E00               	movlw	0
  2253   0025E0  6E11               	movwf	fputs@i^0,c
  2254   0025E2  EFFE  F012         	goto	l2035
  2255   0025E6                     l2031:
  2256   0025E6  C010  F003         	movff	fputs@c,fputc@c
  2257   0025EA  6A04               	clrf	(fputc@c+1)^0,c
  2258   0025EC  C00E  F005         	movff	fputs@fp,fputc@fp
  2259   0025F0  C00F  F006         	movff	fputs@fp+1,fputc@fp+1
  2260   0025F4  EC45  F00D         	call	_fputc	;wreg free
  2261   0025F8  4A11               	infsnz	fputs@i^0,f,c
  2262   0025FA  2A12               	incf	(fputs@i+1)^0,f,c
  2263   0025FC                     l2035:
  2264   0025FC  5011               	movf	fputs@i^0,w,c
  2265   0025FE  240C               	addwf	fputs@s^0,w,c
  2266   002600  6ED9               	movwf	fsr2l,c
  2267   002602  5012               	movf	(fputs@i+1)^0,w,c
  2268   002604  200D               	addwfc	(fputs@s+1)^0,w,c
  2269   002606  6EDA               	movwf	fsr2h,c
  2270   002608  50DF               	movf	indf2,w,c
  2271   00260A  6E10               	movwf	fputs@c^0,c
  2272   00260C  5010               	movf	fputs@c^0,w,c
  2273   00260E  A4D8               	btfss	status,2,c
  2274   002610  EF0C  F013         	goto	u831
  2275   002614  EF0E  F013         	goto	u830
  2276   002618                     u831:
  2277   002618  EFF3  F012         	goto	l2031
  2278   00261C                     u830:
  2279   00261C  0012               	return		;funcret
  2280   00261E                     __end_of_fputs:
  2281                           	callstack 0
  2282                           
  2283 ;; *************** function _fputc *****************
  2284 ;; Defined at:
  2285 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  c               2    2[COMRAM] int 
  2288 ;;  fp              2    4[COMRAM] PTR struct _IO_FILE
  2289 ;;		 -> sprintf@f(11), 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;		None
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  2    2[COMRAM] int 
  2294 ;; Registers used:
  2295 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2301 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2303 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2304 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2305 ;;Total ram usage:        9 bytes
  2306 ;; Hardware stack levels used: 1
  2307 ;; Hardware stack levels required when called: 3
  2308 ;; This function calls:
  2309 ;;		_putch
  2310 ;; This function is called by:
  2311 ;;		_pad
  2312 ;;		_vfpfcnvrt
  2313 ;;		_fputs
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text8
  2318   001A8A                     __ptext8:
  2319                           	callstack 0
  2320   001A8A                     _fputc:
  2321                           	callstack 24
  2322   001A8A  5005               	movf	fputc@fp^0,w,c
  2323   001A8C  1006               	iorwf	(fputc@fp+1)^0,w,c
  2324   001A8E  B4D8               	btfsc	status,2,c
  2325   001A90  EF4C  F00D         	goto	u791
  2326   001A94  EF4E  F00D         	goto	u790
  2327   001A98                     u791:
  2328   001A98  EF57  F00D         	goto	l2019
  2329   001A9C                     u790:
  2330   001A9C  5005               	movf	fputc@fp^0,w,c
  2331   001A9E  1006               	iorwf	(fputc@fp+1)^0,w,c
  2332   001AA0  A4D8               	btfss	status,2,c
  2333   001AA2  EF55  F00D         	goto	u801
  2334   001AA6  EF57  F00D         	goto	u800
  2335   001AAA                     u801:
  2336   001AAA  EF5C  F00D         	goto	l2021
  2337   001AAE                     u800:
  2338   001AAE                     l2019:
  2339   001AAE  5003               	movf	fputc@c^0,w,c
  2340   001AB0  EC2D  F014         	call	_putch
  2341   001AB4  EFA9  F00D         	goto	l1150
  2342   001AB8                     l2021:
  2343   001AB8  EE20 F009          	lfsr	2,9
  2344   001ABC  5005               	movf	fputc@fp^0,w,c
  2345   001ABE  26D9               	addwf	fsr2l,f,c
  2346   001AC0  5006               	movf	(fputc@fp+1)^0,w,c
  2347   001AC2  22DA               	addwfc	fsr2h,f,c
  2348   001AC4  50DE               	movf	postinc2,w,c
  2349   001AC6  10DE               	iorwf	postinc2,w,c
  2350   001AC8  B4D8               	btfsc	status,2,c
  2351   001ACA  EF69  F00D         	goto	u811
  2352   001ACE  EF6B  F00D         	goto	u810
  2353   001AD2                     u811:
  2354   001AD2  EF86  F00D         	goto	l2025
  2355   001AD6                     u810:
  2356   001AD6  EE20 F009          	lfsr	2,9
  2357   001ADA  5005               	movf	fputc@fp^0,w,c
  2358   001ADC  26D9               	addwf	fsr2l,f,c
  2359   001ADE  5006               	movf	(fputc@fp+1)^0,w,c
  2360   001AE0  22DA               	addwfc	fsr2h,f,c
  2361   001AE2  EE10 F003          	lfsr	1,3
  2362   001AE6  5005               	movf	fputc@fp^0,w,c
  2363   001AE8  26E1               	addwf	fsr1l,f,c
  2364   001AEA  5006               	movf	(fputc@fp+1)^0,w,c
  2365   001AEC  22E2               	addwfc	fsr1h,f,c
  2366   001AEE  50DE               	movf	postinc2,w,c
  2367   001AF0  5CE6               	subwf	postinc1,w,c
  2368   001AF2  50E6               	movf	postinc1,w,c
  2369   001AF4  0A80               	xorlw	128
  2370   001AF6  6E0B               	movwf	(??_fputc+4)^0,c
  2371   001AF8  50DE               	movf	postinc2,w,c
  2372   001AFA  0A80               	xorlw	128
  2373   001AFC  580B               	subwfb	(??_fputc+4)^0,w,c
  2374   001AFE  B0D8               	btfsc	status,0,c
  2375   001B00  EF84  F00D         	goto	u821
  2376   001B04  EF86  F00D         	goto	u820
  2377   001B08                     u821:
  2378   001B08  EFA9  F00D         	goto	l1150
  2379   001B0C                     u820:
  2380   001B0C                     l2025:
  2381   001B0C  EE20 F003          	lfsr	2,3
  2382   001B10  5005               	movf	fputc@fp^0,w,c
  2383   001B12  26D9               	addwf	fsr2l,f,c
  2384   001B14  5006               	movf	(fputc@fp+1)^0,w,c
  2385   001B16  22DA               	addwfc	fsr2h,f,c
  2386   001B18  CFDE F007          	movff	postinc2,??_fputc
  2387   001B1C  CFDD F008          	movff	postdec2,??_fputc+1
  2388   001B20  C005  FFD9         	movff	fputc@fp,fsr2l
  2389   001B24  C006  FFDA         	movff	fputc@fp+1,fsr2h
  2390   001B28  CFDE F009          	movff	postinc2,??_fputc+2
  2391   001B2C  CFDD F00A          	movff	postdec2,??_fputc+3
  2392   001B30  5007               	movf	??_fputc^0,w,c
  2393   001B32  2409               	addwf	(??_fputc+2)^0,w,c
  2394   001B34  6ED9               	movwf	fsr2l,c
  2395   001B36  5008               	movf	(??_fputc+1)^0,w,c
  2396   001B38  200A               	addwfc	(??_fputc+3)^0,w,c
  2397   001B3A  6EDA               	movwf	fsr2h,c
  2398   001B3C  C003  FFDF         	movff	fputc@c,indf2
  2399   001B40  EE20 F003          	lfsr	2,3
  2400   001B44  5005               	movf	fputc@fp^0,w,c
  2401   001B46  26D9               	addwf	fsr2l,f,c
  2402   001B48  5006               	movf	(fputc@fp+1)^0,w,c
  2403   001B4A  22DA               	addwfc	fsr2h,f,c
  2404   001B4C  2ADE               	incf	postinc2,f,c
  2405   001B4E  0E00               	movlw	0
  2406   001B50  22DD               	addwfc	postdec2,f,c
  2407   001B52                     l1150:
  2408   001B52  0012               	return		;funcret
  2409   001B54                     __end_of_fputc:
  2410                           	callstack 0
  2411                           
  2412 ;; *************** function _putch *****************
  2413 ;; Defined at:
  2414 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;  c               1    wreg     unsigned char 
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  c               1    0[COMRAM] unsigned char 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      void 
  2421 ;; Registers used:
  2422 ;;		wreg
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2432 ;;Total ram usage:        0 bytes
  2433 ;; Hardware stack levels used: 1
  2434 ;; Hardware stack levels required when called: 2
  2435 ;; This function calls:
  2436 ;;		Nothing
  2437 ;; This function is called by:
  2438 ;;		_fputc
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text9
  2443   00285A                     __ptext9:
  2444                           	callstack 0
  2445   00285A                     _putch:
  2446                           	callstack 24
  2447   00285A  0012               	return		;funcret
  2448   00285C                     __end_of_putch:
  2449                           	callstack 0
  2450                           
  2451 ;; *************** function _abs *****************
  2452 ;; Defined at:
  2453 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  a               2   20[COMRAM] int 
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  2   20[COMRAM] int 
  2460 ;; Registers used:
  2461 ;;		wreg, status,2, status,0
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2467 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2469 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2470 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2471 ;;Total ram usage:        4 bytes
  2472 ;; Hardware stack levels used: 1
  2473 ;; Hardware stack levels required when called: 2
  2474 ;; This function calls:
  2475 ;;		Nothing
  2476 ;; This function is called by:
  2477 ;;		_dtoa
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	text10
  2482   0026A2                     __ptext10:
  2483                           	callstack 0
  2484   0026A2                     _abs:
  2485                           	callstack 24
  2486   0026A2  BE16               	btfsc	(abs@a+1)^0,7,c
  2487   0026A4  EF5E  F013         	goto	u990
  2488   0026A8  5016               	movf	(abs@a+1)^0,w,c
  2489   0026AA  E106               	bnz	u991
  2490   0026AC  0415               	decf	abs@a^0,w,c
  2491   0026AE  B0D8               	btfsc	status,0,c
  2492   0026B0  EF5C  F013         	goto	u991
  2493   0026B4  EF5E  F013         	goto	u990
  2494   0026B8                     u991:
  2495   0026B8  EF6C  F013         	goto	l1135
  2496   0026BC                     u990:
  2497   0026BC  C015  F017         	movff	abs@a,??_abs
  2498   0026C0  C016  F018         	movff	abs@a+1,??_abs+1
  2499   0026C4  1E17               	comf	??_abs^0,f,c
  2500   0026C6  1E18               	comf	(??_abs+1)^0,f,c
  2501   0026C8  4A17               	infsnz	??_abs^0,f,c
  2502   0026CA  2A18               	incf	(??_abs+1)^0,f,c
  2503   0026CC  C017  F015         	movff	??_abs,?_abs
  2504   0026D0  C018  F016         	movff	??_abs+1,?_abs+1
  2505   0026D4  EF70  F013         	goto	l1138
  2506   0026D8                     l1135:
  2507   0026D8  C015  F015         	movff	abs@a,?_abs
  2508   0026DC  C016  F016         	movff	abs@a+1,?_abs+1
  2509   0026E0                     l1138:
  2510   0026E0  0012               	return		;funcret
  2511   0026E2                     __end_of_abs:
  2512                           	callstack 0
  2513                           
  2514 ;; *************** function ___aomod *****************
  2515 ;; Defined at:
  2516 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  dividend        8    2[COMRAM] long long 
  2519 ;;  divisor         8   10[COMRAM] long long 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  sign            1   19[COMRAM] unsigned char 
  2522 ;;  counter         1   18[COMRAM] unsigned char 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  8    2[COMRAM] long long 
  2525 ;; Registers used:
  2526 ;;		wreg, status,2, status,0
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2532 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2533 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2535 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2536 ;;Total ram usage:       18 bytes
  2537 ;; Hardware stack levels used: 1
  2538 ;; Hardware stack levels required when called: 2
  2539 ;; This function calls:
  2540 ;;		Nothing
  2541 ;; This function is called by:
  2542 ;;		_dtoa
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           	psect	text11
  2547   00169E                     __ptext11:
  2548                           	callstack 0
  2549   00169E                     ___aomod:
  2550                           	callstack 24
  2551   00169E  0E00               	movlw	0
  2552   0016A0  6E14               	movwf	___aomod@sign^0,c
  2553   0016A2  BE0A               	btfsc	(___aomod@dividend+7)^0,7,c
  2554   0016A4  EF58  F00B         	goto	u910
  2555   0016A8  EF56  F00B         	goto	u911
  2556   0016AC                     u911:
  2557   0016AC  EF6A  F00B         	goto	l2089
  2558   0016B0                     u910:
  2559   0016B0  1E0A               	comf	(___aomod@dividend+7)^0,f,c
  2560   0016B2  1E09               	comf	(___aomod@dividend+6)^0,f,c
  2561   0016B4  1E08               	comf	(___aomod@dividend+5)^0,f,c
  2562   0016B6  1E07               	comf	(___aomod@dividend+4)^0,f,c
  2563   0016B8  1E06               	comf	(___aomod@dividend+3)^0,f,c
  2564   0016BA  1E05               	comf	(___aomod@dividend+2)^0,f,c
  2565   0016BC  1E04               	comf	(___aomod@dividend+1)^0,f,c
  2566   0016BE  6C03               	negf	___aomod@dividend^0,c
  2567   0016C0  0E00               	movlw	0
  2568   0016C2  2204               	addwfc	(___aomod@dividend+1)^0,f,c
  2569   0016C4  2205               	addwfc	(___aomod@dividend+2)^0,f,c
  2570   0016C6  2206               	addwfc	(___aomod@dividend+3)^0,f,c
  2571   0016C8  2207               	addwfc	(___aomod@dividend+4)^0,f,c
  2572   0016CA  2208               	addwfc	(___aomod@dividend+5)^0,f,c
  2573   0016CC  2209               	addwfc	(___aomod@dividend+6)^0,f,c
  2574   0016CE  220A               	addwfc	(___aomod@dividend+7)^0,f,c
  2575   0016D0  0E01               	movlw	1
  2576   0016D2  6E14               	movwf	___aomod@sign^0,c
  2577   0016D4                     l2089:
  2578   0016D4  BE12               	btfsc	(___aomod@divisor+7)^0,7,c
  2579   0016D6  EF71  F00B         	goto	u920
  2580   0016DA  EF6F  F00B         	goto	u921
  2581   0016DE                     u921:
  2582   0016DE  EF81  F00B         	goto	l2093
  2583   0016E2                     u920:
  2584   0016E2  1E12               	comf	(___aomod@divisor+7)^0,f,c
  2585   0016E4  1E11               	comf	(___aomod@divisor+6)^0,f,c
  2586   0016E6  1E10               	comf	(___aomod@divisor+5)^0,f,c
  2587   0016E8  1E0F               	comf	(___aomod@divisor+4)^0,f,c
  2588   0016EA  1E0E               	comf	(___aomod@divisor+3)^0,f,c
  2589   0016EC  1E0D               	comf	(___aomod@divisor+2)^0,f,c
  2590   0016EE  1E0C               	comf	(___aomod@divisor+1)^0,f,c
  2591   0016F0  6C0B               	negf	___aomod@divisor^0,c
  2592   0016F2  0E00               	movlw	0
  2593   0016F4  220C               	addwfc	(___aomod@divisor+1)^0,f,c
  2594   0016F6  220D               	addwfc	(___aomod@divisor+2)^0,f,c
  2595   0016F8  220E               	addwfc	(___aomod@divisor+3)^0,f,c
  2596   0016FA  220F               	addwfc	(___aomod@divisor+4)^0,f,c
  2597   0016FC  2210               	addwfc	(___aomod@divisor+5)^0,f,c
  2598   0016FE  2211               	addwfc	(___aomod@divisor+6)^0,f,c
  2599   001700  2212               	addwfc	(___aomod@divisor+7)^0,f,c
  2600   001702                     l2093:
  2601   001702  500B               	movf	___aomod@divisor^0,w,c
  2602   001704  100C               	iorwf	(___aomod@divisor+1)^0,w,c
  2603   001706  100D               	iorwf	(___aomod@divisor+2)^0,w,c
  2604   001708  100E               	iorwf	(___aomod@divisor+3)^0,w,c
  2605   00170A  100F               	iorwf	(___aomod@divisor+4)^0,w,c
  2606   00170C  1010               	iorwf	(___aomod@divisor+5)^0,w,c
  2607   00170E  1011               	iorwf	(___aomod@divisor+6)^0,w,c
  2608   001710  1012               	iorwf	(___aomod@divisor+7)^0,w,c
  2609   001712  B4D8               	btfsc	status,2,c
  2610   001714  EF8E  F00B         	goto	u931
  2611   001718  EF90  F00B         	goto	u930
  2612   00171C                     u931:
  2613   00171C  EFD8  F00B         	goto	l2109
  2614   001720                     u930:
  2615   001720  0E01               	movlw	1
  2616   001722  6E13               	movwf	___aomod@counter^0,c
  2617   001724  EF9E  F00B         	goto	l2099
  2618   001728                     l2097:
  2619   001728  90D8               	bcf	status,0,c
  2620   00172A  360B               	rlcf	___aomod@divisor^0,f,c
  2621   00172C  360C               	rlcf	(___aomod@divisor+1)^0,f,c
  2622   00172E  360D               	rlcf	(___aomod@divisor+2)^0,f,c
  2623   001730  360E               	rlcf	(___aomod@divisor+3)^0,f,c
  2624   001732  360F               	rlcf	(___aomod@divisor+4)^0,f,c
  2625   001734  3610               	rlcf	(___aomod@divisor+5)^0,f,c
  2626   001736  3611               	rlcf	(___aomod@divisor+6)^0,f,c
  2627   001738  3612               	rlcf	(___aomod@divisor+7)^0,f,c
  2628   00173A  2A13               	incf	___aomod@counter^0,f,c
  2629   00173C                     l2099:
  2630   00173C  AE12               	btfss	(___aomod@divisor+7)^0,7,c
  2631   00173E  EFA3  F00B         	goto	u941
  2632   001742  EFA5  F00B         	goto	u940
  2633   001746                     u941:
  2634   001746  EF94  F00B         	goto	l2097
  2635   00174A                     u940:
  2636   00174A                     l2101:
  2637   00174A  500B               	movf	___aomod@divisor^0,w,c
  2638   00174C  5C03               	subwf	___aomod@dividend^0,w,c
  2639   00174E  500C               	movf	(___aomod@divisor+1)^0,w,c
  2640   001750  5804               	subwfb	(___aomod@dividend+1)^0,w,c
  2641   001752  500D               	movf	(___aomod@divisor+2)^0,w,c
  2642   001754  5805               	subwfb	(___aomod@dividend+2)^0,w,c
  2643   001756  500E               	movf	(___aomod@divisor+3)^0,w,c
  2644   001758  5806               	subwfb	(___aomod@dividend+3)^0,w,c
  2645   00175A  500F               	movf	(___aomod@divisor+4)^0,w,c
  2646   00175C  5807               	subwfb	(___aomod@dividend+4)^0,w,c
  2647   00175E  5010               	movf	(___aomod@divisor+5)^0,w,c
  2648   001760  5808               	subwfb	(___aomod@dividend+5)^0,w,c
  2649   001762  5011               	movf	(___aomod@divisor+6)^0,w,c
  2650   001764  5809               	subwfb	(___aomod@dividend+6)^0,w,c
  2651   001766  5012               	movf	(___aomod@divisor+7)^0,w,c
  2652   001768  580A               	subwfb	(___aomod@dividend+7)^0,w,c
  2653   00176A  A0D8               	btfss	status,0,c
  2654   00176C  EFBA  F00B         	goto	u951
  2655   001770  EFBC  F00B         	goto	u950
  2656   001774                     u951:
  2657   001774  EFCC  F00B         	goto	l2105
  2658   001778                     u950:
  2659   001778  500B               	movf	___aomod@divisor^0,w,c
  2660   00177A  5E03               	subwf	___aomod@dividend^0,f,c
  2661   00177C  500C               	movf	(___aomod@divisor+1)^0,w,c
  2662   00177E  5A04               	subwfb	(___aomod@dividend+1)^0,f,c
  2663   001780  500D               	movf	(___aomod@divisor+2)^0,w,c
  2664   001782  5A05               	subwfb	(___aomod@dividend+2)^0,f,c
  2665   001784  500E               	movf	(___aomod@divisor+3)^0,w,c
  2666   001786  5A06               	subwfb	(___aomod@dividend+3)^0,f,c
  2667   001788  500F               	movf	(___aomod@divisor+4)^0,w,c
  2668   00178A  5A07               	subwfb	(___aomod@dividend+4)^0,f,c
  2669   00178C  5010               	movf	(___aomod@divisor+5)^0,w,c
  2670   00178E  5A08               	subwfb	(___aomod@dividend+5)^0,f,c
  2671   001790  5011               	movf	(___aomod@divisor+6)^0,w,c
  2672   001792  5A09               	subwfb	(___aomod@dividend+6)^0,f,c
  2673   001794  5012               	movf	(___aomod@divisor+7)^0,w,c
  2674   001796  5A0A               	subwfb	(___aomod@dividend+7)^0,f,c
  2675   001798                     l2105:
  2676   001798  90D8               	bcf	status,0,c
  2677   00179A  3212               	rrcf	(___aomod@divisor+7)^0,f,c
  2678   00179C  3211               	rrcf	(___aomod@divisor+6)^0,f,c
  2679   00179E  3210               	rrcf	(___aomod@divisor+5)^0,f,c
  2680   0017A0  320F               	rrcf	(___aomod@divisor+4)^0,f,c
  2681   0017A2  320E               	rrcf	(___aomod@divisor+3)^0,f,c
  2682   0017A4  320D               	rrcf	(___aomod@divisor+2)^0,f,c
  2683   0017A6  320C               	rrcf	(___aomod@divisor+1)^0,f,c
  2684   0017A8  320B               	rrcf	___aomod@divisor^0,f,c
  2685   0017AA  2E13               	decfsz	___aomod@counter^0,f,c
  2686   0017AC  EFA5  F00B         	goto	l2101
  2687   0017B0                     l2109:
  2688   0017B0  5014               	movf	___aomod@sign^0,w,c
  2689   0017B2  B4D8               	btfsc	status,2,c
  2690   0017B4  EFDE  F00B         	goto	u961
  2691   0017B8  EFE0  F00B         	goto	u960
  2692   0017BC                     u961:
  2693   0017BC  EFF0  F00B         	goto	l2113
  2694   0017C0                     u960:
  2695   0017C0  1E0A               	comf	(___aomod@dividend+7)^0,f,c
  2696   0017C2  1E09               	comf	(___aomod@dividend+6)^0,f,c
  2697   0017C4  1E08               	comf	(___aomod@dividend+5)^0,f,c
  2698   0017C6  1E07               	comf	(___aomod@dividend+4)^0,f,c
  2699   0017C8  1E06               	comf	(___aomod@dividend+3)^0,f,c
  2700   0017CA  1E05               	comf	(___aomod@dividend+2)^0,f,c
  2701   0017CC  1E04               	comf	(___aomod@dividend+1)^0,f,c
  2702   0017CE  6C03               	negf	___aomod@dividend^0,c
  2703   0017D0  0E00               	movlw	0
  2704   0017D2  2204               	addwfc	(___aomod@dividend+1)^0,f,c
  2705   0017D4  2205               	addwfc	(___aomod@dividend+2)^0,f,c
  2706   0017D6  2206               	addwfc	(___aomod@dividend+3)^0,f,c
  2707   0017D8  2207               	addwfc	(___aomod@dividend+4)^0,f,c
  2708   0017DA  2208               	addwfc	(___aomod@dividend+5)^0,f,c
  2709   0017DC  2209               	addwfc	(___aomod@dividend+6)^0,f,c
  2710   0017DE  220A               	addwfc	(___aomod@dividend+7)^0,f,c
  2711   0017E0                     l2113:
  2712   0017E0  C003  F003         	movff	___aomod@dividend,?___aomod
  2713   0017E4  C004  F004         	movff	___aomod@dividend+1,?___aomod+1
  2714   0017E8  C005  F005         	movff	___aomod@dividend+2,?___aomod+2
  2715   0017EC  C006  F006         	movff	___aomod@dividend+3,?___aomod+3
  2716   0017F0  C007  F007         	movff	___aomod@dividend+4,?___aomod+4
  2717   0017F4  C008  F008         	movff	___aomod@dividend+5,?___aomod+5
  2718   0017F8  C009  F009         	movff	___aomod@dividend+6,?___aomod+6
  2719   0017FC  C00A  F00A         	movff	___aomod@dividend+7,?___aomod+7
  2720   001800  0012               	return		;funcret
  2721   001802                     __end_of___aomod:
  2722                           	callstack 0
  2723                           
  2724 ;; *************** function ___aodiv *****************
  2725 ;; Defined at:
  2726 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;  dividend        8    2[COMRAM] long long 
  2729 ;;  divisor         8   10[COMRAM] long long 
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;  quotient        8   20[COMRAM] long long 
  2732 ;;  sign            1   19[COMRAM] unsigned char 
  2733 ;;  counter         1   18[COMRAM] unsigned char 
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  8    2[COMRAM] long long 
  2736 ;; Registers used:
  2737 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2743 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2744 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2746 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2747 ;;Total ram usage:       26 bytes
  2748 ;; Hardware stack levels used: 1
  2749 ;; Hardware stack levels required when called: 2
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_dtoa
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text12
  2758   001516                     __ptext12:
  2759                           	callstack 0
  2760   001516                     ___aodiv:
  2761                           	callstack 24
  2762   001516  0E00               	movlw	0
  2763   001518  6E14               	movwf	___aodiv@sign^0,c
  2764   00151A  BE12               	btfsc	(___aodiv@divisor+7)^0,7,c
  2765   00151C  EF94  F00A         	goto	u840
  2766   001520  EF92  F00A         	goto	u841
  2767   001524                     u841:
  2768   001524  EFA6  F00A         	goto	l2045
  2769   001528                     u840:
  2770   001528  1E12               	comf	(___aodiv@divisor+7)^0,f,c
  2771   00152A  1E11               	comf	(___aodiv@divisor+6)^0,f,c
  2772   00152C  1E10               	comf	(___aodiv@divisor+5)^0,f,c
  2773   00152E  1E0F               	comf	(___aodiv@divisor+4)^0,f,c
  2774   001530  1E0E               	comf	(___aodiv@divisor+3)^0,f,c
  2775   001532  1E0D               	comf	(___aodiv@divisor+2)^0,f,c
  2776   001534  1E0C               	comf	(___aodiv@divisor+1)^0,f,c
  2777   001536  6C0B               	negf	___aodiv@divisor^0,c
  2778   001538  0E00               	movlw	0
  2779   00153A  220C               	addwfc	(___aodiv@divisor+1)^0,f,c
  2780   00153C  220D               	addwfc	(___aodiv@divisor+2)^0,f,c
  2781   00153E  220E               	addwfc	(___aodiv@divisor+3)^0,f,c
  2782   001540  220F               	addwfc	(___aodiv@divisor+4)^0,f,c
  2783   001542  2210               	addwfc	(___aodiv@divisor+5)^0,f,c
  2784   001544  2211               	addwfc	(___aodiv@divisor+6)^0,f,c
  2785   001546  2212               	addwfc	(___aodiv@divisor+7)^0,f,c
  2786   001548  0E01               	movlw	1
  2787   00154A  6E14               	movwf	___aodiv@sign^0,c
  2788   00154C                     l2045:
  2789   00154C  BE0A               	btfsc	(___aodiv@dividend+7)^0,7,c
  2790   00154E  EFAD  F00A         	goto	u850
  2791   001552  EFAB  F00A         	goto	u851
  2792   001556                     u851:
  2793   001556  EFBF  F00A         	goto	l2051
  2794   00155A                     u850:
  2795   00155A  1E0A               	comf	(___aodiv@dividend+7)^0,f,c
  2796   00155C  1E09               	comf	(___aodiv@dividend+6)^0,f,c
  2797   00155E  1E08               	comf	(___aodiv@dividend+5)^0,f,c
  2798   001560  1E07               	comf	(___aodiv@dividend+4)^0,f,c
  2799   001562  1E06               	comf	(___aodiv@dividend+3)^0,f,c
  2800   001564  1E05               	comf	(___aodiv@dividend+2)^0,f,c
  2801   001566  1E04               	comf	(___aodiv@dividend+1)^0,f,c
  2802   001568  6C03               	negf	___aodiv@dividend^0,c
  2803   00156A  0E00               	movlw	0
  2804   00156C  2204               	addwfc	(___aodiv@dividend+1)^0,f,c
  2805   00156E  2205               	addwfc	(___aodiv@dividend+2)^0,f,c
  2806   001570  2206               	addwfc	(___aodiv@dividend+3)^0,f,c
  2807   001572  2207               	addwfc	(___aodiv@dividend+4)^0,f,c
  2808   001574  2208               	addwfc	(___aodiv@dividend+5)^0,f,c
  2809   001576  2209               	addwfc	(___aodiv@dividend+6)^0,f,c
  2810   001578  220A               	addwfc	(___aodiv@dividend+7)^0,f,c
  2811   00157A  0E01               	movlw	1
  2812   00157C  1A14               	xorwf	___aodiv@sign^0,f,c
  2813   00157E                     l2051:
  2814   00157E  EE20  F015         	lfsr	2,___aodiv@quotient
  2815   001582  0E07               	movlw	7
  2816   001584                     u861:
  2817   001584  6ADE               	clrf	postinc2,c
  2818   001586  06E8               	decf	wreg,f,c
  2819   001588  E2FD               	bc	u861
  2820   00158A  500B               	movf	___aodiv@divisor^0,w,c
  2821   00158C  100C               	iorwf	(___aodiv@divisor+1)^0,w,c
  2822   00158E  100D               	iorwf	(___aodiv@divisor+2)^0,w,c
  2823   001590  100E               	iorwf	(___aodiv@divisor+3)^0,w,c
  2824   001592  100F               	iorwf	(___aodiv@divisor+4)^0,w,c
  2825   001594  1010               	iorwf	(___aodiv@divisor+5)^0,w,c
  2826   001596  1011               	iorwf	(___aodiv@divisor+6)^0,w,c
  2827   001598  1012               	iorwf	(___aodiv@divisor+7)^0,w,c
  2828   00159A  B4D8               	btfsc	status,2,c
  2829   00159C  EFD2  F00A         	goto	u871
  2830   0015A0  EFD4  F00A         	goto	u870
  2831   0015A4                     u871:
  2832   0015A4  EF26  F00B         	goto	l2073
  2833   0015A8                     u870:
  2834   0015A8  0E01               	movlw	1
  2835   0015AA  6E13               	movwf	___aodiv@counter^0,c
  2836   0015AC  EFE2  F00A         	goto	l2059
  2837   0015B0                     l2057:
  2838   0015B0  90D8               	bcf	status,0,c
  2839   0015B2  360B               	rlcf	___aodiv@divisor^0,f,c
  2840   0015B4  360C               	rlcf	(___aodiv@divisor+1)^0,f,c
  2841   0015B6  360D               	rlcf	(___aodiv@divisor+2)^0,f,c
  2842   0015B8  360E               	rlcf	(___aodiv@divisor+3)^0,f,c
  2843   0015BA  360F               	rlcf	(___aodiv@divisor+4)^0,f,c
  2844   0015BC  3610               	rlcf	(___aodiv@divisor+5)^0,f,c
  2845   0015BE  3611               	rlcf	(___aodiv@divisor+6)^0,f,c
  2846   0015C0  3612               	rlcf	(___aodiv@divisor+7)^0,f,c
  2847   0015C2  2A13               	incf	___aodiv@counter^0,f,c
  2848   0015C4                     l2059:
  2849   0015C4  AE12               	btfss	(___aodiv@divisor+7)^0,7,c
  2850   0015C6  EFE7  F00A         	goto	u881
  2851   0015CA  EFE9  F00A         	goto	u880
  2852   0015CE                     u881:
  2853   0015CE  EFD8  F00A         	goto	l2057
  2854   0015D2                     u880:
  2855   0015D2                     l2061:
  2856   0015D2  90D8               	bcf	status,0,c
  2857   0015D4  3615               	rlcf	___aodiv@quotient^0,f,c
  2858   0015D6  3616               	rlcf	(___aodiv@quotient+1)^0,f,c
  2859   0015D8  3617               	rlcf	(___aodiv@quotient+2)^0,f,c
  2860   0015DA  3618               	rlcf	(___aodiv@quotient+3)^0,f,c
  2861   0015DC  3619               	rlcf	(___aodiv@quotient+4)^0,f,c
  2862   0015DE  361A               	rlcf	(___aodiv@quotient+5)^0,f,c
  2863   0015E0  361B               	rlcf	(___aodiv@quotient+6)^0,f,c
  2864   0015E2  361C               	rlcf	(___aodiv@quotient+7)^0,f,c
  2865   0015E4  500B               	movf	___aodiv@divisor^0,w,c
  2866   0015E6  5C03               	subwf	___aodiv@dividend^0,w,c
  2867   0015E8  500C               	movf	(___aodiv@divisor+1)^0,w,c
  2868   0015EA  5804               	subwfb	(___aodiv@dividend+1)^0,w,c
  2869   0015EC  500D               	movf	(___aodiv@divisor+2)^0,w,c
  2870   0015EE  5805               	subwfb	(___aodiv@dividend+2)^0,w,c
  2871   0015F0  500E               	movf	(___aodiv@divisor+3)^0,w,c
  2872   0015F2  5806               	subwfb	(___aodiv@dividend+3)^0,w,c
  2873   0015F4  500F               	movf	(___aodiv@divisor+4)^0,w,c
  2874   0015F6  5807               	subwfb	(___aodiv@dividend+4)^0,w,c
  2875   0015F8  5010               	movf	(___aodiv@divisor+5)^0,w,c
  2876   0015FA  5808               	subwfb	(___aodiv@dividend+5)^0,w,c
  2877   0015FC  5011               	movf	(___aodiv@divisor+6)^0,w,c
  2878   0015FE  5809               	subwfb	(___aodiv@dividend+6)^0,w,c
  2879   001600  5012               	movf	(___aodiv@divisor+7)^0,w,c
  2880   001602  580A               	subwfb	(___aodiv@dividend+7)^0,w,c
  2881   001604  A0D8               	btfss	status,0,c
  2882   001606  EF07  F00B         	goto	u891
  2883   00160A  EF09  F00B         	goto	u890
  2884   00160E                     u891:
  2885   00160E  EF1A  F00B         	goto	l2069
  2886   001612                     u890:
  2887   001612  500B               	movf	___aodiv@divisor^0,w,c
  2888   001614  5E03               	subwf	___aodiv@dividend^0,f,c
  2889   001616  500C               	movf	(___aodiv@divisor+1)^0,w,c
  2890   001618  5A04               	subwfb	(___aodiv@dividend+1)^0,f,c
  2891   00161A  500D               	movf	(___aodiv@divisor+2)^0,w,c
  2892   00161C  5A05               	subwfb	(___aodiv@dividend+2)^0,f,c
  2893   00161E  500E               	movf	(___aodiv@divisor+3)^0,w,c
  2894   001620  5A06               	subwfb	(___aodiv@dividend+3)^0,f,c
  2895   001622  500F               	movf	(___aodiv@divisor+4)^0,w,c
  2896   001624  5A07               	subwfb	(___aodiv@dividend+4)^0,f,c
  2897   001626  5010               	movf	(___aodiv@divisor+5)^0,w,c
  2898   001628  5A08               	subwfb	(___aodiv@dividend+5)^0,f,c
  2899   00162A  5011               	movf	(___aodiv@divisor+6)^0,w,c
  2900   00162C  5A09               	subwfb	(___aodiv@dividend+6)^0,f,c
  2901   00162E  5012               	movf	(___aodiv@divisor+7)^0,w,c
  2902   001630  5A0A               	subwfb	(___aodiv@dividend+7)^0,f,c
  2903   001632  8015               	bsf	___aodiv@quotient^0,0,c
  2904   001634                     l2069:
  2905   001634  90D8               	bcf	status,0,c
  2906   001636  3212               	rrcf	(___aodiv@divisor+7)^0,f,c
  2907   001638  3211               	rrcf	(___aodiv@divisor+6)^0,f,c
  2908   00163A  3210               	rrcf	(___aodiv@divisor+5)^0,f,c
  2909   00163C  320F               	rrcf	(___aodiv@divisor+4)^0,f,c
  2910   00163E  320E               	rrcf	(___aodiv@divisor+3)^0,f,c
  2911   001640  320D               	rrcf	(___aodiv@divisor+2)^0,f,c
  2912   001642  320C               	rrcf	(___aodiv@divisor+1)^0,f,c
  2913   001644  320B               	rrcf	___aodiv@divisor^0,f,c
  2914   001646  2E13               	decfsz	___aodiv@counter^0,f,c
  2915   001648  EFE9  F00A         	goto	l2061
  2916   00164C                     l2073:
  2917   00164C  5014               	movf	___aodiv@sign^0,w,c
  2918   00164E  B4D8               	btfsc	status,2,c
  2919   001650  EF2C  F00B         	goto	u901
  2920   001654  EF2E  F00B         	goto	u900
  2921   001658                     u901:
  2922   001658  EF3E  F00B         	goto	l2077
  2923   00165C                     u900:
  2924   00165C  1E1C               	comf	(___aodiv@quotient+7)^0,f,c
  2925   00165E  1E1B               	comf	(___aodiv@quotient+6)^0,f,c
  2926   001660  1E1A               	comf	(___aodiv@quotient+5)^0,f,c
  2927   001662  1E19               	comf	(___aodiv@quotient+4)^0,f,c
  2928   001664  1E18               	comf	(___aodiv@quotient+3)^0,f,c
  2929   001666  1E17               	comf	(___aodiv@quotient+2)^0,f,c
  2930   001668  1E16               	comf	(___aodiv@quotient+1)^0,f,c
  2931   00166A  6C15               	negf	___aodiv@quotient^0,c
  2932   00166C  0E00               	movlw	0
  2933   00166E  2216               	addwfc	(___aodiv@quotient+1)^0,f,c
  2934   001670  2217               	addwfc	(___aodiv@quotient+2)^0,f,c
  2935   001672  2218               	addwfc	(___aodiv@quotient+3)^0,f,c
  2936   001674  2219               	addwfc	(___aodiv@quotient+4)^0,f,c
  2937   001676  221A               	addwfc	(___aodiv@quotient+5)^0,f,c
  2938   001678  221B               	addwfc	(___aodiv@quotient+6)^0,f,c
  2939   00167A  221C               	addwfc	(___aodiv@quotient+7)^0,f,c
  2940   00167C                     l2077:
  2941   00167C  C015  F003         	movff	___aodiv@quotient,?___aodiv
  2942   001680  C016  F004         	movff	___aodiv@quotient+1,?___aodiv+1
  2943   001684  C017  F005         	movff	___aodiv@quotient+2,?___aodiv+2
  2944   001688  C018  F006         	movff	___aodiv@quotient+3,?___aodiv+3
  2945   00168C  C019  F007         	movff	___aodiv@quotient+4,?___aodiv+4
  2946   001690  C01A  F008         	movff	___aodiv@quotient+5,?___aodiv+5
  2947   001694  C01B  F009         	movff	___aodiv@quotient+6,?___aodiv+6
  2948   001698  C01C  F00A         	movff	___aodiv@quotient+7,?___aodiv+7
  2949   00169C  0012               	return		;funcret
  2950   00169E                     __end_of___aodiv:
  2951                           	callstack 0
  2952                           
  2953 ;; *************** function _sendStringSerial4 *****************
  2954 ;; Defined at:
  2955 ;;		line 37 in file "../serial.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  string          2    3[COMRAM] PTR unsigned char 
  2958 ;;		 -> main@readout(50), 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;		None
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  1    wreg      void 
  2963 ;; Registers used:
  2964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2970 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2973 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2974 ;;Total ram usage:        2 bytes
  2975 ;; Hardware stack levels used: 1
  2976 ;; Hardware stack levels required when called: 3
  2977 ;; This function calls:
  2978 ;;		_sendCharSerial4
  2979 ;; This function is called by:
  2980 ;;		_main
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text13
  2985   0026E2                     __ptext13:
  2986                           	callstack 0
  2987   0026E2                     _sendStringSerial4:
  2988                           	callstack 27
  2989   0026E2                     
  2990                           ;../serial.c: 40:     while (*string != 0)
  2991   0026E2  EF7C  F013         	goto	l2657
  2992   0026E6                     l2653:
  2993                           
  2994                           ;../serial.c: 41:     {;../serial.c: 42:         sendCharSerial4(*string++);
  2995   0026E6  C004  FFD9         	movff	sendStringSerial4@string,fsr2l
  2996   0026EA  C005  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  2997   0026EE  50DF               	movf	indf2,w,c
  2998   0026F0  EC01  F014         	call	_sendCharSerial4
  2999   0026F4  4A04               	infsnz	sendStringSerial4@string^0,f,c
  3000   0026F6  2A05               	incf	(sendStringSerial4@string+1)^0,f,c
  3001   0026F8                     l2657:
  3002                           
  3003                           ;../serial.c: 40:     while (*string != 0)
  3004   0026F8  C004  FFD9         	movff	sendStringSerial4@string,fsr2l
  3005   0026FC  C005  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3006   002700  50DF               	movf	indf2,w,c
  3007   002702  A4D8               	btfss	status,2,c
  3008   002704  EF86  F013         	goto	u1431
  3009   002708  EF88  F013         	goto	u1430
  3010   00270C                     u1431:
  3011   00270C  EF73  F013         	goto	l2653
  3012   002710                     u1430:
  3013   002710  0012               	return		;funcret
  3014   002712                     __end_of_sendStringSerial4:
  3015                           	callstack 0
  3016                           
  3017 ;; *************** function _sendCharSerial4 *****************
  3018 ;; Defined at:
  3019 ;;		line 30 in file "../serial.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  charToSend      1    wreg     unsigned char 
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;  charToSend      1    2[COMRAM] unsigned char 
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  1    wreg      void 
  3026 ;; Registers used:
  3027 ;;		wreg
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3036 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3037 ;;Total ram usage:        1 bytes
  3038 ;; Hardware stack levels used: 1
  3039 ;; Hardware stack levels required when called: 2
  3040 ;; This function calls:
  3041 ;;		Nothing
  3042 ;; This function is called by:
  3043 ;;		_sendStringSerial4
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text14
  3048   002802                     __ptext14:
  3049                           	callstack 0
  3050   002802                     _sendCharSerial4:
  3051                           	callstack 27
  3052                           
  3053                           ;incstack = 0
  3054                           ;sendCharSerial4@charToSend stored from wreg
  3055   002802  6E03               	movwf	sendCharSerial4@charToSend^0,c
  3056   002804                     l383:
  3057   002804  010E               	movlb	14	; () banked
  3058   002806  A537               	btfss	55,2,b	;volatile
  3059   002808  EF08  F014         	goto	u1331
  3060   00280C  EF0A  F014         	goto	u1330
  3061   002810                     u1331:
  3062   002810  EF02  F014         	goto	l383
  3063   002814                     u1330:
  3064   002814                     
  3065                           ; BSR set to: 14
  3066                           ;../serial.c: 32:     TX4REG = charToSend;
  3067   002814  C003  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3068   002818                     
  3069                           ; BSR set to: 14
  3070   002818  0012               	return		;funcret
  3071   00281A                     __end_of_sendCharSerial4:
  3072                           	callstack 0
  3073                           
  3074 ;; *************** function _motor_action *****************
  3075 ;; Defined at:
  3076 ;;		line 181 in file "../dc_motor.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  color           2   35[COMRAM] unsigned int 
  3079 ;;  l               2   37[COMRAM] PTR struct DC_motor
  3080 ;;		 -> main@motorL(9), 
  3081 ;;  r               2   39[COMRAM] PTR struct DC_motor
  3082 ;;		 -> main@motorR(9), 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;		None
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      void 
  3087 ;; Registers used:
  3088 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3094 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3096 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3097 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3098 ;;Total ram usage:        8 bytes
  3099 ;; Hardware stack levels used: 1
  3100 ;; Hardware stack levels required when called: 5
  3101 ;; This function calls:
  3102 ;;		_left_135
  3103 ;;		_left_90
  3104 ;;		_reverse
  3105 ;;		_right_135
  3106 ;;		_right_90
  3107 ;;		_spin_180
  3108 ;; This function is called by:
  3109 ;;		_main
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text15
  3114   001960                     __ptext15:
  3115                           	callstack 0
  3116   001960                     _motor_action:
  3117                           	callstack 25
  3118   001960                     
  3119                           ;../dc_motor.c: 181: void motor_action(unsigned int color, struct DC_motor *l, struct DC
      +                          _motor *r);../dc_motor.c: 182: {;../dc_motor.c: 183:     switch (color){
  3120   001960  EF1A  F00D         	goto	l2717
  3121   001964                     l2701:
  3122                           
  3123                           ;../dc_motor.c: 185:             right_90(l,r);
  3124   001964  C026  F01C         	movff	motor_action@l,right_90@mL
  3125   001968  C027  F01D         	movff	motor_action@l+1,right_90@mL+1
  3126   00196C  C028  F01E         	movff	motor_action@r,right_90@mR
  3127   001970  C029  F01F         	movff	motor_action@r+1,right_90@mR+1
  3128   001974  EC1D  F00F         	call	_right_90	;wreg free
  3129                           
  3130                           ;../dc_motor.c: 186:             break;
  3131   001978  EF44  F00D         	goto	l297
  3132   00197C                     l2703:
  3133                           
  3134                           ;../dc_motor.c: 188:             left_90(l,r);
  3135   00197C  C026  F01C         	movff	motor_action@l,left_90@mL
  3136   001980  C027  F01D         	movff	motor_action@l+1,left_90@mL+1
  3137   001984  C028  F01E         	movff	motor_action@r,left_90@mR
  3138   001988  C029  F01F         	movff	motor_action@r+1,left_90@mR+1
  3139   00198C  EC6F  F00F         	call	_left_90	;wreg free
  3140                           
  3141                           ;../dc_motor.c: 189:             break;
  3142   001990  EF44  F00D         	goto	l297
  3143   001994                     l2705:
  3144                           
  3145                           ;../dc_motor.c: 191:             spin_180(l,r);
  3146   001994  C026  F01C         	movff	motor_action@l,spin_180@mL
  3147   001998  C027  F01D         	movff	motor_action@l+1,spin_180@mL+1
  3148   00199C  C028  F01E         	movff	motor_action@r,spin_180@mR
  3149   0019A0  C029  F01F         	movff	motor_action@r+1,spin_180@mR+1
  3150   0019A4  ECC1  F00F         	call	_spin_180	;wreg free
  3151                           
  3152                           ;../dc_motor.c: 192:             break;
  3153   0019A8  EF44  F00D         	goto	l297
  3154   0019AC                     l2707:
  3155                           
  3156                           ;../dc_motor.c: 194:             reverse(l,r);
  3157   0019AC  C026  F01C         	movff	motor_action@l,reverse@mL
  3158   0019B0  C027  F01D         	movff	motor_action@l+1,reverse@mL+1
  3159   0019B4  C028  F01E         	movff	motor_action@r,reverse@mR
  3160   0019B8  C029  F01F         	movff	motor_action@r+1,reverse@mR+1
  3161   0019BC  EC63  F010         	call	_reverse	;wreg free
  3162                           
  3163                           ;../dc_motor.c: 195:             right_90(l,r);
  3164   0019C0  C026  F01C         	movff	motor_action@l,right_90@mL
  3165   0019C4  C027  F01D         	movff	motor_action@l+1,right_90@mL+1
  3166   0019C8  C028  F01E         	movff	motor_action@r,right_90@mR
  3167   0019CC  C029  F01F         	movff	motor_action@r+1,right_90@mR+1
  3168   0019D0  EC1D  F00F         	call	_right_90	;wreg free
  3169                           
  3170                           ;../dc_motor.c: 196:             break;
  3171   0019D4  EF44  F00D         	goto	l297
  3172   0019D8                     l2709:
  3173                           
  3174                           ;../dc_motor.c: 198:             reverse(l,r);
  3175   0019D8  C026  F01C         	movff	motor_action@l,reverse@mL
  3176   0019DC  C027  F01D         	movff	motor_action@l+1,reverse@mL+1
  3177   0019E0  C028  F01E         	movff	motor_action@r,reverse@mR
  3178   0019E4  C029  F01F         	movff	motor_action@r+1,reverse@mR+1
  3179   0019E8  EC63  F010         	call	_reverse	;wreg free
  3180                           
  3181                           ;../dc_motor.c: 199:             left_90(l,r);
  3182   0019EC  C026  F01C         	movff	motor_action@l,left_90@mL
  3183   0019F0  C027  F01D         	movff	motor_action@l+1,left_90@mL+1
  3184   0019F4  C028  F01E         	movff	motor_action@r,left_90@mR
  3185   0019F8  C029  F01F         	movff	motor_action@r+1,left_90@mR+1
  3186   0019FC  EC6F  F00F         	call	_left_90	;wreg free
  3187                           
  3188                           ;../dc_motor.c: 200:             break;
  3189   001A00  EF44  F00D         	goto	l297
  3190   001A04                     l2711:
  3191                           
  3192                           ;../dc_motor.c: 202:             right_135(l,r);
  3193   001A04  C026  F01C         	movff	motor_action@l,right_135@mL
  3194   001A08  C027  F01D         	movff	motor_action@l+1,right_135@mL+1
  3195   001A0C  C028  F01E         	movff	motor_action@r,right_135@mR
  3196   001A10  C029  F01F         	movff	motor_action@r+1,right_135@mR+1
  3197   001A14  EC12  F010         	call	_right_135	;wreg free
  3198                           
  3199                           ;../dc_motor.c: 203:             break;
  3200   001A18  EF44  F00D         	goto	l297
  3201   001A1C                     l2713:
  3202                           
  3203                           ;../dc_motor.c: 205:             left_135(l,r);
  3204   001A1C  C026  F01C         	movff	motor_action@l,left_135@mL
  3205   001A20  C027  F01D         	movff	motor_action@l+1,left_135@mL+1
  3206   001A24  C028  F01E         	movff	motor_action@r,left_135@mR
  3207   001A28  C029  F01F         	movff	motor_action@r+1,left_135@mR+1
  3208   001A2C  ECB4  F010         	call	_left_135	;wreg free
  3209                           
  3210                           ;../dc_motor.c: 206:             break;
  3211   001A30  EF44  F00D         	goto	l297
  3212   001A34                     l2717:
  3213   001A34  C024  F02A         	movff	motor_action@color,??_motor_action
  3214   001A38  C025  F02B         	movff	motor_action@color+1,??_motor_action+1
  3215                           
  3216                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3217                           ; Switch size 1, requested type "simple"
  3218                           ; Number of cases is 1, Range of values is 0 to 0
  3219                           ; switch strategies available:
  3220                           ; Name         Instructions Cycles
  3221                           ; simple_byte            4     3 (average)
  3222                           ;	Chosen strategy is simple_byte
  3223   001A3C  502B               	movf	(??_motor_action+1)^0,w,c
  3224   001A3E  0A00               	xorlw	0	; case 0
  3225   001A40  B4D8               	btfsc	status,2,c
  3226   001A42  EF25  F00D         	goto	l2979
  3227   001A46  EF44  F00D         	goto	l297
  3228   001A4A                     l2979:
  3229                           
  3230                           ; Switch size 1, requested type "simple"
  3231                           ; Number of cases is 7, Range of values is 1 to 7
  3232                           ; switch strategies available:
  3233                           ; Name         Instructions Cycles
  3234                           ; simple_byte           22    12 (average)
  3235                           ;	Chosen strategy is simple_byte
  3236   001A4A  502A               	movf	??_motor_action^0,w,c
  3237   001A4C  0A01               	xorlw	1	; case 1
  3238   001A4E  B4D8               	btfsc	status,2,c
  3239   001A50  EFB2  F00C         	goto	l2701
  3240   001A54  0A03               	xorlw	3	; case 2
  3241   001A56  B4D8               	btfsc	status,2,c
  3242   001A58  EFBE  F00C         	goto	l2703
  3243   001A5C  0A01               	xorlw	1	; case 3
  3244   001A5E  B4D8               	btfsc	status,2,c
  3245   001A60  EFCA  F00C         	goto	l2705
  3246   001A64  0A07               	xorlw	7	; case 4
  3247   001A66  B4D8               	btfsc	status,2,c
  3248   001A68  EFD6  F00C         	goto	l2707
  3249   001A6C  0A01               	xorlw	1	; case 5
  3250   001A6E  B4D8               	btfsc	status,2,c
  3251   001A70  EFEC  F00C         	goto	l2709
  3252   001A74  0A03               	xorlw	3	; case 6
  3253   001A76  B4D8               	btfsc	status,2,c
  3254   001A78  EF02  F00D         	goto	l2711
  3255   001A7C  0A01               	xorlw	1	; case 7
  3256   001A7E  B4D8               	btfsc	status,2,c
  3257   001A80  EF0E  F00D         	goto	l2713
  3258   001A84  EF44  F00D         	goto	l297
  3259   001A88                     l297:
  3260   001A88  0012               	return		;funcret
  3261   001A8A                     __end_of_motor_action:
  3262                           	callstack 0
  3263                           
  3264 ;; *************** function _spin_180 *****************
  3265 ;; Defined at:
  3266 ;;		line 136 in file "../dc_motor.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3269 ;;		 -> main@motorL(9), 
  3270 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3271 ;;		 -> main@motorR(9), 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  i               2   33[COMRAM] int 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      void 
  3276 ;; Registers used:
  3277 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3283 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3284 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3285 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3286 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3287 ;;Total ram usage:        8 bytes
  3288 ;; Hardware stack levels used: 1
  3289 ;; Hardware stack levels required when called: 4
  3290 ;; This function calls:
  3291 ;;		_setMotorPWM
  3292 ;; This function is called by:
  3293 ;;		_motor_action
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text16
  3298   001F82                     __ptext16:
  3299                           	callstack 0
  3300   001F82                     _spin_180:
  3301                           	callstack 25
  3302   001F82                     
  3303                           ;../dc_motor.c: 136: void spin_180(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 137: {;../dc_motor.c: 138:     mL->direction = 1;
  3304   001F82  EE20 F001          	lfsr	2,1
  3305   001F86  501C               	movf	spin_180@mL^0,w,c
  3306   001F88  26D9               	addwf	fsr2l,f,c
  3307   001F8A  501D               	movf	(spin_180@mL+1)^0,w,c
  3308   001F8C  22DA               	addwfc	fsr2h,f,c
  3309   001F8E  0E01               	movlw	1
  3310   001F90  6EDF               	movwf	indf2,c
  3311                           
  3312                           ;../dc_motor.c: 139:     mR->direction = 0;
  3313   001F92  EE20 F001          	lfsr	2,1
  3314   001F96  501E               	movf	spin_180@mR^0,w,c
  3315   001F98  26D9               	addwf	fsr2l,f,c
  3316   001F9A  501F               	movf	(spin_180@mR+1)^0,w,c
  3317   001F9C  22DA               	addwfc	fsr2h,f,c
  3318   001F9E  0E00               	movlw	0
  3319   001FA0  6EDF               	movwf	indf2,c
  3320   001FA2                     
  3321                           ;../dc_motor.c: 140:     for (int i = 0;i<50;i = i + 2)
  3322   001FA2  0E00               	movlw	0
  3323   001FA4  6E23               	movwf	(spin_180@i+1)^0,c
  3324   001FA6  0E00               	movlw	0
  3325   001FA8  6E22               	movwf	spin_180@i^0,c
  3326   001FAA                     l2431:
  3327                           
  3328                           ;../dc_motor.c: 141:     {;../dc_motor.c: 142:         mL->power = i;
  3329   001FAA  C01C  FFD9         	movff	spin_180@mL,fsr2l
  3330   001FAE  C01D  FFDA         	movff	spin_180@mL+1,fsr2h
  3331   001FB2  C022  FFDF         	movff	spin_180@i,indf2
  3332   001FB6                     
  3333                           ;../dc_motor.c: 143:         mR->power = 50 + i;
  3334   001FB6  5022               	movf	spin_180@i^0,w,c
  3335   001FB8  0F32               	addlw	50
  3336   001FBA  C01E  FFD9         	movff	spin_180@mR,fsr2l
  3337   001FBE  C01F  FFDA         	movff	spin_180@mR+1,fsr2h
  3338   001FC2  6EDF               	movwf	indf2,c
  3339   001FC4                     
  3340                           ;../dc_motor.c: 144:         setMotorPWM(mL);
  3341   001FC4  C01C  F011         	movff	spin_180@mL,setMotorPWM@m
  3342   001FC8  C01D  F012         	movff	spin_180@mL+1,setMotorPWM@m+1
  3343   001FCC  ECA1  F009         	call	_setMotorPWM	;wreg free
  3344   001FD0                     
  3345                           ;../dc_motor.c: 145:         setMotorPWM(mR);
  3346   001FD0  C01E  F011         	movff	spin_180@mR,setMotorPWM@m
  3347   001FD4  C01F  F012         	movff	spin_180@mR+1,setMotorPWM@m+1
  3348   001FD8  ECA1  F009         	call	_setMotorPWM	;wreg free
  3349   001FDC                     
  3350                           ;../dc_motor.c: 146:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3351   001FDC  0E35               	movlw	53
  3352   001FDE                     u1667:
  3353   001FDE  2EE8               	decfsz	wreg,f,c
  3354   001FE0  D7FE               	bra	u1667
  3355   001FE2  F000               	nop	
  3356   001FE4                     
  3357                           ;../dc_motor.c: 147:     }
  3358   001FE4  0E02               	movlw	2
  3359   001FE6  2422               	addwf	spin_180@i^0,w,c
  3360   001FE8  6E22               	movwf	spin_180@i^0,c
  3361   001FEA  0E00               	movlw	0
  3362   001FEC  2023               	addwfc	(spin_180@i+1)^0,w,c
  3363   001FEE  6E23               	movwf	(spin_180@i+1)^0,c
  3364   001FF0  BE23               	btfsc	(spin_180@i+1)^0,7,c
  3365   001FF2  EF04  F010         	goto	u1301
  3366   001FF6  5023               	movf	(spin_180@i+1)^0,w,c
  3367   001FF8  E109               	bnz	u1300
  3368   001FFA  0E32               	movlw	50
  3369   001FFC  5C22               	subwf	spin_180@i^0,w,c
  3370   001FFE  A0D8               	btfss	status,0,c
  3371   002000  EF04  F010         	goto	u1301
  3372   002004  EF06  F010         	goto	u1300
  3373   002008                     u1301:
  3374   002008  EFD5  F00F         	goto	l2431
  3375   00200C                     u1300:
  3376   00200C                     
  3377                           ;../dc_motor.c: 148:     _delay((unsigned long)((290)*(64000000/4000.0)));
  3378   00200C  0E18               	movlw	24
  3379   00200E  6E21               	movwf	(??_spin_180+1)^0,c
  3380   002010  0E8A               	movlw	138
  3381   002012  6E20               	movwf	??_spin_180^0,c
  3382   002014  0EE8               	movlw	232
  3383   002016                     u1677:
  3384   002016  2EE8               	decfsz	wreg,f,c
  3385   002018  D7FE               	bra	u1677
  3386   00201A  2E20               	decfsz	??_spin_180^0,f,c
  3387   00201C  D7FC               	bra	u1677
  3388   00201E  2E21               	decfsz	(??_spin_180+1)^0,f,c
  3389   002020  D7FA               	bra	u1677
  3390   002022  0012               	return		;funcret
  3391   002024                     __end_of_spin_180:
  3392                           	callstack 0
  3393                           
  3394 ;; *************** function _right_90 *****************
  3395 ;; Defined at:
  3396 ;;		line 106 in file "../dc_motor.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3399 ;;		 -> main@motorL(9), 
  3400 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3401 ;;		 -> main@motorR(9), 
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  i               2   33[COMRAM] int 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      void 
  3406 ;; Registers used:
  3407 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3413 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3414 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3415 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3416 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3417 ;;Total ram usage:        8 bytes
  3418 ;; Hardware stack levels used: 1
  3419 ;; Hardware stack levels required when called: 4
  3420 ;; This function calls:
  3421 ;;		_setMotorPWM
  3422 ;; This function is called by:
  3423 ;;		_motor_action
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text17
  3428   001E3A                     __ptext17:
  3429                           	callstack 0
  3430   001E3A                     _right_90:
  3431                           	callstack 25
  3432   001E3A                     
  3433                           ;../dc_motor.c: 106: void right_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 107: {;../dc_motor.c: 108:     mL->direction = 1;
  3434   001E3A  EE20 F001          	lfsr	2,1
  3435   001E3E  501C               	movf	right_90@mL^0,w,c
  3436   001E40  26D9               	addwf	fsr2l,f,c
  3437   001E42  501D               	movf	(right_90@mL+1)^0,w,c
  3438   001E44  22DA               	addwfc	fsr2h,f,c
  3439   001E46  0E01               	movlw	1
  3440   001E48  6EDF               	movwf	indf2,c
  3441                           
  3442                           ;../dc_motor.c: 109:     mR->direction = 0;
  3443   001E4A  EE20 F001          	lfsr	2,1
  3444   001E4E  501E               	movf	right_90@mR^0,w,c
  3445   001E50  26D9               	addwf	fsr2l,f,c
  3446   001E52  501F               	movf	(right_90@mR+1)^0,w,c
  3447   001E54  22DA               	addwfc	fsr2h,f,c
  3448   001E56  0E00               	movlw	0
  3449   001E58  6EDF               	movwf	indf2,c
  3450   001E5A                     
  3451                           ;../dc_motor.c: 110:     for (int i = 0;i<50;i = i + 2)
  3452   001E5A  0E00               	movlw	0
  3453   001E5C  6E23               	movwf	(right_90@i+1)^0,c
  3454   001E5E  0E00               	movlw	0
  3455   001E60  6E22               	movwf	right_90@i^0,c
  3456   001E62                     l2383:
  3457                           
  3458                           ;../dc_motor.c: 111:     {;../dc_motor.c: 112:         mL->power = i;
  3459   001E62  C01C  FFD9         	movff	right_90@mL,fsr2l
  3460   001E66  C01D  FFDA         	movff	right_90@mL+1,fsr2h
  3461   001E6A  C022  FFDF         	movff	right_90@i,indf2
  3462   001E6E                     
  3463                           ;../dc_motor.c: 113:         mR->power = 50 + i;
  3464   001E6E  5022               	movf	right_90@i^0,w,c
  3465   001E70  0F32               	addlw	50
  3466   001E72  C01E  FFD9         	movff	right_90@mR,fsr2l
  3467   001E76  C01F  FFDA         	movff	right_90@mR+1,fsr2h
  3468   001E7A  6EDF               	movwf	indf2,c
  3469   001E7C                     
  3470                           ;../dc_motor.c: 114:         setMotorPWM(mL);
  3471   001E7C  C01C  F011         	movff	right_90@mL,setMotorPWM@m
  3472   001E80  C01D  F012         	movff	right_90@mL+1,setMotorPWM@m+1
  3473   001E84  ECA1  F009         	call	_setMotorPWM	;wreg free
  3474   001E88                     
  3475                           ;../dc_motor.c: 115:         setMotorPWM(mR);
  3476   001E88  C01E  F011         	movff	right_90@mR,setMotorPWM@m
  3477   001E8C  C01F  F012         	movff	right_90@mR+1,setMotorPWM@m+1
  3478   001E90  ECA1  F009         	call	_setMotorPWM	;wreg free
  3479   001E94                     
  3480                           ;../dc_motor.c: 116:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3481   001E94  0E35               	movlw	53
  3482   001E96                     u1687:
  3483   001E96  2EE8               	decfsz	wreg,f,c
  3484   001E98  D7FE               	bra	u1687
  3485   001E9A  F000               	nop	
  3486   001E9C                     
  3487                           ;../dc_motor.c: 117:     }
  3488   001E9C  0E02               	movlw	2
  3489   001E9E  2422               	addwf	right_90@i^0,w,c
  3490   001EA0  6E22               	movwf	right_90@i^0,c
  3491   001EA2  0E00               	movlw	0
  3492   001EA4  2023               	addwfc	(right_90@i+1)^0,w,c
  3493   001EA6  6E23               	movwf	(right_90@i+1)^0,c
  3494   001EA8  BE23               	btfsc	(right_90@i+1)^0,7,c
  3495   001EAA  EF60  F00F         	goto	u1281
  3496   001EAE  5023               	movf	(right_90@i+1)^0,w,c
  3497   001EB0  E109               	bnz	u1280
  3498   001EB2  0E32               	movlw	50
  3499   001EB4  5C22               	subwf	right_90@i^0,w,c
  3500   001EB6  A0D8               	btfss	status,0,c
  3501   001EB8  EF60  F00F         	goto	u1281
  3502   001EBC  EF62  F00F         	goto	u1280
  3503   001EC0                     u1281:
  3504   001EC0  EF31  F00F         	goto	l2383
  3505   001EC4                     u1280:
  3506   001EC4                     
  3507                           ;../dc_motor.c: 118:     _delay((unsigned long)((165)*(64000000/4000.0)));
  3508   001EC4  0E0E               	movlw	14
  3509   001EC6  6E21               	movwf	(??_right_90+1)^0,c
  3510   001EC8  0E65               	movlw	101
  3511   001ECA  6E20               	movwf	??_right_90^0,c
  3512   001ECC  0E87               	movlw	135
  3513   001ECE                     u1697:
  3514   001ECE  2EE8               	decfsz	wreg,f,c
  3515   001ED0  D7FE               	bra	u1697
  3516   001ED2  2E20               	decfsz	??_right_90^0,f,c
  3517   001ED4  D7FC               	bra	u1697
  3518   001ED6  2E21               	decfsz	(??_right_90+1)^0,f,c
  3519   001ED8  D7FA               	bra	u1697
  3520   001EDA  F000               	nop	
  3521   001EDC  0012               	return		;funcret
  3522   001EDE                     __end_of_right_90:
  3523                           	callstack 0
  3524                           
  3525 ;; *************** function _right_135 *****************
  3526 ;; Defined at:
  3527 ;;		line 151 in file "../dc_motor.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3530 ;;		 -> main@motorL(9), 
  3531 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3532 ;;		 -> main@motorR(9), 
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;  i               2   33[COMRAM] int 
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      void 
  3537 ;; Registers used:
  3538 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3544 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3545 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3546 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3547 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3548 ;;Total ram usage:        8 bytes
  3549 ;; Hardware stack levels used: 1
  3550 ;; Hardware stack levels required when called: 4
  3551 ;; This function calls:
  3552 ;;		_setMotorPWM
  3553 ;; This function is called by:
  3554 ;;		_motor_action
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text18
  3559   002024                     __ptext18:
  3560                           	callstack 0
  3561   002024                     _right_135:
  3562                           	callstack 25
  3563   002024                     
  3564                           ;../dc_motor.c: 151: void right_135(struct DC_motor *mL, struct DC_motor *mR);../dc_moto
      +                          r.c: 152: {;../dc_motor.c: 153:     mL->direction = 1;
  3565   002024  EE20 F001          	lfsr	2,1
  3566   002028  501C               	movf	right_135@mL^0,w,c
  3567   00202A  26D9               	addwf	fsr2l,f,c
  3568   00202C  501D               	movf	(right_135@mL+1)^0,w,c
  3569   00202E  22DA               	addwfc	fsr2h,f,c
  3570   002030  0E01               	movlw	1
  3571   002032  6EDF               	movwf	indf2,c
  3572                           
  3573                           ;../dc_motor.c: 154:     mR->direction = 0;
  3574   002034  EE20 F001          	lfsr	2,1
  3575   002038  501E               	movf	right_135@mR^0,w,c
  3576   00203A  26D9               	addwf	fsr2l,f,c
  3577   00203C  501F               	movf	(right_135@mR+1)^0,w,c
  3578   00203E  22DA               	addwfc	fsr2h,f,c
  3579   002040  0E00               	movlw	0
  3580   002042  6EDF               	movwf	indf2,c
  3581   002044                     
  3582                           ;../dc_motor.c: 155:     for (int i = 0;i<50;i = i + 2)
  3583   002044  0E00               	movlw	0
  3584   002046  6E23               	movwf	(right_135@i+1)^0,c
  3585   002048  0E00               	movlw	0
  3586   00204A  6E22               	movwf	right_135@i^0,c
  3587   00204C                     l2455:
  3588                           
  3589                           ;../dc_motor.c: 156:     {;../dc_motor.c: 157:         mL->power = i;
  3590   00204C  C01C  FFD9         	movff	right_135@mL,fsr2l
  3591   002050  C01D  FFDA         	movff	right_135@mL+1,fsr2h
  3592   002054  C022  FFDF         	movff	right_135@i,indf2
  3593   002058                     
  3594                           ;../dc_motor.c: 158:         mR->power = 50 + i;
  3595   002058  5022               	movf	right_135@i^0,w,c
  3596   00205A  0F32               	addlw	50
  3597   00205C  C01E  FFD9         	movff	right_135@mR,fsr2l
  3598   002060  C01F  FFDA         	movff	right_135@mR+1,fsr2h
  3599   002064  6EDF               	movwf	indf2,c
  3600   002066                     
  3601                           ;../dc_motor.c: 159:         setMotorPWM(mL);
  3602   002066  C01C  F011         	movff	right_135@mL,setMotorPWM@m
  3603   00206A  C01D  F012         	movff	right_135@mL+1,setMotorPWM@m+1
  3604   00206E  ECA1  F009         	call	_setMotorPWM	;wreg free
  3605   002072                     
  3606                           ;../dc_motor.c: 160:         setMotorPWM(mR);
  3607   002072  C01E  F011         	movff	right_135@mR,setMotorPWM@m
  3608   002076  C01F  F012         	movff	right_135@mR+1,setMotorPWM@m+1
  3609   00207A  ECA1  F009         	call	_setMotorPWM	;wreg free
  3610   00207E                     
  3611                           ;../dc_motor.c: 161:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3612   00207E  0E35               	movlw	53
  3613   002080                     u1707:
  3614   002080  2EE8               	decfsz	wreg,f,c
  3615   002082  D7FE               	bra	u1707
  3616   002084  F000               	nop	
  3617   002086                     
  3618                           ;../dc_motor.c: 162:     }
  3619   002086  0E02               	movlw	2
  3620   002088  2422               	addwf	right_135@i^0,w,c
  3621   00208A  6E22               	movwf	right_135@i^0,c
  3622   00208C  0E00               	movlw	0
  3623   00208E  2023               	addwfc	(right_135@i+1)^0,w,c
  3624   002090  6E23               	movwf	(right_135@i+1)^0,c
  3625   002092  BE23               	btfsc	(right_135@i+1)^0,7,c
  3626   002094  EF55  F010         	goto	u1311
  3627   002098  5023               	movf	(right_135@i+1)^0,w,c
  3628   00209A  E109               	bnz	u1310
  3629   00209C  0E32               	movlw	50
  3630   00209E  5C22               	subwf	right_135@i^0,w,c
  3631   0020A0  A0D8               	btfss	status,0,c
  3632   0020A2  EF55  F010         	goto	u1311
  3633   0020A6  EF57  F010         	goto	u1310
  3634   0020AA                     u1311:
  3635   0020AA  EF26  F010         	goto	l2455
  3636   0020AE                     u1310:
  3637   0020AE                     
  3638                           ;../dc_motor.c: 163:     _delay((unsigned long)((230)*(64000000/4000.0)));
  3639   0020AE  0E13               	movlw	19
  3640   0020B0  6E21               	movwf	(??_right_135+1)^0,c
  3641   0020B2  0EAC               	movlw	172
  3642   0020B4  6E20               	movwf	??_right_135^0,c
  3643   0020B6  0E2A               	movlw	42
  3644   0020B8                     u1717:
  3645   0020B8  2EE8               	decfsz	wreg,f,c
  3646   0020BA  D7FE               	bra	u1717
  3647   0020BC  2E20               	decfsz	??_right_135^0,f,c
  3648   0020BE  D7FC               	bra	u1717
  3649   0020C0  2E21               	decfsz	(??_right_135+1)^0,f,c
  3650   0020C2  D7FA               	bra	u1717
  3651   0020C4  0012               	return		;funcret
  3652   0020C6                     __end_of_right_135:
  3653                           	callstack 0
  3654                           
  3655 ;; *************** function _reverse *****************
  3656 ;; Defined at:
  3657 ;;		line 91 in file "../dc_motor.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3660 ;;		 -> main@motorL(9), 
  3661 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3662 ;;		 -> main@motorR(9), 
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;  i               2   33[COMRAM] int 
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      void 
  3667 ;; Registers used:
  3668 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3674 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3675 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3676 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3677 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3678 ;;Total ram usage:        8 bytes
  3679 ;; Hardware stack levels used: 1
  3680 ;; Hardware stack levels required when called: 4
  3681 ;; This function calls:
  3682 ;;		_setMotorPWM
  3683 ;; This function is called by:
  3684 ;;		_motor_action
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           	psect	text19
  3689   0020C6                     __ptext19:
  3690                           	callstack 0
  3691   0020C6                     _reverse:
  3692                           	callstack 25
  3693   0020C6                     
  3694                           ;../dc_motor.c: 91: void reverse (struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 92: {;../dc_motor.c: 93:     mL->direction = 0;
  3695   0020C6  EE20 F001          	lfsr	2,1
  3696   0020CA  501C               	movf	reverse@mL^0,w,c
  3697   0020CC  26D9               	addwf	fsr2l,f,c
  3698   0020CE  501D               	movf	(reverse@mL+1)^0,w,c
  3699   0020D0  22DA               	addwfc	fsr2h,f,c
  3700   0020D2  0E00               	movlw	0
  3701   0020D4  6EDF               	movwf	indf2,c
  3702                           
  3703                           ;../dc_motor.c: 94:     mR->direction = 0;
  3704   0020D6  EE20 F001          	lfsr	2,1
  3705   0020DA  501E               	movf	reverse@mR^0,w,c
  3706   0020DC  26D9               	addwf	fsr2l,f,c
  3707   0020DE  501F               	movf	(reverse@mR+1)^0,w,c
  3708   0020E0  22DA               	addwfc	fsr2h,f,c
  3709   0020E2  0E00               	movlw	0
  3710   0020E4  6EDF               	movwf	indf2,c
  3711   0020E6                     
  3712                           ;../dc_motor.c: 95:     for (int i=0;i<51;i=i + 2)
  3713   0020E6  0E00               	movlw	0
  3714   0020E8  6E23               	movwf	(reverse@i+1)^0,c
  3715   0020EA  0E00               	movlw	0
  3716   0020EC  6E22               	movwf	reverse@i^0,c
  3717   0020EE                     l2361:
  3718                           
  3719                           ;../dc_motor.c: 96:     {;../dc_motor.c: 97:         mL->power = i;
  3720   0020EE  C01C  FFD9         	movff	reverse@mL,fsr2l
  3721   0020F2  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  3722   0020F6  C022  FFDF         	movff	reverse@i,indf2
  3723                           
  3724                           ;../dc_motor.c: 98:         mR->power = i;
  3725   0020FA  C01E  FFD9         	movff	reverse@mR,fsr2l
  3726   0020FE  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  3727   002102  C022  FFDF         	movff	reverse@i,indf2
  3728   002106                     
  3729                           ;../dc_motor.c: 99:         setMotorPWM(mL);
  3730   002106  C01C  F011         	movff	reverse@mL,setMotorPWM@m
  3731   00210A  C01D  F012         	movff	reverse@mL+1,setMotorPWM@m+1
  3732   00210E  ECA1  F009         	call	_setMotorPWM	;wreg free
  3733   002112                     
  3734                           ;../dc_motor.c: 100:         setMotorPWM(mR);
  3735   002112  C01E  F011         	movff	reverse@mR,setMotorPWM@m
  3736   002116  C01F  F012         	movff	reverse@mR+1,setMotorPWM@m+1
  3737   00211A  ECA1  F009         	call	_setMotorPWM	;wreg free
  3738   00211E                     
  3739                           ;../dc_motor.c: 101:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3740   00211E  0E35               	movlw	53
  3741   002120                     u1727:
  3742   002120  2EE8               	decfsz	wreg,f,c
  3743   002122  D7FE               	bra	u1727
  3744   002124  F000               	nop	
  3745   002126                     
  3746                           ;../dc_motor.c: 102:     }
  3747   002126  0E02               	movlw	2
  3748   002128  2422               	addwf	reverse@i^0,w,c
  3749   00212A  6E22               	movwf	reverse@i^0,c
  3750   00212C  0E00               	movlw	0
  3751   00212E  2023               	addwfc	(reverse@i+1)^0,w,c
  3752   002130  6E23               	movwf	(reverse@i+1)^0,c
  3753   002132  BE23               	btfsc	(reverse@i+1)^0,7,c
  3754   002134  EFA5  F010         	goto	u1271
  3755   002138  5023               	movf	(reverse@i+1)^0,w,c
  3756   00213A  E109               	bnz	u1270
  3757   00213C  0E33               	movlw	51
  3758   00213E  5C22               	subwf	reverse@i^0,w,c
  3759   002140  A0D8               	btfss	status,0,c
  3760   002142  EFA5  F010         	goto	u1271
  3761   002146  EFA7  F010         	goto	u1270
  3762   00214A                     u1271:
  3763   00214A  EF77  F010         	goto	l2361
  3764   00214E                     u1270:
  3765   00214E                     
  3766                           ;../dc_motor.c: 103:     _delay((unsigned long)((1100)*(64000000/4000.0)));
  3767   00214E  0E5A               	movlw	90
  3768   002150  6E21               	movwf	(??_reverse+1)^0,c
  3769   002152  0E49               	movlw	73
  3770   002154  6E20               	movwf	??_reverse^0,c
  3771   002156  0EE7               	movlw	231
  3772   002158                     u1737:
  3773   002158  2EE8               	decfsz	wreg,f,c
  3774   00215A  D7FE               	bra	u1737
  3775   00215C  2E20               	decfsz	??_reverse^0,f,c
  3776   00215E  D7FC               	bra	u1737
  3777   002160  2E21               	decfsz	(??_reverse+1)^0,f,c
  3778   002162  D7FA               	bra	u1737
  3779   002164  F000               	nop	
  3780   002166  0012               	return		;funcret
  3781   002168                     __end_of_reverse:
  3782                           	callstack 0
  3783                           
  3784 ;; *************** function _left_90 *****************
  3785 ;; Defined at:
  3786 ;;		line 121 in file "../dc_motor.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3789 ;;		 -> main@motorL(9), 
  3790 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3791 ;;		 -> main@motorR(9), 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;  i               2   33[COMRAM] int 
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  1    wreg      void 
  3796 ;; Registers used:
  3797 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3798 ;; Tracked objects:
  3799 ;;		On entry : 0/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3803 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3804 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3805 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3806 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3807 ;;Total ram usage:        8 bytes
  3808 ;; Hardware stack levels used: 1
  3809 ;; Hardware stack levels required when called: 4
  3810 ;; This function calls:
  3811 ;;		_setMotorPWM
  3812 ;; This function is called by:
  3813 ;;		_motor_action
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text20
  3818   001EDE                     __ptext20:
  3819                           	callstack 0
  3820   001EDE                     _left_90:
  3821                           	callstack 25
  3822   001EDE                     
  3823                           ;../dc_motor.c: 121: void left_90(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.
      +                          c: 122: {;../dc_motor.c: 123:     mL->direction = 0;
  3824   001EDE  EE20 F001          	lfsr	2,1
  3825   001EE2  501C               	movf	left_90@mL^0,w,c
  3826   001EE4  26D9               	addwf	fsr2l,f,c
  3827   001EE6  501D               	movf	(left_90@mL+1)^0,w,c
  3828   001EE8  22DA               	addwfc	fsr2h,f,c
  3829   001EEA  0E00               	movlw	0
  3830   001EEC  6EDF               	movwf	indf2,c
  3831                           
  3832                           ;../dc_motor.c: 124:     mR->direction = 1;
  3833   001EEE  EE20 F001          	lfsr	2,1
  3834   001EF2  501E               	movf	left_90@mR^0,w,c
  3835   001EF4  26D9               	addwf	fsr2l,f,c
  3836   001EF6  501F               	movf	(left_90@mR+1)^0,w,c
  3837   001EF8  22DA               	addwfc	fsr2h,f,c
  3838   001EFA  0E01               	movlw	1
  3839   001EFC  6EDF               	movwf	indf2,c
  3840   001EFE                     
  3841                           ;../dc_motor.c: 125:     for (int i = 0;i<50;i = i + 2)
  3842   001EFE  0E00               	movlw	0
  3843   001F00  6E23               	movwf	(left_90@i+1)^0,c
  3844   001F02  0E00               	movlw	0
  3845   001F04  6E22               	movwf	left_90@i^0,c
  3846   001F06                     l2407:
  3847                           
  3848                           ;../dc_motor.c: 126:     {;../dc_motor.c: 127:         mL->power = 50 + i;
  3849   001F06  5022               	movf	left_90@i^0,w,c
  3850   001F08  0F32               	addlw	50
  3851   001F0A  C01C  FFD9         	movff	left_90@mL,fsr2l
  3852   001F0E  C01D  FFDA         	movff	left_90@mL+1,fsr2h
  3853   001F12  6EDF               	movwf	indf2,c
  3854   001F14                     
  3855                           ;../dc_motor.c: 128:         mR->power = i;
  3856   001F14  C01E  FFD9         	movff	left_90@mR,fsr2l
  3857   001F18  C01F  FFDA         	movff	left_90@mR+1,fsr2h
  3858   001F1C  C022  FFDF         	movff	left_90@i,indf2
  3859   001F20                     
  3860                           ;../dc_motor.c: 129:         setMotorPWM(mL);
  3861   001F20  C01C  F011         	movff	left_90@mL,setMotorPWM@m
  3862   001F24  C01D  F012         	movff	left_90@mL+1,setMotorPWM@m+1
  3863   001F28  ECA1  F009         	call	_setMotorPWM	;wreg free
  3864   001F2C                     
  3865                           ;../dc_motor.c: 130:         setMotorPWM(mR);
  3866   001F2C  C01E  F011         	movff	left_90@mR,setMotorPWM@m
  3867   001F30  C01F  F012         	movff	left_90@mR+1,setMotorPWM@m+1
  3868   001F34  ECA1  F009         	call	_setMotorPWM	;wreg free
  3869   001F38                     
  3870                           ;../dc_motor.c: 131:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3871   001F38  0E35               	movlw	53
  3872   001F3A                     u1747:
  3873   001F3A  2EE8               	decfsz	wreg,f,c
  3874   001F3C  D7FE               	bra	u1747
  3875   001F3E  F000               	nop	
  3876   001F40                     
  3877                           ;../dc_motor.c: 132:     }
  3878   001F40  0E02               	movlw	2
  3879   001F42  2422               	addwf	left_90@i^0,w,c
  3880   001F44  6E22               	movwf	left_90@i^0,c
  3881   001F46  0E00               	movlw	0
  3882   001F48  2023               	addwfc	(left_90@i+1)^0,w,c
  3883   001F4A  6E23               	movwf	(left_90@i+1)^0,c
  3884   001F4C  BE23               	btfsc	(left_90@i+1)^0,7,c
  3885   001F4E  EFB2  F00F         	goto	u1291
  3886   001F52  5023               	movf	(left_90@i+1)^0,w,c
  3887   001F54  E109               	bnz	u1290
  3888   001F56  0E32               	movlw	50
  3889   001F58  5C22               	subwf	left_90@i^0,w,c
  3890   001F5A  A0D8               	btfss	status,0,c
  3891   001F5C  EFB2  F00F         	goto	u1291
  3892   001F60  EFB4  F00F         	goto	u1290
  3893   001F64                     u1291:
  3894   001F64  EF83  F00F         	goto	l2407
  3895   001F68                     u1290:
  3896   001F68                     
  3897                           ;../dc_motor.c: 133:     _delay((unsigned long)((165)*(64000000/4000.0)));
  3898   001F68  0E0E               	movlw	14
  3899   001F6A  6E21               	movwf	(??_left_90+1)^0,c
  3900   001F6C  0E65               	movlw	101
  3901   001F6E  6E20               	movwf	??_left_90^0,c
  3902   001F70  0E87               	movlw	135
  3903   001F72                     u1757:
  3904   001F72  2EE8               	decfsz	wreg,f,c
  3905   001F74  D7FE               	bra	u1757
  3906   001F76  2E20               	decfsz	??_left_90^0,f,c
  3907   001F78  D7FC               	bra	u1757
  3908   001F7A  2E21               	decfsz	(??_left_90+1)^0,f,c
  3909   001F7C  D7FA               	bra	u1757
  3910   001F7E  F000               	nop	
  3911   001F80  0012               	return		;funcret
  3912   001F82                     __end_of_left_90:
  3913                           	callstack 0
  3914                           
  3915 ;; *************** function _left_135 *****************
  3916 ;; Defined at:
  3917 ;;		line 166 in file "../dc_motor.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3920 ;;		 -> main@motorL(9), 
  3921 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3922 ;;		 -> main@motorR(9), 
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;  i               2   33[COMRAM] int 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3934 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3935 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3936 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3937 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3938 ;;Total ram usage:        8 bytes
  3939 ;; Hardware stack levels used: 1
  3940 ;; Hardware stack levels required when called: 4
  3941 ;; This function calls:
  3942 ;;		_setMotorPWM
  3943 ;; This function is called by:
  3944 ;;		_motor_action
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text21
  3949   002168                     __ptext21:
  3950                           	callstack 0
  3951   002168                     _left_135:
  3952                           	callstack 25
  3953   002168                     
  3954                           ;../dc_motor.c: 166: void left_135(struct DC_motor *mL, struct DC_motor *mR);../dc_motor
      +                          .c: 167: {;../dc_motor.c: 168:     mL->direction = 0;
  3955   002168  EE20 F001          	lfsr	2,1
  3956   00216C  501C               	movf	left_135@mL^0,w,c
  3957   00216E  26D9               	addwf	fsr2l,f,c
  3958   002170  501D               	movf	(left_135@mL+1)^0,w,c
  3959   002172  22DA               	addwfc	fsr2h,f,c
  3960   002174  0E00               	movlw	0
  3961   002176  6EDF               	movwf	indf2,c
  3962                           
  3963                           ;../dc_motor.c: 169:     mR->direction = 1;
  3964   002178  EE20 F001          	lfsr	2,1
  3965   00217C  501E               	movf	left_135@mR^0,w,c
  3966   00217E  26D9               	addwf	fsr2l,f,c
  3967   002180  501F               	movf	(left_135@mR+1)^0,w,c
  3968   002182  22DA               	addwfc	fsr2h,f,c
  3969   002184  0E01               	movlw	1
  3970   002186  6EDF               	movwf	indf2,c
  3971   002188                     
  3972                           ;../dc_motor.c: 170:     for (int i = 0;i<50;i = i + 2)
  3973   002188  0E00               	movlw	0
  3974   00218A  6E23               	movwf	(left_135@i+1)^0,c
  3975   00218C  0E00               	movlw	0
  3976   00218E  6E22               	movwf	left_135@i^0,c
  3977   002190                     l2479:
  3978                           
  3979                           ;../dc_motor.c: 171:     {;../dc_motor.c: 172:         mL->power = 50 + i;
  3980   002190  5022               	movf	left_135@i^0,w,c
  3981   002192  0F32               	addlw	50
  3982   002194  C01C  FFD9         	movff	left_135@mL,fsr2l
  3983   002198  C01D  FFDA         	movff	left_135@mL+1,fsr2h
  3984   00219C  6EDF               	movwf	indf2,c
  3985   00219E                     
  3986                           ;../dc_motor.c: 173:         mR->power = i;
  3987   00219E  C01E  FFD9         	movff	left_135@mR,fsr2l
  3988   0021A2  C01F  FFDA         	movff	left_135@mR+1,fsr2h
  3989   0021A6  C022  FFDF         	movff	left_135@i,indf2
  3990   0021AA                     
  3991                           ;../dc_motor.c: 174:         setMotorPWM(mL);
  3992   0021AA  C01C  F011         	movff	left_135@mL,setMotorPWM@m
  3993   0021AE  C01D  F012         	movff	left_135@mL+1,setMotorPWM@m+1
  3994   0021B2  ECA1  F009         	call	_setMotorPWM	;wreg free
  3995   0021B6                     
  3996                           ;../dc_motor.c: 175:         setMotorPWM(mR);
  3997   0021B6  C01E  F011         	movff	left_135@mR,setMotorPWM@m
  3998   0021BA  C01F  F012         	movff	left_135@mR+1,setMotorPWM@m+1
  3999   0021BE  ECA1  F009         	call	_setMotorPWM	;wreg free
  4000   0021C2                     
  4001                           ;../dc_motor.c: 176:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4002   0021C2  0E35               	movlw	53
  4003   0021C4                     u1767:
  4004   0021C4  2EE8               	decfsz	wreg,f,c
  4005   0021C6  D7FE               	bra	u1767
  4006   0021C8  F000               	nop	
  4007   0021CA                     
  4008                           ;../dc_motor.c: 177:     }
  4009   0021CA  0E02               	movlw	2
  4010   0021CC  2422               	addwf	left_135@i^0,w,c
  4011   0021CE  6E22               	movwf	left_135@i^0,c
  4012   0021D0  0E00               	movlw	0
  4013   0021D2  2023               	addwfc	(left_135@i+1)^0,w,c
  4014   0021D4  6E23               	movwf	(left_135@i+1)^0,c
  4015   0021D6  BE23               	btfsc	(left_135@i+1)^0,7,c
  4016   0021D8  EFF7  F010         	goto	u1321
  4017   0021DC  5023               	movf	(left_135@i+1)^0,w,c
  4018   0021DE  E109               	bnz	u1320
  4019   0021E0  0E32               	movlw	50
  4020   0021E2  5C22               	subwf	left_135@i^0,w,c
  4021   0021E4  A0D8               	btfss	status,0,c
  4022   0021E6  EFF7  F010         	goto	u1321
  4023   0021EA  EFF9  F010         	goto	u1320
  4024   0021EE                     u1321:
  4025   0021EE  EFC8  F010         	goto	l2479
  4026   0021F2                     u1320:
  4027   0021F2                     
  4028                           ;../dc_motor.c: 178:     _delay((unsigned long)((230)*(64000000/4000.0)));
  4029   0021F2  0E13               	movlw	19
  4030   0021F4  6E21               	movwf	(??_left_135+1)^0,c
  4031   0021F6  0EAC               	movlw	172
  4032   0021F8  6E20               	movwf	??_left_135^0,c
  4033   0021FA  0E2A               	movlw	42
  4034   0021FC                     u1777:
  4035   0021FC  2EE8               	decfsz	wreg,f,c
  4036   0021FE  D7FE               	bra	u1777
  4037   002200  2E20               	decfsz	??_left_135^0,f,c
  4038   002202  D7FC               	bra	u1777
  4039   002204  2E21               	decfsz	(??_left_135+1)^0,f,c
  4040   002206  D7FA               	bra	u1777
  4041   002208  0012               	return		;funcret
  4042   00220A                     __end_of_left_135:
  4043                           	callstack 0
  4044                           
  4045 ;; *************** function _initUSART4 *****************
  4046 ;; Defined at:
  4047 ;;		line 5 in file "../serial.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;		None
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;		None
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  1    wreg      void 
  4054 ;; Registers used:
  4055 ;;		wreg, status,2
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4065 ;;Total ram usage:        0 bytes
  4066 ;; Hardware stack levels used: 1
  4067 ;; Hardware stack levels required when called: 2
  4068 ;; This function calls:
  4069 ;;		Nothing
  4070 ;; This function is called by:
  4071 ;;		_main
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	text22
  4076   0027CA                     __ptext22:
  4077                           	callstack 0
  4078   0027CA                     _initUSART4:
  4079                           	callstack 28
  4080   0027CA                     
  4081                           ;../serial.c: 9:     RC0PPS = 0x12;
  4082   0027CA  0E12               	movlw	18
  4083   0027CC  010E               	movlb	14	; () banked
  4084   0027CE  6F62               	movwf	98,b	;volatile
  4085                           
  4086                           ;../serial.c: 10:     RX4PPS = 0x11;
  4087   0027D0  0E11               	movlw	17
  4088   0027D2  6F15               	movwf	21,b	;volatile
  4089   0027D4                     
  4090                           ; BSR set to: 14
  4091                           ;../serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  4092   0027D4  97E9               	bcf	233,3,b	;volatile
  4093   0027D6                     
  4094                           ; BSR set to: 14
  4095                           ;../serial.c: 13:     TX4STAbits.BRGH = 0;
  4096   0027D6  95E8               	bcf	232,2,b	;volatile
  4097                           
  4098                           ;../serial.c: 14:     SP4BRGL = 103;
  4099   0027D8  0E67               	movlw	103
  4100   0027DA  6FE5               	movwf	229,b	;volatile
  4101                           
  4102                           ;../serial.c: 15:     SP4BRGH = 0;
  4103   0027DC  0E00               	movlw	0
  4104   0027DE  6FE6               	movwf	230,b	;volatile
  4105   0027E0                     
  4106                           ; BSR set to: 14
  4107                           ;../serial.c: 17:     RC4STAbits.CREN = 1;
  4108   0027E0  89E7               	bsf	231,4,b	;volatile
  4109   0027E2                     
  4110                           ; BSR set to: 14
  4111                           ;../serial.c: 18:     TX4STAbits.TXEN = 1;
  4112   0027E2  8BE8               	bsf	232,5,b	;volatile
  4113   0027E4                     
  4114                           ; BSR set to: 14
  4115                           ;../serial.c: 19:     RC4STAbits.SPEN = 1;
  4116   0027E4  8FE7               	bsf	231,7,b	;volatile
  4117   0027E6                     
  4118                           ; BSR set to: 14
  4119   0027E6  0012               	return		;funcret
  4120   0027E8                     __end_of_initUSART4:
  4121                           	callstack 0
  4122                           
  4123 ;; *************** function _initDCmotorsPWM *****************
  4124 ;; Defined at:
  4125 ;;		line 5 in file "../dc_motor.c"
  4126 ;; Parameters:    Size  Location     Type
  4127 ;;  PWMperiod       2    2[COMRAM] int 
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;		None
  4130 ;; Return value:  Size  Location     Type
  4131 ;;                  1    wreg      void 
  4132 ;; Registers used:
  4133 ;;		wreg, status,2
  4134 ;; Tracked objects:
  4135 ;;		On entry : 0/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4139 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4142 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4143 ;;Total ram usage:        2 bytes
  4144 ;; Hardware stack levels used: 1
  4145 ;; Hardware stack levels required when called: 2
  4146 ;; This function calls:
  4147 ;;		Nothing
  4148 ;; This function is called by:
  4149 ;;		_main
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           	psect	text23
  4154   00261E                     __ptext23:
  4155                           	callstack 0
  4156   00261E                     _initDCmotorsPWM:
  4157                           	callstack 28
  4158   00261E                     
  4159                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  4160   00261E  9485               	bcf	133,2,c	;volatile
  4161                           
  4162                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  4163   002620  9885               	bcf	133,4,c	;volatile
  4164                           
  4165                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  4166   002622  9E83               	bcf	131,7,c	;volatile
  4167                           
  4168                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  4169   002624  9C87               	bcf	135,6,c	;volatile
  4170                           
  4171                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  4172   002626  947D               	bcf	125,2,c	;volatile
  4173                           
  4174                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  4175   002628  987D               	bcf	125,4,c	;volatile
  4176                           
  4177                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  4178   00262A  9E7B               	bcf	123,7,c	;volatile
  4179                           
  4180                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  4181   00262C  9C7F               	bcf	127,6,c	;volatile
  4182   00262E                     
  4183                           ;../dc_motor.c: 17:     T2CONbits.CKPS=0b0011;
  4184   00262E  50BD               	movf	189,w,c	;volatile
  4185   002630  0B8F               	andlw	-113
  4186   002632  0930               	iorlw	48
  4187   002634  6EBD               	movwf	189,c	;volatile
  4188                           
  4189                           ;../dc_motor.c: 18:     T2HLTbits.MODE=0b00000;
  4190   002636  0EE0               	movlw	-32
  4191   002638  16BE               	andwf	190,f,c	;volatile
  4192                           
  4193                           ;../dc_motor.c: 19:     T2CLKCONbits.CS=0b0001;
  4194   00263A  50BF               	movf	191,w,c	;volatile
  4195   00263C  0BF0               	andlw	-16
  4196   00263E  0901               	iorlw	1
  4197   002640  6EBF               	movwf	191,c	;volatile
  4198   002642                     
  4199                           ;../dc_motor.c: 23:     T2PR=PWMperiod;
  4200   002642  C003  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4201   002646                     
  4202                           ;../dc_motor.c: 24:     T2CONbits.ON=1;
  4203   002646  8EBD               	bsf	189,7,c	;volatile
  4204                           
  4205                           ;../dc_motor.c: 26:     RE2PPS=0x0A;
  4206   002648  0E0A               	movlw	10
  4207   00264A  010E               	movlb	14	; () banked
  4208   00264C  6F74               	movwf	116,b	;volatile
  4209                           
  4210                           ;../dc_motor.c: 27:     RC7PPS=0x0B;
  4211   00264E  0E0B               	movlw	11
  4212   002650  6F69               	movwf	105,b	;volatile
  4213                           
  4214                           ;../dc_motor.c: 29:     PWM6DCH=0;
  4215   002652  0E00               	movlw	0
  4216   002654  6EA3               	movwf	163,c	;volatile
  4217                           
  4218                           ;../dc_motor.c: 30:     PWM7DCH=0;
  4219   002656  0E00               	movlw	0
  4220   002658  6EA0               	movwf	160,c	;volatile
  4221   00265A                     
  4222                           ; BSR set to: 14
  4223                           ;../dc_motor.c: 32:     PWM6CONbits.EN = 1;
  4224   00265A  8EA4               	bsf	164,7,c	;volatile
  4225   00265C                     
  4226                           ; BSR set to: 14
  4227                           ;../dc_motor.c: 33:     PWM7CONbits.EN = 1;
  4228   00265C  8EA1               	bsf	161,7,c	;volatile
  4229   00265E                     
  4230                           ; BSR set to: 14
  4231   00265E  0012               	return		;funcret
  4232   002660                     __end_of_initDCmotorsPWM:
  4233                           	callstack 0
  4234                           
  4235 ;; *************** function _forward *****************
  4236 ;; Defined at:
  4237 ;;		line 77 in file "../dc_motor.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4240 ;;		 -> main@motorL(9), 
  4241 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4242 ;;		 -> main@motorR(9), 
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;  i               2   31[COMRAM] int 
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  1    wreg      void 
  4247 ;; Registers used:
  4248 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4254 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4255 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4257 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4258 ;;Total ram usage:        6 bytes
  4259 ;; Hardware stack levels used: 1
  4260 ;; Hardware stack levels required when called: 4
  4261 ;; This function calls:
  4262 ;;		_setMotorPWM
  4263 ;; This function is called by:
  4264 ;;		_main
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           	psect	text24
  4269   002298                     __ptext24:
  4270                           	callstack 0
  4271   002298                     _forward:
  4272                           	callstack 26
  4273   002298                     
  4274                           ;../dc_motor.c: 77: void forward(struct DC_motor *mL, struct DC_motor *mR);../dc_motor.c
      +                          : 78: {;../dc_motor.c: 79:     mL->direction = 1;
  4275   002298  EE20 F001          	lfsr	2,1
  4276   00229C  501C               	movf	forward@mL^0,w,c
  4277   00229E  26D9               	addwf	fsr2l,f,c
  4278   0022A0  501D               	movf	(forward@mL+1)^0,w,c
  4279   0022A2  22DA               	addwfc	fsr2h,f,c
  4280   0022A4  0E01               	movlw	1
  4281   0022A6  6EDF               	movwf	indf2,c
  4282                           
  4283                           ;../dc_motor.c: 80:     mR->direction = 1;
  4284   0022A8  EE20 F001          	lfsr	2,1
  4285   0022AC  501E               	movf	forward@mR^0,w,c
  4286   0022AE  26D9               	addwf	fsr2l,f,c
  4287   0022B0  501F               	movf	(forward@mR+1)^0,w,c
  4288   0022B2  22DA               	addwfc	fsr2h,f,c
  4289   0022B4  0E01               	movlw	1
  4290   0022B6  6EDF               	movwf	indf2,c
  4291   0022B8                     
  4292                           ;../dc_motor.c: 81:     for (int i=0;i<31;i = i+2)
  4293   0022B8  0E00               	movlw	0
  4294   0022BA  6E21               	movwf	(forward@i+1)^0,c
  4295   0022BC  0E00               	movlw	0
  4296   0022BE  6E20               	movwf	forward@i^0,c
  4297   0022C0                     l2667:
  4298                           
  4299                           ;../dc_motor.c: 82:     {;../dc_motor.c: 83:         mL->power = i;
  4300   0022C0  C01C  FFD9         	movff	forward@mL,fsr2l
  4301   0022C4  C01D  FFDA         	movff	forward@mL+1,fsr2h
  4302   0022C8  C020  FFDF         	movff	forward@i,indf2
  4303                           
  4304                           ;../dc_motor.c: 84:         mR->power = i;
  4305   0022CC  C01E  FFD9         	movff	forward@mR,fsr2l
  4306   0022D0  C01F  FFDA         	movff	forward@mR+1,fsr2h
  4307   0022D4  C020  FFDF         	movff	forward@i,indf2
  4308   0022D8                     
  4309                           ;../dc_motor.c: 85:         setMotorPWM(mL);
  4310   0022D8  C01C  F011         	movff	forward@mL,setMotorPWM@m
  4311   0022DC  C01D  F012         	movff	forward@mL+1,setMotorPWM@m+1
  4312   0022E0  ECA1  F009         	call	_setMotorPWM	;wreg free
  4313   0022E4                     
  4314                           ;../dc_motor.c: 86:         setMotorPWM(mR);
  4315   0022E4  C01E  F011         	movff	forward@mR,setMotorPWM@m
  4316   0022E8  C01F  F012         	movff	forward@mR+1,setMotorPWM@m+1
  4317   0022EC  ECA1  F009         	call	_setMotorPWM	;wreg free
  4318   0022F0                     
  4319                           ;../dc_motor.c: 87:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4320   0022F0  0E6A               	movlw	106
  4321   0022F2                     u1787:
  4322   0022F2  2EE8               	decfsz	wreg,f,c
  4323   0022F4  D7FE               	bra	u1787
  4324   0022F6  D000               	nop2	
  4325   0022F8                     
  4326                           ;../dc_motor.c: 88:     }
  4327   0022F8  0E02               	movlw	2
  4328   0022FA  2420               	addwf	forward@i^0,w,c
  4329   0022FC  6E20               	movwf	forward@i^0,c
  4330   0022FE  0E00               	movlw	0
  4331   002300  2021               	addwfc	(forward@i+1)^0,w,c
  4332   002302  6E21               	movwf	(forward@i+1)^0,c
  4333   002304  BE21               	btfsc	(forward@i+1)^0,7,c
  4334   002306  EF8E  F011         	goto	u1441
  4335   00230A  5021               	movf	(forward@i+1)^0,w,c
  4336   00230C  E109               	bnz	u1440
  4337   00230E  0E1F               	movlw	31
  4338   002310  5C20               	subwf	forward@i^0,w,c
  4339   002312  A0D8               	btfss	status,0,c
  4340   002314  EF8E  F011         	goto	u1441
  4341   002318  EF90  F011         	goto	u1440
  4342   00231C                     u1441:
  4343   00231C  EF60  F011         	goto	l2667
  4344   002320                     u1440:
  4345   002320  0012               	return		;funcret
  4346   002322                     __end_of_forward:
  4347                           	callstack 0
  4348                           
  4349 ;; *************** function _setMotorPWM *****************
  4350 ;; Defined at:
  4351 ;;		line 38 in file "../dc_motor.c"
  4352 ;; Parameters:    Size  Location     Type
  4353 ;;  m               2   16[COMRAM] PTR struct DC_motor
  4354 ;;		 -> main@motorR(9), main@motorL(9), 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;  PWMduty         2   25[COMRAM] int 
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  1    wreg      void 
  4359 ;; Registers used:
  4360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4366 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4367 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4368 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4369 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4370 ;;Total ram usage:       11 bytes
  4371 ;; Hardware stack levels used: 1
  4372 ;; Hardware stack levels required when called: 3
  4373 ;; This function calls:
  4374 ;;		___awdiv
  4375 ;;		___wmul
  4376 ;; This function is called by:
  4377 ;;		_main
  4378 ;;		_stop
  4379 ;;		_forward
  4380 ;;		_reverse
  4381 ;;		_right_90
  4382 ;;		_left_90
  4383 ;;		_spin_180
  4384 ;;		_right_135
  4385 ;;		_left_135
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           	psect	text25
  4390   001342                     __ptext25:
  4391                           	callstack 0
  4392   001342                     _setMotorPWM:
  4393                           	callstack 26
  4394   001342                     
  4395                           ;../dc_motor.c: 38: void setMotorPWM(struct DC_motor *m);../dc_motor.c: 39: {;../dc_moto
      +                          r.c: 40:  int PWMduty;;../dc_motor.c: 42:  if (m->direction){
  4396   001342  EE20 F001          	lfsr	2,1
  4397   001346  5011               	movf	setMotorPWM@m^0,w,c
  4398   001348  26D9               	addwf	fsr2l,f,c
  4399   00134A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4400   00134C  22DA               	addwfc	fsr2h,f,c
  4401   00134E  50DF               	movf	indf2,w,c
  4402   001350  B4D8               	btfsc	status,2,c
  4403   001352  EFAD  F009         	goto	u1201
  4404   001356  EFAF  F009         	goto	u1200
  4405   00135A                     u1201:
  4406   00135A  EFE0  F009         	goto	l2275
  4407   00135E                     u1200:
  4408   00135E                     
  4409                           ;../dc_motor.c: 44:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  4410   00135E  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  4411   001362  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4412   001366  50DF               	movf	indf2,w,c
  4413   001368  6E13               	movwf	??_setMotorPWM^0,c
  4414   00136A  5013               	movf	??_setMotorPWM^0,w,c
  4415   00136C  6E03               	movwf	___wmul@multiplier^0,c
  4416   00136E  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4417   001370  EE20 F007          	lfsr	2,7
  4418   001374  5011               	movf	setMotorPWM@m^0,w,c
  4419   001376  26D9               	addwf	fsr2l,f,c
  4420   001378  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4421   00137A  22DA               	addwfc	fsr2h,f,c
  4422   00137C  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4423   001380  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4424   001384  ECB2  F013         	call	___wmul	;wreg free
  4425   001388  C003  F009         	movff	?___wmul,___awdiv@dividend
  4426   00138C  C004  F00A         	movff	?___wmul+1,___awdiv@dividend+1
  4427   001390  0E00               	movlw	0
  4428   001392  6E0C               	movwf	(___awdiv@divisor+1)^0,c
  4429   001394  0E64               	movlw	100
  4430   001396  6E0B               	movwf	___awdiv@divisor^0,c
  4431   001398  ECAA  F00D         	call	___awdiv	;wreg free
  4432   00139C  EE20 F007          	lfsr	2,7
  4433   0013A0  5011               	movf	setMotorPWM@m^0,w,c
  4434   0013A2  26D9               	addwf	fsr2l,f,c
  4435   0013A4  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4436   0013A6  22DA               	addwfc	fsr2h,f,c
  4437   0013A8  CFDE F014          	movff	postinc2,??_setMotorPWM+1
  4438   0013AC  CFDD F015          	movff	postdec2,??_setMotorPWM+2
  4439   0013B0  5009               	movf	?___awdiv^0,w,c
  4440   0013B2  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  4441   0013B4  6E1A               	movwf	setMotorPWM@PWMduty^0,c
  4442   0013B6  500A               	movf	(?___awdiv+1)^0,w,c
  4443   0013B8  5815               	subwfb	(??_setMotorPWM+2)^0,w,c
  4444   0013BA  6E1B               	movwf	(setMotorPWM@PWMduty+1)^0,c
  4445                           
  4446                           ;../dc_motor.c: 45:  }
  4447   0013BC  EF03  F00A         	goto	l2277
  4448   0013C0                     l2275:
  4449                           
  4450                           ;../dc_motor.c: 48:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  4451   0013C0  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  4452   0013C4  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4453   0013C8  50DF               	movf	indf2,w,c
  4454   0013CA  6E13               	movwf	??_setMotorPWM^0,c
  4455   0013CC  5013               	movf	??_setMotorPWM^0,w,c
  4456   0013CE  6E03               	movwf	___wmul@multiplier^0,c
  4457   0013D0  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4458   0013D2  EE20 F007          	lfsr	2,7
  4459   0013D6  5011               	movf	setMotorPWM@m^0,w,c
  4460   0013D8  26D9               	addwf	fsr2l,f,c
  4461   0013DA  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4462   0013DC  22DA               	addwfc	fsr2h,f,c
  4463   0013DE  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4464   0013E2  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4465   0013E6  ECB2  F013         	call	___wmul	;wreg free
  4466   0013EA  C003  F009         	movff	?___wmul,___awdiv@dividend
  4467   0013EE  C004  F00A         	movff	?___wmul+1,___awdiv@dividend+1
  4468   0013F2  0E00               	movlw	0
  4469   0013F4  6E0C               	movwf	(___awdiv@divisor+1)^0,c
  4470   0013F6  0E64               	movlw	100
  4471   0013F8  6E0B               	movwf	___awdiv@divisor^0,c
  4472   0013FA  ECAA  F00D         	call	___awdiv	;wreg free
  4473   0013FE  C009  F01A         	movff	?___awdiv,setMotorPWM@PWMduty
  4474   001402  C00A  F01B         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4475   001406                     l2277:
  4476                           
  4477                           ;../dc_motor.c: 51:  *(m->dutyHighByte) = PWMduty;
  4478   001406  EE20 F002          	lfsr	2,2
  4479   00140A  5011               	movf	setMotorPWM@m^0,w,c
  4480   00140C  26D9               	addwf	fsr2l,f,c
  4481   00140E  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4482   001410  22DA               	addwfc	fsr2h,f,c
  4483   001412  CFDE F013          	movff	postinc2,??_setMotorPWM
  4484   001416  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4485   00141A  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4486   00141E  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4487   001422  C01A  FFDF         	movff	setMotorPWM@PWMduty,indf2
  4488   001426                     
  4489                           ;../dc_motor.c: 53:  if (m->direction){
  4490   001426  EE20 F001          	lfsr	2,1
  4491   00142A  5011               	movf	setMotorPWM@m^0,w,c
  4492   00142C  26D9               	addwf	fsr2l,f,c
  4493   00142E  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4494   001430  22DA               	addwfc	fsr2h,f,c
  4495   001432  50DF               	movf	indf2,w,c
  4496   001434  B4D8               	btfsc	status,2,c
  4497   001436  EF1F  F00A         	goto	u1211
  4498   00143A  EF21  F00A         	goto	u1210
  4499   00143E                     u1211:
  4500   00143E  EF56  F00A         	goto	l2283
  4501   001442                     u1210:
  4502   001442                     
  4503                           ;../dc_motor.c: 54:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  4504   001442  EE20 F004          	lfsr	2,4
  4505   001446  5011               	movf	setMotorPWM@m^0,w,c
  4506   001448  26D9               	addwf	fsr2l,f,c
  4507   00144A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4508   00144C  22DA               	addwfc	fsr2h,f,c
  4509   00144E  CFDE F013          	movff	postinc2,??_setMotorPWM
  4510   001452  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4511   001456  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4512   00145A  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4513   00145E  EE10 F004          	lfsr	1,4
  4514   001462  5011               	movf	setMotorPWM@m^0,w,c
  4515   001464  26E1               	addwf	fsr1l,f,c
  4516   001466  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4517   001468  22E2               	addwfc	fsr1h,f,c
  4518   00146A  CFE6 F015          	movff	postinc1,??_setMotorPWM+2
  4519   00146E  CFE5 F016          	movff	postdec1,??_setMotorPWM+3
  4520   001472  C015  FFE1         	movff	??_setMotorPWM+2,fsr1l
  4521   001476  C016  FFE2         	movff	??_setMotorPWM+3,fsr1h
  4522   00147A  50E7               	movf	indf1,w,c
  4523   00147C  6E17               	movwf	(??_setMotorPWM+4)^0,c
  4524   00147E  EE10 F006          	lfsr	1,6
  4525   001482  5011               	movf	setMotorPWM@m^0,w,c
  4526   001484  26E1               	addwf	fsr1l,f,c
  4527   001486  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4528   001488  22E2               	addwfc	fsr1h,f,c
  4529   00148A  50E7               	movf	indf1,w,c
  4530   00148C  6E18               	movwf	(??_setMotorPWM+5)^0,c
  4531   00148E  0E01               	movlw	1
  4532   001490  6E19               	movwf	(??_setMotorPWM+6)^0,c
  4533   001492  2A18               	incf	(??_setMotorPWM+5)^0,f,c
  4534   001494  EF4E  F00A         	goto	u1224
  4535   001498                     u1225:
  4536   001498  90D8               	bcf	status,0,c
  4537   00149A  3619               	rlcf	(??_setMotorPWM+6)^0,f,c
  4538   00149C                     u1224:
  4539   00149C  2E18               	decfsz	(??_setMotorPWM+5)^0,f,c
  4540   00149E  EF4C  F00A         	goto	u1225
  4541   0014A2  5019               	movf	(??_setMotorPWM+6)^0,w,c
  4542   0014A4  1017               	iorwf	(??_setMotorPWM+4)^0,w,c
  4543   0014A6  6EDF               	movwf	indf2,c
  4544                           
  4545                           ;../dc_motor.c: 55:  } else {
  4546   0014A8  EF8A  F00A         	goto	l244
  4547   0014AC                     l2283:
  4548                           
  4549                           ;../dc_motor.c: 56:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  4550   0014AC  EE20 F004          	lfsr	2,4
  4551   0014B0  5011               	movf	setMotorPWM@m^0,w,c
  4552   0014B2  26D9               	addwf	fsr2l,f,c
  4553   0014B4  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4554   0014B6  22DA               	addwfc	fsr2h,f,c
  4555   0014B8  CFDE F013          	movff	postinc2,??_setMotorPWM
  4556   0014BC  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4557   0014C0  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4558   0014C4  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4559   0014C8  EE10 F004          	lfsr	1,4
  4560   0014CC  5011               	movf	setMotorPWM@m^0,w,c
  4561   0014CE  26E1               	addwf	fsr1l,f,c
  4562   0014D0  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4563   0014D2  22E2               	addwfc	fsr1h,f,c
  4564   0014D4  CFE6 F015          	movff	postinc1,??_setMotorPWM+2
  4565   0014D8  CFE5 F016          	movff	postdec1,??_setMotorPWM+3
  4566   0014DC  C015  FFE1         	movff	??_setMotorPWM+2,fsr1l
  4567   0014E0  C016  FFE2         	movff	??_setMotorPWM+3,fsr1h
  4568   0014E4  50E7               	movf	indf1,w,c
  4569   0014E6  6E17               	movwf	(??_setMotorPWM+4)^0,c
  4570   0014E8  EE10 F006          	lfsr	1,6
  4571   0014EC  5011               	movf	setMotorPWM@m^0,w,c
  4572   0014EE  26E1               	addwf	fsr1l,f,c
  4573   0014F0  5012               	movf	(setMotorPWM@m+1)^0,w,c
  4574   0014F2  22E2               	addwfc	fsr1h,f,c
  4575   0014F4  50E7               	movf	indf1,w,c
  4576   0014F6  6E18               	movwf	(??_setMotorPWM+5)^0,c
  4577   0014F8  0E01               	movlw	1
  4578   0014FA  6E19               	movwf	(??_setMotorPWM+6)^0,c
  4579   0014FC  2A18               	incf	(??_setMotorPWM+5)^0,f,c
  4580   0014FE  EF83  F00A         	goto	u1234
  4581   001502                     u1235:
  4582   001502  90D8               	bcf	status,0,c
  4583   001504  3619               	rlcf	(??_setMotorPWM+6)^0,f,c
  4584   001506                     u1234:
  4585   001506  2E18               	decfsz	(??_setMotorPWM+5)^0,f,c
  4586   001508  EF81  F00A         	goto	u1235
  4587   00150C  5019               	movf	(??_setMotorPWM+6)^0,w,c
  4588   00150E  0AFF               	xorlw	255
  4589   001510  1417               	andwf	(??_setMotorPWM+4)^0,w,c
  4590   001512  6EDF               	movwf	indf2,c
  4591   001514                     l244:
  4592   001514  0012               	return		;funcret
  4593   001516                     __end_of_setMotorPWM:
  4594                           	callstack 0
  4595                           
  4596 ;; *************** function ___wmul *****************
  4597 ;; Defined at:
  4598 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;  multiplier      2    2[COMRAM] unsigned int 
  4601 ;;  multiplicand    2    4[COMRAM] unsigned int 
  4602 ;; Auto vars:     Size  Location     Type
  4603 ;;  product         2    6[COMRAM] unsigned int 
  4604 ;; Return value:  Size  Location     Type
  4605 ;;                  2    2[COMRAM] unsigned int 
  4606 ;; Registers used:
  4607 ;;		wreg, status,2, status,0, prodl, prodh
  4608 ;; Tracked objects:
  4609 ;;		On entry : 0/0
  4610 ;;		On exit  : 0/0
  4611 ;;		Unchanged: 0/0
  4612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4613 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4614 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4616 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4617 ;;Total ram usage:        6 bytes
  4618 ;; Hardware stack levels used: 1
  4619 ;; Hardware stack levels required when called: 2
  4620 ;; This function calls:
  4621 ;;		Nothing
  4622 ;; This function is called by:
  4623 ;;		_setMotorPWM
  4624 ;; This function uses a non-reentrant model
  4625 ;;
  4626                           
  4627                           	psect	text26
  4628   002764                     __ptext26:
  4629                           	callstack 0
  4630   002764                     ___wmul:
  4631                           	callstack 26
  4632   002764  5003               	movf	___wmul@multiplier^0,w,c
  4633   002766  0205               	mulwf	___wmul@multiplicand^0,c
  4634   002768  CFF3 F007          	movff	prodl,___wmul@product
  4635   00276C  CFF4 F008          	movff	prodh,___wmul@product+1
  4636   002770  5003               	movf	___wmul@multiplier^0,w,c
  4637   002772  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  4638   002774  50F3               	movf	243,w,c
  4639   002776  2608               	addwf	(___wmul@product+1)^0,f,c
  4640   002778  5004               	movf	(___wmul@multiplier+1)^0,w,c
  4641   00277A  0205               	mulwf	___wmul@multiplicand^0,c
  4642   00277C  50F3               	movf	243,w,c
  4643   00277E  2608               	addwf	(___wmul@product+1)^0,f,c
  4644   002780  C007  F003         	movff	___wmul@product,?___wmul
  4645   002784  C008  F004         	movff	___wmul@product+1,?___wmul+1
  4646   002788  0012               	return		;funcret
  4647   00278A                     __end_of___wmul:
  4648                           	callstack 0
  4649                           
  4650 ;; *************** function ___awdiv *****************
  4651 ;; Defined at:
  4652 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;  dividend        2    8[COMRAM] int 
  4655 ;;  divisor         2   10[COMRAM] int 
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;  quotient        2   14[COMRAM] int 
  4658 ;;  sign            1   13[COMRAM] unsigned char 
  4659 ;;  counter         1   12[COMRAM] unsigned char 
  4660 ;; Return value:  Size  Location     Type
  4661 ;;                  2    8[COMRAM] int 
  4662 ;; Registers used:
  4663 ;;		wreg, status,2, status,0
  4664 ;; Tracked objects:
  4665 ;;		On entry : 0/0
  4666 ;;		On exit  : 0/0
  4667 ;;		Unchanged: 0/0
  4668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4669 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4670 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4672 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4673 ;;Total ram usage:        8 bytes
  4674 ;; Hardware stack levels used: 1
  4675 ;; Hardware stack levels required when called: 2
  4676 ;; This function calls:
  4677 ;;		Nothing
  4678 ;; This function is called by:
  4679 ;;		_setMotorPWM
  4680 ;; This function uses a non-reentrant model
  4681 ;;
  4682                           
  4683                           	psect	text27
  4684   001B54                     __ptext27:
  4685                           	callstack 0
  4686   001B54                     ___awdiv:
  4687                           	callstack 26
  4688   001B54  0E00               	movlw	0
  4689   001B56  6E0E               	movwf	___awdiv@sign^0,c
  4690   001B58  BE0C               	btfsc	(___awdiv@divisor+1)^0,7,c
  4691   001B5A  EFB3  F00D         	goto	u1020
  4692   001B5E  EFB1  F00D         	goto	u1021
  4693   001B62                     u1021:
  4694   001B62  EFB9  F00D         	goto	l2153
  4695   001B66                     u1020:
  4696   001B66  6C0B               	negf	___awdiv@divisor^0,c
  4697   001B68  1E0C               	comf	(___awdiv@divisor+1)^0,f,c
  4698   001B6A  B0D8               	btfsc	status,0,c
  4699   001B6C  2A0C               	incf	(___awdiv@divisor+1)^0,f,c
  4700   001B6E  0E01               	movlw	1
  4701   001B70  6E0E               	movwf	___awdiv@sign^0,c
  4702   001B72                     l2153:
  4703   001B72  BE0A               	btfsc	(___awdiv@dividend+1)^0,7,c
  4704   001B74  EFC0  F00D         	goto	u1030
  4705   001B78  EFBE  F00D         	goto	u1031
  4706   001B7C                     u1031:
  4707   001B7C  EFC6  F00D         	goto	l2159
  4708   001B80                     u1030:
  4709   001B80  6C09               	negf	___awdiv@dividend^0,c
  4710   001B82  1E0A               	comf	(___awdiv@dividend+1)^0,f,c
  4711   001B84  B0D8               	btfsc	status,0,c
  4712   001B86  2A0A               	incf	(___awdiv@dividend+1)^0,f,c
  4713   001B88  0E01               	movlw	1
  4714   001B8A  1A0E               	xorwf	___awdiv@sign^0,f,c
  4715   001B8C                     l2159:
  4716   001B8C  0E00               	movlw	0
  4717   001B8E  6E10               	movwf	(___awdiv@quotient+1)^0,c
  4718   001B90  0E00               	movlw	0
  4719   001B92  6E0F               	movwf	___awdiv@quotient^0,c
  4720   001B94  500B               	movf	___awdiv@divisor^0,w,c
  4721   001B96  100C               	iorwf	(___awdiv@divisor+1)^0,w,c
  4722   001B98  B4D8               	btfsc	status,2,c
  4723   001B9A  EFD1  F00D         	goto	u1041
  4724   001B9E  EFD3  F00D         	goto	u1040
  4725   001BA2                     u1041:
  4726   001BA2  EFFB  F00D         	goto	l2181
  4727   001BA6                     u1040:
  4728   001BA6  0E01               	movlw	1
  4729   001BA8  6E0D               	movwf	___awdiv@counter^0,c
  4730   001BAA  EFDB  F00D         	goto	l2167
  4731   001BAE                     l2165:
  4732   001BAE  90D8               	bcf	status,0,c
  4733   001BB0  360B               	rlcf	___awdiv@divisor^0,f,c
  4734   001BB2  360C               	rlcf	(___awdiv@divisor+1)^0,f,c
  4735   001BB4  2A0D               	incf	___awdiv@counter^0,f,c
  4736   001BB6                     l2167:
  4737   001BB6  AE0C               	btfss	(___awdiv@divisor+1)^0,7,c
  4738   001BB8  EFE0  F00D         	goto	u1051
  4739   001BBC  EFE2  F00D         	goto	u1050
  4740   001BC0                     u1051:
  4741   001BC0  EFD7  F00D         	goto	l2165
  4742   001BC4                     u1050:
  4743   001BC4                     l2169:
  4744   001BC4  90D8               	bcf	status,0,c
  4745   001BC6  360F               	rlcf	___awdiv@quotient^0,f,c
  4746   001BC8  3610               	rlcf	(___awdiv@quotient+1)^0,f,c
  4747   001BCA  500B               	movf	___awdiv@divisor^0,w,c
  4748   001BCC  5C09               	subwf	___awdiv@dividend^0,w,c
  4749   001BCE  500C               	movf	(___awdiv@divisor+1)^0,w,c
  4750   001BD0  580A               	subwfb	(___awdiv@dividend+1)^0,w,c
  4751   001BD2  A0D8               	btfss	status,0,c
  4752   001BD4  EFEE  F00D         	goto	u1061
  4753   001BD8  EFF0  F00D         	goto	u1060
  4754   001BDC                     u1061:
  4755   001BDC  EFF5  F00D         	goto	l2177
  4756   001BE0                     u1060:
  4757   001BE0  500B               	movf	___awdiv@divisor^0,w,c
  4758   001BE2  5E09               	subwf	___awdiv@dividend^0,f,c
  4759   001BE4  500C               	movf	(___awdiv@divisor+1)^0,w,c
  4760   001BE6  5A0A               	subwfb	(___awdiv@dividend+1)^0,f,c
  4761   001BE8  800F               	bsf	___awdiv@quotient^0,0,c
  4762   001BEA                     l2177:
  4763   001BEA  90D8               	bcf	status,0,c
  4764   001BEC  320C               	rrcf	(___awdiv@divisor+1)^0,f,c
  4765   001BEE  320B               	rrcf	___awdiv@divisor^0,f,c
  4766   001BF0  2E0D               	decfsz	___awdiv@counter^0,f,c
  4767   001BF2  EFE2  F00D         	goto	l2169
  4768   001BF6                     l2181:
  4769   001BF6  500E               	movf	___awdiv@sign^0,w,c
  4770   001BF8  B4D8               	btfsc	status,2,c
  4771   001BFA  EF01  F00E         	goto	u1071
  4772   001BFE  EF03  F00E         	goto	u1070
  4773   001C02                     u1071:
  4774   001C02  EF07  F00E         	goto	l2185
  4775   001C06                     u1070:
  4776   001C06  6C0F               	negf	___awdiv@quotient^0,c
  4777   001C08  1E10               	comf	(___awdiv@quotient+1)^0,f,c
  4778   001C0A  B0D8               	btfsc	status,0,c
  4779   001C0C  2A10               	incf	(___awdiv@quotient+1)^0,f,c
  4780   001C0E                     l2185:
  4781   001C0E  C00F  F009         	movff	___awdiv@quotient,?___awdiv
  4782   001C12  C010  F00A         	movff	___awdiv@quotient+1,?___awdiv+1
  4783   001C16  0012               	return		;funcret
  4784   001C18                     __end_of___awdiv:
  4785                           	callstack 0
  4786                           
  4787 ;; *************** function _color_read *****************
  4788 ;; Defined at:
  4789 ;;		line 110 in file "../color.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  rgb             2   13[COMRAM] PTR struct RGB_val
  4792 ;;		 -> main@RGB_recorded(8), main@RGB_calibrated(8), 
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;		None
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      void 
  4797 ;; Registers used:
  4798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4804 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4806 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4807 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4808 ;;Total ram usage:        4 bytes
  4809 ;; Hardware stack levels used: 1
  4810 ;; Hardware stack levels required when called: 5
  4811 ;; This function calls:
  4812 ;;		_color_read_Blue
  4813 ;;		_color_read_Green
  4814 ;;		_color_read_Luminosity
  4815 ;;		_color_read_Red
  4816 ;; This function is called by:
  4817 ;;		_main
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text28
  4822   001D94                     __ptext28:
  4823                           	callstack 0
  4824   001D94                     _color_read:
  4825                           	callstack 25
  4826   001D94                     
  4827                           ;../color.c: 110: void color_read(struct RGB_val *rgb);../color.c: 111: {;../color.c: 11
      +                          2:     rgb->L = color_read_Luminosity();
  4828   001D94  EC75  F012         	call	_color_read_Luminosity	;wreg free
  4829   001D98  C00E  FFD9         	movff	color_read@rgb,fsr2l
  4830   001D9C  C00F  FFDA         	movff	color_read@rgb+1,fsr2h
  4831   001DA0  C007  FFDE         	movff	?_color_read_Luminosity,postinc2
  4832   001DA4  C008  FFDD         	movff	?_color_read_Luminosity+1,postdec2
  4833   001DA8                     
  4834                           ;../color.c: 113:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4835   001DA8  0E09               	movlw	9
  4836   001DAA  6E11               	movwf	(??_color_read+1)^0,c
  4837   001DAC  0E1E               	movlw	30
  4838   001DAE  6E10               	movwf	??_color_read^0,c
  4839   001DB0  0EE4               	movlw	228
  4840   001DB2                     u1797:
  4841   001DB2  2EE8               	decfsz	wreg,f,c
  4842   001DB4  D7FE               	bra	u1797
  4843   001DB6  2E10               	decfsz	??_color_read^0,f,c
  4844   001DB8  D7FC               	bra	u1797
  4845   001DBA  2E11               	decfsz	(??_color_read+1)^0,f,c
  4846   001DBC  D7FA               	bra	u1797
  4847   001DBE  D000               	nop2	
  4848   001DC0                     
  4849                           ;../color.c: 114:     rgb->R = color_read_Red();
  4850   001DC0  EC4D  F012         	call	_color_read_Red	;wreg free
  4851   001DC4  EE20 F002          	lfsr	2,2
  4852   001DC8  500E               	movf	color_read@rgb^0,w,c
  4853   001DCA  26D9               	addwf	fsr2l,f,c
  4854   001DCC  500F               	movf	(color_read@rgb+1)^0,w,c
  4855   001DCE  22DA               	addwfc	fsr2h,f,c
  4856   001DD0  C007  FFDE         	movff	?_color_read_Red,postinc2
  4857   001DD4  C008  FFDD         	movff	?_color_read_Red+1,postdec2
  4858                           
  4859                           ;../color.c: 115:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4860   001DD8  0E09               	movlw	9
  4861   001DDA  6E11               	movwf	(??_color_read+1)^0,c
  4862   001DDC  0E1E               	movlw	30
  4863   001DDE  6E10               	movwf	??_color_read^0,c
  4864   001DE0  0EE4               	movlw	228
  4865   001DE2                     u1807:
  4866   001DE2  2EE8               	decfsz	wreg,f,c
  4867   001DE4  D7FE               	bra	u1807
  4868   001DE6  2E10               	decfsz	??_color_read^0,f,c
  4869   001DE8  D7FC               	bra	u1807
  4870   001DEA  2E11               	decfsz	(??_color_read+1)^0,f,c
  4871   001DEC  D7FA               	bra	u1807
  4872   001DEE  D000               	nop2	
  4873   001DF0                     
  4874                           ;../color.c: 116:     rgb->G = color_read_Green();
  4875   001DF0  EC9D  F012         	call	_color_read_Green	;wreg free
  4876   001DF4  EE20 F004          	lfsr	2,4
  4877   001DF8  500E               	movf	color_read@rgb^0,w,c
  4878   001DFA  26D9               	addwf	fsr2l,f,c
  4879   001DFC  500F               	movf	(color_read@rgb+1)^0,w,c
  4880   001DFE  22DA               	addwfc	fsr2h,f,c
  4881   001E00  C007  FFDE         	movff	?_color_read_Green,postinc2
  4882   001E04  C008  FFDD         	movff	?_color_read_Green+1,postdec2
  4883   001E08                     
  4884                           ;../color.c: 117:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4885   001E08  0E09               	movlw	9
  4886   001E0A  6E11               	movwf	(??_color_read+1)^0,c
  4887   001E0C  0E1E               	movlw	30
  4888   001E0E  6E10               	movwf	??_color_read^0,c
  4889   001E10  0EE4               	movlw	228
  4890   001E12                     u1817:
  4891   001E12  2EE8               	decfsz	wreg,f,c
  4892   001E14  D7FE               	bra	u1817
  4893   001E16  2E10               	decfsz	??_color_read^0,f,c
  4894   001E18  D7FC               	bra	u1817
  4895   001E1A  2E11               	decfsz	(??_color_read+1)^0,f,c
  4896   001E1C  D7FA               	bra	u1817
  4897   001E1E  D000               	nop2	
  4898                           
  4899                           ;../color.c: 118:     rgb->B = color_read_Blue();
  4900   001E20  ECC5  F012         	call	_color_read_Blue	;wreg free
  4901   001E24  EE20 F006          	lfsr	2,6
  4902   001E28  500E               	movf	color_read@rgb^0,w,c
  4903   001E2A  26D9               	addwf	fsr2l,f,c
  4904   001E2C  500F               	movf	(color_read@rgb+1)^0,w,c
  4905   001E2E  22DA               	addwfc	fsr2h,f,c
  4906   001E30  C007  FFDE         	movff	?_color_read_Blue,postinc2
  4907   001E34  C008  FFDD         	movff	?_color_read_Blue+1,postdec2
  4908   001E38  0012               	return		;funcret
  4909   001E3A                     __end_of_color_read:
  4910                           	callstack 0
  4911                           
  4912 ;; *************** function _color_read_Red *****************
  4913 ;; Defined at:
  4914 ;;		line 68 in file "../color.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;		None
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;  tmp             2   11[COMRAM] unsigned int 
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  2    6[COMRAM] unsigned int 
  4921 ;; Registers used:
  4922 ;;		wreg, status,2, status,0, cstack
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4928 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4930 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4931 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4932 ;;Total ram usage:        7 bytes
  4933 ;; Hardware stack levels used: 1
  4934 ;; Hardware stack levels required when called: 4
  4935 ;; This function calls:
  4936 ;;		_I2C_2_Master_Read
  4937 ;;		_I2C_2_Master_RepStart
  4938 ;;		_I2C_2_Master_Start
  4939 ;;		_I2C_2_Master_Stop
  4940 ;;		_I2C_2_Master_Write
  4941 ;; This function is called by:
  4942 ;;		_color_read
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           	psect	text29
  4947   00249A                     __ptext29:
  4948                           	callstack 0
  4949   00249A                     _color_read_Red:
  4950                           	callstack 25
  4951   00249A                     
  4952                           ;../color.c: 70:  unsigned int tmp;;../color.c: 71:  I2C_2_Master_Start();
  4953   00249A  EC23  F014         	call	_I2C_2_Master_Start	;wreg free
  4954                           
  4955                           ;../color.c: 72:  I2C_2_Master_Write(0x52 | 0x00);
  4956   00249E  0E52               	movlw	82
  4957   0024A0  EC0D  F014         	call	_I2C_2_Master_Write
  4958                           
  4959                           ;../color.c: 73:  I2C_2_Master_Write(0xA0 | 0x16);
  4960   0024A4  0EB6               	movlw	182
  4961   0024A6  EC0D  F014         	call	_I2C_2_Master_Write
  4962                           
  4963                           ;../color.c: 74:  I2C_2_Master_RepStart();
  4964   0024AA  EC19  F014         	call	_I2C_2_Master_RepStart	;wreg free
  4965                           
  4966                           ;../color.c: 75:  I2C_2_Master_Write(0x52 | 0x01);
  4967   0024AE  0E53               	movlw	83
  4968   0024B0  EC0D  F014         	call	_I2C_2_Master_Write
  4969                           
  4970                           ;../color.c: 76:  tmp=I2C_2_Master_Read(1);
  4971   0024B4  0E01               	movlw	1
  4972   0024B6  EC30  F013         	call	_I2C_2_Master_Read
  4973   0024BA  6E09               	movwf	??_color_read_Red^0,c
  4974   0024BC  5009               	movf	??_color_read_Red^0,w,c
  4975   0024BE  6E0C               	movwf	color_read_Red@tmp^0,c
  4976   0024C0  6A0D               	clrf	(color_read_Red@tmp+1)^0,c
  4977                           
  4978                           ;../color.c: 77:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4979   0024C2  0E00               	movlw	0
  4980   0024C4  EC30  F013         	call	_I2C_2_Master_Read
  4981   0024C8  6E09               	movwf	??_color_read_Red^0,c
  4982   0024CA  5009               	movf	??_color_read_Red^0,w,c
  4983   0024CC  6E0B               	movwf	(??_color_read_Red+2)^0,c
  4984   0024CE  6A0A               	clrf	(??_color_read_Red+1)^0,c
  4985   0024D0  500C               	movf	color_read_Red@tmp^0,w,c
  4986   0024D2  100A               	iorwf	(??_color_read_Red+1)^0,w,c
  4987   0024D4  6E0C               	movwf	color_read_Red@tmp^0,c
  4988   0024D6  500D               	movf	(color_read_Red@tmp+1)^0,w,c
  4989   0024D8  100B               	iorwf	(??_color_read_Red+2)^0,w,c
  4990   0024DA  6E0D               	movwf	(color_read_Red@tmp+1)^0,c
  4991                           
  4992                           ;../color.c: 78:  I2C_2_Master_Stop();
  4993   0024DC  EC1E  F014         	call	_I2C_2_Master_Stop	;wreg free
  4994   0024E0                     
  4995                           ;../color.c: 79:  return tmp;
  4996   0024E0  C00C  F007         	movff	color_read_Red@tmp,?_color_read_Red
  4997   0024E4  C00D  F008         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  4998   0024E8  0012               	return		;funcret
  4999   0024EA                     __end_of_color_read_Red:
  5000                           	callstack 0
  5001                           
  5002 ;; *************** function _color_read_Luminosity *****************
  5003 ;; Defined at:
  5004 ;;		line 54 in file "../color.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;		None
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;  tmp             2   11[COMRAM] unsigned int 
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  2    6[COMRAM] unsigned int 
  5011 ;; Registers used:
  5012 ;;		wreg, status,2, status,0, cstack
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5018 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5019 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5020 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5021 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5022 ;;Total ram usage:        7 bytes
  5023 ;; Hardware stack levels used: 1
  5024 ;; Hardware stack levels required when called: 4
  5025 ;; This function calls:
  5026 ;;		_I2C_2_Master_Read
  5027 ;;		_I2C_2_Master_RepStart
  5028 ;;		_I2C_2_Master_Start
  5029 ;;		_I2C_2_Master_Stop
  5030 ;;		_I2C_2_Master_Write
  5031 ;; This function is called by:
  5032 ;;		_color_read
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text30
  5037   0024EA                     __ptext30:
  5038                           	callstack 0
  5039   0024EA                     _color_read_Luminosity:
  5040                           	callstack 25
  5041   0024EA                     
  5042                           ;../color.c: 56:  unsigned int tmp;;../color.c: 57:  I2C_2_Master_Start();
  5043   0024EA  EC23  F014         	call	_I2C_2_Master_Start	;wreg free
  5044                           
  5045                           ;../color.c: 58:  I2C_2_Master_Write(0x52 | 0x00);
  5046   0024EE  0E52               	movlw	82
  5047   0024F0  EC0D  F014         	call	_I2C_2_Master_Write
  5048                           
  5049                           ;../color.c: 59:  I2C_2_Master_Write(0xA0 | 0x14);
  5050   0024F4  0EB4               	movlw	180
  5051   0024F6  EC0D  F014         	call	_I2C_2_Master_Write
  5052                           
  5053                           ;../color.c: 60:  I2C_2_Master_RepStart();
  5054   0024FA  EC19  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5055                           
  5056                           ;../color.c: 61:  I2C_2_Master_Write(0x52 | 0x01);
  5057   0024FE  0E53               	movlw	83
  5058   002500  EC0D  F014         	call	_I2C_2_Master_Write
  5059                           
  5060                           ;../color.c: 62:  tmp=I2C_2_Master_Read(1);
  5061   002504  0E01               	movlw	1
  5062   002506  EC30  F013         	call	_I2C_2_Master_Read
  5063   00250A  6E09               	movwf	??_color_read_Luminosity^0,c
  5064   00250C  5009               	movf	??_color_read_Luminosity^0,w,c
  5065   00250E  6E0C               	movwf	color_read_Luminosity@tmp^0,c
  5066   002510  6A0D               	clrf	(color_read_Luminosity@tmp+1)^0,c
  5067                           
  5068                           ;../color.c: 63:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5069   002512  0E00               	movlw	0
  5070   002514  EC30  F013         	call	_I2C_2_Master_Read
  5071   002518  6E09               	movwf	??_color_read_Luminosity^0,c
  5072   00251A  5009               	movf	??_color_read_Luminosity^0,w,c
  5073   00251C  6E0B               	movwf	(??_color_read_Luminosity+2)^0,c
  5074   00251E  6A0A               	clrf	(??_color_read_Luminosity+1)^0,c
  5075   002520  500C               	movf	color_read_Luminosity@tmp^0,w,c
  5076   002522  100A               	iorwf	(??_color_read_Luminosity+1)^0,w,c
  5077   002524  6E0C               	movwf	color_read_Luminosity@tmp^0,c
  5078   002526  500D               	movf	(color_read_Luminosity@tmp+1)^0,w,c
  5079   002528  100B               	iorwf	(??_color_read_Luminosity+2)^0,w,c
  5080   00252A  6E0D               	movwf	(color_read_Luminosity@tmp+1)^0,c
  5081                           
  5082                           ;../color.c: 64:  I2C_2_Master_Stop();
  5083   00252C  EC1E  F014         	call	_I2C_2_Master_Stop	;wreg free
  5084   002530                     
  5085                           ;../color.c: 65:  return tmp;
  5086   002530  C00C  F007         	movff	color_read_Luminosity@tmp,?_color_read_Luminosity
  5087   002534  C00D  F008         	movff	color_read_Luminosity@tmp+1,?_color_read_Luminosity+1
  5088   002538  0012               	return		;funcret
  5089   00253A                     __end_of_color_read_Luminosity:
  5090                           	callstack 0
  5091                           
  5092 ;; *************** function _color_read_Green *****************
  5093 ;; Defined at:
  5094 ;;		line 82 in file "../color.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;		None
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;  tmp             2   11[COMRAM] unsigned int 
  5099 ;; Return value:  Size  Location     Type
  5100 ;;                  2    6[COMRAM] unsigned int 
  5101 ;; Registers used:
  5102 ;;		wreg, status,2, status,0, cstack
  5103 ;; Tracked objects:
  5104 ;;		On entry : 0/0
  5105 ;;		On exit  : 0/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5108 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5109 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5110 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5111 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5112 ;;Total ram usage:        7 bytes
  5113 ;; Hardware stack levels used: 1
  5114 ;; Hardware stack levels required when called: 4
  5115 ;; This function calls:
  5116 ;;		_I2C_2_Master_Read
  5117 ;;		_I2C_2_Master_RepStart
  5118 ;;		_I2C_2_Master_Start
  5119 ;;		_I2C_2_Master_Stop
  5120 ;;		_I2C_2_Master_Write
  5121 ;; This function is called by:
  5122 ;;		_color_read
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           	psect	text31
  5127   00253A                     __ptext31:
  5128                           	callstack 0
  5129   00253A                     _color_read_Green:
  5130                           	callstack 25
  5131   00253A                     
  5132                           ;../color.c: 84:  unsigned int tmp;;../color.c: 85:  I2C_2_Master_Start();
  5133   00253A  EC23  F014         	call	_I2C_2_Master_Start	;wreg free
  5134                           
  5135                           ;../color.c: 86:  I2C_2_Master_Write(0x52 | 0x00);
  5136   00253E  0E52               	movlw	82
  5137   002540  EC0D  F014         	call	_I2C_2_Master_Write
  5138                           
  5139                           ;../color.c: 87:  I2C_2_Master_Write(0xA0 | 0x18);
  5140   002544  0EB8               	movlw	184
  5141   002546  EC0D  F014         	call	_I2C_2_Master_Write
  5142                           
  5143                           ;../color.c: 88:  I2C_2_Master_RepStart();
  5144   00254A  EC19  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5145                           
  5146                           ;../color.c: 89:  I2C_2_Master_Write(0x52 | 0x01);
  5147   00254E  0E53               	movlw	83
  5148   002550  EC0D  F014         	call	_I2C_2_Master_Write
  5149                           
  5150                           ;../color.c: 90:  tmp=I2C_2_Master_Read(1);
  5151   002554  0E01               	movlw	1
  5152   002556  EC30  F013         	call	_I2C_2_Master_Read
  5153   00255A  6E09               	movwf	??_color_read_Green^0,c
  5154   00255C  5009               	movf	??_color_read_Green^0,w,c
  5155   00255E  6E0C               	movwf	color_read_Green@tmp^0,c
  5156   002560  6A0D               	clrf	(color_read_Green@tmp+1)^0,c
  5157                           
  5158                           ;../color.c: 91:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5159   002562  0E00               	movlw	0
  5160   002564  EC30  F013         	call	_I2C_2_Master_Read
  5161   002568  6E09               	movwf	??_color_read_Green^0,c
  5162   00256A  5009               	movf	??_color_read_Green^0,w,c
  5163   00256C  6E0B               	movwf	(??_color_read_Green+2)^0,c
  5164   00256E  6A0A               	clrf	(??_color_read_Green+1)^0,c
  5165   002570  500C               	movf	color_read_Green@tmp^0,w,c
  5166   002572  100A               	iorwf	(??_color_read_Green+1)^0,w,c
  5167   002574  6E0C               	movwf	color_read_Green@tmp^0,c
  5168   002576  500D               	movf	(color_read_Green@tmp+1)^0,w,c
  5169   002578  100B               	iorwf	(??_color_read_Green+2)^0,w,c
  5170   00257A  6E0D               	movwf	(color_read_Green@tmp+1)^0,c
  5171                           
  5172                           ;../color.c: 92:  I2C_2_Master_Stop();
  5173   00257C  EC1E  F014         	call	_I2C_2_Master_Stop	;wreg free
  5174   002580                     
  5175                           ;../color.c: 93:  return tmp;
  5176   002580  C00C  F007         	movff	color_read_Green@tmp,?_color_read_Green
  5177   002584  C00D  F008         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5178   002588  0012               	return		;funcret
  5179   00258A                     __end_of_color_read_Green:
  5180                           	callstack 0
  5181                           
  5182 ;; *************** function _color_read_Blue *****************
  5183 ;; Defined at:
  5184 ;;		line 96 in file "../color.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;		None
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;  tmp             2   11[COMRAM] unsigned int 
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  2    6[COMRAM] unsigned int 
  5191 ;; Registers used:
  5192 ;;		wreg, status,2, status,0, cstack
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5198 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5199 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5200 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5201 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5202 ;;Total ram usage:        7 bytes
  5203 ;; Hardware stack levels used: 1
  5204 ;; Hardware stack levels required when called: 4
  5205 ;; This function calls:
  5206 ;;		_I2C_2_Master_Read
  5207 ;;		_I2C_2_Master_RepStart
  5208 ;;		_I2C_2_Master_Start
  5209 ;;		_I2C_2_Master_Stop
  5210 ;;		_I2C_2_Master_Write
  5211 ;; This function is called by:
  5212 ;;		_color_read
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216                           	psect	text32
  5217   00258A                     __ptext32:
  5218                           	callstack 0
  5219   00258A                     _color_read_Blue:
  5220                           	callstack 25
  5221   00258A                     
  5222                           ;../color.c: 98:  unsigned int tmp;;../color.c: 99:  I2C_2_Master_Start();
  5223   00258A  EC23  F014         	call	_I2C_2_Master_Start	;wreg free
  5224                           
  5225                           ;../color.c: 100:  I2C_2_Master_Write(0x52 | 0x00);
  5226   00258E  0E52               	movlw	82
  5227   002590  EC0D  F014         	call	_I2C_2_Master_Write
  5228                           
  5229                           ;../color.c: 101:  I2C_2_Master_Write(0xA0 | 0x1A);
  5230   002594  0EBA               	movlw	186
  5231   002596  EC0D  F014         	call	_I2C_2_Master_Write
  5232                           
  5233                           ;../color.c: 102:  I2C_2_Master_RepStart();
  5234   00259A  EC19  F014         	call	_I2C_2_Master_RepStart	;wreg free
  5235                           
  5236                           ;../color.c: 103:  I2C_2_Master_Write(0x52 | 0x01);
  5237   00259E  0E53               	movlw	83
  5238   0025A0  EC0D  F014         	call	_I2C_2_Master_Write
  5239                           
  5240                           ;../color.c: 104:  tmp=I2C_2_Master_Read(1);
  5241   0025A4  0E01               	movlw	1
  5242   0025A6  EC30  F013         	call	_I2C_2_Master_Read
  5243   0025AA  6E09               	movwf	??_color_read_Blue^0,c
  5244   0025AC  5009               	movf	??_color_read_Blue^0,w,c
  5245   0025AE  6E0C               	movwf	color_read_Blue@tmp^0,c
  5246   0025B0  6A0D               	clrf	(color_read_Blue@tmp+1)^0,c
  5247                           
  5248                           ;../color.c: 105:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5249   0025B2  0E00               	movlw	0
  5250   0025B4  EC30  F013         	call	_I2C_2_Master_Read
  5251   0025B8  6E09               	movwf	??_color_read_Blue^0,c
  5252   0025BA  5009               	movf	??_color_read_Blue^0,w,c
  5253   0025BC  6E0B               	movwf	(??_color_read_Blue+2)^0,c
  5254   0025BE  6A0A               	clrf	(??_color_read_Blue+1)^0,c
  5255   0025C0  500C               	movf	color_read_Blue@tmp^0,w,c
  5256   0025C2  100A               	iorwf	(??_color_read_Blue+1)^0,w,c
  5257   0025C4  6E0C               	movwf	color_read_Blue@tmp^0,c
  5258   0025C6  500D               	movf	(color_read_Blue@tmp+1)^0,w,c
  5259   0025C8  100B               	iorwf	(??_color_read_Blue+2)^0,w,c
  5260   0025CA  6E0D               	movwf	(color_read_Blue@tmp+1)^0,c
  5261                           
  5262                           ;../color.c: 106:  I2C_2_Master_Stop();
  5263   0025CC  EC1E  F014         	call	_I2C_2_Master_Stop	;wreg free
  5264   0025D0                     
  5265                           ;../color.c: 107:  return tmp;
  5266   0025D0  C00C  F007         	movff	color_read_Blue@tmp,?_color_read_Blue
  5267   0025D4  C00D  F008         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5268   0025D8  0012               	return		;funcret
  5269   0025DA                     __end_of_color_read_Blue:
  5270                           	callstack 0
  5271                           
  5272 ;; *************** function _I2C_2_Master_RepStart *****************
  5273 ;; Defined at:
  5274 ;;		line 33 in file "../i2c.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;		None
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;		None
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, status,0, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5292 ;;Total ram usage:        0 bytes
  5293 ;; Hardware stack levels used: 1
  5294 ;; Hardware stack levels required when called: 3
  5295 ;; This function calls:
  5296 ;;		_I2C_2_Master_Idle
  5297 ;; This function is called by:
  5298 ;;		_color_read_Luminosity
  5299 ;;		_color_read_Red
  5300 ;;		_color_read_Green
  5301 ;;		_color_read_Blue
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           	psect	text33
  5306   002832                     __ptext33:
  5307                           	callstack 0
  5308   002832                     _I2C_2_Master_RepStart:
  5309                           	callstack 25
  5310   002832                     
  5311                           ;../i2c.c: 35:   I2C_2_Master_Idle();
  5312   002832  EC9E  F013         	call	_I2C_2_Master_Idle	;wreg free
  5313   002836                     
  5314                           ;../i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5315   002836  010E               	movlb	14	; () banked
  5316   002838  83DA               	bsf	218,1,b	;volatile
  5317   00283A                     
  5318                           ; BSR set to: 14
  5319   00283A  0012               	return		;funcret
  5320   00283C                     __end_of_I2C_2_Master_RepStart:
  5321                           	callstack 0
  5322                           
  5323 ;; *************** function _I2C_2_Master_Read *****************
  5324 ;; Defined at:
  5325 ;;		line 51 in file "../i2c.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;  ack             1    wreg     unsigned char 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  ack             1    4[COMRAM] unsigned char 
  5330 ;;  tmp             1    5[COMRAM] unsigned char 
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      unsigned char 
  5333 ;; Registers used:
  5334 ;;		wreg, status,2, status,0, cstack
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5341 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5342 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5343 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5344 ;;Total ram usage:        3 bytes
  5345 ;; Hardware stack levels used: 1
  5346 ;; Hardware stack levels required when called: 3
  5347 ;; This function calls:
  5348 ;;		_I2C_2_Master_Idle
  5349 ;; This function is called by:
  5350 ;;		_color_read_Luminosity
  5351 ;;		_color_read_Red
  5352 ;;		_color_read_Green
  5353 ;;		_color_read_Blue
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           	psect	text34
  5358   002660                     __ptext34:
  5359                           	callstack 0
  5360   002660                     _I2C_2_Master_Read:
  5361                           	callstack 25
  5362                           
  5363                           ; BSR set to: 14
  5364                           ;incstack = 0
  5365                           ;I2C_2_Master_Read@ack stored from wreg
  5366   002660  6E05               	movwf	I2C_2_Master_Read@ack^0,c
  5367   002662                     
  5368                           ;../i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);../i2c.c: 52: {;../i2c
      +                          .c: 53:   unsigned char tmp;;../i2c.c: 54:   I2C_2_Master_Idle();
  5369   002662  EC9E  F013         	call	_I2C_2_Master_Idle	;wreg free
  5370   002666                     
  5371                           ;../i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5372   002666  010E               	movlb	14	; () banked
  5373   002668  87DA               	bsf	218,3,b	;volatile
  5374                           
  5375                           ;../i2c.c: 56:   I2C_2_Master_Idle();
  5376   00266A  EC9E  F013         	call	_I2C_2_Master_Idle	;wreg free
  5377   00266E                     
  5378                           ;../i2c.c: 57:   tmp = SSP2BUF;
  5379   00266E  CED5 F006          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5380                           
  5381                           ;../i2c.c: 58:   I2C_2_Master_Idle();
  5382   002672  EC9E  F013         	call	_I2C_2_Master_Idle	;wreg free
  5383   002676                     
  5384                           ;../i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5385   002676  5005               	movf	I2C_2_Master_Read@ack^0,w,c
  5386   002678  B4D8               	btfsc	status,2,c
  5387   00267A  EF41  F013         	goto	u1181
  5388   00267E  EF45  F013         	goto	u1180
  5389   002682                     u1181:
  5390   002682  6A04               	clrf	??_I2C_2_Master_Read^0,c
  5391   002684  2A04               	incf	??_I2C_2_Master_Read^0,f,c
  5392   002686  EF46  F013         	goto	u1198
  5393   00268A                     u1180:
  5394   00268A  6A04               	clrf	??_I2C_2_Master_Read^0,c
  5395   00268C                     u1198:
  5396   00268C  3A04               	swapf	??_I2C_2_Master_Read^0,f,c
  5397   00268E  4604               	rlncf	??_I2C_2_Master_Read^0,f,c
  5398   002690  010E               	movlb	14	; () banked
  5399   002692  51DA               	movf	218,w,b	;volatile
  5400   002694  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  5401   002696  0BDF               	andlw	-33
  5402   002698  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  5403   00269A  6FDA               	movwf	218,b	;volatile
  5404   00269C                     
  5405                           ; BSR set to: 14
  5406                           ;../i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5407   00269C  89DA               	bsf	218,4,b	;volatile
  5408   00269E                     
  5409                           ; BSR set to: 14
  5410                           ;../i2c.c: 61:   return tmp;
  5411   00269E  5006               	movf	I2C_2_Master_Read@tmp^0,w,c
  5412   0026A0                     
  5413                           ; BSR set to: 14
  5414   0026A0  0012               	return		;funcret
  5415   0026A2                     __end_of_I2C_2_Master_Read:
  5416                           	callstack 0
  5417                           
  5418 ;; *************** function _color_processor_hard *****************
  5419 ;; Defined at:
  5420 ;;		line 145 in file "../color.c"
  5421 ;; Parameters:    Size  Location     Type
  5422 ;;  rgb             2    2[COMRAM] PTR struct RGB_val
  5423 ;;		 -> main@RGB_recorded(8), 
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  b               2   10[COMRAM] unsigned int 
  5426 ;;  a               2    8[COMRAM] unsigned int 
  5427 ;;  c               2    6[COMRAM] unsigned int 
  5428 ;;  color           2    4[COMRAM] unsigned int 
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  2    2[COMRAM] unsigned int 
  5431 ;; Registers used:
  5432 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5438 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5439 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5441 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5442 ;;Total ram usage:       10 bytes
  5443 ;; Hardware stack levels used: 1
  5444 ;; Hardware stack levels required when called: 2
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_main
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           	psect	text35
  5453   001C18                     __ptext35:
  5454                           	callstack 0
  5455   001C18                     _color_processor_hard:
  5456                           	callstack 28
  5457   001C18                     
  5458                           ;../color.c: 145: unsigned int color_processor_hard(struct RGB_val *rgb);../color.c: 146
      +                          : {;../color.c: 147:     unsigned int a = rgb->R;
  5459   001C18  EE20 F002          	lfsr	2,2
  5460   001C1C  5003               	movf	color_processor_hard@rgb^0,w,c
  5461   001C1E  26D9               	addwf	fsr2l,f,c
  5462   001C20  5004               	movf	(color_processor_hard@rgb+1)^0,w,c
  5463   001C22  22DA               	addwfc	fsr2h,f,c
  5464   001C24  CFDE F009          	movff	postinc2,color_processor_hard@a
  5465   001C28  CFDD F00A          	movff	postdec2,color_processor_hard@a+1
  5466                           
  5467                           ;../color.c: 148:     unsigned int b = rgb->G;
  5468   001C2C  EE20 F004          	lfsr	2,4
  5469   001C30  5003               	movf	color_processor_hard@rgb^0,w,c
  5470   001C32  26D9               	addwf	fsr2l,f,c
  5471   001C34  5004               	movf	(color_processor_hard@rgb+1)^0,w,c
  5472   001C36  22DA               	addwfc	fsr2h,f,c
  5473   001C38  CFDE F00B          	movff	postinc2,color_processor_hard@b
  5474   001C3C  CFDD F00C          	movff	postdec2,color_processor_hard@b+1
  5475                           
  5476                           ;../color.c: 149:     unsigned int c = rgb->B;
  5477   001C40  EE20 F006          	lfsr	2,6
  5478   001C44  5003               	movf	color_processor_hard@rgb^0,w,c
  5479   001C46  26D9               	addwf	fsr2l,f,c
  5480   001C48  5004               	movf	(color_processor_hard@rgb+1)^0,w,c
  5481   001C4A  22DA               	addwfc	fsr2h,f,c
  5482   001C4C  CFDE F007          	movff	postinc2,color_processor_hard@c
  5483   001C50  CFDD F008          	movff	postdec2,color_processor_hard@c+1
  5484   001C54                     
  5485                           ;../color.c: 150:     unsigned int color;;../color.c: 151:     if (a>=b & a>=c){color=1;
      +                          }
  5486   001C54  500B               	movf	color_processor_hard@b^0,w,c
  5487   001C56  5C09               	subwf	color_processor_hard@a^0,w,c
  5488   001C58  500C               	movf	(color_processor_hard@b+1)^0,w,c
  5489   001C5A  580A               	subwfb	(color_processor_hard@a+1)^0,w,c
  5490   001C5C  A0D8               	btfss	status,0,c
  5491   001C5E  EF33  F00E         	goto	u1391
  5492   001C62  EF35  F00E         	goto	u1390
  5493   001C66                     u1391:
  5494   001C66  EF46  F00E         	goto	l2593
  5495   001C6A                     u1390:
  5496   001C6A  5007               	movf	color_processor_hard@c^0,w,c
  5497   001C6C  5C09               	subwf	color_processor_hard@a^0,w,c
  5498   001C6E  5008               	movf	(color_processor_hard@c+1)^0,w,c
  5499   001C70  580A               	subwfb	(color_processor_hard@a+1)^0,w,c
  5500   001C72  A0D8               	btfss	status,0,c
  5501   001C74  EF3E  F00E         	goto	u1401
  5502   001C78  EF40  F00E         	goto	u1400
  5503   001C7C                     u1401:
  5504   001C7C  EF46  F00E         	goto	l2593
  5505   001C80                     u1400:
  5506   001C80  0E00               	movlw	0
  5507   001C82  6E06               	movwf	(color_processor_hard@color+1)^0,c
  5508   001C84  0E01               	movlw	1
  5509   001C86  6E05               	movwf	color_processor_hard@color^0,c
  5510   001C88  EF66  F00E         	goto	l2601
  5511   001C8C                     l2593:
  5512   001C8C  5009               	movf	color_processor_hard@a^0,w,c
  5513   001C8E  5C0B               	subwf	color_processor_hard@b^0,w,c
  5514   001C90  500A               	movf	(color_processor_hard@a+1)^0,w,c
  5515   001C92  580C               	subwfb	(color_processor_hard@b+1)^0,w,c
  5516   001C94  A0D8               	btfss	status,0,c
  5517   001C96  EF4F  F00E         	goto	u1411
  5518   001C9A  EF51  F00E         	goto	u1410
  5519   001C9E                     u1411:
  5520   001C9E  EF62  F00E         	goto	l2599
  5521   001CA2                     u1410:
  5522   001CA2  5007               	movf	color_processor_hard@c^0,w,c
  5523   001CA4  5C0B               	subwf	color_processor_hard@b^0,w,c
  5524   001CA6  5008               	movf	(color_processor_hard@c+1)^0,w,c
  5525   001CA8  580C               	subwfb	(color_processor_hard@b+1)^0,w,c
  5526   001CAA  A0D8               	btfss	status,0,c
  5527   001CAC  EF5A  F00E         	goto	u1421
  5528   001CB0  EF5C  F00E         	goto	u1420
  5529   001CB4                     u1421:
  5530   001CB4  EF62  F00E         	goto	l2599
  5531   001CB8                     u1420:
  5532   001CB8  0E00               	movlw	0
  5533   001CBA  6E06               	movwf	(color_processor_hard@color+1)^0,c
  5534   001CBC  0E02               	movlw	2
  5535   001CBE  6E05               	movwf	color_processor_hard@color^0,c
  5536   001CC0  EF66  F00E         	goto	l2601
  5537   001CC4                     l2599:
  5538   001CC4  0E00               	movlw	0
  5539   001CC6  6E06               	movwf	(color_processor_hard@color+1)^0,c
  5540   001CC8  0E03               	movlw	3
  5541   001CCA  6E05               	movwf	color_processor_hard@color^0,c
  5542   001CCC                     l2601:
  5543                           
  5544                           ;../color.c: 154:     return color;
  5545   001CCC  C005  F003         	movff	color_processor_hard@color,?_color_processor_hard
  5546   001CD0  C006  F004         	movff	color_processor_hard@color+1,?_color_processor_hard+1
  5547   001CD4  0012               	return		;funcret
  5548   001CD6                     __end_of_color_processor_hard:
  5549                           	callstack 0
  5550                           
  5551 ;; *************** function _color_processor_easy *****************
  5552 ;; Defined at:
  5553 ;;		line 133 in file "../color.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;  rgb             2    2[COMRAM] PTR struct RGB_val
  5556 ;;		 -> main@RGB_recorded(8), 
  5557 ;; Auto vars:     Size  Location     Type
  5558 ;;  b               2   10[COMRAM] unsigned int 
  5559 ;;  a               2    8[COMRAM] unsigned int 
  5560 ;;  c               2    6[COMRAM] unsigned int 
  5561 ;;  color           2    4[COMRAM] unsigned int 
  5562 ;; Return value:  Size  Location     Type
  5563 ;;                  2    2[COMRAM] unsigned int 
  5564 ;; Registers used:
  5565 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5566 ;; Tracked objects:
  5567 ;;		On entry : 0/0
  5568 ;;		On exit  : 0/0
  5569 ;;		Unchanged: 0/0
  5570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5571 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5572 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5574 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5575 ;;Total ram usage:       10 bytes
  5576 ;; Hardware stack levels used: 1
  5577 ;; Hardware stack levels required when called: 2
  5578 ;; This function calls:
  5579 ;;		Nothing
  5580 ;; This function is called by:
  5581 ;;		_main
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585                           	psect	text36
  5586   001CD6                     __ptext36:
  5587                           	callstack 0
  5588   001CD6                     _color_processor_easy:
  5589                           	callstack 28
  5590   001CD6                     
  5591                           ;../color.c: 133: unsigned int color_processor_easy(struct RGB_val *rgb);../color.c: 134
      +                          : {;../color.c: 135:     unsigned int a = rgb->R;
  5592   001CD6  EE20 F002          	lfsr	2,2
  5593   001CDA  5003               	movf	color_processor_easy@rgb^0,w,c
  5594   001CDC  26D9               	addwf	fsr2l,f,c
  5595   001CDE  5004               	movf	(color_processor_easy@rgb+1)^0,w,c
  5596   001CE0  22DA               	addwfc	fsr2h,f,c
  5597   001CE2  CFDE F009          	movff	postinc2,color_processor_easy@a
  5598   001CE6  CFDD F00A          	movff	postdec2,color_processor_easy@a+1
  5599                           
  5600                           ;../color.c: 136:     unsigned int b = rgb->G;
  5601   001CEA  EE20 F004          	lfsr	2,4
  5602   001CEE  5003               	movf	color_processor_easy@rgb^0,w,c
  5603   001CF0  26D9               	addwf	fsr2l,f,c
  5604   001CF2  5004               	movf	(color_processor_easy@rgb+1)^0,w,c
  5605   001CF4  22DA               	addwfc	fsr2h,f,c
  5606   001CF6  CFDE F00B          	movff	postinc2,color_processor_easy@b
  5607   001CFA  CFDD F00C          	movff	postdec2,color_processor_easy@b+1
  5608                           
  5609                           ;../color.c: 137:     unsigned int c = rgb->B;
  5610   001CFE  EE20 F006          	lfsr	2,6
  5611   001D02  5003               	movf	color_processor_easy@rgb^0,w,c
  5612   001D04  26D9               	addwf	fsr2l,f,c
  5613   001D06  5004               	movf	(color_processor_easy@rgb+1)^0,w,c
  5614   001D08  22DA               	addwfc	fsr2h,f,c
  5615   001D0A  CFDE F007          	movff	postinc2,color_processor_easy@c
  5616   001D0E  CFDD F008          	movff	postdec2,color_processor_easy@c+1
  5617   001D12                     
  5618                           ;../color.c: 138:     unsigned int color;;../color.c: 139:     if (a>=b & a>=c){color=1;
      +                          }
  5619   001D12  500B               	movf	color_processor_easy@b^0,w,c
  5620   001D14  5C09               	subwf	color_processor_easy@a^0,w,c
  5621   001D16  500C               	movf	(color_processor_easy@b+1)^0,w,c
  5622   001D18  580A               	subwfb	(color_processor_easy@a+1)^0,w,c
  5623   001D1A  A0D8               	btfss	status,0,c
  5624   001D1C  EF92  F00E         	goto	u1351
  5625   001D20  EF94  F00E         	goto	u1350
  5626   001D24                     u1351:
  5627   001D24  EFA5  F00E         	goto	l2573
  5628   001D28                     u1350:
  5629   001D28  5007               	movf	color_processor_easy@c^0,w,c
  5630   001D2A  5C09               	subwf	color_processor_easy@a^0,w,c
  5631   001D2C  5008               	movf	(color_processor_easy@c+1)^0,w,c
  5632   001D2E  580A               	subwfb	(color_processor_easy@a+1)^0,w,c
  5633   001D30  A0D8               	btfss	status,0,c
  5634   001D32  EF9D  F00E         	goto	u1361
  5635   001D36  EF9F  F00E         	goto	u1360
  5636   001D3A                     u1361:
  5637   001D3A  EFA5  F00E         	goto	l2573
  5638   001D3E                     u1360:
  5639   001D3E  0E00               	movlw	0
  5640   001D40  6E06               	movwf	(color_processor_easy@color+1)^0,c
  5641   001D42  0E01               	movlw	1
  5642   001D44  6E05               	movwf	color_processor_easy@color^0,c
  5643   001D46  EFC5  F00E         	goto	l2581
  5644   001D4A                     l2573:
  5645   001D4A  5009               	movf	color_processor_easy@a^0,w,c
  5646   001D4C  5C0B               	subwf	color_processor_easy@b^0,w,c
  5647   001D4E  500A               	movf	(color_processor_easy@a+1)^0,w,c
  5648   001D50  580C               	subwfb	(color_processor_easy@b+1)^0,w,c
  5649   001D52  A0D8               	btfss	status,0,c
  5650   001D54  EFAE  F00E         	goto	u1371
  5651   001D58  EFB0  F00E         	goto	u1370
  5652   001D5C                     u1371:
  5653   001D5C  EFC1  F00E         	goto	l2579
  5654   001D60                     u1370:
  5655   001D60  5007               	movf	color_processor_easy@c^0,w,c
  5656   001D62  5C0B               	subwf	color_processor_easy@b^0,w,c
  5657   001D64  5008               	movf	(color_processor_easy@c+1)^0,w,c
  5658   001D66  580C               	subwfb	(color_processor_easy@b+1)^0,w,c
  5659   001D68  A0D8               	btfss	status,0,c
  5660   001D6A  EFB9  F00E         	goto	u1381
  5661   001D6E  EFBB  F00E         	goto	u1380
  5662   001D72                     u1381:
  5663   001D72  EFC1  F00E         	goto	l2579
  5664   001D76                     u1380:
  5665   001D76  0E00               	movlw	0
  5666   001D78  6E06               	movwf	(color_processor_easy@color+1)^0,c
  5667   001D7A  0E02               	movlw	2
  5668   001D7C  6E05               	movwf	color_processor_easy@color^0,c
  5669   001D7E  EFC5  F00E         	goto	l2581
  5670   001D82                     l2579:
  5671   001D82  0E00               	movlw	0
  5672   001D84  6E06               	movwf	(color_processor_easy@color+1)^0,c
  5673   001D86  0E03               	movlw	3
  5674   001D88  6E05               	movwf	color_processor_easy@color^0,c
  5675   001D8A                     l2581:
  5676                           
  5677                           ;../color.c: 142:     return color;
  5678   001D8A  C005  F003         	movff	color_processor_easy@color,?_color_processor_easy
  5679   001D8E  C006  F004         	movff	color_processor_easy@color+1,?_color_processor_easy+1
  5680   001D92  0012               	return		;funcret
  5681   001D94                     __end_of_color_processor_easy:
  5682                           	callstack 0
  5683                           
  5684 ;; *************** function _color_click_init *****************
  5685 ;; Defined at:
  5686 ;;		line 5 in file "../color.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;		None
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;		None
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  1    wreg      void 
  5693 ;; Registers used:
  5694 ;;		wreg, status,2, status,0, cstack
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5702 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5703 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5704 ;;Total ram usage:        1 bytes
  5705 ;; Hardware stack levels used: 1
  5706 ;; Hardware stack levels required when called: 5
  5707 ;; This function calls:
  5708 ;;		_I2C_2_Master_Init
  5709 ;;		_color_writetoaddr
  5710 ;; This function is called by:
  5711 ;;		_main
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text37
  5716   00239C                     __ptext37:
  5717                           	callstack 0
  5718   00239C                     _color_click_init:
  5719                           	callstack 25
  5720   00239C                     
  5721                           ;../color.c: 8:     I2C_2_Master_Init();
  5722   00239C  EC89  F013         	call	_I2C_2_Master_Init	;wreg free
  5723   0023A0                     
  5724                           ;../color.c: 11:   color_writetoaddr(0x00, 0x01);
  5725   0023A0  0E01               	movlw	1
  5726   0023A2  6E05               	movwf	color_writetoaddr@value^0,c
  5727   0023A4  0E00               	movlw	0
  5728   0023A6  ECC5  F013         	call	_color_writetoaddr
  5729   0023AA                     
  5730                           ;../color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  5731   0023AA  0E3F               	movlw	63
  5732   0023AC  6E07               	movwf	??_color_click_init^0,c
  5733   0023AE  0E55               	movlw	85
  5734   0023B0                     u1827:
  5735   0023B0  2EE8               	decfsz	wreg,f,c
  5736   0023B2  D7FE               	bra	u1827
  5737   0023B4  2E07               	decfsz	??_color_click_init^0,f,c
  5738   0023B6  D7FC               	bra	u1827
  5739   0023B8  F000               	nop	
  5740   0023BA                     
  5741                           ;../color.c: 15:  color_writetoaddr(0x00, 0x03);
  5742   0023BA  0E03               	movlw	3
  5743   0023BC  6E05               	movwf	color_writetoaddr@value^0,c
  5744   0023BE  0E00               	movlw	0
  5745   0023C0  ECC5  F013         	call	_color_writetoaddr
  5746   0023C4                     
  5747                           ;../color.c: 18:  color_writetoaddr(0x01, 0xD5);
  5748   0023C4  0ED5               	movlw	213
  5749   0023C6  6E05               	movwf	color_writetoaddr@value^0,c
  5750   0023C8  0E01               	movlw	1
  5751   0023CA  ECC5  F013         	call	_color_writetoaddr
  5752   0023CE                     
  5753                           ;../color.c: 21:     TRISHbits.TRISH1 = 0;
  5754   0023CE  9288               	bcf	136,1,c	;volatile
  5755   0023D0                     
  5756                           ;../color.c: 22:     TRISDbits.TRISD3 = 0;
  5757   0023D0  9684               	bcf	132,3,c	;volatile
  5758   0023D2                     
  5759                           ;../color.c: 23:     TRISDbits.TRISD4 = 0;
  5760   0023D2  9884               	bcf	132,4,c	;volatile
  5761   0023D4                     
  5762                           ;../color.c: 24:     TRISHbits.TRISH0 = 0;
  5763   0023D4  9088               	bcf	136,0,c	;volatile
  5764   0023D6                     
  5765                           ;../color.c: 25:     TRISFbits.TRISF0 = 0;
  5766   0023D6  9086               	bcf	134,0,c	;volatile
  5767   0023D8                     
  5768                           ;../color.c: 27:     LATHbits.LATH1 = 1;
  5769   0023D8  8280               	bsf	128,1,c	;volatile
  5770   0023DA                     
  5771                           ;../color.c: 28:     LATDbits.LATD3 = 1;
  5772   0023DA  867C               	bsf	124,3,c	;volatile
  5773   0023DC                     
  5774                           ;../color.c: 29:     LATDbits.LATD4 = 1;
  5775   0023DC  887C               	bsf	124,4,c	;volatile
  5776   0023DE                     
  5777                           ;../color.c: 30:     LATHbits.LATH0 = 1;
  5778   0023DE  8080               	bsf	128,0,c	;volatile
  5779   0023E0                     
  5780                           ;../color.c: 31:     LATFbits.LATF0 = 1;
  5781   0023E0  807E               	bsf	126,0,c	;volatile
  5782   0023E2                     
  5783                           ;../color.c: 34:     LATDbits.LATD7=0;
  5784   0023E2  9E7C               	bcf	124,7,c	;volatile
  5785   0023E4                     
  5786                           ;../color.c: 35:     LATHbits.LATH3=0;
  5787   0023E4  9680               	bcf	128,3,c	;volatile
  5788   0023E6                     
  5789                           ;../color.c: 36:     TRISDbits.TRISD7=0;
  5790   0023E6  9E84               	bcf	132,7,c	;volatile
  5791   0023E8                     
  5792                           ;../color.c: 37:     TRISHbits.TRISH3=0;
  5793   0023E8  9688               	bcf	136,3,c	;volatile
  5794   0023EA                     
  5795                           ;../color.c: 39:     TRISFbits.TRISF2=1;
  5796   0023EA  8486               	bsf	134,2,c	;volatile
  5797   0023EC                     
  5798                           ;../color.c: 40:     ANSELFbits.ANSELF2=0;
  5799   0023EC  010E               	movlb	14	; () banked
  5800   0023EE  95B4               	bcf	180,2,b	;volatile
  5801   0023F0                     
  5802                           ; BSR set to: 14
  5803                           ;../color.c: 41:     TRISFbits.TRISF3=1;
  5804   0023F0  8686               	bsf	134,3,c	;volatile
  5805   0023F2                     
  5806                           ; BSR set to: 14
  5807                           ;../color.c: 42:     ANSELFbits.ANSELF3=0;
  5808   0023F2  97B4               	bcf	180,3,b	;volatile
  5809   0023F4                     
  5810                           ; BSR set to: 14
  5811   0023F4  0012               	return		;funcret
  5812   0023F6                     __end_of_color_click_init:
  5813                           	callstack 0
  5814                           
  5815 ;; *************** function _color_writetoaddr *****************
  5816 ;; Defined at:
  5817 ;;		line 45 in file "../color.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;  address         1    wreg     unsigned char 
  5820 ;;  value           1    4[COMRAM] unsigned char 
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;  address         1    5[COMRAM] unsigned char 
  5823 ;; Return value:  Size  Location     Type
  5824 ;;                  1    wreg      void 
  5825 ;; Registers used:
  5826 ;;		wreg, status,2, status,0, cstack
  5827 ;; Tracked objects:
  5828 ;;		On entry : 0/0
  5829 ;;		On exit  : 0/0
  5830 ;;		Unchanged: 0/0
  5831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5832 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5833 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5835 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5836 ;;Total ram usage:        2 bytes
  5837 ;; Hardware stack levels used: 1
  5838 ;; Hardware stack levels required when called: 4
  5839 ;; This function calls:
  5840 ;;		_I2C_2_Master_Start
  5841 ;;		_I2C_2_Master_Stop
  5842 ;;		_I2C_2_Master_Write
  5843 ;; This function is called by:
  5844 ;;		_color_click_init
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text38
  5849   00278A                     __ptext38:
  5850                           	callstack 0
  5851   00278A                     _color_writetoaddr:
  5852                           	callstack 25
  5853                           
  5854                           ; BSR set to: 14
  5855                           ;incstack = 0
  5856                           ;color_writetoaddr@address stored from wreg
  5857   00278A  6E06               	movwf	color_writetoaddr@address^0,c
  5858   00278C                     
  5859                           ;../color.c: 45: void color_writetoaddr(char address, char value);../color.c: 46: {;../c
      +                          olor.c: 47:     I2C_2_Master_Start();
  5860   00278C  EC23  F014         	call	_I2C_2_Master_Start	;wreg free
  5861                           
  5862                           ;../color.c: 48:     I2C_2_Master_Write(0x52 | 0x00);
  5863   002790  0E52               	movlw	82
  5864   002792  EC0D  F014         	call	_I2C_2_Master_Write
  5865                           
  5866                           ;../color.c: 49:     I2C_2_Master_Write(0x80 | address);
  5867   002796  5006               	movf	color_writetoaddr@address^0,w,c
  5868   002798  0980               	iorlw	128
  5869   00279A  EC0D  F014         	call	_I2C_2_Master_Write
  5870                           
  5871                           ;../color.c: 50:     I2C_2_Master_Write(value);
  5872   00279E  5005               	movf	color_writetoaddr@value^0,w,c
  5873   0027A0  EC0D  F014         	call	_I2C_2_Master_Write
  5874                           
  5875                           ;../color.c: 51:     I2C_2_Master_Stop();
  5876   0027A4  EC1E  F014         	call	_I2C_2_Master_Stop	;wreg free
  5877   0027A8  0012               	return		;funcret
  5878   0027AA                     __end_of_color_writetoaddr:
  5879                           	callstack 0
  5880                           
  5881 ;; *************** function _I2C_2_Master_Write *****************
  5882 ;; Defined at:
  5883 ;;		line 45 in file "../i2c.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;  data_byte       1    wreg     unsigned char 
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;  data_byte       1    3[COMRAM] unsigned char 
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  1    wreg      void 
  5890 ;; Registers used:
  5891 ;;		wreg, status,2, status,0, cstack
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 0/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5898 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5900 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5901 ;;Total ram usage:        1 bytes
  5902 ;; Hardware stack levels used: 1
  5903 ;; Hardware stack levels required when called: 3
  5904 ;; This function calls:
  5905 ;;		_I2C_2_Master_Idle
  5906 ;; This function is called by:
  5907 ;;		_color_writetoaddr
  5908 ;;		_color_read_Luminosity
  5909 ;;		_color_read_Red
  5910 ;;		_color_read_Green
  5911 ;;		_color_read_Blue
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           	psect	text39
  5916   00281A                     __ptext39:
  5917                           	callstack 0
  5918   00281A                     _I2C_2_Master_Write:
  5919                           	callstack 25
  5920                           
  5921                           ;incstack = 0
  5922                           ;I2C_2_Master_Write@data_byte stored from wreg
  5923   00281A  6E04               	movwf	I2C_2_Master_Write@data_byte^0,c
  5924   00281C                     
  5925                           ;../i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);../i2c.c: 46: {;../i2c.c
      +                          : 47:   I2C_2_Master_Idle();
  5926   00281C  EC9E  F013         	call	_I2C_2_Master_Idle	;wreg free
  5927   002820                     
  5928                           ;../i2c.c: 48:   SSP2BUF = data_byte;
  5929   002820  C004  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5930   002824  0012               	return		;funcret
  5931   002826                     __end_of_I2C_2_Master_Write:
  5932                           	callstack 0
  5933                           
  5934 ;; *************** function _I2C_2_Master_Stop *****************
  5935 ;; Defined at:
  5936 ;;		line 39 in file "../i2c.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;		None
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;		None
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  1    wreg      void 
  5943 ;; Registers used:
  5944 ;;		wreg, status,2, status,0, cstack
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5954 ;;Total ram usage:        0 bytes
  5955 ;; Hardware stack levels used: 1
  5956 ;; Hardware stack levels required when called: 3
  5957 ;; This function calls:
  5958 ;;		_I2C_2_Master_Idle
  5959 ;; This function is called by:
  5960 ;;		_color_writetoaddr
  5961 ;;		_color_read_Luminosity
  5962 ;;		_color_read_Red
  5963 ;;		_color_read_Green
  5964 ;;		_color_read_Blue
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text40
  5969   00283C                     __ptext40:
  5970                           	callstack 0
  5971   00283C                     _I2C_2_Master_Stop:
  5972                           	callstack 25
  5973   00283C                     
  5974                           ;../i2c.c: 41:   I2C_2_Master_Idle();
  5975   00283C  EC9E  F013         	call	_I2C_2_Master_Idle	;wreg free
  5976   002840                     
  5977                           ;../i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5978   002840  010E               	movlb	14	; () banked
  5979   002842  85DA               	bsf	218,2,b	;volatile
  5980   002844                     
  5981                           ; BSR set to: 14
  5982   002844  0012               	return		;funcret
  5983   002846                     __end_of_I2C_2_Master_Stop:
  5984                           	callstack 0
  5985                           
  5986 ;; *************** function _I2C_2_Master_Start *****************
  5987 ;; Defined at:
  5988 ;;		line 27 in file "../i2c.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;		None
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;		None
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  1    wreg      void 
  5995 ;; Registers used:
  5996 ;;		wreg, status,2, status,0, cstack
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/0
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6006 ;;Total ram usage:        0 bytes
  6007 ;; Hardware stack levels used: 1
  6008 ;; Hardware stack levels required when called: 3
  6009 ;; This function calls:
  6010 ;;		_I2C_2_Master_Idle
  6011 ;; This function is called by:
  6012 ;;		_color_writetoaddr
  6013 ;;		_color_read_Luminosity
  6014 ;;		_color_read_Red
  6015 ;;		_color_read_Green
  6016 ;;		_color_read_Blue
  6017 ;; This function uses a non-reentrant model
  6018 ;;
  6019                           
  6020                           	psect	text41
  6021   002846                     __ptext41:
  6022                           	callstack 0
  6023   002846                     _I2C_2_Master_Start:
  6024                           	callstack 25
  6025   002846                     
  6026                           ;../i2c.c: 29:   I2C_2_Master_Idle();
  6027   002846  EC9E  F013         	call	_I2C_2_Master_Idle	;wreg free
  6028   00284A                     
  6029                           ;../i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6030   00284A  010E               	movlb	14	; () banked
  6031   00284C  81DA               	bsf	218,0,b	;volatile
  6032   00284E                     
  6033                           ; BSR set to: 14
  6034   00284E  0012               	return		;funcret
  6035   002850                     __end_of_I2C_2_Master_Start:
  6036                           	callstack 0
  6037                           
  6038 ;; *************** function _I2C_2_Master_Idle *****************
  6039 ;; Defined at:
  6040 ;;		line 22 in file "../i2c.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;		None
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;		None
  6045 ;; Return value:  Size  Location     Type
  6046 ;;                  1    wreg      void 
  6047 ;; Registers used:
  6048 ;;		wreg, status,2, status,0
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6056 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6057 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6058 ;;Total ram usage:        1 bytes
  6059 ;; Hardware stack levels used: 1
  6060 ;; Hardware stack levels required when called: 2
  6061 ;; This function calls:
  6062 ;;		Nothing
  6063 ;; This function is called by:
  6064 ;;		_I2C_2_Master_Start
  6065 ;;		_I2C_2_Master_RepStart
  6066 ;;		_I2C_2_Master_Stop
  6067 ;;		_I2C_2_Master_Write
  6068 ;;		_I2C_2_Master_Read
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           	psect	text42
  6073   00273C                     __ptext42:
  6074                           	callstack 0
  6075   00273C                     _I2C_2_Master_Idle:
  6076                           	callstack 25
  6077   00273C                     l95:
  6078   00273C  010E               	movlb	14	; () banked
  6079   00273E  B5D8               	btfsc	216,2,b	;volatile
  6080   002740  EFA4  F013         	goto	u1001
  6081   002744  EFA6  F013         	goto	u1000
  6082   002748                     u1001:
  6083   002748  EF9E  F013         	goto	l95
  6084   00274C                     u1000:
  6085   00274C                     
  6086                           ; BSR set to: 14
  6087   00274C  CEDA F003          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6088   002750  0E1F               	movlw	31
  6089   002752  1603               	andwf	??_I2C_2_Master_Idle^0,f,c
  6090   002754  A4D8               	btfss	status,2,c
  6091   002756  EFAF  F013         	goto	u1011
  6092   00275A  EFB1  F013         	goto	u1010
  6093   00275E                     u1011:
  6094   00275E  EF9E  F013         	goto	l95
  6095   002762                     u1010:
  6096   002762                     
  6097                           ; BSR set to: 14
  6098   002762  0012               	return		;funcret
  6099   002764                     __end_of_I2C_2_Master_Idle:
  6100                           	callstack 0
  6101                           
  6102 ;; *************** function _I2C_2_Master_Init *****************
  6103 ;; Defined at:
  6104 ;;		line 4 in file "../i2c.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;		None
  6107 ;; Auto vars:     Size  Location     Type
  6108 ;;		None
  6109 ;; Return value:  Size  Location     Type
  6110 ;;                  1    wreg      void 
  6111 ;; Registers used:
  6112 ;;		wreg, status,2
  6113 ;; Tracked objects:
  6114 ;;		On entry : 0/0
  6115 ;;		On exit  : 0/0
  6116 ;;		Unchanged: 0/0
  6117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6122 ;;Total ram usage:        0 bytes
  6123 ;; Hardware stack levels used: 1
  6124 ;; Hardware stack levels required when called: 2
  6125 ;; This function calls:
  6126 ;;		Nothing
  6127 ;; This function is called by:
  6128 ;;		_color_click_init
  6129 ;;		_main
  6130 ;; This function uses a non-reentrant model
  6131 ;;
  6132                           
  6133                           	psect	text43
  6134   002712                     __ptext43:
  6135                           	callstack 0
  6136   002712                     _I2C_2_Master_Init:
  6137                           	callstack 27
  6138   002712                     
  6139                           ;../i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6140   002712  010E               	movlb	14	; () banked
  6141   002714  51D9               	movf	217,w,b	;volatile
  6142   002716  0BF0               	andlw	-16
  6143   002718  0908               	iorlw	8
  6144   00271A  6FD9               	movwf	217,b	;volatile
  6145   00271C                     
  6146                           ; BSR set to: 14
  6147                           ;../i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6148   00271C  8BD9               	bsf	217,5,b	;volatile
  6149                           
  6150                           ;../i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6151   00271E  0E9F               	movlw	159
  6152   002720  6FD6               	movwf	214,b	;volatile
  6153   002722                     
  6154                           ; BSR set to: 14
  6155                           ;../i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6156   002722  8A84               	bsf	132,5,c	;volatile
  6157   002724                     
  6158                           ; BSR set to: 14
  6159                           ;../i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6160   002724  8C84               	bsf	132,6,c	;volatile
  6161   002726                     
  6162                           ; BSR set to: 14
  6163                           ;../i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6164   002726  9BA7               	bcf	167,5,b	;volatile
  6165   002728                     
  6166                           ; BSR set to: 14
  6167                           ;../i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6168   002728  9DA7               	bcf	167,6,b	;volatile
  6169                           
  6170                           ;../i2c.c: 16:   SSP2DATPPS=0x1D;
  6171   00272A  0E1D               	movlw	29
  6172   00272C  6F1D               	movwf	29,b	;volatile
  6173                           
  6174                           ;../i2c.c: 17:   SSP2CLKPPS=0x1E;
  6175   00272E  0E1E               	movlw	30
  6176   002730  6F1C               	movwf	28,b	;volatile
  6177                           
  6178                           ;../i2c.c: 18:   RD5PPS=0x1C;
  6179   002732  0E1C               	movlw	28
  6180   002734  6F6F               	movwf	111,b	;volatile
  6181                           
  6182                           ;../i2c.c: 19:   RD6PPS=0x1B;
  6183   002736  0E1B               	movlw	27
  6184   002738  6F70               	movwf	112,b	;volatile
  6185   00273A                     
  6186                           ; BSR set to: 14
  6187   00273A  0012               	return		;funcret
  6188   00273C                     __end_of_I2C_2_Master_Init:
  6189                           	callstack 0
  6190                           
  6191 ;; *************** function _Timer0_init *****************
  6192 ;; Defined at:
  6193 ;;		line 40 in file "../rc_servo.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;		None
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;		None
  6198 ;; Return value:  Size  Location     Type
  6199 ;;                  1    wreg      void 
  6200 ;; Registers used:
  6201 ;;		wreg, status,2
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6211 ;;Total ram usage:        0 bytes
  6212 ;; Hardware stack levels used: 1
  6213 ;; Hardware stack levels required when called: 2
  6214 ;; This function calls:
  6215 ;;		Nothing
  6216 ;; This function is called by:
  6217 ;;		_main
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           	psect	text44
  6222   0027AA                     __ptext44:
  6223                           	callstack 0
  6224   0027AA                     _Timer0_init:
  6225                           	callstack 28
  6226   0027AA                     
  6227                           ;../rc_servo.c: 42:     T0CON1bits.T0CS=0b010;
  6228   0027AA  50D6               	movf	214,w,c	;volatile
  6229   0027AC  0B1F               	andlw	-225
  6230   0027AE  0940               	iorlw	64
  6231   0027B0  6ED6               	movwf	214,c	;volatile
  6232   0027B2                     
  6233                           ;../rc_servo.c: 43:     T0CON1bits.T0ASYNC=1;
  6234   0027B2  88D6               	bsf	214,4,c	;volatile
  6235                           
  6236                           ;../rc_servo.c: 44:     T0CON1bits.T0CKPS=0b0111;
  6237   0027B4  50D6               	movf	214,w,c	;volatile
  6238   0027B6  0BF0               	andlw	-16
  6239   0027B8  0907               	iorlw	7
  6240   0027BA  6ED6               	movwf	214,c	;volatile
  6241   0027BC                     
  6242                           ;../rc_servo.c: 46:     T0CON0bits.T016BIT=1;
  6243   0027BC  88D5               	bsf	213,4,c	;volatile
  6244                           
  6245                           ;../rc_servo.c: 49:     TMR0H=(65535-2500)>>8;
  6246   0027BE  0EF6               	movlw	246
  6247   0027C0  6ED4               	movwf	212,c	;volatile
  6248                           
  6249                           ;../rc_servo.c: 50:     TMR0L=(unsigned char)(65535-2500);
  6250   0027C2  0E3B               	movlw	59
  6251   0027C4  6ED3               	movwf	211,c	;volatile
  6252   0027C6                     
  6253                           ;../rc_servo.c: 51:     T0CON0bits.T0EN=1;
  6254   0027C6  8ED5               	bsf	213,7,c	;volatile
  6255   0027C8  0012               	return		;funcret
  6256   0027CA                     __end_of_Timer0_init:
  6257                           	callstack 0
  6258                           
  6259 ;; *************** function _Interrupts_init *****************
  6260 ;; Defined at:
  6261 ;;		line 8 in file "../rc_servo.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;		None
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;		None
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      void 
  6268 ;; Registers used:
  6269 ;;		None
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6279 ;;Total ram usage:        0 bytes
  6280 ;; Hardware stack levels used: 1
  6281 ;; Hardware stack levels required when called: 2
  6282 ;; This function calls:
  6283 ;;		Nothing
  6284 ;; This function is called by:
  6285 ;;		_main
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text45
  6290   002826                     __ptext45:
  6291                           	callstack 0
  6292   002826                     _Interrupts_init:
  6293                           	callstack 28
  6294   002826                     
  6295                           ;../rc_servo.c: 10:     PIE0bits.TMR0IE=1;
  6296   002826  010E               	movlb	14	; () banked
  6297   002828  8B29               	bsf	41,5,b	;volatile
  6298                           
  6299                           ;../rc_servo.c: 11:     INTCONbits.PEIE=1;
  6300   00282A  8CF2               	bsf	242,6,c	;volatile
  6301                           
  6302                           ;../rc_servo.c: 12:     INTCONbits.IPEN=0;
  6303   00282C  9AF2               	bcf	242,5,c	;volatile
  6304                           
  6305                           ;../rc_servo.c: 13:     INTCONbits.GIE=1;
  6306   00282E  8EF2               	bsf	242,7,c	;volatile
  6307   002830                     
  6308                           ; BSR set to: 14
  6309   002830  0012               	return		;funcret
  6310   002832                     __end_of_Interrupts_init:
  6311                           	callstack 0
  6312                           
  6313 ;; *************** function _HighISR *****************
  6314 ;; Defined at:
  6315 ;;		line 20 in file "../rc_servo.c"
  6316 ;; Parameters:    Size  Location     Type
  6317 ;;		None
  6318 ;; Auto vars:     Size  Location     Type
  6319 ;;		None
  6320 ;; Return value:  Size  Location     Type
  6321 ;;                  1    wreg      void 
  6322 ;; Registers used:
  6323 ;;		wreg, status,2, status,0, cstack
  6324 ;; Tracked objects:
  6325 ;;		On entry : 0/0
  6326 ;;		On exit  : 0/0
  6327 ;;		Unchanged: 0/0
  6328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6333 ;;Total ram usage:        0 bytes
  6334 ;; Hardware stack levels used: 1
  6335 ;; Hardware stack levels required when called: 1
  6336 ;; This function calls:
  6337 ;;		_write16bitTMR0val
  6338 ;; This function is called by:
  6339 ;;		Interrupt level 2
  6340 ;; This function uses a non-reentrant model
  6341 ;;
  6342                           
  6343                           	psect	intcode
  6344   000008                     __pintcode:
  6345                           	callstack 0
  6346   000008                     _HighISR:
  6347                           	callstack 21
  6348                           
  6349                           ; BSR set to: 14
  6350                           ;incstack = 0
  6351   000008  825D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6352   00000A                     
  6353                           ;../rc_servo.c: 22:     if (PIR0bits.TMR0IF)
  6354   00000A  010E               	movlb	14	; () banked
  6355   00000C  AB33               	btfss	51,5,b	;volatile
  6356   00000E  EF0B  F000         	goto	i2u154_41
  6357   000012  EF0D  F000         	goto	i2u154_40
  6358   000016                     i2u154_41:
  6359   000016  EF26  F000         	goto	i2l2837
  6360   00001A                     i2u154_40:
  6361   00001A                     
  6362                           ; BSR set to: 14
  6363                           ;../rc_servo.c: 23:     {;../rc_servo.c: 24:         if(LATEbits.LATE2){
  6364   00001A  A47D               	btfss	125,2,c	;volatile
  6365   00001C  EF12  F000         	goto	i2u155_41
  6366   000020  EF14  F000         	goto	i2u155_40
  6367   000024                     i2u155_41:
  6368   000024  EF1E  F000         	goto	i2l2833
  6369   000028                     i2u155_40:
  6370   000028                     
  6371                           ; BSR set to: 14
  6372                           ;../rc_servo.c: 25:             write16bitTMR0val(65535-off_period);
  6373   000028  0100               	movlb	0	; () banked
  6374   00002A  1DB4               	comf	_off_period& (0+255),w,b
  6375   00002C  6E01               	movwf	write16bitTMR0val@tmp^0,c
  6376   00002E  1DB5               	comf	(_off_period+1)& (0+255),w,b
  6377   000030  6E02               	movwf	(write16bitTMR0val@tmp+1)^0,c
  6378   000032  EC28  F014         	call	_write16bitTMR0val	;wreg free
  6379   000036                     
  6380                           ;../rc_servo.c: 26:             LATEbits.LATE2=0;
  6381   000036  947D               	bcf	125,2,c	;volatile
  6382                           
  6383                           ;../rc_servo.c: 28:         } else {
  6384   000038  EF26  F000         	goto	i2l2837
  6385   00003C                     i2l2833:
  6386                           
  6387                           ; BSR set to: 14
  6388                           ;../rc_servo.c: 29:             write16bitTMR0val(65535-on_period);
  6389   00003C  0100               	movlb	0	; () banked
  6390   00003E  1DB6               	comf	_on_period& (0+255),w,b
  6391   000040  6E01               	movwf	write16bitTMR0val@tmp^0,c
  6392   000042  1DB7               	comf	(_on_period+1)& (0+255),w,b
  6393   000044  6E02               	movwf	(write16bitTMR0val@tmp+1)^0,c
  6394   000046  EC28  F014         	call	_write16bitTMR0val	;wreg free
  6395   00004A                     
  6396                           ;../rc_servo.c: 30:             LATEbits.LATE2=1;
  6397   00004A  847D               	bsf	125,2,c	;volatile
  6398   00004C                     i2l2837:
  6399                           
  6400                           ;../rc_servo.c: 34:     PIR0bits.TMR0IF=0;
  6401   00004C  010E               	movlb	14	; () banked
  6402   00004E  9B33               	bcf	51,5,b	;volatile
  6403   000050                     
  6404                           ; BSR set to: 14
  6405   000050  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6406   000052  0011               	retfie		f
  6407   000054                     __end_of_HighISR:
  6408                           	callstack 0
  6409                           
  6410 ;; *************** function _write16bitTMR0val *****************
  6411 ;; Defined at:
  6412 ;;		line 58 in file "../rc_servo.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;  tmp             2    0[COMRAM] unsigned int 
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;		None
  6417 ;; Return value:  Size  Location     Type
  6418 ;;                  1    wreg      void 
  6419 ;; Registers used:
  6420 ;;		wreg, status,2
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6426 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6429 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6430 ;;Total ram usage:        2 bytes
  6431 ;; Hardware stack levels used: 1
  6432 ;; This function calls:
  6433 ;;		Nothing
  6434 ;; This function is called by:
  6435 ;;		_HighISR
  6436 ;; This function uses a non-reentrant model
  6437 ;;
  6438                           
  6439                           	psect	text47
  6440   002850                     __ptext47:
  6441                           	callstack 0
  6442   002850                     _write16bitTMR0val:
  6443                           	callstack 21
  6444   002850                     
  6445                           ;../rc_servo.c: 58: void write16bitTMR0val(unsigned int tmp);../rc_servo.c: 59: {;../rc_
      +                          servo.c: 60:     TMR0H=tmp>>8;
  6446   002850  5002               	movf	(write16bitTMR0val@tmp+1)^0,w,c
  6447   002852  6ED4               	movwf	212,c	;volatile
  6448   002854                     
  6449                           ;../rc_servo.c: 61:     TMR0L=tmp;
  6450   002854  C001  FFD3         	movff	write16bitTMR0val@tmp,4051	;volatile
  6451   002858  0012               	return		;funcret
  6452   00285A                     __end_of_write16bitTMR0val:
  6453                           	callstack 0
  6454                           
  6455                           	psect	rparam
  6456   000000                     
  6457                           	psect	temp
  6458   00005D                     btemp:
  6459                           	callstack 0
  6460   00005D                     	ds	1
  6461   000000                     int$flags	set	btemp
  6462   000000                     wtemp8	set	btemp+1
  6463   000000                     ttemp5	set	btemp+1
  6464   000000                     ttemp6	set	btemp+4
  6465   000000                     ttemp7	set	btemp+8
  6466                           
  6467                           	psect	idloc
  6468                           
  6469                           ;Config register IDLOC0 @ 0x200000
  6470                           ;	unspecified, using default values
  6471   200000                     	org	2097152
  6472   200000  0FFF               	dw	4095
  6473                           
  6474                           ;Config register IDLOC1 @ 0x200002
  6475                           ;	unspecified, using default values
  6476   200002                     	org	2097154
  6477   200002  0FFF               	dw	4095
  6478                           
  6479                           ;Config register IDLOC2 @ 0x200004
  6480                           ;	unspecified, using default values
  6481   200004                     	org	2097156
  6482   200004  0FFF               	dw	4095
  6483                           
  6484                           ;Config register IDLOC3 @ 0x200006
  6485                           ;	unspecified, using default values
  6486   200006                     	org	2097158
  6487   200006  0FFF               	dw	4095
  6488                           
  6489                           ;Config register IDLOC4 @ 0x200008
  6490                           ;	unspecified, using default values
  6491   200008                     	org	2097160
  6492   200008  0FFF               	dw	4095
  6493                           
  6494                           ;Config register IDLOC5 @ 0x20000A
  6495                           ;	unspecified, using default values
  6496   20000A                     	org	2097162
  6497   20000A  0FFF               	dw	4095
  6498                           
  6499                           ;Config register IDLOC6 @ 0x20000C
  6500                           ;	unspecified, using default values
  6501   20000C                     	org	2097164
  6502   20000C  0FFF               	dw	4095
  6503                           
  6504                           ;Config register IDLOC7 @ 0x20000E
  6505                           ;	unspecified, using default values
  6506   20000E                     	org	2097166
  6507   20000E  0FFF               	dw	4095
  6508                           
  6509                           	psect	config
  6510                           
  6511                           ;Config register CONFIG1L @ 0x300000
  6512                           ;	External Oscillator mode Selection bits
  6513                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6514                           ;	Power-up default value for COSC bits
  6515                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6516   300000                     	org	3145728
  6517   300000  AA                 	db	170
  6518                           
  6519                           ;Config register CONFIG1H @ 0x300001
  6520                           ;	unspecified, using default values
  6521                           ;	Clock Out Enable bit
  6522                           ;	CLKOUTEN = 0x1, unprogrammed default
  6523                           ;	Clock Switch Enable bit
  6524                           ;	CSWEN = 0x1, unprogrammed default
  6525                           ;	Fail-Safe Clock Monitor Enable bit
  6526                           ;	FCMEN = 0x1, unprogrammed default
  6527   300001                     	org	3145729
  6528   300001  FF                 	db	255
  6529                           
  6530                           ;Config register CONFIG2L @ 0x300002
  6531                           ;	unspecified, using default values
  6532                           ;	Master Clear Enable bit
  6533                           ;	MCLRE = 0x1, unprogrammed default
  6534                           ;	Power-up Timer Enable bit
  6535                           ;	PWRTE = 0x1, unprogrammed default
  6536                           ;	Low-power BOR enable bit
  6537                           ;	LPBOREN = 0x1, unprogrammed default
  6538                           ;	Brown-out Reset Enable bits
  6539                           ;	BOREN = 0x3, unprogrammed default
  6540   300002                     	org	3145730
  6541   300002  FF                 	db	255
  6542                           
  6543                           ;Config register CONFIG2H @ 0x300003
  6544                           ;	unspecified, using default values
  6545                           ;	Brown Out Reset Voltage selection bits
  6546                           ;	BORV = 0x3, unprogrammed default
  6547                           ;	ZCD Disable bit
  6548                           ;	ZCD = 0x1, unprogrammed default
  6549                           ;	PPSLOCK bit One-Way Set Enable bit
  6550                           ;	PPS1WAY = 0x1, unprogrammed default
  6551                           ;	Stack Full/Underflow Reset Enable bit
  6552                           ;	STVREN = 0x1, unprogrammed default
  6553                           ;	Debugger Enable bit
  6554                           ;	DEBUG = 0x1, unprogrammed default
  6555                           ;	Extended Instruction Set Enable bit
  6556                           ;	XINST = 0x1, unprogrammed default
  6557   300003                     	org	3145731
  6558   300003  FF                 	db	255
  6559                           
  6560                           ;Config register CONFIG3L @ 0x300004
  6561                           ;	WDT Period Select bits
  6562                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6563                           ;	WDT operating mode
  6564                           ;	WDTE = OFF, WDT Disabled
  6565   300004                     	org	3145732
  6566   300004  9F                 	db	159
  6567                           
  6568                           ;Config register CONFIG3H @ 0x300005
  6569                           ;	unspecified, using default values
  6570                           ;	WDT Window Select bits
  6571                           ;	WDTCWS = 0x7, unprogrammed default
  6572                           ;	WDT input clock selector
  6573                           ;	WDTCCS = 0x7, unprogrammed default
  6574   300005                     	org	3145733
  6575   300005  FF                 	db	255
  6576                           
  6577                           ;Config register CONFIG4L @ 0x300006
  6578                           ;	unspecified, using default values
  6579                           ;	Write Protection Block 0
  6580                           ;	WRT0 = 0x1, unprogrammed default
  6581                           ;	Write Protection Block 1
  6582                           ;	WRT1 = 0x1, unprogrammed default
  6583                           ;	Write Protection Block 2
  6584                           ;	WRT2 = 0x1, unprogrammed default
  6585                           ;	Write Protection Block 3
  6586                           ;	WRT3 = 0x1, unprogrammed default
  6587                           ;	Write Protection Block 3
  6588                           ;	WRT4 = 0x1, unprogrammed default
  6589                           ;	Write Protection Block 3
  6590                           ;	WRT5 = 0x1, unprogrammed default
  6591                           ;	Write Protection Block 3
  6592                           ;	WRT6 = 0x1, unprogrammed default
  6593                           ;	Write Protection Block 3
  6594                           ;	WRT7 = 0x1, unprogrammed default
  6595   300006                     	org	3145734
  6596   300006  FF                 	db	255
  6597                           
  6598                           ;Config register CONFIG4H @ 0x300007
  6599                           ;	unspecified, using default values
  6600                           ;	Configuration Register Write Protection bit
  6601                           ;	WRTC = 0x1, unprogrammed default
  6602                           ;	Boot Block Write Protection bit
  6603                           ;	WRTB = 0x1, unprogrammed default
  6604                           ;	Data EEPROM Write Protection bit
  6605                           ;	WRTD = 0x1, unprogrammed default
  6606                           ;	Scanner Enable bit
  6607                           ;	SCANE = 0x1, unprogrammed default
  6608                           ;	Low Voltage Programming Enable bit
  6609                           ;	LVP = 0x1, unprogrammed default
  6610   300007                     	org	3145735
  6611   300007  FF                 	db	255
  6612                           
  6613                           ;Config register CONFIG5L @ 0x300008
  6614                           ;	unspecified, using default values
  6615                           ;	UserNVM Program Memory Code Protection bit
  6616                           ;	CP = 0x1, unprogrammed default
  6617                           ;	DataNVM Memory Code Protection bit
  6618                           ;	CPD = 0x1, unprogrammed default
  6619   300008                     	org	3145736
  6620   300008  FF                 	db	255
  6621                           
  6622                           ;Config register CONFIG5H @ 0x300009
  6623                           ;	unspecified, using default values
  6624   300009                     	org	3145737
  6625   300009  FF                 	db	255
  6626                           
  6627                           ;Config register CONFIG6L @ 0x30000A
  6628                           ;	unspecified, using default values
  6629                           ;	Table Read Protection Block 0
  6630                           ;	EBTR0 = 0x1, unprogrammed default
  6631                           ;	Table Read Protection Block 1
  6632                           ;	EBTR1 = 0x1, unprogrammed default
  6633                           ;	Table Read Protection Block 2
  6634                           ;	EBTR2 = 0x1, unprogrammed default
  6635                           ;	Table Read Protection Block 3
  6636                           ;	EBTR3 = 0x1, unprogrammed default
  6637                           ;	Table Read Protection Block 4
  6638                           ;	EBTR4 = 0x1, unprogrammed default
  6639                           ;	Table Read Protection Block 5
  6640                           ;	EBTR5 = 0x1, unprogrammed default
  6641                           ;	Table Read Protection Block 6
  6642                           ;	EBTR6 = 0x1, unprogrammed default
  6643                           ;	Table Read Protection Block 7
  6644                           ;	EBTR7 = 0x1, unprogrammed default
  6645   30000A                     	org	3145738
  6646   30000A  FF                 	db	255
  6647                           
  6648                           ;Config register CONFIG6H @ 0x30000B
  6649                           ;	unspecified, using default values
  6650                           ;	Boot Block Table Read Protection bit
  6651                           ;	EBTRB = 0x1, unprogrammed default
  6652   30000B                     	org	3145739
  6653   30000B  FF                 	db	255
  6654                           tosu	equ	0xFFF
  6655                           tosh	equ	0xFFE
  6656                           tosl	equ	0xFFD
  6657                           stkptr	equ	0xFFC
  6658                           pclatu	equ	0xFFB
  6659                           pclath	equ	0xFFA
  6660                           pcl	equ	0xFF9
  6661                           tblptru	equ	0xFF8
  6662                           tblptrh	equ	0xFF7
  6663                           tblptrl	equ	0xFF6
  6664                           tablat	equ	0xFF5
  6665                           prodh	equ	0xFF4
  6666                           prodl	equ	0xFF3
  6667                           indf0	equ	0xFEF
  6668                           postinc0	equ	0xFEE
  6669                           postdec0	equ	0xFED
  6670                           preinc0	equ	0xFEC
  6671                           plusw0	equ	0xFEB
  6672                           fsr0h	equ	0xFEA
  6673                           fsr0l	equ	0xFE9
  6674                           wreg	equ	0xFE8
  6675                           indf1	equ	0xFE7
  6676                           postinc1	equ	0xFE6
  6677                           postdec1	equ	0xFE5
  6678                           preinc1	equ	0xFE4
  6679                           plusw1	equ	0xFE3
  6680                           fsr1h	equ	0xFE2
  6681                           fsr1l	equ	0xFE1
  6682                           bsr	equ	0xFE0
  6683                           indf2	equ	0xFDF
  6684                           postinc2	equ	0xFDE
  6685                           postdec2	equ	0xFDD
  6686                           preinc2	equ	0xFDC
  6687                           plusw2	equ	0xFDB
  6688                           fsr2h	equ	0xFDA
  6689                           fsr2l	equ	0xFD9
  6690                           status	equ	0xFD8

Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     90      92
    BANK0           160     27     150
    BANK1           256    156     156
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2218$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 50
		 -> main@readout(BANK1[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2165$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2165$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 50
		 -> main@readout(BANK1[50]), 

    motor_action@r	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_action@l	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_135@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_135@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_135@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    spin_180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    spin_180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    spin_180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    spin_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    left_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    left_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    left_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    left_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    right_90@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    right_90@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    right_90@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    right_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    reverse@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    S579DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(ABS[1]), LATE(ABS[1]), 

    S579DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    color_processor_hard@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_processor_easy@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), 

    color_read@rgb	PTR struct RGB_val size(2) Largest target is 8
		 -> main@RGB_recorded(BANK1[8]), main@RGB_calibrated(BANK1[8]), 


Critical Paths under _main in COMRAM

    _stop->_setMotorPWM
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _motor_action->_left_135
    _motor_action->_left_90
    _motor_action->_reverse
    _motor_action->_right_135
    _motor_action->_right_90
    _motor_action->_spin_180
    _spin_180->_setMotorPWM
    _right_90->_setMotorPWM
    _right_135->_setMotorPWM
    _reverse->_setMotorPWM
    _left_90->_setMotorPWM
    _left_135->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _color_read->_color_read_Blue
    _color_read->_color_read_Green
    _color_read->_color_read_Luminosity
    _color_read->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Luminosity->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_write16bitTMR0val

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               209   209      0   36855
                                             25 BANK0      2     2      0
                                              0 BANK1    156   156      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
               _color_processor_easy
               _color_processor_hard
                         _color_read
                            _forward
                    _initDCmotorsPWM
                         _initUSART4
                       _motor_action
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 7     3      4    2947
                                             27 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    15     12    5570
                                              0 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5219
                                             82 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    4869
                                             64 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3649
                                             29 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             18 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                             11 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              2 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             20 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              2 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              2 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     143
                                              3 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _motor_action                                         8     2      6   19012
                                             35 COMRAM     8     2      6
                           _left_135
                            _left_90
                            _reverse
                          _right_135
                           _right_90
                           _spin_180
 ---------------------------------------------------------------------------------
 (2) _spin_180                                             8     4      4    2947
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_90                                             8     4      4    3099
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _right_135                                            8     4      4    2947
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse                                              8     4      4    3099
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_90                                              8     4      4    3099
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _left_135                                             8     4      4    2947
                                             27 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                              6     2      4    2947
                                             27 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    2551
                                             16 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                              8 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read                                           4     2      2     692
                                             13 COMRAM     4     2      2
                    _color_read_Blue
                   _color_read_Green
              _color_read_Luminosity
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Luminosity                                7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              3 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_processor_hard                                10     8      2     346
                                              2 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _color_processor_easy                                10     8      2     346
                                              2 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              4 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              3 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0     196
                  _write16bitTMR0val
 ---------------------------------------------------------------------------------
 (10) _write16bitTMR0val                                   2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_processor_easy
   _color_processor_hard
   _color_read
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Luminosity
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _motor_action
     _left_135
       _setMotorPWM
     _left_90
       _setMotorPWM
     _reverse
       _setMotorPWM
     _right_135
       _setMotorPWM
     _right_90
       _setMotorPWM
     _spin_180
       _setMotorPWM
   _sendStringSerial4
     _sendCharSerial4
   _setMotorPWM
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
   _stop
     _setMotorPWM

 _HighISR (ROOT)
   _write16bitTMR0val

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      56        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     9C      9C       7       60.9%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1B      96       5       93.8%
BITBIGSFRllllhh     91      0       0      40        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5A      5C       1       97.9%
BITBIGSFRllllll     32      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      49        0.0%
BITBIGSFRllllll     26      0       0      54        0.0%
BITBIGSFRllllhl     20      0       0      43        0.0%
BITBIGSFRhhhlh      1B      0       0      33        0.0%
BITBIGSFRhhl        17      0       0      35        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRhllh       11      0       0      37        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      44        0.0%
BITBIGSFRllllll      B      0       0      52        0.0%
BITBIGSFRllllll      9      0       0      51        0.0%
BITBIGSFRllllhh      8      0       0      41        0.0%
BITBIGSFRllllll      6      0       0      53        0.0%
BITBIGSFRllllll      6      0       0      48        0.0%
BITBIGSFRllllll      5      0       0      47        0.0%
BITBIGSFRhlll        5      0       0      38        0.0%
BITBIGSFRllllll      3      0       0      50        0.0%
BITBIGSFRllllll      3      0       0      46        0.0%
BITBIGSFRllh         2      0       0      39        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRllllhl      1      0       0      42        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     18E      55        0.0%
DATA                 0      0     18E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Dec 10 13:08:32 2022

               _color_read_Red 249A                _color_read_Blue 258A                             l33 23F4  
                           l42 24E8                             l51 1E38                             l36 27A8  
                           l45 2588                             l39 2538                             l48 25D8  
                           l65 1CD4                             l58 1D92                             l92 273A  
                           l95 273C                             l98 2762                   ___awdiv@sign 000E  
          ___wmul@multiplicand 0005               _color_read_Green 253A              ??_Interrupts_init 0003  
                          l101 284E                            l110 2824                            l104 283A  
                          l113 26A0                            l107 2844                            l322 2830  
                          l244 1514                            l333 27C8                            l237 265E  
                          l254 2320                            l264 1EDC                            l184 0F34  
                          l249 2296                            l185 0F48                            l274 2022  
                          l522 1800                            l259 2166                            l284 2208  
                          l269 1F80                            l509 169C                            l374 27E6  
                          l279 20C4                            l383 2804                            l392 2710  
                          l297 1A88                            l626 1C16                            l386 2818  
                          l395 2788              motor_action@color 0024                            u800 1AAE  
                          u801 1AAA                            u810 1AD6                            u811 1AD2  
                          u900 165C                            u820 1B0C                            u901 1658  
                          u821 1B08                            u910 16B0                            u830 261C  
                          u911 16AC                            u831 2618                            u840 1528  
                          u920 16E2                            u841 1524                            u921 16DE  
                          u850 155A                            u930 1720                            u851 1556  
                          u931 171C                            u940 174A                            u861 1584  
                          u941 1746                            u870 15A8                            u950 1778  
                          u790 1A9C                            u871 15A4                            u951 1774  
                          u791 1A98                            u880 15D2                            u960 17C0  
                          u881 15CE                            u961 17BC                            u890 1612  
                          u970 2330                            u891 160E                            u971 232C  
                          u980 2386                            u981 2382                            u990 26BC  
                          u991 26B8                            _abs 26A2                            _pad 2322  
                          wreg 000FE8                           l1104 1152                           l1106 115A  
                         l1107 11A0                           l1131 2498                           ?_abs 0015  
                         l2101 174A                           l2021 1AB8                           l1125 195E  
                         l1150 1B52                           l1118 1340                           l2111 17C0  
                         l2103 1778                           l1135 26D8                           l2023 1AD6  
                         l2015 1A8A                           l2031 25E6                           l2041 1528  
                         l2113 17E0                           l2105 1798                           l1161 285A  
                         l2025 1B0C                           l2017 1A9C                           l2033 25F8  
                         l2121 233C                           l2201 1162                           l1073 2446  
                         l1138 26E0                           l2051 157E                           l2043 1548  
                         l2107 17AA                           l2131 26A2                           l2019 1AAE  
                         l2035 25FC                           l2123 2350                           l2211 119C  
                         l2203 1172                           l2141 2780                           l2061 15D2  
                         l2053 158A                           l2045 154C                           l2037 1516  
                         l2109 17B0                           l2133 26BC                           l2029 25DA  
                         l2125 2364                           l2117 2322                           l2221 123E  
                         l2213 11A8                           l2205 1178                           l2301 18F0  
                         l1158 261C                           l2135 273C                           l2151 1B6E  
                         l2071 1646                           l2063 15E4                           l2055 15A8  
                         l2047 155A                           l2039 151A                           l2127 2368  
                         l1095 2344                           l2119 2330                           l2231 12FA  
                         l2223 1244                           l2215 11B0                           l2207 1188  
                         l2321 2724                           l2137 274C                           l2241 2846  
                         l2161 1B94                           l2153 1B72                           l2145 1B54  
                         l2401 1EFE                           l2065 1612                           l2057 15B0  
                         l2073 164C                           l2049 157A                           l2081 169E  
                         l2129 2386                           l2233 130A                           l2217 11B6  
                         l2225 12A8                           l2209 1194                           l2305 1920  
                         l2323 2726                           l2315 2712                           l2243 284A  
                         l2251 2840                           l2331 2530                           l2171 1BCA  
                         l2163 1BA6                           l2155 1B80                           l2147 1B58  
                         l2139 2764                           l2411 1F20                           l2075 165C  
                         l2067 1632                           l2059 15C4                           l2091 16E2  
                         l2083 16A2                           l1099 239A                           l2235 1310  
                         l2227 12C2                           l2219 1238                           l2325 2728  
                         l2317 271C                           l2245 281C                           l2261 266E  
                         l2253 2832                           l2341 253A                           l2173 1BE0  
                         l2165 1BAE                           l2181 1BF6                           l2157 1B88  
                         l2149 1B66                           l2421 1F68                           l2413 1F2C  
                         l2077 167C                           l2069 1634                           l2093 1702  
                         l2085 16B0                           l2237 1320                           l2229 12E0  
                         l2309 1932                           l2501 2454                           l2319 2722  
                         l2247 2820                           l2327 278C                           l2511 23A0  
                         l2263 2676                           l2255 2836                           l2343 2580  
                         l2335 249A                           l2183 1C06                           l2175 1BE8  
                         l2167 1BB6                           l2159 1B8C                           l2271 1342  
                         l2415 1F38                           l2407 1F06                           l2431 1FAA  
                         l2423 1F82                           l2095 1720                           l2087 16D0  
                         l2191 10E6                           l2503 2470                           l2249 283C  
                         l2521 23D0                           l2513 23AA                           l2601 1CCC  
                         l2265 269C                           l2257 2662                           l2329 24EA  
                         l2337 24E0                           l2185 1C0E                           l2177 1BEA  
                         l2169 1BC4                           l2281 1442                           l2273 135E  
                         l2417 1F40                           l2409 1F14                           l2361 20EE  
                         l2353 20C6                           l2441 1FE4                           l2433 1FB6  
                         l2425 1FA2                           l2097 1728                           l2089 16D4  
                         l2193 10FA                           l2505 2490                           l2531 23DA  
                         l2523 23D2                           l2515 23BA                           l2267 269E  
                         l2259 2666                           l2347 258A                           l2179 1BF0  
                         l2283 14AC                           l2275 13C0                           l2611 2646  
                         l2419 1F4C                           l2371 2132                           l2363 2106  
                         l2355 20E6                           l2443 1FF0                           l2435 1FC4  
                         l2099 173C                           l2195 110A                           l2291 1846  
                         l2621 27B2                           l2541 23E4                           l2533 23DC  
                         l2525 23D4                           l2517 23C4                           l2509 239C  
                         l2349 25D0                           l2277 1406                           l2613 265A  
                         l2605 261E                           l2373 214E                           l2365 2112  
                         l2461 2072                           l2445 200C                           l2437 1FD0  
                         l2701 1964                           l2197 112A                           l2189 10C6  
                         l2293 184A                           l2285 1802                           l2623 27BC  
                         l2551 23F0                           l2543 23E6                           l2535 23DE  
                         l2527 23D6                           l2519 23CE                           l2279 1426  
                         l2615 265C                           l2607 262E                           l2631 27D6  
                         l2471 2168                           l2367 211E                           l2463 207E  
                         l2455 204C                           l2447 2024                           l2391 1E94  
                         l2383 1E62                           l2375 1E3A                           l2439 1FDC  
                         l2711 1A04                           l2703 197C                           l2199 1146  
                         l2295 185A                           l2287 182A                           l2617 2826  
                         l2625 27C6                           l2553 23F2                           l2545 23E8  
                         l2537 23E0                           l2529 23D8                           l2561 1DF0  
                         l2609 2642                           l2633 27E0                           l2481 219E  
                         l2473 2188                           l2369 2126                           l2465 2086  
                         l2457 2058                           l2449 2044                           l2393 1E9C  
                         l2385 1E6E                           l2377 1E5A                           l2713 1A1C  
                         l2705 1994                           l2297 187A                           l2289 1838  
                         l2641 2408                           l2619 27AA                           l2547 23EA  
                         l2539 23E2                           l2571 1D3E                           l2563 1E08  
                         l2555 1D94                           l2635 27E2                           l2627 27CA  
                         l2491 21D6                           l2483 21AA                           l2467 2092  
                         l2459 2066                           l2395 1EA8                           l2387 1E7C  
                         l2707 19AC                           l2651 26E2                           l2299 189A  
                         l2643 2410                           l2549 23EC                           l2581 1D8A  
                         l2573 1D4A                           l2565 1CD6                           l2557 1DA8  
                         l2661 22B8                           l2637 27E4                           l2629 27D4  
                         l2493 21F2                           l2485 21B6                           l2469 20AE  
                         l2397 1EC4                           l2389 1E88                           l2709 19D8  
                         l2717 1A34                           l2653 26E6                           l2645 2418  
                         l2901 0E94                           l2575 1D60                           l2567 1D12  
                         l2591 1C80                           l2559 1DC0                           l2671 22E4  
                         l2487 21C2                           l2479 2190                           l2399 1EDE  
                         l2495 2804                           l2655 26F4                           l2647 2434  
                         l2639 23F6                           l2911 0EFA                           l2903 0EA0  
                         l2577 1D76                           l2569 1D28                           l2593 1C8C  
                         l2585 1C18                           l2673 22F0                           l2489 21CA  
                         l2497 2814                           l2657 26F8                           l2681 222A  
                         l2921 0F76                           l2913 0F02                           l2905 0ED6  
                         l2579 1D82                           l2595 1CA2                           l2587 1C54  
                         l2675 22F8                           l2667 22C0                           l2659 2298  
                         l2499 2448                           l2691 2256                           l2931 0FD0  
                         l2923 0F8A                           l2915 0F42                           l2907 0EE2  
                         l2597 1CB8                           l2589 1C6A                           l2677 2304  
                         l2669 22D8                           l2693 2262                           l2941 1030  
                         l2933 0FEC                           l2925 0F96                           l2917 0F4E  
                         l2909 0EF6                           l2861 0E12                           ?_pad 0013  
                         l2599 1CC4                           l2695 2270                           l2687 2232  
                         l2679 220A                           l2935 1006                           l2927 0FA4  
                         l2943 1038                           l2919 0F62                           l2871 0E2E  
                         l2863 0E16                           l2697 227C                           l2689 224A  
                         l2953 106E                           l2937 1022                           l2929 0FBC  
                         l2945 1050                           l2881 0E44                           l2873 0E32  
                         l2865 0E22                           l2699 1960                           l2955 109C  
                         l2947 1066                           l2939 1028                           l2891 0E70  
                         l2883 0E4C                           l2875 0E32                           l2867 0E26  
                         l2957 10A2                           l2893 0E74                           l2885 0E50  
                         l2877 0E38                           l2869 0E2A                           l2895 0E7C  
                         l2887 0E58                           l2879 0E3C                           l2897 0E88  
                         l2889 0E5C                           l2979 1A4A                           l2899 0E94  
                         STR_1 0E01                           u1000 274C                           u1001 2748  
                         u1010 2762                           u1011 275E                           u1020 1B66  
                         u1100 110A                           u1021 1B62                           u1101 1106  
                         u1030 1B80                           u1110 1146                           u1031 1B7C  
                         u1111 1142                           u1040 1BA6                           u1200 135E  
                         u1120 1172                           u1041 1BA2                           u1201 135A  
                         u1121 116E                           u1050 1BC4                           u1210 1442  
                         u1130 1188                           u1051 1BC0                           u1211 143E  
                         u1131 1184                           u1060 1BE0                           u1300 200C  
                         u1140 12C2                           u1061 1BDC                           u1301 2008  
                         u1141 12BE                           u1070 1C06                           u1310 20AE  
                         u1150 12E0                           u1071 1C02                           u1311 20AA  
                         u1151 12DC                           u1400 1C80                           u1224 149C  
                         u1320 21F2                           u1160 12FA                           u1080 10F6  
                         u1240 182A                           u1401 1C7C                           u1225 1498  
                         u1321 21EE                           u1161 12F6                           u1081 10F0  
                         u1241 1826                           u1410 1CA2                           u1234 1506  
                         u1330 2814                           u1170 130A                           u1090 10F8  
                         u1250 187A                           u1411 1C9E                           u1235 1502  
                         u1331 2810                           u1171 1306                           u1251 1876  
                         u1420 1CB8                           u1180 268A                           u1260 189A  
                         u1340 2490                           u1421 1CB4                           u1181 2682  
                         u1261 1896                           u1341 248C                           u1350 1D28  
                         u1270 214E                           u1430 2710                           u1351 1D24  
                         u1271 214A                           u1431 270C                           u1360 1D3E  
                         u1440 2320                           u1280 1EC4                           u1600 0F76  
                 _BAUD4CONbits 000EE9                           u1361 1D3A                           u1441 231C  
                         u1281 1EC0                           u1601 0F72                           _LATE 000F7D  
                         u1370 1D60                           u1290 1F68                           u1450 2296  
                         u1610 0FA4                           u1371 1D5C                           u1291 1F64  
                         u1451 2292                           u1611 0FA0                           _LATG 000F7F  
                         u1380 1D76                           u1620 1066                           u1381 1D72  
                         u1621 1062                           u1390 1C6A                           u1198 268C  
                         u1630 10BE                           u1391 1C66                           u1631 10BA  
                         u1560 0EF6                           u1561 0EF2                           u1570 0F20  
                         _T2PR 000FBC                           u1707 2080                           u1571 0F16  
                         u1580 0F34                           u1717 20B8                           u1581 0F30  
                         u1590 0F42                           u1807 1DE2                           u1727 2120  
                         u1647 1044                           u1591 0F3E                           u1817 1E12  
                         u1737 2158                           u1657 2268                           u1578 0F24  
                         u1827 23B0                           u1747 1F3A                           u1667 1FDE  
                         u1757 1F72                           u1677 2016                           u1767 21C4  
                         u1687 1E96                           u1777 21FC                           u1697 1ECE  
                         u1787 22F2                           u1797 1DB2                    main@readout 0100  
                         abs@a 0015                           _dbuf 00BB                           _main 0E12  
                         _dtoa 10C6                           _prec 00B2                           pad@i 001A  
                         pad@p 0017                           fsr1h 000FE2                           fsr2h 000FDA  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         pad@w 001C                           fsr2l 000FD9                           btemp 005D  
                         _stop 220A                           prodh 000FF4                           prodl 000FF3  
                         start 0054         __end_of_color_read_Red 24EA                __end_of_HighISR 0054  
                 ___param_bank 000000                          ??_abs 0017                          ??_pad 0019  
              __end_of___aodiv 169E                          ?_main 0001                          ?_dtoa 001E  
              __end_of___aomod 1802                __end_of___awdiv 1C18        ??_color_read_Luminosity 0009  
                        ?_stop 001C                ___awdiv@divisor 000B                          i2l330 0050  
                        i2l336 2858                ___awdiv@counter 000D                   vfpfcnvrt@fmt 0043  
                        _TMR0H 000FD4                          _TMR0L 000FD3        __end_of_sendCharSerial4 281A  
   __end_of_I2C_2_Master_Start 2850     __end_of_I2C_2_Master_Write 2826                __end_of_left_90 1F82  
                        _flags 00B8                          _fputc 1A8A                __end_of_forward 2322  
                        _fputs 25DA                          pad@fp 0013                          _width 00B0  
                        _putch 285A                          main@j 0174                          main@k 0178  
                        dtoa@d 0020                          dtoa@i 003E                          dtoa@n 0036  
                        dtoa@p 0032                          dtoa@s 0040                          dtoa@w 0034  
                        tablat 000FF5                __end_of_reverse 2168                          ttemp5 005E  
                        ttemp6 0061                          ttemp7 0065                          stop@i 0021  
                        status 000FD8                          wtemp8 005E                __end_of_sprintf 2448  
      __end_of_color_read_Blue 25DA          _I2C_2_Master_RepStart 2832                ?_color_read_Red 0007  
              __initialization 27E8                   __end_of_main 10C6                   __end_of_dtoa 1342  
                 __end_of_stop 2298                         ??_main 00F4                         ??_dtoa 0028  
                       ??_stop 0020                  __activetblptr 000003                   ?_setMotorPWM 0011  
                       ?_fputc 0003                         ?_fputs 000C               ___awdiv@dividend 0009  
                       ?_putch 0001                         _RC0PPS 000E62                         _RC4REG 000EE3  
                       _RE2PPS 000E74                         _RD5PPS 000E6F                         _RC7PPS 000E69  
                       _RD6PPS 000E70                         i2l2723 2850                         i2l2725 2854  
                       i2l2831 0036                         i2l2833 003C                         i2l2825 000A  
                       i2l2835 004A                         i2l2827 001A                         i2l2829 0028  
                       i2l2837 004C                      ??_HighISR 0003       __end_of_color_click_init 23F6  
                       _RX4PPS 000E15                         _TX4REG 000EE4                  ??_Timer0_init 0003  
    color_processor_easy@color 0005      color_processor_hard@color 0005                   vfprintf@cfmt 0059  
             __end_of_left_135 220A                      ??___aodiv 0013                      ??___aomod 0013  
                       ___wmul 2764                      ??___awdiv 000D                         clear_0 27EE  
             ___awdiv@quotient 000F                         isa$std 000001                         pad@buf 0015  
                       dtoa@fp 001E                  main@time_flag 0170                      ??_left_90 0020  
             __end_of_right_90 1EDE                  main@time_path 0132                         fputc@c 0003  
                       fputs@c 0010                         fputs@i 0011                         fputs@s 000C  
                    ??_forward 0020               __end_of_spin_180 2024                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
             ?_sendCharSerial4 0001                      ??_reverse 0020                         putch@c 0001  
             __end_of_vfprintf 249A                         stop@mL 001C                         stop@mR 001E  
            ??_initDCmotorsPWM 0005                      ??_sprintf 005B                     __accesstop 0060  
      __end_of__initialization 27F8       __end_of_color_read_Green 258A         ?_I2C_2_Master_RepStart 0001  
                ___rparam_used 000001               ?_color_read_Blue 0007                _Interrupts_init 2826  
               __pcstackCOMRAM 0001                  color_read@rgb 000E                  __end_of_fputc 1B54  
                __end_of_fputs 261E                  __end_of_putch 285C            __end_of_Timer0_init 27CA  
                      ??_fputc 0007                        ??_fputs 0010                        ??_putch 0003  
                   __pbssBANK0 0060              _color_writetoaddr 278A                   _T2CLKCONbits 000FBF  
           ?_color_writetoaddr 0005                        ?___wmul 0003                 main@color_flag 016E  
               main@color_name 0176                 main@color_path 0150                    right_135@mL 001C  
                  right_135@mR 001E            ??_color_writetoaddr 0006  __end_of_color_read_Luminosity 253A  
                      _SP4BRGH 000EE6                        _SP4BRGL 000EE5                        _PWM6DCH 000FA3  
                      _PWM7DCH 000FA0                        _SSP2ADD 000ED6                        _SSP2BUF 000ED5  
                    ?_left_135 001C                     _color_read 1D94        __end_of_Interrupts_init 2832  
       color_writetoaddr@value 0005               ??_color_read_Red 0009                        _HighISR 0008  
    __end_of_color_writetoaddr 27AA       color_read_Luminosity@tmp 000C             _I2C_2_Master_Start 2846  
                   _initUSART4 27CA             _I2C_2_Master_Write 281A                      ?_right_90 001C  
                      __Hparam 0000                        __Lparam 0000              color_read_Red@tmp 000C  
                  _Timer0_init 27AA                      ?_spin_180 001C        sendStringSerial4@string 0004  
                      ___aodiv 1516                        ___aomod 169E                        ___awdiv 1B54  
          ?_I2C_2_Master_Start 0001            ?_I2C_2_Master_Write 0001                     _off_period 00B4  
                    ?_vfprintf 0053                   __psmallconst 0E00                        __pcinit 27E8  
                      __ramtop 0E00                        __ptext0 0E12                        __ptext1 220A  
                      __ptext2 23F6                        __ptext3 2448                        __ptext4 1802  
                      __ptext5 10C6                        __ptext6 2322                        __ptext7 25DA  
                      __ptext8 1A8A                        __ptext9 285A                        _left_90 1EDE  
                    _T2CONbits 000FBD                        _forward 2298                      _T2HLTbits 000FBE  
                ?_motor_action 0024                        _reverse 20C6                  _RxBufWriteCnt 005C  
                      _sprintf 23F6           ??_I2C_2_Master_Start 0004                     ??_left_135 0020  
         ??_I2C_2_Master_Write 0004           end_of_initialization 27F8              __end_of_right_135 20C6  
           setMotorPWM@PWMduty 001A                        fputc@fp 0005                        fputs@fp 000E  
            ?_color_click_init 0001   __end_of_color_processor_easy 1D94   __end_of_color_processor_hard 1CD6  
                   ??_right_90 0020             ??_color_click_init 0007              __end_of_vfpfcnvrt 1960  
                   ??_spin_180 0020                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
             vfpfcnvrt@convarg 0049                     ??_vfprintf 0059                _initDCmotorsPWM 261E  
                    _PORTFbits 000F8E                 ??_motor_action 002A                      _TRISCbits 000F83  
                    _TRISDbits 000F84                      _TRISEbits 000F85                      _TRISFbits 000F86  
                    _TRISGbits 000F87                      _TRISHbits 000F88                    ?_color_read 000E  
     color_writetoaddr@address 0006        ??_I2C_2_Master_RepStart 0004               ?_Interrupts_init 0001  
                   left_135@mL 001C                     left_135@mR 001E                   _EUSART4RXbuf 009C  
                 _EUSART4TXbuf 0060              ?_color_read_Green 0007                    ?_initUSART4 0001  
    sendCharSerial4@charToSend 0003                     main@motorL 018A                     main@motorR 0193  
           ??_color_read_Green 0009                    vfpfcnvrt@ap 0045                    vfpfcnvrt@cp 0051  
                  vfpfcnvrt@fp 0041                 __end_of___wmul 278A            start_initialization 27E8  
                  __end_of_abs 26E2                    __end_of_pad 239C                  _TxBufWriteCnt 00BA  
          color_read_Green@tmp 000C        __end_of_initDCmotorsPWM 2660                    vfprintf@fmt 0055  
                     ??___wmul 0007                    __pbssCOMRAM 005B           _color_processor_easy 1CD6  
         _color_processor_hard 1C18                  __pcstackBANK0 00DB                  __pcstackBANK1 0100  
             ___aodiv@dividend 0003             main@RGB_calibrated 0182                       ?_HighISR 0001  
      color_processor_easy@rgb 0003        color_processor_hard@rgb 0003          color_processor_easy@a 0009  
        color_processor_easy@b 000B          color_processor_easy@c 0007          color_processor_hard@a 0009  
        color_processor_hard@b 000B          color_processor_hard@c 0007                      _dtoa$2246 0030  
         __end_of_motor_action 1A8A                   ?_Timer0_init 0001                      __pintcode 0008  
                     ?___aodiv 0003                       ?___aomod 0003                       ?___awdiv 0009  
             ___aodiv@quotient 0015                     right_135@i 0022                     right_90@mL 001C  
                   right_90@mR 001E           I2C_2_Master_Read@ack 0005           I2C_2_Master_Read@tmp 0006  
                     ?_left_90 001C                    __smallconst 0E00                       ?_forward 001C  
            _I2C_2_Master_Idle 273C          ?_color_processor_easy 0003          ?_color_processor_hard 0003  
             main@RGB_recorded 017A              _I2C_2_Master_Init 2712              _I2C_2_Master_Read 2660  
            _I2C_2_Master_Stop 283C                   _RxBufReadCnt 005B                       ?_reverse 001C  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 0013          _color_read_Luminosity 24EA             ?_I2C_2_Master_Stop 0001  
     initDCmotorsPWM@PWMperiod 0003                       ?_sprintf 00DB              _sendStringSerial4 26E2  
          ??_I2C_2_Master_Idle 0003            ??_I2C_2_Master_Init 0003            ??_I2C_2_Master_Read 0004  
               ___wmul@product 0007            ??_I2C_2_Master_Stop 0004                       _LATCbits 000F7B  
                     _LATDbits 000F7C                       _LATEbits 000F7D                       _LATFbits 000F7E  
                    _on_period 00B6                       _LATGbits 000F7F                       _LATHbits 000F80  
                    _right_135 2024                       _PIE0bits 000E29             ?_sendStringSerial4 0004  
                   spin_180@mL 001C                     spin_180@mR 001E                       i2u154_40 001A  
                     i2u154_41 0016                       i2u155_40 0028                       i2u155_41 0024  
                     _PIR0bits 000E33                       _PIR4bits 000E37               ?_initDCmotorsPWM 0003  
            ??_sendCharSerial4 0003                       _SSP2CON2 000EDA            ??_sendStringSerial4 0006  
                     _SSP2STAT 000ED8                      _vfpfcnvrt 1802      __end_of_I2C_2_Master_Idle 2764  
    __end_of_I2C_2_Master_Init 273C      __end_of_I2C_2_Master_Read 26A2              ___wmul@multiplier 0003  
    __end_of_I2C_2_Master_Stop 2846           write16bitTMR0val@tmp 0001                   setMotorPWM@m 0011  
  I2C_2_Master_Write@data_byte 0004                      left_135@i 0022              _write16bitTMR0val 2850  
                    left_90@mL 001C                      left_90@mR 001E              ??_color_read_Blue 0009  
                 _TxBufReadCnt 00B9             ?_write16bitTMR0val 0001                   ??_color_read 0010  
    __end_of_sendStringSerial4 2712  __end_of_I2C_2_Master_RepStart 283C             color_read_Blue@tmp 000C  
          ??_write16bitTMR0val 0003            __end_of_setMotorPWM 1516                     ?_right_135 001C  
                 ??_initUSART4 0003                       __Hrparam 0000                     vfprintf@ap 0057  
                     __Lrparam 0000                     vfprintf@fp 0053                      forward@mL 001C  
                    forward@mR 001E                     ?_vfpfcnvrt 0041             __end_of_color_read 1E3A  
              ___aodiv@divisor 000B                ___aodiv@counter 0013      __end_of_write16bitTMR0val 285A  
                   _ANSELDbits 000EA7         ??_color_processor_easy 0005         ??_color_processor_hard 0005  
                   _ANSELFbits 000EB4                     sprintf@fmt 00DD                     _T0CON0bits 000FD5  
                   _T0CON1bits 000FD6         ?_color_read_Luminosity 0007             __end_of_initUSART4 27E8  
                     __ptext10 26A2                       __ptext11 169E                       __ptext20 1EDE  
                     __ptext12 1516                       __ptext21 2168                       __ptext13 26E2  
                     __ptext30 24EA                       __ptext22 27CA                       __ptext14 2802  
                     __ptext31 253A                       __ptext23 261E                       __ptext15 1960  
                     __ptext40 283C                       __ptext32 258A                       __ptext24 2298  
                     __ptext16 1F82                       __ptext41 2846                       __ptext33 2832  
                     __ptext25 1342                       __ptext17 1E3A                       __ptext42 273C  
                     __ptext34 2660                       __ptext26 2764                       __ptext18 2024  
                     __ptext43 2712                       __ptext35 1C18                       __ptext27 1B54  
                     __ptext19 20C6                       __ptext44 27AA                       __ptext36 1CD6  
                     __ptext28 1D94                       __ptext45 2826                       __ptext37 239C  
                     __ptext29 249A                       __ptext38 278A                       __ptext47 2850  
                     __ptext39 281A                      right_90@i 0022                       _left_135 2168  
                 _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA                       _right_90 1E3A  
                    reverse@mL 001C                      reverse@mR 001E                      spin_180@i 0022  
                     _spin_180 1F82                       isa$xinst 000000                     _RC4STAbits 000EE7  
                     int$flags 005D                  motor_action@l 0026                  motor_action@r 0028  
                     _vfprintf 2448                       left_90@i 0022                       main@time 0172  
             ___aomod@dividend 0003                     _INTCONbits 000FF2                   _motor_action 1960  
                     forward@i 0020                    _setMotorPWM 1342                    _PWM6CONbits 000FA4  
                  _PWM7CONbits 000FA1                       intlevel2 0000                      sprintf@ap 00E7  
                  ??_right_135 0020                       reverse@i 0022                ___aomod@divisor 000B  
                  ??_vfpfcnvrt 0047                ___aomod@counter 0013               _color_click_init 239C  
                     sprintf@f 00E9                       sprintf@s 00DB                     _SSP2DATPPS 000E1D  
                   _SSP2CLKPPS 000E1C                     _TX4STAbits 000EE8                   ___aodiv@sign 0014  
              _sendCharSerial4 2802                   ___aomod@sign 0014  
